
STM32H756ZG_Nucleo_sandbox_FCDEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001474  0800f478  0800f478  00010478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108ec  080108ec  00012320  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080108ec  080108ec  000118ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108f4  080108f4  00012320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108f4  080108f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080108f8  080108f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080108fc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e0  08010adc  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000280  08010b7c  00012280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000bd8  20000320  08010c1c  00012320  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000ef8  08010c1c  00012ef8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00012320  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024fb7  00000000  00000000  00012350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033f1  00000000  00000000  00037307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ea8  00000000  00000000  0003a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017bc  00000000  00000000  0003c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000296ad  00000000  00000000  0003dd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ea43  00000000  00000000  00067409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fe586  00000000  00000000  00085e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001843d2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009ca4  00000000  00000000  00184418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  0018e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000320 	.word	0x20000320
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f45c 	.word	0x0800f45c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000324 	.word	0x20000324
 800020c:	0800f45c 	.word	0x0800f45c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b09c      	sub	sp, #112	@ 0x70
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a05 	vstr	s0, [r7, #20]
 800106a:	edc7 0a04 	vstr	s1, [r7, #16]
 800106e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001072:	edc7 1a02 	vstr	s3, [r7, #8]
 8001076:	ed87 2a01 	vstr	s4, [r7, #4]
 800107a:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800107e:	4bec      	ldr	r3, [pc, #944]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eeb1 7a67 	vneg.f32	s14, s15
 8001088:	edd7 7a05 	vldr	s15, [r7, #20]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	4be8      	ldr	r3, [pc, #928]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001092:	edd3 6a00 	vldr	s13, [r3]
 8001096:	edd7 7a04 	vldr	s15, [r7, #16]
 800109a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a2:	4be5      	ldr	r3, [pc, #916]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80010a4:	edd3 6a00 	vldr	s13, [r3]
 80010a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010bc:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80010c0:	4bde      	ldr	r3, [pc, #888]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ce:	4bd9      	ldr	r3, [pc, #868]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80010d0:	edd3 6a00 	vldr	s13, [r3]
 80010d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e0:	4bd5      	ldr	r3, [pc, #852]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80010e2:	edd3 6a00 	vldr	s13, [r3]
 80010e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80010fe:	4bcf      	ldr	r3, [pc, #828]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 8001100:	ed93 7a00 	vldr	s14, [r3]
 8001104:	edd7 7a04 	vldr	s15, [r7, #16]
 8001108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110c:	4bc8      	ldr	r3, [pc, #800]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800110e:	edd3 6a00 	vldr	s13, [r3]
 8001112:	edd7 7a03 	vldr	s15, [r7, #12]
 8001116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800111e:	4bc6      	ldr	r3, [pc, #792]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 8001120:	edd3 6a00 	vldr	s13, [r3]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001130:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001138:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800113c:	4bbf      	ldr	r3, [pc, #764]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	edd7 7a03 	vldr	s15, [r7, #12]
 8001146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114a:	4bb9      	ldr	r3, [pc, #740]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800114c:	edd3 6a00 	vldr	s13, [r3]
 8001150:	edd7 7a04 	vldr	s15, [r7, #16]
 8001154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800115c:	4bb5      	ldr	r3, [pc, #724]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 800115e:	edd3 6a00 	vldr	s13, [r3]
 8001162:	edd7 7a05 	vldr	s15, [r7, #20]
 8001166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001176:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800117a:	edd7 7a02 	vldr	s15, [r7, #8]
 800117e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d10e      	bne.n	80011a6 <MadgwickAHRSupdateIMU+0x146>
 8001188:	edd7 7a01 	vldr	s15, [r7, #4]
 800118c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d107      	bne.n	80011a6 <MadgwickAHRSupdateIMU+0x146>
 8001196:	edd7 7a00 	vldr	s15, [r7]
 800119a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	f000 81e5 	beq.w	8001570 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80011a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80011ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ba:	edd7 7a00 	vldr	s15, [r7]
 80011be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	f000 fa6d 	bl	80016a8 <invSqrt>
 80011ce:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		ax *= recipNorm;
 80011d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011d6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80011e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80011e6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 80011f2:	ed97 7a00 	vldr	s14, [r7]
 80011f6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fe:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001202:	4b8e      	ldr	r3, [pc, #568]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800120c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q1 = 2.0f * q1;
 8001210:	4b87      	ldr	r3, [pc, #540]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800121a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_2q2 = 2.0f * q2;
 800121e:	4b85      	ldr	r3, [pc, #532]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001228:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_2q3 = 2.0f * q3;
 800122c:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001236:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q0 = 4.0f * q0;
 800123a:	4b80      	ldr	r3, [pc, #512]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_4q1 = 4.0f * q1;
 800124c:	4b78      	ldr	r3, [pc, #480]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_4q2 = 4.0f * q2;
 800125e:	4b75      	ldr	r3, [pc, #468]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		_8q1 = 8.0f * q1;
 8001270:	4b6f      	ldr	r3, [pc, #444]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800127a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		_8q2 = 8.0f * q2;
 8001282:	4b6c      	ldr	r3, [pc, #432]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800128c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001290:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q0q0 = q0 * q0;
 8001294:	4b69      	ldr	r3, [pc, #420]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 8001296:	ed93 7a00 	vldr	s14, [r3]
 800129a:	4b68      	ldr	r3, [pc, #416]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q1q1 = q1 * q1;
 80012a8:	4b61      	ldr	r3, [pc, #388]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 80012aa:	ed93 7a00 	vldr	s14, [r3]
 80012ae:	4b60      	ldr	r3, [pc, #384]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		q2q2 = q2 * q2;
 80012bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80012be:	ed93 7a00 	vldr	s14, [r3]
 80012c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		q3q3 = q3 * q3;
 80012d0:	4b59      	ldr	r3, [pc, #356]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80012d2:	ed93 7a00 	vldr	s14, [r3]
 80012d6:	4b58      	ldr	r3, [pc, #352]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80012e4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80012e8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f0:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80012f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001300:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001304:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001310:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001314:	edd7 7a01 	vldr	s15, [r7, #4]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001320:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001324:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001328:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800132c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001330:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001334:	edd7 7a02 	vldr	s15, [r7, #8]
 8001338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001340:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001344:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001348:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800134c:	4b38      	ldr	r3, [pc, #224]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135a:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee37 7a67 	vsub.f32	s14, s14, s15
 800136a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800136e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001372:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001376:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800137a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001382:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001386:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800138a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001392:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001396:	edd7 7a00 	vldr	s15, [r7]
 800139a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80013a6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80013aa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80013ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013bc:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80013c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013cc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80013d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013dc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80013e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ec:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f4:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80013f8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001404:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001408:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800140c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001414:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001418:	edd7 7a00 	vldr	s15, [r7]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001428:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800142c:	e008      	b.n	8001440 <MadgwickAHRSupdateIMU+0x3e0>
 800142e:	bf00      	nop
 8001430:	2000033c 	.word	0x2000033c
 8001434:	20000340 	.word	0x20000340
 8001438:	20000344 	.word	0x20000344
 800143c:	20000004 	.word	0x20000004
 8001440:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001444:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001448:	4b91      	ldr	r3, [pc, #580]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001452:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001456:	edd7 7a02 	vldr	s15, [r7, #8]
 800145a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001462:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001466:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800146a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800146e:	4b88      	ldr	r3, [pc, #544]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001480:	edd7 7a01 	vldr	s15, [r7, #4]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001490:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001494:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001498:	edd7 7a08 	vldr	s15, [r7, #32]
 800149c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	f000 f8f2 	bl	80016a8 <invSqrt>
 80014c4:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		s0 *= recipNorm;
 80014c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014cc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 *= recipNorm;
 80014d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80014dc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80014e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ec:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80014f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80014fc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8001508:	4b62      	ldr	r3, [pc, #392]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 800150a:	ed93 7a00 	vldr	s14, [r3]
 800150e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800151a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot2 -= beta * s1;
 8001522:	4b5c      	ldr	r3, [pc, #368]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 8001524:	ed93 7a00 	vldr	s14, [r3]
 8001528:	edd7 7a08 	vldr	s15, [r7, #32]
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		qDot3 -= beta * s2;
 800153c:	4b55      	ldr	r3, [pc, #340]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	edd7 7a07 	vldr	s15, [r7, #28]
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		qDot4 -= beta * s3;
 8001556:	4b4f      	ldr	r3, [pc, #316]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 8001558:	ed93 7a00 	vldr	s14, [r3]
 800155c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001570:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001574:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 8001578:	ee27 7a87 	vmul.f32	s14, s15, s14
 800157c:	4b47      	ldr	r3, [pc, #284]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001586:	4b45      	ldr	r3, [pc, #276]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 8001588:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800158c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001590:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 8001594:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001598:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a2:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80015a8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80015ac:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 80015b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015b4:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 80015c0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80015c4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80015c8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 80015cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80015e0:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 80015f2:	edd3 6a00 	vldr	s13, [r3]
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001604:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 8001606:	edd3 6a00 	vldr	s13, [r3]
 800160a:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 800161a:	edd3 6a00 	vldr	s13, [r3]
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f000 f83a 	bl	80016a8 <invSqrt>
 8001634:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
	q0 *= recipNorm;
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 8001648:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 800165c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001660:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 8001670:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001682:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
}
 8001688:	bf00      	nop
 800168a:	3770      	adds	r7, #112	@ 0x70
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000344 	.word	0x20000344
 8001694:	20000000 	.word	0x20000000
 8001698:	3c23d70a 	.word	0x3c23d70a
 800169c:	20000004 	.word	0x20000004
 80016a0:	2000033c 	.word	0x2000033c
 80016a4:	20000340 	.word	0x20000340

080016a8 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0a01 	vstr	s0, [r7, #4]
	if (instability_fix == 0)
 80016b2:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <invSqrt+0xdc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d12d      	bne.n	8001716 <invSqrt+0x6e>
	{
		/* original code */
		float halfx = 0.5f * x;
 80016ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80016be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c6:	edc7 7a06 	vstr	s15, [r7, #24]
		float y = x;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	617b      	str	r3, [r7, #20]
		long i = *(long*)&y;
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
		i = 0x5f3759df - (i>>1);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	105a      	asrs	r2, r3, #1
 80016da:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <invSqrt+0xe0>)
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	613b      	str	r3, [r7, #16]
		y = *(float*)&i;
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	617b      	str	r3, [r7, #20]
		y = y * (1.5f - (halfx * y * y));
 80016e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80016ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001704:	edd7 7a05 	vldr	s15, [r7, #20]
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	edc7 7a05 	vstr	s15, [r7, #20]
		return y;
 8001710:	edd7 7a05 	vldr	s15, [r7, #20]
 8001714:	e030      	b.n	8001778 <invSqrt+0xd0>
	}
	else if (instability_fix == 1)
 8001716:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <invSqrt+0xdc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d120      	bne.n	8001760 <invSqrt+0xb8>
	{
		/* close-to-optimal  method with low cost from http://pizer.wordpress.com/2008/10/12/fast-inverse-square-root */
		unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	085a      	lsrs	r2, r3, #1
 8001724:	4b19      	ldr	r3, [pc, #100]	@ (800178c <invSqrt+0xe4>)
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
		float tmp = *(float*)&i;
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61fb      	str	r3, [r7, #28]
		return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
 8001732:	edd7 7a01 	vldr	s15, [r7, #4]
 8001736:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001790 <invSqrt+0xe8>
 800173a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001746:	edd7 7a07 	vldr	s15, [r7, #28]
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001794 <invSqrt+0xec>
 8001752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001756:	edd7 7a07 	vldr	s15, [r7, #28]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	e00b      	b.n	8001778 <invSqrt+0xd0>
	}
	else
	{
		/* optimal but expensive method: */
		return 1.0f / sqrtf(x);
 8001760:	edd7 7a01 	vldr	s15, [r7, #4]
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	f00d faec 	bl	800ed44 <sqrtf>
 800176c:	eeb0 7a40 	vmov.f32	s14, s0
 8001770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001774:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}
}
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	5f3759df 	.word	0x5f3759df
 800178c:	5f1f1412 	.word	0x5f1f1412
 8001790:	3f36d312 	.word	0x3f36d312
 8001794:	3fd851ff 	.word	0x3fd851ff

08001798 <adxl375_write>:

// Optional: for serial debug display
char x_char[6], y_char[6], z_char[6];

void adxl375_write(uint8_t reg, uint8_t value)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = reg;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, ADXL375_ADDRESS, data, 2, HAL_MAX_DELAY);
 80017b0:	f107 020c 	add.w	r2, r7, #12
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2302      	movs	r3, #2
 80017bc:	21a6      	movs	r1, #166	@ 0xa6
 80017be:	4803      	ldr	r0, [pc, #12]	@ (80017cc <adxl375_write+0x34>)
 80017c0:	f005 fcea 	bl	8007198 <HAL_I2C_Master_Transmit>
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000438 	.word	0x20000438

080017d0 <adxl375_read>:

uint8_t adxl375_read(uint8_t reg)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af04      	add	r7, sp, #16
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	f107 030f 	add.w	r3, r7, #15
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	21a6      	movs	r1, #166	@ 0xa6
 80017f6:	4804      	ldr	r0, [pc, #16]	@ (8001808 <adxl375_read+0x38>)
 80017f8:	f005 fefa 	bl	80075f0 <HAL_I2C_Mem_Read>
    return value;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000438 	.word	0x20000438

0800180c <adxl375_read_xyz>:

void adxl375_read_xyz(int16_t *x, int16_t *y, int16_t *z)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af04      	add	r7, sp, #16
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, ADXL375_REG_DATAX0, I2C_MEMADD_SIZE_8BIT, data_rec, 6, HAL_MAX_DELAY);
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	2306      	movs	r3, #6
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <adxl375_read_xyz+0x78>)
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	2232      	movs	r2, #50	@ 0x32
 800182a:	21a6      	movs	r1, #166	@ 0xa6
 800182c:	4816      	ldr	r0, [pc, #88]	@ (8001888 <adxl375_read_xyz+0x7c>)
 800182e:	f005 fedf 	bl	80075f0 <HAL_I2C_Mem_Read>

    *x = (int16_t)((data_rec[1] << 8) | data_rec[0]);
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <adxl375_read_xyz+0x78>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	b21b      	sxth	r3, r3
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b21a      	sxth	r2, r3
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <adxl375_read_xyz+0x78>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b21b      	sxth	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b21a      	sxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data_rec[3] << 8) | data_rec[2]);
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <adxl375_read_xyz+0x78>)
 800184c:	78db      	ldrb	r3, [r3, #3]
 800184e:	b21b      	sxth	r3, r3
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <adxl375_read_xyz+0x78>)
 8001856:	789b      	ldrb	r3, [r3, #2]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21a      	sxth	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data_rec[5] << 8) | data_rec[4]);
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <adxl375_read_xyz+0x78>)
 8001864:	795b      	ldrb	r3, [r3, #5]
 8001866:	b21b      	sxth	r3, r3
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <adxl375_read_xyz+0x78>)
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	b21b      	sxth	r3, r3
 8001872:	4313      	orrs	r3, r2
 8001874:	b21a      	sxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	801a      	strh	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000348 	.word	0x20000348
 8001888:	20000438 	.word	0x20000438

0800188c <adxl375_init>:

void adxl375_init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
    chipid = adxl375_read(ADXL375_REG_DEVID);  // Read device ID (should be 0xE5)
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff ff9d 	bl	80017d0 <adxl375_read>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <adxl375_init+0x30>)
 800189c:	701a      	strb	r2, [r3, #0]

    adxl375_write(ADXL375_REG_DATA_FORMAT, 0x0B); // (0x0B = 00001011)
 800189e:	210b      	movs	r1, #11
 80018a0:	2031      	movs	r0, #49	@ 0x31
 80018a2:	f7ff ff79 	bl	8001798 <adxl375_write>
    adxl375_write(ADXL375_REG_BW_RATE, 0x0A);     // Set Output Data Rate to 100 Hz (0x0A = 00001010)
 80018a6:	210a      	movs	r1, #10
 80018a8:	202c      	movs	r0, #44	@ 0x2c
 80018aa:	f7ff ff75 	bl	8001798 <adxl375_write>
    adxl375_write(ADXL375_REG_POWER_CTL, 0x08);   // Set Measure bit (00001000)
 80018ae:	2108      	movs	r1, #8
 80018b0:	202d      	movs	r0, #45	@ 0x2d
 80018b2:	f7ff ff71 	bl	8001798 <adxl375_write>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000034e 	.word	0x2000034e

080018c0 <adxl375_write_offsets>:
    }
}

// New functions for offset registers
void adxl375_write_offsets(int8_t ofx, int8_t ofy, int8_t ofz)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	460b      	mov	r3, r1
 80018cc:	71bb      	strb	r3, [r7, #6]
 80018ce:	4613      	mov	r3, r2
 80018d0:	717b      	strb	r3, [r7, #5]
    adxl375_write(ADXL375_REG_OFSX, (uint8_t)ofx);
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4619      	mov	r1, r3
 80018d6:	201e      	movs	r0, #30
 80018d8:	f7ff ff5e 	bl	8001798 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSY, (uint8_t)ofy);
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	4619      	mov	r1, r3
 80018e0:	201f      	movs	r0, #31
 80018e2:	f7ff ff59 	bl	8001798 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSZ, (uint8_t)ofz);
 80018e6:	797b      	ldrb	r3, [r7, #5]
 80018e8:	4619      	mov	r1, r3
 80018ea:	2020      	movs	r0, #32
 80018ec:	f7ff ff54 	bl	8001798 <adxl375_write>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <adxl375_read_offsets>:

void adxl375_read_offsets(int8_t *ofx, int8_t *ofy, int8_t *ofz)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
    if (ofx != NULL) {
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <adxl375_read_offsets+0x20>
        *ofx = (int8_t)adxl375_read(ADXL375_REG_OFSX);
 800190a:	201e      	movs	r0, #30
 800190c:	f7ff ff60 	bl	80017d0 <adxl375_read>
 8001910:	4603      	mov	r3, r0
 8001912:	b25a      	sxtb	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	701a      	strb	r2, [r3, #0]
    }
    if (ofy != NULL) {
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <adxl375_read_offsets+0x34>
        *ofy = (int8_t)adxl375_read(ADXL375_REG_OFSY);
 800191e:	201f      	movs	r0, #31
 8001920:	f7ff ff56 	bl	80017d0 <adxl375_read>
 8001924:	4603      	mov	r3, r0
 8001926:	b25a      	sxtb	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	701a      	strb	r2, [r3, #0]
    }
    if (ofz != NULL) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <adxl375_read_offsets+0x48>
        *ofz = (int8_t)adxl375_read(ADXL375_REG_OFSZ);
 8001932:	2020      	movs	r0, #32
 8001934:	f7ff ff4c 	bl	80017d0 <adxl375_read>
 8001938:	4603      	mov	r3, r0
 800193a:	b25a      	sxtb	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	701a      	strb	r2, [r3, #0]
    }
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <a_bmp390_iic_spi_read>:
 *             - 0 success
 *             - 1 iic spi read failed
 * @note       none
 */
static uint8_t a_bmp390_iic_spi_read(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	461a      	mov	r2, r3
 8001954:	460b      	mov	r3, r1
 8001956:	72fb      	strb	r3, [r7, #11]
 8001958:	4613      	mov	r3, r2
 800195a:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                      /* iic interface */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10f      	bne.n	8001986 <a_bmp390_iic_spi_read+0x3e>
    {
        if (handle->iic_read(handle->iic_addr, reg, buf, len) != 0)                   /* iic read */
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	7818      	ldrb	r0, [r3, #0]
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	7af9      	ldrb	r1, [r7, #11]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	47a0      	blx	r4
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <a_bmp390_iic_spi_read+0x3a>
        {
            return 1;                                                                 /* return error */
 800197e:	2301      	movs	r3, #1
 8001980:	e029      	b.n	80019d6 <a_bmp390_iic_spi_read+0x8e>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8001982:	2300      	movs	r3, #0
 8001984:	e027      	b.n	80019d6 <a_bmp390_iic_spi_read+0x8e>
        }
    }
    else                                                                              /* spi interface */
    {
        reg |= 1 << 7;                                                                /* set read mode */
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800198c:	72fb      	strb	r3, [r7, #11]
        if (handle->spi_read(reg, handle->buf, 
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	1c51      	adds	r1, r2, #1
 8001998:	893a      	ldrh	r2, [r7, #8]
 800199a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800199e:	bf28      	it	cs
 80019a0:	f44f 7200 	movcs.w	r2, #512	@ 0x200
 80019a4:	b292      	uxth	r2, r2
 80019a6:	3201      	adds	r2, #1
 80019a8:	b292      	uxth	r2, r2
 80019aa:	7af8      	ldrb	r0, [r7, #11]
 80019ac:	4798      	blx	r3
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <a_bmp390_iic_spi_read+0x70>
                             len > 512 ? (512 + 1) : (len + 1)) != 0)                 /* spi read */
        {
            return 1;                                                                 /* return error */
 80019b4:	2301      	movs	r3, #1
 80019b6:	e00e      	b.n	80019d6 <a_bmp390_iic_spi_read+0x8e>
        }
        memcpy(buf, handle->buf+1, (len > 512) ? 512 : len);                          /* copy data */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	1c59      	adds	r1, r3, #1
 80019be:	893b      	ldrh	r3, [r7, #8]
 80019c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019c4:	bf28      	it	cs
 80019c6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f009 fe05 	bl	800b5de <memcpy>
        
        return 0;                                                                     /* success return 0 */
 80019d4:	2300      	movs	r3, #0
    }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd90      	pop	{r4, r7, pc}

080019de <a_bmp390_iic_spi_write>:
 *            - 0 success
 *            - 1 iic spi write failed
 * @note      none
 */
static uint8_t a_bmp390_iic_spi_write(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80019de:	b590      	push	{r4, r7, lr}
 80019e0:	b087      	sub	sp, #28
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	461a      	mov	r2, r3
 80019ea:	460b      	mov	r3, r1
 80019ec:	72fb      	strb	r3, [r7, #11]
 80019ee:	4613      	mov	r3, r2
 80019f0:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                             /* iic interface */
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d11f      	bne.n	8001a3c <a_bmp390_iic_spi_write+0x5e>
    {
        uint16_t i;
        
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 80019fc:	2300      	movs	r3, #0
 80019fe:	82fb      	strh	r3, [r7, #22]
 8001a00:	e016      	b.n	8001a30 <a_bmp390_iic_spi_write+0x52>
        {
            if (handle->iic_write(handle->iic_addr, 
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f8d3 4210 	ldr.w	r4, [r3, #528]	@ 0x210
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	7818      	ldrb	r0, [r3, #0]
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	4413      	add	r3, r2
 8001a14:	b2d9      	uxtb	r1, r3
 8001a16:	8afb      	ldrh	r3, [r7, #22]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	441a      	add	r2, r3
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	47a0      	blx	r4
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <a_bmp390_iic_spi_write+0x4c>
                                  (uint8_t)(reg + i), buf + i, 1) != 0)      /* iic write */
            {
                return 1;                                                    /* return error */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e029      	b.n	8001a7e <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001a2a:	8afb      	ldrh	r3, [r7, #22]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	82fb      	strh	r3, [r7, #22]
 8001a30:	8afa      	ldrh	r2, [r7, #22]
 8001a32:	893b      	ldrh	r3, [r7, #8]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3e4      	bcc.n	8001a02 <a_bmp390_iic_spi_write+0x24>
            }
        }
        
        return 0;                                                            /* success return 0 */
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e020      	b.n	8001a7e <a_bmp390_iic_spi_write+0xa0>
    }
    else
    {
        uint16_t i;
        
        reg &= ~(1 << 7);                                                    /* write mode */
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a42:	72fb      	strb	r3, [r7, #11]
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001a44:	2300      	movs	r3, #0
 8001a46:	82bb      	strh	r3, [r7, #20]
 8001a48:	e014      	b.n	8001a74 <a_bmp390_iic_spi_write+0x96>
        {
            if (handle->spi_write((uint8_t)(reg + i), buf + i, 1) != 0)      /* spi write */
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8001a50:	8aba      	ldrh	r2, [r7, #20]
 8001a52:	b2d1      	uxtb	r1, r2
 8001a54:	7afa      	ldrb	r2, [r7, #11]
 8001a56:	440a      	add	r2, r1
 8001a58:	b2d0      	uxtb	r0, r2
 8001a5a:	8aba      	ldrh	r2, [r7, #20]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4411      	add	r1, r2
 8001a60:	2201      	movs	r2, #1
 8001a62:	4798      	blx	r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <a_bmp390_iic_spi_write+0x90>
            {
                return 1;                                                    /* return error */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e007      	b.n	8001a7e <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001a6e:	8abb      	ldrh	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	82bb      	strh	r3, [r7, #20]
 8001a74:	8aba      	ldrh	r2, [r7, #20]
 8001a76:	893b      	ldrh	r3, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d3e6      	bcc.n	8001a4a <a_bmp390_iic_spi_write+0x6c>
            }
        }
        
        return 0;                                                            /* success return 0 */
 8001a7c:	2300      	movs	r3, #0
    }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
	...

08001a88 <a_bmp390_get_calibration_data>:
 *            - 0 success
 *            - 1 get calibration data failed
 * @note      none
 */
static uint8_t a_bmp390_get_calibration_data(bmp390_handle_t *handle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    uint8_t buf[2];
    
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T1_L, (uint8_t *)buf, 2) != 0)  /* read t1 */
 8001a90:	f107 020c 	add.w	r2, r7, #12
 8001a94:	2302      	movs	r3, #2
 8001a96:	2131      	movs	r1, #49	@ 0x31
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff55 	bl	8001948 <a_bmp390_iic_spi_read>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <a_bmp390_get_calibration_data+0x2a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001aaa:	48a8      	ldr	r0, [pc, #672]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001aac:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e154      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t1 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t1 */
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	7b3b      	ldrb	r3, [r7, #12]
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8a3 2232 	strh.w	r2, [r3, #562]	@ 0x232
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T2_L, (uint8_t *)buf, 2) != 0)  /* read t2 */
 8001aca:	f107 020c 	add.w	r2, r7, #12
 8001ace:	2302      	movs	r3, #2
 8001ad0:	2133      	movs	r1, #51	@ 0x33
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff38 	bl	8001948 <a_bmp390_iic_spi_read>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <a_bmp390_get_calibration_data+0x64>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001ae4:	4899      	ldr	r0, [pc, #612]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001ae6:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e137      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t2 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t2 */
 8001aec:	7b7b      	ldrb	r3, [r7, #13]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	7b3b      	ldrb	r3, [r7, #12]
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f8a3 2234 	strh.w	r2, [r3, #564]	@ 0x234
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T3, (uint8_t *)buf, 1) != 0)    /* read t3 */
 8001b04:	f107 020c 	add.w	r2, r7, #12
 8001b08:	2301      	movs	r3, #1
 8001b0a:	2135      	movs	r1, #53	@ 0x35
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff1b 	bl	8001948 <a_bmp390_iic_spi_read>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <a_bmp390_get_calibration_data+0x9e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001b1e:	488b      	ldr	r0, [pc, #556]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001b20:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e11a      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t3 = (int8_t)(buf[0]);                                                       /* set t3 */
 8001b26:	7b3b      	ldrb	r3, [r7, #12]
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P1_L, (uint8_t *)buf, 2) != 0)  /* read p1 */
 8001b30:	f107 020c 	add.w	r2, r7, #12
 8001b34:	2302      	movs	r3, #2
 8001b36:	2136      	movs	r1, #54	@ 0x36
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff05 	bl	8001948 <a_bmp390_iic_spi_read>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <a_bmp390_get_calibration_data+0xca>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001b4a:	4880      	ldr	r0, [pc, #512]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001b4c:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e104      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p1 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p1 */
 8001b52:	7b7b      	ldrb	r3, [r7, #13]
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	7b3b      	ldrb	r3, [r7, #12]
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P2_L, (uint8_t *)buf, 2) != 0)  /* read p2 */
 8001b68:	f107 020c 	add.w	r2, r7, #12
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	2138      	movs	r1, #56	@ 0x38
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fee9 	bl	8001948 <a_bmp390_iic_spi_read>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <a_bmp390_get_calibration_data+0x102>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001b82:	4872      	ldr	r0, [pc, #456]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001b84:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0e8      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p2 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p2 */
 8001b8a:	7b7b      	ldrb	r3, [r7, #13]
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	7b3b      	ldrb	r3, [r7, #12]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8a3 223a 	strh.w	r2, [r3, #570]	@ 0x23a
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P3, (uint8_t *)buf, 1) != 0)    /* read p3 */
 8001ba0:	f107 020c 	add.w	r2, r7, #12
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	213a      	movs	r1, #58	@ 0x3a
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fecd 	bl	8001948 <a_bmp390_iic_spi_read>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <a_bmp390_get_calibration_data+0x13a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001bba:	4864      	ldr	r0, [pc, #400]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001bbc:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0cc      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p3 = (int8_t)(buf[0]);                                                       /* set p3 */
 8001bc2:	7b3b      	ldrb	r3, [r7, #12]
 8001bc4:	b25a      	sxtb	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P4, (uint8_t *)buf, 1) != 0)    /* read p4 */
 8001bcc:	f107 020c 	add.w	r2, r7, #12
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	213b      	movs	r1, #59	@ 0x3b
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff feb7 	bl	8001948 <a_bmp390_iic_spi_read>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <a_bmp390_get_calibration_data+0x166>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001be6:	4859      	ldr	r0, [pc, #356]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001be8:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0b6      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p4 = (int8_t)(buf[0]);                                                       /* set p4 */
 8001bee:	7b3b      	ldrb	r3, [r7, #12]
 8001bf0:	b25a      	sxtb	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P5_L, (uint8_t *)buf, 2) != 0)  /* read p5 */
 8001bf8:	f107 020c 	add.w	r2, r7, #12
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	213c      	movs	r1, #60	@ 0x3c
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fea1 	bl	8001948 <a_bmp390_iic_spi_read>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <a_bmp390_get_calibration_data+0x192>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001c12:	484e      	ldr	r0, [pc, #312]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001c14:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0a0      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p5 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p5 */
 8001c1a:	7b7b      	ldrb	r3, [r7, #13]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	7b3b      	ldrb	r3, [r7, #12]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8a3 223e 	strh.w	r2, [r3, #574]	@ 0x23e
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P6_L, (uint8_t *)buf, 2) != 0)  /* read p6l */
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	2302      	movs	r3, #2
 8001c38:	213e      	movs	r1, #62	@ 0x3e
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fe84 	bl	8001948 <a_bmp390_iic_spi_read>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <a_bmp390_get_calibration_data+0x1cc>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001c4c:	483f      	ldr	r0, [pc, #252]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001c4e:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001c50:	2301      	movs	r3, #1
 8001c52:	e083      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p6 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p6 */
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	7b3b      	ldrb	r3, [r7, #12]
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P7, (uint8_t *)buf, 1) != 0)    /* read p7 */
 8001c6c:	f107 020c 	add.w	r2, r7, #12
 8001c70:	2301      	movs	r3, #1
 8001c72:	2140      	movs	r1, #64	@ 0x40
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fe67 	bl	8001948 <a_bmp390_iic_spi_read>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <a_bmp390_get_calibration_data+0x206>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001c86:	4831      	ldr	r0, [pc, #196]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001c88:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e066      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p7 = (int8_t)(buf[0]);                                                       /* set p7 */
 8001c8e:	7b3b      	ldrb	r3, [r7, #12]
 8001c90:	b25a      	sxtb	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P8, (uint8_t *)buf, 1) != 0)    /* read p8 */
 8001c98:	f107 020c 	add.w	r2, r7, #12
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2141      	movs	r1, #65	@ 0x41
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fe51 	bl	8001948 <a_bmp390_iic_spi_read>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <a_bmp390_get_calibration_data+0x232>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001cb2:	4826      	ldr	r0, [pc, #152]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001cb4:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e050      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p8 = (int8_t)(buf[0]);                                                       /* set p8 */
 8001cba:	7b3b      	ldrb	r3, [r7, #12]
 8001cbc:	b25a      	sxtb	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P9_L, (uint8_t *)buf, 2) != 0)  /* read p9l */
 8001cc4:	f107 020c 	add.w	r2, r7, #12
 8001cc8:	2302      	movs	r3, #2
 8001cca:	2142      	movs	r1, #66	@ 0x42
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fe3b 	bl	8001948 <a_bmp390_iic_spi_read>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <a_bmp390_get_calibration_data+0x25e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001cde:	481b      	ldr	r0, [pc, #108]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001ce0:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e03a      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p9 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p9 */
 8001ce6:	7b7b      	ldrb	r3, [r7, #13]
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P10, (uint8_t *)buf, 1) != 0)   /* read p10 */
 8001cfc:	f107 020c 	add.w	r2, r7, #12
 8001d00:	2301      	movs	r3, #1
 8001d02:	2144      	movs	r1, #68	@ 0x44
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fe1f 	bl	8001948 <a_bmp390_iic_spi_read>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <a_bmp390_get_calibration_data+0x296>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001d18:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e01e      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p10 = (int8_t)(buf[0]);                                                      /* set p10 */
 8001d1e:	7b3b      	ldrb	r3, [r7, #12]
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f883 2246 	strb.w	r2, [r3, #582]	@ 0x246
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P11, (uint8_t *)buf, 1) != 0)   /* read p11 */
 8001d28:	f107 020c 	add.w	r2, r7, #12
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2145      	movs	r1, #69	@ 0x45
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fe09 	bl	8001948 <a_bmp390_iic_spi_read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <a_bmp390_get_calibration_data+0x2c8>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001d42:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001d44:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e008      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
 8001d4a:	bf00      	nop
 8001d4c:	0800f478 	.word	0x0800f478
    }
    handle->p11 = (int8_t)(buf[0]);                                                      /* set p11 */
 8001d50:	7b3b      	ldrb	r3, [r7, #12]
 8001d52:	b25a      	sxtb	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247

    return 0;                                                                            /* success return 0 */
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <a_bmp390_compensate_temperature>:
 * @param[in] data raw temperature
 * @return    compensated temperature
 * @note      none
 */
static int64_t a_bmp390_compensate_temperature(bmp390_handle_t *handle, uint32_t data)
{ 
 8001d64:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d68:	b0a5      	sub	sp, #148	@ 0x94
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6578      	str	r0, [r7, #84]	@ 0x54
 8001d6e:	6539      	str	r1, [r7, #80]	@ 0x50
    int64_t partial_data5;
    int64_t partial_data6;
    int64_t comp_temp;

    /* calculate compensate temperature */
    partial_data1 = (uint64_t)(data - (256 * (uint64_t)(handle->t1)));
 8001d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d72:	2200      	movs	r2, #0
 8001d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d76:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7a:	f8b3 3232 	ldrh.w	r3, [r3, #562]	@ 0x232
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	461c      	mov	r4, r3
 8001d84:	4615      	mov	r5, r2
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	022b      	lsls	r3, r5, #8
 8001d90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001d94:	0222      	lsls	r2, r4, #8
 8001d96:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	1a89      	subs	r1, r1, r2
 8001d9e:	61b9      	str	r1, [r7, #24]
 8001da0:	4629      	mov	r1, r5
 8001da2:	eb61 0303 	sbc.w	r3, r1, r3
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001dac:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    partial_data2 = (uint64_t)(handle->t2 * partial_data1);
 8001db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db2:	f8b3 3234 	ldrh.w	r3, [r3, #564]	@ 0x234
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2200      	movs	r2, #0
 8001dba:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dbc:	637a      	str	r2, [r7, #52]	@ 0x34
 8001dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	fb02 f203 	mul.w	r2, r2, r3
 8001dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	441a      	add	r2, r3
 8001dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ddc:	4621      	mov	r1, r4
 8001dde:	fba3 ab01 	umull	sl, fp, r3, r1
 8001de2:	eb02 030b 	add.w	r3, r2, fp
 8001de6:	469b      	mov	fp, r3
 8001de8:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
 8001dec:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
    partial_data3 = (uint64_t)(partial_data1 * partial_data1);
 8001df0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001df8:	fb03 f102 	mul.w	r1, r3, r2
 8001dfc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	18ca      	adds	r2, r1, r3
 8001e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e0e:	fba3 1303 	umull	r1, r3, r3, r3
 8001e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e14:	460b      	mov	r3, r1
 8001e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e1a:	18d3      	adds	r3, r2, r3
 8001e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e1e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001e22:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8001e26:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    partial_data4 = (int64_t)(((int64_t)partial_data3) * ((int64_t)handle->t3));
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2c:	f993 3236 	ldrsb.w	r3, [r3, #566]	@ 0x236
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	17da      	asrs	r2, r3, #31
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e3c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001e40:	4629      	mov	r1, r5
 8001e42:	fb02 f001 	mul.w	r0, r2, r1
 8001e46:	4621      	mov	r1, r4
 8001e48:	fb01 f103 	mul.w	r1, r1, r3
 8001e4c:	4401      	add	r1, r0
 8001e4e:	4620      	mov	r0, r4
 8001e50:	fba0 2302 	umull	r2, r3, r0, r2
 8001e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e56:	4613      	mov	r3, r2
 8001e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5c:	18cb      	adds	r3, r1, r3
 8001e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e60:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001e64:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8001e68:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    partial_data5 = ((int64_t)(((int64_t)partial_data2) * 262144) + (int64_t)partial_data4);
 8001e6c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	048b      	lsls	r3, r1, #18
 8001e7a:	ea43 3390 	orr.w	r3, r3, r0, lsr #14
 8001e7e:	0482      	lsls	r2, r0, #18
 8001e80:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001e84:	1884      	adds	r4, r0, r2
 8001e86:	613c      	str	r4, [r7, #16]
 8001e88:	eb41 0303 	adc.w	r3, r1, r3
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e92:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    partial_data6 = (int64_t)(((int64_t)partial_data5) / 4294967296U);
 8001e96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    handle->t_fine = partial_data6;
 8001eaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001eac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001eb0:	e9c1 2392 	strd	r2, r3, [r1, #584]	@ 0x248
    comp_temp = (int64_t)((partial_data6 * 25)  / 16384);
 8001eb4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	1894      	adds	r4, r2, r2
 8001ebe:	60bc      	str	r4, [r7, #8]
 8001ec0:	415b      	adcs	r3, r3
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ec8:	eb12 0800 	adds.w	r8, r2, r0
 8001ecc:	eb43 0901 	adc.w	r9, r3, r1
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001edc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee4:	4690      	mov	r8, r2
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	eb18 0300 	adds.w	r3, r8, r0
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	eb49 0301 	adc.w	r3, r9, r1
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da08      	bge.n	8001f0e <a_bmp390_compensate_temperature+0x1aa>
 8001efc:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8001f00:	1851      	adds	r1, r2, r1
 8001f02:	6039      	str	r1, [r7, #0]
 8001f04:	f143 0300 	adc.w	r3, r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f0e:	f04f 0000 	mov.w	r0, #0
 8001f12:	f04f 0100 	mov.w	r1, #0
 8001f16:	0b90      	lsrs	r0, r2, #14
 8001f18:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
 8001f1c:	1399      	asrs	r1, r3, #14
 8001f1e:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
    
    return comp_temp;
 8001f22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	3794      	adds	r7, #148	@ 0x94
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f32:	4770      	bx	lr

08001f34 <a_bmp390_compensate_pressure>:
 * @param[in] data raw pressure
 * @return    compensated pressure
 * @note      none
 */
static int64_t a_bmp390_compensate_pressure(bmp390_handle_t *handle, uint32_t data)
{
 8001f34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f38:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
 8001f42:	f8c7 11b8 	str.w	r1, [r7, #440]	@ 0x1b8
    int64_t offset;
    int64_t sensitivity;
    uint64_t comp_press;

    /* calculate compensate pressure */
    partial_data1 = handle->t_fine * handle->t_fine;
 8001f46:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001f4a:	e9d3 0192 	ldrd	r0, r1, [r3, #584]	@ 0x248
 8001f4e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001f52:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8001f56:	fb02 f501 	mul.w	r5, r2, r1
 8001f5a:	fb00 f403 	mul.w	r4, r0, r3
 8001f5e:	442c      	add	r4, r5
 8001f60:	fba0 8902 	umull	r8, r9, r0, r2
 8001f64:	eb04 0309 	add.w	r3, r4, r9
 8001f68:	4699      	mov	r9, r3
 8001f6a:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
 8001f6e:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
    partial_data2 = partial_data1 / 64;
 8001f72:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da07      	bge.n	8001f8a <a_bmp390_compensate_pressure+0x56>
 8001f7a:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 8001f7e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001f80:	f143 0300 	adc.w	r3, r3, #0
 8001f84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f86:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001f8a:	f04f 0000 	mov.w	r0, #0
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	0990      	lsrs	r0, r2, #6
 8001f94:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8001f98:	1199      	asrs	r1, r3, #6
 8001f9a:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * handle->t_fine) / 256;
 8001f9e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001fa2:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8001fa6:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8001faa:	fb03 f001 	mul.w	r0, r3, r1
 8001fae:	f8d7 11fc 	ldr.w	r1, [r7, #508]	@ 0x1fc
 8001fb2:	fb02 f101 	mul.w	r1, r2, r1
 8001fb6:	4408      	add	r0, r1
 8001fb8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8001fbc:	fba1 ab02 	umull	sl, fp, r1, r2
 8001fc0:	eb00 030b 	add.w	r3, r0, fp
 8001fc4:	469b      	mov	fp, r3
 8001fc6:	4652      	mov	r2, sl
 8001fc8:	465b      	mov	r3, fp
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da07      	bge.n	8001fde <a_bmp390_compensate_pressure+0xaa>
 8001fce:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001fd2:	6739      	str	r1, [r7, #112]	@ 0x70
 8001fd4:	f143 0300 	adc.w	r3, r3, #0
 8001fd8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fde:	f04f 0000 	mov.w	r0, #0
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	0a10      	lsrs	r0, r2, #8
 8001fe8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fec:	1219      	asrs	r1, r3, #8
 8001fee:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (handle->p8 * partial_data3) / 32;
 8001ff2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001ff6:	f993 3243 	ldrsb.w	r3, [r3, #579]	@ 0x243
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	17da      	asrs	r2, r3, #31
 8001ffe:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002002:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002006:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800200a:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 800200e:	462a      	mov	r2, r5
 8002010:	fb02 f203 	mul.w	r2, r2, r3
 8002014:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002018:	4621      	mov	r1, r4
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	441a      	add	r2, r3
 8002020:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002024:	4621      	mov	r1, r4
 8002026:	fba3 1301 	umull	r1, r3, r3, r1
 800202a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800202e:	460b      	mov	r3, r1
 8002030:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002034:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002038:	18d3      	adds	r3, r2, r3
 800203a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800203e:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8002042:	2b00      	cmp	r3, #0
 8002044:	da07      	bge.n	8002056 <a_bmp390_compensate_pressure+0x122>
 8002046:	f112 011f 	adds.w	r1, r2, #31
 800204a:	66b9      	str	r1, [r7, #104]	@ 0x68
 800204c:	f143 0300 	adc.w	r3, r3, #0
 8002050:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002052:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002056:	f04f 0000 	mov.w	r0, #0
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	0950      	lsrs	r0, r2, #5
 8002060:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8002064:	1159      	asrs	r1, r3, #5
 8002066:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (handle->p7 * partial_data1) * 16;
 800206a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800206e:	f993 3242 	ldrsb.w	r3, [r3, #578]	@ 0x242
 8002072:	b25b      	sxtb	r3, r3
 8002074:	17da      	asrs	r2, r3, #31
 8002076:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800207a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800207e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002082:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8002086:	462a      	mov	r2, r5
 8002088:	fb02 f203 	mul.w	r2, r2, r3
 800208c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002090:	4621      	mov	r1, r4
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	441a      	add	r2, r3
 8002098:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800209c:	4621      	mov	r1, r4
 800209e:	fba3 1301 	umull	r1, r3, r3, r1
 80020a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80020a6:	460b      	mov	r3, r1
 80020a8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80020ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80020b0:	18d3      	adds	r3, r2, r3
 80020b2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 80020c2:	4629      	mov	r1, r5
 80020c4:	010b      	lsls	r3, r1, #4
 80020c6:	4621      	mov	r1, r4
 80020c8:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80020cc:	4621      	mov	r1, r4
 80020ce:	010a      	lsls	r2, r1, #4
 80020d0:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    partial_data6 = (handle->p6 * handle->t_fine) * 4194304;
 80020d4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80020d8:	f8b3 3240 	ldrh.w	r3, [r3, #576]	@ 0x240
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80020e4:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80020e8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80020ec:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 80020f0:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 80020f4:	4629      	mov	r1, r5
 80020f6:	fb02 f001 	mul.w	r0, r2, r1
 80020fa:	4621      	mov	r1, r4
 80020fc:	fb01 f103 	mul.w	r1, r1, r3
 8002100:	4401      	add	r1, r0
 8002102:	4620      	mov	r0, r4
 8002104:	fba0 2302 	umull	r2, r3, r0, r2
 8002108:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800210c:	4613      	mov	r3, r2
 800210e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002112:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002116:	18cb      	adds	r3, r1, r3
 8002118:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8002128:	4629      	mov	r1, r5
 800212a:	058b      	lsls	r3, r1, #22
 800212c:	4621      	mov	r1, r4
 800212e:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8002132:	4621      	mov	r1, r4
 8002134:	058a      	lsls	r2, r1, #22
 8002136:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    offset = (int64_t)((int64_t)(handle->p5) * (int64_t)140737488355328U) + partial_data4 + partial_data5 + partial_data6;
 800213a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800213e:	f8b3 323e 	ldrh.w	r3, [r3, #574]	@ 0x23e
 8002142:	b29b      	uxth	r3, r3
 8002144:	2200      	movs	r2, #0
 8002146:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800214a:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800214e:	f04f 0000 	mov.w	r0, #0
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800215a:	03d9      	lsls	r1, r3, #15
 800215c:	2000      	movs	r0, #0
 800215e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8002162:	1884      	adds	r4, r0, r2
 8002164:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 8002168:	eb41 0303 	adc.w	r3, r1, r3
 800216c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002170:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8002174:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8002178:	4621      	mov	r1, r4
 800217a:	1889      	adds	r1, r1, r2
 800217c:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8002180:	4629      	mov	r1, r5
 8002182:	eb43 0101 	adc.w	r1, r3, r1
 8002186:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 800218a:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 800218e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8002192:	4621      	mov	r1, r4
 8002194:	1851      	adds	r1, r2, r1
 8002196:	6639      	str	r1, [r7, #96]	@ 0x60
 8002198:	4629      	mov	r1, r5
 800219a:	eb43 0101 	adc.w	r1, r3, r1
 800219e:	6679      	str	r1, [r7, #100]	@ 0x64
 80021a0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80021a4:	e9c7 3474 	strd	r3, r4, [r7, #464]	@ 0x1d0
    partial_data2 = (((int64_t)handle->p4) * partial_data3) / 32;
 80021a8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80021ac:	f993 323d 	ldrsb.w	r3, [r3, #573]	@ 0x23d
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	17da      	asrs	r2, r3, #31
 80021b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80021b8:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80021bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021c0:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80021c4:	462a      	mov	r2, r5
 80021c6:	fb02 f203 	mul.w	r2, r2, r3
 80021ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80021ce:	4621      	mov	r1, r4
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	441a      	add	r2, r3
 80021d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021da:	4621      	mov	r1, r4
 80021dc:	fba3 1301 	umull	r1, r3, r3, r1
 80021e0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80021e4:	460b      	mov	r3, r1
 80021e6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80021ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021ee:	18d3      	adds	r3, r2, r3
 80021f0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80021f4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	da07      	bge.n	800220c <a_bmp390_compensate_pressure+0x2d8>
 80021fc:	f112 011f 	adds.w	r1, r2, #31
 8002200:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002202:	f143 0300 	adc.w	r3, r3, #0
 8002206:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002208:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800220c:	f04f 0000 	mov.w	r0, #0
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	0950      	lsrs	r0, r2, #5
 8002216:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800221a:	1159      	asrs	r1, r3, #5
 800221c:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data4 = (handle->p3 * partial_data1) * 4;
 8002220:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002224:	f993 323c 	ldrsb.w	r3, [r3, #572]	@ 0x23c
 8002228:	b25b      	sxtb	r3, r3
 800222a:	17da      	asrs	r2, r3, #31
 800222c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002230:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8002234:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002238:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 800223c:	462a      	mov	r2, r5
 800223e:	fb02 f203 	mul.w	r2, r2, r3
 8002242:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002246:	4621      	mov	r1, r4
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	441a      	add	r2, r3
 800224e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002252:	4621      	mov	r1, r4
 8002254:	fba3 1301 	umull	r1, r3, r3, r1
 8002258:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800225c:	460b      	mov	r3, r1
 800225e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002262:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002266:	18d3      	adds	r3, r2, r3
 8002268:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8002278:	4629      	mov	r1, r5
 800227a:	008b      	lsls	r3, r1, #2
 800227c:	4621      	mov	r1, r4
 800227e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002282:	4621      	mov	r1, r4
 8002284:	008a      	lsls	r2, r1, #2
 8002286:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
    partial_data5 = ((int64_t)(handle->p2) - 16384) * ((int64_t)handle->t_fine) * 2097152;
 800228a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800228e:	f9b3 323a 	ldrsh.w	r3, [r3, #570]	@ 0x23a
 8002292:	b21b      	sxth	r3, r3
 8002294:	17da      	asrs	r2, r3, #31
 8002296:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800229a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800229e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80022a2:	460b      	mov	r3, r1
 80022a4:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 80022a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80022ac:	4613      	mov	r3, r2
 80022ae:	f143 33ff 	adc.w	r3, r3, #4294967295
 80022b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80022b6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022ba:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 80022be:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80022c2:	4629      	mov	r1, r5
 80022c4:	fb02 f001 	mul.w	r0, r2, r1
 80022c8:	4621      	mov	r1, r4
 80022ca:	fb01 f103 	mul.w	r1, r1, r3
 80022ce:	4401      	add	r1, r0
 80022d0:	4620      	mov	r0, r4
 80022d2:	fba0 2302 	umull	r2, r3, r0, r2
 80022d6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80022da:	4613      	mov	r3, r2
 80022dc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80022e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80022e4:	18cb      	adds	r3, r1, r3
 80022e6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 80022f6:	4629      	mov	r1, r5
 80022f8:	054b      	lsls	r3, r1, #21
 80022fa:	4621      	mov	r1, r4
 80022fc:	ea43 23d1 	orr.w	r3, r3, r1, lsr #11
 8002300:	4621      	mov	r1, r4
 8002302:	054a      	lsls	r2, r1, #21
 8002304:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    sensitivity = (((int64_t)(handle->p1) - 16384) * (int64_t)70368744177664U) + partial_data2 + partial_data4 + partial_data5;
 8002308:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800230c:	f9b3 3238 	ldrsh.w	r3, [r3, #568]	@ 0x238
 8002310:	b21b      	sxth	r3, r3
 8002312:	17da      	asrs	r2, r3, #31
 8002314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002318:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800231c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002320:	460b      	mov	r3, r1
 8002322:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 8002326:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800232a:	4613      	mov	r3, r2
 800232c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002330:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002334:	f04f 0000 	mov.w	r0, #0
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002340:	0399      	lsls	r1, r3, #14
 8002342:	2000      	movs	r0, #0
 8002344:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8002348:	1884      	adds	r4, r0, r2
 800234a:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 800234e:	eb41 0303 	adc.w	r3, r1, r3
 8002352:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002356:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 800235a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800235e:	4621      	mov	r1, r4
 8002360:	1889      	adds	r1, r1, r2
 8002362:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8002366:	4629      	mov	r1, r5
 8002368:	eb43 0101 	adc.w	r1, r3, r1
 800236c:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8002370:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8002374:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002378:	4621      	mov	r1, r4
 800237a:	1851      	adds	r1, r2, r1
 800237c:	6539      	str	r1, [r7, #80]	@ 0x50
 800237e:	4629      	mov	r1, r5
 8002380:	eb43 0101 	adc.w	r1, r3, r1
 8002384:	6579      	str	r1, [r7, #84]	@ 0x54
 8002386:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800238a:	e9c7 3472 	strd	r3, r4, [r7, #456]	@ 0x1c8
    partial_data1 = (sensitivity / 16777216) * data;
 800238e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8002392:	2b00      	cmp	r3, #0
 8002394:	da08      	bge.n	80023a8 <a_bmp390_compensate_pressure+0x474>
 8002396:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800239a:	1851      	adds	r1, r2, r1
 800239c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800239e:	f143 0300 	adc.w	r3, r3, #0
 80023a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023a8:	f04f 0000 	mov.w	r0, #0
 80023ac:	f04f 0100 	mov.w	r1, #0
 80023b0:	0e10      	lsrs	r0, r2, #24
 80023b2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80023b6:	1619      	asrs	r1, r3, #24
 80023b8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80023bc:	2200      	movs	r2, #0
 80023be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023c6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80023ca:	4623      	mov	r3, r4
 80023cc:	fb03 f201 	mul.w	r2, r3, r1
 80023d0:	462b      	mov	r3, r5
 80023d2:	fb00 f303 	mul.w	r3, r0, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	4622      	mov	r2, r4
 80023da:	fba0 1202 	umull	r1, r2, r0, r2
 80023de:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80023e2:	460a      	mov	r2, r1
 80023e4:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 80023e8:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80023ec:	4413      	add	r3, r2
 80023ee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80023f2:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 80023f6:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
 80023fa:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
    partial_data2 = (int64_t)(handle->p10) * (int64_t)(handle->t_fine);
 80023fe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002402:	f993 3246 	ldrsb.w	r3, [r3, #582]	@ 0x246
 8002406:	b25b      	sxtb	r3, r3
 8002408:	17da      	asrs	r2, r3, #31
 800240a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800240e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002412:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002416:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800241a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800241e:	4629      	mov	r1, r5
 8002420:	fb02 f001 	mul.w	r0, r2, r1
 8002424:	4621      	mov	r1, r4
 8002426:	fb01 f103 	mul.w	r1, r1, r3
 800242a:	4401      	add	r1, r0
 800242c:	4620      	mov	r0, r4
 800242e:	fba0 2302 	umull	r2, r3, r0, r2
 8002432:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002436:	4613      	mov	r3, r2
 8002438:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800243c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002440:	18cb      	adds	r3, r1, r3
 8002442:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002446:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 800244a:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
 800244e:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
    partial_data3 = partial_data2 + (65536 * (int64_t)(handle->p9));
 8002452:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002456:	f9b3 3244 	ldrsh.w	r3, [r3, #580]	@ 0x244
 800245a:	b21b      	sxth	r3, r3
 800245c:	17da      	asrs	r2, r3, #31
 800245e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002462:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002466:	f04f 0000 	mov.w	r0, #0
 800246a:	f04f 0100 	mov.w	r1, #0
 800246e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002472:	462b      	mov	r3, r5
 8002474:	0419      	lsls	r1, r3, #16
 8002476:	4623      	mov	r3, r4
 8002478:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800247c:	4623      	mov	r3, r4
 800247e:	0418      	lsls	r0, r3, #16
 8002480:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8002484:	1814      	adds	r4, r2, r0
 8002486:	643c      	str	r4, [r7, #64]	@ 0x40
 8002488:	414b      	adcs	r3, r1
 800248a:	647b      	str	r3, [r7, #68]	@ 0x44
 800248c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002490:	e9c7 347c 	strd	r3, r4, [r7, #496]	@ 0x1f0
    partial_data4 = (partial_data3 * data) / 8192;
 8002494:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002498:	2200      	movs	r2, #0
 800249a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800249e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80024a6:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 80024aa:	462a      	mov	r2, r5
 80024ac:	fb02 f203 	mul.w	r2, r2, r3
 80024b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80024b4:	4621      	mov	r1, r4
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	441a      	add	r2, r3
 80024bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80024c0:	4621      	mov	r1, r4
 80024c2:	fba3 1301 	umull	r1, r3, r3, r1
 80024c6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80024ca:	460b      	mov	r3, r1
 80024cc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80024d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80024d4:	18d3      	adds	r3, r2, r3
 80024d6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80024da:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da08      	bge.n	80024f4 <a_bmp390_compensate_pressure+0x5c0>
 80024e2:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80024e6:	1851      	adds	r1, r2, r1
 80024e8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024ea:	f143 0300 	adc.w	r3, r3, #0
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024f4:	f04f 0000 	mov.w	r0, #0
 80024f8:	f04f 0100 	mov.w	r1, #0
 80024fc:	0b50      	lsrs	r0, r2, #13
 80024fe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002502:	1359      	asrs	r1, r3, #13
 8002504:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (partial_data4 * data) / 512;
 8002508:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800250c:	2200      	movs	r2, #0
 800250e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002512:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002516:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800251a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800251e:	462a      	mov	r2, r5
 8002520:	fb02 f203 	mul.w	r2, r2, r3
 8002524:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002528:	4621      	mov	r1, r4
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	441a      	add	r2, r3
 8002530:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002534:	4621      	mov	r1, r4
 8002536:	fba3 1301 	umull	r1, r3, r3, r1
 800253a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800253e:	460b      	mov	r3, r1
 8002540:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002544:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800254e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8002552:	2b00      	cmp	r3, #0
 8002554:	da08      	bge.n	8002568 <a_bmp390_compensate_pressure+0x634>
 8002556:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800255a:	1851      	adds	r1, r2, r1
 800255c:	6339      	str	r1, [r7, #48]	@ 0x30
 800255e:	f143 0300 	adc.w	r3, r3, #0
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
 8002564:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002568:	f04f 0000 	mov.w	r0, #0
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	0a50      	lsrs	r0, r2, #9
 8002572:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8002576:	1259      	asrs	r1, r3, #9
 8002578:	e9c7 0178 	strd	r0, r1, [r7, #480]	@ 0x1e0
    partial_data6 = (int64_t)((uint64_t)data * (uint64_t)data);
 800257c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002580:	2200      	movs	r2, #0
 8002582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002586:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800258a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002594:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002598:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800259c:	462b      	mov	r3, r5
 800259e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80025a2:	4642      	mov	r2, r8
 80025a4:	fb02 f203 	mul.w	r2, r2, r3
 80025a8:	464b      	mov	r3, r9
 80025aa:	4621      	mov	r1, r4
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	4622      	mov	r2, r4
 80025b4:	4641      	mov	r1, r8
 80025b6:	fba2 1201 	umull	r1, r2, r2, r1
 80025ba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80025be:	460a      	mov	r2, r1
 80025c0:	f8c7 2170 	str.w	r2, [r7, #368]	@ 0x170
 80025c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80025c8:	4413      	add	r3, r2
 80025ca:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80025ce:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 80025d2:	e9c7 3476 	strd	r3, r4, [r7, #472]	@ 0x1d8
    partial_data2 = ((int64_t)(handle->p11) * (int64_t)(partial_data6)) / 65536;
 80025d6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80025da:	f993 3247 	ldrsb.w	r3, [r3, #583]	@ 0x247
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	17da      	asrs	r2, r3, #31
 80025e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025ea:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80025ee:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80025f2:	462a      	mov	r2, r5
 80025f4:	fb02 f203 	mul.w	r2, r2, r3
 80025f8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80025fc:	4621      	mov	r1, r4
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	441a      	add	r2, r3
 8002604:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8002608:	4621      	mov	r1, r4
 800260a:	fba3 1301 	umull	r1, r3, r3, r1
 800260e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002612:	460b      	mov	r3, r1
 8002614:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002618:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800261c:	18d3      	adds	r3, r2, r3
 800261e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002622:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8002626:	2b00      	cmp	r3, #0
 8002628:	da08      	bge.n	800263c <a_bmp390_compensate_pressure+0x708>
 800262a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800262e:	1851      	adds	r1, r2, r1
 8002630:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002632:	f143 0300 	adc.w	r3, r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800263c:	f04f 0000 	mov.w	r0, #0
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	0c10      	lsrs	r0, r2, #16
 8002646:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800264a:	1419      	asrs	r1, r3, #16
 800264c:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * data) / 128;
 8002650:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002654:	2200      	movs	r2, #0
 8002656:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800265a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800265e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002662:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002666:	462a      	mov	r2, r5
 8002668:	fb02 f203 	mul.w	r2, r2, r3
 800266c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002670:	4621      	mov	r1, r4
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	441a      	add	r2, r3
 8002678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800267c:	4621      	mov	r1, r4
 800267e:	fba3 1301 	umull	r1, r3, r3, r1
 8002682:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002686:	460b      	mov	r3, r1
 8002688:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800268c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002696:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800269a:	2b00      	cmp	r3, #0
 800269c:	da07      	bge.n	80026ae <a_bmp390_compensate_pressure+0x77a>
 800269e:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 80026a2:	6239      	str	r1, [r7, #32]
 80026a4:	f143 0300 	adc.w	r3, r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ae:	f04f 0000 	mov.w	r0, #0
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	09d0      	lsrs	r0, r2, #7
 80026b8:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80026bc:	11d9      	asrs	r1, r3, #7
 80026be:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (offset / 4) + partial_data1 + partial_data5 + partial_data3;
 80026c2:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da06      	bge.n	80026d8 <a_bmp390_compensate_pressure+0x7a4>
 80026ca:	1cd1      	adds	r1, r2, #3
 80026cc:	61b9      	str	r1, [r7, #24]
 80026ce:	f143 0300 	adc.w	r3, r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d8:	f04f 0000 	mov.w	r0, #0
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	0890      	lsrs	r0, r2, #2
 80026e2:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80026e6:	1099      	asrs	r1, r3, #2
 80026e8:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80026ec:	1884      	adds	r4, r0, r2
 80026ee:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 80026f2:	eb41 0303 	adc.w	r3, r1, r3
 80026f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026fa:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80026fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002702:	4621      	mov	r1, r4
 8002704:	1889      	adds	r1, r1, r2
 8002706:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800270a:	4629      	mov	r1, r5
 800270c:	eb43 0101 	adc.w	r1, r3, r1
 8002710:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8002714:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8002718:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800271c:	4621      	mov	r1, r4
 800271e:	1851      	adds	r1, r2, r1
 8002720:	6139      	str	r1, [r7, #16]
 8002722:	4629      	mov	r1, r5
 8002724:	eb43 0101 	adc.w	r1, r3, r1
 8002728:	6179      	str	r1, [r7, #20]
 800272a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800272e:	e9c7 347a 	strd	r3, r4, [r7, #488]	@ 0x1e8
    comp_press = (((uint64_t)partial_data4 * 25) / (uint64_t)1099511627776U);
 8002732:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	1894      	adds	r4, r2, r2
 800273c:	60bc      	str	r4, [r7, #8]
 800273e:	415b      	adcs	r3, r3
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002746:	1814      	adds	r4, r2, r0
 8002748:	603c      	str	r4, [r7, #0]
 800274a:	414b      	adcs	r3, r1
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	e9d7 8900 	ldrd	r8, r9, [r7]
 800275a:	464c      	mov	r4, r9
 800275c:	00e3      	lsls	r3, r4, #3
 800275e:	4644      	mov	r4, r8
 8002760:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002764:	4644      	mov	r4, r8
 8002766:	00e2      	lsls	r2, r4, #3
 8002768:	4614      	mov	r4, r2
 800276a:	461d      	mov	r5, r3
 800276c:	4623      	mov	r3, r4
 800276e:	181b      	adds	r3, r3, r0
 8002770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002774:	462b      	mov	r3, r5
 8002776:	eb41 0303 	adc.w	r3, r1, r3
 800277a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800278a:	0a0a      	lsrs	r2, r1, #8
 800278c:	2300      	movs	r3, #0
 800278e:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    
    return comp_press;
 8002792:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
}
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 800279e:	46bd      	mov	sp, r7
 80027a0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027a4:	4770      	bx	lr
	...

080027a8 <bmp390_set_pressure>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <bmp390_set_pressure+0x16>
    {
        return 2;                                                                         /* return error */
 80027ba:	2302      	movs	r3, #2
 80027bc:	e037      	b.n	800282e <bmp390_set_pressure+0x86>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d001      	beq.n	80027cc <bmp390_set_pressure+0x24>
    {
        return 3;                                                                         /* return error */
 80027c8:	2303      	movs	r3, #3
 80027ca:	e030      	b.n	800282e <bmp390_set_pressure+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80027cc:	f107 020e 	add.w	r2, r7, #14
 80027d0:	2301      	movs	r3, #1
 80027d2:	211b      	movs	r1, #27
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff f8b7 	bl	8001948 <a_bmp390_iic_spi_read>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <bmp390_set_pressure+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80027ea:	4813      	ldr	r0, [pc, #76]	@ (8002838 <bmp390_set_pressure+0x90>)
 80027ec:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e01d      	b.n	800282e <bmp390_set_pressure+0x86>
    }
    prev &= ~(1 << 0);                                                                    /* clear config */
 80027f2:	7bbb      	ldrb	r3, [r7, #14]
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 0;                                                                  /* set config */
 80027fc:	7bba      	ldrb	r2, [r7, #14]
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	4313      	orrs	r3, r2
 8002802:	b2db      	uxtb	r3, r3
 8002804:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002806:	f107 020e 	add.w	r2, r7, #14
 800280a:	2301      	movs	r3, #1
 800280c:	211b      	movs	r1, #27
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff f8e5 	bl	80019de <a_bmp390_iic_spi_write>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <bmp390_set_pressure+0x84>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002824:	4805      	ldr	r0, [pc, #20]	@ (800283c <bmp390_set_pressure+0x94>)
 8002826:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <bmp390_set_pressure+0x86>
    }
    
    return 0;                                                                             /* success return 0 */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	0800f7bc 	.word	0x0800f7bc
 800283c:	0800f7e4 	.word	0x0800f7e4

08002840 <bmp390_set_temperature>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <bmp390_set_temperature+0x16>
    {
        return 2;                                                                         /* return error */
 8002852:	2302      	movs	r3, #2
 8002854:	e03c      	b.n	80028d0 <bmp390_set_temperature+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <bmp390_set_temperature+0x24>
    {
        return 3;                                                                         /* return error */
 8002860:	2303      	movs	r3, #3
 8002862:	e035      	b.n	80028d0 <bmp390_set_temperature+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002864:	f107 020e 	add.w	r2, r7, #14
 8002868:	2301      	movs	r3, #1
 800286a:	211b      	movs	r1, #27
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff f86b 	bl	8001948 <a_bmp390_iic_spi_read>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <bmp390_set_temperature+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002882:	4815      	ldr	r0, [pc, #84]	@ (80028d8 <bmp390_set_temperature+0x98>)
 8002884:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8002886:	2301      	movs	r3, #1
 8002888:	e022      	b.n	80028d0 <bmp390_set_temperature+0x90>
    }
    prev &= ~(1 << 1);                                                                    /* clear config */
 800288a:	7bbb      	ldrb	r3, [r7, #14]
 800288c:	f023 0302 	bic.w	r3, r3, #2
 8002890:	b2db      	uxtb	r3, r3
 8002892:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                  /* set config */
 8002894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	b25a      	sxtb	r2, r3
 800289c:	7bbb      	ldrb	r3, [r7, #14]
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80028a8:	f107 020e 	add.w	r2, r7, #14
 80028ac:	2301      	movs	r3, #1
 80028ae:	211b      	movs	r1, #27
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff f894 	bl	80019de <a_bmp390_iic_spi_write>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <bmp390_set_temperature+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80028c6:	4805      	ldr	r0, [pc, #20]	@ (80028dc <bmp390_set_temperature+0x9c>)
 80028c8:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <bmp390_set_temperature+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	0800f7bc 	.word	0x0800f7bc
 80028dc:	0800f7e4 	.word	0x0800f7e4

080028e0 <bmp390_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_mode(bmp390_handle_t *handle, bmp390_mode_t mode)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <bmp390_set_mode+0x16>
    {
        return 2;                                                                         /* return error */
 80028f2:	2302      	movs	r3, #2
 80028f4:	e03c      	b.n	8002970 <bmp390_set_mode+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d001      	beq.n	8002904 <bmp390_set_mode+0x24>
    {
        return 3;                                                                         /* return error */
 8002900:	2303      	movs	r3, #3
 8002902:	e035      	b.n	8002970 <bmp390_set_mode+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002904:	f107 020e 	add.w	r2, r7, #14
 8002908:	2301      	movs	r3, #1
 800290a:	211b      	movs	r1, #27
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff f81b 	bl	8001948 <a_bmp390_iic_spi_read>
 8002912:	4603      	mov	r3, r0
 8002914:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <bmp390_set_mode+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002922:	4815      	ldr	r0, [pc, #84]	@ (8002978 <bmp390_set_mode+0x98>)
 8002924:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8002926:	2301      	movs	r3, #1
 8002928:	e022      	b.n	8002970 <bmp390_set_mode+0x90>
    }
    prev &= ~(3 << 4);                                                                    /* clear config */
 800292a:	7bbb      	ldrb	r3, [r7, #14]
 800292c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002930:	b2db      	uxtb	r3, r3
 8002932:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 4;                                                                    /* set config */
 8002934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	b25a      	sxtb	r2, r3
 800293c:	7bbb      	ldrb	r3, [r7, #14]
 800293e:	b25b      	sxtb	r3, r3
 8002940:	4313      	orrs	r3, r2
 8002942:	b25b      	sxtb	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002948:	f107 020e 	add.w	r2, r7, #14
 800294c:	2301      	movs	r3, #1
 800294e:	211b      	movs	r1, #27
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff f844 	bl	80019de <a_bmp390_iic_spi_write>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <bmp390_set_mode+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <bmp390_set_mode+0x9c>)
 8002968:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <bmp390_set_mode+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	0800f7bc 	.word	0x0800f7bc
 800297c:	0800f7e4 	.word	0x0800f7e4

08002980 <bmp390_set_pressure_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <bmp390_set_pressure_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 8002992:	2302      	movs	r3, #2
 8002994:	e037      	b.n	8002a06 <bmp390_set_pressure_oversampling+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <bmp390_set_pressure_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 80029a0:	2303      	movs	r3, #3
 80029a2:	e030      	b.n	8002a06 <bmp390_set_pressure_oversampling+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 80029a4:	f107 020e 	add.w	r2, r7, #14
 80029a8:	2301      	movs	r3, #1
 80029aa:	211c      	movs	r1, #28
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7fe ffcb 	bl	8001948 <a_bmp390_iic_spi_read>
 80029b2:	4603      	mov	r3, r0
 80029b4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <bmp390_set_pressure_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80029c2:	4813      	ldr	r0, [pc, #76]	@ (8002a10 <bmp390_set_pressure_oversampling+0x90>)
 80029c4:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01d      	b.n	8002a06 <bmp390_set_pressure_oversampling+0x86>
    }
    prev &= ~(7 << 0);                                                               /* clear config */
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	f023 0307 	bic.w	r3, r3, #7
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 0;                                                       /* set config */
 80029d4:	7bba      	ldrb	r2, [r7, #14]
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	4313      	orrs	r3, r2
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 80029de:	f107 020e 	add.w	r2, r7, #14
 80029e2:	2301      	movs	r3, #1
 80029e4:	211c      	movs	r1, #28
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe fff9 	bl	80019de <a_bmp390_iic_spi_write>
 80029ec:	4603      	mov	r3, r0
 80029ee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <bmp390_set_pressure_oversampling+0x84>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80029fc:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <bmp390_set_pressure_oversampling+0x94>)
 80029fe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <bmp390_set_pressure_oversampling+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	0800f80c 	.word	0x0800f80c
 8002a14:	0800f830 	.word	0x0800f830

08002a18 <bmp390_set_temperature_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <bmp390_set_temperature_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e03c      	b.n	8002aa8 <bmp390_set_temperature_oversampling+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d001      	beq.n	8002a3c <bmp390_set_temperature_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e035      	b.n	8002aa8 <bmp390_set_temperature_oversampling+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 8002a3c:	f107 020e 	add.w	r2, r7, #14
 8002a40:	2301      	movs	r3, #1
 8002a42:	211c      	movs	r1, #28
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fe ff7f 	bl	8001948 <a_bmp390_iic_spi_read>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <bmp390_set_temperature_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002a5a:	4815      	ldr	r0, [pc, #84]	@ (8002ab0 <bmp390_set_temperature_oversampling+0x98>)
 8002a5c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e022      	b.n	8002aa8 <bmp390_set_temperature_oversampling+0x90>
    }
    prev &= ~(7 << 3);                                                               /* clear config */
 8002a62:	7bbb      	ldrb	r3, [r7, #14]
 8002a64:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 3;                                                       /* set config */
 8002a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	b25a      	sxtb	r2, r3
 8002a74:	7bbb      	ldrb	r3, [r7, #14]
 8002a76:	b25b      	sxtb	r3, r3
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 8002a80:	f107 020e 	add.w	r2, r7, #14
 8002a84:	2301      	movs	r3, #1
 8002a86:	211c      	movs	r1, #28
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe ffa8 	bl	80019de <a_bmp390_iic_spi_write>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <bmp390_set_temperature_oversampling+0x8e>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002a9e:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <bmp390_set_temperature_oversampling+0x9c>)
 8002aa0:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <bmp390_set_temperature_oversampling+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	0800f80c 	.word	0x0800f80c
 8002ab4:	0800f830 	.word	0x0800f830

08002ab8 <bmp390_set_odr>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_odr(bmp390_handle_t *handle, bmp390_odr_t odr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <bmp390_set_odr+0x16>
    {
        return 2;                                                                    /* return error */
 8002aca:	2302      	movs	r3, #2
 8002acc:	e037      	b.n	8002b3e <bmp390_set_odr+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d001      	beq.n	8002adc <bmp390_set_odr+0x24>
    {
        return 3;                                                                    /* return error */
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e030      	b.n	8002b3e <bmp390_set_odr+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);        /* read config */
 8002adc:	f107 020e 	add.w	r2, r7, #14
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	211d      	movs	r1, #29
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7fe ff2f 	bl	8001948 <a_bmp390_iic_spi_read>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <bmp390_set_odr+0x4a>
    {
        handle->debug_print("bmp390: get odr register failed.\n");                   /* get odr register failed */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002afa:	4813      	ldr	r0, [pc, #76]	@ (8002b48 <bmp390_set_odr+0x90>)
 8002afc:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002afe:	2301      	movs	r3, #1
 8002b00:	e01d      	b.n	8002b3e <bmp390_set_odr+0x86>
    }
    
    prev &= ~(31 << 0);                                                              /* clear config */
 8002b02:	7bbb      	ldrb	r3, [r7, #14]
 8002b04:	f023 031f 	bic.w	r3, r3, #31
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	73bb      	strb	r3, [r7, #14]
    prev |= odr << 0;                                                                /* set config */
 8002b0c:	7bba      	ldrb	r2, [r7, #14]
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);       /* write config */
 8002b16:	f107 020e 	add.w	r2, r7, #14
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	211d      	movs	r1, #29
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe ff5d 	bl	80019de <a_bmp390_iic_spi_write>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <bmp390_set_odr+0x84>
    {
        handle->debug_print("bmp390: set odr register failed.\n");                   /* set odr register failed */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b34:	4805      	ldr	r0, [pc, #20]	@ (8002b4c <bmp390_set_odr+0x94>)
 8002b36:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <bmp390_set_odr+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	0800f854 	.word	0x0800f854
 8002b4c:	0800f878 	.word	0x0800f878

08002b50 <a_bmp390_close>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
static uint8_t a_bmp390_close(bmp390_handle_t *handle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                        /* if iic interface */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10f      	bne.n	8002b82 <a_bmp390_close+0x32>
    {
        if (handle->iic_deinit() != 0)                                  /* close iic */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8002b68:	4798      	blx	r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <a_bmp390_close+0x2e>
        {
            handle->debug_print("bmp390: iic deinit failed.\n");        /* iic deinit failed */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b76:	480c      	ldr	r0, [pc, #48]	@ (8002ba8 <a_bmp390_close+0x58>)
 8002b78:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e010      	b.n	8002ba0 <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e00e      	b.n	8002ba0 <a_bmp390_close+0x50>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                                  /* close spi */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002b88:	4798      	blx	r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d006      	beq.n	8002b9e <a_bmp390_close+0x4e>
        {
            handle->debug_print("bmp390: spi deinit failed.\n");        /* spi deinit failed */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b96:	4805      	ldr	r0, [pc, #20]	@ (8002bac <a_bmp390_close+0x5c>)
 8002b98:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 8002b9e:	2300      	movs	r3, #0
        }
    }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	0800f910 	.word	0x0800f910
 8002bac:	0800f92c 	.word	0x0800f92c

08002bb0 <bmp390_init>:
 *            - 5 reset failed
 *            - 6 get calibration failed
 * @note      none
 */
uint8_t bmp390_init(bmp390_handle_t *handle)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
    uint8_t id;
    uint8_t reg;
  
    if (handle == NULL)                                                              /* check handle */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <bmp390_init+0x12>
    {
        return 2;                                                                    /* return error */
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e107      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->debug_print == NULL)                                                 /* check debug_print */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <bmp390_init+0x20>
    {
        return 3;                                                                    /* return error */
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e100      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->iic_init == NULL)                                                    /* check iic_init */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <bmp390_init+0x38>
    {
        handle->debug_print("bmp390: iic_init is null.\n");                          /* iic_init is null */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002be0:	487e      	ldr	r0, [pc, #504]	@ (8002ddc <bmp390_init+0x22c>)
 8002be2:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0f4      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->iic_deinit == NULL)                                                  /* check iic_init */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <bmp390_init+0x50>
    {
        handle->debug_print("bmp390: iic_deinit is null.\n");                        /* iic_deinit is null */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002bf8:	4879      	ldr	r0, [pc, #484]	@ (8002de0 <bmp390_init+0x230>)
 8002bfa:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0e8      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->iic_read == NULL)                                                    /* check iic_read */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <bmp390_init+0x68>
    {
        handle->debug_print("bmp390: iic_read is null.\n");                          /* iic_read is null */
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c10:	4874      	ldr	r0, [pc, #464]	@ (8002de4 <bmp390_init+0x234>)
 8002c12:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0dc      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->iic_write == NULL)                                                   /* check iic_write */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <bmp390_init+0x80>
    {
        handle->debug_print("bmp390: iic_write is null.\n");                         /* iic_write is null */
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c28:	486f      	ldr	r0, [pc, #444]	@ (8002de8 <bmp390_init+0x238>)
 8002c2a:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0d0      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->spi_init == NULL)                                                    /* check spi_init */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <bmp390_init+0x98>
    {
        handle->debug_print("bmp390: spi_init is null.\n");                          /* spi_init is null */
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c40:	486a      	ldr	r0, [pc, #424]	@ (8002dec <bmp390_init+0x23c>)
 8002c42:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0c4      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->spi_deinit == NULL)                                                  /* check spi_deinit */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <bmp390_init+0xb0>
    {
        handle->debug_print("bmp390: spi_deinit is null.\n");                        /* spi_deinit is null */
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c58:	4865      	ldr	r0, [pc, #404]	@ (8002df0 <bmp390_init+0x240>)
 8002c5a:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0b8      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->spi_read == NULL)                                                    /* check spi_read */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <bmp390_init+0xc8>
    {
        handle->debug_print("bmp390: spi_read is null.\n");                          /* spi_read is null */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c70:	4860      	ldr	r0, [pc, #384]	@ (8002df4 <bmp390_init+0x244>)
 8002c72:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0ac      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->spi_write == NULL)                                                   /* check spi_write */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <bmp390_init+0xe0>
    {
        handle->debug_print("bmp390: spi_write is null.\n");                         /* spi_write is null */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c88:	485b      	ldr	r0, [pc, #364]	@ (8002df8 <bmp390_init+0x248>)
 8002c8a:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0a0      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->delay_ms == NULL)                                                    /* check delay_ms */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <bmp390_init+0xf8>
    {
        handle->debug_print("bmp390: delay_ms is null.\n");                          /* delay_ms is null */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002ca0:	4856      	ldr	r0, [pc, #344]	@ (8002dfc <bmp390_init+0x24c>)
 8002ca2:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e094      	b.n	8002dd2 <bmp390_init+0x222>
    }
    
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                     /* if iic interface */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <bmp390_init+0x11e>
    {
        if (handle->iic_init() != 0)                                                 /* initialize iic bus */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002cb8:	4798      	blx	r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d014      	beq.n	8002cea <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: iic init failed.\n");                       /* iic init failed */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002cc6:	484e      	ldr	r0, [pc, #312]	@ (8002e00 <bmp390_init+0x250>)
 8002cc8:	4798      	blx	r3
            
            return 1;                                                                /* return error */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e081      	b.n	8002dd2 <bmp390_init+0x222>
        }
    }
    else
    {
        if (handle->spi_init() != 0)                                                 /* initialize spi bus */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002cd4:	4798      	blx	r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: spi init failed.\n");                       /* spi init failed */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002ce2:	4848      	ldr	r0, [pc, #288]	@ (8002e04 <bmp390_init+0x254>)
 8002ce4:	4798      	blx	r3
           
            return 1;                                                                /* return error */
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e073      	b.n	8002dd2 <bmp390_init+0x222>
        }
    }
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_CHIP_ID, (uint8_t *)&id, 1) != 0)   /* read chip id */
 8002cea:	f107 020f 	add.w	r2, r7, #15
 8002cee:	2301      	movs	r3, #1
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fe28 	bl	8001948 <a_bmp390_iic_spi_read>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <bmp390_init+0x162>
    {
        handle->debug_print("bmp390: read chip id failed.\n");                       /* read chip id failed */
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d04:	4840      	ldr	r0, [pc, #256]	@ (8002e08 <bmp390_init+0x258>)
 8002d06:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff21 	bl	8002b50 <a_bmp390_close>
        
        return 4;                                                                    /* return error */
 8002d0e:	2304      	movs	r3, #4
 8002d10:	e05f      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (id != 0x60)                                                                  /* check chip id */
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b60      	cmp	r3, #96	@ 0x60
 8002d16:	d009      	beq.n	8002d2c <bmp390_init+0x17c>
    {
        handle->debug_print("bmp390: id is invalid.\n");                             /* id is invalid */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d1e:	483b      	ldr	r0, [pc, #236]	@ (8002e0c <bmp390_init+0x25c>)
 8002d20:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff14 	bl	8002b50 <a_bmp390_close>
        
        return 4;         
 8002d28:	2304      	movs	r3, #4
 8002d2a:	e052      	b.n	8002dd2 <bmp390_init+0x222>
    }                                                                                /* return error */
    reg = 0xB6;                                                                      /* set command */
 8002d2c:	23b6      	movs	r3, #182	@ 0xb6
 8002d2e:	73bb      	strb	r3, [r7, #14]
    if (a_bmp390_iic_spi_write(handle, BMP390_REG_CMD, (uint8_t *)&reg, 1) != 0)     /* write command */
 8002d30:	f107 020e 	add.w	r2, r7, #14
 8002d34:	2301      	movs	r3, #1
 8002d36:	217e      	movs	r1, #126	@ 0x7e
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fe fe50 	bl	80019de <a_bmp390_iic_spi_write>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <bmp390_init+0x1a8>
    {
        handle->debug_print("bmp390: soft rest failed.\n");                          /* soft rest failed */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d4a:	4831      	ldr	r0, [pc, #196]	@ (8002e10 <bmp390_init+0x260>)
 8002d4c:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fefe 	bl	8002b50 <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8002d54:	2305      	movs	r3, #5
 8002d56:	e03c      	b.n	8002dd2 <bmp390_init+0x222>
    }
    handle->delay_ms(10);                                                            /* delay 10 ms */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8002d5e:	200a      	movs	r0, #10
 8002d60:	4798      	blx	r3
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_ERR_REG, (uint8_t *)&reg, 1) != 0)  /* read reg */
 8002d62:	f107 020e 	add.w	r2, r7, #14
 8002d66:	2301      	movs	r3, #1
 8002d68:	2102      	movs	r1, #2
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fdec 	bl	8001948 <a_bmp390_iic_spi_read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <bmp390_init+0x1da>
    {
        handle->debug_print("bmp390: get err reg failed.\n");                        /* return error */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d7c:	4825      	ldr	r0, [pc, #148]	@ (8002e14 <bmp390_init+0x264>)
 8002d7e:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff fee5 	bl	8002b50 <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8002d86:	2305      	movs	r3, #5
 8002d88:	e023      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if ((reg & 0x07) != 0)                                                           /* check running status */
 8002d8a:	7bbb      	ldrb	r3, [r7, #14]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <bmp390_init+0x1f8>
    {
        handle->debug_print("bmp390: find running error.\n");                        /* find running error */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d9a:	481f      	ldr	r0, [pc, #124]	@ (8002e18 <bmp390_init+0x268>)
 8002d9c:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fed6 	bl	8002b50 <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8002da4:	2305      	movs	r3, #5
 8002da6:	e014      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (a_bmp390_get_calibration_data(handle) != 0)                                  /* get calibration data */
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fe fe6d 	bl	8001a88 <a_bmp390_get_calibration_data>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <bmp390_init+0x218>
    {
        handle->debug_print("bmp390: get calibration data error.\n");                /* get calibration data error */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002dba:	4818      	ldr	r0, [pc, #96]	@ (8002e1c <bmp390_init+0x26c>)
 8002dbc:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fec6 	bl	8002b50 <a_bmp390_close>
        
        return 6;                                                                    /* return error */
 8002dc4:	2306      	movs	r3, #6
 8002dc6:	e004      	b.n	8002dd2 <bmp390_init+0x222>
    }
    handle->inited = 1;                                                              /* flag finish initialization */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
     
    return 0;                                                                        /* success return 0 */
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	0800f948 	.word	0x0800f948
 8002de0:	0800f964 	.word	0x0800f964
 8002de4:	0800f984 	.word	0x0800f984
 8002de8:	0800f9a0 	.word	0x0800f9a0
 8002dec:	0800f9bc 	.word	0x0800f9bc
 8002df0:	0800f9d8 	.word	0x0800f9d8
 8002df4:	0800f9f8 	.word	0x0800f9f8
 8002df8:	0800fa14 	.word	0x0800fa14
 8002dfc:	0800fa30 	.word	0x0800fa30
 8002e00:	0800fa4c 	.word	0x0800fa4c
 8002e04:	0800fa68 	.word	0x0800fa68
 8002e08:	0800fa84 	.word	0x0800fa84
 8002e0c:	0800faa4 	.word	0x0800faa4
 8002e10:	0800fabc 	.word	0x0800fabc
 8002e14:	0800fad8 	.word	0x0800fad8
 8002e18:	0800faf8 	.word	0x0800faf8
 8002e1c:	0800fb18 	.word	0x0800fb18

08002e20 <bmp390_read_temperature_pressure>:
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t bmp390_read_temperature_pressure(bmp390_handle_t *handle, uint32_t *temperature_raw, float *temperature_c, 
                                         uint32_t *pressure_raw, float *pressure_pa)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b090      	sub	sp, #64	@ 0x40
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t buf[3];
    
    if (handle == NULL)                                                                       /* check handle */
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <bmp390_read_temperature_pressure+0x18>
    {
        return 2;                                                                             /* return error */
 8002e34:	2302      	movs	r3, #2
 8002e36:	e1fa      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    if (handle->inited != 1)                                                                  /* check handle initialization */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <bmp390_read_temperature_pressure+0x26>
    {
        return 3;                                                                             /* return error */
 8002e42:	2303      	movs	r3, #3
 8002e44:	e1f3      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_FIFO_CONFIG_1, (uint8_t *)&prev, 1);       /* read config */
 8002e46:	f107 0217 	add.w	r2, r7, #23
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	2117      	movs	r1, #23
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7fe fd7a 	bl	8001948 <a_bmp390_iic_spi_read>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 8002e5a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <bmp390_read_temperature_pressure+0x50>
    {
        handle->debug_print("bmp390: get fifo config 1 register failed.\n");                  /* get fifo config 1 register failed */
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002e68:	48b1      	ldr	r0, [pc, #708]	@ (8003130 <bmp390_read_temperature_pressure+0x310>)
 8002e6a:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e1de      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    if ((prev & 0x01) != 0)                                                                   /* check fifo mode */
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <bmp390_read_temperature_pressure+0x68>
    {
        handle->debug_print("bmp390: fifo mode can't use this function.\n");                  /* fifo mode can't use this function */
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002e80:	48ac      	ldr	r0, [pc, #688]	@ (8003134 <bmp390_read_temperature_pressure+0x314>)
 8002e82:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8002e84:	2301      	movs	r3, #1
 8002e86:	e1d2      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);            /* read config */
 8002e88:	f107 0217 	add.w	r2, r7, #23
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	211b      	movs	r1, #27
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7fe fd59 	bl	8001948 <a_bmp390_iic_spi_read>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 8002e9c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <bmp390_read_temperature_pressure+0x92>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                       /* get pwr ctrl register failed */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002eaa:	48a3      	ldr	r0, [pc, #652]	@ (8003138 <bmp390_read_temperature_pressure+0x318>)
 8002eac:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1bd      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    if (((prev >> 4) & 0x03) == 0x03)                                                         /* normal mode */
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	f040 80a0 	bne.w	8003002 <bmp390_read_temperature_pressure+0x1e2>
    {
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);          /* read config */
 8002ec2:	f107 0217 	add.w	r2, r7, #23
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	2103      	movs	r1, #3
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7fe fd3c 	bl	8001948 <a_bmp390_iic_spi_read>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 8002ed6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <bmp390_read_temperature_pressure+0xcc>
        {
            handle->debug_print("bmp390: get status register failed.\n");                     /* get status register failed */
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002ee4:	4895      	ldr	r0, [pc, #596]	@ (800313c <bmp390_read_temperature_pressure+0x31c>)
 8002ee6:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e1a0      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
        if ((prev & (1 << 6)) != 0)                                                           /* data is ready */
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03d      	beq.n	8002f72 <bmp390_read_temperature_pressure+0x152>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);        /* read raw data */
 8002ef6:	f107 0214 	add.w	r2, r7, #20
 8002efa:	2303      	movs	r3, #3
 8002efc:	2107      	movs	r1, #7
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7fe fd22 	bl	8001948 <a_bmp390_iic_spi_read>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8002f0a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <bmp390_read_temperature_pressure+0x100>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002f18:	4889      	ldr	r0, [pc, #548]	@ (8003140 <bmp390_read_temperature_pressure+0x320>)
 8002f1a:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e186      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            }
            *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];       /* get data */
 8002f20:	7dbb      	ldrb	r3, [r7, #22]
 8002f22:	041a      	lsls	r2, r3, #16
 8002f24:	7d7b      	ldrb	r3, [r7, #21]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	7d3a      	ldrb	r2, [r7, #20]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_temperature(handle, *temperature_raw);               /* compensate temperature */
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4619      	mov	r1, r3
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7fe ff13 	bl	8001d64 <a_bmp390_compensate_temperature>
 8002f3e:	e9c7 0108 	strd	r0, r1, [r7, #32]
            *temperature_c = (float)((double)output / 100.0);                                 /* get converted temperature */
 8002f42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f46:	f7fd fb49 	bl	80005dc <__aeabi_l2d>
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8003144 <bmp390_read_temperature_pressure+0x324>)
 8002f50:	f7fd fc9c 	bl	800088c <__aeabi_ddiv>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7fd fe64 	bl	8000c28 <__aeabi_d2f>
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
        {
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
           
            return 1;                                                                         /* return error */
        }
        if ((prev & (1 << 5)) != 0)                                                           /* data is ready */
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d041      	beq.n	8002ff4 <bmp390_read_temperature_pressure+0x1d4>
 8002f70:	e006      	b.n	8002f80 <bmp390_read_temperature_pressure+0x160>
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002f78:	4873      	ldr	r0, [pc, #460]	@ (8003148 <bmp390_read_temperature_pressure+0x328>)
 8002f7a:	4798      	blx	r3
            return 1;                                                                         /* return error */
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e156      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);        /* read data */
 8002f80:	f107 0214 	add.w	r2, r7, #20
 8002f84:	2303      	movs	r3, #3
 8002f86:	2104      	movs	r1, #4
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7fe fcdd 	bl	8001948 <a_bmp390_iic_spi_read>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8002f94:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <bmp390_read_temperature_pressure+0x18a>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002fa2:	4867      	ldr	r0, [pc, #412]	@ (8003140 <bmp390_read_temperature_pressure+0x320>)
 8002fa4:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e141      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            }
            *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];          /* get data */
 8002faa:	7dbb      	ldrb	r3, [r7, #22]
 8002fac:	041a      	lsls	r2, r3, #16
 8002fae:	7d7b      	ldrb	r3, [r7, #21]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	7d3a      	ldrb	r2, [r7, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_pressure(handle, *pressure_raw);                     /* compensate pressure */
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7fe ffb6 	bl	8001f34 <a_bmp390_compensate_pressure>
 8002fc8:	e9c7 0106 	strd	r0, r1, [r7, #24]
            *pressure_pa = (float)((double)output / 100.0);                                   /* get converted pressure */
 8002fcc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fd0:	f7fd fb04 	bl	80005dc <__aeabi_l2d>
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8003144 <bmp390_read_temperature_pressure+0x324>)
 8002fda:	f7fd fc57 	bl	800088c <__aeabi_ddiv>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f7fd fe1f 	bl	8000c28 <__aeabi_d2f>
 8002fea:	4602      	mov	r2, r0
 8002fec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fee:	601a      	str	r2, [r3, #0]
            
            return 0;                                                                         /* success return 0 */
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e11c      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
        else
        {
            handle->debug_print("bmp390: pressure data is not ready.\n");                     /* pressure data is not ready */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002ffa:	4854      	ldr	r0, [pc, #336]	@ (800314c <bmp390_read_temperature_pressure+0x32c>)
 8002ffc:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8002ffe:	2301      	movs	r3, #1
 8003000:	e115      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
    }
    else if (((prev >> 4) & 0x03) == 0x00)                                                    /* force mode */
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 8108 	bne.w	8003222 <bmp390_read_temperature_pressure+0x402>
    {
        uint16_t cnt = 5000;
 8003012:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003016:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8003018:	f107 0217 	add.w	r2, r7, #23
 800301c:	2301      	movs	r3, #1
 800301e:	211b      	movs	r1, #27
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7fe fc91 	bl	8001948 <a_bmp390_iic_spi_read>
 8003026:	4603      	mov	r3, r0
 8003028:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 800302c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <bmp390_read_temperature_pressure+0x222>
        {
            handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800303a:	483f      	ldr	r0, [pc, #252]	@ (8003138 <bmp390_read_temperature_pressure+0x318>)
 800303c:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 800303e:	2301      	movs	r3, #1
 8003040:	e0f5      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
        prev &= ~(0x03 << 4);                                                                 /* clear 4-5 bits */
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003048:	b2db      	uxtb	r3, r3
 800304a:	75fb      	strb	r3, [r7, #23]
        prev |= 0x01 << 4;                                                                    /* set bit 4 */
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	f043 0310 	orr.w	r3, r3, #16
 8003052:	b2db      	uxtb	r3, r3
 8003054:	75fb      	strb	r3, [r7, #23]
        res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8003056:	f107 0217 	add.w	r2, r7, #23
 800305a:	2301      	movs	r3, #1
 800305c:	211b      	movs	r1, #27
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7fe fcbd 	bl	80019de <a_bmp390_iic_spi_write>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 800306a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <bmp390_read_temperature_pressure+0x260>
        {
            handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003078:	4835      	ldr	r0, [pc, #212]	@ (8003150 <bmp390_read_temperature_pressure+0x330>)
 800307a:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 800307c:	2301      	movs	r3, #1
 800307e:	e0d6      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
        
        while (1)                                                                             /* loop */
        {
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 8003080:	f107 0217 	add.w	r2, r7, #23
 8003084:	2301      	movs	r3, #1
 8003086:	2103      	movs	r1, #3
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7fe fc5d 	bl	8001948 <a_bmp390_iic_spi_read>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8003094:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <bmp390_read_temperature_pressure+0x28a>
            {
                handle->debug_print("bmp390: get status register failed.\n");                 /* get status register failed */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80030a2:	4826      	ldr	r0, [pc, #152]	@ (800313c <bmp390_read_temperature_pressure+0x31c>)
 80030a4:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0c1      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            }
            if ((prev & (1 << 6)) != 0)                                                       /* data is ready */
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d04f      	beq.n	8003154 <bmp390_read_temperature_pressure+0x334>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);    /* read raw data */
 80030b4:	f107 0214 	add.w	r2, r7, #20
 80030b8:	2303      	movs	r3, #3
 80030ba:	2107      	movs	r1, #7
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7fe fc43 	bl	8001948 <a_bmp390_iic_spi_read>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 80030c8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <bmp390_read_temperature_pressure+0x2be>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80030d6:	481a      	ldr	r0, [pc, #104]	@ (8003140 <bmp390_read_temperature_pressure+0x320>)
 80030d8:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 80030da:	2301      	movs	r3, #1
 80030dc:	e0a7      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
                }
                *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];   /* get data */
 80030de:	7dbb      	ldrb	r3, [r7, #22]
 80030e0:	041a      	lsls	r2, r3, #16
 80030e2:	7d7b      	ldrb	r3, [r7, #21]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	4313      	orrs	r3, r2
 80030e8:	7d3a      	ldrb	r2, [r7, #20]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_temperature(handle, *temperature_raw);           /* compensate temperature */
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7fe fe34 	bl	8001d64 <a_bmp390_compensate_temperature>
 80030fc:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                *temperature_c = (float)((double)output / 100.0);                             /* get converted temperature */
 8003100:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003104:	f7fd fa6a 	bl	80005dc <__aeabi_l2d>
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <bmp390_read_temperature_pressure+0x324>)
 800310e:	f7fd fbbd 	bl	800088c <__aeabi_ddiv>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7fd fd85 	bl	8000c28 <__aeabi_d2f>
 800311e:	4602      	mov	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	601a      	str	r2, [r3, #0]
                
                break;                                                                        /* break */
 8003124:	bf00      	nop
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
               
                return 1;                                                                     /* return error */
            }
        }
        cnt = 5000;                                                                           /* set cnt */
 8003126:	f241 3388 	movw	r3, #5000	@ 0x1388
 800312a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800312c:	e026      	b.n	800317c <bmp390_read_temperature_pressure+0x35c>
 800312e:	bf00      	nop
 8003130:	0800f64c 	.word	0x0800f64c
 8003134:	0800fb40 	.word	0x0800fb40
 8003138:	0800f7bc 	.word	0x0800f7bc
 800313c:	0800f4f0 	.word	0x0800f4f0
 8003140:	0800fb6c 	.word	0x0800fb6c
 8003144:	40590000 	.word	0x40590000
 8003148:	0800fb90 	.word	0x0800fb90
 800314c:	0800fbd4 	.word	0x0800fbd4
 8003150:	0800f7e4 	.word	0x0800f7e4
                if (cnt != 0)                                                                 /* check cnt */
 8003154:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <bmp390_read_temperature_pressure+0x34c>
                    cnt--;                                                                    /* cnt-- */
 800315a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800315c:	3b01      	subs	r3, #1
 800315e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003166:	2001      	movs	r0, #1
 8003168:	4798      	blx	r3
                    continue;                                                                 /* continue */
 800316a:	e006      	b.n	800317a <bmp390_read_temperature_pressure+0x35a>
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003172:	4831      	ldr	r0, [pc, #196]	@ (8003238 <bmp390_read_temperature_pressure+0x418>)
 8003174:	4798      	blx	r3
                return 1;                                                                     /* return error */
 8003176:	2301      	movs	r3, #1
 8003178:	e059      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 800317a:	e781      	b.n	8003080 <bmp390_read_temperature_pressure+0x260>
        
        while (1)                                                                             /* loop */
        {
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d039      	beq.n	80031fa <bmp390_read_temperature_pressure+0x3da>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);    /* read raw data */
 8003186:	f107 0214 	add.w	r2, r7, #20
 800318a:	2303      	movs	r3, #3
 800318c:	2104      	movs	r1, #4
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7fe fbda 	bl	8001948 <a_bmp390_iic_spi_read>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 800319a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <bmp390_read_temperature_pressure+0x390>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80031a8:	4824      	ldr	r0, [pc, #144]	@ (800323c <bmp390_read_temperature_pressure+0x41c>)
 80031aa:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 80031ac:	2301      	movs	r3, #1
 80031ae:	e03e      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
                }
                *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];      /* get data */
 80031b0:	7dbb      	ldrb	r3, [r7, #22]
 80031b2:	041a      	lsls	r2, r3, #16
 80031b4:	7d7b      	ldrb	r3, [r7, #21]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	4313      	orrs	r3, r2
 80031ba:	7d3a      	ldrb	r2, [r7, #20]
 80031bc:	431a      	orrs	r2, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_pressure(handle, *pressure_raw);                 /* compensate pressure */
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7fe feb3 	bl	8001f34 <a_bmp390_compensate_pressure>
 80031ce:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                *pressure_pa = (float)((double)output / 100.0);                               /* get converted pressure */
 80031d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031d6:	f7fd fa01 	bl	80005dc <__aeabi_l2d>
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <bmp390_read_temperature_pressure+0x420>)
 80031e0:	f7fd fb54 	bl	800088c <__aeabi_ddiv>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fd1c 	bl	8000c28 <__aeabi_d2f>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f4:	601a      	str	r2, [r3, #0]
                
                return 0;                                                                     /* success return 0 */
 80031f6:	2300      	movs	r3, #0
 80031f8:	e019      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            }
            else
            {
                if (cnt != 0)                                                                 /* check cnt */
 80031fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <bmp390_read_temperature_pressure+0x3f2>
                {
                    cnt--;                                                                    /* cnt-- */
 8003200:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003202:	3b01      	subs	r3, #1
 8003204:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800320c:	2001      	movs	r0, #1
 800320e:	4798      	blx	r3
                    
                    continue;                                                                 /* continue */
 8003210:	e006      	b.n	8003220 <bmp390_read_temperature_pressure+0x400>
                }
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003218:	4807      	ldr	r0, [pc, #28]	@ (8003238 <bmp390_read_temperature_pressure+0x418>)
 800321a:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 800321c:	2301      	movs	r3, #1
 800321e:	e006      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 8003220:	e7ac      	b.n	800317c <bmp390_read_temperature_pressure+0x35c>
            }
        }
    }
    else
    {
        handle->debug_print("bmp390: mode is invalid.\n");                                    /* mode is invalid */
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003228:	4806      	ldr	r0, [pc, #24]	@ (8003244 <bmp390_read_temperature_pressure+0x424>)
 800322a:	4798      	blx	r3
           
        return 1;                                                                             /* return error */
 800322c:	2301      	movs	r3, #1
    }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3740      	adds	r7, #64	@ 0x40
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	0800fb90 	.word	0x0800fb90
 800323c:	0800fb6c 	.word	0x0800fb6c
 8003240:	40590000 	.word	0x40590000
 8003244:	0800fbb8 	.word	0x0800fbb8

08003248 <bmp390_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_addr_pin(bmp390_handle_t *handle, bmp390_address_t addr_pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <bmp390_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 800325a:	2302      	movs	r3, #2
 800325c:	e003      	b.n	8003266 <bmp390_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set iic address */
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <bmp390_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_interface(bmp390_handle_t *handle, bmp390_interface_t interface) 
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                        /* check handle */
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <bmp390_set_interface+0x16>
    {
        return 2;                              /* return error */
 8003284:	2302      	movs	r3, #2
 8003286:	e004      	b.n	8003292 <bmp390_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;      /* set interface */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
    
    return 0;                                  /* success return 0 */
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <kalman_init>:
void kalman_init(KalmanFilter *kf,
                 float initial_altitude_m,
                 float initial_altitude_variance,
                 float initial_velocity_variance,
                 float process_noise_accel_variance,
                 float measurement_noise_baro_variance) {
 800329e:	b480      	push	{r7}
 80032a0:	b087      	sub	sp, #28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6178      	str	r0, [r7, #20]
 80032a6:	ed87 0a04 	vstr	s0, [r7, #16]
 80032aa:	edc7 0a03 	vstr	s1, [r7, #12]
 80032ae:	ed87 1a02 	vstr	s2, [r7, #8]
 80032b2:	edc7 1a01 	vstr	s3, [r7, #4]
 80032b6:	ed87 2a00 	vstr	s4, [r7]
    kf->altitude_m = initial_altitude_m;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	601a      	str	r2, [r3, #0]
    kf->vertical_velocity_mps = 0.0f; // Assume initial vertical velocity is zero unless specified
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	605a      	str	r2, [r3, #4]

    // Initialize covariance matrix P
    // P = [[var_alt, 0],
    //      [0, var_vel]]
    kf->P[0][0] = initial_altitude_variance;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	609a      	str	r2, [r3, #8]
    kf->P[0][1] = 0.0f;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
    kf->P[1][0] = 0.0f;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
    kf->P[1][1] = initial_velocity_variance;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	615a      	str	r2, [r3, #20]

    kf->Q_accel_variance = process_noise_accel_variance;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	619a      	str	r2, [r3, #24]
    kf->R_baro_altitude_variance = measurement_noise_baro_variance;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	61da      	str	r2, [r3, #28]
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <kalman_predict>:

void kalman_predict(KalmanFilter *kf, float vertical_accel_mps2, float dt) {
 80032fc:	b480      	push	{r7}
 80032fe:	b099      	sub	sp, #100	@ 0x64
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	ed87 0a02 	vstr	s0, [r7, #8]
 8003308:	edc7 0a01 	vstr	s1, [r7, #4]
    // Control input matrix B = [[0.5*dt^2],
    //                           [dt]]
    // Control input u = [vertical_accel_mps2]

    // Predict state: x_k_minus = A * x_k_minus_1_plus + B * u_k_minus_1
    float prev_alt = kf->altitude_m;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float prev_vel = kf->vertical_velocity_mps;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	65bb      	str	r3, [r7, #88]	@ 0x58

    kf->altitude_m = prev_alt + prev_vel * dt + 0.5f * vertical_accel_mps2 * dt * dt;
 8003318:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800331c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003324:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800332c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003330:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003334:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003338:	edd7 7a01 	vldr	s15, [r7, #4]
 800333c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003340:	edd7 7a01 	vldr	s15, [r7, #4]
 8003344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	edc3 7a00 	vstr	s15, [r3]
    kf->vertical_velocity_mps = prev_vel + vertical_accel_mps2 * dt;
 8003352:	ed97 7a02 	vldr	s14, [r7, #8]
 8003356:	edd7 7a01 	vldr	s15, [r7, #4]
 800335a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800335e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	edc3 7a01 	vstr	s15, [r3, #4]

    // Predict covariance: P_k_minus = A * P_k_minus_1_plus * A' + Q
    // Q = [[0.25*dt^4, 0.5*dt^3],
    //      [0.5*dt^3,  dt^2]] * Q_accel_variance

    float p00 = kf->P[0][0];
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	657b      	str	r3, [r7, #84]	@ 0x54
    float p01 = kf->P[0][1];
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	653b      	str	r3, [r7, #80]	@ 0x50
    float p10 = kf->P[1][0]; // Should be equal to p01
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float p11 = kf->P[1][1];
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	64bb      	str	r3, [r7, #72]	@ 0x48

    // A*P
    float ap00 = p00 + dt * p10;
 8003384:	ed97 7a01 	vldr	s14, [r7, #4]
 8003388:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800338c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003390:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003398:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float ap01 = p01 + dt * p11;
 800339c:	ed97 7a01 	vldr	s14, [r7, #4]
 80033a0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80033a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80033ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float ap10 = p10; // 0*p00 + 1*p10
 80033b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float ap11 = p11; // 0*p01 + 1*p11
 80033b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ba:	63bb      	str	r3, [r7, #56]	@ 0x38

    // (A*P)*A'
    // A' = [[1, 0],
    //       [dt,1]]
    float p_pred_00 = ap00 * 1.0f + ap01 * dt;
 80033bc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80033c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80033cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float p_pred_01 = ap00 * 0.0f + ap01 * 1.0f;
 80033d4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80033d8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80034e4 <kalman_predict+0x1e8>
 80033dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80033e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float p_pred_10 = ap10 * 1.0f + ap11 * dt;
 80033ec:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80033f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80033fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003400:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float p_pred_11 = ap10 * 0.0f + ap11 * 1.0f;
 8003404:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003408:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80034e4 <kalman_predict+0x1e8>
 800340c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003410:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003418:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    
    // Add Q (Process Noise Covariance)
    float dt2 = dt * dt;
 800341c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003420:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003424:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float dt3 = dt2 * dt;
 8003428:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800342c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003434:	edc7 7a08 	vstr	s15, [r7, #32]
    float dt4 = dt3 * dt;
 8003438:	ed97 7a08 	vldr	s14, [r7, #32]
 800343c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003444:	edc7 7a07 	vstr	s15, [r7, #28]

    float q00 = 0.25f * dt4 * kf->Q_accel_variance;
 8003448:	edd7 7a07 	vldr	s15, [r7, #28]
 800344c:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8003450:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	edd3 7a06 	vldr	s15, [r3, #24]
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345e:	edc7 7a06 	vstr	s15, [r7, #24]
    float q01 = 0.5f  * dt3 * kf->Q_accel_variance;
 8003462:	edd7 7a08 	vldr	s15, [r7, #32]
 8003466:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800346a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	edd3 7a06 	vldr	s15, [r3, #24]
 8003474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003478:	edc7 7a05 	vstr	s15, [r7, #20]
    // float q10 = q01; // Q is symmetric
    float q11 = dt2 * kf->Q_accel_variance;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003482:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348a:	edc7 7a04 	vstr	s15, [r7, #16]

    kf->P[0][0] = p_pred_00 + q00;
 800348e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003492:	edd7 7a06 	vldr	s15, [r7, #24]
 8003496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P[0][1] = p_pred_01 + q01;
 80034a0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80034a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[1][0] = p_pred_10 + q01; // Using q01 for symmetry
 80034b2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80034b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][1] = p_pred_11 + q11;
 80034c4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80034c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80034cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80034d6:	bf00      	nop
 80034d8:	3764      	adds	r7, #100	@ 0x64
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	00000000 	.word	0x00000000

080034e8 <kalman_update_barometer>:

void kalman_update_barometer(KalmanFilter *kf, float baro_altitude_m) {
 80034e8:	b480      	push	{r7}
 80034ea:	b08b      	sub	sp, #44	@ 0x2c
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	ed87 0a00 	vstr	s0, [r7]
    // Measurement matrix H = [1, 0] (measures altitude)
    // Measurement z = baro_altitude_m

    // Innovation (measurement residual): y = z - H * x_k_minus
    float y_residual = baro_altitude_m - kf->altitude_m; // H*x_k_minus is just kf->altitude_m
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	ed97 7a00 	vldr	s14, [r7]
 80034fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003502:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Innovation covariance: S = H * P_k_minus * H' + R
    // H * P_k_minus * H' = P_k_minus[0][0]
    float S_innovation_cov = kf->P[0][0] + kf->R_baro_altitude_variance;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	ed93 7a02 	vldr	s14, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003516:	edc7 7a08 	vstr	s15, [r7, #32]

    if (S_innovation_cov == 0.0f) {
 800351a:	edd7 7a08 	vldr	s15, [r7, #32]
 800351e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	d070      	beq.n	800360a <kalman_update_barometer+0x122>
        return;
    }

    // Kalman Gain K = P_k_minus * H' * S^-1
    // P_k_minus * H' = [[P00], [P10]] (since H' = [[1],[0]])
    float K0 = kf->P[0][0] / S_innovation_cov;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	edd3 6a02 	vldr	s13, [r3, #8]
 800352e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003536:	edc7 7a07 	vstr	s15, [r7, #28]
    float K1 = kf->P[1][0] / S_innovation_cov;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	edd3 6a04 	vldr	s13, [r3, #16]
 8003540:	ed97 7a08 	vldr	s14, [r7, #32]
 8003544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003548:	edc7 7a06 	vstr	s15, [r7, #24]

    // Update state estimate: x_k_plus = x_k_minus + K * y
    kf->altitude_m = kf->altitude_m + K0 * y_residual;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	ed93 7a00 	vldr	s14, [r3]
 8003552:	edd7 6a07 	vldr	s13, [r7, #28]
 8003556:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800355a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800355e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	edc3 7a00 	vstr	s15, [r3]
    kf->vertical_velocity_mps = kf->vertical_velocity_mps + K1 * y_residual;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	ed93 7a01 	vldr	s14, [r3, #4]
 800356e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003572:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update covariance estimate: P_k_plus = (I - K * H) * P_k_minus
    // I - K*H = [[1-K0,  0],
    //            [ -K1,  1]]
    float p00 = kf->P[0][0];
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	617b      	str	r3, [r7, #20]
    float p01 = kf->P[0][1];
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	613b      	str	r3, [r7, #16]
    // p10 = kf->P[1][0]; // same as p01
    float p11 = kf->P[1][1];
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	60fb      	str	r3, [r7, #12]

    kf->P[0][0] = (1.0f - K0) * p00;
 8003596:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800359a:	edd7 7a07 	vldr	s15, [r7, #28]
 800359e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P[0][1] = (1.0f - K0) * p01;
 80035b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80035b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80035c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[1][0] = -K1 * p00 + kf->P[1][0]; // kf->P[1][0] is p10 from P_k_minus
 80035ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80035ce:	eeb1 7a67 	vneg.f32	s14, s15
 80035d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80035e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][1] = -K1 * p01 + p11;
 80035ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80035ee:	eeb1 7a67 	vneg.f32	s14, s15
 80035f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80035f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80035fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	edc3 7a05 	vstr	s15, [r3, #20]
 8003608:	e000      	b.n	800360c <kalman_update_barometer+0x124>
        return;
 800360a:	bf00      	nop
    // For robustness:
    // kf->P[1][0] = kf->P[0][1]; 
    // However, the (I-KH)P formula used above should maintain symmetry if P was symmetric.
    // More robust P update: P = (I-KH)P(I-KH)' + KRK' (Joseph form, but more complex)
    // For now, the P_updated = (I - K * H) * P_k_minus is standard and often sufficient.
}
 800360c:	372c      	adds	r7, #44	@ 0x2c
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003616:	b590      	push	{r4, r7, lr}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	461a      	mov	r2, r3
 8003622:	460b      	mov	r3, r1
 8003624:	72fb      	strb	r3, [r7, #11]
 8003626:	4613      	mov	r3, r2
 8003628:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685c      	ldr	r4, [r3, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68d8      	ldr	r0, [r3, #12]
 8003632:	893b      	ldrh	r3, [r7, #8]
 8003634:	7af9      	ldrb	r1, [r7, #11]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	47a0      	blx	r4
 800363a:	6178      	str	r0, [r7, #20]

  return ret;
 800363c:	697b      	ldr	r3, [r7, #20]
}
 800363e:	4618      	mov	r0, r3
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	bd90      	pop	{r4, r7, pc}

08003646 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8003646:	b590      	push	{r4, r7, lr}
 8003648:	b087      	sub	sp, #28
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	461a      	mov	r2, r3
 8003652:	460b      	mov	r3, r1
 8003654:	72fb      	strb	r3, [r7, #11]
 8003656:	4613      	mov	r3, r2
 8003658:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681c      	ldr	r4, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68d8      	ldr	r0, [r3, #12]
 8003662:	893b      	ldrh	r3, [r7, #8]
 8003664:	7af9      	ldrb	r1, [r7, #11]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	47a0      	blx	r4
 800366a:	6178      	str	r0, [r7, #20]

  return ret;
 800366c:	697b      	ldr	r3, [r7, #20]
}
 800366e:	4618      	mov	r0, r3
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}

08003676 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003682:	f107 0208 	add.w	r2, r7, #8
 8003686:	2301      	movs	r3, #1
 8003688:	2110      	movs	r1, #16
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ffc3 	bl	8003616 <lsm6dso_read_reg>
 8003690:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10f      	bne.n	80036b8 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	7a3b      	ldrb	r3, [r7, #8]
 80036a2:	f362 0383 	bfi	r3, r2, #2, #2
 80036a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80036a8:	f107 0208 	add.w	r2, r7, #8
 80036ac:	2301      	movs	r3, #1
 80036ae:	2110      	movs	r1, #16
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ffc8 	bl	8003646 <lsm6dso_write_reg>
 80036b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036b8:	68fb      	ldr	r3, [r7, #12]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	4619      	mov	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fb49 	bl	8003d72 <lsm6dso_fsm_enable_get>
 80036e0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 80c4 	bne.w	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80036ea:	7b3b      	ldrb	r3, [r7, #12]
 80036ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80036f2:	7b3b      	ldrb	r3, [r7, #12]
 80036f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80036f8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80036fa:	4313      	orrs	r3, r2
 80036fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80036fe:	7b3b      	ldrb	r3, [r7, #12]
 8003700:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003704:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003706:	4313      	orrs	r3, r2
 8003708:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800370a:	7b3b      	ldrb	r3, [r7, #12]
 800370c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003710:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003712:	4313      	orrs	r3, r2
 8003714:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003716:	7b3b      	ldrb	r3, [r7, #12]
 8003718:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800371c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800371e:	4313      	orrs	r3, r2
 8003720:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003722:	7b3b      	ldrb	r3, [r7, #12]
 8003724:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003728:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800372a:	4313      	orrs	r3, r2
 800372c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800372e:	7b3b      	ldrb	r3, [r7, #12]
 8003730:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003734:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003736:	4313      	orrs	r3, r2
 8003738:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800373a:	7b3b      	ldrb	r3, [r7, #12]
 800373c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003740:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003742:	4313      	orrs	r3, r2
 8003744:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003746:	7b7b      	ldrb	r3, [r7, #13]
 8003748:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800374c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800374e:	4313      	orrs	r3, r2
 8003750:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003752:	7b7b      	ldrb	r3, [r7, #13]
 8003754:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003758:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800375a:	4313      	orrs	r3, r2
 800375c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800375e:	7b7b      	ldrb	r3, [r7, #13]
 8003760:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003764:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003766:	4313      	orrs	r3, r2
 8003768:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800376a:	7b7b      	ldrb	r3, [r7, #13]
 800376c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003770:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003772:	4313      	orrs	r3, r2
 8003774:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003776:	7b7b      	ldrb	r3, [r7, #13]
 8003778:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800377c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800377e:	4313      	orrs	r3, r2
 8003780:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003782:	7b7b      	ldrb	r3, [r7, #13]
 8003784:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003788:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800378a:	4313      	orrs	r3, r2
 800378c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800378e:	7b7b      	ldrb	r3, [r7, #13]
 8003790:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003794:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003796:	4313      	orrs	r3, r2
 8003798:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800379a:	7b7b      	ldrb	r3, [r7, #13]
 800379c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80037a2:	4313      	orrs	r3, r2
 80037a4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d163      	bne.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80037aa:	f107 030b 	add.w	r3, r7, #11
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 faff 	bl	8003db4 <lsm6dso_fsm_data_rate_get>
 80037b6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d159      	bne.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80037be:	7afb      	ldrb	r3, [r7, #11]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d853      	bhi.n	800386c <lsm6dso_xl_data_rate_set+0x1a8>
 80037c4:	a201      	add	r2, pc, #4	@ (adr r2, 80037cc <lsm6dso_xl_data_rate_set+0x108>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	080037ef 	.word	0x080037ef
 80037d4:	0800380d 	.word	0x0800380d
 80037d8:	08003837 	.word	0x08003837
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80037e6:	e044      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	75fb      	strb	r3, [r7, #23]
            break;
 80037ec:	e041      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80037f4:	2302      	movs	r3, #2
 80037f6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80037f8:	e03b      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d102      	bne.n	8003806 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8003800:	2302      	movs	r3, #2
 8003802:	75fb      	strb	r3, [r7, #23]
            break;
 8003804:	e035      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	75fb      	strb	r3, [r7, #23]
            break;
 800380a:	e032      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8003812:	2303      	movs	r3, #3
 8003814:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003816:	e02c      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800381e:	2303      	movs	r3, #3
 8003820:	75fb      	strb	r3, [r7, #23]
            break;
 8003822:	e026      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d102      	bne.n	8003830 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800382a:	2303      	movs	r3, #3
 800382c:	75fb      	strb	r3, [r7, #23]
            break;
 800382e:	e020      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	75fb      	strb	r3, [r7, #23]
            break;
 8003834:	e01d      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800383c:	2304      	movs	r3, #4
 800383e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003840:	e017      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d102      	bne.n	800384e <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8003848:	2304      	movs	r3, #4
 800384a:	75fb      	strb	r3, [r7, #23]
            break;
 800384c:	e011      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d102      	bne.n	800385a <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8003854:	2304      	movs	r3, #4
 8003856:	75fb      	strb	r3, [r7, #23]
            break;
 8003858:	e00b      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d102      	bne.n	8003866 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8003860:	2304      	movs	r3, #4
 8003862:	75fb      	strb	r3, [r7, #23]
            break;
 8003864:	e005      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	75fb      	strb	r3, [r7, #23]
            break;
 800386a:	e002      	b.n	8003872 <lsm6dso_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	75fb      	strb	r3, [r7, #23]
            break;
 8003870:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d107      	bne.n	8003888 <lsm6dso_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003878:	f107 0208 	add.w	r2, r7, #8
 800387c:	2301      	movs	r3, #1
 800387e:	2110      	movs	r1, #16
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fec8 	bl	8003616 <lsm6dso_read_reg>
 8003886:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <lsm6dso_xl_data_rate_set+0x1ea>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	b2da      	uxtb	r2, r3
 8003896:	7a3b      	ldrb	r3, [r7, #8]
 8003898:	f362 1307 	bfi	r3, r2, #4, #4
 800389c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800389e:	f107 0208 	add.w	r2, r7, #8
 80038a2:	2301      	movs	r3, #1
 80038a4:	2110      	movs	r1, #16
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fecd 	bl	8003646 <lsm6dso_write_reg>
 80038ac:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80038ae:	693b      	ldr	r3, [r7, #16]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80038c4:	f107 0208 	add.w	r2, r7, #8
 80038c8:	2301      	movs	r3, #1
 80038ca:	2111      	movs	r1, #17
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff fea2 	bl	8003616 <lsm6dso_read_reg>
 80038d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	7a3b      	ldrb	r3, [r7, #8]
 80038e4:	f362 0343 	bfi	r3, r2, #1, #3
 80038e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80038ea:	f107 0208 	add.w	r2, r7, #8
 80038ee:	2301      	movs	r3, #1
 80038f0:	2111      	movs	r1, #17
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fea7 	bl	8003646 <lsm6dso_write_reg>
 80038f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80038fa:	68fb      	ldr	r3, [r7, #12]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fa29 	bl	8003d72 <lsm6dso_fsm_enable_get>
 8003920:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 80c4 	bne.w	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800392a:	7b3b      	ldrb	r3, [r7, #12]
 800392c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003930:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003932:	7b3b      	ldrb	r3, [r7, #12]
 8003934:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003938:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800393a:	4313      	orrs	r3, r2
 800393c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800393e:	7b3b      	ldrb	r3, [r7, #12]
 8003940:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003944:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003946:	4313      	orrs	r3, r2
 8003948:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800394a:	7b3b      	ldrb	r3, [r7, #12]
 800394c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003950:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003952:	4313      	orrs	r3, r2
 8003954:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003956:	7b3b      	ldrb	r3, [r7, #12]
 8003958:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800395c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800395e:	4313      	orrs	r3, r2
 8003960:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003962:	7b3b      	ldrb	r3, [r7, #12]
 8003964:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003968:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800396a:	4313      	orrs	r3, r2
 800396c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800396e:	7b3b      	ldrb	r3, [r7, #12]
 8003970:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003974:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003976:	4313      	orrs	r3, r2
 8003978:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800397a:	7b3b      	ldrb	r3, [r7, #12]
 800397c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003980:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003982:	4313      	orrs	r3, r2
 8003984:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003986:	7b7b      	ldrb	r3, [r7, #13]
 8003988:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800398c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800398e:	4313      	orrs	r3, r2
 8003990:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003992:	7b7b      	ldrb	r3, [r7, #13]
 8003994:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003998:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800399a:	4313      	orrs	r3, r2
 800399c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800399e:	7b7b      	ldrb	r3, [r7, #13]
 80039a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80039a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80039aa:	7b7b      	ldrb	r3, [r7, #13]
 80039ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80039b2:	4313      	orrs	r3, r2
 80039b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80039b6:	7b7b      	ldrb	r3, [r7, #13]
 80039b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80039be:	4313      	orrs	r3, r2
 80039c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80039c2:	7b7b      	ldrb	r3, [r7, #13]
 80039c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80039ca:	4313      	orrs	r3, r2
 80039cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80039ce:	7b7b      	ldrb	r3, [r7, #13]
 80039d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80039d6:	4313      	orrs	r3, r2
 80039d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80039da:	7b7b      	ldrb	r3, [r7, #13]
 80039dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d163      	bne.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80039ea:	f107 030b 	add.w	r3, r7, #11
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f9df 	bl	8003db4 <lsm6dso_fsm_data_rate_get>
 80039f6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d159      	bne.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80039fe:	7afb      	ldrb	r3, [r7, #11]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d853      	bhi.n	8003aac <lsm6dso_gy_data_rate_set+0x1a8>
 8003a04:	a201      	add	r2, pc, #4	@ (adr r2, 8003a0c <lsm6dso_gy_data_rate_set+0x108>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003a2f 	.word	0x08003a2f
 8003a14:	08003a4d 	.word	0x08003a4d
 8003a18:	08003a77 	.word	0x08003a77
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003a26:	e044      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	75fb      	strb	r3, [r7, #23]
            break;
 8003a2c:	e041      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8003a34:	2302      	movs	r3, #2
 8003a36:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003a38:	e03b      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8003a40:	2302      	movs	r3, #2
 8003a42:	75fb      	strb	r3, [r7, #23]
            break;
 8003a44:	e035      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	75fb      	strb	r3, [r7, #23]
            break;
 8003a4a:	e032      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8003a52:	2303      	movs	r3, #3
 8003a54:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003a56:	e02c      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	75fb      	strb	r3, [r7, #23]
            break;
 8003a62:	e026      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d102      	bne.n	8003a70 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	75fb      	strb	r3, [r7, #23]
            break;
 8003a6e:	e020      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	75fb      	strb	r3, [r7, #23]
            break;
 8003a74:	e01d      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003a80:	e017      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d102      	bne.n	8003a8e <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003a88:	2304      	movs	r3, #4
 8003a8a:	75fb      	strb	r3, [r7, #23]
            break;
 8003a8c:	e011      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d102      	bne.n	8003a9a <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003a94:	2304      	movs	r3, #4
 8003a96:	75fb      	strb	r3, [r7, #23]
            break;
 8003a98:	e00b      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d102      	bne.n	8003aa6 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	75fb      	strb	r3, [r7, #23]
            break;
 8003aa4:	e005      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	75fb      	strb	r3, [r7, #23]
            break;
 8003aaa:	e002      	b.n	8003ab2 <lsm6dso_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	75fb      	strb	r3, [r7, #23]
            break;
 8003ab0:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <lsm6dso_gy_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003ab8:	f107 0208 	add.w	r2, r7, #8
 8003abc:	2301      	movs	r3, #1
 8003abe:	2111      	movs	r1, #17
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fda8 	bl	8003616 <lsm6dso_read_reg>
 8003ac6:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <lsm6dso_gy_data_rate_set+0x1ea>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	7a3b      	ldrb	r3, [r7, #8]
 8003ad8:	f362 1307 	bfi	r3, r2, #4, #4
 8003adc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003ade:	f107 0208 	add.w	r2, r7, #8
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	2111      	movs	r1, #17
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fdad 	bl	8003646 <lsm6dso_write_reg>
 8003aec:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8003aee:	693b      	ldr	r3, [r7, #16]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003b04:	f107 0208 	add.w	r2, r7, #8
 8003b08:	2301      	movs	r3, #1
 8003b0a:	2112      	movs	r1, #18
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff fd82 	bl	8003616 <lsm6dso_read_reg>
 8003b12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	7a3b      	ldrb	r3, [r7, #8]
 8003b24:	f362 1386 	bfi	r3, r2, #6, #1
 8003b28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003b2a:	f107 0208 	add.w	r2, r7, #8
 8003b2e:	2301      	movs	r3, #1
 8003b30:	2112      	movs	r1, #18
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fd87 	bl	8003646 <lsm6dso_write_reg>
 8003b38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <lsm6dso_status_reg_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_status_reg_get(stmdev_ctx_t *ctx,
                               lsm6dso_status_reg_t *val)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) val, 1);
 8003b4e:	2301      	movs	r3, #1
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	211e      	movs	r1, #30
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fd5e 	bl	8003616 <lsm6dso_read_reg>
 8003b5a:	60f8      	str	r0, [r7, #12]

  return ret;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8003b70:	f107 020c 	add.w	r2, r7, #12
 8003b74:	2306      	movs	r3, #6
 8003b76:	2122      	movs	r1, #34	@ 0x22
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fd4c 	bl	8003616 <lsm6dso_read_reg>
 8003b7e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003b80:	7b7b      	ldrb	r3, [r7, #13]
 8003b82:	b21a      	sxth	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	7b3a      	ldrb	r2, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	b21a      	sxth	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	b212      	sxth	r2, r2
 8003ba8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	3302      	adds	r3, #2
 8003bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	7bba      	ldrb	r2, [r7, #14]
 8003bba:	4413      	add	r3, r2
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	b212      	sxth	r2, r2
 8003bc4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003bc6:	7c7a      	ldrb	r2, [r7, #17]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	b212      	sxth	r2, r2
 8003bce:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	7c3a      	ldrb	r2, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	3304      	adds	r3, #4
 8003be8:	b212      	sxth	r2, r2
 8003bea:	801a      	strh	r2, [r3, #0]

  return ret;
 8003bec:	697b      	ldr	r3, [r7, #20]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8003c00:	f107 020c 	add.w	r2, r7, #12
 8003c04:	2306      	movs	r3, #6
 8003c06:	2128      	movs	r1, #40	@ 0x28
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff fd04 	bl	8003616 <lsm6dso_read_reg>
 8003c0e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c10:	7b7b      	ldrb	r3, [r7, #13]
 8003c12:	b21a      	sxth	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	7b3a      	ldrb	r2, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b21a      	sxth	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	3302      	adds	r3, #2
 8003c36:	b212      	sxth	r2, r2
 8003c38:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	7bba      	ldrb	r2, [r7, #14]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	3302      	adds	r3, #2
 8003c52:	b212      	sxth	r2, r2
 8003c54:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c56:	7c7a      	ldrb	r2, [r7, #17]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	b212      	sxth	r2, r2
 8003c5e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	3304      	adds	r3, #4
 8003c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	7c3a      	ldrb	r2, [r7, #16]
 8003c70:	4413      	add	r3, r2
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	3304      	adds	r3, #4
 8003c78:	b212      	sxth	r2, r2
 8003c7a:	801a      	strh	r2, [r3, #0]

  return ret;
 8003c7c:	697b      	ldr	r3, [r7, #20]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8003c92:	f107 0208 	add.w	r2, r7, #8
 8003c96:	2301      	movs	r3, #1
 8003c98:	2101      	movs	r1, #1
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fcbb 	bl	8003616 <lsm6dso_read_reg>
 8003ca0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	7a3b      	ldrb	r3, [r7, #8]
 8003cb2:	f362 1387 	bfi	r3, r2, #6, #2
 8003cb6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8003cb8:	f107 0208 	add.w	r2, r7, #8
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fcc0 	bl	8003646 <lsm6dso_write_reg>
 8003cc6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8003cdc:	2301      	movs	r3, #1
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	210f      	movs	r1, #15
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fc97 	bl	8003616 <lsm6dso_read_reg>
 8003ce8:	60f8      	str	r0, [r7, #12]

  return ret;
 8003cea:	68fb      	ldr	r3, [r7, #12]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003d00:	f107 0208 	add.w	r2, r7, #8
 8003d04:	2301      	movs	r3, #1
 8003d06:	2112      	movs	r1, #18
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fc84 	bl	8003616 <lsm6dso_read_reg>
 8003d0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	7a3b      	ldrb	r3, [r7, #8]
 8003d20:	f362 0300 	bfi	r3, r2, #0, #1
 8003d24:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003d26:	f107 0208 	add.w	r2, r7, #8
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	2112      	movs	r1, #18
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fc89 	bl	8003646 <lsm6dso_write_reg>
 8003d34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003d4a:	f107 0208 	add.w	r2, r7, #8
 8003d4e:	2301      	movs	r3, #1
 8003d50:	2112      	movs	r1, #18
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fc5f 	bl	8003616 <lsm6dso_read_reg>
 8003d58:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8003d5a:	7a3b      	ldrb	r3, [r7, #8]
 8003d5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	701a      	strb	r2, [r3, #0]

  return ret;
 8003d68:	68fb      	ldr	r3, [r7, #12]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ff81 	bl	8003c86 <lsm6dso_mem_bank_set>
 8003d84:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	2146      	movs	r1, #70	@ 0x46
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff fc3f 	bl	8003616 <lsm6dso_read_reg>
 8003d98:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003da0:	2100      	movs	r1, #0
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff6f 	bl	8003c86 <lsm6dso_mem_bank_set>
 8003da8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003daa:	68fb      	ldr	r3, [r7, #12]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff60 	bl	8003c86 <lsm6dso_mem_bank_set>
 8003dc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8003dce:	f107 0208 	add.w	r2, r7, #8
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	215f      	movs	r1, #95	@ 0x5f
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fc1d 	bl	8003616 <lsm6dso_read_reg>
 8003ddc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d12a      	bne.n	8003e3a <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8003de4:	7a3b      	ldrb	r3, [r7, #8]
 8003de6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d81b      	bhi.n	8003e28 <lsm6dso_fsm_data_rate_get+0x74>
 8003df0:	a201      	add	r2, pc, #4	@ (adr r2, 8003df8 <lsm6dso_fsm_data_rate_get+0x44>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e11 	.word	0x08003e11
 8003e00:	08003e19 	.word	0x08003e19
 8003e04:	08003e21 	.word	0x08003e21
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
        break;
 8003e0e:	e00f      	b.n	8003e30 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
        break;
 8003e16:	e00b      	b.n	8003e30 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	701a      	strb	r2, [r3, #0]
        break;
 8003e1e:	e007      	b.n	8003e30 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	701a      	strb	r2, [r3, #0]
        break;
 8003e26:	e003      	b.n	8003e30 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
        break;
 8003e2e:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003e30:	2100      	movs	r1, #0
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ff27 	bl	8003c86 <lsm6dso_mem_bank_set>
 8003e38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <platform_write>:
// Kalman Filter instance
static KalmanFilter kf_altitude_velocity;

// LSM6DSO functions re-enabled and corrected
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af04      	add	r7, sp, #16
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	460b      	mov	r3, r1
 8003e52:	72fb      	strb	r3, [r7, #11]
 8003e54:	4613      	mov	r3, r2
 8003e56:	813b      	strh	r3, [r7, #8]
  // Note: LSM6DSO_I2C_ADD_L is the 7-bit address. HAL functions expect the 8-bit address (7-bit shifted left).
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef*)handle, (LSM6DSO_I2C_ADD_L << 1), reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000) == HAL_OK) {
 8003e58:	7afb      	ldrb	r3, [r7, #11]
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e60:	9302      	str	r3, [sp, #8]
 8003e62:	893b      	ldrh	r3, [r7, #8]
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	21d4      	movs	r1, #212	@ 0xd4
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f003 faaa 	bl	80073c8 <HAL_I2C_Mem_Write>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <platform_write+0x3a>
    return 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e001      	b.n	8003e82 <platform_write+0x3e>
  }
  return -1; // Return non-zero for error
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b088      	sub	sp, #32
 8003e8e:	af04      	add	r7, sp, #16
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	461a      	mov	r2, r3
 8003e96:	460b      	mov	r3, r1
 8003e98:	72fb      	strb	r3, [r7, #11]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	813b      	strh	r3, [r7, #8]
  // Note: LSM6DSO_I2C_ADD_L is the 7-bit address. HAL functions expect the 8-bit address (7-bit shifted left).
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef*)handle, (LSM6DSO_I2C_ADD_L << 1), reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000) == HAL_OK) {
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ea6:	9302      	str	r3, [sp, #8]
 8003ea8:	893b      	ldrh	r3, [r7, #8]
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	21d4      	movs	r1, #212	@ 0xd4
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f003 fb9b 	bl	80075f0 <HAL_I2C_Mem_Read>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <platform_read+0x3a>
    return 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e001      	b.n	8003ec8 <platform_read+0x3e>
  }
  return -1; // Return non-zero for error
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <bmp390_i2c_interface_init>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */

// Wrapper functions for BMP390 driver
uint8_t bmp390_i2c_interface_init(void) {
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  // MX_I2C1_Init() is called before this, so I2C hardware is already initialized.
  // This function can be a no-op or ensure I2C1 is ready.
  return 0; // Success
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <bmp390_i2c_interface_deinit>:

uint8_t bmp390_i2c_interface_deinit(void) {
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  // Optional: HAL_I2C_DeInit(&hi2c1); if necessary for power down
  return 0; // Success
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <bmp390_i2c_read>:

uint8_t bmp390_i2c_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af04      	add	r7, sp, #16
 8003ef6:	603a      	str	r2, [r7, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
 8003efe:	460b      	mov	r3, r1
 8003f00:	71bb      	strb	r3, [r7, #6]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_read calls this with addr = handle->iic_addr
    if (HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	b299      	uxth	r1, r3
 8003f0a:	79bb      	ldrb	r3, [r7, #6]
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	9302      	str	r3, [sp, #8]
 8003f14:	88bb      	ldrh	r3, [r7, #4]
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	4806      	ldr	r0, [pc, #24]	@ (8003f38 <bmp390_i2c_read+0x48>)
 8003f20:	f003 fb66 	bl	80075f0 <HAL_I2C_Mem_Read>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <bmp390_i2c_read+0x3e>
        return 0; // Success
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <bmp390_i2c_read+0x40>
    }
    return 1; // Failure
 8003f2e:	2301      	movs	r3, #1
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000438 	.word	0x20000438

08003f3c <bmp390_i2c_write>:

uint8_t bmp390_i2c_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af04      	add	r7, sp, #16
 8003f42:	603a      	str	r2, [r7, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	71bb      	strb	r3, [r7, #6]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_write calls this in a loop with len=1 for multi-byte writes.
    // So, this function will effectively be called to write one byte at a time.
    if (HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	b299      	uxth	r1, r3
 8003f56:	79bb      	ldrb	r3, [r7, #6]
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	9302      	str	r3, [sp, #8]
 8003f60:	88bb      	ldrh	r3, [r7, #4]
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	4806      	ldr	r0, [pc, #24]	@ (8003f84 <bmp390_i2c_write+0x48>)
 8003f6c:	f003 fa2c 	bl	80073c8 <HAL_I2C_Mem_Write>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <bmp390_i2c_write+0x3e>
        return 0; // Success
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <bmp390_i2c_write+0x40>
    }
    return 1; // Failure
 8003f7a:	2301      	movs	r3, #1
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000438 	.word	0x20000438

08003f88 <bmp390_delay_ms>:

void bmp390_delay_ms(uint32_t ms) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f002 fa15 	bl	80063c0 <HAL_Delay>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <bmp390_spi_interface_init>:

// Dummy SPI functions to satisfy driver checks when using I2C
uint8_t bmp390_spi_interface_init(void) {
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <bmp390_spi_interface_deinit>:

uint8_t bmp390_spi_interface_deinit(void) {
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <bmp390_spi_read>:

uint8_t bmp390_spi_read(uint8_t reg, uint8_t *buf, uint16_t len) {
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	6039      	str	r1, [r7, #0]
 8003fc8:	71fb      	strb	r3, [r7, #7]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8003fce:	2301      	movs	r3, #1
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <bmp390_spi_write>:

uint8_t bmp390_spi_write(uint8_t reg, uint8_t *buf, uint16_t len) {
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	6039      	str	r1, [r7, #0]
 8003fe6:	71fb      	strb	r3, [r7, #7]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <bmp390_debug_print>:

void bmp390_debug_print(const char *const fmt, ...) {
 8003ffa:	b40f      	push	{r0, r1, r2, r3}
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b0a2      	sub	sp, #136	@ 0x88
 8004000:	af00      	add	r7, sp, #0
    char dbg_buffer[128]; // Buffer for debug messages
    va_list args;
    va_start(args, fmt);
 8004002:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004006:	607b      	str	r3, [r7, #4]
    vsnprintf(dbg_buffer, sizeof(dbg_buffer), fmt, args);
 8004008:	f107 0008 	add.w	r0, r7, #8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004012:	2180      	movs	r1, #128	@ 0x80
 8004014:	f007 fa56 	bl	800b4c4 <vsniprintf>
    va_end(args);
    // Direct transmit is simpler if buffer is managed carefully
    // HAL_UART_Transmit(&huart3, (uint8_t*)"BMP390_DBG: ", 12, HAL_MAX_DELAY);
    // HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buffer, strlen(dbg_buffer), HAL_MAX_DELAY);
    (void)dbg_buffer; // Suppress unused variable warning if UART lines are commented
}
 8004018:	bf00      	nop
 800401a:	3788      	adds	r7, #136	@ 0x88
 800401c:	46bd      	mov	sp, r7
 800401e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004022:	b004      	add	sp, #16
 8004024:	4770      	bx	lr
	...

08004028 <calibrate_sea_level_pressure_hpa>:


// Altitude calculation functions
// pressure_hpa: current measured pressure in hPa
// known_altitude_meters: current known altitude in meters
void calibrate_sea_level_pressure_hpa(float current_pressure_hpa, float known_altitude_meters) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004032:	edc7 0a00 	vstr	s1, [r7]
  sea_level_pressure_hpa = current_pressure_hpa / powf((1.0f - (known_altitude_meters * 0.0000225577f)), 5.255877f);
 8004036:	edd7 7a00 	vldr	s15, [r7]
 800403a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004070 <calibrate_sea_level_pressure_hpa+0x48>
 800403e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800404a:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8004074 <calibrate_sea_level_pressure_hpa+0x4c>
 800404e:	eeb0 0a67 	vmov.f32	s0, s15
 8004052:	f00a fe1f 	bl	800ec94 <powf>
 8004056:	eef0 6a40 	vmov.f32	s13, s0
 800405a:	ed97 7a01 	vldr	s14, [r7, #4]
 800405e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004062:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <calibrate_sea_level_pressure_hpa+0x50>)
 8004064:	edc3 7a00 	vstr	s15, [r3]
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	37bd3a4b 	.word	0x37bd3a4b
 8004074:	40a83025 	.word	0x40a83025
 8004078:	20000d58 	.word	0x20000d58

0800407c <calculate_altitude_hpa>:

// pressure_hpa: current measured pressure in hPa
// returns altitude in meters
float calculate_altitude_hpa(float pressure_hpa) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	ed87 0a01 	vstr	s0, [r7, #4]
  if (sea_level_pressure_hpa <= 0) return 0.0f; // Avoid division by zero or log of non-positive
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <calculate_altitude_hpa+0x58>)
 8004088:	edd3 7a00 	vldr	s15, [r3]
 800408c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004094:	d802      	bhi.n	800409c <calculate_altitude_hpa+0x20>
 8004096:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80040d8 <calculate_altitude_hpa+0x5c>
 800409a:	e016      	b.n	80040ca <calculate_altitude_hpa+0x4e>
  return 44330.0f * (1.0f - powf(pressure_hpa / sea_level_pressure_hpa, 0.1903f));
 800409c:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <calculate_altitude_hpa+0x58>)
 800409e:	edd3 7a00 	vldr	s15, [r3]
 80040a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80040a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040aa:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80040dc <calculate_altitude_hpa+0x60>
 80040ae:	eeb0 0a66 	vmov.f32	s0, s13
 80040b2:	f00a fdef 	bl	800ec94 <powf>
 80040b6:	eef0 7a40 	vmov.f32	s15, s0
 80040ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80040e0 <calculate_altitude_hpa+0x64>
 80040c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80040ca:	eeb0 0a67 	vmov.f32	s0, s15
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000d58 	.word	0x20000d58
 80040d8:	00000000 	.word	0x00000000
 80040dc:	3e42de01 	.word	0x3e42de01
 80040e0:	472d2a00 	.word	0x472d2a00

080040e4 <lsm6dso_from_fs16g_to_mg>:
  * @brief  Converts raw accelerometer data from LSM6DSO to mg.
  * @param  lsb Raw data from the sensor.
  * @retval Acceleration in mg.
  */
static float lsm6dso_from_fs16g_to_mg(int16_t lsb)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	80fb      	strh	r3, [r7, #6]
  // Apply a 2x correction factor - the sensor is reporting ~half the expected values
  return (float)lsb * 0.488f * 2.0f; // Sensitivity for +/-16g full scale with 2x correction
 80040ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fa:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004114 <lsm6dso_from_fs16g_to_mg+0x30>
 80040fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004102:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 8004106:	eeb0 0a67 	vmov.f32	s0, s15
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	3ef9db23 	.word	0x3ef9db23

08004118 <lsm6dso_from_fs2000dps_to_mdps>:
  * @brief  Converts raw gyroscope data from LSM6DSO to mdps.
  * @param  lsb Raw data from the sensor.
  * @retval Angular rate in mdps.
  */
static float lsm6dso_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	80fb      	strh	r3, [r7, #6]
  return (float)lsb * 70.0f; // Sensitivity for +/-2000dps full scale (70 mdps/LSB)
 8004122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800412e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004144 <lsm6dso_from_fs2000dps_to_mdps+0x2c>
 8004132:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004136:	eeb0 0a67 	vmov.f32	s0, s15
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	428c0000 	.word	0x428c0000

08004148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414c:	b0d1      	sub	sp, #324	@ 0x144
 800414e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004150:	f002 f8d9 	bl	8006306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004154:	f001 fb7a 	bl	800584c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004158:	f001 fccc 	bl	8005af4 <MX_GPIO_Init>
  MX_ETH_Init();
 800415c:	f001 fbde 	bl	800591c <MX_ETH_Init>
  MX_I2C1_Init();
 8004160:	f001 fc2a 	bl	80059b8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8004164:	f001 fc68 	bl	8005a38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004168:	f001 fc96 	bl	8005a98 <MX_USB_OTG_FS_PCD_Init>
  // Initialize I2C (already called by HAL_Init system, but good to ensure)
  // MX_I2C1_Init(); // Called above in peripheral init sequence

  // char uart_buffer[100]; // Moved global and resized
  
  sprintf(uart_buffer, "System Initialized. UART OK.\r\n");
 800416c:	4997      	ldr	r1, [pc, #604]	@ (80043cc <main+0x284>)
 800416e:	4898      	ldr	r0, [pc, #608]	@ (80043d0 <main+0x288>)
 8004170:	f007 f914 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004174:	4896      	ldr	r0, [pc, #600]	@ (80043d0 <main+0x288>)
 8004176:	f7fc f89b 	bl	80002b0 <strlen>
 800417a:	4603      	mov	r3, r0
 800417c:	b29a      	uxth	r2, r3
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	4993      	ldr	r1, [pc, #588]	@ (80043d0 <main+0x288>)
 8004184:	4893      	ldr	r0, [pc, #588]	@ (80043d4 <main+0x28c>)
 8004186:	f005 f9ff 	bl	8009588 <HAL_UART_Transmit>
  
  // Scan the I2C bus first to see what devices are present
  sprintf(uart_buffer, "Scanning I2C bus for devices...\r\n");
 800418a:	4993      	ldr	r1, [pc, #588]	@ (80043d8 <main+0x290>)
 800418c:	4890      	ldr	r0, [pc, #576]	@ (80043d0 <main+0x288>)
 800418e:	f007 f905 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004192:	488f      	ldr	r0, [pc, #572]	@ (80043d0 <main+0x288>)
 8004194:	f7fc f88c 	bl	80002b0 <strlen>
 8004198:	4603      	mov	r3, r0
 800419a:	b29a      	uxth	r2, r3
 800419c:	f04f 33ff 	mov.w	r3, #4294967295
 80041a0:	498b      	ldr	r1, [pc, #556]	@ (80043d0 <main+0x288>)
 80041a2:	488c      	ldr	r0, [pc, #560]	@ (80043d4 <main+0x28c>)
 80041a4:	f005 f9f0 	bl	8009588 <HAL_UART_Transmit>
  
  uint8_t i2c_devices_found = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  for (uint8_t i = 1; i < 128; i++) {
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80041b4:	e04d      	b.n	8004252 <main+0x10a>
    if (i < 0x08 || i > 0x77) continue;
 80041b6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80041ba:	2b07      	cmp	r3, #7
 80041bc:	d943      	bls.n	8004246 <main+0xfe>
 80041be:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80041c2:	2b77      	cmp	r3, #119	@ 0x77
 80041c4:	d83f      	bhi.n	8004246 <main+0xfe>

    HAL_StatusTypeDef i2c_result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 2, 10); // Use 2 trials, 10ms timeout
 80041c6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	b299      	uxth	r1, r3
 80041d0:	230a      	movs	r3, #10
 80041d2:	2202      	movs	r2, #2
 80041d4:	4881      	ldr	r0, [pc, #516]	@ (80043dc <main+0x294>)
 80041d6:	f003 fb25 	bl	8007824 <HAL_I2C_IsDeviceReady>
 80041da:	4603      	mov	r3, r0
 80041dc:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    
    if (i2c_result == HAL_OK) {
 80041e0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d12f      	bne.n	8004248 <main+0x100>
      i2c_devices_found++;
 80041e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041ec:	3301      	adds	r3, #1
 80041ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
      sprintf(uart_buffer, "Found I2C device at address: 0x%02X\r\n", i);
 80041f2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80041f6:	461a      	mov	r2, r3
 80041f8:	4979      	ldr	r1, [pc, #484]	@ (80043e0 <main+0x298>)
 80041fa:	4875      	ldr	r0, [pc, #468]	@ (80043d0 <main+0x288>)
 80041fc:	f007 f8ce 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004200:	4873      	ldr	r0, [pc, #460]	@ (80043d0 <main+0x288>)
 8004202:	f7fc f855 	bl	80002b0 <strlen>
 8004206:	4603      	mov	r3, r0
 8004208:	b29a      	uxth	r2, r3
 800420a:	f04f 33ff 	mov.w	r3, #4294967295
 800420e:	4970      	ldr	r1, [pc, #448]	@ (80043d0 <main+0x288>)
 8004210:	4870      	ldr	r0, [pc, #448]	@ (80043d4 <main+0x28c>)
 8004212:	f005 f9b9 	bl	8009588 <HAL_UART_Transmit>
      
      if (i == (BMP390_I2C_ADDRESS_LOW >> 1) || i == (BMP390_I2C_ADDRESS_HIGH >> 1)) {
 8004216:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800421a:	2b76      	cmp	r3, #118	@ 0x76
 800421c:	d003      	beq.n	8004226 <main+0xde>
 800421e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004222:	2b77      	cmp	r3, #119	@ 0x77
 8004224:	d110      	bne.n	8004248 <main+0x100>
        sprintf(uart_buffer, "  --> This could be a BMP390 sensor!\r\n");
 8004226:	496f      	ldr	r1, [pc, #444]	@ (80043e4 <main+0x29c>)
 8004228:	4869      	ldr	r0, [pc, #420]	@ (80043d0 <main+0x288>)
 800422a:	f007 f8b7 	bl	800b39c <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800422e:	4868      	ldr	r0, [pc, #416]	@ (80043d0 <main+0x288>)
 8004230:	f7fc f83e 	bl	80002b0 <strlen>
 8004234:	4603      	mov	r3, r0
 8004236:	b29a      	uxth	r2, r3
 8004238:	f04f 33ff 	mov.w	r3, #4294967295
 800423c:	4964      	ldr	r1, [pc, #400]	@ (80043d0 <main+0x288>)
 800423e:	4865      	ldr	r0, [pc, #404]	@ (80043d4 <main+0x28c>)
 8004240:	f005 f9a2 	bl	8009588 <HAL_UART_Transmit>
 8004244:	e000      	b.n	8004248 <main+0x100>
    if (i < 0x08 || i > 0x77) continue;
 8004246:	bf00      	nop
  for (uint8_t i = 1; i < 128; i++) {
 8004248:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800424c:	3301      	adds	r3, #1
 800424e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004252:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8004256:	2b00      	cmp	r3, #0
 8004258:	daad      	bge.n	80041b6 <main+0x6e>
      }
    }
  }
  
  if (i2c_devices_found == 0) {
 800425a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <main+0x13a>
    sprintf(uart_buffer, "No I2C devices found! Check wiring/pull-ups.\r\n");
 8004262:	4961      	ldr	r1, [pc, #388]	@ (80043e8 <main+0x2a0>)
 8004264:	485a      	ldr	r0, [pc, #360]	@ (80043d0 <main+0x288>)
 8004266:	f007 f899 	bl	800b39c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800426a:	4859      	ldr	r0, [pc, #356]	@ (80043d0 <main+0x288>)
 800426c:	f7fc f820 	bl	80002b0 <strlen>
 8004270:	4603      	mov	r3, r0
 8004272:	b29a      	uxth	r2, r3
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
 8004278:	4955      	ldr	r1, [pc, #340]	@ (80043d0 <main+0x288>)
 800427a:	4856      	ldr	r0, [pc, #344]	@ (80043d4 <main+0x28c>)
 800427c:	f005 f984 	bl	8009588 <HAL_UART_Transmit>
 8004280:	e011      	b.n	80042a6 <main+0x15e>
  } else {
    sprintf(uart_buffer, "Found %d I2C devices in total.\r\n", i2c_devices_found);
 8004282:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004286:	461a      	mov	r2, r3
 8004288:	4958      	ldr	r1, [pc, #352]	@ (80043ec <main+0x2a4>)
 800428a:	4851      	ldr	r0, [pc, #324]	@ (80043d0 <main+0x288>)
 800428c:	f007 f886 	bl	800b39c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004290:	484f      	ldr	r0, [pc, #316]	@ (80043d0 <main+0x288>)
 8004292:	f7fc f80d 	bl	80002b0 <strlen>
 8004296:	4603      	mov	r3, r0
 8004298:	b29a      	uxth	r2, r3
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	494c      	ldr	r1, [pc, #304]	@ (80043d0 <main+0x288>)
 80042a0:	484c      	ldr	r0, [pc, #304]	@ (80043d4 <main+0x28c>)
 80042a2:	f005 f971 	bl	8009588 <HAL_UART_Transmit>
  }

  // Initialize LSM6DSO
  sprintf(uart_buffer, "Initializing LSM6DSO...\r\n");
 80042a6:	4952      	ldr	r1, [pc, #328]	@ (80043f0 <main+0x2a8>)
 80042a8:	4849      	ldr	r0, [pc, #292]	@ (80043d0 <main+0x288>)
 80042aa:	f007 f877 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80042ae:	4848      	ldr	r0, [pc, #288]	@ (80043d0 <main+0x288>)
 80042b0:	f7fb fffe 	bl	80002b0 <strlen>
 80042b4:	4603      	mov	r3, r0
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
 80042bc:	4944      	ldr	r1, [pc, #272]	@ (80043d0 <main+0x288>)
 80042be:	4845      	ldr	r0, [pc, #276]	@ (80043d4 <main+0x28c>)
 80042c0:	f005 f962 	bl	8009588 <HAL_UART_Transmit>

  dev_ctx.write_reg = platform_write;
 80042c4:	4b4b      	ldr	r3, [pc, #300]	@ (80043f4 <main+0x2ac>)
 80042c6:	4a4c      	ldr	r2, [pc, #304]	@ (80043f8 <main+0x2b0>)
 80042c8:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 80042ca:	4b4a      	ldr	r3, [pc, #296]	@ (80043f4 <main+0x2ac>)
 80042cc:	4a4b      	ldr	r2, [pc, #300]	@ (80043fc <main+0x2b4>)
 80042ce:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 80042d0:	4b48      	ldr	r3, [pc, #288]	@ (80043f4 <main+0x2ac>)
 80042d2:	4a42      	ldr	r2, [pc, #264]	@ (80043dc <main+0x294>)
 80042d4:	60da      	str	r2, [r3, #12]

  // Check device ID
  lsm6dso_device_id_get(&dev_ctx, &whoamI_lsm);
 80042d6:	494a      	ldr	r1, [pc, #296]	@ (8004400 <main+0x2b8>)
 80042d8:	4846      	ldr	r0, [pc, #280]	@ (80043f4 <main+0x2ac>)
 80042da:	f7ff fcfa 	bl	8003cd2 <lsm6dso_device_id_get>
  if (whoamI_lsm == LSM6DSO_WHO_AM_I) {
 80042de:	4b48      	ldr	r3, [pc, #288]	@ (8004400 <main+0x2b8>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	d112      	bne.n	800430c <main+0x1c4>
    sprintf(uart_buffer, "LSM6DSO WHO_AM_I is OK: 0x%02X\r\n", whoamI_lsm);
 80042e6:	4b46      	ldr	r3, [pc, #280]	@ (8004400 <main+0x2b8>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	4945      	ldr	r1, [pc, #276]	@ (8004404 <main+0x2bc>)
 80042ee:	4838      	ldr	r0, [pc, #224]	@ (80043d0 <main+0x288>)
 80042f0:	f007 f854 	bl	800b39c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80042f4:	4836      	ldr	r0, [pc, #216]	@ (80043d0 <main+0x288>)
 80042f6:	f7fb ffdb 	bl	80002b0 <strlen>
 80042fa:	4603      	mov	r3, r0
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	4933      	ldr	r1, [pc, #204]	@ (80043d0 <main+0x288>)
 8004304:	4833      	ldr	r0, [pc, #204]	@ (80043d4 <main+0x28c>)
 8004306:	f005 f93f 	bl	8009588 <HAL_UART_Transmit>
 800430a:	e011      	b.n	8004330 <main+0x1e8>
  } else {
    sprintf(uart_buffer, "LSM6DSO WHO_AM_I FAILED! Expected 0x%02X, got 0x%02X\r\n", LSM6DSO_WHO_AM_I, whoamI_lsm);
 800430c:	4b3c      	ldr	r3, [pc, #240]	@ (8004400 <main+0x2b8>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	220f      	movs	r2, #15
 8004312:	493d      	ldr	r1, [pc, #244]	@ (8004408 <main+0x2c0>)
 8004314:	482e      	ldr	r0, [pc, #184]	@ (80043d0 <main+0x288>)
 8004316:	f007 f841 	bl	800b39c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800431a:	482d      	ldr	r0, [pc, #180]	@ (80043d0 <main+0x288>)
 800431c:	f7fb ffc8 	bl	80002b0 <strlen>
 8004320:	4603      	mov	r3, r0
 8004322:	b29a      	uxth	r2, r3
 8004324:	f04f 33ff 	mov.w	r3, #4294967295
 8004328:	4929      	ldr	r1, [pc, #164]	@ (80043d0 <main+0x288>)
 800432a:	482a      	ldr	r0, [pc, #168]	@ (80043d4 <main+0x28c>)
 800432c:	f005 f92c 	bl	8009588 <HAL_UART_Transmit>
    // Error_Handler(); // Decide if this is fatal
  }

  // Restore default configuration
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8004330:	2101      	movs	r1, #1
 8004332:	4830      	ldr	r0, [pc, #192]	@ (80043f4 <main+0x2ac>)
 8004334:	f7ff fcde 	bl	8003cf4 <lsm6dso_reset_set>
  do {
    lsm6dso_reset_get(&dev_ctx, &rst_lsm);
 8004338:	4934      	ldr	r1, [pc, #208]	@ (800440c <main+0x2c4>)
 800433a:	482e      	ldr	r0, [pc, #184]	@ (80043f4 <main+0x2ac>)
 800433c:	f7ff fd00 	bl	8003d40 <lsm6dso_reset_get>
  } while (rst_lsm);
 8004340:	4b32      	ldr	r3, [pc, #200]	@ (800440c <main+0x2c4>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f7      	bne.n	8004338 <main+0x1f0>

  // Enable Block Data Update
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8004348:	2101      	movs	r1, #1
 800434a:	482a      	ldr	r0, [pc, #168]	@ (80043f4 <main+0x2ac>)
 800434c:	f7ff fbd4 	bl	8003af8 <lsm6dso_block_data_update_set>

  // Set Output Data Rate for Accelerometer and Gyroscope
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_104Hz); // 104 Hz ODR for Accelerometer
 8004350:	2104      	movs	r1, #4
 8004352:	4828      	ldr	r0, [pc, #160]	@ (80043f4 <main+0x2ac>)
 8004354:	f7ff f9b6 	bl	80036c4 <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_104Hz); // 104 Hz ODR for Gyroscope
 8004358:	2104      	movs	r1, #4
 800435a:	4826      	ldr	r0, [pc, #152]	@ (80043f4 <main+0x2ac>)
 800435c:	f7ff fad2 	bl	8003904 <lsm6dso_gy_data_rate_set>

  // Set Full Scale for Accelerometer and Gyroscope
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_16g);    // +/- 16g Full Scale for Accelerometer
 8004360:	2101      	movs	r1, #1
 8004362:	4824      	ldr	r0, [pc, #144]	@ (80043f4 <main+0x2ac>)
 8004364:	f7ff f987 	bl	8003676 <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps); // +/- 2000 dps Full Scale for Gyroscope
 8004368:	2106      	movs	r1, #6
 800436a:	4822      	ldr	r0, [pc, #136]	@ (80043f4 <main+0x2ac>)
 800436c:	f7ff faa4 	bl	80038b8 <lsm6dso_gy_full_scale_set>

  // Make sure xl_fs_mode is set to 0 to ensure 16g works correctly
  uint8_t ctrl8_xl_val = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
  lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 8004376:	f107 0272 	add.w	r2, r7, #114	@ 0x72
 800437a:	2301      	movs	r3, #1
 800437c:	2117      	movs	r1, #23
 800437e:	481d      	ldr	r0, [pc, #116]	@ (80043f4 <main+0x2ac>)
 8004380:	f7ff f949 	bl	8003616 <lsm6dso_read_reg>
  // Clear the xl_fs_mode bit (bit 1) to ensure proper 16g operation
  ctrl8_xl_val &= ~(1 << 1);
 8004384:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8004388:	f023 0302 	bic.w	r3, r3, #2
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
  lsm6dso_write_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 8004392:	f107 0272 	add.w	r2, r7, #114	@ 0x72
 8004396:	2301      	movs	r3, #1
 8004398:	2117      	movs	r1, #23
 800439a:	4816      	ldr	r0, [pc, #88]	@ (80043f4 <main+0x2ac>)
 800439c:	f7ff f953 	bl	8003646 <lsm6dso_write_reg>
  
  // ---- START DEBUG: Read back CTRL1_XL and CTRL8_XL ----
  uint8_t ctrl1_xl_val = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  if (lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL1_XL, &ctrl1_xl_val, 1) == 0) {
 80043a6:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 80043aa:	2301      	movs	r3, #1
 80043ac:	2110      	movs	r1, #16
 80043ae:	4811      	ldr	r0, [pc, #68]	@ (80043f4 <main+0x2ac>)
 80043b0:	f7ff f931 	bl	8003616 <lsm6dso_read_reg>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d12c      	bne.n	8004414 <main+0x2cc>
    sprintf(uart_buffer, "LSM6DSO CTRL1_XL after set: 0x%02X\r\n", ctrl1_xl_val);
 80043ba:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80043be:	461a      	mov	r2, r3
 80043c0:	4913      	ldr	r1, [pc, #76]	@ (8004410 <main+0x2c8>)
 80043c2:	4803      	ldr	r0, [pc, #12]	@ (80043d0 <main+0x288>)
 80043c4:	f006 ffea 	bl	800b39c <siprintf>
 80043c8:	e028      	b.n	800441c <main+0x2d4>
 80043ca:	bf00      	nop
 80043cc:	0800fcbc 	.word	0x0800fcbc
 80043d0:	20000c58 	.word	0x20000c58
 80043d4:	2000048c 	.word	0x2000048c
 80043d8:	0800fcdc 	.word	0x0800fcdc
 80043dc:	20000438 	.word	0x20000438
 80043e0:	0800fd00 	.word	0x0800fd00
 80043e4:	0800fd28 	.word	0x0800fd28
 80043e8:	0800fd50 	.word	0x0800fd50
 80043ec:	0800fd80 	.word	0x0800fd80
 80043f0:	0800fda4 	.word	0x0800fda4
 80043f4:	200009f4 	.word	0x200009f4
 80043f8:	08003e45 	.word	0x08003e45
 80043fc:	08003e8b 	.word	0x08003e8b
 8004400:	20000d6a 	.word	0x20000d6a
 8004404:	0800fdc0 	.word	0x0800fdc0
 8004408:	0800fde4 	.word	0x0800fde4
 800440c:	20000d6b 	.word	0x20000d6b
 8004410:	0800fe1c 	.word	0x0800fe1c
  } else {
    sprintf(uart_buffer, "LSM6DSO Failed to read CTRL1_XL\r\n");
 8004414:	49a1      	ldr	r1, [pc, #644]	@ (800469c <main+0x554>)
 8004416:	48a2      	ldr	r0, [pc, #648]	@ (80046a0 <main+0x558>)
 8004418:	f006 ffc0 	bl	800b39c <siprintf>
  }
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800441c:	48a0      	ldr	r0, [pc, #640]	@ (80046a0 <main+0x558>)
 800441e:	f7fb ff47 	bl	80002b0 <strlen>
 8004422:	4603      	mov	r3, r0
 8004424:	b29a      	uxth	r2, r3
 8004426:	f04f 33ff 	mov.w	r3, #4294967295
 800442a:	499d      	ldr	r1, [pc, #628]	@ (80046a0 <main+0x558>)
 800442c:	489d      	ldr	r0, [pc, #628]	@ (80046a4 <main+0x55c>)
 800442e:	f005 f8ab 	bl	8009588 <HAL_UART_Transmit>
  
  lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 8004432:	f107 0272 	add.w	r2, r7, #114	@ 0x72
 8004436:	2301      	movs	r3, #1
 8004438:	2117      	movs	r1, #23
 800443a:	489b      	ldr	r0, [pc, #620]	@ (80046a8 <main+0x560>)
 800443c:	f7ff f8eb 	bl	8003616 <lsm6dso_read_reg>
  sprintf(uart_buffer, "LSM6DSO CTRL8_XL after set: 0x%02X\r\n", ctrl8_xl_val);
 8004440:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8004444:	461a      	mov	r2, r3
 8004446:	4999      	ldr	r1, [pc, #612]	@ (80046ac <main+0x564>)
 8004448:	4895      	ldr	r0, [pc, #596]	@ (80046a0 <main+0x558>)
 800444a:	f006 ffa7 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800444e:	4894      	ldr	r0, [pc, #592]	@ (80046a0 <main+0x558>)
 8004450:	f7fb ff2e 	bl	80002b0 <strlen>
 8004454:	4603      	mov	r3, r0
 8004456:	b29a      	uxth	r2, r3
 8004458:	f04f 33ff 	mov.w	r3, #4294967295
 800445c:	4990      	ldr	r1, [pc, #576]	@ (80046a0 <main+0x558>)
 800445e:	4891      	ldr	r0, [pc, #580]	@ (80046a4 <main+0x55c>)
 8004460:	f005 f892 	bl	8009588 <HAL_UART_Transmit>
  // ---- END DEBUG ----

  sprintf(uart_buffer, "LSM6DSO Initialized and Configured (XL:104Hz/16g, GY:104Hz/2000dps).\r\n");
 8004464:	4992      	ldr	r1, [pc, #584]	@ (80046b0 <main+0x568>)
 8004466:	488e      	ldr	r0, [pc, #568]	@ (80046a0 <main+0x558>)
 8004468:	f006 ff98 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800446c:	488c      	ldr	r0, [pc, #560]	@ (80046a0 <main+0x558>)
 800446e:	f7fb ff1f 	bl	80002b0 <strlen>
 8004472:	4603      	mov	r3, r0
 8004474:	b29a      	uxth	r2, r3
 8004476:	f04f 33ff 	mov.w	r3, #4294967295
 800447a:	4989      	ldr	r1, [pc, #548]	@ (80046a0 <main+0x558>)
 800447c:	4889      	ldr	r0, [pc, #548]	@ (80046a4 <main+0x55c>)
 800447e:	f005 f883 	bl	8009588 <HAL_UART_Transmit>


  // Initialize BMP390 using the new driver
  DRIVER_BMP390_LINK_INIT(&bmp390_handle, bmp390_handle_t);
 8004482:	f44f 7214 	mov.w	r2, #592	@ 0x250
 8004486:	2100      	movs	r1, #0
 8004488:	488a      	ldr	r0, [pc, #552]	@ (80046b4 <main+0x56c>)
 800448a:	f007 f829 	bl	800b4e0 <memset>
  DRIVER_BMP390_LINK_IIC_INIT(&bmp390_handle, bmp390_i2c_interface_init);
 800448e:	4b89      	ldr	r3, [pc, #548]	@ (80046b4 <main+0x56c>)
 8004490:	4a89      	ldr	r2, [pc, #548]	@ (80046b8 <main+0x570>)
 8004492:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  DRIVER_BMP390_LINK_IIC_DEINIT(&bmp390_handle, bmp390_i2c_interface_deinit);
 8004496:	4b87      	ldr	r3, [pc, #540]	@ (80046b4 <main+0x56c>)
 8004498:	4a88      	ldr	r2, [pc, #544]	@ (80046bc <main+0x574>)
 800449a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  DRIVER_BMP390_LINK_IIC_READ(&bmp390_handle, bmp390_i2c_read);
 800449e:	4b85      	ldr	r3, [pc, #532]	@ (80046b4 <main+0x56c>)
 80044a0:	4a87      	ldr	r2, [pc, #540]	@ (80046c0 <main+0x578>)
 80044a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  DRIVER_BMP390_LINK_IIC_WRITE(&bmp390_handle, bmp390_i2c_write);
 80044a6:	4b83      	ldr	r3, [pc, #524]	@ (80046b4 <main+0x56c>)
 80044a8:	4a86      	ldr	r2, [pc, #536]	@ (80046c4 <main+0x57c>)
 80044aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  DRIVER_BMP390_LINK_DELAY_MS(&bmp390_handle, bmp390_delay_ms);
 80044ae:	4b81      	ldr	r3, [pc, #516]	@ (80046b4 <main+0x56c>)
 80044b0:	4a85      	ldr	r2, [pc, #532]	@ (80046c8 <main+0x580>)
 80044b2:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
  DRIVER_BMP390_LINK_DEBUG_PRINT(&bmp390_handle, bmp390_debug_print);
 80044b6:	4b7f      	ldr	r3, [pc, #508]	@ (80046b4 <main+0x56c>)
 80044b8:	4a84      	ldr	r2, [pc, #528]	@ (80046cc <main+0x584>)
 80044ba:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c

  // Link dummy SPI functions as well, even if not used, to satisfy driver checks
  DRIVER_BMP390_LINK_SPI_INIT(&bmp390_handle, bmp390_spi_interface_init);
 80044be:	4b7d      	ldr	r3, [pc, #500]	@ (80046b4 <main+0x56c>)
 80044c0:	4a83      	ldr	r2, [pc, #524]	@ (80046d0 <main+0x588>)
 80044c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  DRIVER_BMP390_LINK_SPI_DEINIT(&bmp390_handle, bmp390_spi_interface_deinit);
 80044c6:	4b7b      	ldr	r3, [pc, #492]	@ (80046b4 <main+0x56c>)
 80044c8:	4a82      	ldr	r2, [pc, #520]	@ (80046d4 <main+0x58c>)
 80044ca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  DRIVER_BMP390_LINK_SPI_READ(&bmp390_handle, bmp390_spi_read);
 80044ce:	4b79      	ldr	r3, [pc, #484]	@ (80046b4 <main+0x56c>)
 80044d0:	4a81      	ldr	r2, [pc, #516]	@ (80046d8 <main+0x590>)
 80044d2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
  DRIVER_BMP390_LINK_SPI_WRITE(&bmp390_handle, bmp390_spi_write);
 80044d6:	4b77      	ldr	r3, [pc, #476]	@ (80046b4 <main+0x56c>)
 80044d8:	4a80      	ldr	r2, [pc, #512]	@ (80046dc <main+0x594>)
 80044da:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

  bmp390_set_interface(&bmp390_handle, BMP390_INTERFACE_IIC);
 80044de:	2100      	movs	r1, #0
 80044e0:	4874      	ldr	r0, [pc, #464]	@ (80046b4 <main+0x56c>)
 80044e2:	f7fe fec6 	bl	8003272 <bmp390_set_interface>
  // IMPORTANT: Set the correct I2C address based on your SDO/AD0 pin connection
  bmp390_set_addr_pin(&bmp390_handle, BMP390_ADDRESS_ADO_HIGH); // Corrected: Use 0x77 as detected by scan
 80044e6:	21ee      	movs	r1, #238	@ 0xee
 80044e8:	4872      	ldr	r0, [pc, #456]	@ (80046b4 <main+0x56c>)
 80044ea:	f7fe fead 	bl	8003248 <bmp390_set_addr_pin>

  sprintf(uart_buffer, "Initializing BMP390 (new driver)...\r\n");
 80044ee:	497c      	ldr	r1, [pc, #496]	@ (80046e0 <main+0x598>)
 80044f0:	486b      	ldr	r0, [pc, #428]	@ (80046a0 <main+0x558>)
 80044f2:	f006 ff53 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80044f6:	486a      	ldr	r0, [pc, #424]	@ (80046a0 <main+0x558>)
 80044f8:	f7fb feda 	bl	80002b0 <strlen>
 80044fc:	4603      	mov	r3, r0
 80044fe:	b29a      	uxth	r2, r3
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
 8004504:	4966      	ldr	r1, [pc, #408]	@ (80046a0 <main+0x558>)
 8004506:	4867      	ldr	r0, [pc, #412]	@ (80046a4 <main+0x55c>)
 8004508:	f005 f83e 	bl	8009588 <HAL_UART_Transmit>

  if (bmp390_init(&bmp390_handle) != 0) {
 800450c:	4869      	ldr	r0, [pc, #420]	@ (80046b4 <main+0x56c>)
 800450e:	f7fe fb4f 	bl	8002bb0 <bmp390_init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d011      	beq.n	800453c <main+0x3f4>
      sprintf(uart_buffer, "BMP390 new driver initialization FAILED!\r\n");
 8004518:	4972      	ldr	r1, [pc, #456]	@ (80046e4 <main+0x59c>)
 800451a:	4861      	ldr	r0, [pc, #388]	@ (80046a0 <main+0x558>)
 800451c:	f006 ff3e 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004520:	485f      	ldr	r0, [pc, #380]	@ (80046a0 <main+0x558>)
 8004522:	f7fb fec5 	bl	80002b0 <strlen>
 8004526:	4603      	mov	r3, r0
 8004528:	b29a      	uxth	r2, r3
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	495c      	ldr	r1, [pc, #368]	@ (80046a0 <main+0x558>)
 8004530:	485c      	ldr	r0, [pc, #368]	@ (80046a4 <main+0x55c>)
 8004532:	f005 f829 	bl	8009588 <HAL_UART_Transmit>
      Error_Handler();
 8004536:	f001 fb99 	bl	8005c6c <Error_Handler>
 800453a:	e0f4      	b.n	8004726 <main+0x5de>
  } else {
      sprintf(uart_buffer, "BMP390 new driver initialized successfully!\r\n");
 800453c:	496a      	ldr	r1, [pc, #424]	@ (80046e8 <main+0x5a0>)
 800453e:	4858      	ldr	r0, [pc, #352]	@ (80046a0 <main+0x558>)
 8004540:	f006 ff2c 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004544:	4856      	ldr	r0, [pc, #344]	@ (80046a0 <main+0x558>)
 8004546:	f7fb feb3 	bl	80002b0 <strlen>
 800454a:	4603      	mov	r3, r0
 800454c:	b29a      	uxth	r2, r3
 800454e:	f04f 33ff 	mov.w	r3, #4294967295
 8004552:	4953      	ldr	r1, [pc, #332]	@ (80046a0 <main+0x558>)
 8004554:	4853      	ldr	r0, [pc, #332]	@ (80046a4 <main+0x55c>)
 8004556:	f005 f817 	bl	8009588 <HAL_UART_Transmit>

      // Configure sensor settings
      sprintf(uart_buffer, "Configuring BMP390...\r\n");
 800455a:	4964      	ldr	r1, [pc, #400]	@ (80046ec <main+0x5a4>)
 800455c:	4850      	ldr	r0, [pc, #320]	@ (80046a0 <main+0x558>)
 800455e:	f006 ff1d 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004562:	484f      	ldr	r0, [pc, #316]	@ (80046a0 <main+0x558>)
 8004564:	f7fb fea4 	bl	80002b0 <strlen>
 8004568:	4603      	mov	r3, r0
 800456a:	b29a      	uxth	r2, r3
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	494b      	ldr	r1, [pc, #300]	@ (80046a0 <main+0x558>)
 8004572:	484c      	ldr	r0, [pc, #304]	@ (80046a4 <main+0x55c>)
 8004574:	f005 f808 	bl	8009588 <HAL_UART_Transmit>

      if (bmp390_set_pressure_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x8) != 0) {
 8004578:	2103      	movs	r1, #3
 800457a:	484e      	ldr	r0, [pc, #312]	@ (80046b4 <main+0x56c>)
 800457c:	f7fe fa00 	bl	8002980 <bmp390_set_pressure_oversampling>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <main+0x460>
          sprintf(uart_buffer, "BMP390: Failed to set pressure oversampling\r\n");
 8004586:	495a      	ldr	r1, [pc, #360]	@ (80046f0 <main+0x5a8>)
 8004588:	4845      	ldr	r0, [pc, #276]	@ (80046a0 <main+0x558>)
 800458a:	f006 ff07 	bl	800b39c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 800458e:	4844      	ldr	r0, [pc, #272]	@ (80046a0 <main+0x558>)
 8004590:	f7fb fe8e 	bl	80002b0 <strlen>
 8004594:	4603      	mov	r3, r0
 8004596:	b29a      	uxth	r2, r3
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
 800459c:	4940      	ldr	r1, [pc, #256]	@ (80046a0 <main+0x558>)
 800459e:	4841      	ldr	r0, [pc, #260]	@ (80046a4 <main+0x55c>)
 80045a0:	f004 fff2 	bl	8009588 <HAL_UART_Transmit>
 80045a4:	f001 fb62 	bl	8005c6c <Error_Handler>
      }
      if (bmp390_set_temperature_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x1) != 0) {
 80045a8:	2100      	movs	r1, #0
 80045aa:	4842      	ldr	r0, [pc, #264]	@ (80046b4 <main+0x56c>)
 80045ac:	f7fe fa34 	bl	8002a18 <bmp390_set_temperature_oversampling>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d010      	beq.n	80045d8 <main+0x490>
          sprintf(uart_buffer, "BMP390: Failed to set temperature oversampling\r\n");
 80045b6:	494f      	ldr	r1, [pc, #316]	@ (80046f4 <main+0x5ac>)
 80045b8:	4839      	ldr	r0, [pc, #228]	@ (80046a0 <main+0x558>)
 80045ba:	f006 feef 	bl	800b39c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 80045be:	4838      	ldr	r0, [pc, #224]	@ (80046a0 <main+0x558>)
 80045c0:	f7fb fe76 	bl	80002b0 <strlen>
 80045c4:	4603      	mov	r3, r0
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295
 80045cc:	4934      	ldr	r1, [pc, #208]	@ (80046a0 <main+0x558>)
 80045ce:	4835      	ldr	r0, [pc, #212]	@ (80046a4 <main+0x55c>)
 80045d0:	f004 ffda 	bl	8009588 <HAL_UART_Transmit>
 80045d4:	f001 fb4a 	bl	8005c6c <Error_Handler>
      }
      if (bmp390_set_odr(&bmp390_handle, BMP390_ODR_25_HZ) != 0) { // Revert to 25 Hz ODR
 80045d8:	2103      	movs	r1, #3
 80045da:	4836      	ldr	r0, [pc, #216]	@ (80046b4 <main+0x56c>)
 80045dc:	f7fe fa6c 	bl	8002ab8 <bmp390_set_odr>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <main+0x4c0>
          sprintf(uart_buffer, "BMP390: Failed to set ODR to 25Hz\r\n");
 80045e6:	4944      	ldr	r1, [pc, #272]	@ (80046f8 <main+0x5b0>)
 80045e8:	482d      	ldr	r0, [pc, #180]	@ (80046a0 <main+0x558>)
 80045ea:	f006 fed7 	bl	800b39c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 80045ee:	482c      	ldr	r0, [pc, #176]	@ (80046a0 <main+0x558>)
 80045f0:	f7fb fe5e 	bl	80002b0 <strlen>
 80045f4:	4603      	mov	r3, r0
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	4928      	ldr	r1, [pc, #160]	@ (80046a0 <main+0x558>)
 80045fe:	4829      	ldr	r0, [pc, #164]	@ (80046a4 <main+0x55c>)
 8004600:	f004 ffc2 	bl	8009588 <HAL_UART_Transmit>
 8004604:	f001 fb32 	bl	8005c6c <Error_Handler>
      }
      if (bmp390_set_pressure(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable pressure
 8004608:	2101      	movs	r1, #1
 800460a:	482a      	ldr	r0, [pc, #168]	@ (80046b4 <main+0x56c>)
 800460c:	f7fe f8cc 	bl	80027a8 <bmp390_set_pressure>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d010      	beq.n	8004638 <main+0x4f0>
          sprintf(uart_buffer, "BMP390: Failed to enable pressure measurement\r\n");
 8004616:	4939      	ldr	r1, [pc, #228]	@ (80046fc <main+0x5b4>)
 8004618:	4821      	ldr	r0, [pc, #132]	@ (80046a0 <main+0x558>)
 800461a:	f006 febf 	bl	800b39c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 800461e:	4820      	ldr	r0, [pc, #128]	@ (80046a0 <main+0x558>)
 8004620:	f7fb fe46 	bl	80002b0 <strlen>
 8004624:	4603      	mov	r3, r0
 8004626:	b29a      	uxth	r2, r3
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
 800462c:	491c      	ldr	r1, [pc, #112]	@ (80046a0 <main+0x558>)
 800462e:	481d      	ldr	r0, [pc, #116]	@ (80046a4 <main+0x55c>)
 8004630:	f004 ffaa 	bl	8009588 <HAL_UART_Transmit>
 8004634:	f001 fb1a 	bl	8005c6c <Error_Handler>
      }
      if (bmp390_set_temperature(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable temperature
 8004638:	2101      	movs	r1, #1
 800463a:	481e      	ldr	r0, [pc, #120]	@ (80046b4 <main+0x56c>)
 800463c:	f7fe f900 	bl	8002840 <bmp390_set_temperature>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d010      	beq.n	8004668 <main+0x520>
          sprintf(uart_buffer, "BMP390: Failed to enable temperature measurement\r\n");
 8004646:	492e      	ldr	r1, [pc, #184]	@ (8004700 <main+0x5b8>)
 8004648:	4815      	ldr	r0, [pc, #84]	@ (80046a0 <main+0x558>)
 800464a:	f006 fea7 	bl	800b39c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 800464e:	4814      	ldr	r0, [pc, #80]	@ (80046a0 <main+0x558>)
 8004650:	f7fb fe2e 	bl	80002b0 <strlen>
 8004654:	4603      	mov	r3, r0
 8004656:	b29a      	uxth	r2, r3
 8004658:	f04f 33ff 	mov.w	r3, #4294967295
 800465c:	4910      	ldr	r1, [pc, #64]	@ (80046a0 <main+0x558>)
 800465e:	4811      	ldr	r0, [pc, #68]	@ (80046a4 <main+0x55c>)
 8004660:	f004 ff92 	bl	8009588 <HAL_UART_Transmit>
 8004664:	f001 fb02 	bl	8005c6c <Error_Handler>
      }
      if (bmp390_set_mode(&bmp390_handle, BMP390_MODE_NORMAL_MODE) != 0) {
 8004668:	2103      	movs	r1, #3
 800466a:	4812      	ldr	r0, [pc, #72]	@ (80046b4 <main+0x56c>)
 800466c:	f7fe f938 	bl	80028e0 <bmp390_set_mode>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d048      	beq.n	8004708 <main+0x5c0>
          sprintf(uart_buffer, "BMP390: Failed to set normal mode!\r\n");
 8004676:	4923      	ldr	r1, [pc, #140]	@ (8004704 <main+0x5bc>)
 8004678:	4809      	ldr	r0, [pc, #36]	@ (80046a0 <main+0x558>)
 800467a:	f006 fe8f 	bl	800b39c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 800467e:	4808      	ldr	r0, [pc, #32]	@ (80046a0 <main+0x558>)
 8004680:	f7fb fe16 	bl	80002b0 <strlen>
 8004684:	4603      	mov	r3, r0
 8004686:	b29a      	uxth	r2, r3
 8004688:	f04f 33ff 	mov.w	r3, #4294967295
 800468c:	4904      	ldr	r1, [pc, #16]	@ (80046a0 <main+0x558>)
 800468e:	4805      	ldr	r0, [pc, #20]	@ (80046a4 <main+0x55c>)
 8004690:	f004 ff7a 	bl	8009588 <HAL_UART_Transmit>
 8004694:	f001 faea 	bl	8005c6c <Error_Handler>
 8004698:	e045      	b.n	8004726 <main+0x5de>
 800469a:	bf00      	nop
 800469c:	0800fe44 	.word	0x0800fe44
 80046a0:	20000c58 	.word	0x20000c58
 80046a4:	2000048c 	.word	0x2000048c
 80046a8:	200009f4 	.word	0x200009f4
 80046ac:	0800fe68 	.word	0x0800fe68
 80046b0:	0800fe90 	.word	0x0800fe90
 80046b4:	20000a08 	.word	0x20000a08
 80046b8:	08003ed1 	.word	0x08003ed1
 80046bc:	08003ee1 	.word	0x08003ee1
 80046c0:	08003ef1 	.word	0x08003ef1
 80046c4:	08003f3d 	.word	0x08003f3d
 80046c8:	08003f89 	.word	0x08003f89
 80046cc:	08003ffb 	.word	0x08003ffb
 80046d0:	08003f9f 	.word	0x08003f9f
 80046d4:	08003faf 	.word	0x08003faf
 80046d8:	08003fbf 	.word	0x08003fbf
 80046dc:	08003fdd 	.word	0x08003fdd
 80046e0:	0800fed8 	.word	0x0800fed8
 80046e4:	0800ff00 	.word	0x0800ff00
 80046e8:	0800ff2c 	.word	0x0800ff2c
 80046ec:	0800ff5c 	.word	0x0800ff5c
 80046f0:	0800ff74 	.word	0x0800ff74
 80046f4:	0800ffa4 	.word	0x0800ffa4
 80046f8:	0800ffd8 	.word	0x0800ffd8
 80046fc:	0800fffc 	.word	0x0800fffc
 8004700:	0801002c 	.word	0x0801002c
 8004704:	08010060 	.word	0x08010060
      } else {
          sprintf(uart_buffer, "BMP390 configured for Normal Mode (P_OSR_x8, T_OSR_x1, ODR_25Hz).\r\n");
 8004708:	49a5      	ldr	r1, [pc, #660]	@ (80049a0 <main+0x858>)
 800470a:	48a6      	ldr	r0, [pc, #664]	@ (80049a4 <main+0x85c>)
 800470c:	f006 fe46 	bl	800b39c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004710:	48a4      	ldr	r0, [pc, #656]	@ (80049a4 <main+0x85c>)
 8004712:	f7fb fdcd 	bl	80002b0 <strlen>
 8004716:	4603      	mov	r3, r0
 8004718:	b29a      	uxth	r2, r3
 800471a:	f04f 33ff 	mov.w	r3, #4294967295
 800471e:	49a1      	ldr	r1, [pc, #644]	@ (80049a4 <main+0x85c>)
 8004720:	48a1      	ldr	r0, [pc, #644]	@ (80049a8 <main+0x860>)
 8004722:	f004 ff31 	bl	8009588 <HAL_UART_Transmit>
      }
  }

  HAL_Delay(200); // Wait for sensor to stabilize and take first readings after mode set
 8004726:	20c8      	movs	r0, #200	@ 0xc8
 8004728:	f001 fe4a 	bl	80063c0 <HAL_Delay>

  float initial_pressure_pa_sum = 0;
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  float initial_temperature_c_sum = 0;
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  int valid_calibration_readings = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  uint32_t cal_raw_p, cal_raw_t;
  float cal_p_pa, cal_t_c; // Pressure in Pa, Temp in Celsius

  sprintf(uart_buffer, "Calibrating BMP390 for altitude (takes a few readings)...\r\n");
 8004742:	499a      	ldr	r1, [pc, #616]	@ (80049ac <main+0x864>)
 8004744:	4897      	ldr	r0, [pc, #604]	@ (80049a4 <main+0x85c>)
 8004746:	f006 fe29 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800474a:	4896      	ldr	r0, [pc, #600]	@ (80049a4 <main+0x85c>)
 800474c:	f7fb fdb0 	bl	80002b0 <strlen>
 8004750:	4603      	mov	r3, r0
 8004752:	b29a      	uxth	r2, r3
 8004754:	f04f 33ff 	mov.w	r3, #4294967295
 8004758:	4992      	ldr	r1, [pc, #584]	@ (80049a4 <main+0x85c>)
 800475a:	4893      	ldr	r0, [pc, #588]	@ (80049a8 <main+0x860>)
 800475c:	f004 ff14 	bl	8009588 <HAL_UART_Transmit>

  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004766:	e063      	b.n	8004830 <main+0x6e8>
      if (bmp390_read_temperature_pressure(&bmp390_handle, &cal_raw_t, &cal_t_c, &cal_raw_p, &cal_p_pa) == 0) {
 8004768:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800476c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8004770:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8004774:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4603      	mov	r3, r0
 800477c:	488c      	ldr	r0, [pc, #560]	@ (80049b0 <main+0x868>)
 800477e:	f7fe fb4f 	bl	8002e20 <bmp390_read_temperature_pressure>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d138      	bne.n	80047fa <main+0x6b2>
          initial_pressure_pa_sum += cal_p_pa;
 8004788:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800478c:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8004790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004794:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
          initial_temperature_c_sum += cal_t_c;
 8004798:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800479c:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 80047a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047a4:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
          valid_calibration_readings++;
 80047a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80047ac:	3301      	adds	r3, #1
 80047ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
          sprintf(uart_buffer, "Calib reading %d: P=%.2f Pa, T=%.2f C\r\n", i + 1, cal_p_pa, cal_t_c);
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047b6:	1c5e      	adds	r6, r3, #1
 80047b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fb fee4 	bl	8000588 <__aeabi_f2d>
 80047c0:	4604      	mov	r4, r0
 80047c2:	460d      	mov	r5, r1
 80047c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fb fede 	bl	8000588 <__aeabi_f2d>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047d4:	e9cd 4500 	strd	r4, r5, [sp]
 80047d8:	4632      	mov	r2, r6
 80047da:	4976      	ldr	r1, [pc, #472]	@ (80049b4 <main+0x86c>)
 80047dc:	4871      	ldr	r0, [pc, #452]	@ (80049a4 <main+0x85c>)
 80047de:	f006 fddd 	bl	800b39c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80047e2:	4870      	ldr	r0, [pc, #448]	@ (80049a4 <main+0x85c>)
 80047e4:	f7fb fd64 	bl	80002b0 <strlen>
 80047e8:	4603      	mov	r3, r0
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	f04f 33ff 	mov.w	r3, #4294967295
 80047f0:	496c      	ldr	r1, [pc, #432]	@ (80049a4 <main+0x85c>)
 80047f2:	486d      	ldr	r0, [pc, #436]	@ (80049a8 <main+0x860>)
 80047f4:	f004 fec8 	bl	8009588 <HAL_UART_Transmit>
 80047f8:	e012      	b.n	8004820 <main+0x6d8>
      } else {
          sprintf(uart_buffer, "Calibration reading %d failed.\r\n", i + 1);
 80047fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047fe:	3301      	adds	r3, #1
 8004800:	461a      	mov	r2, r3
 8004802:	496d      	ldr	r1, [pc, #436]	@ (80049b8 <main+0x870>)
 8004804:	4867      	ldr	r0, [pc, #412]	@ (80049a4 <main+0x85c>)
 8004806:	f006 fdc9 	bl	800b39c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800480a:	4866      	ldr	r0, [pc, #408]	@ (80049a4 <main+0x85c>)
 800480c:	f7fb fd50 	bl	80002b0 <strlen>
 8004810:	4603      	mov	r3, r0
 8004812:	b29a      	uxth	r2, r3
 8004814:	f04f 33ff 	mov.w	r3, #4294967295
 8004818:	4962      	ldr	r1, [pc, #392]	@ (80049a4 <main+0x85c>)
 800481a:	4863      	ldr	r0, [pc, #396]	@ (80049a8 <main+0x860>)
 800481c:	f004 feb4 	bl	8009588 <HAL_UART_Transmit>
      }
      HAL_Delay(100); // Delay between readings (adjust based on ODR if necessary)
 8004820:	2064      	movs	r0, #100	@ 0x64
 8004822:	f001 fdcd 	bl	80063c0 <HAL_Delay>
  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 8004826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800482a:	3301      	adds	r3, #1
 800482c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004834:	2b04      	cmp	r3, #4
 8004836:	dd97      	ble.n	8004768 <main+0x620>
  }

  if (valid_calibration_readings > 0) {
 8004838:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800483c:	2b00      	cmp	r3, #0
 800483e:	dd50      	ble.n	80048e2 <main+0x79a>
      float avg_initial_pressure_pa = initial_pressure_pa_sum / valid_calibration_readings;
 8004840:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800484c:	edd7 6a46 	vldr	s13, [r7, #280]	@ 0x118
 8004850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004854:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
      float avg_initial_temperature_c = initial_temperature_c_sum / valid_calibration_readings;
 8004858:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004864:	edd7 6a45 	vldr	s13, [r7, #276]	@ 0x114
 8004868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486c:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
      float known_initial_altitude_m = 0.0f; // Assume starting at 0m altitude for calibration
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      calibrate_sea_level_pressure_hpa(avg_initial_pressure_pa / 100.0f, known_initial_altitude_m); // Convert Pa to hPa
 8004878:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 800487c:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049bc <main+0x874>
 8004880:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004884:	edd7 0a33 	vldr	s1, [r7, #204]	@ 0xcc
 8004888:	eeb0 0a47 	vmov.f32	s0, s14
 800488c:	f7ff fbcc 	bl	8004028 <calibrate_sea_level_pressure_hpa>

      sprintf(uart_buffer, "BMP390 Calibrated. Avg P: %.2f Pa, Avg T: %.2f C. Sea Level P: %.2f hPa\r\n",
 8004890:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8004894:	f7fb fe78 	bl	8000588 <__aeabi_f2d>
 8004898:	4680      	mov	r8, r0
 800489a:	4689      	mov	r9, r1
 800489c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80048a0:	f7fb fe72 	bl	8000588 <__aeabi_f2d>
 80048a4:	4604      	mov	r4, r0
 80048a6:	460d      	mov	r5, r1
 80048a8:	4b45      	ldr	r3, [pc, #276]	@ (80049c0 <main+0x878>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fb fe6b 	bl	8000588 <__aeabi_f2d>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048ba:	e9cd 4500 	strd	r4, r5, [sp]
 80048be:	4642      	mov	r2, r8
 80048c0:	464b      	mov	r3, r9
 80048c2:	4940      	ldr	r1, [pc, #256]	@ (80049c4 <main+0x87c>)
 80048c4:	4837      	ldr	r0, [pc, #220]	@ (80049a4 <main+0x85c>)
 80048c6:	f006 fd69 	bl	800b39c <siprintf>
              avg_initial_pressure_pa, avg_initial_temperature_c, sea_level_pressure_hpa);
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80048ca:	4836      	ldr	r0, [pc, #216]	@ (80049a4 <main+0x85c>)
 80048cc:	f7fb fcf0 	bl	80002b0 <strlen>
 80048d0:	4603      	mov	r3, r0
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295
 80048d8:	4932      	ldr	r1, [pc, #200]	@ (80049a4 <main+0x85c>)
 80048da:	4833      	ldr	r0, [pc, #204]	@ (80049a8 <main+0x860>)
 80048dc:	f004 fe54 	bl	8009588 <HAL_UART_Transmit>
 80048e0:	e011      	b.n	8004906 <main+0x7be>
  } else {
      sprintf(uart_buffer, "BMP390 Calibration failed. Using default sea level pressure (1013.25 hPa).\r\n");
 80048e2:	4939      	ldr	r1, [pc, #228]	@ (80049c8 <main+0x880>)
 80048e4:	482f      	ldr	r0, [pc, #188]	@ (80049a4 <main+0x85c>)
 80048e6:	f006 fd59 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80048ea:	482e      	ldr	r0, [pc, #184]	@ (80049a4 <main+0x85c>)
 80048ec:	f7fb fce0 	bl	80002b0 <strlen>
 80048f0:	4603      	mov	r3, r0
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	492a      	ldr	r1, [pc, #168]	@ (80049a4 <main+0x85c>)
 80048fa:	482b      	ldr	r0, [pc, #172]	@ (80049a8 <main+0x860>)
 80048fc:	f004 fe44 	bl	8009588 <HAL_UART_Transmit>
      sea_level_pressure_hpa = 1013.25f; // Default
 8004900:	4b2f      	ldr	r3, [pc, #188]	@ (80049c0 <main+0x878>)
 8004902:	4a32      	ldr	r2, [pc, #200]	@ (80049cc <main+0x884>)
 8004904:	601a      	str	r2, [r3, #0]
  }
  
  // Initialize ADXL375 high-g accelerometer
  sprintf(uart_buffer, "Initializing ADXL375 high-g accelerometer...\r\n");
 8004906:	4932      	ldr	r1, [pc, #200]	@ (80049d0 <main+0x888>)
 8004908:	4826      	ldr	r0, [pc, #152]	@ (80049a4 <main+0x85c>)
 800490a:	f006 fd47 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800490e:	4825      	ldr	r0, [pc, #148]	@ (80049a4 <main+0x85c>)
 8004910:	f7fb fcce 	bl	80002b0 <strlen>
 8004914:	4603      	mov	r3, r0
 8004916:	b29a      	uxth	r2, r3
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	4921      	ldr	r1, [pc, #132]	@ (80049a4 <main+0x85c>)
 800491e:	4822      	ldr	r0, [pc, #136]	@ (80049a8 <main+0x860>)
 8004920:	f004 fe32 	bl	8009588 <HAL_UART_Transmit>
  
  adxl375_init();
 8004924:	f7fc ffb2 	bl	800188c <adxl375_init>
  
  uint8_t adxl_id = adxl375_read(ADXL375_REG_DEVID);
 8004928:	2000      	movs	r0, #0
 800492a:	f7fc ff51 	bl	80017d0 <adxl375_read>
 800492e:	4603      	mov	r3, r0
 8004930:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
  if (adxl_id == 0xE5) {
 8004934:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8004938:	2be5      	cmp	r3, #229	@ 0xe5
 800493a:	f040 8186 	bne.w	8004c4a <main+0xb02>
      sprintf(uart_buffer, "ADXL375 initialized successfully. DEVID: 0x%02X (expected 0xE5)\r\n", adxl_id);
 800493e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8004942:	461a      	mov	r2, r3
 8004944:	4923      	ldr	r1, [pc, #140]	@ (80049d4 <main+0x88c>)
 8004946:	4817      	ldr	r0, [pc, #92]	@ (80049a4 <main+0x85c>)
 8004948:	f006 fd28 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800494c:	4815      	ldr	r0, [pc, #84]	@ (80049a4 <main+0x85c>)
 800494e:	f7fb fcaf 	bl	80002b0 <strlen>
 8004952:	4603      	mov	r3, r0
 8004954:	b29a      	uxth	r2, r3
 8004956:	f04f 33ff 	mov.w	r3, #4294967295
 800495a:	4912      	ldr	r1, [pc, #72]	@ (80049a4 <main+0x85c>)
 800495c:	4812      	ldr	r0, [pc, #72]	@ (80049a8 <main+0x860>)
 800495e:	f004 fe13 	bl	8009588 <HAL_UART_Transmit>
      
      // Calibrate ADXL375 - assume device is positioned so Z reads 1G, X/Y read 0G
      sprintf(uart_buffer, "Calibrating ADXL375... Please keep device still with Z-axis up.\r\n");
 8004962:	491d      	ldr	r1, [pc, #116]	@ (80049d8 <main+0x890>)
 8004964:	480f      	ldr	r0, [pc, #60]	@ (80049a4 <main+0x85c>)
 8004966:	f006 fd19 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800496a:	480e      	ldr	r0, [pc, #56]	@ (80049a4 <main+0x85c>)
 800496c:	f7fb fca0 	bl	80002b0 <strlen>
 8004970:	4603      	mov	r3, r0
 8004972:	b29a      	uxth	r2, r3
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
 8004978:	490a      	ldr	r1, [pc, #40]	@ (80049a4 <main+0x85c>)
 800497a:	480b      	ldr	r0, [pc, #44]	@ (80049a8 <main+0x860>)
 800497c:	f004 fe04 	bl	8009588 <HAL_UART_Transmit>
      
      // Take 50 samples and average them
      int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
      int16_t raw_x, raw_y, raw_z;
      const int cal_samples = 50;
 8004992:	2332      	movs	r3, #50	@ 0x32
 8004994:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      
      for (int i = 0; i < cal_samples; i++) {
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800499e:	e059      	b.n	8004a54 <main+0x90c>
 80049a0:	08010088 	.word	0x08010088
 80049a4:	20000c58 	.word	0x20000c58
 80049a8:	2000048c 	.word	0x2000048c
 80049ac:	080100cc 	.word	0x080100cc
 80049b0:	20000a08 	.word	0x20000a08
 80049b4:	08010108 	.word	0x08010108
 80049b8:	08010130 	.word	0x08010130
 80049bc:	42c80000 	.word	0x42c80000
 80049c0:	20000d58 	.word	0x20000d58
 80049c4:	08010154 	.word	0x08010154
 80049c8:	080101a0 	.word	0x080101a0
 80049cc:	447d5000 	.word	0x447d5000
 80049d0:	080101f0 	.word	0x080101f0
 80049d4:	08010220 	.word	0x08010220
 80049d8:	08010264 	.word	0x08010264
          adxl375_read_xyz(&raw_x, &raw_y, &raw_z);
 80049dc:	f107 025a 	add.w	r2, r7, #90	@ 0x5a
 80049e0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80049e4:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fc ff0f 	bl	800180c <adxl375_read_xyz>
          sum_x += raw_x;
 80049ee:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80049f2:	461a      	mov	r2, r3
 80049f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80049f8:	4413      	add	r3, r2
 80049fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
          sum_y += raw_y;
 80049fe:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8004a02:	461a      	mov	r2, r3
 8004a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a08:	4413      	add	r3, r2
 8004a0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          sum_z += raw_z;
 8004a0e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8004a12:	461a      	mov	r2, r3
 8004a14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004a18:	4413      	add	r3, r2
 8004a1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
          
          // Flash LED to show calibration in progress
          if (i % 10 == 0) {
 8004a1e:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 8004a22:	4bc4      	ldr	r3, [pc, #784]	@ (8004d34 <main+0xbec>)
 8004a24:	fb83 2301 	smull	r2, r3, r3, r1
 8004a28:	109a      	asrs	r2, r3, #2
 8004a2a:	17cb      	asrs	r3, r1, #31
 8004a2c:	1ad2      	subs	r2, r2, r3
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	1aca      	subs	r2, r1, r3
 8004a38:	2a00      	cmp	r2, #0
 8004a3a:	d103      	bne.n	8004a44 <main+0x8fc>
              HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	48be      	ldr	r0, [pc, #760]	@ (8004d38 <main+0xbf0>)
 8004a40:	f002 faf3 	bl	800702a <HAL_GPIO_TogglePin>
          }
          HAL_Delay(10);
 8004a44:	200a      	movs	r0, #10
 8004a46:	f001 fcbb 	bl	80063c0 <HAL_Delay>
      for (int i = 0; i < cal_samples; i++) {
 8004a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a4e:	3301      	adds	r3, #1
 8004a50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a54:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8004a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	dbbd      	blt.n	80049dc <main+0x894>
      }
      
      // Calculate average readings
      float avg_x = (float)sum_x / cal_samples;
 8004a60:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004a64:	ee07 3a90 	vmov	s15, r3
 8004a68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a7c:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
      float avg_y = (float)sum_y / cal_samples;
 8004a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a84:	ee07 3a90 	vmov	s15, r3
 8004a88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a9c:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
      float avg_z = (float)sum_z / cal_samples;
 8004aa0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ab0:	ee07 3a90 	vmov	s15, r3
 8004ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004abc:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
      
      // Calculate offsets needed to make Z read 1G and X/Y read 0G
      // First, determine the expected 1G raw reading based on sensitivity
      float expected_1g_raw = 1000.0f / ADXL375_SENSITIVITY_MG_PER_LSB; // 1g = 1000mg
 8004ac0:	4b9e      	ldr	r3, [pc, #632]	@ (8004d3c <main+0xbf4>)
 8004ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      
      // Calculate the offset values (signed 8-bit, so max ±127)
      // Offset registers act in the opposite direction of the measurement
      int8_t offset_x = -(int8_t)(avg_x / 4.0f); // ADXL375 datasheet specifies 15.6mg per LSB for offset registers
 8004ac6:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8004aca:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad6:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ada:	793b      	ldrb	r3, [r7, #4]
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	425b      	negs	r3, r3
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
      int8_t offset_y = -(int8_t)(avg_y / 4.0f);
 8004ae8:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8004aec:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004af8:	edc7 7a01 	vstr	s15, [r7, #4]
 8004afc:	793b      	ldrb	r3, [r7, #4]
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	425b      	negs	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
      int8_t offset_z = -(int8_t)((avg_z - expected_1g_raw) / 4.0f);
 8004b0a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004b0e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8004b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b16:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b22:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b26:	793b      	ldrb	r3, [r7, #4]
 8004b28:	b25b      	sxtb	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	425b      	negs	r3, r3
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
      offset_x = (offset_x > 127) ? 127 : ((offset_x < -128) ? -128 : offset_x);
      offset_y = (offset_y > 127) ? 127 : ((offset_y < -128) ? -128 : offset_y);
      offset_z = (offset_z > 127) ? 127 : ((offset_z < -128) ? -128 : offset_z);
      
      // Write the offsets to the ADXL375
      adxl375_write_offsets(offset_x, offset_y, offset_z);
 8004b34:	f997 20b1 	ldrsb.w	r2, [r7, #177]	@ 0xb1
 8004b38:	f997 10b2 	ldrsb.w	r1, [r7, #178]	@ 0xb2
 8004b3c:	f997 30b3 	ldrsb.w	r3, [r7, #179]	@ 0xb3
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fc febd 	bl	80018c0 <adxl375_write_offsets>
      
      // Read back and verify the offsets
      int8_t read_offset_x, read_offset_y, read_offset_z;
      adxl375_read_offsets(&read_offset_x, &read_offset_y, &read_offset_z);
 8004b46:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 8004b4a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8004b4e:	f107 0359 	add.w	r3, r7, #89	@ 0x59
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fc fed0 	bl	80018f8 <adxl375_read_offsets>
      
      sprintf(uart_buffer, "ADXL375 Calibration Complete.\r\n");
 8004b58:	4979      	ldr	r1, [pc, #484]	@ (8004d40 <main+0xbf8>)
 8004b5a:	487a      	ldr	r0, [pc, #488]	@ (8004d44 <main+0xbfc>)
 8004b5c:	f006 fc1e 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004b60:	4878      	ldr	r0, [pc, #480]	@ (8004d44 <main+0xbfc>)
 8004b62:	f7fb fba5 	bl	80002b0 <strlen>
 8004b66:	4603      	mov	r3, r0
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6e:	4975      	ldr	r1, [pc, #468]	@ (8004d44 <main+0xbfc>)
 8004b70:	4875      	ldr	r0, [pc, #468]	@ (8004d48 <main+0xc00>)
 8004b72:	f004 fd09 	bl	8009588 <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
              avg_x * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f),
 8004b76:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8004b7a:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8004d4c <main+0xc04>
 8004b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
 8004b82:	ee17 0a90 	vmov	r0, s15
 8004b86:	f7fb fcff 	bl	8000588 <__aeabi_f2d>
 8004b8a:	4680      	mov	r8, r0
 8004b8c:	4689      	mov	r9, r1
              avg_y * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f),
 8004b8e:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8004b92:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8004d4c <main+0xc04>
 8004b96:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
 8004b9a:	ee17 0a90 	vmov	r0, s15
 8004b9e:	f7fb fcf3 	bl	8000588 <__aeabi_f2d>
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	460d      	mov	r5, r1
              avg_z * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f));
 8004ba6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004baa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004d4c <main+0xc04>
 8004bae:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
 8004bb2:	ee17 0a90 	vmov	r0, s15
 8004bb6:	f7fb fce7 	bl	8000588 <__aeabi_f2d>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bc2:	e9cd 4500 	strd	r4, r5, [sp]
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	464b      	mov	r3, r9
 8004bca:	4961      	ldr	r1, [pc, #388]	@ (8004d50 <main+0xc08>)
 8004bcc:	485d      	ldr	r0, [pc, #372]	@ (8004d44 <main+0xbfc>)
 8004bce:	f006 fbe5 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004bd2:	485c      	ldr	r0, [pc, #368]	@ (8004d44 <main+0xbfc>)
 8004bd4:	f7fb fb6c 	bl	80002b0 <strlen>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004be0:	4958      	ldr	r1, [pc, #352]	@ (8004d44 <main+0xbfc>)
 8004be2:	4859      	ldr	r0, [pc, #356]	@ (8004d48 <main+0xc00>)
 8004be4:	f004 fcd0 	bl	8009588 <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Applied Offsets: X=%d, Y=%d, Z=%d\r\n", offset_x, offset_y, offset_z);
 8004be8:	f997 20b3 	ldrsb.w	r2, [r7, #179]	@ 0xb3
 8004bec:	f997 10b2 	ldrsb.w	r1, [r7, #178]	@ 0xb2
 8004bf0:	f997 30b1 	ldrsb.w	r3, [r7, #177]	@ 0xb1
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4956      	ldr	r1, [pc, #344]	@ (8004d54 <main+0xc0c>)
 8004bfa:	4852      	ldr	r0, [pc, #328]	@ (8004d44 <main+0xbfc>)
 8004bfc:	f006 fbce 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004c00:	4850      	ldr	r0, [pc, #320]	@ (8004d44 <main+0xbfc>)
 8004c02:	f7fb fb55 	bl	80002b0 <strlen>
 8004c06:	4603      	mov	r3, r0
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0e:	494d      	ldr	r1, [pc, #308]	@ (8004d44 <main+0xbfc>)
 8004c10:	484d      	ldr	r0, [pc, #308]	@ (8004d48 <main+0xc00>)
 8004c12:	f004 fcb9 	bl	8009588 <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Readback Offsets: X=%d, Y=%d, Z=%d\r\n", read_offset_x, read_offset_y, read_offset_z);
 8004c16:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8004c20:	4619      	mov	r1, r3
 8004c22:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	494b      	ldr	r1, [pc, #300]	@ (8004d58 <main+0xc10>)
 8004c2c:	4845      	ldr	r0, [pc, #276]	@ (8004d44 <main+0xbfc>)
 8004c2e:	f006 fbb5 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004c32:	4844      	ldr	r0, [pc, #272]	@ (8004d44 <main+0xbfc>)
 8004c34:	f7fb fb3c 	bl	80002b0 <strlen>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c40:	4940      	ldr	r1, [pc, #256]	@ (8004d44 <main+0xbfc>)
 8004c42:	4841      	ldr	r0, [pc, #260]	@ (8004d48 <main+0xc00>)
 8004c44:	f004 fca0 	bl	8009588 <HAL_UART_Transmit>
 8004c48:	e011      	b.n	8004c6e <main+0xb26>
      
  } else {
      sprintf(uart_buffer, "ADXL375 initialization FAILED! DEVID: 0x%02X (expected 0xE5)\r\n", adxl_id);
 8004c4a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4942      	ldr	r1, [pc, #264]	@ (8004d5c <main+0xc14>)
 8004c52:	483c      	ldr	r0, [pc, #240]	@ (8004d44 <main+0xbfc>)
 8004c54:	f006 fba2 	bl	800b39c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004c58:	483a      	ldr	r0, [pc, #232]	@ (8004d44 <main+0xbfc>)
 8004c5a:	f7fb fb29 	bl	80002b0 <strlen>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	4937      	ldr	r1, [pc, #220]	@ (8004d44 <main+0xbfc>)
 8004c68:	4837      	ldr	r0, [pc, #220]	@ (8004d48 <main+0xc00>)
 8004c6a:	f004 fc8d 	bl	8009588 <HAL_UART_Transmit>
  }
  
  // Turn on LED to indicate ready state
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET); // LD2 is usually green or yellow.
 8004c6e:	2201      	movs	r2, #1
 8004c70:	2180      	movs	r1, #128	@ 0x80
 8004c72:	4831      	ldr	r0, [pc, #196]	@ (8004d38 <main+0xbf0>)
 8004c74:	f002 f9c0 	bl	8006ff8 <HAL_GPIO_WritePin>
  // Initialize Kalman Filter
  // Noise parameters:
  // BMP390 altitude noise RMS = 0.15m => variance = 0.15*0.15 = 0.0225 m^2
  // LSM6DSO accel noise density = 160e-6 g/sqrt(Hz). For 100Hz sample rate (50Hz bandwidth):
  // accel_process_noise_variance = (160e-6 * 9.80665)^2 * 50 approx 0.000123 (m/s^2)^2
  float initial_altitude_m = 0.0f; // Will be updated by first good baro reading if possible, or use current persistent
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  if (sea_level_pressure_hpa > 0.0f && persistent_bmp_pres_pa > 0.0f) { // Check if calibration ran and we have a pressure
 8004c80:	4b37      	ldr	r3, [pc, #220]	@ (8004d60 <main+0xc18>)
 8004c82:	edd3 7a00 	vldr	s15, [r3]
 8004c86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8e:	dd15      	ble.n	8004cbc <main+0xb74>
 8004c90:	4b34      	ldr	r3, [pc, #208]	@ (8004d64 <main+0xc1c>)
 8004c92:	edd3 7a00 	vldr	s15, [r3]
 8004c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9e:	dd0d      	ble.n	8004cbc <main+0xb74>
      initial_altitude_m = calculate_altitude_hpa(persistent_bmp_pres_pa / 100.0f);
 8004ca0:	4b30      	ldr	r3, [pc, #192]	@ (8004d64 <main+0xc1c>)
 8004ca2:	edd3 7a00 	vldr	s15, [r3]
 8004ca6:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8004d68 <main+0xc20>
 8004caa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004cae:	eeb0 0a47 	vmov.f32	s0, s14
 8004cb2:	f7ff f9e3 	bl	800407c <calculate_altitude_hpa>
 8004cb6:	ed87 0a3e 	vstr	s0, [r7, #248]	@ 0xf8
 8004cba:	e017      	b.n	8004cec <main+0xba4>
  } else if (valid_calibration_readings > 0) { // Fallback to avg calibration altitude if available
 8004cbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	dd13      	ble.n	8004cec <main+0xba4>
      initial_altitude_m = calculate_altitude_hpa((initial_pressure_pa_sum / valid_calibration_readings) / 100.0f);
 8004cc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cd0:	edd7 6a46 	vldr	s13, [r7, #280]	@ 0x118
 8004cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd8:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8004d68 <main+0xc20>
 8004cdc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ce0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ce4:	f7ff f9ca 	bl	800407c <calculate_altitude_hpa>
 8004ce8:	ed87 0a3e 	vstr	s0, [r7, #248]	@ 0xf8
  }

  kalman_init(&kf_altitude_velocity,
 8004cec:	ed9f 2a1f 	vldr	s4, [pc, #124]	@ 8004d6c <main+0xc24>
 8004cf0:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 8004d70 <main+0xc28>
 8004cf4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004cf8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8004d6c <main+0xc24>
 8004cfc:	ed97 0a3e 	vldr	s0, [r7, #248]	@ 0xf8
 8004d00:	481c      	ldr	r0, [pc, #112]	@ (8004d74 <main+0xc2c>)
 8004d02:	f7fe facc 	bl	800329e <kalman_init>
              0.0225f,                  // initial_altitude_variance (R_baro)
              1.0f,                     // initial_velocity_variance (e.g., 1 (m/s)^2)
              0.000123f,                // process_noise_accel_variance (sigma_a^2 for Q)
              0.0225f);                 // measurement_noise_baro_variance (R_baro)

  sprintf(uart_buffer, "Kalman Filter Initialized. Initial Alt: %.2fm\r\n", initial_altitude_m);
 8004d06:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8004d0a:	f7fb fc3d 	bl	8000588 <__aeabi_f2d>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4919      	ldr	r1, [pc, #100]	@ (8004d78 <main+0xc30>)
 8004d14:	480b      	ldr	r0, [pc, #44]	@ (8004d44 <main+0xbfc>)
 8004d16:	f006 fb41 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004d1a:	480a      	ldr	r0, [pc, #40]	@ (8004d44 <main+0xbfc>)
 8004d1c:	f7fb fac8 	bl	80002b0 <strlen>
 8004d20:	4603      	mov	r3, r0
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295
 8004d28:	4906      	ldr	r1, [pc, #24]	@ (8004d44 <main+0xbfc>)
 8004d2a:	4807      	ldr	r0, [pc, #28]	@ (8004d48 <main+0xc00>)
 8004d2c:	f004 fc2c 	bl	8009588 <HAL_UART_Transmit>
   // Define the flight state machine instance
  /* USER CODE END 2 */

  // Wait for arming signal (PF12 to go HIGH when disconnected from GND)
  // Loop indefinitely until PF12 is HIGH (disconnected from GND)
  while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8004d30:	e027      	b.n	8004d82 <main+0xc3a>
 8004d32:	bf00      	nop
 8004d34:	66666667 	.word	0x66666667
 8004d38:	40020400 	.word	0x40020400
 8004d3c:	41a343eb 	.word	0x41a343eb
 8004d40:	080102a8 	.word	0x080102a8
 8004d44:	20000c58 	.word	0x20000c58
 8004d48:	2000048c 	.word	0x2000048c
 8004d4c:	3d48b439 	.word	0x3d48b439
 8004d50:	080102c8 	.word	0x080102c8
 8004d54:	080102f4 	.word	0x080102f4
 8004d58:	0801031c 	.word	0x0801031c
 8004d5c:	08010344 	.word	0x08010344
 8004d60:	20000d58 	.word	0x20000d58
 8004d64:	20000d70 	.word	0x20000d70
 8004d68:	42c80000 	.word	0x42c80000
 8004d6c:	3cb851ec 	.word	0x3cb851ec
 8004d70:	3900f990 	.word	0x3900f990
 8004d74:	20000d78 	.word	0x20000d78
 8004d78:	08010384 	.word	0x08010384
       HAL_Delay(1); // Optional: uncomment for a slight delay
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	f001 fb1f 	bl	80063c0 <HAL_Delay>
  while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8004d82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d86:	48da      	ldr	r0, [pc, #872]	@ (80050f0 <main+0xfa8>)
 8004d88:	f002 f91e 	bl	8006fc8 <HAL_GPIO_ReadPin>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f4      	beq.n	8004d7c <main+0xc34>
  }

  sprintf(uart_buffer, "System ARMED (PF12 HIGH). Entering main loop.\r\n");
 8004d92:	49d8      	ldr	r1, [pc, #864]	@ (80050f4 <main+0xfac>)
 8004d94:	48d8      	ldr	r0, [pc, #864]	@ (80050f8 <main+0xfb0>)
 8004d96:	f006 fb01 	bl	800b39c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004d9a:	48d7      	ldr	r0, [pc, #860]	@ (80050f8 <main+0xfb0>)
 8004d9c:	f7fb fa88 	bl	80002b0 <strlen>
 8004da0:	4603      	mov	r3, r0
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	49d3      	ldr	r1, [pc, #844]	@ (80050f8 <main+0xfb0>)
 8004daa:	48d4      	ldr	r0, [pc, #848]	@ (80050fc <main+0xfb4>)
 8004dac:	f004 fbec 	bl	8009588 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t loop_start_tick = HAL_GetTick(); // Record start time of the loop
 8004db0:	f001 fafa 	bl	80063a8 <HAL_GetTick>
 8004db4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

    uint32_t raw_pressure; // raw_temperature is still needed for the function call
    uint32_t local_raw_temperature; // Use a distinct local variable for the raw temperature param

    // Sensor values
    float lsm_acc_x = 0.0f, lsm_acc_y = 0.0f, lsm_acc_z = 0.0f;
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    float lsm_gyr_x = 0.0f, lsm_gyr_y = 0.0f, lsm_gyr_z = 0.0f;
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    float bmp_temp_c = 0.0f, bmp_pres_pa = 0.0f, bmp_alt_m = 0.0f;
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float adxl_hi_g_x = 0.0f, adxl_hi_g_y = 0.0f, adxl_hi_g_z = 0.0f;
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    // Madgwick inputs
    float acc_g[3];  // Acceleration in g
    float gyro_rps[3]; // Gyroscope in rad/s

    bool lsm_accel_data_ready = false;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
    bool lsm_gyro_data_ready = false;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
    bool bmp_data_ok = false; // Initialize to false for this cycle
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

    // Read LSM6DSO data
    uint8_t reg_lsm;
    lsm6dso_status_reg_get(&dev_ctx, &reg_lsm);
 8004e2a:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8004e2e:	4619      	mov	r1, r3
 8004e30:	48b3      	ldr	r0, [pc, #716]	@ (8005100 <main+0xfb8>)
 8004e32:	f7fe fe87 	bl	8003b44 <lsm6dso_status_reg_get>

    if (reg_lsm & 0x01) { // Check XLDA bit
 8004e36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d036      	beq.n	8004eb0 <main+0xd68>
      lsm_accel_data_ready = true;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
      lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8004e48:	49ae      	ldr	r1, [pc, #696]	@ (8005104 <main+0xfbc>)
 8004e4a:	48ad      	ldr	r0, [pc, #692]	@ (8005100 <main+0xfb8>)
 8004e4c:	f7fe fed3 	bl	8003bf6 <lsm6dso_acceleration_raw_get>
      lsm_acc_x = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[0]);
 8004e50:	4bac      	ldr	r3, [pc, #688]	@ (8005104 <main+0xfbc>)
 8004e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff f944 	bl	80040e4 <lsm6dso_from_fs16g_to_mg>
 8004e5c:	ed87 0a3d 	vstr	s0, [r7, #244]	@ 0xf4
      lsm_acc_y = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[1]);
 8004e60:	4ba8      	ldr	r3, [pc, #672]	@ (8005104 <main+0xfbc>)
 8004e62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff f93c 	bl	80040e4 <lsm6dso_from_fs16g_to_mg>
 8004e6c:	ed87 0a3c 	vstr	s0, [r7, #240]	@ 0xf0
      lsm_acc_z = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[2]);
 8004e70:	4ba4      	ldr	r3, [pc, #656]	@ (8005104 <main+0xfbc>)
 8004e72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff f934 	bl	80040e4 <lsm6dso_from_fs16g_to_mg>
 8004e7c:	ed87 0a3b 	vstr	s0, [r7, #236]	@ 0xec

      // Convert accelerometer data from mg to g for Madgwick
      acc_g[0] = lsm_acc_x / 1000.0f;
 8004e80:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 8004e84:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8005108 <main+0xfc0>
 8004e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e8c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      acc_g[1] = lsm_acc_y / 1000.0f;
 8004e90:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8004e94:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8005108 <main+0xfc0>
 8004e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e9c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      acc_g[2] = lsm_acc_z / 1000.0f;
 8004ea0:	ed97 7a3b 	vldr	s14, [r7, #236]	@ 0xec
 8004ea4:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8005108 <main+0xfc0>
 8004ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004eac:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    }

        if (reg_lsm & 0x02) { // Check GDA (Gyroscope Data Available) bit
 8004eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d051      	beq.n	8004f60 <main+0xe18>
      lsm_gyro_data_ready = true;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
            lsm6dso_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8004ec2:	4992      	ldr	r1, [pc, #584]	@ (800510c <main+0xfc4>)
 8004ec4:	488e      	ldr	r0, [pc, #568]	@ (8005100 <main+0xfb8>)
 8004ec6:	f7fe fe4e 	bl	8003b66 <lsm6dso_angular_rate_raw_get>
      lsm_gyr_x = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004eca:	4b90      	ldr	r3, [pc, #576]	@ (800510c <main+0xfc4>)
 8004ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff f921 	bl	8004118 <lsm6dso_from_fs2000dps_to_mdps>
 8004ed6:	ed87 0a3a 	vstr	s0, [r7, #232]	@ 0xe8
      lsm_gyr_y = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004eda:	4b8c      	ldr	r3, [pc, #560]	@ (800510c <main+0xfc4>)
 8004edc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff f919 	bl	8004118 <lsm6dso_from_fs2000dps_to_mdps>
 8004ee6:	ed87 0a39 	vstr	s0, [r7, #228]	@ 0xe4
      lsm_gyr_z = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004eea:	4b88      	ldr	r3, [pc, #544]	@ (800510c <main+0xfc4>)
 8004eec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff f911 	bl	8004118 <lsm6dso_from_fs2000dps_to_mdps>
 8004ef6:	ed87 0a38 	vstr	s0, [r7, #224]	@ 0xe0

      // Convert gyroscope data from mdps to rad/s for Madgwick
      // PI is defined in Madgwick_filter.h
      gyro_rps[0] = lsm_gyr_x * (PI / 180.0f / 1000.0f);
 8004efa:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8004efe:	f7fb fb43 	bl	8000588 <__aeabi_f2d>
 8004f02:	a379      	add	r3, pc, #484	@ (adr r3, 80050e8 <main+0xfa0>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f7fb fb96 	bl	8000638 <__aeabi_dmul>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	f7fb fe88 	bl	8000c28 <__aeabi_d2f>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	637b      	str	r3, [r7, #52]	@ 0x34
      gyro_rps[1] = lsm_gyr_y * (PI / 180.0f / 1000.0f);
 8004f1c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8004f20:	f7fb fb32 	bl	8000588 <__aeabi_f2d>
 8004f24:	a370      	add	r3, pc, #448	@ (adr r3, 80050e8 <main+0xfa0>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb fb85 	bl	8000638 <__aeabi_dmul>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	f7fb fe77 	bl	8000c28 <__aeabi_d2f>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      gyro_rps[2] = lsm_gyr_z * (PI / 180.0f / 1000.0f);
 8004f3e:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8004f42:	f7fb fb21 	bl	8000588 <__aeabi_f2d>
 8004f46:	a368      	add	r3, pc, #416	@ (adr r3, 80050e8 <main+0xfa0>)
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f7fb fb74 	bl	8000638 <__aeabi_dmul>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7fb fe66 	bl	8000c28 <__aeabi_d2f>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Update Madgwick filter (call this every 10ms)
    // Ensure acc_g and gyro_rps are updated if data is ready, otherwise, decide on behavior
    // (e.g., use last known, or skip update if critical data missing)
    // For now, assume data is usually ready. If not, filter might get stale inputs from previous loop.
    MadgwickAHRSupdateIMU(gyro_rps[0], gyro_rps[1], gyro_rps[2], acc_g[0], acc_g[1], acc_g[2]);
 8004f60:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004f64:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8004f68:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8004f6c:	ed97 6a10 	vldr	s12, [r7, #64]	@ 0x40
 8004f70:	edd7 5a11 	vldr	s11, [r7, #68]	@ 0x44
 8004f74:	ed97 5a12 	vldr	s10, [r7, #72]	@ 0x48
 8004f78:	eef0 2a45 	vmov.f32	s5, s10
 8004f7c:	eeb0 2a65 	vmov.f32	s4, s11
 8004f80:	eef0 1a46 	vmov.f32	s3, s12
 8004f84:	eeb0 1a66 	vmov.f32	s2, s13
 8004f88:	eef0 0a47 	vmov.f32	s1, s14
 8004f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f90:	f7fc f866 	bl	8001060 <MadgwickAHRSupdateIMU>

    // Calculate world-frame vertical linear acceleration for Kalman filter
    float acc_z_world_g = (2.0f*(q1*q3 - q0*q2)*acc_g[0] + 2.0f*(q2*q3 + q0*q1)*acc_g[1] + (q0*q0 - q1*q1 - q2*q2 + q3*q3)*acc_g[2]);
 8004f94:	4b5e      	ldr	r3, [pc, #376]	@ (8005110 <main+0xfc8>)
 8004f96:	ed93 7a00 	vldr	s14, [r3]
 8004f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8005114 <main+0xfcc>)
 8004f9c:	edd3 7a00 	vldr	s15, [r3]
 8004fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8005118 <main+0xfd0>)
 8004fa6:	edd3 6a00 	vldr	s13, [r3]
 8004faa:	4b5c      	ldr	r3, [pc, #368]	@ (800511c <main+0xfd4>)
 8004fac:	edd3 7a00 	vldr	s15, [r3]
 8004fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004fbc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fc4:	4b55      	ldr	r3, [pc, #340]	@ (800511c <main+0xfd4>)
 8004fc6:	edd3 6a00 	vldr	s13, [r3]
 8004fca:	4b52      	ldr	r3, [pc, #328]	@ (8005114 <main+0xfcc>)
 8004fcc:	edd3 7a00 	vldr	s15, [r3]
 8004fd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004fd4:	4b50      	ldr	r3, [pc, #320]	@ (8005118 <main+0xfd0>)
 8004fd6:	ed93 6a00 	vldr	s12, [r3]
 8004fda:	4b4d      	ldr	r3, [pc, #308]	@ (8005110 <main+0xfc8>)
 8004fdc:	edd3 7a00 	vldr	s15, [r3]
 8004fe0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004fec:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ff8:	4b47      	ldr	r3, [pc, #284]	@ (8005118 <main+0xfd0>)
 8004ffa:	edd3 6a00 	vldr	s13, [r3]
 8004ffe:	4b46      	ldr	r3, [pc, #280]	@ (8005118 <main+0xfd0>)
 8005000:	edd3 7a00 	vldr	s15, [r3]
 8005004:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005008:	4b41      	ldr	r3, [pc, #260]	@ (8005110 <main+0xfc8>)
 800500a:	ed93 6a00 	vldr	s12, [r3]
 800500e:	4b40      	ldr	r3, [pc, #256]	@ (8005110 <main+0xfc8>)
 8005010:	edd3 7a00 	vldr	s15, [r3]
 8005014:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005018:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800501c:	4b3f      	ldr	r3, [pc, #252]	@ (800511c <main+0xfd4>)
 800501e:	ed93 6a00 	vldr	s12, [r3]
 8005022:	4b3e      	ldr	r3, [pc, #248]	@ (800511c <main+0xfd4>)
 8005024:	edd3 7a00 	vldr	s15, [r3]
 8005028:	ee66 7a27 	vmul.f32	s15, s12, s15
 800502c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005030:	4b38      	ldr	r3, [pc, #224]	@ (8005114 <main+0xfcc>)
 8005032:	ed93 6a00 	vldr	s12, [r3]
 8005036:	4b37      	ldr	r3, [pc, #220]	@ (8005114 <main+0xfcc>)
 8005038:	edd3 7a00 	vldr	s15, [r3]
 800503c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005040:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005044:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800504c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005050:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    float linear_accel_z_mps2 = (acc_z_world_g - 1.0f) * 9.80665f; // Assuming Z is UP
 8005054:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8005058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800505c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005060:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005120 <main+0xfd8>
 8005064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005068:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // Kalman Predict Step (every loop = every 10ms)
    kalman_predict(&kf_altitude_velocity, linear_accel_z_mps2, 0.01f);
 800506c:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8005124 <main+0xfdc>
 8005070:	ed97 0a22 	vldr	s0, [r7, #136]	@ 0x88
 8005074:	482c      	ldr	r0, [pc, #176]	@ (8005128 <main+0xfe0>)
 8005076:	f7fe f941 	bl	80032fc <kalman_predict>

    // Read BMP390 data only every other cycle (20ms interval if loop is 10ms)
    bool new_baro_data_for_kalman = false;
 800507a:	2300      	movs	r3, #0
 800507c:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
    if (bmp390_read_scheduler == 0) {
 8005080:	4b2a      	ldr	r3, [pc, #168]	@ (800512c <main+0xfe4>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d169      	bne.n	800515c <main+0x1014>
        float func_temp_c, func_pres_pa; // Local variables for the values read from the function
        if (bmp390_read_temperature_pressure(&bmp390_handle, &local_raw_temperature, &func_temp_c, &raw_pressure, &func_pres_pa) == 0) {
 8005088:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800508c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005090:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4603      	mov	r3, r0
 800509c:	4824      	ldr	r0, [pc, #144]	@ (8005130 <main+0xfe8>)
 800509e:	f7fd febf 	bl	8002e20 <bmp390_read_temperature_pressure>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d14d      	bne.n	8005144 <main+0xffc>
            bmp_data_ok = true; // Indicates data read attempt was successful for this cycle
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            persistent_bmp_pres_pa = func_pres_pa; // Update persistent pressure
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	4a20      	ldr	r2, [pc, #128]	@ (8005134 <main+0xfec>)
 80050b2:	6013      	str	r3, [r2, #0]
            float current_pressure_hpa = persistent_bmp_pres_pa / 100.0f;
 80050b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005134 <main+0xfec>)
 80050b6:	ed93 7a00 	vldr	s14, [r3]
 80050ba:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8005138 <main+0xff0>
 80050be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050c2:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            persistent_bmp_alt_m = calculate_altitude_hpa(current_pressure_hpa); // Update persistent altitude
 80050c6:	ed97 0a21 	vldr	s0, [r7, #132]	@ 0x84
 80050ca:	f7fe ffd7 	bl	800407c <calculate_altitude_hpa>
 80050ce:	eef0 7a40 	vmov.f32	s15, s0
 80050d2:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <main+0xff4>)
 80050d4:	edc3 7a00 	vstr	s15, [r3]
            new_baro_data_for_kalman = true; // New data is available for Kalman
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd

            // Temperature reading is no longer updated or used here actively
        HAL_GPIO_TogglePin(GPIOB, LD1_Pin); // Toggle LD1 (usually green) to show activity
 80050de:	2101      	movs	r1, #1
 80050e0:	4817      	ldr	r0, [pc, #92]	@ (8005140 <main+0xff8>)
 80050e2:	f001 ffa2 	bl	800702a <HAL_GPIO_TogglePin>
 80050e6:	e039      	b.n	800515c <main+0x1014>
 80050e8:	e13863be 	.word	0xe13863be
 80050ec:	3ef24d14 	.word	0x3ef24d14
 80050f0:	40021400 	.word	0x40021400
 80050f4:	080103b4 	.word	0x080103b4
 80050f8:	20000c58 	.word	0x20000c58
 80050fc:	2000048c 	.word	0x2000048c
 8005100:	200009f4 	.word	0x200009f4
 8005104:	20000d5c 	.word	0x20000d5c
 8005108:	447a0000 	.word	0x447a0000
 800510c:	20000d64 	.word	0x20000d64
 8005110:	2000033c 	.word	0x2000033c
 8005114:	20000344 	.word	0x20000344
 8005118:	20000004 	.word	0x20000004
 800511c:	20000340 	.word	0x20000340
 8005120:	411ce80a 	.word	0x411ce80a
 8005124:	3c23d70a 	.word	0x3c23d70a
 8005128:	20000d78 	.word	0x20000d78
 800512c:	20000d6c 	.word	0x20000d6c
 8005130:	20000a08 	.word	0x20000a08
 8005134:	20000d70 	.word	0x20000d70
 8005138:	42c80000 	.word	0x42c80000
 800513c:	20000d74 	.word	0x20000d74
 8005140:	40020400 	.word	0x40020400
    } else {
            // bmp_data_ok remains false, set by initialization
        HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET); // Turn on LD3 (usually red) for error
 8005144:	2201      	movs	r2, #1
 8005146:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800514a:	48a6      	ldr	r0, [pc, #664]	@ (80053e4 <main+0x129c>)
 800514c:	f001 ff54 	bl	8006ff8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET); // Blink error LED
 8005150:	2200      	movs	r2, #0
 8005152:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005156:	48a3      	ldr	r0, [pc, #652]	@ (80053e4 <main+0x129c>)
 8005158:	f001 ff4e 	bl	8006ff8 <HAL_GPIO_WritePin>
        }
    }
    // On other cycles, bmp_data_ok remains false, and old bmp_pres_pa, bmp_alt_m are used if printed.

    // Kalman Update Step (conditionally, when new barometer data is available)
    if (new_baro_data_for_kalman) {
 800515c:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <main+0x102c>
        kalman_update_barometer(&kf_altitude_velocity, persistent_bmp_alt_m);
 8005164:	4ba0      	ldr	r3, [pc, #640]	@ (80053e8 <main+0x12a0>)
 8005166:	edd3 7a00 	vldr	s15, [r3]
 800516a:	eeb0 0a67 	vmov.f32	s0, s15
 800516e:	489f      	ldr	r0, [pc, #636]	@ (80053ec <main+0x12a4>)
 8005170:	f7fe f9ba 	bl	80034e8 <kalman_update_barometer>
    }
    
    bmp390_read_scheduler++;
 8005174:	4b9e      	ldr	r3, [pc, #632]	@ (80053f0 <main+0x12a8>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	b2da      	uxtb	r2, r3
 800517c:	4b9c      	ldr	r3, [pc, #624]	@ (80053f0 <main+0x12a8>)
 800517e:	701a      	strb	r2, [r3, #0]
    if (bmp390_read_scheduler >= 1) { // Reset every 2 cycles
 8005180:	4b9b      	ldr	r3, [pc, #620]	@ (80053f0 <main+0x12a8>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <main+0x1046>
        bmp390_read_scheduler = 0;
 8005188:	4b99      	ldr	r3, [pc, #612]	@ (80053f0 <main+0x12a8>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
    }
    
    // Read ADXL375 high-g accelerometer (±200g range)
    int16_t adxl_raw_x, adxl_raw_y, adxl_raw_z;
    adxl375_read_xyz(&adxl_raw_x, &adxl_raw_y, &adxl_raw_z);
 800518e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005192:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 8005196:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800519a:	4618      	mov	r0, r3
 800519c:	f7fc fb36 	bl	800180c <adxl375_read_xyz>
    adxl_hi_g_x = (float)adxl_raw_x * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f); 
 80051a0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80051a4:	ee07 3a90 	vmov	s15, r3
 80051a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ac:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80053f4 <main+0x12ac>
 80051b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051b4:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    adxl_hi_g_y = (float)adxl_raw_y * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f);
 80051b8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80051bc:	ee07 3a90 	vmov	s15, r3
 80051c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051c4:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80053f4 <main+0x12ac>
 80051c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051cc:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    adxl_hi_g_z = (float)adxl_raw_z * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f);
 80051d0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80051d4:	ee07 3a90 	vmov	s15, r3
 80051d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051dc:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80053f4 <main+0x12ac>
 80051e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051e4:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    
    uint32_t loop_end_tick = HAL_GetTick();
 80051e8:	f001 f8de 	bl	80063a8 <HAL_GetTick>
 80051ec:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    uint32_t execution_time_ms = loop_end_tick - loop_start_tick;
 80051f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Check if execution time exceeds 10ms
    if (execution_time_ms >= TARGET_LOOP_PERIOD_MS) {
 80051fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051fe:	2b09      	cmp	r3, #9
 8005200:	d912      	bls.n	8005228 <main+0x10e0>
        // Blink LED3 if the execution time exceeds 10ms
        if (HAL_GetTick() - led3_last_toggle_time >= led3_blink_interval) {
 8005202:	f001 f8d1 	bl	80063a8 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	4b7b      	ldr	r3, [pc, #492]	@ (80053f8 <main+0x12b0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	22c8      	movs	r2, #200	@ 0xc8
 8005210:	4293      	cmp	r3, r2
 8005212:	d309      	bcc.n	8005228 <main+0x10e0>
            HAL_GPIO_TogglePin(GPIOB, LD3_Pin); // Toggle LED3
 8005214:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005218:	4872      	ldr	r0, [pc, #456]	@ (80053e4 <main+0x129c>)
 800521a:	f001 ff06 	bl	800702a <HAL_GPIO_TogglePin>
            led3_last_toggle_time = HAL_GetTick(); // Update last toggle time
 800521e:	f001 f8c3 	bl	80063a8 <HAL_GetTick>
 8005222:	4603      	mov	r3, r0
 8005224:	4a74      	ldr	r2, [pc, #464]	@ (80053f8 <main+0x12b0>)
 8005226:	6013      	str	r3, [r2, #0]
        }
    }

    // Consolidate UART output
    int_fast16_t current_len = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    bool data_printed_prev = false; // Flag to track if a separator is needed
 800522e:	2300      	movs	r3, #0
 8005230:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

#ifdef PRINT_LSM6DSO_ACCEL_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 8005234:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01a      	beq.n	8005272 <main+0x112a>
 800523c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005240:	2b00      	cmp	r3, #0
 8005242:	dd16      	ble.n	8005272 <main+0x112a>
 8005244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800524c:	d011      	beq.n	8005272 <main+0x112a>
 800524e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005252:	4a6a      	ldr	r2, [pc, #424]	@ (80053fc <main+0x12b4>)
 8005254:	1898      	adds	r0, r3, r2
 8005256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800525a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800525e:	4a68      	ldr	r2, [pc, #416]	@ (8005400 <main+0x12b8>)
 8005260:	4619      	mov	r1, r3
 8005262:	f006 f865 	bl	800b330 <sniprintf>
 8005266:	4602      	mov	r2, r0
 8005268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800526c:	4413      	add	r3, r2
 800526e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "A:");
 8005272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005276:	4a61      	ldr	r2, [pc, #388]	@ (80053fc <main+0x12b4>)
 8005278:	1898      	adds	r0, r3, r2
 800527a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800527e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005282:	4a60      	ldr	r2, [pc, #384]	@ (8005404 <main+0x12bc>)
 8005284:	4619      	mov	r1, r3
 8005286:	f006 f853 	bl	800b330 <sniprintf>
 800528a:	4602      	mov	r2, r0
 800528c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005290:	4413      	add	r3, r2
 8005292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    if (lsm_accel_data_ready) {
 8005296:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800529a:	2b00      	cmp	r3, #0
 800529c:	d02b      	beq.n	80052f6 <main+0x11ae>
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "%.1f,%.1f,%.1f", lsm_acc_x, lsm_acc_y, lsm_acc_z);
 800529e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052a2:	4a56      	ldr	r2, [pc, #344]	@ (80053fc <main+0x12b4>)
 80052a4:	189e      	adds	r6, r3, r2
 80052a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052aa:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 80052ae:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 80052b2:	f7fb f969 	bl	8000588 <__aeabi_f2d>
 80052b6:	4604      	mov	r4, r0
 80052b8:	460d      	mov	r5, r1
 80052ba:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 80052be:	f7fb f963 	bl	8000588 <__aeabi_f2d>
 80052c2:	4680      	mov	r8, r0
 80052c4:	4689      	mov	r9, r1
 80052c6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80052ca:	f7fb f95d 	bl	8000588 <__aeabi_f2d>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80052da:	e9cd 4500 	strd	r4, r5, [sp]
 80052de:	4a4a      	ldr	r2, [pc, #296]	@ (8005408 <main+0x12c0>)
 80052e0:	4651      	mov	r1, sl
 80052e2:	4630      	mov	r0, r6
 80052e4:	f006 f824 	bl	800b330 <sniprintf>
 80052e8:	4602      	mov	r2, r0
 80052ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052ee:	4413      	add	r3, r2
 80052f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052f4:	e011      	b.n	800531a <main+0x11d2>
    } else {
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "NR,NR,NR");
 80052f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052fa:	4a40      	ldr	r2, [pc, #256]	@ (80053fc <main+0x12b4>)
 80052fc:	1898      	adds	r0, r3, r2
 80052fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005302:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005306:	4a41      	ldr	r2, [pc, #260]	@ (800540c <main+0x12c4>)
 8005308:	4619      	mov	r1, r3
 800530a:	f006 f811 	bl	800b330 <sniprintf>
 800530e:	4602      	mov	r2, r0
 8005310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005314:	4413      	add	r3, r2
 8005316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    }
    data_printed_prev = true;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
#endif

#ifdef PRINT_LSM6DSO_GYRO_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 8005320:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01a      	beq.n	800535e <main+0x1216>
 8005328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800532c:	2b00      	cmp	r3, #0
 800532e:	dd16      	ble.n	800535e <main+0x1216>
 8005330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005338:	d011      	beq.n	800535e <main+0x1216>
 800533a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800533e:	4a2f      	ldr	r2, [pc, #188]	@ (80053fc <main+0x12b4>)
 8005340:	1898      	adds	r0, r3, r2
 8005342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005346:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800534a:	4a2d      	ldr	r2, [pc, #180]	@ (8005400 <main+0x12b8>)
 800534c:	4619      	mov	r1, r3
 800534e:	f005 ffef 	bl	800b330 <sniprintf>
 8005352:	4602      	mov	r2, r0
 8005354:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005358:	4413      	add	r3, r2
 800535a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "G:");
 800535e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005362:	4a26      	ldr	r2, [pc, #152]	@ (80053fc <main+0x12b4>)
 8005364:	1898      	adds	r0, r3, r2
 8005366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800536a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800536e:	4a28      	ldr	r2, [pc, #160]	@ (8005410 <main+0x12c8>)
 8005370:	4619      	mov	r1, r3
 8005372:	f005 ffdd 	bl	800b330 <sniprintf>
 8005376:	4602      	mov	r2, r0
 8005378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800537c:	4413      	add	r3, r2
 800537e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    if (lsm_gyro_data_ready) {
 8005382:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8005386:	2b00      	cmp	r3, #0
 8005388:	d044      	beq.n	8005414 <main+0x12cc>
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "%.1f,%.1f,%.1f", lsm_gyr_x, lsm_gyr_y, lsm_gyr_z);
 800538a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800538e:	4a1b      	ldr	r2, [pc, #108]	@ (80053fc <main+0x12b4>)
 8005390:	189e      	adds	r6, r3, r2
 8005392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005396:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 800539a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800539e:	f7fb f8f3 	bl	8000588 <__aeabi_f2d>
 80053a2:	4604      	mov	r4, r0
 80053a4:	460d      	mov	r5, r1
 80053a6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80053aa:	f7fb f8ed 	bl	8000588 <__aeabi_f2d>
 80053ae:	4680      	mov	r8, r0
 80053b0:	4689      	mov	r9, r1
 80053b2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80053b6:	f7fb f8e7 	bl	8000588 <__aeabi_f2d>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80053c6:	e9cd 4500 	strd	r4, r5, [sp]
 80053ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005408 <main+0x12c0>)
 80053cc:	4651      	mov	r1, sl
 80053ce:	4630      	mov	r0, r6
 80053d0:	f005 ffae 	bl	800b330 <sniprintf>
 80053d4:	4602      	mov	r2, r0
 80053d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053da:	4413      	add	r3, r2
 80053dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053e0:	e02a      	b.n	8005438 <main+0x12f0>
 80053e2:	bf00      	nop
 80053e4:	40020400 	.word	0x40020400
 80053e8:	20000d74 	.word	0x20000d74
 80053ec:	20000d78 	.word	0x20000d78
 80053f0:	20000d6c 	.word	0x20000d6c
 80053f4:	3d48b439 	.word	0x3d48b439
 80053f8:	20000d98 	.word	0x20000d98
 80053fc:	20000c58 	.word	0x20000c58
 8005400:	080103e4 	.word	0x080103e4
 8005404:	080103e8 	.word	0x080103e8
 8005408:	080103ec 	.word	0x080103ec
 800540c:	080103fc 	.word	0x080103fc
 8005410:	08010408 	.word	0x08010408
    } else {
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "NR,NR,NR");
 8005414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005418:	4aa0      	ldr	r2, [pc, #640]	@ (800569c <main+0x1554>)
 800541a:	1898      	adds	r0, r3, r2
 800541c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005420:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005424:	4a9e      	ldr	r2, [pc, #632]	@ (80056a0 <main+0x1558>)
 8005426:	4619      	mov	r1, r3
 8005428:	f005 ff82 	bl	800b330 <sniprintf>
 800542c:	4602      	mov	r2, r0
 800542e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005432:	4413      	add	r3, r2
 8005434:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    }
    data_printed_prev = true;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
#endif

#ifdef PRINT_BMP390_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 800543e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01a      	beq.n	800547c <main+0x1334>
 8005446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800544a:	2b00      	cmp	r3, #0
 800544c:	dd16      	ble.n	800547c <main+0x1334>
 800544e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005456:	d011      	beq.n	800547c <main+0x1334>
 8005458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800545c:	4a8f      	ldr	r2, [pc, #572]	@ (800569c <main+0x1554>)
 800545e:	1898      	adds	r0, r3, r2
 8005460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005464:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005468:	4a8e      	ldr	r2, [pc, #568]	@ (80056a4 <main+0x155c>)
 800546a:	4619      	mov	r1, r3
 800546c:	f005 ff60 	bl	800b330 <sniprintf>
 8005470:	4602      	mov	r2, r0
 8005472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005476:	4413      	add	r3, r2
 8005478:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "B:");
 800547c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005480:	4a86      	ldr	r2, [pc, #536]	@ (800569c <main+0x1554>)
 8005482:	1898      	adds	r0, r3, r2
 8005484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005488:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800548c:	4a86      	ldr	r2, [pc, #536]	@ (80056a8 <main+0x1560>)
 800548e:	4619      	mov	r1, r3
 8005490:	f005 ff4e 	bl	800b330 <sniprintf>
 8005494:	4602      	mov	r2, r0
 8005496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800549a:	4413      	add	r3, r2
 800549c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "P%.0f,Alt%.1f", persistent_bmp_pres_pa, persistent_bmp_alt_m);
 80054a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054a4:	4a7d      	ldr	r2, [pc, #500]	@ (800569c <main+0x1554>)
 80054a6:	189e      	adds	r6, r3, r2
 80054a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054ac:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 80054b0:	4b7e      	ldr	r3, [pc, #504]	@ (80056ac <main+0x1564>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fb f867 	bl	8000588 <__aeabi_f2d>
 80054ba:	4604      	mov	r4, r0
 80054bc:	460d      	mov	r5, r1
 80054be:	4b7c      	ldr	r3, [pc, #496]	@ (80056b0 <main+0x1568>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fb f860 	bl	8000588 <__aeabi_f2d>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054d0:	e9cd 4500 	strd	r4, r5, [sp]
 80054d4:	4a77      	ldr	r2, [pc, #476]	@ (80056b4 <main+0x156c>)
 80054d6:	4641      	mov	r1, r8
 80054d8:	4630      	mov	r0, r6
 80054da:	f005 ff29 	bl	800b330 <sniprintf>
 80054de:	4602      	mov	r2, r0
 80054e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054e4:	4413      	add	r3, r2
 80054e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    data_printed_prev = true;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
#endif

#ifdef PRINT_ADXL375_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 80054f0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01a      	beq.n	800552e <main+0x13e6>
 80054f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	dd16      	ble.n	800552e <main+0x13e6>
 8005500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005508:	d011      	beq.n	800552e <main+0x13e6>
 800550a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800550e:	4a63      	ldr	r2, [pc, #396]	@ (800569c <main+0x1554>)
 8005510:	1898      	adds	r0, r3, r2
 8005512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005516:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800551a:	4a62      	ldr	r2, [pc, #392]	@ (80056a4 <main+0x155c>)
 800551c:	4619      	mov	r1, r3
 800551e:	f005 ff07 	bl	800b330 <sniprintf>
 8005522:	4602      	mov	r2, r0
 8005524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005528:	4413      	add	r3, r2
 800552a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "H:%.1f,%.1f,%.1f", adxl_hi_g_x, adxl_hi_g_y, adxl_hi_g_z);
 800552e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005532:	4a5a      	ldr	r2, [pc, #360]	@ (800569c <main+0x1554>)
 8005534:	189e      	adds	r6, r3, r2
 8005536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800553a:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 800553e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8005542:	f7fb f821 	bl	8000588 <__aeabi_f2d>
 8005546:	4604      	mov	r4, r0
 8005548:	460d      	mov	r5, r1
 800554a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800554e:	f7fb f81b 	bl	8000588 <__aeabi_f2d>
 8005552:	4680      	mov	r8, r0
 8005554:	4689      	mov	r9, r1
 8005556:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800555a:	f7fb f815 	bl	8000588 <__aeabi_f2d>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005566:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800556a:	e9cd 4500 	strd	r4, r5, [sp]
 800556e:	4a52      	ldr	r2, [pc, #328]	@ (80056b8 <main+0x1570>)
 8005570:	4651      	mov	r1, sl
 8005572:	4630      	mov	r0, r6
 8005574:	f005 fedc 	bl	800b330 <sniprintf>
 8005578:	4602      	mov	r2, r0
 800557a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800557e:	4413      	add	r3, r2
 8005580:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    data_printed_prev = true;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
#endif
    
#ifdef PRINT_QUATERNION_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 800558a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01a      	beq.n	80055c8 <main+0x1480>
 8005592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005596:	2b00      	cmp	r3, #0
 8005598:	dd16      	ble.n	80055c8 <main+0x1480>
 800559a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800559e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a2:	d011      	beq.n	80055c8 <main+0x1480>
 80055a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055a8:	4a3c      	ldr	r2, [pc, #240]	@ (800569c <main+0x1554>)
 80055aa:	1898      	adds	r0, r3, r2
 80055ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055b0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80055b4:	4a3b      	ldr	r2, [pc, #236]	@ (80056a4 <main+0x155c>)
 80055b6:	4619      	mov	r1, r3
 80055b8:	f005 feba 	bl	800b330 <sniprintf>
 80055bc:	4602      	mov	r2, r0
 80055be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055c2:	4413      	add	r3, r2
 80055c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "Q:%.2f,%.2f,%.2f,%.2f", q0, q1, q2, q3);
 80055c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055cc:	4a33      	ldr	r2, [pc, #204]	@ (800569c <main+0x1554>)
 80055ce:	189e      	adds	r6, r3, r2
 80055d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055d4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	4b38      	ldr	r3, [pc, #224]	@ (80056bc <main+0x1574>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fa ffd2 	bl	8000588 <__aeabi_f2d>
 80055e4:	4604      	mov	r4, r0
 80055e6:	460d      	mov	r5, r1
 80055e8:	4b35      	ldr	r3, [pc, #212]	@ (80056c0 <main+0x1578>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fa ffcb 	bl	8000588 <__aeabi_f2d>
 80055f2:	4680      	mov	r8, r0
 80055f4:	4689      	mov	r9, r1
 80055f6:	4b33      	ldr	r3, [pc, #204]	@ (80056c4 <main+0x157c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fa ffc4 	bl	8000588 <__aeabi_f2d>
 8005600:	4682      	mov	sl, r0
 8005602:	468b      	mov	fp, r1
 8005604:	4b30      	ldr	r3, [pc, #192]	@ (80056c8 <main+0x1580>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7fa ffbd 	bl	8000588 <__aeabi_f2d>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005616:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800561a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800561e:	e9cd 4500 	strd	r4, r5, [sp]
 8005622:	4a2a      	ldr	r2, [pc, #168]	@ (80056cc <main+0x1584>)
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4630      	mov	r0, r6
 8005628:	f005 fe82 	bl	800b330 <sniprintf>
 800562c:	4602      	mov	r2, r0
 800562e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005632:	4413      	add	r3, r2
 8005634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    data_printed_prev = true;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
#endif

#ifdef PRINT_LOOP_EXEC_TIME
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 800563e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01a      	beq.n	800567c <main+0x1534>
 8005646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800564a:	2b00      	cmp	r3, #0
 800564c:	dd16      	ble.n	800567c <main+0x1534>
 800564e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005656:	d011      	beq.n	800567c <main+0x1534>
 8005658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800565c:	4a0f      	ldr	r2, [pc, #60]	@ (800569c <main+0x1554>)
 800565e:	1898      	adds	r0, r3, r2
 8005660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005664:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005668:	4a0e      	ldr	r2, [pc, #56]	@ (80056a4 <main+0x155c>)
 800566a:	4619      	mov	r1, r3
 800566c:	f005 fe60 	bl	800b330 <sniprintf>
 8005670:	4602      	mov	r2, r0
 8005672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005676:	4413      	add	r3, r2
 8005678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "L:%lums%s",
 800567c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005680:	4a06      	ldr	r2, [pc, #24]	@ (800569c <main+0x1554>)
 8005682:	1898      	adds	r0, r3, r2
 8005684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005688:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 800568c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800568e:	2b09      	cmp	r3, #9
 8005690:	d920      	bls.n	80056d4 <main+0x158c>
                            execution_time_ms,
                            (execution_time_ms >= TARGET_LOOP_PERIOD_MS && execution_time_ms != 0) ? " OV!" : "");
 8005692:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01d      	beq.n	80056d4 <main+0x158c>
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "L:%lums%s",
 8005698:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <main+0x1588>)
 800569a:	e01c      	b.n	80056d6 <main+0x158e>
 800569c:	20000c58 	.word	0x20000c58
 80056a0:	080103fc 	.word	0x080103fc
 80056a4:	080103e4 	.word	0x080103e4
 80056a8:	0801040c 	.word	0x0801040c
 80056ac:	20000d70 	.word	0x20000d70
 80056b0:	20000d74 	.word	0x20000d74
 80056b4:	08010410 	.word	0x08010410
 80056b8:	08010420 	.word	0x08010420
 80056bc:	20000004 	.word	0x20000004
 80056c0:	2000033c 	.word	0x2000033c
 80056c4:	20000340 	.word	0x20000340
 80056c8:	20000344 	.word	0x20000344
 80056cc:	08010434 	.word	0x08010434
 80056d0:	0801044c 	.word	0x0801044c
 80056d4:	4b54      	ldr	r3, [pc, #336]	@ (8005828 <main+0x16e0>)
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056da:	4a54      	ldr	r2, [pc, #336]	@ (800582c <main+0x16e4>)
 80056dc:	f005 fe28 	bl	800b330 <sniprintf>
 80056e0:	4602      	mov	r2, r0
 80056e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056e6:	4413      	add	r3, r2
 80056e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    data_printed_prev = true; // Though this is last, set it for consistency
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
#endif

#ifdef PRINT_KALMAN_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 80056f2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01a      	beq.n	8005730 <main+0x15e8>
 80056fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dd16      	ble.n	8005730 <main+0x15e8>
 8005702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570a:	d011      	beq.n	8005730 <main+0x15e8>
 800570c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005710:	4a47      	ldr	r2, [pc, #284]	@ (8005830 <main+0x16e8>)
 8005712:	1898      	adds	r0, r3, r2
 8005714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005718:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800571c:	4a45      	ldr	r2, [pc, #276]	@ (8005834 <main+0x16ec>)
 800571e:	4619      	mov	r1, r3
 8005720:	f005 fe06 	bl	800b330 <sniprintf>
 8005724:	4602      	mov	r2, r0
 8005726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800572a:	4413      	add	r3, r2
 800572c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "KF:Alt%.2f,Vel%.2f", kf_altitude_velocity.altitude_m, kf_altitude_velocity.vertical_velocity_mps);
 8005730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005734:	4a3e      	ldr	r2, [pc, #248]	@ (8005830 <main+0x16e8>)
 8005736:	189e      	adds	r6, r3, r2
 8005738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800573c:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8005740:	4b3d      	ldr	r3, [pc, #244]	@ (8005838 <main+0x16f0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7fa ff1f 	bl	8000588 <__aeabi_f2d>
 800574a:	4604      	mov	r4, r0
 800574c:	460d      	mov	r5, r1
 800574e:	4b3a      	ldr	r3, [pc, #232]	@ (8005838 <main+0x16f0>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fa ff18 	bl	8000588 <__aeabi_f2d>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005760:	e9cd 4500 	strd	r4, r5, [sp]
 8005764:	4a35      	ldr	r2, [pc, #212]	@ (800583c <main+0x16f4>)
 8005766:	4641      	mov	r1, r8
 8005768:	4630      	mov	r0, r6
 800576a:	f005 fde1 	bl	800b330 <sniprintf>
 800576e:	4602      	mov	r2, r0
 8005770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005774:	4413      	add	r3, r2
 8005776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    data_printed_prev = true;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
#endif

    // Add newline if any data was printed
    if (current_len > 0) {
 8005780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005784:	2b00      	cmp	r3, #0
 8005786:	dd11      	ble.n	80057ac <main+0x1664>
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "\r\n");
 8005788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800578c:	4a28      	ldr	r2, [pc, #160]	@ (8005830 <main+0x16e8>)
 800578e:	1898      	adds	r0, r3, r2
 8005790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005794:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005798:	4a29      	ldr	r2, [pc, #164]	@ (8005840 <main+0x16f8>)
 800579a:	4619      	mov	r1, r3
 800579c:	f005 fdc8 	bl	800b330 <sniprintf>
 80057a0:	4602      	mov	r2, r0
 80057a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057a6:	4413      	add	r3, r2
 80057a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    }

    if (current_len > 0 && (size_t)current_len < sizeof(uart_buffer)) { // Check if anything was written and buffer not overflowed by snprintf
 80057ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	dd0d      	ble.n	80057d0 <main+0x1688>
 80057b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057b8:	2bff      	cmp	r3, #255	@ 0xff
 80057ba:	d809      	bhi.n	80057d0 <main+0x1688>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, current_len, HAL_MAX_DELAY);
 80057bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	f04f 33ff 	mov.w	r3, #4294967295
 80057c6:	491a      	ldr	r1, [pc, #104]	@ (8005830 <main+0x16e8>)
 80057c8:	481e      	ldr	r0, [pc, #120]	@ (8005844 <main+0x16fc>)
 80057ca:	f003 fedd 	bl	8009588 <HAL_UART_Transmit>
 80057ce:	e01e      	b.n	800580e <main+0x16c6>
    } else if ((size_t)current_len >= sizeof(uart_buffer)) {
 80057d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057d4:	2bff      	cmp	r3, #255	@ 0xff
 80057d6:	d91a      	bls.n	800580e <main+0x16c6>
        // Handle potential truncation / error in string formatting if buffer was too small
        char err_msg[] = "UART buffer overflow!\r\n";
 80057d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80057e0:	4a19      	ldr	r2, [pc, #100]	@ (8005848 <main+0x1700>)
 80057e2:	461c      	mov	r4, r3
 80057e4:	4615      	mov	r5, r2
 80057e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80057ee:	e884 0003 	stmia.w	r4, {r0, r1}
        HAL_UART_Transmit(&huart3, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 80057f2:	f107 030c 	add.w	r3, r7, #12
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fa fd5a 	bl	80002b0 <strlen>
 80057fc:	4603      	mov	r3, r0
 80057fe:	b29a      	uxth	r2, r3
 8005800:	f107 010c 	add.w	r1, r7, #12
 8005804:	f04f 33ff 	mov.w	r3, #4294967295
 8005808:	480e      	ldr	r0, [pc, #56]	@ (8005844 <main+0x16fc>)
 800580a:	f003 febd 	bl	8009588 <HAL_UART_Transmit>
    }


    if (execution_time_ms < TARGET_LOOP_PERIOD_MS) {
 800580e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005810:	2b09      	cmp	r3, #9
 8005812:	f63f aacd 	bhi.w	8004db0 <main+0xc68>
      uint32_t delay_ms = TARGET_LOOP_PERIOD_MS - execution_time_ms;
 8005816:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005818:	f1c3 030a 	rsb	r3, r3, #10
 800581c:	677b      	str	r3, [r7, #116]	@ 0x74
      HAL_Delay(delay_ms);
 800581e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8005820:	f000 fdce 	bl	80063c0 <HAL_Delay>
  {
 8005824:	f7ff bac4 	b.w	8004db0 <main+0xc68>
 8005828:	08010454 	.word	0x08010454
 800582c:	08010458 	.word	0x08010458
 8005830:	20000c58 	.word	0x20000c58
 8005834:	080103e4 	.word	0x080103e4
 8005838:	20000d78 	.word	0x20000d78
 800583c:	08010464 	.word	0x08010464
 8005840:	08010478 	.word	0x08010478
 8005844:	2000048c 	.word	0x2000048c
 8005848:	0801047c 	.word	0x0801047c

0800584c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b094      	sub	sp, #80	@ 0x50
 8005850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005852:	f107 0320 	add.w	r3, r7, #32
 8005856:	2230      	movs	r2, #48	@ 0x30
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f005 fe40 	bl	800b4e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005860:	f107 030c 	add.w	r3, r7, #12
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	60da      	str	r2, [r3, #12]
 800586e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005870:	f002 fd72 	bl	8008358 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005874:	4b27      	ldr	r3, [pc, #156]	@ (8005914 <SystemClock_Config+0xc8>)
 8005876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005878:	4a26      	ldr	r2, [pc, #152]	@ (8005914 <SystemClock_Config+0xc8>)
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800587e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005880:	4b24      	ldr	r3, [pc, #144]	@ (8005914 <SystemClock_Config+0xc8>)
 8005882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800588c:	4b22      	ldr	r3, [pc, #136]	@ (8005918 <SystemClock_Config+0xcc>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005894:	4a20      	ldr	r2, [pc, #128]	@ (8005918 <SystemClock_Config+0xcc>)
 8005896:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	4b1e      	ldr	r3, [pc, #120]	@ (8005918 <SystemClock_Config+0xcc>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80058ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058b2:	2302      	movs	r3, #2
 80058b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80058bc:	2304      	movs	r3, #4
 80058be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80058c0:	2348      	movs	r3, #72	@ 0x48
 80058c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058c4:	2302      	movs	r3, #2
 80058c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80058c8:	2303      	movs	r3, #3
 80058ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058cc:	f107 0320 	add.w	r3, r7, #32
 80058d0:	4618      	mov	r0, r3
 80058d2:	f002 fd51 	bl	8008378 <HAL_RCC_OscConfig>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80058dc:	f000 f9c6 	bl	8005c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058e0:	230f      	movs	r3, #15
 80058e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058e4:	2302      	movs	r3, #2
 80058e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80058ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80058f6:	f107 030c 	add.w	r3, r7, #12
 80058fa:	2102      	movs	r1, #2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f002 ffdf 	bl	80088c0 <HAL_RCC_ClockConfig>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005908:	f000 f9b0 	bl	8005c6c <Error_Handler>
  }
}
 800590c:	bf00      	nop
 800590e:	3750      	adds	r7, #80	@ 0x50
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40023800 	.word	0x40023800
 8005918:	40007000 	.word	0x40007000

0800591c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8005920:	4b1f      	ldr	r3, [pc, #124]	@ (80059a0 <MX_ETH_Init+0x84>)
 8005922:	4a20      	ldr	r2, [pc, #128]	@ (80059a4 <MX_ETH_Init+0x88>)
 8005924:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005926:	4b20      	ldr	r3, [pc, #128]	@ (80059a8 <MX_ETH_Init+0x8c>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800592c:	4b1e      	ldr	r3, [pc, #120]	@ (80059a8 <MX_ETH_Init+0x8c>)
 800592e:	2280      	movs	r2, #128	@ 0x80
 8005930:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8005932:	4b1d      	ldr	r3, [pc, #116]	@ (80059a8 <MX_ETH_Init+0x8c>)
 8005934:	22e1      	movs	r2, #225	@ 0xe1
 8005936:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8005938:	4b1b      	ldr	r3, [pc, #108]	@ (80059a8 <MX_ETH_Init+0x8c>)
 800593a:	2200      	movs	r2, #0
 800593c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800593e:	4b1a      	ldr	r3, [pc, #104]	@ (80059a8 <MX_ETH_Init+0x8c>)
 8005940:	2200      	movs	r2, #0
 8005942:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8005944:	4b18      	ldr	r3, [pc, #96]	@ (80059a8 <MX_ETH_Init+0x8c>)
 8005946:	2200      	movs	r2, #0
 8005948:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800594a:	4b15      	ldr	r3, [pc, #84]	@ (80059a0 <MX_ETH_Init+0x84>)
 800594c:	4a16      	ldr	r2, [pc, #88]	@ (80059a8 <MX_ETH_Init+0x8c>)
 800594e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005950:	4b13      	ldr	r3, [pc, #76]	@ (80059a0 <MX_ETH_Init+0x84>)
 8005952:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005956:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005958:	4b11      	ldr	r3, [pc, #68]	@ (80059a0 <MX_ETH_Init+0x84>)
 800595a:	4a14      	ldr	r2, [pc, #80]	@ (80059ac <MX_ETH_Init+0x90>)
 800595c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800595e:	4b10      	ldr	r3, [pc, #64]	@ (80059a0 <MX_ETH_Init+0x84>)
 8005960:	4a13      	ldr	r2, [pc, #76]	@ (80059b0 <MX_ETH_Init+0x94>)
 8005962:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8005964:	4b0e      	ldr	r3, [pc, #56]	@ (80059a0 <MX_ETH_Init+0x84>)
 8005966:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800596a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800596c:	480c      	ldr	r0, [pc, #48]	@ (80059a0 <MX_ETH_Init+0x84>)
 800596e:	f000 fe31 	bl	80065d4 <HAL_ETH_Init>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8005978:	f000 f978 	bl	8005c6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800597c:	2238      	movs	r2, #56	@ 0x38
 800597e:	2100      	movs	r1, #0
 8005980:	480c      	ldr	r0, [pc, #48]	@ (80059b4 <MX_ETH_Init+0x98>)
 8005982:	f005 fdad 	bl	800b4e0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005986:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <MX_ETH_Init+0x98>)
 8005988:	2221      	movs	r2, #33	@ 0x21
 800598a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800598c:	4b09      	ldr	r3, [pc, #36]	@ (80059b4 <MX_ETH_Init+0x98>)
 800598e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005992:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005994:	4b07      	ldr	r3, [pc, #28]	@ (80059b4 <MX_ETH_Init+0x98>)
 8005996:	2200      	movs	r2, #0
 8005998:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800599a:	bf00      	nop
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000388 	.word	0x20000388
 80059a4:	40028000 	.word	0x40028000
 80059a8:	20000d9c 	.word	0x20000d9c
 80059ac:	20000280 	.word	0x20000280
 80059b0:	200001e0 	.word	0x200001e0
 80059b4:	20000350 	.word	0x20000350

080059b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80059bc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059be:	4a1c      	ldr	r2, [pc, #112]	@ (8005a30 <MX_I2C1_Init+0x78>)
 80059c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80059c2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a34 <MX_I2C1_Init+0x7c>)
 80059c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80059c8:	4b18      	ldr	r3, [pc, #96]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80059ce:	4b17      	ldr	r3, [pc, #92]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80059d4:	4b15      	ldr	r3, [pc, #84]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80059da:	4b14      	ldr	r3, [pc, #80]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059dc:	2200      	movs	r2, #0
 80059de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80059e0:	4b12      	ldr	r3, [pc, #72]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059e6:	4b11      	ldr	r3, [pc, #68]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059ec:	4b0f      	ldr	r3, [pc, #60]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80059f2:	480e      	ldr	r0, [pc, #56]	@ (8005a2c <MX_I2C1_Init+0x74>)
 80059f4:	f001 fb34 	bl	8007060 <HAL_I2C_Init>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80059fe:	f000 f935 	bl	8005c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a02:	2100      	movs	r1, #0
 8005a04:	4809      	ldr	r0, [pc, #36]	@ (8005a2c <MX_I2C1_Init+0x74>)
 8005a06:	f002 fad5 	bl	8007fb4 <HAL_I2CEx_ConfigAnalogFilter>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005a10:	f000 f92c 	bl	8005c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005a14:	2100      	movs	r1, #0
 8005a16:	4805      	ldr	r0, [pc, #20]	@ (8005a2c <MX_I2C1_Init+0x74>)
 8005a18:	f002 fb17 	bl	800804a <HAL_I2CEx_ConfigDigitalFilter>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005a22:	f000 f923 	bl	8005c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005a26:	bf00      	nop
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000438 	.word	0x20000438
 8005a30:	40005400 	.word	0x40005400
 8005a34:	00808cd2 	.word	0x00808cd2

08005a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a3c:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a3e:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <MX_USART3_UART_Init+0x5c>)
 8005a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005a42:	4b13      	ldr	r3, [pc, #76]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a4a:	4b11      	ldr	r3, [pc, #68]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a50:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a56:	4b0e      	ldr	r3, [pc, #56]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a5e:	220c      	movs	r2, #12
 8005a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a62:	4b0b      	ldr	r3, [pc, #44]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a68:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a6e:	4b08      	ldr	r3, [pc, #32]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a74:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a7a:	4805      	ldr	r0, [pc, #20]	@ (8005a90 <MX_USART3_UART_Init+0x58>)
 8005a7c:	f003 fd36 	bl	80094ec <HAL_UART_Init>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005a86:	f000 f8f1 	bl	8005c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	2000048c 	.word	0x2000048c
 8005a94:	40004800 	.word	0x40004800

08005a98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005a9c:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005a9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005aa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005aa4:	4b12      	ldr	r3, [pc, #72]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005aa6:	2206      	movs	r2, #6
 8005aa8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005aaa:	4b11      	ldr	r3, [pc, #68]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005aac:	2202      	movs	r2, #2
 8005aae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ab8:	2202      	movs	r2, #2
 8005aba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005abc:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005ac8:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005ace:	4b08      	ldr	r3, [pc, #32]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005ad4:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005ada:	4805      	ldr	r0, [pc, #20]	@ (8005af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005adc:	f002 fb01 	bl	80080e2 <HAL_PCD_Init>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005ae6:	f000 f8c1 	bl	8005c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000514 	.word	0x20000514

08005af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08c      	sub	sp, #48	@ 0x30
 8005af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005afa:	f107 031c 	add.w	r3, r7, #28
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b0a:	4b53      	ldr	r3, [pc, #332]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0e:	4a52      	ldr	r2, [pc, #328]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b16:	4b50      	ldr	r3, [pc, #320]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b22:	4b4d      	ldr	r3, [pc, #308]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b26:	4a4c      	ldr	r2, [pc, #304]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b3a:	4b47      	ldr	r3, [pc, #284]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3e:	4a46      	ldr	r2, [pc, #280]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b40:	f043 0301 	orr.w	r3, r3, #1
 8005b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b46:	4b44      	ldr	r3, [pc, #272]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b52:	4b41      	ldr	r3, [pc, #260]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b56:	4a40      	ldr	r2, [pc, #256]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b58:	f043 0302 	orr.w	r3, r3, #2
 8005b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE(); /* Added for PF12 */
 8005b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6e:	4a3a      	ldr	r2, [pc, #232]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b70:	f043 0320 	orr.w	r3, r3, #32
 8005b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b76:	4b38      	ldr	r3, [pc, #224]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b82:	4b35      	ldr	r3, [pc, #212]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	4a34      	ldr	r2, [pc, #208]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b88:	f043 0308 	orr.w	r3, r3, #8
 8005b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b8e:	4b32      	ldr	r3, [pc, #200]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8005c58 <MX_GPIO_Init+0x164>)
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8005bb8:	4828      	ldr	r0, [pc, #160]	@ (8005c5c <MX_GPIO_Init+0x168>)
 8005bba:	f001 fa1d 	bl	8006ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2140      	movs	r1, #64	@ 0x40
 8005bc2:	4827      	ldr	r0, [pc, #156]	@ (8005c60 <MX_GPIO_Init+0x16c>)
 8005bc4:	f001 fa18 	bl	8006ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005bc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005bce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005bd8:	f107 031c 	add.w	r3, r7, #28
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4821      	ldr	r0, [pc, #132]	@ (8005c64 <MX_GPIO_Init+0x170>)
 8005be0:	f001 f846 	bl	8006c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005be4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8005be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bea:	2301      	movs	r3, #1
 8005bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf6:	f107 031c 	add.w	r3, r7, #28
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4817      	ldr	r0, [pc, #92]	@ (8005c5c <MX_GPIO_Init+0x168>)
 8005bfe:	f001 f837 	bl	8006c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005c02:	2340      	movs	r3, #64	@ 0x40
 8005c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c06:	2301      	movs	r3, #1
 8005c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005c12:	f107 031c 	add.w	r3, r7, #28
 8005c16:	4619      	mov	r1, r3
 8005c18:	4811      	ldr	r0, [pc, #68]	@ (8005c60 <MX_GPIO_Init+0x16c>)
 8005c1a:	f001 f829 	bl	8006c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005c1e:	2380      	movs	r3, #128	@ 0x80
 8005c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c22:	2300      	movs	r3, #0
 8005c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005c2a:	f107 031c 	add.w	r3, r7, #28
 8005c2e:	4619      	mov	r1, r3
 8005c30:	480b      	ldr	r0, [pc, #44]	@ (8005c60 <MX_GPIO_Init+0x16c>)
 8005c32:	f001 f81d 	bl	8006c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c40:	2301      	movs	r3, #1
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c44:	f107 031c 	add.w	r3, r7, #28
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4807      	ldr	r0, [pc, #28]	@ (8005c68 <MX_GPIO_Init+0x174>)
 8005c4c:	f001 f810 	bl	8006c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005c50:	bf00      	nop
 8005c52:	3730      	adds	r7, #48	@ 0x30
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	40020400 	.word	0x40020400
 8005c60:	40021800 	.word	0x40021800
 8005c64:	40020800 	.word	0x40020800
 8005c68:	40021400 	.word	0x40021400

08005c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c70:	b672      	cpsid	i
}
 8005c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <Error_Handler+0x8>

08005c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005cbc <HAL_MspInit+0x44>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	4a0e      	ldr	r2, [pc, #56]	@ (8005cbc <HAL_MspInit+0x44>)
 8005c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005cbc <HAL_MspInit+0x44>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	607b      	str	r3, [r7, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c96:	4b09      	ldr	r3, [pc, #36]	@ (8005cbc <HAL_MspInit+0x44>)
 8005c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9a:	4a08      	ldr	r2, [pc, #32]	@ (8005cbc <HAL_MspInit+0x44>)
 8005c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ca2:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <HAL_MspInit+0x44>)
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40023800 	.word	0x40023800

08005cc0 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08e      	sub	sp, #56	@ 0x38
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	60da      	str	r2, [r3, #12]
 8005cd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8005e18 <HAL_ETH_MspInit+0x158>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	f040 8096 	bne.w	8005e10 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce8:	4a4c      	ldr	r2, [pc, #304]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005cea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf8:	623b      	str	r3, [r7, #32]
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	4b47      	ldr	r3, [pc, #284]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d00:	4a46      	ldr	r2, [pc, #280]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d08:	4b44      	ldr	r3, [pc, #272]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4b41      	ldr	r3, [pc, #260]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d18:	4a40      	ldr	r2, [pc, #256]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d20:	4b3e      	ldr	r3, [pc, #248]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d30:	4a3a      	ldr	r2, [pc, #232]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d32:	f043 0304 	orr.w	r3, r3, #4
 8005d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d38:	4b38      	ldr	r3, [pc, #224]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d44:	4b35      	ldr	r3, [pc, #212]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d48:	4a34      	ldr	r2, [pc, #208]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d50:	4b32      	ldr	r3, [pc, #200]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	4a2e      	ldr	r2, [pc, #184]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d62:	f043 0302 	orr.w	r3, r3, #2
 8005d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d68:	4b2c      	ldr	r3, [pc, #176]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005d74:	4b29      	ldr	r3, [pc, #164]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d78:	4a28      	ldr	r2, [pc, #160]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d80:	4b26      	ldr	r3, [pc, #152]	@ (8005e1c <HAL_ETH_MspInit+0x15c>)
 8005d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005d8c:	2332      	movs	r3, #50	@ 0x32
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d90:	2302      	movs	r3, #2
 8005d92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d9c:	230b      	movs	r3, #11
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005da4:	4619      	mov	r1, r3
 8005da6:	481e      	ldr	r0, [pc, #120]	@ (8005e20 <HAL_ETH_MspInit+0x160>)
 8005da8:	f000 ff62 	bl	8006c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005dac:	2386      	movs	r3, #134	@ 0x86
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db0:	2302      	movs	r3, #2
 8005db2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db8:	2303      	movs	r3, #3
 8005dba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005dbc:	230b      	movs	r3, #11
 8005dbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4817      	ldr	r0, [pc, #92]	@ (8005e24 <HAL_ETH_MspInit+0x164>)
 8005dc8:	f000 ff52 	bl	8006c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005dcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005dde:	230b      	movs	r3, #11
 8005de0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005de6:	4619      	mov	r1, r3
 8005de8:	480f      	ldr	r0, [pc, #60]	@ (8005e28 <HAL_ETH_MspInit+0x168>)
 8005dea:	f000 ff41 	bl	8006c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005dee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df4:	2302      	movs	r3, #2
 8005df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e00:	230b      	movs	r3, #11
 8005e02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4808      	ldr	r0, [pc, #32]	@ (8005e2c <HAL_ETH_MspInit+0x16c>)
 8005e0c:	f000 ff30 	bl	8006c70 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8005e10:	bf00      	nop
 8005e12:	3738      	adds	r7, #56	@ 0x38
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40028000 	.word	0x40028000
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40020800 	.word	0x40020800
 8005e24:	40020000 	.word	0x40020000
 8005e28:	40020400 	.word	0x40020400
 8005e2c:	40021800 	.word	0x40021800

08005e30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b0aa      	sub	sp, #168	@ 0xa8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e38:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e48:	f107 0310 	add.w	r3, r7, #16
 8005e4c:	2284      	movs	r2, #132	@ 0x84
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f005 fb45 	bl	800b4e0 <memset>
  if(hi2c->Instance==I2C1)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a22      	ldr	r2, [pc, #136]	@ (8005ee4 <HAL_I2C_MspInit+0xb4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d13c      	bne.n	8005eda <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005e60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005e64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005e66:	2300      	movs	r3, #0
 8005e68:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e6a:	f107 0310 	add.w	r3, r7, #16
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f002 ff4c 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005e7a:	f7ff fef7 	bl	8005c6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee8 <HAL_I2C_MspInit+0xb8>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	4a19      	ldr	r2, [pc, #100]	@ (8005ee8 <HAL_I2C_MspInit+0xb8>)
 8005e84:	f043 0302 	orr.w	r3, r3, #2
 8005e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e8a:	4b17      	ldr	r3, [pc, #92]	@ (8005ee8 <HAL_I2C_MspInit+0xb8>)
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e9e:	2312      	movs	r3, #18
 8005ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eb6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005eba:	4619      	mov	r1, r3
 8005ebc:	480b      	ldr	r0, [pc, #44]	@ (8005eec <HAL_I2C_MspInit+0xbc>)
 8005ebe:	f000 fed7 	bl	8006c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ec2:	4b09      	ldr	r3, [pc, #36]	@ (8005ee8 <HAL_I2C_MspInit+0xb8>)
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	4a08      	ldr	r2, [pc, #32]	@ (8005ee8 <HAL_I2C_MspInit+0xb8>)
 8005ec8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ece:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <HAL_I2C_MspInit+0xb8>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ed6:	60bb      	str	r3, [r7, #8]
 8005ed8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005eda:	bf00      	nop
 8005edc:	37a8      	adds	r7, #168	@ 0xa8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40005400 	.word	0x40005400
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	40020400 	.word	0x40020400

08005ef0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b0aa      	sub	sp, #168	@ 0xa8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	609a      	str	r2, [r3, #8]
 8005f04:	60da      	str	r2, [r3, #12]
 8005f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f08:	f107 0310 	add.w	r3, r7, #16
 8005f0c:	2284      	movs	r2, #132	@ 0x84
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f005 fae5 	bl	800b4e0 <memset>
  if(huart->Instance==USART3)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a22      	ldr	r2, [pc, #136]	@ (8005fa4 <HAL_UART_MspInit+0xb4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d13c      	bne.n	8005f9a <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005f26:	2300      	movs	r3, #0
 8005f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f2a:	f107 0310 	add.w	r3, r7, #16
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f002 feec 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005f3a:	f7ff fe97 	bl	8005c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa8 <HAL_UART_MspInit+0xb8>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	4a19      	ldr	r2, [pc, #100]	@ (8005fa8 <HAL_UART_MspInit+0xb8>)
 8005f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f4a:	4b17      	ldr	r3, [pc, #92]	@ (8005fa8 <HAL_UART_MspInit+0xb8>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f56:	4b14      	ldr	r3, [pc, #80]	@ (8005fa8 <HAL_UART_MspInit+0xb8>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	4a13      	ldr	r2, [pc, #76]	@ (8005fa8 <HAL_UART_MspInit+0xb8>)
 8005f5c:	f043 0308 	orr.w	r3, r3, #8
 8005f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f62:	4b11      	ldr	r3, [pc, #68]	@ (8005fa8 <HAL_UART_MspInit+0xb8>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005f6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f76:	2302      	movs	r3, #2
 8005f78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f82:	2303      	movs	r3, #3
 8005f84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005f88:	2307      	movs	r3, #7
 8005f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f8e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005f92:	4619      	mov	r1, r3
 8005f94:	4805      	ldr	r0, [pc, #20]	@ (8005fac <HAL_UART_MspInit+0xbc>)
 8005f96:	f000 fe6b 	bl	8006c70 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8005f9a:	bf00      	nop
 8005f9c:	37a8      	adds	r7, #168	@ 0xa8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40004800 	.word	0x40004800
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	40020c00 	.word	0x40020c00

08005fb0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b0ac      	sub	sp, #176	@ 0xb0
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	609a      	str	r2, [r3, #8]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fc8:	f107 0318 	add.w	r3, r7, #24
 8005fcc:	2284      	movs	r2, #132	@ 0x84
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f005 fa85 	bl	800b4e0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fde:	d159      	bne.n	8006094 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8005fe0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005fe4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fec:	f107 0318 	add.w	r3, r7, #24
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f002 fe8b 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8005ffc:	f7ff fe36 	bl	8005c6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006000:	4b26      	ldr	r3, [pc, #152]	@ (800609c <HAL_PCD_MspInit+0xec>)
 8006002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006004:	4a25      	ldr	r2, [pc, #148]	@ (800609c <HAL_PCD_MspInit+0xec>)
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	6313      	str	r3, [r2, #48]	@ 0x30
 800600c:	4b23      	ldr	r3, [pc, #140]	@ (800609c <HAL_PCD_MspInit+0xec>)
 800600e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006018:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800601c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006020:	2302      	movs	r3, #2
 8006022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006026:	2300      	movs	r3, #0
 8006028:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800602c:	2303      	movs	r3, #3
 800602e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006032:	230a      	movs	r3, #10
 8006034:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006038:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800603c:	4619      	mov	r1, r3
 800603e:	4818      	ldr	r0, [pc, #96]	@ (80060a0 <HAL_PCD_MspInit+0xf0>)
 8006040:	f000 fe16 	bl	8006c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006052:	2300      	movs	r3, #0
 8006054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006058:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800605c:	4619      	mov	r1, r3
 800605e:	4810      	ldr	r0, [pc, #64]	@ (80060a0 <HAL_PCD_MspInit+0xf0>)
 8006060:	f000 fe06 	bl	8006c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006064:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <HAL_PCD_MspInit+0xec>)
 8006066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006068:	4a0c      	ldr	r2, [pc, #48]	@ (800609c <HAL_PCD_MspInit+0xec>)
 800606a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800606e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006070:	4b0a      	ldr	r3, [pc, #40]	@ (800609c <HAL_PCD_MspInit+0xec>)
 8006072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4b07      	ldr	r3, [pc, #28]	@ (800609c <HAL_PCD_MspInit+0xec>)
 800607e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006080:	4a06      	ldr	r2, [pc, #24]	@ (800609c <HAL_PCD_MspInit+0xec>)
 8006082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006086:	6453      	str	r3, [r2, #68]	@ 0x44
 8006088:	4b04      	ldr	r3, [pc, #16]	@ (800609c <HAL_PCD_MspInit+0xec>)
 800608a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8006094:	bf00      	nop
 8006096:	37b0      	adds	r7, #176	@ 0xb0
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40023800 	.word	0x40023800
 80060a0:	40020000 	.word	0x40020000

080060a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80060a8:	bf00      	nop
 80060aa:	e7fd      	b.n	80060a8 <NMI_Handler+0x4>

080060ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <HardFault_Handler+0x4>

080060b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060b8:	bf00      	nop
 80060ba:	e7fd      	b.n	80060b8 <MemManage_Handler+0x4>

080060bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060c0:	bf00      	nop
 80060c2:	e7fd      	b.n	80060c0 <BusFault_Handler+0x4>

080060c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060c8:	bf00      	nop
 80060ca:	e7fd      	b.n	80060c8 <UsageFault_Handler+0x4>

080060cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060d0:	bf00      	nop
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060da:	b480      	push	{r7}
 80060dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060ec:	bf00      	nop
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060fa:	f000 f941 	bl	8006380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060fe:	bf00      	nop
 8006100:	bd80      	pop	{r7, pc}

08006102 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0
  return 1;
 8006106:	2301      	movs	r3, #1
}
 8006108:	4618      	mov	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <_kill>:

int _kill(int pid, int sig)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800611c:	f005 fa32 	bl	800b584 <__errno>
 8006120:	4603      	mov	r3, r0
 8006122:	2216      	movs	r2, #22
 8006124:	601a      	str	r2, [r3, #0]
  return -1;
 8006126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <_exit>:

void _exit (int status)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800613a:	f04f 31ff 	mov.w	r1, #4294967295
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff ffe7 	bl	8006112 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006144:	bf00      	nop
 8006146:	e7fd      	b.n	8006144 <_exit+0x12>

08006148 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e00a      	b.n	8006170 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800615a:	f3af 8000 	nop.w
 800615e:	4601      	mov	r1, r0
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	60ba      	str	r2, [r7, #8]
 8006166:	b2ca      	uxtb	r2, r1
 8006168:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	3301      	adds	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	dbf0      	blt.n	800615a <_read+0x12>
  }

  return len;
 8006178:	687b      	ldr	r3, [r7, #4]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b086      	sub	sp, #24
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	e009      	b.n	80061a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	60ba      	str	r2, [r7, #8]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	3301      	adds	r3, #1
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	dbf1      	blt.n	8006194 <_write+0x12>
  }
  return len;
 80061b0:	687b      	ldr	r3, [r7, #4]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <_close>:

int _close(int file)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80061c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80061e2:	605a      	str	r2, [r3, #4]
  return 0;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <_isatty>:

int _isatty(int file)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80061fa:	2301      	movs	r3, #1
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800622c:	4a14      	ldr	r2, [pc, #80]	@ (8006280 <_sbrk+0x5c>)
 800622e:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <_sbrk+0x60>)
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006238:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <_sbrk+0x64>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d102      	bne.n	8006246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006240:	4b11      	ldr	r3, [pc, #68]	@ (8006288 <_sbrk+0x64>)
 8006242:	4a12      	ldr	r2, [pc, #72]	@ (800628c <_sbrk+0x68>)
 8006244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006246:	4b10      	ldr	r3, [pc, #64]	@ (8006288 <_sbrk+0x64>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4413      	add	r3, r2
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	429a      	cmp	r2, r3
 8006252:	d207      	bcs.n	8006264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006254:	f005 f996 	bl	800b584 <__errno>
 8006258:	4603      	mov	r3, r0
 800625a:	220c      	movs	r2, #12
 800625c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	e009      	b.n	8006278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006264:	4b08      	ldr	r3, [pc, #32]	@ (8006288 <_sbrk+0x64>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800626a:	4b07      	ldr	r3, [pc, #28]	@ (8006288 <_sbrk+0x64>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4413      	add	r3, r2
 8006272:	4a05      	ldr	r2, [pc, #20]	@ (8006288 <_sbrk+0x64>)
 8006274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006276:	68fb      	ldr	r3, [r7, #12]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20050000 	.word	0x20050000
 8006284:	00000400 	.word	0x00000400
 8006288:	20000da4 	.word	0x20000da4
 800628c:	20000ef8 	.word	0x20000ef8

08006290 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006294:	4b06      	ldr	r3, [pc, #24]	@ (80062b0 <SystemInit+0x20>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629a:	4a05      	ldr	r2, [pc, #20]	@ (80062b0 <SystemInit+0x20>)
 800629c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80062a4:	bf00      	nop
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	e000ed00 	.word	0xe000ed00

080062b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80062b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80062ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80062b8:	f7ff ffea 	bl	8006290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80062bc:	480c      	ldr	r0, [pc, #48]	@ (80062f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80062be:	490d      	ldr	r1, [pc, #52]	@ (80062f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80062c0:	4a0d      	ldr	r2, [pc, #52]	@ (80062f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80062c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062c4:	e002      	b.n	80062cc <LoopCopyDataInit>

080062c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062ca:	3304      	adds	r3, #4

080062cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062d0:	d3f9      	bcc.n	80062c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062d2:	4a0a      	ldr	r2, [pc, #40]	@ (80062fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80062d4:	4c0a      	ldr	r4, [pc, #40]	@ (8006300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80062d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062d8:	e001      	b.n	80062de <LoopFillZerobss>

080062da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062dc:	3204      	adds	r2, #4

080062de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062e0:	d3fb      	bcc.n	80062da <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80062e2:	f005 f955 	bl	800b590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062e6:	f7fd ff2f 	bl	8004148 <main>
  bx  lr    
 80062ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80062ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80062f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80062f8:	080108fc 	.word	0x080108fc
  ldr r2, =_sbss
 80062fc:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8006300:	20000ef8 	.word	0x20000ef8

08006304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006304:	e7fe      	b.n	8006304 <ADC_IRQHandler>

08006306 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800630a:	2003      	movs	r0, #3
 800630c:	f000 f92e 	bl	800656c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006310:	2000      	movs	r0, #0
 8006312:	f000 f805 	bl	8006320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006316:	f7ff fcaf 	bl	8005c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006328:	4b12      	ldr	r3, [pc, #72]	@ (8006374 <HAL_InitTick+0x54>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b12      	ldr	r3, [pc, #72]	@ (8006378 <HAL_InitTick+0x58>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	4619      	mov	r1, r3
 8006332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006336:	fbb3 f3f1 	udiv	r3, r3, r1
 800633a:	fbb2 f3f3 	udiv	r3, r2, r3
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f93b 	bl	80065ba <HAL_SYSTICK_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e00e      	b.n	800636c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b0f      	cmp	r3, #15
 8006352:	d80a      	bhi.n	800636a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006354:	2200      	movs	r2, #0
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	f000 f911 	bl	8006582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006360:	4a06      	ldr	r2, [pc, #24]	@ (800637c <HAL_InitTick+0x5c>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	e000      	b.n	800636c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	2000000c 	.word	0x2000000c
 8006378:	20000014 	.word	0x20000014
 800637c:	20000010 	.word	0x20000010

08006380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006384:	4b06      	ldr	r3, [pc, #24]	@ (80063a0 <HAL_IncTick+0x20>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <HAL_IncTick+0x24>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4413      	add	r3, r2
 8006390:	4a04      	ldr	r2, [pc, #16]	@ (80063a4 <HAL_IncTick+0x24>)
 8006392:	6013      	str	r3, [r2, #0]
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000014 	.word	0x20000014
 80063a4:	20000da8 	.word	0x20000da8

080063a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
  return uwTick;
 80063ac:	4b03      	ldr	r3, [pc, #12]	@ (80063bc <HAL_GetTick+0x14>)
 80063ae:	681b      	ldr	r3, [r3, #0]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000da8 	.word	0x20000da8

080063c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063c8:	f7ff ffee 	bl	80063a8 <HAL_GetTick>
 80063cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d005      	beq.n	80063e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063da:	4b0a      	ldr	r3, [pc, #40]	@ (8006404 <HAL_Delay+0x44>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063e6:	bf00      	nop
 80063e8:	f7ff ffde 	bl	80063a8 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d8f7      	bhi.n	80063e8 <HAL_Delay+0x28>
  {
  }
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000014 	.word	0x20000014

08006408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006418:	4b0b      	ldr	r3, [pc, #44]	@ (8006448 <__NVIC_SetPriorityGrouping+0x40>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006424:	4013      	ands	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006430:	4b06      	ldr	r3, [pc, #24]	@ (800644c <__NVIC_SetPriorityGrouping+0x44>)
 8006432:	4313      	orrs	r3, r2
 8006434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006436:	4a04      	ldr	r2, [pc, #16]	@ (8006448 <__NVIC_SetPriorityGrouping+0x40>)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	60d3      	str	r3, [r2, #12]
}
 800643c:	bf00      	nop
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	e000ed00 	.word	0xe000ed00
 800644c:	05fa0000 	.word	0x05fa0000

08006450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006454:	4b04      	ldr	r3, [pc, #16]	@ (8006468 <__NVIC_GetPriorityGrouping+0x18>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	f003 0307 	and.w	r3, r3, #7
}
 800645e:	4618      	mov	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	e000ed00 	.word	0xe000ed00

0800646c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	6039      	str	r1, [r7, #0]
 8006476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647c:	2b00      	cmp	r3, #0
 800647e:	db0a      	blt.n	8006496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	490c      	ldr	r1, [pc, #48]	@ (80064b8 <__NVIC_SetPriority+0x4c>)
 8006486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648a:	0112      	lsls	r2, r2, #4
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	440b      	add	r3, r1
 8006490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006494:	e00a      	b.n	80064ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4908      	ldr	r1, [pc, #32]	@ (80064bc <__NVIC_SetPriority+0x50>)
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	3b04      	subs	r3, #4
 80064a4:	0112      	lsls	r2, r2, #4
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	440b      	add	r3, r1
 80064aa:	761a      	strb	r2, [r3, #24]
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	e000e100 	.word	0xe000e100
 80064bc:	e000ed00 	.word	0xe000ed00

080064c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b089      	sub	sp, #36	@ 0x24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f1c3 0307 	rsb	r3, r3, #7
 80064da:	2b04      	cmp	r3, #4
 80064dc:	bf28      	it	cs
 80064de:	2304      	movcs	r3, #4
 80064e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3304      	adds	r3, #4
 80064e6:	2b06      	cmp	r3, #6
 80064e8:	d902      	bls.n	80064f0 <NVIC_EncodePriority+0x30>
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	3b03      	subs	r3, #3
 80064ee:	e000      	b.n	80064f2 <NVIC_EncodePriority+0x32>
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43da      	mvns	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	401a      	ands	r2, r3
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006508:	f04f 31ff 	mov.w	r1, #4294967295
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	fa01 f303 	lsl.w	r3, r1, r3
 8006512:	43d9      	mvns	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006518:	4313      	orrs	r3, r2
         );
}
 800651a:	4618      	mov	r0, r3
 800651c:	3724      	adds	r7, #36	@ 0x24
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3b01      	subs	r3, #1
 8006534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006538:	d301      	bcc.n	800653e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800653a:	2301      	movs	r3, #1
 800653c:	e00f      	b.n	800655e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800653e:	4a0a      	ldr	r2, [pc, #40]	@ (8006568 <SysTick_Config+0x40>)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3b01      	subs	r3, #1
 8006544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006546:	210f      	movs	r1, #15
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	f7ff ff8e 	bl	800646c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <SysTick_Config+0x40>)
 8006552:	2200      	movs	r2, #0
 8006554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006556:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <SysTick_Config+0x40>)
 8006558:	2207      	movs	r2, #7
 800655a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	e000e010 	.word	0xe000e010

0800656c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff ff47 	bl	8006408 <__NVIC_SetPriorityGrouping>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006582:	b580      	push	{r7, lr}
 8006584:	b086      	sub	sp, #24
 8006586:	af00      	add	r7, sp, #0
 8006588:	4603      	mov	r3, r0
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006594:	f7ff ff5c 	bl	8006450 <__NVIC_GetPriorityGrouping>
 8006598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f7ff ff8e 	bl	80064c0 <NVIC_EncodePriority>
 80065a4:	4602      	mov	r2, r0
 80065a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff ff5d 	bl	800646c <__NVIC_SetPriority>
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ffb0 	bl	8006528 <SysTick_Config>
 80065c8:	4603      	mov	r3, r0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e086      	b.n	80066f4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d106      	bne.n	80065fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fb61 	bl	8005cc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065fe:	4b3f      	ldr	r3, [pc, #252]	@ (80066fc <HAL_ETH_Init+0x128>)
 8006600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006602:	4a3e      	ldr	r2, [pc, #248]	@ (80066fc <HAL_ETH_Init+0x128>)
 8006604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006608:	6453      	str	r3, [r2, #68]	@ 0x44
 800660a:	4b3c      	ldr	r3, [pc, #240]	@ (80066fc <HAL_ETH_Init+0x128>)
 800660c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006612:	60bb      	str	r3, [r7, #8]
 8006614:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006616:	4b3a      	ldr	r3, [pc, #232]	@ (8006700 <HAL_ETH_Init+0x12c>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4a39      	ldr	r2, [pc, #228]	@ (8006700 <HAL_ETH_Init+0x12c>)
 800661c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006620:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006622:	4b37      	ldr	r3, [pc, #220]	@ (8006700 <HAL_ETH_Init+0x12c>)
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	4935      	ldr	r1, [pc, #212]	@ (8006700 <HAL_ETH_Init+0x12c>)
 800662c:	4313      	orrs	r3, r2
 800662e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006630:	4b33      	ldr	r3, [pc, #204]	@ (8006700 <HAL_ETH_Init+0x12c>)
 8006632:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800664a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800664c:	f7ff feac 	bl	80063a8 <HAL_GetTick>
 8006650:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006652:	e011      	b.n	8006678 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006654:	f7ff fea8 	bl	80063a8 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006662:	d909      	bls.n	8006678 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2204      	movs	r2, #4
 8006668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	22e0      	movs	r2, #224	@ 0xe0
 8006670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e03d      	b.n	80066f4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e4      	bne.n	8006654 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f97a 	bl	8006984 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fa25 	bl	8006ae0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa7b 	bl	8006b92 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	461a      	mov	r2, r3
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f9e3 	bl	8006a70 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80066b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006704 <HAL_ETH_Init+0x130>)
 80066c8:	430b      	orrs	r3, r1
 80066ca:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80066de:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2210      	movs	r2, #16
 80066ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40023800 	.word	0x40023800
 8006700:	40013800 	.word	0x40013800
 8006704:	00020060 	.word	0x00020060

08006708 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4b53      	ldr	r3, [pc, #332]	@ (800686c <ETH_SetMACConfig+0x164>)
 800671e:	4013      	ands	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	7b9b      	ldrb	r3, [r3, #14]
 8006726:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	7c12      	ldrb	r2, [r2, #16]
 800672c:	2a00      	cmp	r2, #0
 800672e:	d102      	bne.n	8006736 <ETH_SetMACConfig+0x2e>
 8006730:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006734:	e000      	b.n	8006738 <ETH_SetMACConfig+0x30>
 8006736:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006738:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	7c52      	ldrb	r2, [r2, #17]
 800673e:	2a00      	cmp	r2, #0
 8006740:	d102      	bne.n	8006748 <ETH_SetMACConfig+0x40>
 8006742:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006746:	e000      	b.n	800674a <ETH_SetMACConfig+0x42>
 8006748:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800674a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006750:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	7fdb      	ldrb	r3, [r3, #31]
 8006756:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006758:	431a      	orrs	r2, r3
                        macconf->Speed |
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800675e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	7f92      	ldrb	r2, [r2, #30]
 8006764:	2a00      	cmp	r2, #0
 8006766:	d102      	bne.n	800676e <ETH_SetMACConfig+0x66>
 8006768:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800676c:	e000      	b.n	8006770 <ETH_SetMACConfig+0x68>
 800676e:	2200      	movs	r2, #0
                        macconf->Speed |
 8006770:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	7f1b      	ldrb	r3, [r3, #28]
 8006776:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006778:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800677e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8006786:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800678e:	2a00      	cmp	r2, #0
 8006790:	d102      	bne.n	8006798 <ETH_SetMACConfig+0x90>
 8006792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006796:	e000      	b.n	800679a <ETH_SetMACConfig+0x92>
 8006798:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800679a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	7bdb      	ldrb	r3, [r3, #15]
 80067a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80067a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80067a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80067b2:	4313      	orrs	r3, r2
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80067ca:	2001      	movs	r0, #1
 80067cc:	f7ff fdf8 	bl	80063c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80067e6:	4013      	ands	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80067f6:	2a00      	cmp	r2, #0
 80067f8:	d101      	bne.n	80067fe <ETH_SetMACConfig+0xf6>
 80067fa:	2280      	movs	r2, #128	@ 0x80
 80067fc:	e000      	b.n	8006800 <ETH_SetMACConfig+0xf8>
 80067fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006800:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006806:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800680e:	2a01      	cmp	r2, #1
 8006810:	d101      	bne.n	8006816 <ETH_SetMACConfig+0x10e>
 8006812:	2208      	movs	r2, #8
 8006814:	e000      	b.n	8006818 <ETH_SetMACConfig+0x110>
 8006816:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006818:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8006820:	2a01      	cmp	r2, #1
 8006822:	d101      	bne.n	8006828 <ETH_SetMACConfig+0x120>
 8006824:	2204      	movs	r2, #4
 8006826:	e000      	b.n	800682a <ETH_SetMACConfig+0x122>
 8006828:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800682a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8006832:	2a01      	cmp	r2, #1
 8006834:	d101      	bne.n	800683a <ETH_SetMACConfig+0x132>
 8006836:	2202      	movs	r2, #2
 8006838:	e000      	b.n	800683c <ETH_SetMACConfig+0x134>
 800683a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800683c:	4313      	orrs	r3, r2
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006854:	2001      	movs	r0, #1
 8006856:	f7ff fdb3 	bl	80063c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	619a      	str	r2, [r3, #24]
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	fd20810f 	.word	0xfd20810f

08006870 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4b3d      	ldr	r3, [pc, #244]	@ (8006980 <ETH_SetDMAConfig+0x110>)
 800688a:	4013      	ands	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	7b1b      	ldrb	r3, [r3, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d102      	bne.n	800689c <ETH_SetDMAConfig+0x2c>
 8006896:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800689a:	e000      	b.n	800689e <ETH_SetDMAConfig+0x2e>
 800689c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	7b5b      	ldrb	r3, [r3, #13]
 80068a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80068a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	7f52      	ldrb	r2, [r2, #29]
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	d102      	bne.n	80068b4 <ETH_SetDMAConfig+0x44>
 80068ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068b2:	e000      	b.n	80068b6 <ETH_SetDMAConfig+0x46>
 80068b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80068b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	7b9b      	ldrb	r3, [r3, #14]
 80068bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80068be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80068c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	7f1b      	ldrb	r3, [r3, #28]
 80068ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80068cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	7f9b      	ldrb	r3, [r3, #30]
 80068d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80068d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80068da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80068e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80068e4:	4313      	orrs	r3, r2
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f4:	461a      	mov	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006906:	2001      	movs	r0, #1
 8006908:	f7ff fd5a 	bl	80063c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006914:	461a      	mov	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	791b      	ldrb	r3, [r3, #4]
 800691e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006924:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800692a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006930:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006938:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800693a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006942:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006948:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006952:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006956:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006964:	2001      	movs	r0, #1
 8006966:	f7ff fd2b 	bl	80063c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006972:	461a      	mov	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6013      	str	r3, [r2, #0]
}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	f8de3f23 	.word	0xf8de3f23

08006984 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b0a6      	sub	sp, #152	@ 0x98
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006992:	2301      	movs	r3, #1
 8006994:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800699c:	2300      	movs	r3, #0
 800699e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80069c6:	2300      	movs	r3, #0
 80069c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80069da:	2300      	movs	r3, #0
 80069dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80069ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80069f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80069f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80069f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80069fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff fe7f 	bl	8006708 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006a36:	2301      	movs	r3, #1
 8006a38:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006a3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006a3e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006a40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006a44:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006a46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a4a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006a5a:	f107 0308 	add.w	r3, r7, #8
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ff05 	bl	8006870 <ETH_SetDMAConfig>
}
 8006a66:	bf00      	nop
 8006a68:	3798      	adds	r7, #152	@ 0x98
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3305      	adds	r3, #5
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	3204      	adds	r2, #4
 8006a88:	7812      	ldrb	r2, [r2, #0]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <ETH_MACAddressConfig+0x68>)
 8006a92:	4413      	add	r3, r2
 8006a94:	461a      	mov	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3303      	adds	r3, #3
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	061a      	lsls	r2, r3, #24
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <ETH_MACAddressConfig+0x6c>)
 8006ac2:	4413      	add	r3, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6013      	str	r3, [r2, #0]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40028040 	.word	0x40028040
 8006adc:	40028044 	.word	0x40028044

08006ae0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e03e      	b.n	8006b6c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68d9      	ldr	r1, [r3, #12]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	440b      	add	r3, r1
 8006afe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2200      	movs	r2, #0
 8006b16:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	3206      	adds	r2, #6
 8006b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d80c      	bhi.n	8006b50 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68d9      	ldr	r1, [r3, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	440b      	add	r3, r1
 8006b48:	461a      	mov	r2, r3
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	60da      	str	r2, [r3, #12]
 8006b4e:	e004      	b.n	8006b5a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	461a      	mov	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d9bd      	bls.n	8006aee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b84:	611a      	str	r2, [r3, #16]
}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	e048      	b.n	8006c32 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6919      	ldr	r1, [r3, #16]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	440b      	add	r3, r1
 8006bb0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006bdc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	3212      	adds	r2, #18
 8006bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d80c      	bhi.n	8006c22 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6919      	ldr	r1, [r3, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	440b      	add	r3, r1
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	60da      	str	r2, [r3, #12]
 8006c20:	e004      	b.n	8006c2c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	461a      	mov	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d9b3      	bls.n	8006ba0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c62:	60da      	str	r2, [r3, #12]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b089      	sub	sp, #36	@ 0x24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006c82:	2300      	movs	r3, #0
 8006c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e175      	b.n	8006f7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006c90:	2201      	movs	r2, #1
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	f040 8164 	bne.w	8006f76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d005      	beq.n	8006cc6 <HAL_GPIO_Init+0x56>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d130      	bne.n	8006d28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	43db      	mvns	r3, r3
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	091b      	lsrs	r3, r3, #4
 8006d12:	f003 0201 	and.w	r2, r3, #1
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d017      	beq.n	8006d64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	2203      	movs	r2, #3
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
 8006d44:	43db      	mvns	r3, r3
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d123      	bne.n	8006db8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	08da      	lsrs	r2, r3, #3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3208      	adds	r2, #8
 8006d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	220f      	movs	r2, #15
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4013      	ands	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	08da      	lsrs	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3208      	adds	r2, #8
 8006db2:	69b9      	ldr	r1, [r7, #24]
 8006db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	43db      	mvns	r3, r3
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f003 0203 	and.w	r2, r3, #3
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80be 	beq.w	8006f76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dfa:	4b66      	ldr	r3, [pc, #408]	@ (8006f94 <HAL_GPIO_Init+0x324>)
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfe:	4a65      	ldr	r2, [pc, #404]	@ (8006f94 <HAL_GPIO_Init+0x324>)
 8006e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e06:	4b63      	ldr	r3, [pc, #396]	@ (8006f94 <HAL_GPIO_Init+0x324>)
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006e12:	4a61      	ldr	r2, [pc, #388]	@ (8006f98 <HAL_GPIO_Init+0x328>)
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	089b      	lsrs	r3, r3, #2
 8006e18:	3302      	adds	r3, #2
 8006e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	220f      	movs	r2, #15
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	43db      	mvns	r3, r3
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	4013      	ands	r3, r2
 8006e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a58      	ldr	r2, [pc, #352]	@ (8006f9c <HAL_GPIO_Init+0x32c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d037      	beq.n	8006eae <HAL_GPIO_Init+0x23e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a57      	ldr	r2, [pc, #348]	@ (8006fa0 <HAL_GPIO_Init+0x330>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d031      	beq.n	8006eaa <HAL_GPIO_Init+0x23a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a56      	ldr	r2, [pc, #344]	@ (8006fa4 <HAL_GPIO_Init+0x334>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d02b      	beq.n	8006ea6 <HAL_GPIO_Init+0x236>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a55      	ldr	r2, [pc, #340]	@ (8006fa8 <HAL_GPIO_Init+0x338>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d025      	beq.n	8006ea2 <HAL_GPIO_Init+0x232>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a54      	ldr	r2, [pc, #336]	@ (8006fac <HAL_GPIO_Init+0x33c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d01f      	beq.n	8006e9e <HAL_GPIO_Init+0x22e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a53      	ldr	r2, [pc, #332]	@ (8006fb0 <HAL_GPIO_Init+0x340>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d019      	beq.n	8006e9a <HAL_GPIO_Init+0x22a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a52      	ldr	r2, [pc, #328]	@ (8006fb4 <HAL_GPIO_Init+0x344>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <HAL_GPIO_Init+0x226>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a51      	ldr	r2, [pc, #324]	@ (8006fb8 <HAL_GPIO_Init+0x348>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00d      	beq.n	8006e92 <HAL_GPIO_Init+0x222>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a50      	ldr	r2, [pc, #320]	@ (8006fbc <HAL_GPIO_Init+0x34c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d007      	beq.n	8006e8e <HAL_GPIO_Init+0x21e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a4f      	ldr	r2, [pc, #316]	@ (8006fc0 <HAL_GPIO_Init+0x350>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d101      	bne.n	8006e8a <HAL_GPIO_Init+0x21a>
 8006e86:	2309      	movs	r3, #9
 8006e88:	e012      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006e8a:	230a      	movs	r3, #10
 8006e8c:	e010      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006e8e:	2308      	movs	r3, #8
 8006e90:	e00e      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006e92:	2307      	movs	r3, #7
 8006e94:	e00c      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006e96:	2306      	movs	r3, #6
 8006e98:	e00a      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006e9a:	2305      	movs	r3, #5
 8006e9c:	e008      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	e006      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e004      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e002      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <HAL_GPIO_Init+0x240>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	f002 0203 	and.w	r2, r2, #3
 8006eb6:	0092      	lsls	r2, r2, #2
 8006eb8:	4093      	lsls	r3, r2
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006ec0:	4935      	ldr	r1, [pc, #212]	@ (8006f98 <HAL_GPIO_Init+0x328>)
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	089b      	lsrs	r3, r3, #2
 8006ec6:	3302      	adds	r3, #2
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ece:	4b3d      	ldr	r3, [pc, #244]	@ (8006fc4 <HAL_GPIO_Init+0x354>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	4013      	ands	r3, r2
 8006edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ef2:	4a34      	ldr	r2, [pc, #208]	@ (8006fc4 <HAL_GPIO_Init+0x354>)
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ef8:	4b32      	ldr	r3, [pc, #200]	@ (8006fc4 <HAL_GPIO_Init+0x354>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	43db      	mvns	r3, r3
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	4013      	ands	r3, r2
 8006f06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f1c:	4a29      	ldr	r2, [pc, #164]	@ (8006fc4 <HAL_GPIO_Init+0x354>)
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f22:	4b28      	ldr	r3, [pc, #160]	@ (8006fc4 <HAL_GPIO_Init+0x354>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	43db      	mvns	r3, r3
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f46:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc4 <HAL_GPIO_Init+0x354>)
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc4 <HAL_GPIO_Init+0x354>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	43db      	mvns	r3, r3
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f70:	4a14      	ldr	r2, [pc, #80]	@ (8006fc4 <HAL_GPIO_Init+0x354>)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	61fb      	str	r3, [r7, #28]
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	2b0f      	cmp	r3, #15
 8006f80:	f67f ae86 	bls.w	8006c90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
 8006f88:	3724      	adds	r7, #36	@ 0x24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40013800 	.word	0x40013800
 8006f9c:	40020000 	.word	0x40020000
 8006fa0:	40020400 	.word	0x40020400
 8006fa4:	40020800 	.word	0x40020800
 8006fa8:	40020c00 	.word	0x40020c00
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	40021400 	.word	0x40021400
 8006fb4:	40021800 	.word	0x40021800
 8006fb8:	40021c00 	.word	0x40021c00
 8006fbc:	40022000 	.word	0x40022000
 8006fc0:	40022400 	.word	0x40022400
 8006fc4:	40013c00 	.word	0x40013c00

08006fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	887b      	ldrh	r3, [r7, #2]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	73fb      	strb	r3, [r7, #15]
 8006fe4:	e001      	b.n	8006fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	807b      	strh	r3, [r7, #2]
 8007004:	4613      	mov	r3, r2
 8007006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007008:	787b      	ldrb	r3, [r7, #1]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800700e:	887a      	ldrh	r2, [r7, #2]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007014:	e003      	b.n	800701e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007016:	887b      	ldrh	r3, [r7, #2]
 8007018:	041a      	lsls	r2, r3, #16
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	619a      	str	r2, [r3, #24]
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800703c:	887a      	ldrh	r2, [r7, #2]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4013      	ands	r3, r2
 8007042:	041a      	lsls	r2, r3, #16
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	43d9      	mvns	r1, r3
 8007048:	887b      	ldrh	r3, [r7, #2]
 800704a:	400b      	ands	r3, r1
 800704c:	431a      	orrs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	619a      	str	r2, [r3, #24]
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
	...

08007060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e08b      	b.n	800718a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fe fed2 	bl	8005e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2224      	movs	r2, #36	@ 0x24
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0201 	bic.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80070b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d107      	bne.n	80070da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070d6:	609a      	str	r2, [r3, #8]
 80070d8:	e006      	b.n	80070e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80070e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d108      	bne.n	8007102 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070fe:	605a      	str	r2, [r3, #4]
 8007100:	e007      	b.n	8007112 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6859      	ldr	r1, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	4b1d      	ldr	r3, [pc, #116]	@ (8007194 <HAL_I2C_Init+0x134>)
 800711e:	430b      	orrs	r3, r1
 8007120:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007130:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	69d9      	ldr	r1, [r3, #28]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1a      	ldr	r2, [r3, #32]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	02008000 	.word	0x02008000

08007198 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	607a      	str	r2, [r7, #4]
 80071a2:	461a      	mov	r2, r3
 80071a4:	460b      	mov	r3, r1
 80071a6:	817b      	strh	r3, [r7, #10]
 80071a8:	4613      	mov	r3, r2
 80071aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	f040 80fd 	bne.w	80073b4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d101      	bne.n	80071c8 <HAL_I2C_Master_Transmit+0x30>
 80071c4:	2302      	movs	r3, #2
 80071c6:	e0f6      	b.n	80073b6 <HAL_I2C_Master_Transmit+0x21e>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071d0:	f7ff f8ea 	bl	80063a8 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	2319      	movs	r3, #25
 80071dc:	2201      	movs	r2, #1
 80071de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 fcf0 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e0e1      	b.n	80073b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2221      	movs	r2, #33	@ 0x21
 80071f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2210      	movs	r2, #16
 80071fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	893a      	ldrh	r2, [r7, #8]
 8007212:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800721e:	b29b      	uxth	r3, r3
 8007220:	2bff      	cmp	r3, #255	@ 0xff
 8007222:	d906      	bls.n	8007232 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	22ff      	movs	r2, #255	@ 0xff
 8007228:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800722a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	e007      	b.n	8007242 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007236:	b29a      	uxth	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800723c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007240:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007246:	2b00      	cmp	r3, #0
 8007248:	d024      	beq.n	8007294 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727e:	b2db      	uxtb	r3, r3
 8007280:	3301      	adds	r3, #1
 8007282:	b2da      	uxtb	r2, r3
 8007284:	8979      	ldrh	r1, [r7, #10]
 8007286:	4b4e      	ldr	r3, [pc, #312]	@ (80073c0 <HAL_I2C_Master_Transmit+0x228>)
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fe5f 	bl	8007f50 <I2C_TransferConfig>
 8007292:	e066      	b.n	8007362 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007298:	b2da      	uxtb	r2, r3
 800729a:	8979      	ldrh	r1, [r7, #10]
 800729c:	4b48      	ldr	r3, [pc, #288]	@ (80073c0 <HAL_I2C_Master_Transmit+0x228>)
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fe54 	bl	8007f50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80072a8:	e05b      	b.n	8007362 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	6a39      	ldr	r1, [r7, #32]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fce3 	bl	8007c7a <I2C_WaitOnTXISFlagUntilTimeout>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e07b      	b.n	80073b6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d034      	beq.n	8007362 <HAL_I2C_Master_Transmit+0x1ca>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d130      	bne.n	8007362 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	2200      	movs	r2, #0
 8007308:	2180      	movs	r1, #128	@ 0x80
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fc5c 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e04d      	b.n	80073b6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800731e:	b29b      	uxth	r3, r3
 8007320:	2bff      	cmp	r3, #255	@ 0xff
 8007322:	d90e      	bls.n	8007342 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	22ff      	movs	r2, #255	@ 0xff
 8007328:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800732e:	b2da      	uxtb	r2, r3
 8007330:	8979      	ldrh	r1, [r7, #10]
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fe08 	bl	8007f50 <I2C_TransferConfig>
 8007340:	e00f      	b.n	8007362 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007350:	b2da      	uxtb	r2, r3
 8007352:	8979      	ldrh	r1, [r7, #10]
 8007354:	2300      	movs	r3, #0
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fdf7 	bl	8007f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d19e      	bne.n	80072aa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	6a39      	ldr	r1, [r7, #32]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fcc9 	bl	8007d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e01a      	b.n	80073b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2220      	movs	r2, #32
 8007386:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6859      	ldr	r1, [r3, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b0c      	ldr	r3, [pc, #48]	@ (80073c4 <HAL_I2C_Master_Transmit+0x22c>)
 8007394:	400b      	ands	r3, r1
 8007396:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e000      	b.n	80073b6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	80002000 	.word	0x80002000
 80073c4:	fe00e800 	.word	0xfe00e800

080073c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	817b      	strh	r3, [r7, #10]
 80073da:	460b      	mov	r3, r1
 80073dc:	813b      	strh	r3, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	f040 80f9 	bne.w	80075e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_I2C_Mem_Write+0x34>
 80073f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007402:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0ed      	b.n	80075e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_I2C_Mem_Write+0x4e>
 8007412:	2302      	movs	r3, #2
 8007414:	e0e6      	b.n	80075e4 <HAL_I2C_Mem_Write+0x21c>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800741e:	f7fe ffc3 	bl	80063a8 <HAL_GetTick>
 8007422:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2319      	movs	r3, #25
 800742a:	2201      	movs	r2, #1
 800742c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fbc9 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e0d1      	b.n	80075e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2221      	movs	r2, #33	@ 0x21
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2240      	movs	r2, #64	@ 0x40
 800744c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a3a      	ldr	r2, [r7, #32]
 800745a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007460:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007468:	88f8      	ldrh	r0, [r7, #6]
 800746a:	893a      	ldrh	r2, [r7, #8]
 800746c:	8979      	ldrh	r1, [r7, #10]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	4603      	mov	r3, r0
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fad9 	bl	8007a30 <I2C_RequestMemoryWrite>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e0a9      	b.n	80075e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	2bff      	cmp	r3, #255	@ 0xff
 8007498:	d90e      	bls.n	80074b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	22ff      	movs	r2, #255	@ 0xff
 800749e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	8979      	ldrh	r1, [r7, #10]
 80074a8:	2300      	movs	r3, #0
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 fd4d 	bl	8007f50 <I2C_TransferConfig>
 80074b6:	e00f      	b.n	80074d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	8979      	ldrh	r1, [r7, #10]
 80074ca:	2300      	movs	r3, #0
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 fd3c 	bl	8007f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fbcc 	bl	8007c7a <I2C_WaitOnTXISFlagUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e07b      	b.n	80075e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f0:	781a      	ldrb	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007514:	3b01      	subs	r3, #1
 8007516:	b29a      	uxth	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007520:	b29b      	uxth	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d034      	beq.n	8007590 <HAL_I2C_Mem_Write+0x1c8>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800752a:	2b00      	cmp	r3, #0
 800752c:	d130      	bne.n	8007590 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007534:	2200      	movs	r2, #0
 8007536:	2180      	movs	r1, #128	@ 0x80
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 fb45 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e04d      	b.n	80075e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800754c:	b29b      	uxth	r3, r3
 800754e:	2bff      	cmp	r3, #255	@ 0xff
 8007550:	d90e      	bls.n	8007570 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	22ff      	movs	r2, #255	@ 0xff
 8007556:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800755c:	b2da      	uxtb	r2, r3
 800755e:	8979      	ldrh	r1, [r7, #10]
 8007560:	2300      	movs	r3, #0
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 fcf1 	bl	8007f50 <I2C_TransferConfig>
 800756e:	e00f      	b.n	8007590 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800757e:	b2da      	uxtb	r2, r3
 8007580:	8979      	ldrh	r1, [r7, #10]
 8007582:	2300      	movs	r3, #0
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 fce0 	bl	8007f50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d19e      	bne.n	80074d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fbb2 	bl	8007d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e01a      	b.n	80075e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2220      	movs	r2, #32
 80075b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6859      	ldr	r1, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b0a      	ldr	r3, [pc, #40]	@ (80075ec <HAL_I2C_Mem_Write+0x224>)
 80075c2:	400b      	ands	r3, r1
 80075c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	e000      	b.n	80075e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80075e2:	2302      	movs	r3, #2
  }
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	fe00e800 	.word	0xfe00e800

080075f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	4608      	mov	r0, r1
 80075fa:	4611      	mov	r1, r2
 80075fc:	461a      	mov	r2, r3
 80075fe:	4603      	mov	r3, r0
 8007600:	817b      	strh	r3, [r7, #10]
 8007602:	460b      	mov	r3, r1
 8007604:	813b      	strh	r3, [r7, #8]
 8007606:	4613      	mov	r3, r2
 8007608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b20      	cmp	r3, #32
 8007614:	f040 80fd 	bne.w	8007812 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_I2C_Mem_Read+0x34>
 800761e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d105      	bne.n	8007630 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800762a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e0f1      	b.n	8007814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <HAL_I2C_Mem_Read+0x4e>
 800763a:	2302      	movs	r3, #2
 800763c:	e0ea      	b.n	8007814 <HAL_I2C_Mem_Read+0x224>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007646:	f7fe feaf 	bl	80063a8 <HAL_GetTick>
 800764a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	2319      	movs	r3, #25
 8007652:	2201      	movs	r2, #1
 8007654:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fab5 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e0d5      	b.n	8007814 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2222      	movs	r2, #34	@ 0x22
 800766c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2240      	movs	r2, #64	@ 0x40
 8007674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a3a      	ldr	r2, [r7, #32]
 8007682:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007688:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007690:	88f8      	ldrh	r0, [r7, #6]
 8007692:	893a      	ldrh	r2, [r7, #8]
 8007694:	8979      	ldrh	r1, [r7, #10]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4603      	mov	r3, r0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fa19 	bl	8007ad8 <I2C_RequestMemoryRead>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e0ad      	b.n	8007814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2bff      	cmp	r3, #255	@ 0xff
 80076c0:	d90e      	bls.n	80076e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	8979      	ldrh	r1, [r7, #10]
 80076d0:	4b52      	ldr	r3, [pc, #328]	@ (800781c <HAL_I2C_Mem_Read+0x22c>)
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fc39 	bl	8007f50 <I2C_TransferConfig>
 80076de:	e00f      	b.n	8007700 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	8979      	ldrh	r1, [r7, #10]
 80076f2:	4b4a      	ldr	r3, [pc, #296]	@ (800781c <HAL_I2C_Mem_Read+0x22c>)
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 fc28 	bl	8007f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007706:	2200      	movs	r2, #0
 8007708:	2104      	movs	r1, #4
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 fa5c 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e07c      	b.n	8007814 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d034      	beq.n	80077c0 <HAL_I2C_Mem_Read+0x1d0>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d130      	bne.n	80077c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	2200      	movs	r2, #0
 8007766:	2180      	movs	r1, #128	@ 0x80
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fa2d 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e04d      	b.n	8007814 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2bff      	cmp	r3, #255	@ 0xff
 8007780:	d90e      	bls.n	80077a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800778c:	b2da      	uxtb	r2, r3
 800778e:	8979      	ldrh	r1, [r7, #10]
 8007790:	2300      	movs	r3, #0
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 fbd9 	bl	8007f50 <I2C_TransferConfig>
 800779e:	e00f      	b.n	80077c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	8979      	ldrh	r1, [r7, #10]
 80077b2:	2300      	movs	r3, #0
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 fbc8 	bl	8007f50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d19a      	bne.n	8007700 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fa9a 	bl	8007d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e01a      	b.n	8007814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2220      	movs	r2, #32
 80077e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6859      	ldr	r1, [r3, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007820 <HAL_I2C_Mem_Read+0x230>)
 80077f2:	400b      	ands	r3, r1
 80077f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	e000      	b.n	8007814 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007812:	2302      	movs	r3, #2
  }
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	80002400 	.word	0x80002400
 8007820:	fe00e800 	.word	0xfe00e800

08007824 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	@ 0x28
 8007828:	af02      	add	r7, sp, #8
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	607a      	str	r2, [r7, #4]
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	460b      	mov	r3, r1
 8007832:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b20      	cmp	r3, #32
 8007846:	f040 80e9 	bne.w	8007a1c <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007858:	d101      	bne.n	800785e <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 800785a:	2302      	movs	r3, #2
 800785c:	e0df      	b.n	8007a1e <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_I2C_IsDeviceReady+0x48>
 8007868:	2302      	movs	r3, #2
 800786a:	e0d8      	b.n	8007a1e <HAL_I2C_IsDeviceReady+0x1fa>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2224      	movs	r2, #36	@ 0x24
 8007878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d105      	bne.n	8007896 <HAL_I2C_IsDeviceReady+0x72>
 800788a:	897b      	ldrh	r3, [r7, #10]
 800788c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007890:	4b65      	ldr	r3, [pc, #404]	@ (8007a28 <HAL_I2C_IsDeviceReady+0x204>)
 8007892:	4313      	orrs	r3, r2
 8007894:	e004      	b.n	80078a0 <HAL_I2C_IsDeviceReady+0x7c>
 8007896:	897b      	ldrh	r3, [r7, #10]
 8007898:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800789c:	4b63      	ldr	r3, [pc, #396]	@ (8007a2c <HAL_I2C_IsDeviceReady+0x208>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	6812      	ldr	r2, [r2, #0]
 80078a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80078a6:	f7fe fd7f 	bl	80063a8 <HAL_GetTick>
 80078aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	bf0c      	ite	eq
 80078ba:	2301      	moveq	r3, #1
 80078bc:	2300      	movne	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	bf0c      	ite	eq
 80078d0:	2301      	moveq	r3, #1
 80078d2:	2300      	movne	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80078d8:	e034      	b.n	8007944 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d01a      	beq.n	8007918 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078e2:	f7fe fd61 	bl	80063a8 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d302      	bcc.n	80078f8 <HAL_I2C_IsDeviceReady+0xd4>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10f      	bne.n	8007918 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007904:	f043 0220 	orr.w	r2, r3, #32
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e082      	b.n	8007a1e <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b20      	cmp	r3, #32
 8007924:	bf0c      	ite	eq
 8007926:	2301      	moveq	r3, #1
 8007928:	2300      	movne	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b10      	cmp	r3, #16
 800793a:	bf0c      	ite	eq
 800793c:	2301      	moveq	r3, #1
 800793e:	2300      	movne	r3, #0
 8007940:	b2db      	uxtb	r3, r3
 8007942:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007944:	7fbb      	ldrb	r3, [r7, #30]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d102      	bne.n	8007950 <HAL_I2C_IsDeviceReady+0x12c>
 800794a:	7f7b      	ldrb	r3, [r7, #29]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0c4      	beq.n	80078da <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b10      	cmp	r3, #16
 800795c:	d027      	beq.n	80079ae <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2200      	movs	r2, #0
 8007966:	2120      	movs	r1, #32
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f92d 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00e      	beq.n	8007992 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007978:	2b04      	cmp	r3, #4
 800797a:	d107      	bne.n	800798c <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2220      	movs	r2, #32
 8007982:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	645a      	str	r2, [r3, #68]	@ 0x44
 800798a:	e026      	b.n	80079da <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e023      	b.n	80079da <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2220      	movs	r2, #32
 8007998:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	e037      	b.n	8007a1e <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2210      	movs	r2, #16
 80079b4:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2200      	movs	r2, #0
 80079be:	2120      	movs	r1, #32
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f901 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	77fb      	strb	r3, [r7, #31]
 80079d0:	e003      	b.n	80079da <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2220      	movs	r2, #32
 80079d8:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	3301      	adds	r3, #1
 80079de:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d904      	bls.n	80079f2 <HAL_I2C_IsDeviceReady+0x1ce>
 80079e8:	7ffb      	ldrb	r3, [r7, #31]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d101      	bne.n	80079f2 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	f63f af43 	bhi.w	8007882 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a08:	f043 0220 	orr.w	r2, r3, #32
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3720      	adds	r7, #32
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	02002000 	.word	0x02002000
 8007a2c:	02002800 	.word	0x02002800

08007a30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4603      	mov	r3, r0
 8007a40:	817b      	strh	r3, [r7, #10]
 8007a42:	460b      	mov	r3, r1
 8007a44:	813b      	strh	r3, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	8979      	ldrh	r1, [r7, #10]
 8007a50:	4b20      	ldr	r3, [pc, #128]	@ (8007ad4 <I2C_RequestMemoryWrite+0xa4>)
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 fa79 	bl	8007f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	69b9      	ldr	r1, [r7, #24]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f909 	bl	8007c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e02c      	b.n	8007acc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d105      	bne.n	8007a84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a78:	893b      	ldrh	r3, [r7, #8]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a82:	e015      	b.n	8007ab0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a84:	893b      	ldrh	r3, [r7, #8]
 8007a86:	0a1b      	lsrs	r3, r3, #8
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	69b9      	ldr	r1, [r7, #24]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f8ef 	bl	8007c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e012      	b.n	8007acc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2180      	movs	r1, #128	@ 0x80
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f884 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	80002000 	.word	0x80002000

08007ad8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	817b      	strh	r3, [r7, #10]
 8007aea:	460b      	mov	r3, r1
 8007aec:	813b      	strh	r3, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	8979      	ldrh	r1, [r7, #10]
 8007af8:	4b20      	ldr	r3, [pc, #128]	@ (8007b7c <I2C_RequestMemoryRead+0xa4>)
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2300      	movs	r3, #0
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 fa26 	bl	8007f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	69b9      	ldr	r1, [r7, #24]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f8b6 	bl	8007c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e02c      	b.n	8007b72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d105      	bne.n	8007b2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b1e:	893b      	ldrh	r3, [r7, #8]
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b28:	e015      	b.n	8007b56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b2a:	893b      	ldrh	r3, [r7, #8]
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	69b9      	ldr	r1, [r7, #24]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f89c 	bl	8007c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e012      	b.n	8007b72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b4c:	893b      	ldrh	r3, [r7, #8]
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2140      	movs	r1, #64	@ 0x40
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f831 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	80002000 	.word	0x80002000

08007b80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d103      	bne.n	8007b9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d007      	beq.n	8007bbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0201 	orr.w	r2, r2, #1
 8007bba:	619a      	str	r2, [r3, #24]
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bd8:	e03b      	b.n	8007c52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 f8d6 	bl	8007d90 <I2C_IsErrorOccurred>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e041      	b.n	8007c72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf4:	d02d      	beq.n	8007c52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf6:	f7fe fbd7 	bl	80063a8 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d302      	bcc.n	8007c0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d122      	bne.n	8007c52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	4013      	ands	r3, r2
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2301      	moveq	r3, #1
 8007c1e:	2300      	movne	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d113      	bne.n	8007c52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c2e:	f043 0220 	orr.w	r2, r3, #32
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e00f      	b.n	8007c72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699a      	ldr	r2, [r3, #24]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	bf0c      	ite	eq
 8007c62:	2301      	moveq	r3, #1
 8007c64:	2300      	movne	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d0b4      	beq.n	8007bda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c86:	e033      	b.n	8007cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	68b9      	ldr	r1, [r7, #8]
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f87f 	bl	8007d90 <I2C_IsErrorOccurred>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e031      	b.n	8007d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d025      	beq.n	8007cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca4:	f7fe fb80 	bl	80063a8 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d302      	bcc.n	8007cba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d11a      	bne.n	8007cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d013      	beq.n	8007cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ccc:	f043 0220 	orr.w	r2, r3, #32
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e007      	b.n	8007d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d1c4      	bne.n	8007c88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d14:	e02f      	b.n	8007d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f838 	bl	8007d90 <I2C_IsErrorOccurred>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e02d      	b.n	8007d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d2a:	f7fe fb3d 	bl	80063a8 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d302      	bcc.n	8007d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d11a      	bne.n	8007d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d013      	beq.n	8007d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d52:	f043 0220 	orr.w	r2, r3, #32
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e007      	b.n	8007d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	d1c8      	bne.n	8007d16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	@ 0x28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d068      	beq.n	8007e8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2210      	movs	r2, #16
 8007dc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007dc4:	e049      	b.n	8007e5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dcc:	d045      	beq.n	8007e5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007dce:	f7fe faeb 	bl	80063a8 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d302      	bcc.n	8007de4 <I2C_IsErrorOccurred+0x54>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d13a      	bne.n	8007e5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007df6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e06:	d121      	bne.n	8007e4c <I2C_IsErrorOccurred+0xbc>
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e0e:	d01d      	beq.n	8007e4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007e10:	7cfb      	ldrb	r3, [r7, #19]
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d01a      	beq.n	8007e4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007e26:	f7fe fabf 	bl	80063a8 <HAL_GetTick>
 8007e2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e2c:	e00e      	b.n	8007e4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007e2e:	f7fe fabb 	bl	80063a8 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b19      	cmp	r3, #25
 8007e3a:	d907      	bls.n	8007e4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	f043 0320 	orr.w	r3, r3, #32
 8007e42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007e4a:	e006      	b.n	8007e5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	d1e9      	bne.n	8007e2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	f003 0320 	and.w	r3, r3, #32
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d003      	beq.n	8007e70 <I2C_IsErrorOccurred+0xe0>
 8007e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0aa      	beq.n	8007dc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d103      	bne.n	8007e80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	f043 0304 	orr.w	r3, r3, #4
 8007e86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	f043 0308 	orr.w	r3, r3, #8
 8007ec8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ed2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	f043 0302 	orr.w	r3, r3, #2
 8007eea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01c      	beq.n	8007f3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff fe3b 	bl	8007b80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6859      	ldr	r1, [r3, #4]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	4b0d      	ldr	r3, [pc, #52]	@ (8007f4c <I2C_IsErrorOccurred+0x1bc>)
 8007f16:	400b      	ands	r3, r1
 8007f18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	431a      	orrs	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3728      	adds	r7, #40	@ 0x28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	fe00e800 	.word	0xfe00e800

08007f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	817b      	strh	r3, [r7, #10]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f62:	897b      	ldrh	r3, [r7, #10]
 8007f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f68:	7a7b      	ldrb	r3, [r7, #9]
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f70:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f7e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	0d5b      	lsrs	r3, r3, #21
 8007f8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007f8e:	4b08      	ldr	r3, [pc, #32]	@ (8007fb0 <I2C_TransferConfig+0x60>)
 8007f90:	430b      	orrs	r3, r1
 8007f92:	43db      	mvns	r3, r3
 8007f94:	ea02 0103 	and.w	r1, r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	03ff63ff 	.word	0x03ff63ff

08007fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	d138      	bne.n	800803c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d101      	bne.n	8007fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e032      	b.n	800803e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2224      	movs	r2, #36	@ 0x24
 8007fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0201 	bic.w	r2, r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6819      	ldr	r1, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0201 	orr.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	e000      	b.n	800803e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b20      	cmp	r3, #32
 800805e:	d139      	bne.n	80080d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800806a:	2302      	movs	r3, #2
 800806c:	e033      	b.n	80080d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2224      	movs	r2, #36	@ 0x24
 800807a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0201 	bic.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800809c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	e000      	b.n	80080d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080d4:	2302      	movs	r3, #2
  }
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b086      	sub	sp, #24
 80080e6:	af02      	add	r7, sp, #8
 80080e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e108      	b.n	8008306 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fd ff4e 	bl	8005fb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2203      	movs	r2, #3
 8008118:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008122:	d102      	bne.n	800812a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f001 ff3c 	bl	8009fac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	7c1a      	ldrb	r2, [r3, #16]
 800813c:	f88d 2000 	strb.w	r2, [sp]
 8008140:	3304      	adds	r3, #4
 8008142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008144:	f001 fed8 	bl	8009ef8 <USB_CoreInit>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e0d5      	b.n	8008306 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2100      	movs	r1, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f001 ff34 	bl	8009fce <USB_SetCurrentMode>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e0c6      	b.n	8008306 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]
 800817c:	e04a      	b.n	8008214 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800817e:	7bfa      	ldrb	r2, [r7, #15]
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	4613      	mov	r3, r2
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	440b      	add	r3, r1
 800818c:	3315      	adds	r3, #21
 800818e:	2201      	movs	r2, #1
 8008190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008192:	7bfa      	ldrb	r2, [r7, #15]
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	4613      	mov	r3, r2
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	4413      	add	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	440b      	add	r3, r1
 80081a0:	3314      	adds	r3, #20
 80081a2:	7bfa      	ldrb	r2, [r7, #15]
 80081a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80081a6:	7bfa      	ldrb	r2, [r7, #15]
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	b298      	uxth	r0, r3
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4613      	mov	r3, r2
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	440b      	add	r3, r1
 80081b8:	332e      	adds	r3, #46	@ 0x2e
 80081ba:	4602      	mov	r2, r0
 80081bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80081be:	7bfa      	ldrb	r2, [r7, #15]
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	3318      	adds	r3, #24
 80081ce:	2200      	movs	r2, #0
 80081d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80081d2:	7bfa      	ldrb	r2, [r7, #15]
 80081d4:	6879      	ldr	r1, [r7, #4]
 80081d6:	4613      	mov	r3, r2
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	440b      	add	r3, r1
 80081e0:	331c      	adds	r3, #28
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80081e6:	7bfa      	ldrb	r2, [r7, #15]
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	3320      	adds	r3, #32
 80081f6:	2200      	movs	r2, #0
 80081f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80081fa:	7bfa      	ldrb	r2, [r7, #15]
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	4613      	mov	r3, r2
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	440b      	add	r3, r1
 8008208:	3324      	adds	r3, #36	@ 0x24
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	3301      	adds	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	791b      	ldrb	r3, [r3, #4]
 8008218:	7bfa      	ldrb	r2, [r7, #15]
 800821a:	429a      	cmp	r2, r3
 800821c:	d3af      	bcc.n	800817e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
 8008222:	e044      	b.n	80082ae <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008224:	7bfa      	ldrb	r2, [r7, #15]
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008236:	2200      	movs	r2, #0
 8008238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800823a:	7bfa      	ldrb	r2, [r7, #15]
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	4613      	mov	r3, r2
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	440b      	add	r3, r1
 8008248:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800824c:	7bfa      	ldrb	r2, [r7, #15]
 800824e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008250:	7bfa      	ldrb	r2, [r7, #15]
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	4613      	mov	r3, r2
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008266:	7bfa      	ldrb	r2, [r7, #15]
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	440b      	add	r3, r1
 8008274:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800827c:	7bfa      	ldrb	r2, [r7, #15]
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	4613      	mov	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	440b      	add	r3, r1
 800828a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008292:	7bfa      	ldrb	r2, [r7, #15]
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	3301      	adds	r3, #1
 80082ac:	73fb      	strb	r3, [r7, #15]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	791b      	ldrb	r3, [r3, #4]
 80082b2:	7bfa      	ldrb	r2, [r7, #15]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d3b5      	bcc.n	8008224 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7c1a      	ldrb	r2, [r3, #16]
 80082c0:	f88d 2000 	strb.w	r2, [sp]
 80082c4:	3304      	adds	r3, #4
 80082c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082c8:	f001 fece 	bl	800a068 <USB_DevInit>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d005      	beq.n	80082de <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e013      	b.n	8008306 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7b1b      	ldrb	r3, [r3, #12]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d102      	bne.n	80082fa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f80b 	bl	8008310 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4618      	mov	r0, r3
 8008300:	f002 f889 	bl	800a416 <USB_DevDisconnect>

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800833e:	4b05      	ldr	r3, [pc, #20]	@ (8008354 <HAL_PCDEx_ActivateLPM+0x44>)
 8008340:	4313      	orrs	r3, r2
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	10000003 	.word	0x10000003

08008358 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a04      	ldr	r2, [pc, #16]	@ (8008374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008366:	6013      	str	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40007000 	.word	0x40007000

08008378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008380:	2300      	movs	r3, #0
 8008382:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e291      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 8087 	beq.w	80084aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800839c:	4b96      	ldr	r3, [pc, #600]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f003 030c 	and.w	r3, r3, #12
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d00c      	beq.n	80083c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083a8:	4b93      	ldr	r3, [pc, #588]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f003 030c 	and.w	r3, r3, #12
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d112      	bne.n	80083da <HAL_RCC_OscConfig+0x62>
 80083b4:	4b90      	ldr	r3, [pc, #576]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083c0:	d10b      	bne.n	80083da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c2:	4b8d      	ldr	r3, [pc, #564]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d06c      	beq.n	80084a8 <HAL_RCC_OscConfig+0x130>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d168      	bne.n	80084a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e26b      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e2:	d106      	bne.n	80083f2 <HAL_RCC_OscConfig+0x7a>
 80083e4:	4b84      	ldr	r3, [pc, #528]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a83      	ldr	r2, [pc, #524]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80083ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	e02e      	b.n	8008450 <HAL_RCC_OscConfig+0xd8>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10c      	bne.n	8008414 <HAL_RCC_OscConfig+0x9c>
 80083fa:	4b7f      	ldr	r3, [pc, #508]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a7e      	ldr	r2, [pc, #504]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	4b7c      	ldr	r3, [pc, #496]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a7b      	ldr	r2, [pc, #492]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 800840c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	e01d      	b.n	8008450 <HAL_RCC_OscConfig+0xd8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800841c:	d10c      	bne.n	8008438 <HAL_RCC_OscConfig+0xc0>
 800841e:	4b76      	ldr	r3, [pc, #472]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a75      	ldr	r2, [pc, #468]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	4b73      	ldr	r3, [pc, #460]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a72      	ldr	r2, [pc, #456]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	e00b      	b.n	8008450 <HAL_RCC_OscConfig+0xd8>
 8008438:	4b6f      	ldr	r3, [pc, #444]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a6e      	ldr	r2, [pc, #440]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 800843e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	4b6c      	ldr	r3, [pc, #432]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a6b      	ldr	r2, [pc, #428]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 800844a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800844e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d013      	beq.n	8008480 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008458:	f7fd ffa6 	bl	80063a8 <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008460:	f7fd ffa2 	bl	80063a8 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b64      	cmp	r3, #100	@ 0x64
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e21f      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008472:	4b61      	ldr	r3, [pc, #388]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0f0      	beq.n	8008460 <HAL_RCC_OscConfig+0xe8>
 800847e:	e014      	b.n	80084aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008480:	f7fd ff92 	bl	80063a8 <HAL_GetTick>
 8008484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008486:	e008      	b.n	800849a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008488:	f7fd ff8e 	bl	80063a8 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b64      	cmp	r3, #100	@ 0x64
 8008494:	d901      	bls.n	800849a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e20b      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800849a:	4b57      	ldr	r3, [pc, #348]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f0      	bne.n	8008488 <HAL_RCC_OscConfig+0x110>
 80084a6:	e000      	b.n	80084aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d069      	beq.n	800858a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80084b6:	4b50      	ldr	r3, [pc, #320]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 030c 	and.w	r3, r3, #12
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00b      	beq.n	80084da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084c2:	4b4d      	ldr	r3, [pc, #308]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 030c 	and.w	r3, r3, #12
 80084ca:	2b08      	cmp	r3, #8
 80084cc:	d11c      	bne.n	8008508 <HAL_RCC_OscConfig+0x190>
 80084ce:	4b4a      	ldr	r3, [pc, #296]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d116      	bne.n	8008508 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084da:	4b47      	ldr	r3, [pc, #284]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <HAL_RCC_OscConfig+0x17a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d001      	beq.n	80084f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e1df      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f2:	4b41      	ldr	r3, [pc, #260]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	493d      	ldr	r1, [pc, #244]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008502:	4313      	orrs	r3, r2
 8008504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008506:	e040      	b.n	800858a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d023      	beq.n	8008558 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008510:	4b39      	ldr	r3, [pc, #228]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a38      	ldr	r2, [pc, #224]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008516:	f043 0301 	orr.w	r3, r3, #1
 800851a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851c:	f7fd ff44 	bl	80063a8 <HAL_GetTick>
 8008520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008524:	f7fd ff40 	bl	80063a8 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e1bd      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008536:	4b30      	ldr	r3, [pc, #192]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0f0      	beq.n	8008524 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008542:	4b2d      	ldr	r3, [pc, #180]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	4929      	ldr	r1, [pc, #164]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008552:	4313      	orrs	r3, r2
 8008554:	600b      	str	r3, [r1, #0]
 8008556:	e018      	b.n	800858a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008558:	4b27      	ldr	r3, [pc, #156]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a26      	ldr	r2, [pc, #152]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008564:	f7fd ff20 	bl	80063a8 <HAL_GetTick>
 8008568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800856a:	e008      	b.n	800857e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800856c:	f7fd ff1c 	bl	80063a8 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b02      	cmp	r3, #2
 8008578:	d901      	bls.n	800857e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e199      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800857e:	4b1e      	ldr	r3, [pc, #120]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1f0      	bne.n	800856c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d038      	beq.n	8008608 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d019      	beq.n	80085d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800859e:	4b16      	ldr	r3, [pc, #88]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80085a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085a2:	4a15      	ldr	r2, [pc, #84]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80085a4:	f043 0301 	orr.w	r3, r3, #1
 80085a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085aa:	f7fd fefd 	bl	80063a8 <HAL_GetTick>
 80085ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085b0:	e008      	b.n	80085c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085b2:	f7fd fef9 	bl	80063a8 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d901      	bls.n	80085c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e176      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085c4:	4b0c      	ldr	r3, [pc, #48]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80085c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0f0      	beq.n	80085b2 <HAL_RCC_OscConfig+0x23a>
 80085d0:	e01a      	b.n	8008608 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085d2:	4b09      	ldr	r3, [pc, #36]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80085d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085d6:	4a08      	ldr	r2, [pc, #32]	@ (80085f8 <HAL_RCC_OscConfig+0x280>)
 80085d8:	f023 0301 	bic.w	r3, r3, #1
 80085dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085de:	f7fd fee3 	bl	80063a8 <HAL_GetTick>
 80085e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085e4:	e00a      	b.n	80085fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085e6:	f7fd fedf 	bl	80063a8 <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d903      	bls.n	80085fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e15c      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
 80085f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085fc:	4b91      	ldr	r3, [pc, #580]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80085fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1ee      	bne.n	80085e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80a4 	beq.w	800875e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008616:	4b8b      	ldr	r3, [pc, #556]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10d      	bne.n	800863e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008622:	4b88      	ldr	r3, [pc, #544]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008626:	4a87      	ldr	r2, [pc, #540]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800862c:	6413      	str	r3, [r2, #64]	@ 0x40
 800862e:	4b85      	ldr	r3, [pc, #532]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008636:	60bb      	str	r3, [r7, #8]
 8008638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800863e:	4b82      	ldr	r3, [pc, #520]	@ (8008848 <HAL_RCC_OscConfig+0x4d0>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008646:	2b00      	cmp	r3, #0
 8008648:	d118      	bne.n	800867c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800864a:	4b7f      	ldr	r3, [pc, #508]	@ (8008848 <HAL_RCC_OscConfig+0x4d0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a7e      	ldr	r2, [pc, #504]	@ (8008848 <HAL_RCC_OscConfig+0x4d0>)
 8008650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008656:	f7fd fea7 	bl	80063a8 <HAL_GetTick>
 800865a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800865c:	e008      	b.n	8008670 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800865e:	f7fd fea3 	bl	80063a8 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b64      	cmp	r3, #100	@ 0x64
 800866a:	d901      	bls.n	8008670 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e120      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008670:	4b75      	ldr	r3, [pc, #468]	@ (8008848 <HAL_RCC_OscConfig+0x4d0>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0f0      	beq.n	800865e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d106      	bne.n	8008692 <HAL_RCC_OscConfig+0x31a>
 8008684:	4b6f      	ldr	r3, [pc, #444]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008688:	4a6e      	ldr	r2, [pc, #440]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008690:	e02d      	b.n	80086ee <HAL_RCC_OscConfig+0x376>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10c      	bne.n	80086b4 <HAL_RCC_OscConfig+0x33c>
 800869a:	4b6a      	ldr	r3, [pc, #424]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 800869c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869e:	4a69      	ldr	r2, [pc, #420]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086a0:	f023 0301 	bic.w	r3, r3, #1
 80086a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80086a6:	4b67      	ldr	r3, [pc, #412]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086aa:	4a66      	ldr	r2, [pc, #408]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086ac:	f023 0304 	bic.w	r3, r3, #4
 80086b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80086b2:	e01c      	b.n	80086ee <HAL_RCC_OscConfig+0x376>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b05      	cmp	r3, #5
 80086ba:	d10c      	bne.n	80086d6 <HAL_RCC_OscConfig+0x35e>
 80086bc:	4b61      	ldr	r3, [pc, #388]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c0:	4a60      	ldr	r2, [pc, #384]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086c2:	f043 0304 	orr.w	r3, r3, #4
 80086c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80086c8:	4b5e      	ldr	r3, [pc, #376]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086cc:	4a5d      	ldr	r2, [pc, #372]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086ce:	f043 0301 	orr.w	r3, r3, #1
 80086d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80086d4:	e00b      	b.n	80086ee <HAL_RCC_OscConfig+0x376>
 80086d6:	4b5b      	ldr	r3, [pc, #364]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	4a5a      	ldr	r2, [pc, #360]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086dc:	f023 0301 	bic.w	r3, r3, #1
 80086e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80086e2:	4b58      	ldr	r3, [pc, #352]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e6:	4a57      	ldr	r2, [pc, #348]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80086e8:	f023 0304 	bic.w	r3, r3, #4
 80086ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d015      	beq.n	8008722 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f6:	f7fd fe57 	bl	80063a8 <HAL_GetTick>
 80086fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086fc:	e00a      	b.n	8008714 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086fe:	f7fd fe53 	bl	80063a8 <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800870c:	4293      	cmp	r3, r2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e0ce      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008714:	4b4b      	ldr	r3, [pc, #300]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0ee      	beq.n	80086fe <HAL_RCC_OscConfig+0x386>
 8008720:	e014      	b.n	800874c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008722:	f7fd fe41 	bl	80063a8 <HAL_GetTick>
 8008726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008728:	e00a      	b.n	8008740 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800872a:	f7fd fe3d 	bl	80063a8 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008738:	4293      	cmp	r3, r2
 800873a:	d901      	bls.n	8008740 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e0b8      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008740:	4b40      	ldr	r3, [pc, #256]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1ee      	bne.n	800872a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d105      	bne.n	800875e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008752:	4b3c      	ldr	r3, [pc, #240]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008756:	4a3b      	ldr	r2, [pc, #236]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800875c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80a4 	beq.w	80088b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008768:	4b36      	ldr	r3, [pc, #216]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f003 030c 	and.w	r3, r3, #12
 8008770:	2b08      	cmp	r3, #8
 8008772:	d06b      	beq.n	800884c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d149      	bne.n	8008810 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800877c:	4b31      	ldr	r3, [pc, #196]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a30      	ldr	r2, [pc, #192]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008788:	f7fd fe0e 	bl	80063a8 <HAL_GetTick>
 800878c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008790:	f7fd fe0a 	bl	80063a8 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e087      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087a2:	4b28      	ldr	r3, [pc, #160]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1f0      	bne.n	8008790 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69da      	ldr	r2, [r3, #28]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087bc:	019b      	lsls	r3, r3, #6
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c4:	085b      	lsrs	r3, r3, #1
 80087c6:	3b01      	subs	r3, #1
 80087c8:	041b      	lsls	r3, r3, #16
 80087ca:	431a      	orrs	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d0:	061b      	lsls	r3, r3, #24
 80087d2:	4313      	orrs	r3, r2
 80087d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80087d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087dc:	4b19      	ldr	r3, [pc, #100]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a18      	ldr	r2, [pc, #96]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 80087e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e8:	f7fd fdde 	bl	80063a8 <HAL_GetTick>
 80087ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f0:	f7fd fdda 	bl	80063a8 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e057      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008802:	4b10      	ldr	r3, [pc, #64]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0f0      	beq.n	80087f0 <HAL_RCC_OscConfig+0x478>
 800880e:	e04f      	b.n	80088b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008810:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a0b      	ldr	r2, [pc, #44]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800881a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881c:	f7fd fdc4 	bl	80063a8 <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008824:	f7fd fdc0 	bl	80063a8 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e03d      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008836:	4b03      	ldr	r3, [pc, #12]	@ (8008844 <HAL_RCC_OscConfig+0x4cc>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x4ac>
 8008842:	e035      	b.n	80088b0 <HAL_RCC_OscConfig+0x538>
 8008844:	40023800 	.word	0x40023800
 8008848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800884c:	4b1b      	ldr	r3, [pc, #108]	@ (80088bc <HAL_RCC_OscConfig+0x544>)
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d028      	beq.n	80088ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008864:	429a      	cmp	r2, r3
 8008866:	d121      	bne.n	80088ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008872:	429a      	cmp	r2, r3
 8008874:	d11a      	bne.n	80088ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800887c:	4013      	ands	r3, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008882:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008884:	4293      	cmp	r3, r2
 8008886:	d111      	bne.n	80088ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008892:	085b      	lsrs	r3, r3, #1
 8008894:	3b01      	subs	r3, #1
 8008896:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008898:	429a      	cmp	r2, r3
 800889a:	d107      	bne.n	80088ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d001      	beq.n	80088b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	40023800 	.word	0x40023800

080088c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e0d0      	b.n	8008a7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088d8:	4b6a      	ldr	r3, [pc, #424]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d910      	bls.n	8008908 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088e6:	4b67      	ldr	r3, [pc, #412]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f023 020f 	bic.w	r2, r3, #15
 80088ee:	4965      	ldr	r1, [pc, #404]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f6:	4b63      	ldr	r3, [pc, #396]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d001      	beq.n	8008908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e0b8      	b.n	8008a7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d020      	beq.n	8008956 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008920:	4b59      	ldr	r3, [pc, #356]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	4a58      	ldr	r2, [pc, #352]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008926:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800892a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0308 	and.w	r3, r3, #8
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008938:	4b53      	ldr	r3, [pc, #332]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	4a52      	ldr	r2, [pc, #328]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 800893e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008942:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008944:	4b50      	ldr	r3, [pc, #320]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	494d      	ldr	r1, [pc, #308]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008952:	4313      	orrs	r3, r2
 8008954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	d040      	beq.n	80089e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d107      	bne.n	800897a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800896a:	4b47      	ldr	r3, [pc, #284]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d115      	bne.n	80089a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e07f      	b.n	8008a7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	2b02      	cmp	r3, #2
 8008980:	d107      	bne.n	8008992 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008982:	4b41      	ldr	r3, [pc, #260]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d109      	bne.n	80089a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e073      	b.n	8008a7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008992:	4b3d      	ldr	r3, [pc, #244]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e06b      	b.n	8008a7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089a2:	4b39      	ldr	r3, [pc, #228]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f023 0203 	bic.w	r2, r3, #3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	4936      	ldr	r1, [pc, #216]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089b4:	f7fd fcf8 	bl	80063a8 <HAL_GetTick>
 80089b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ba:	e00a      	b.n	80089d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089bc:	f7fd fcf4 	bl	80063a8 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e053      	b.n	8008a7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089d2:	4b2d      	ldr	r3, [pc, #180]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 020c 	and.w	r2, r3, #12
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d1eb      	bne.n	80089bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089e4:	4b27      	ldr	r3, [pc, #156]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 030f 	and.w	r3, r3, #15
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d210      	bcs.n	8008a14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089f2:	4b24      	ldr	r3, [pc, #144]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f023 020f 	bic.w	r2, r3, #15
 80089fa:	4922      	ldr	r1, [pc, #136]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a02:	4b20      	ldr	r3, [pc, #128]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d001      	beq.n	8008a14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e032      	b.n	8008a7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d008      	beq.n	8008a32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a20:	4b19      	ldr	r3, [pc, #100]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	4916      	ldr	r1, [pc, #88]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0308 	and.w	r3, r3, #8
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008a3e:	4b12      	ldr	r3, [pc, #72]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	490e      	ldr	r1, [pc, #56]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a52:	f000 f821 	bl	8008a98 <HAL_RCC_GetSysClockFreq>
 8008a56:	4602      	mov	r2, r0
 8008a58:	4b0b      	ldr	r3, [pc, #44]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	091b      	lsrs	r3, r3, #4
 8008a5e:	f003 030f 	and.w	r3, r3, #15
 8008a62:	490a      	ldr	r1, [pc, #40]	@ (8008a8c <HAL_RCC_ClockConfig+0x1cc>)
 8008a64:	5ccb      	ldrb	r3, [r1, r3]
 8008a66:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6a:	4a09      	ldr	r2, [pc, #36]	@ (8008a90 <HAL_RCC_ClockConfig+0x1d0>)
 8008a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008a6e:	4b09      	ldr	r3, [pc, #36]	@ (8008a94 <HAL_RCC_ClockConfig+0x1d4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fd fc54 	bl	8006320 <HAL_InitTick>

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	40023c00 	.word	0x40023c00
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	08010494 	.word	0x08010494
 8008a90:	2000000c 	.word	0x2000000c
 8008a94:	20000010 	.word	0x20000010

08008a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a9c:	b094      	sub	sp, #80	@ 0x50
 8008a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ab0:	4b79      	ldr	r3, [pc, #484]	@ (8008c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f003 030c 	and.w	r3, r3, #12
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d00d      	beq.n	8008ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	f200 80e1 	bhi.w	8008c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0x34>
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d003      	beq.n	8008ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008aca:	e0db      	b.n	8008c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008acc:	4b73      	ldr	r3, [pc, #460]	@ (8008c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8008ace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008ad0:	e0db      	b.n	8008c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ad2:	4b73      	ldr	r3, [pc, #460]	@ (8008ca0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008ad6:	e0d8      	b.n	8008c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8008c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ae0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008ae2:	4b6d      	ldr	r3, [pc, #436]	@ (8008c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d063      	beq.n	8008bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aee:	4b6a      	ldr	r3, [pc, #424]	@ (8008c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	099b      	lsrs	r3, r3, #6
 8008af4:	2200      	movs	r2, #0
 8008af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008af8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b02:	2300      	movs	r3, #0
 8008b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	f04f 0000 	mov.w	r0, #0
 8008b12:	f04f 0100 	mov.w	r1, #0
 8008b16:	0159      	lsls	r1, r3, #5
 8008b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b1c:	0150      	lsls	r0, r2, #5
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4621      	mov	r1, r4
 8008b24:	1a51      	subs	r1, r2, r1
 8008b26:	6139      	str	r1, [r7, #16]
 8008b28:	4629      	mov	r1, r5
 8008b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	f04f 0200 	mov.w	r2, #0
 8008b34:	f04f 0300 	mov.w	r3, #0
 8008b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b3c:	4659      	mov	r1, fp
 8008b3e:	018b      	lsls	r3, r1, #6
 8008b40:	4651      	mov	r1, sl
 8008b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b46:	4651      	mov	r1, sl
 8008b48:	018a      	lsls	r2, r1, #6
 8008b4a:	4651      	mov	r1, sl
 8008b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8008b50:	4659      	mov	r1, fp
 8008b52:	eb63 0901 	sbc.w	r9, r3, r1
 8008b56:	f04f 0200 	mov.w	r2, #0
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b6a:	4690      	mov	r8, r2
 8008b6c:	4699      	mov	r9, r3
 8008b6e:	4623      	mov	r3, r4
 8008b70:	eb18 0303 	adds.w	r3, r8, r3
 8008b74:	60bb      	str	r3, [r7, #8]
 8008b76:	462b      	mov	r3, r5
 8008b78:	eb49 0303 	adc.w	r3, r9, r3
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	f04f 0300 	mov.w	r3, #0
 8008b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	024b      	lsls	r3, r1, #9
 8008b8e:	4621      	mov	r1, r4
 8008b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008b94:	4621      	mov	r1, r4
 8008b96:	024a      	lsls	r2, r1, #9
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ba8:	f7f8 f88e 	bl	8000cc8 <__aeabi_uldivmod>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bb4:	e058      	b.n	8008c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bb6:	4b38      	ldr	r3, [pc, #224]	@ (8008c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	099b      	lsrs	r3, r3, #6
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008bc6:	623b      	str	r3, [r7, #32]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	f04f 0000 	mov.w	r0, #0
 8008bd8:	f04f 0100 	mov.w	r1, #0
 8008bdc:	0159      	lsls	r1, r3, #5
 8008bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008be2:	0150      	lsls	r0, r2, #5
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4641      	mov	r1, r8
 8008bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8008bee:	4649      	mov	r1, r9
 8008bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c08:	ebb2 040a 	subs.w	r4, r2, sl
 8008c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8008c10:	f04f 0200 	mov.w	r2, #0
 8008c14:	f04f 0300 	mov.w	r3, #0
 8008c18:	00eb      	lsls	r3, r5, #3
 8008c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c1e:	00e2      	lsls	r2, r4, #3
 8008c20:	4614      	mov	r4, r2
 8008c22:	461d      	mov	r5, r3
 8008c24:	4643      	mov	r3, r8
 8008c26:	18e3      	adds	r3, r4, r3
 8008c28:	603b      	str	r3, [r7, #0]
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	eb45 0303 	adc.w	r3, r5, r3
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	f04f 0300 	mov.w	r3, #0
 8008c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c3e:	4629      	mov	r1, r5
 8008c40:	028b      	lsls	r3, r1, #10
 8008c42:	4621      	mov	r1, r4
 8008c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c48:	4621      	mov	r1, r4
 8008c4a:	028a      	lsls	r2, r1, #10
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c52:	2200      	movs	r2, #0
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	61fa      	str	r2, [r7, #28]
 8008c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c5c:	f7f8 f834 	bl	8000cc8 <__aeabi_uldivmod>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4613      	mov	r3, r2
 8008c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008c68:	4b0b      	ldr	r3, [pc, #44]	@ (8008c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	0c1b      	lsrs	r3, r3, #16
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	3301      	adds	r3, #1
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008c82:	e002      	b.n	8008c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c84:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8008c86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3750      	adds	r7, #80	@ 0x50
 8008c90:	46bd      	mov	sp, r7
 8008c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c96:	bf00      	nop
 8008c98:	40023800 	.word	0x40023800
 8008c9c:	00f42400 	.word	0x00f42400
 8008ca0:	007a1200 	.word	0x007a1200

08008ca4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ca8:	4b03      	ldr	r3, [pc, #12]	@ (8008cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008caa:	681b      	ldr	r3, [r3, #0]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	2000000c 	.word	0x2000000c

08008cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008cc0:	f7ff fff0 	bl	8008ca4 <HAL_RCC_GetHCLKFreq>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	4b05      	ldr	r3, [pc, #20]	@ (8008cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	0a9b      	lsrs	r3, r3, #10
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	4903      	ldr	r1, [pc, #12]	@ (8008ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cd2:	5ccb      	ldrb	r3, [r1, r3]
 8008cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	40023800 	.word	0x40023800
 8008ce0:	080104a4 	.word	0x080104a4

08008ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ce8:	f7ff ffdc 	bl	8008ca4 <HAL_RCC_GetHCLKFreq>
 8008cec:	4602      	mov	r2, r0
 8008cee:	4b05      	ldr	r3, [pc, #20]	@ (8008d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	0b5b      	lsrs	r3, r3, #13
 8008cf4:	f003 0307 	and.w	r3, r3, #7
 8008cf8:	4903      	ldr	r1, [pc, #12]	@ (8008d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cfa:	5ccb      	ldrb	r3, [r1, r3]
 8008cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	40023800 	.word	0x40023800
 8008d08:	080104a4 	.word	0x080104a4

08008d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d012      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008d34:	4b69      	ldr	r3, [pc, #420]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	4a68      	ldr	r2, [pc, #416]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d3a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008d3e:	6093      	str	r3, [r2, #8]
 8008d40:	4b66      	ldr	r3, [pc, #408]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d48:	4964      	ldr	r1, [pc, #400]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008d56:	2301      	movs	r3, #1
 8008d58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d017      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d66:	4b5d      	ldr	r3, [pc, #372]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d74:	4959      	ldr	r1, [pc, #356]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d84:	d101      	bne.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008d86:	2301      	movs	r3, #1
 8008d88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008d92:	2301      	movs	r3, #1
 8008d94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d017      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008da2:	4b4e      	ldr	r3, [pc, #312]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008da8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db0:	494a      	ldr	r1, [pc, #296]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008dc0:	d101      	bne.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008dde:	2301      	movs	r3, #1
 8008de0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 808b 	beq.w	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008df0:	4b3a      	ldr	r3, [pc, #232]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df4:	4a39      	ldr	r2, [pc, #228]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8008dfc:	4b37      	ldr	r3, [pc, #220]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e04:	60bb      	str	r3, [r7, #8]
 8008e06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008e08:	4b35      	ldr	r3, [pc, #212]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a34      	ldr	r2, [pc, #208]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e14:	f7fd fac8 	bl	80063a8 <HAL_GetTick>
 8008e18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008e1a:	e008      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e1c:	f7fd fac4 	bl	80063a8 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	2b64      	cmp	r3, #100	@ 0x64
 8008e28:	d901      	bls.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e357      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0f0      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e3a:	4b28      	ldr	r3, [pc, #160]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d035      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d02e      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e58:	4b20      	ldr	r3, [pc, #128]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e62:	4b1e      	ldr	r3, [pc, #120]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e66:	4a1d      	ldr	r2, [pc, #116]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e6c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e72:	4a1a      	ldr	r2, [pc, #104]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e78:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008e7a:	4a18      	ldr	r2, [pc, #96]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008e80:	4b16      	ldr	r3, [pc, #88]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d114      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e8c:	f7fd fa8c 	bl	80063a8 <HAL_GetTick>
 8008e90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e92:	e00a      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e94:	f7fd fa88 	bl	80063a8 <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e319      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0ee      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ec2:	d111      	bne.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008ec4:	4b05      	ldr	r3, [pc, #20]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008ed0:	4b04      	ldr	r3, [pc, #16]	@ (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008ed2:	400b      	ands	r3, r1
 8008ed4:	4901      	ldr	r1, [pc, #4]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	608b      	str	r3, [r1, #8]
 8008eda:	e00b      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008edc:	40023800 	.word	0x40023800
 8008ee0:	40007000 	.word	0x40007000
 8008ee4:	0ffffcff 	.word	0x0ffffcff
 8008ee8:	4baa      	ldr	r3, [pc, #680]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	4aa9      	ldr	r2, [pc, #676]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008ef2:	6093      	str	r3, [r2, #8]
 8008ef4:	4ba7      	ldr	r3, [pc, #668]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ef6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f00:	49a4      	ldr	r1, [pc, #656]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0310 	and.w	r3, r3, #16
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d010      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f12:	4ba0      	ldr	r3, [pc, #640]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f18:	4a9e      	ldr	r2, [pc, #632]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008f22:	4b9c      	ldr	r3, [pc, #624]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f24:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2c:	4999      	ldr	r1, [pc, #612]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00a      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f40:	4b94      	ldr	r3, [pc, #592]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f4e:	4991      	ldr	r1, [pc, #580]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f62:	4b8c      	ldr	r3, [pc, #560]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f70:	4988      	ldr	r1, [pc, #544]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00a      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f84:	4b83      	ldr	r3, [pc, #524]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f92:	4980      	ldr	r1, [pc, #512]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fb4:	4977      	ldr	r1, [pc, #476]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008fc8:	4b72      	ldr	r3, [pc, #456]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fce:	f023 0203 	bic.w	r2, r3, #3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fd6:	496f      	ldr	r1, [pc, #444]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008fea:	4b6a      	ldr	r3, [pc, #424]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff0:	f023 020c 	bic.w	r2, r3, #12
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ff8:	4966      	ldr	r1, [pc, #408]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800900c:	4b61      	ldr	r3, [pc, #388]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800900e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009012:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800901a:	495e      	ldr	r1, [pc, #376]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800901c:	4313      	orrs	r3, r2
 800901e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800902e:	4b59      	ldr	r3, [pc, #356]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009034:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800903c:	4955      	ldr	r1, [pc, #340]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800903e:	4313      	orrs	r3, r2
 8009040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00a      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009050:	4b50      	ldr	r3, [pc, #320]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009056:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905e:	494d      	ldr	r1, [pc, #308]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009060:	4313      	orrs	r3, r2
 8009062:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009072:	4b48      	ldr	r3, [pc, #288]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009078:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009080:	4944      	ldr	r1, [pc, #272]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009082:	4313      	orrs	r3, r2
 8009084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00a      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009094:	4b3f      	ldr	r3, [pc, #252]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800909a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090a2:	493c      	ldr	r1, [pc, #240]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090a4:	4313      	orrs	r3, r2
 80090a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80090b6:	4b37      	ldr	r3, [pc, #220]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090c4:	4933      	ldr	r1, [pc, #204]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00a      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090d8:	4b2e      	ldr	r3, [pc, #184]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090de:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090e6:	492b      	ldr	r1, [pc, #172]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d011      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80090fa:	4b26      	ldr	r3, [pc, #152]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009100:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009108:	4922      	ldr	r1, [pc, #136]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009118:	d101      	bne.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800911a:	2301      	movs	r3, #1
 800911c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0308 	and.w	r3, r3, #8
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800912a:	2301      	movs	r3, #1
 800912c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800913a:	4b16      	ldr	r3, [pc, #88]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800913c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009140:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009148:	4912      	ldr	r1, [pc, #72]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800914a:	4313      	orrs	r3, r2
 800914c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00b      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800915c:	4b0d      	ldr	r3, [pc, #52]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800915e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009162:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800916c:	4909      	ldr	r1, [pc, #36]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916e:	4313      	orrs	r3, r2
 8009170:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d006      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 80d9 	beq.w	800933a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009188:	4b02      	ldr	r3, [pc, #8]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a01      	ldr	r2, [pc, #4]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800918e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009192:	e001      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009194:	40023800 	.word	0x40023800
 8009198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800919a:	f7fd f905 	bl	80063a8 <HAL_GetTick>
 800919e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091a0:	e008      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80091a2:	f7fd f901 	bl	80063a8 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	2b64      	cmp	r3, #100	@ 0x64
 80091ae:	d901      	bls.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e194      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091b4:	4b6c      	ldr	r3, [pc, #432]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1f0      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d021      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d11d      	bne.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80091d4:	4b64      	ldr	r3, [pc, #400]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091da:	0c1b      	lsrs	r3, r3, #16
 80091dc:	f003 0303 	and.w	r3, r3, #3
 80091e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80091e2:	4b61      	ldr	r3, [pc, #388]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091e8:	0e1b      	lsrs	r3, r3, #24
 80091ea:	f003 030f 	and.w	r3, r3, #15
 80091ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	019a      	lsls	r2, r3, #6
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	041b      	lsls	r3, r3, #16
 80091fa:	431a      	orrs	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	061b      	lsls	r3, r3, #24
 8009200:	431a      	orrs	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	071b      	lsls	r3, r3, #28
 8009208:	4957      	ldr	r1, [pc, #348]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800920a:	4313      	orrs	r3, r2
 800920c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d004      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009224:	d00a      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800922e:	2b00      	cmp	r3, #0
 8009230:	d02e      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800923a:	d129      	bne.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800923c:	4b4a      	ldr	r3, [pc, #296]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800923e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009242:	0c1b      	lsrs	r3, r3, #16
 8009244:	f003 0303 	and.w	r3, r3, #3
 8009248:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800924a:	4b47      	ldr	r3, [pc, #284]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800924c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009250:	0f1b      	lsrs	r3, r3, #28
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	019a      	lsls	r2, r3, #6
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	041b      	lsls	r3, r3, #16
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	061b      	lsls	r3, r3, #24
 800926a:	431a      	orrs	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	071b      	lsls	r3, r3, #28
 8009270:	493d      	ldr	r1, [pc, #244]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009272:	4313      	orrs	r3, r2
 8009274:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009278:	4b3b      	ldr	r3, [pc, #236]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800927a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800927e:	f023 021f 	bic.w	r2, r3, #31
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009286:	3b01      	subs	r3, #1
 8009288:	4937      	ldr	r1, [pc, #220]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800928a:	4313      	orrs	r3, r2
 800928c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01d      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800929c:	4b32      	ldr	r3, [pc, #200]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800929e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092a2:	0e1b      	lsrs	r3, r3, #24
 80092a4:	f003 030f 	and.w	r3, r3, #15
 80092a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80092aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092b0:	0f1b      	lsrs	r3, r3, #28
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	019a      	lsls	r2, r3, #6
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	041b      	lsls	r3, r3, #16
 80092c4:	431a      	orrs	r2, r3
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	061b      	lsls	r3, r3, #24
 80092ca:	431a      	orrs	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	071b      	lsls	r3, r3, #28
 80092d0:	4925      	ldr	r1, [pc, #148]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d011      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	019a      	lsls	r2, r3, #6
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	041b      	lsls	r3, r3, #16
 80092f0:	431a      	orrs	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	061b      	lsls	r3, r3, #24
 80092f8:	431a      	orrs	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	071b      	lsls	r3, r3, #28
 8009300:	4919      	ldr	r1, [pc, #100]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009302:	4313      	orrs	r3, r2
 8009304:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009308:	4b17      	ldr	r3, [pc, #92]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a16      	ldr	r2, [pc, #88]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800930e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009314:	f7fd f848 	bl	80063a8 <HAL_GetTick>
 8009318:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800931a:	e008      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800931c:	f7fd f844 	bl	80063a8 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	2b64      	cmp	r3, #100	@ 0x64
 8009328:	d901      	bls.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e0d7      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800932e:	4b0e      	ldr	r3, [pc, #56]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0f0      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b01      	cmp	r3, #1
 800933e:	f040 80cd 	bne.w	80094dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009342:	4b09      	ldr	r3, [pc, #36]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a08      	ldr	r2, [pc, #32]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800934c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800934e:	f7fd f82b 	bl	80063a8 <HAL_GetTick>
 8009352:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009354:	e00a      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009356:	f7fd f827 	bl	80063a8 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	2b64      	cmp	r3, #100	@ 0x64
 8009362:	d903      	bls.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e0ba      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009368:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800936c:	4b5e      	ldr	r3, [pc, #376]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009378:	d0ed      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d009      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009396:	2b00      	cmp	r3, #0
 8009398:	d02e      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d12a      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80093a2:	4b51      	ldr	r3, [pc, #324]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a8:	0c1b      	lsrs	r3, r3, #16
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80093b0:	4b4d      	ldr	r3, [pc, #308]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b6:	0f1b      	lsrs	r3, r3, #28
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	019a      	lsls	r2, r3, #6
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	041b      	lsls	r3, r3, #16
 80093c8:	431a      	orrs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	061b      	lsls	r3, r3, #24
 80093d0:	431a      	orrs	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	071b      	lsls	r3, r3, #28
 80093d6:	4944      	ldr	r1, [pc, #272]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80093de:	4b42      	ldr	r3, [pc, #264]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ec:	3b01      	subs	r3, #1
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	493d      	ldr	r1, [pc, #244]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d022      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800940c:	d11d      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800940e:	4b36      	ldr	r3, [pc, #216]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009414:	0e1b      	lsrs	r3, r3, #24
 8009416:	f003 030f 	and.w	r3, r3, #15
 800941a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800941c:	4b32      	ldr	r3, [pc, #200]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800941e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009422:	0f1b      	lsrs	r3, r3, #28
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	019a      	lsls	r2, r3, #6
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	041b      	lsls	r3, r3, #16
 8009436:	431a      	orrs	r2, r3
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	061b      	lsls	r3, r3, #24
 800943c:	431a      	orrs	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	071b      	lsls	r3, r3, #28
 8009442:	4929      	ldr	r1, [pc, #164]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009444:	4313      	orrs	r3, r2
 8009446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0308 	and.w	r3, r3, #8
 8009452:	2b00      	cmp	r3, #0
 8009454:	d028      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009456:	4b24      	ldr	r3, [pc, #144]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800945c:	0e1b      	lsrs	r3, r3, #24
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009464:	4b20      	ldr	r3, [pc, #128]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800946a:	0c1b      	lsrs	r3, r3, #16
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	019a      	lsls	r2, r3, #6
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	041b      	lsls	r3, r3, #16
 800947c:	431a      	orrs	r2, r3
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	061b      	lsls	r3, r3, #24
 8009482:	431a      	orrs	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	071b      	lsls	r3, r3, #28
 800948a:	4917      	ldr	r1, [pc, #92]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800948c:	4313      	orrs	r3, r2
 800948e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009492:	4b15      	ldr	r3, [pc, #84]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a0:	4911      	ldr	r1, [pc, #68]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80094a8:	4b0f      	ldr	r3, [pc, #60]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a0e      	ldr	r2, [pc, #56]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094b4:	f7fc ff78 	bl	80063a8 <HAL_GetTick>
 80094b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094ba:	e008      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80094bc:	f7fc ff74 	bl	80063a8 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	2b64      	cmp	r3, #100	@ 0x64
 80094c8:	d901      	bls.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e007      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094ce:	4b06      	ldr	r3, [pc, #24]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094da:	d1ef      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3720      	adds	r7, #32
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	40023800 	.word	0x40023800

080094ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e040      	b.n	8009580 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7fc fcee 	bl	8005ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2224      	movs	r2, #36	@ 0x24
 8009518:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 0201 	bic.w	r2, r2, #1
 8009528:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fb16 	bl	8009b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f8af 	bl	800969c <UART_SetConfig>
 800953e:	4603      	mov	r3, r0
 8009540:	2b01      	cmp	r3, #1
 8009542:	d101      	bne.n	8009548 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e01b      	b.n	8009580 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689a      	ldr	r2, [r3, #8]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f042 0201 	orr.w	r2, r2, #1
 8009576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fb95 	bl	8009ca8 <UART_CheckIdleState>
 800957e:	4603      	mov	r3, r0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08a      	sub	sp, #40	@ 0x28
 800958c:	af02      	add	r7, sp, #8
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	4613      	mov	r3, r2
 8009596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800959c:	2b20      	cmp	r3, #32
 800959e:	d177      	bne.n	8009690 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <HAL_UART_Transmit+0x24>
 80095a6:	88fb      	ldrh	r3, [r7, #6]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e070      	b.n	8009692 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2221      	movs	r2, #33	@ 0x21
 80095bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095be:	f7fc fef3 	bl	80063a8 <HAL_GetTick>
 80095c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	88fa      	ldrh	r2, [r7, #6]
 80095c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	88fa      	ldrh	r2, [r7, #6]
 80095d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095dc:	d108      	bne.n	80095f0 <HAL_UART_Transmit+0x68>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d104      	bne.n	80095f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	e003      	b.n	80095f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095f4:	2300      	movs	r3, #0
 80095f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80095f8:	e02f      	b.n	800965a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2200      	movs	r2, #0
 8009602:	2180      	movs	r1, #128	@ 0x80
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fba6 	bl	8009d56 <UART_WaitOnFlagUntilTimeout>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2220      	movs	r2, #32
 8009614:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e03b      	b.n	8009692 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	461a      	mov	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800962e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	3302      	adds	r3, #2
 8009634:	61bb      	str	r3, [r7, #24]
 8009636:	e007      	b.n	8009648 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	781a      	ldrb	r2, [r3, #0]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	3301      	adds	r3, #1
 8009646:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800964e:	b29b      	uxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009660:	b29b      	uxth	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1c9      	bne.n	80095fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2200      	movs	r2, #0
 800966e:	2140      	movs	r1, #64	@ 0x40
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 fb70 	bl	8009d56 <UART_WaitOnFlagUntilTimeout>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2220      	movs	r2, #32
 8009680:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e005      	b.n	8009692 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2220      	movs	r2, #32
 800968a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	e000      	b.n	8009692 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009690:	2302      	movs	r3, #2
  }
}
 8009692:	4618      	mov	r0, r3
 8009694:	3720      	adds	r7, #32
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	4313      	orrs	r3, r2
 80096be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	4ba6      	ldr	r3, [pc, #664]	@ (8009960 <UART_SetConfig+0x2c4>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	6979      	ldr	r1, [r7, #20]
 80096d0:	430b      	orrs	r3, r1
 80096d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68da      	ldr	r2, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	430a      	orrs	r2, r1
 800970c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a94      	ldr	r2, [pc, #592]	@ (8009964 <UART_SetConfig+0x2c8>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d120      	bne.n	800975a <UART_SetConfig+0xbe>
 8009718:	4b93      	ldr	r3, [pc, #588]	@ (8009968 <UART_SetConfig+0x2cc>)
 800971a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d816      	bhi.n	8009754 <UART_SetConfig+0xb8>
 8009726:	a201      	add	r2, pc, #4	@ (adr r2, 800972c <UART_SetConfig+0x90>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	0800973d 	.word	0x0800973d
 8009730:	08009749 	.word	0x08009749
 8009734:	08009743 	.word	0x08009743
 8009738:	0800974f 	.word	0x0800974f
 800973c:	2301      	movs	r3, #1
 800973e:	77fb      	strb	r3, [r7, #31]
 8009740:	e150      	b.n	80099e4 <UART_SetConfig+0x348>
 8009742:	2302      	movs	r3, #2
 8009744:	77fb      	strb	r3, [r7, #31]
 8009746:	e14d      	b.n	80099e4 <UART_SetConfig+0x348>
 8009748:	2304      	movs	r3, #4
 800974a:	77fb      	strb	r3, [r7, #31]
 800974c:	e14a      	b.n	80099e4 <UART_SetConfig+0x348>
 800974e:	2308      	movs	r3, #8
 8009750:	77fb      	strb	r3, [r7, #31]
 8009752:	e147      	b.n	80099e4 <UART_SetConfig+0x348>
 8009754:	2310      	movs	r3, #16
 8009756:	77fb      	strb	r3, [r7, #31]
 8009758:	e144      	b.n	80099e4 <UART_SetConfig+0x348>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a83      	ldr	r2, [pc, #524]	@ (800996c <UART_SetConfig+0x2d0>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d132      	bne.n	80097ca <UART_SetConfig+0x12e>
 8009764:	4b80      	ldr	r3, [pc, #512]	@ (8009968 <UART_SetConfig+0x2cc>)
 8009766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800976a:	f003 030c 	and.w	r3, r3, #12
 800976e:	2b0c      	cmp	r3, #12
 8009770:	d828      	bhi.n	80097c4 <UART_SetConfig+0x128>
 8009772:	a201      	add	r2, pc, #4	@ (adr r2, 8009778 <UART_SetConfig+0xdc>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	080097ad 	.word	0x080097ad
 800977c:	080097c5 	.word	0x080097c5
 8009780:	080097c5 	.word	0x080097c5
 8009784:	080097c5 	.word	0x080097c5
 8009788:	080097b9 	.word	0x080097b9
 800978c:	080097c5 	.word	0x080097c5
 8009790:	080097c5 	.word	0x080097c5
 8009794:	080097c5 	.word	0x080097c5
 8009798:	080097b3 	.word	0x080097b3
 800979c:	080097c5 	.word	0x080097c5
 80097a0:	080097c5 	.word	0x080097c5
 80097a4:	080097c5 	.word	0x080097c5
 80097a8:	080097bf 	.word	0x080097bf
 80097ac:	2300      	movs	r3, #0
 80097ae:	77fb      	strb	r3, [r7, #31]
 80097b0:	e118      	b.n	80099e4 <UART_SetConfig+0x348>
 80097b2:	2302      	movs	r3, #2
 80097b4:	77fb      	strb	r3, [r7, #31]
 80097b6:	e115      	b.n	80099e4 <UART_SetConfig+0x348>
 80097b8:	2304      	movs	r3, #4
 80097ba:	77fb      	strb	r3, [r7, #31]
 80097bc:	e112      	b.n	80099e4 <UART_SetConfig+0x348>
 80097be:	2308      	movs	r3, #8
 80097c0:	77fb      	strb	r3, [r7, #31]
 80097c2:	e10f      	b.n	80099e4 <UART_SetConfig+0x348>
 80097c4:	2310      	movs	r3, #16
 80097c6:	77fb      	strb	r3, [r7, #31]
 80097c8:	e10c      	b.n	80099e4 <UART_SetConfig+0x348>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a68      	ldr	r2, [pc, #416]	@ (8009970 <UART_SetConfig+0x2d4>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d120      	bne.n	8009816 <UART_SetConfig+0x17a>
 80097d4:	4b64      	ldr	r3, [pc, #400]	@ (8009968 <UART_SetConfig+0x2cc>)
 80097d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80097de:	2b30      	cmp	r3, #48	@ 0x30
 80097e0:	d013      	beq.n	800980a <UART_SetConfig+0x16e>
 80097e2:	2b30      	cmp	r3, #48	@ 0x30
 80097e4:	d814      	bhi.n	8009810 <UART_SetConfig+0x174>
 80097e6:	2b20      	cmp	r3, #32
 80097e8:	d009      	beq.n	80097fe <UART_SetConfig+0x162>
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	d810      	bhi.n	8009810 <UART_SetConfig+0x174>
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <UART_SetConfig+0x15c>
 80097f2:	2b10      	cmp	r3, #16
 80097f4:	d006      	beq.n	8009804 <UART_SetConfig+0x168>
 80097f6:	e00b      	b.n	8009810 <UART_SetConfig+0x174>
 80097f8:	2300      	movs	r3, #0
 80097fa:	77fb      	strb	r3, [r7, #31]
 80097fc:	e0f2      	b.n	80099e4 <UART_SetConfig+0x348>
 80097fe:	2302      	movs	r3, #2
 8009800:	77fb      	strb	r3, [r7, #31]
 8009802:	e0ef      	b.n	80099e4 <UART_SetConfig+0x348>
 8009804:	2304      	movs	r3, #4
 8009806:	77fb      	strb	r3, [r7, #31]
 8009808:	e0ec      	b.n	80099e4 <UART_SetConfig+0x348>
 800980a:	2308      	movs	r3, #8
 800980c:	77fb      	strb	r3, [r7, #31]
 800980e:	e0e9      	b.n	80099e4 <UART_SetConfig+0x348>
 8009810:	2310      	movs	r3, #16
 8009812:	77fb      	strb	r3, [r7, #31]
 8009814:	e0e6      	b.n	80099e4 <UART_SetConfig+0x348>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a56      	ldr	r2, [pc, #344]	@ (8009974 <UART_SetConfig+0x2d8>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d120      	bne.n	8009862 <UART_SetConfig+0x1c6>
 8009820:	4b51      	ldr	r3, [pc, #324]	@ (8009968 <UART_SetConfig+0x2cc>)
 8009822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009826:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800982a:	2bc0      	cmp	r3, #192	@ 0xc0
 800982c:	d013      	beq.n	8009856 <UART_SetConfig+0x1ba>
 800982e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009830:	d814      	bhi.n	800985c <UART_SetConfig+0x1c0>
 8009832:	2b80      	cmp	r3, #128	@ 0x80
 8009834:	d009      	beq.n	800984a <UART_SetConfig+0x1ae>
 8009836:	2b80      	cmp	r3, #128	@ 0x80
 8009838:	d810      	bhi.n	800985c <UART_SetConfig+0x1c0>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <UART_SetConfig+0x1a8>
 800983e:	2b40      	cmp	r3, #64	@ 0x40
 8009840:	d006      	beq.n	8009850 <UART_SetConfig+0x1b4>
 8009842:	e00b      	b.n	800985c <UART_SetConfig+0x1c0>
 8009844:	2300      	movs	r3, #0
 8009846:	77fb      	strb	r3, [r7, #31]
 8009848:	e0cc      	b.n	80099e4 <UART_SetConfig+0x348>
 800984a:	2302      	movs	r3, #2
 800984c:	77fb      	strb	r3, [r7, #31]
 800984e:	e0c9      	b.n	80099e4 <UART_SetConfig+0x348>
 8009850:	2304      	movs	r3, #4
 8009852:	77fb      	strb	r3, [r7, #31]
 8009854:	e0c6      	b.n	80099e4 <UART_SetConfig+0x348>
 8009856:	2308      	movs	r3, #8
 8009858:	77fb      	strb	r3, [r7, #31]
 800985a:	e0c3      	b.n	80099e4 <UART_SetConfig+0x348>
 800985c:	2310      	movs	r3, #16
 800985e:	77fb      	strb	r3, [r7, #31]
 8009860:	e0c0      	b.n	80099e4 <UART_SetConfig+0x348>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a44      	ldr	r2, [pc, #272]	@ (8009978 <UART_SetConfig+0x2dc>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d125      	bne.n	80098b8 <UART_SetConfig+0x21c>
 800986c:	4b3e      	ldr	r3, [pc, #248]	@ (8009968 <UART_SetConfig+0x2cc>)
 800986e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009876:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800987a:	d017      	beq.n	80098ac <UART_SetConfig+0x210>
 800987c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009880:	d817      	bhi.n	80098b2 <UART_SetConfig+0x216>
 8009882:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009886:	d00b      	beq.n	80098a0 <UART_SetConfig+0x204>
 8009888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800988c:	d811      	bhi.n	80098b2 <UART_SetConfig+0x216>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <UART_SetConfig+0x1fe>
 8009892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009896:	d006      	beq.n	80098a6 <UART_SetConfig+0x20a>
 8009898:	e00b      	b.n	80098b2 <UART_SetConfig+0x216>
 800989a:	2300      	movs	r3, #0
 800989c:	77fb      	strb	r3, [r7, #31]
 800989e:	e0a1      	b.n	80099e4 <UART_SetConfig+0x348>
 80098a0:	2302      	movs	r3, #2
 80098a2:	77fb      	strb	r3, [r7, #31]
 80098a4:	e09e      	b.n	80099e4 <UART_SetConfig+0x348>
 80098a6:	2304      	movs	r3, #4
 80098a8:	77fb      	strb	r3, [r7, #31]
 80098aa:	e09b      	b.n	80099e4 <UART_SetConfig+0x348>
 80098ac:	2308      	movs	r3, #8
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e098      	b.n	80099e4 <UART_SetConfig+0x348>
 80098b2:	2310      	movs	r3, #16
 80098b4:	77fb      	strb	r3, [r7, #31]
 80098b6:	e095      	b.n	80099e4 <UART_SetConfig+0x348>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a2f      	ldr	r2, [pc, #188]	@ (800997c <UART_SetConfig+0x2e0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d125      	bne.n	800990e <UART_SetConfig+0x272>
 80098c2:	4b29      	ldr	r3, [pc, #164]	@ (8009968 <UART_SetConfig+0x2cc>)
 80098c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80098cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098d0:	d017      	beq.n	8009902 <UART_SetConfig+0x266>
 80098d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098d6:	d817      	bhi.n	8009908 <UART_SetConfig+0x26c>
 80098d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098dc:	d00b      	beq.n	80098f6 <UART_SetConfig+0x25a>
 80098de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098e2:	d811      	bhi.n	8009908 <UART_SetConfig+0x26c>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <UART_SetConfig+0x254>
 80098e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098ec:	d006      	beq.n	80098fc <UART_SetConfig+0x260>
 80098ee:	e00b      	b.n	8009908 <UART_SetConfig+0x26c>
 80098f0:	2301      	movs	r3, #1
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	e076      	b.n	80099e4 <UART_SetConfig+0x348>
 80098f6:	2302      	movs	r3, #2
 80098f8:	77fb      	strb	r3, [r7, #31]
 80098fa:	e073      	b.n	80099e4 <UART_SetConfig+0x348>
 80098fc:	2304      	movs	r3, #4
 80098fe:	77fb      	strb	r3, [r7, #31]
 8009900:	e070      	b.n	80099e4 <UART_SetConfig+0x348>
 8009902:	2308      	movs	r3, #8
 8009904:	77fb      	strb	r3, [r7, #31]
 8009906:	e06d      	b.n	80099e4 <UART_SetConfig+0x348>
 8009908:	2310      	movs	r3, #16
 800990a:	77fb      	strb	r3, [r7, #31]
 800990c:	e06a      	b.n	80099e4 <UART_SetConfig+0x348>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a1b      	ldr	r2, [pc, #108]	@ (8009980 <UART_SetConfig+0x2e4>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d138      	bne.n	800998a <UART_SetConfig+0x2ee>
 8009918:	4b13      	ldr	r3, [pc, #76]	@ (8009968 <UART_SetConfig+0x2cc>)
 800991a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009922:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009926:	d017      	beq.n	8009958 <UART_SetConfig+0x2bc>
 8009928:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800992c:	d82a      	bhi.n	8009984 <UART_SetConfig+0x2e8>
 800992e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009932:	d00b      	beq.n	800994c <UART_SetConfig+0x2b0>
 8009934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009938:	d824      	bhi.n	8009984 <UART_SetConfig+0x2e8>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <UART_SetConfig+0x2aa>
 800993e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009942:	d006      	beq.n	8009952 <UART_SetConfig+0x2b6>
 8009944:	e01e      	b.n	8009984 <UART_SetConfig+0x2e8>
 8009946:	2300      	movs	r3, #0
 8009948:	77fb      	strb	r3, [r7, #31]
 800994a:	e04b      	b.n	80099e4 <UART_SetConfig+0x348>
 800994c:	2302      	movs	r3, #2
 800994e:	77fb      	strb	r3, [r7, #31]
 8009950:	e048      	b.n	80099e4 <UART_SetConfig+0x348>
 8009952:	2304      	movs	r3, #4
 8009954:	77fb      	strb	r3, [r7, #31]
 8009956:	e045      	b.n	80099e4 <UART_SetConfig+0x348>
 8009958:	2308      	movs	r3, #8
 800995a:	77fb      	strb	r3, [r7, #31]
 800995c:	e042      	b.n	80099e4 <UART_SetConfig+0x348>
 800995e:	bf00      	nop
 8009960:	efff69f3 	.word	0xefff69f3
 8009964:	40011000 	.word	0x40011000
 8009968:	40023800 	.word	0x40023800
 800996c:	40004400 	.word	0x40004400
 8009970:	40004800 	.word	0x40004800
 8009974:	40004c00 	.word	0x40004c00
 8009978:	40005000 	.word	0x40005000
 800997c:	40011400 	.word	0x40011400
 8009980:	40007800 	.word	0x40007800
 8009984:	2310      	movs	r3, #16
 8009986:	77fb      	strb	r3, [r7, #31]
 8009988:	e02c      	b.n	80099e4 <UART_SetConfig+0x348>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a72      	ldr	r2, [pc, #456]	@ (8009b58 <UART_SetConfig+0x4bc>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d125      	bne.n	80099e0 <UART_SetConfig+0x344>
 8009994:	4b71      	ldr	r3, [pc, #452]	@ (8009b5c <UART_SetConfig+0x4c0>)
 8009996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800999a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800999e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80099a2:	d017      	beq.n	80099d4 <UART_SetConfig+0x338>
 80099a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80099a8:	d817      	bhi.n	80099da <UART_SetConfig+0x33e>
 80099aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099ae:	d00b      	beq.n	80099c8 <UART_SetConfig+0x32c>
 80099b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099b4:	d811      	bhi.n	80099da <UART_SetConfig+0x33e>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <UART_SetConfig+0x326>
 80099ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099be:	d006      	beq.n	80099ce <UART_SetConfig+0x332>
 80099c0:	e00b      	b.n	80099da <UART_SetConfig+0x33e>
 80099c2:	2300      	movs	r3, #0
 80099c4:	77fb      	strb	r3, [r7, #31]
 80099c6:	e00d      	b.n	80099e4 <UART_SetConfig+0x348>
 80099c8:	2302      	movs	r3, #2
 80099ca:	77fb      	strb	r3, [r7, #31]
 80099cc:	e00a      	b.n	80099e4 <UART_SetConfig+0x348>
 80099ce:	2304      	movs	r3, #4
 80099d0:	77fb      	strb	r3, [r7, #31]
 80099d2:	e007      	b.n	80099e4 <UART_SetConfig+0x348>
 80099d4:	2308      	movs	r3, #8
 80099d6:	77fb      	strb	r3, [r7, #31]
 80099d8:	e004      	b.n	80099e4 <UART_SetConfig+0x348>
 80099da:	2310      	movs	r3, #16
 80099dc:	77fb      	strb	r3, [r7, #31]
 80099de:	e001      	b.n	80099e4 <UART_SetConfig+0x348>
 80099e0:	2310      	movs	r3, #16
 80099e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099ec:	d15b      	bne.n	8009aa6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80099ee:	7ffb      	ldrb	r3, [r7, #31]
 80099f0:	2b08      	cmp	r3, #8
 80099f2:	d828      	bhi.n	8009a46 <UART_SetConfig+0x3aa>
 80099f4:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <UART_SetConfig+0x360>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a21 	.word	0x08009a21
 8009a00:	08009a29 	.word	0x08009a29
 8009a04:	08009a31 	.word	0x08009a31
 8009a08:	08009a47 	.word	0x08009a47
 8009a0c:	08009a37 	.word	0x08009a37
 8009a10:	08009a47 	.word	0x08009a47
 8009a14:	08009a47 	.word	0x08009a47
 8009a18:	08009a47 	.word	0x08009a47
 8009a1c:	08009a3f 	.word	0x08009a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a20:	f7ff f94c 	bl	8008cbc <HAL_RCC_GetPCLK1Freq>
 8009a24:	61b8      	str	r0, [r7, #24]
        break;
 8009a26:	e013      	b.n	8009a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a28:	f7ff f95c 	bl	8008ce4 <HAL_RCC_GetPCLK2Freq>
 8009a2c:	61b8      	str	r0, [r7, #24]
        break;
 8009a2e:	e00f      	b.n	8009a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a30:	4b4b      	ldr	r3, [pc, #300]	@ (8009b60 <UART_SetConfig+0x4c4>)
 8009a32:	61bb      	str	r3, [r7, #24]
        break;
 8009a34:	e00c      	b.n	8009a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a36:	f7ff f82f 	bl	8008a98 <HAL_RCC_GetSysClockFreq>
 8009a3a:	61b8      	str	r0, [r7, #24]
        break;
 8009a3c:	e008      	b.n	8009a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a42:	61bb      	str	r3, [r7, #24]
        break;
 8009a44:	e004      	b.n	8009a50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8009a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d074      	beq.n	8009b40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	005a      	lsls	r2, r3, #1
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	085b      	lsrs	r3, r3, #1
 8009a60:	441a      	add	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b0f      	cmp	r3, #15
 8009a70:	d916      	bls.n	8009aa0 <UART_SetConfig+0x404>
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a78:	d212      	bcs.n	8009aa0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	f023 030f 	bic.w	r3, r3, #15
 8009a82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	085b      	lsrs	r3, r3, #1
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	89fb      	ldrh	r3, [r7, #14]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	89fa      	ldrh	r2, [r7, #14]
 8009a9c:	60da      	str	r2, [r3, #12]
 8009a9e:	e04f      	b.n	8009b40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	77bb      	strb	r3, [r7, #30]
 8009aa4:	e04c      	b.n	8009b40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009aa6:	7ffb      	ldrb	r3, [r7, #31]
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d828      	bhi.n	8009afe <UART_SetConfig+0x462>
 8009aac:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab4 <UART_SetConfig+0x418>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ad9 	.word	0x08009ad9
 8009ab8:	08009ae1 	.word	0x08009ae1
 8009abc:	08009ae9 	.word	0x08009ae9
 8009ac0:	08009aff 	.word	0x08009aff
 8009ac4:	08009aef 	.word	0x08009aef
 8009ac8:	08009aff 	.word	0x08009aff
 8009acc:	08009aff 	.word	0x08009aff
 8009ad0:	08009aff 	.word	0x08009aff
 8009ad4:	08009af7 	.word	0x08009af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ad8:	f7ff f8f0 	bl	8008cbc <HAL_RCC_GetPCLK1Freq>
 8009adc:	61b8      	str	r0, [r7, #24]
        break;
 8009ade:	e013      	b.n	8009b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ae0:	f7ff f900 	bl	8008ce4 <HAL_RCC_GetPCLK2Freq>
 8009ae4:	61b8      	str	r0, [r7, #24]
        break;
 8009ae6:	e00f      	b.n	8009b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8009b60 <UART_SetConfig+0x4c4>)
 8009aea:	61bb      	str	r3, [r7, #24]
        break;
 8009aec:	e00c      	b.n	8009b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aee:	f7fe ffd3 	bl	8008a98 <HAL_RCC_GetSysClockFreq>
 8009af2:	61b8      	str	r0, [r7, #24]
        break;
 8009af4:	e008      	b.n	8009b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009afa:	61bb      	str	r3, [r7, #24]
        break;
 8009afc:	e004      	b.n	8009b08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	77bb      	strb	r3, [r7, #30]
        break;
 8009b06:	bf00      	nop
    }

    if (pclk != 0U)
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d018      	beq.n	8009b40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	085a      	lsrs	r2, r3, #1
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	441a      	add	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	2b0f      	cmp	r3, #15
 8009b26:	d909      	bls.n	8009b3c <UART_SetConfig+0x4a0>
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b2e:	d205      	bcs.n	8009b3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60da      	str	r2, [r3, #12]
 8009b3a:	e001      	b.n	8009b40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009b4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	40007c00 	.word	0x40007c00
 8009b5c:	40023800 	.word	0x40023800
 8009b60:	00f42400 	.word	0x00f42400

08009b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf8:	f003 0310 	and.w	r3, r3, #16
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01a      	beq.n	8009c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c62:	d10a      	bne.n	8009c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	430a      	orrs	r2, r1
 8009c9a:	605a      	str	r2, [r3, #4]
  }
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08c      	sub	sp, #48	@ 0x30
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cb8:	f7fc fb76 	bl	80063a8 <HAL_GetTick>
 8009cbc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0308 	and.w	r3, r3, #8
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	d12e      	bne.n	8009d2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f83b 	bl	8009d56 <UART_WaitOnFlagUntilTimeout>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d021      	beq.n	8009d2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cfa:	623b      	str	r3, [r7, #32]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	69b9      	ldr	r1, [r7, #24]
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	617b      	str	r3, [r7, #20]
   return(result);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e6      	bne.n	8009ce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e011      	b.n	8009d4e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2220      	movs	r2, #32
 8009d2e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2220      	movs	r2, #32
 8009d34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3728      	adds	r7, #40	@ 0x28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	60f8      	str	r0, [r7, #12]
 8009d5e:	60b9      	str	r1, [r7, #8]
 8009d60:	603b      	str	r3, [r7, #0]
 8009d62:	4613      	mov	r3, r2
 8009d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d66:	e04f      	b.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6e:	d04b      	beq.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d70:	f7fc fb1a 	bl	80063a8 <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d302      	bcc.n	8009d86 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e04e      	b.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d037      	beq.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b80      	cmp	r3, #128	@ 0x80
 8009d9c:	d034      	beq.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b40      	cmp	r3, #64	@ 0x40
 8009da2:	d031      	beq.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	69db      	ldr	r3, [r3, #28]
 8009daa:	f003 0308 	and.w	r3, r3, #8
 8009dae:	2b08      	cmp	r3, #8
 8009db0:	d110      	bne.n	8009dd4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2208      	movs	r2, #8
 8009db8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f838 	bl	8009e30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2208      	movs	r2, #8
 8009dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e029      	b.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009de2:	d111      	bne.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009dec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f81e 	bl	8009e30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e00f      	b.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69da      	ldr	r2, [r3, #28]
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	4013      	ands	r3, r2
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	bf0c      	ite	eq
 8009e18:	2301      	moveq	r3, #1
 8009e1a:	2300      	movne	r3, #0
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	461a      	mov	r2, r3
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d0a0      	beq.n	8009d68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b095      	sub	sp, #84	@ 0x54
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	461a      	mov	r2, r3
 8009e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e6      	bne.n	8009e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	f023 0301 	bic.w	r3, r3, #1
 8009e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3308      	adds	r3, #8
 8009e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e92:	e841 2300 	strex	r3, r2, [r1]
 8009e96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1e5      	bne.n	8009e6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d118      	bne.n	8009ed8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	e853 3f00 	ldrex	r3, [r3]
 8009eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f023 0310 	bic.w	r3, r3, #16
 8009eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ec4:	61bb      	str	r3, [r7, #24]
 8009ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec8:	6979      	ldr	r1, [r7, #20]
 8009eca:	69ba      	ldr	r2, [r7, #24]
 8009ecc:	e841 2300 	strex	r3, r2, [r1]
 8009ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1e6      	bne.n	8009ea6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2220      	movs	r2, #32
 8009edc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009eec:	bf00      	nop
 8009eee:	3754      	adds	r7, #84	@ 0x54
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ef8:	b084      	sub	sp, #16
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	f107 001c 	add.w	r0, r7, #28
 8009f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d121      	bne.n	8009f56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	4b21      	ldr	r3, [pc, #132]	@ (8009fa8 <USB_CoreInit+0xb0>)
 8009f24:	4013      	ands	r3, r2
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d105      	bne.n	8009f4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fa92 	bl	800a474 <USB_CoreReset>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]
 8009f54:	e010      	b.n	8009f78 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fa86 	bl	800a474 <USB_CoreReset>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8009f78:	7fbb      	ldrb	r3, [r7, #30]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10b      	bne.n	8009f96 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f043 0206 	orr.w	r2, r3, #6
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f043 0220 	orr.w	r2, r3, #32
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fa2:	b004      	add	sp, #16
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	ffbdffbf 	.word	0xffbdffbf

08009fac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f023 0201 	bic.w	r2, r3, #1
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d115      	bne.n	800a01c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ffc:	200a      	movs	r0, #10
 8009ffe:	f7fc f9df 	bl	80063c0 <HAL_Delay>
      ms += 10U;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	330a      	adds	r3, #10
 800a006:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fa25 	bl	800a458 <USB_GetMode>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b01      	cmp	r3, #1
 800a012:	d01e      	beq.n	800a052 <USB_SetCurrentMode+0x84>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2bc7      	cmp	r3, #199	@ 0xc7
 800a018:	d9f0      	bls.n	8009ffc <USB_SetCurrentMode+0x2e>
 800a01a:	e01a      	b.n	800a052 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d115      	bne.n	800a04e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a02e:	200a      	movs	r0, #10
 800a030:	f7fc f9c6 	bl	80063c0 <HAL_Delay>
      ms += 10U;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	330a      	adds	r3, #10
 800a038:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fa0c 	bl	800a458 <USB_GetMode>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <USB_SetCurrentMode+0x84>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2bc7      	cmp	r3, #199	@ 0xc7
 800a04a:	d9f0      	bls.n	800a02e <USB_SetCurrentMode+0x60>
 800a04c:	e001      	b.n	800a052 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e005      	b.n	800a05e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2bc8      	cmp	r3, #200	@ 0xc8
 800a056:	d101      	bne.n	800a05c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e000      	b.n	800a05e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
	...

0800a068 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a068:	b084      	sub	sp, #16
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b086      	sub	sp, #24
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a082:	2300      	movs	r3, #0
 800a084:	613b      	str	r3, [r7, #16]
 800a086:	e009      	b.n	800a09c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	3340      	adds	r3, #64	@ 0x40
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	2200      	movs	r2, #0
 800a094:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	3301      	adds	r3, #1
 800a09a:	613b      	str	r3, [r7, #16]
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2b0e      	cmp	r3, #14
 800a0a0:	d9f2      	bls.n	800a088 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a0a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d11c      	bne.n	800a0e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0b8:	f043 0302 	orr.w	r3, r3, #2
 800a0bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	e005      	b.n	800a0f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a100:	2b01      	cmp	r3, #1
 800a102:	d10d      	bne.n	800a120 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d104      	bne.n	800a116 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a10c:	2100      	movs	r1, #0
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f968 	bl	800a3e4 <USB_SetDevSpeed>
 800a114:	e008      	b.n	800a128 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a116:	2101      	movs	r1, #1
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f963 	bl	800a3e4 <USB_SetDevSpeed>
 800a11e:	e003      	b.n	800a128 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a120:	2103      	movs	r1, #3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f95e 	bl	800a3e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a128:	2110      	movs	r1, #16
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f8fa 	bl	800a324 <USB_FlushTxFifo>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f924 	bl	800a388 <USB_FlushRxFifo>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a150:	461a      	mov	r2, r3
 800a152:	2300      	movs	r3, #0
 800a154:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a15c:	461a      	mov	r2, r3
 800a15e:	2300      	movs	r3, #0
 800a160:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a168:	461a      	mov	r2, r3
 800a16a:	2300      	movs	r3, #0
 800a16c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a16e:	2300      	movs	r3, #0
 800a170:	613b      	str	r3, [r7, #16]
 800a172:	e043      	b.n	800a1fc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a186:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a18a:	d118      	bne.n	800a1be <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10a      	bne.n	800a1a8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19e:	461a      	mov	r2, r3
 800a1a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	e013      	b.n	800a1d0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	e008      	b.n	800a1d0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1dc:	461a      	mov	r2, r3
 800a1de:	2300      	movs	r3, #0
 800a1e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a1f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	613b      	str	r3, [r7, #16]
 800a1fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a200:	461a      	mov	r2, r3
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	4293      	cmp	r3, r2
 800a206:	d3b5      	bcc.n	800a174 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a208:	2300      	movs	r3, #0
 800a20a:	613b      	str	r3, [r7, #16]
 800a20c:	e043      	b.n	800a296 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4413      	add	r3, r2
 800a216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a224:	d118      	bne.n	800a258 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a238:	461a      	mov	r2, r3
 800a23a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	e013      	b.n	800a26a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	015a      	lsls	r2, r3, #5
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4413      	add	r3, r2
 800a24a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24e:	461a      	mov	r2, r3
 800a250:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	e008      	b.n	800a26a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a264:	461a      	mov	r2, r3
 800a266:	2300      	movs	r3, #0
 800a268:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a276:	461a      	mov	r2, r3
 800a278:	2300      	movs	r3, #0
 800a27a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a288:	461a      	mov	r2, r3
 800a28a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a28e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	3301      	adds	r3, #1
 800a294:	613b      	str	r3, [r7, #16]
 800a296:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a29a:	461a      	mov	r2, r3
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d3b5      	bcc.n	800a20e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a2c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d105      	bne.n	800a2d8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	f043 0210 	orr.w	r2, r3, #16
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	699a      	ldr	r2, [r3, #24]
 800a2dc:	4b0f      	ldr	r3, [pc, #60]	@ (800a31c <USB_DevInit+0x2b4>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d005      	beq.n	800a2f8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f043 0208 	orr.w	r2, r3, #8
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d105      	bne.n	800a30c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699a      	ldr	r2, [r3, #24]
 800a304:	4b06      	ldr	r3, [pc, #24]	@ (800a320 <USB_DevInit+0x2b8>)
 800a306:	4313      	orrs	r3, r2
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a318:	b004      	add	sp, #16
 800a31a:	4770      	bx	lr
 800a31c:	803c3800 	.word	0x803c3800
 800a320:	40000004 	.word	0x40000004

0800a324 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3301      	adds	r3, #1
 800a336:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a33e:	d901      	bls.n	800a344 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	e01b      	b.n	800a37c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	daf2      	bge.n	800a332 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a34c:	2300      	movs	r3, #0
 800a34e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	019b      	lsls	r3, r3, #6
 800a354:	f043 0220 	orr.w	r2, r3, #32
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3301      	adds	r3, #1
 800a360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a368:	d901      	bls.n	800a36e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e006      	b.n	800a37c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b20      	cmp	r3, #32
 800a378:	d0f0      	beq.n	800a35c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3301      	adds	r3, #1
 800a398:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3a0:	d901      	bls.n	800a3a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e018      	b.n	800a3d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	daf2      	bge.n	800a394 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2210      	movs	r2, #16
 800a3b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3c4:	d901      	bls.n	800a3ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e006      	b.n	800a3d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f003 0310 	and.w	r3, r3, #16
 800a3d2:	2b10      	cmp	r3, #16
 800a3d4:	d0f0      	beq.n	800a3b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	68f9      	ldr	r1, [r7, #12]
 800a400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a404:	4313      	orrs	r3, r2
 800a406:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a430:	f023 0303 	bic.w	r3, r3, #3
 800a434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a444:	f043 0302 	orr.w	r3, r3, #2
 800a448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	f003 0301 	and.w	r3, r3, #1
}
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3301      	adds	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a48c:	d901      	bls.n	800a492 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e022      	b.n	800a4d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	daf2      	bge.n	800a480 <USB_CoreReset+0xc>

  count = 10U;
 800a49a:	230a      	movs	r3, #10
 800a49c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a49e:	e002      	b.n	800a4a6 <USB_CoreReset+0x32>
  {
    count--;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1f9      	bne.n	800a4a0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	f043 0201 	orr.w	r2, r3, #1
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4c4:	d901      	bls.n	800a4ca <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e006      	b.n	800a4d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d0f0      	beq.n	800a4b8 <USB_CoreReset+0x44>

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <__cvt>:
 800a4e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e8:	ec57 6b10 	vmov	r6, r7, d0
 800a4ec:	2f00      	cmp	r7, #0
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	463b      	mov	r3, r7
 800a4f4:	bfbb      	ittet	lt
 800a4f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a4fa:	461f      	movlt	r7, r3
 800a4fc:	2300      	movge	r3, #0
 800a4fe:	232d      	movlt	r3, #45	@ 0x2d
 800a500:	700b      	strb	r3, [r1, #0]
 800a502:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a504:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a508:	4691      	mov	r9, r2
 800a50a:	f023 0820 	bic.w	r8, r3, #32
 800a50e:	bfbc      	itt	lt
 800a510:	4632      	movlt	r2, r6
 800a512:	4616      	movlt	r6, r2
 800a514:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a518:	d005      	beq.n	800a526 <__cvt+0x42>
 800a51a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a51e:	d100      	bne.n	800a522 <__cvt+0x3e>
 800a520:	3401      	adds	r4, #1
 800a522:	2102      	movs	r1, #2
 800a524:	e000      	b.n	800a528 <__cvt+0x44>
 800a526:	2103      	movs	r1, #3
 800a528:	ab03      	add	r3, sp, #12
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	ab02      	add	r3, sp, #8
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	ec47 6b10 	vmov	d0, r6, r7
 800a534:	4653      	mov	r3, sl
 800a536:	4622      	mov	r2, r4
 800a538:	f001 f8ee 	bl	800b718 <_dtoa_r>
 800a53c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a540:	4605      	mov	r5, r0
 800a542:	d119      	bne.n	800a578 <__cvt+0x94>
 800a544:	f019 0f01 	tst.w	r9, #1
 800a548:	d00e      	beq.n	800a568 <__cvt+0x84>
 800a54a:	eb00 0904 	add.w	r9, r0, r4
 800a54e:	2200      	movs	r2, #0
 800a550:	2300      	movs	r3, #0
 800a552:	4630      	mov	r0, r6
 800a554:	4639      	mov	r1, r7
 800a556:	f7f6 fad7 	bl	8000b08 <__aeabi_dcmpeq>
 800a55a:	b108      	cbz	r0, 800a560 <__cvt+0x7c>
 800a55c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a560:	2230      	movs	r2, #48	@ 0x30
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	454b      	cmp	r3, r9
 800a566:	d31e      	bcc.n	800a5a6 <__cvt+0xc2>
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a56c:	1b5b      	subs	r3, r3, r5
 800a56e:	4628      	mov	r0, r5
 800a570:	6013      	str	r3, [r2, #0]
 800a572:	b004      	add	sp, #16
 800a574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a578:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a57c:	eb00 0904 	add.w	r9, r0, r4
 800a580:	d1e5      	bne.n	800a54e <__cvt+0x6a>
 800a582:	7803      	ldrb	r3, [r0, #0]
 800a584:	2b30      	cmp	r3, #48	@ 0x30
 800a586:	d10a      	bne.n	800a59e <__cvt+0xba>
 800a588:	2200      	movs	r2, #0
 800a58a:	2300      	movs	r3, #0
 800a58c:	4630      	mov	r0, r6
 800a58e:	4639      	mov	r1, r7
 800a590:	f7f6 faba 	bl	8000b08 <__aeabi_dcmpeq>
 800a594:	b918      	cbnz	r0, 800a59e <__cvt+0xba>
 800a596:	f1c4 0401 	rsb	r4, r4, #1
 800a59a:	f8ca 4000 	str.w	r4, [sl]
 800a59e:	f8da 3000 	ldr.w	r3, [sl]
 800a5a2:	4499      	add	r9, r3
 800a5a4:	e7d3      	b.n	800a54e <__cvt+0x6a>
 800a5a6:	1c59      	adds	r1, r3, #1
 800a5a8:	9103      	str	r1, [sp, #12]
 800a5aa:	701a      	strb	r2, [r3, #0]
 800a5ac:	e7d9      	b.n	800a562 <__cvt+0x7e>

0800a5ae <__exponent>:
 800a5ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5b0:	2900      	cmp	r1, #0
 800a5b2:	bfba      	itte	lt
 800a5b4:	4249      	neglt	r1, r1
 800a5b6:	232d      	movlt	r3, #45	@ 0x2d
 800a5b8:	232b      	movge	r3, #43	@ 0x2b
 800a5ba:	2909      	cmp	r1, #9
 800a5bc:	7002      	strb	r2, [r0, #0]
 800a5be:	7043      	strb	r3, [r0, #1]
 800a5c0:	dd29      	ble.n	800a616 <__exponent+0x68>
 800a5c2:	f10d 0307 	add.w	r3, sp, #7
 800a5c6:	461d      	mov	r5, r3
 800a5c8:	270a      	movs	r7, #10
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	fbb1 f6f7 	udiv	r6, r1, r7
 800a5d0:	fb07 1416 	mls	r4, r7, r6, r1
 800a5d4:	3430      	adds	r4, #48	@ 0x30
 800a5d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a5da:	460c      	mov	r4, r1
 800a5dc:	2c63      	cmp	r4, #99	@ 0x63
 800a5de:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	dcf1      	bgt.n	800a5ca <__exponent+0x1c>
 800a5e6:	3130      	adds	r1, #48	@ 0x30
 800a5e8:	1e94      	subs	r4, r2, #2
 800a5ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a5ee:	1c41      	adds	r1, r0, #1
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	42ab      	cmp	r3, r5
 800a5f4:	d30a      	bcc.n	800a60c <__exponent+0x5e>
 800a5f6:	f10d 0309 	add.w	r3, sp, #9
 800a5fa:	1a9b      	subs	r3, r3, r2
 800a5fc:	42ac      	cmp	r4, r5
 800a5fe:	bf88      	it	hi
 800a600:	2300      	movhi	r3, #0
 800a602:	3302      	adds	r3, #2
 800a604:	4403      	add	r3, r0
 800a606:	1a18      	subs	r0, r3, r0
 800a608:	b003      	add	sp, #12
 800a60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a60c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a610:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a614:	e7ed      	b.n	800a5f2 <__exponent+0x44>
 800a616:	2330      	movs	r3, #48	@ 0x30
 800a618:	3130      	adds	r1, #48	@ 0x30
 800a61a:	7083      	strb	r3, [r0, #2]
 800a61c:	70c1      	strb	r1, [r0, #3]
 800a61e:	1d03      	adds	r3, r0, #4
 800a620:	e7f1      	b.n	800a606 <__exponent+0x58>
	...

0800a624 <_printf_float>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	b08d      	sub	sp, #52	@ 0x34
 800a62a:	460c      	mov	r4, r1
 800a62c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a630:	4616      	mov	r6, r2
 800a632:	461f      	mov	r7, r3
 800a634:	4605      	mov	r5, r0
 800a636:	f000 ff5b 	bl	800b4f0 <_localeconv_r>
 800a63a:	6803      	ldr	r3, [r0, #0]
 800a63c:	9304      	str	r3, [sp, #16]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7f5 fe36 	bl	80002b0 <strlen>
 800a644:	2300      	movs	r3, #0
 800a646:	930a      	str	r3, [sp, #40]	@ 0x28
 800a648:	f8d8 3000 	ldr.w	r3, [r8]
 800a64c:	9005      	str	r0, [sp, #20]
 800a64e:	3307      	adds	r3, #7
 800a650:	f023 0307 	bic.w	r3, r3, #7
 800a654:	f103 0208 	add.w	r2, r3, #8
 800a658:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a65c:	f8d4 b000 	ldr.w	fp, [r4]
 800a660:	f8c8 2000 	str.w	r2, [r8]
 800a664:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a668:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a66c:	9307      	str	r3, [sp, #28]
 800a66e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a672:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a67a:	4b9c      	ldr	r3, [pc, #624]	@ (800a8ec <_printf_float+0x2c8>)
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	f7f6 fa74 	bl	8000b6c <__aeabi_dcmpun>
 800a684:	bb70      	cbnz	r0, 800a6e4 <_printf_float+0xc0>
 800a686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a68a:	4b98      	ldr	r3, [pc, #608]	@ (800a8ec <_printf_float+0x2c8>)
 800a68c:	f04f 32ff 	mov.w	r2, #4294967295
 800a690:	f7f6 fa4e 	bl	8000b30 <__aeabi_dcmple>
 800a694:	bb30      	cbnz	r0, 800a6e4 <_printf_float+0xc0>
 800a696:	2200      	movs	r2, #0
 800a698:	2300      	movs	r3, #0
 800a69a:	4640      	mov	r0, r8
 800a69c:	4649      	mov	r1, r9
 800a69e:	f7f6 fa3d 	bl	8000b1c <__aeabi_dcmplt>
 800a6a2:	b110      	cbz	r0, 800a6aa <_printf_float+0x86>
 800a6a4:	232d      	movs	r3, #45	@ 0x2d
 800a6a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6aa:	4a91      	ldr	r2, [pc, #580]	@ (800a8f0 <_printf_float+0x2cc>)
 800a6ac:	4b91      	ldr	r3, [pc, #580]	@ (800a8f4 <_printf_float+0x2d0>)
 800a6ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a6b2:	bf8c      	ite	hi
 800a6b4:	4690      	movhi	r8, r2
 800a6b6:	4698      	movls	r8, r3
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	6123      	str	r3, [r4, #16]
 800a6bc:	f02b 0304 	bic.w	r3, fp, #4
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	f04f 0900 	mov.w	r9, #0
 800a6c6:	9700      	str	r7, [sp, #0]
 800a6c8:	4633      	mov	r3, r6
 800a6ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 f9d2 	bl	800aa78 <_printf_common>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	f040 808d 	bne.w	800a7f4 <_printf_float+0x1d0>
 800a6da:	f04f 30ff 	mov.w	r0, #4294967295
 800a6de:	b00d      	add	sp, #52	@ 0x34
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	464b      	mov	r3, r9
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f6 fa3e 	bl	8000b6c <__aeabi_dcmpun>
 800a6f0:	b140      	cbz	r0, 800a704 <_printf_float+0xe0>
 800a6f2:	464b      	mov	r3, r9
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bfbc      	itt	lt
 800a6f8:	232d      	movlt	r3, #45	@ 0x2d
 800a6fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a6fe:	4a7e      	ldr	r2, [pc, #504]	@ (800a8f8 <_printf_float+0x2d4>)
 800a700:	4b7e      	ldr	r3, [pc, #504]	@ (800a8fc <_printf_float+0x2d8>)
 800a702:	e7d4      	b.n	800a6ae <_printf_float+0x8a>
 800a704:	6863      	ldr	r3, [r4, #4]
 800a706:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a70a:	9206      	str	r2, [sp, #24]
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	d13b      	bne.n	800a788 <_printf_float+0x164>
 800a710:	2306      	movs	r3, #6
 800a712:	6063      	str	r3, [r4, #4]
 800a714:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a718:	2300      	movs	r3, #0
 800a71a:	6022      	str	r2, [r4, #0]
 800a71c:	9303      	str	r3, [sp, #12]
 800a71e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a720:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a724:	ab09      	add	r3, sp, #36	@ 0x24
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	6861      	ldr	r1, [r4, #4]
 800a72a:	ec49 8b10 	vmov	d0, r8, r9
 800a72e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a732:	4628      	mov	r0, r5
 800a734:	f7ff fed6 	bl	800a4e4 <__cvt>
 800a738:	9b06      	ldr	r3, [sp, #24]
 800a73a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a73c:	2b47      	cmp	r3, #71	@ 0x47
 800a73e:	4680      	mov	r8, r0
 800a740:	d129      	bne.n	800a796 <_printf_float+0x172>
 800a742:	1cc8      	adds	r0, r1, #3
 800a744:	db02      	blt.n	800a74c <_printf_float+0x128>
 800a746:	6863      	ldr	r3, [r4, #4]
 800a748:	4299      	cmp	r1, r3
 800a74a:	dd41      	ble.n	800a7d0 <_printf_float+0x1ac>
 800a74c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a750:	fa5f fa8a 	uxtb.w	sl, sl
 800a754:	3901      	subs	r1, #1
 800a756:	4652      	mov	r2, sl
 800a758:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a75c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a75e:	f7ff ff26 	bl	800a5ae <__exponent>
 800a762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a764:	1813      	adds	r3, r2, r0
 800a766:	2a01      	cmp	r2, #1
 800a768:	4681      	mov	r9, r0
 800a76a:	6123      	str	r3, [r4, #16]
 800a76c:	dc02      	bgt.n	800a774 <_printf_float+0x150>
 800a76e:	6822      	ldr	r2, [r4, #0]
 800a770:	07d2      	lsls	r2, r2, #31
 800a772:	d501      	bpl.n	800a778 <_printf_float+0x154>
 800a774:	3301      	adds	r3, #1
 800a776:	6123      	str	r3, [r4, #16]
 800a778:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0a2      	beq.n	800a6c6 <_printf_float+0xa2>
 800a780:	232d      	movs	r3, #45	@ 0x2d
 800a782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a786:	e79e      	b.n	800a6c6 <_printf_float+0xa2>
 800a788:	9a06      	ldr	r2, [sp, #24]
 800a78a:	2a47      	cmp	r2, #71	@ 0x47
 800a78c:	d1c2      	bne.n	800a714 <_printf_float+0xf0>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1c0      	bne.n	800a714 <_printf_float+0xf0>
 800a792:	2301      	movs	r3, #1
 800a794:	e7bd      	b.n	800a712 <_printf_float+0xee>
 800a796:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a79a:	d9db      	bls.n	800a754 <_printf_float+0x130>
 800a79c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a7a0:	d118      	bne.n	800a7d4 <_printf_float+0x1b0>
 800a7a2:	2900      	cmp	r1, #0
 800a7a4:	6863      	ldr	r3, [r4, #4]
 800a7a6:	dd0b      	ble.n	800a7c0 <_printf_float+0x19c>
 800a7a8:	6121      	str	r1, [r4, #16]
 800a7aa:	b913      	cbnz	r3, 800a7b2 <_printf_float+0x18e>
 800a7ac:	6822      	ldr	r2, [r4, #0]
 800a7ae:	07d0      	lsls	r0, r2, #31
 800a7b0:	d502      	bpl.n	800a7b8 <_printf_float+0x194>
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	440b      	add	r3, r1
 800a7b6:	6123      	str	r3, [r4, #16]
 800a7b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a7ba:	f04f 0900 	mov.w	r9, #0
 800a7be:	e7db      	b.n	800a778 <_printf_float+0x154>
 800a7c0:	b913      	cbnz	r3, 800a7c8 <_printf_float+0x1a4>
 800a7c2:	6822      	ldr	r2, [r4, #0]
 800a7c4:	07d2      	lsls	r2, r2, #31
 800a7c6:	d501      	bpl.n	800a7cc <_printf_float+0x1a8>
 800a7c8:	3302      	adds	r3, #2
 800a7ca:	e7f4      	b.n	800a7b6 <_printf_float+0x192>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e7f2      	b.n	800a7b6 <_printf_float+0x192>
 800a7d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d6:	4299      	cmp	r1, r3
 800a7d8:	db05      	blt.n	800a7e6 <_printf_float+0x1c2>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	6121      	str	r1, [r4, #16]
 800a7de:	07d8      	lsls	r0, r3, #31
 800a7e0:	d5ea      	bpl.n	800a7b8 <_printf_float+0x194>
 800a7e2:	1c4b      	adds	r3, r1, #1
 800a7e4:	e7e7      	b.n	800a7b6 <_printf_float+0x192>
 800a7e6:	2900      	cmp	r1, #0
 800a7e8:	bfd4      	ite	le
 800a7ea:	f1c1 0202 	rsble	r2, r1, #2
 800a7ee:	2201      	movgt	r2, #1
 800a7f0:	4413      	add	r3, r2
 800a7f2:	e7e0      	b.n	800a7b6 <_printf_float+0x192>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	055a      	lsls	r2, r3, #21
 800a7f8:	d407      	bmi.n	800a80a <_printf_float+0x1e6>
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	4642      	mov	r2, r8
 800a7fe:	4631      	mov	r1, r6
 800a800:	4628      	mov	r0, r5
 800a802:	47b8      	blx	r7
 800a804:	3001      	adds	r0, #1
 800a806:	d12b      	bne.n	800a860 <_printf_float+0x23c>
 800a808:	e767      	b.n	800a6da <_printf_float+0xb6>
 800a80a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a80e:	f240 80dd 	bls.w	800a9cc <_printf_float+0x3a8>
 800a812:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a816:	2200      	movs	r2, #0
 800a818:	2300      	movs	r3, #0
 800a81a:	f7f6 f975 	bl	8000b08 <__aeabi_dcmpeq>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d033      	beq.n	800a88a <_printf_float+0x266>
 800a822:	4a37      	ldr	r2, [pc, #220]	@ (800a900 <_printf_float+0x2dc>)
 800a824:	2301      	movs	r3, #1
 800a826:	4631      	mov	r1, r6
 800a828:	4628      	mov	r0, r5
 800a82a:	47b8      	blx	r7
 800a82c:	3001      	adds	r0, #1
 800a82e:	f43f af54 	beq.w	800a6da <_printf_float+0xb6>
 800a832:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a836:	4543      	cmp	r3, r8
 800a838:	db02      	blt.n	800a840 <_printf_float+0x21c>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	07d8      	lsls	r0, r3, #31
 800a83e:	d50f      	bpl.n	800a860 <_printf_float+0x23c>
 800a840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a844:	4631      	mov	r1, r6
 800a846:	4628      	mov	r0, r5
 800a848:	47b8      	blx	r7
 800a84a:	3001      	adds	r0, #1
 800a84c:	f43f af45 	beq.w	800a6da <_printf_float+0xb6>
 800a850:	f04f 0900 	mov.w	r9, #0
 800a854:	f108 38ff 	add.w	r8, r8, #4294967295
 800a858:	f104 0a1a 	add.w	sl, r4, #26
 800a85c:	45c8      	cmp	r8, r9
 800a85e:	dc09      	bgt.n	800a874 <_printf_float+0x250>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	079b      	lsls	r3, r3, #30
 800a864:	f100 8103 	bmi.w	800aa6e <_printf_float+0x44a>
 800a868:	68e0      	ldr	r0, [r4, #12]
 800a86a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a86c:	4298      	cmp	r0, r3
 800a86e:	bfb8      	it	lt
 800a870:	4618      	movlt	r0, r3
 800a872:	e734      	b.n	800a6de <_printf_float+0xba>
 800a874:	2301      	movs	r3, #1
 800a876:	4652      	mov	r2, sl
 800a878:	4631      	mov	r1, r6
 800a87a:	4628      	mov	r0, r5
 800a87c:	47b8      	blx	r7
 800a87e:	3001      	adds	r0, #1
 800a880:	f43f af2b 	beq.w	800a6da <_printf_float+0xb6>
 800a884:	f109 0901 	add.w	r9, r9, #1
 800a888:	e7e8      	b.n	800a85c <_printf_float+0x238>
 800a88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dc39      	bgt.n	800a904 <_printf_float+0x2e0>
 800a890:	4a1b      	ldr	r2, [pc, #108]	@ (800a900 <_printf_float+0x2dc>)
 800a892:	2301      	movs	r3, #1
 800a894:	4631      	mov	r1, r6
 800a896:	4628      	mov	r0, r5
 800a898:	47b8      	blx	r7
 800a89a:	3001      	adds	r0, #1
 800a89c:	f43f af1d 	beq.w	800a6da <_printf_float+0xb6>
 800a8a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a8a4:	ea59 0303 	orrs.w	r3, r9, r3
 800a8a8:	d102      	bne.n	800a8b0 <_printf_float+0x28c>
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	07d9      	lsls	r1, r3, #31
 800a8ae:	d5d7      	bpl.n	800a860 <_printf_float+0x23c>
 800a8b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	47b8      	blx	r7
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	f43f af0d 	beq.w	800a6da <_printf_float+0xb6>
 800a8c0:	f04f 0a00 	mov.w	sl, #0
 800a8c4:	f104 0b1a 	add.w	fp, r4, #26
 800a8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ca:	425b      	negs	r3, r3
 800a8cc:	4553      	cmp	r3, sl
 800a8ce:	dc01      	bgt.n	800a8d4 <_printf_float+0x2b0>
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	e793      	b.n	800a7fc <_printf_float+0x1d8>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	465a      	mov	r2, fp
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4628      	mov	r0, r5
 800a8dc:	47b8      	blx	r7
 800a8de:	3001      	adds	r0, #1
 800a8e0:	f43f aefb 	beq.w	800a6da <_printf_float+0xb6>
 800a8e4:	f10a 0a01 	add.w	sl, sl, #1
 800a8e8:	e7ee      	b.n	800a8c8 <_printf_float+0x2a4>
 800a8ea:	bf00      	nop
 800a8ec:	7fefffff 	.word	0x7fefffff
 800a8f0:	080104b0 	.word	0x080104b0
 800a8f4:	080104ac 	.word	0x080104ac
 800a8f8:	080104b8 	.word	0x080104b8
 800a8fc:	080104b4 	.word	0x080104b4
 800a900:	080104bc 	.word	0x080104bc
 800a904:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a906:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a90a:	4553      	cmp	r3, sl
 800a90c:	bfa8      	it	ge
 800a90e:	4653      	movge	r3, sl
 800a910:	2b00      	cmp	r3, #0
 800a912:	4699      	mov	r9, r3
 800a914:	dc36      	bgt.n	800a984 <_printf_float+0x360>
 800a916:	f04f 0b00 	mov.w	fp, #0
 800a91a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a91e:	f104 021a 	add.w	r2, r4, #26
 800a922:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a924:	9306      	str	r3, [sp, #24]
 800a926:	eba3 0309 	sub.w	r3, r3, r9
 800a92a:	455b      	cmp	r3, fp
 800a92c:	dc31      	bgt.n	800a992 <_printf_float+0x36e>
 800a92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a930:	459a      	cmp	sl, r3
 800a932:	dc3a      	bgt.n	800a9aa <_printf_float+0x386>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	07da      	lsls	r2, r3, #31
 800a938:	d437      	bmi.n	800a9aa <_printf_float+0x386>
 800a93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a93c:	ebaa 0903 	sub.w	r9, sl, r3
 800a940:	9b06      	ldr	r3, [sp, #24]
 800a942:	ebaa 0303 	sub.w	r3, sl, r3
 800a946:	4599      	cmp	r9, r3
 800a948:	bfa8      	it	ge
 800a94a:	4699      	movge	r9, r3
 800a94c:	f1b9 0f00 	cmp.w	r9, #0
 800a950:	dc33      	bgt.n	800a9ba <_printf_float+0x396>
 800a952:	f04f 0800 	mov.w	r8, #0
 800a956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a95a:	f104 0b1a 	add.w	fp, r4, #26
 800a95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a960:	ebaa 0303 	sub.w	r3, sl, r3
 800a964:	eba3 0309 	sub.w	r3, r3, r9
 800a968:	4543      	cmp	r3, r8
 800a96a:	f77f af79 	ble.w	800a860 <_printf_float+0x23c>
 800a96e:	2301      	movs	r3, #1
 800a970:	465a      	mov	r2, fp
 800a972:	4631      	mov	r1, r6
 800a974:	4628      	mov	r0, r5
 800a976:	47b8      	blx	r7
 800a978:	3001      	adds	r0, #1
 800a97a:	f43f aeae 	beq.w	800a6da <_printf_float+0xb6>
 800a97e:	f108 0801 	add.w	r8, r8, #1
 800a982:	e7ec      	b.n	800a95e <_printf_float+0x33a>
 800a984:	4642      	mov	r2, r8
 800a986:	4631      	mov	r1, r6
 800a988:	4628      	mov	r0, r5
 800a98a:	47b8      	blx	r7
 800a98c:	3001      	adds	r0, #1
 800a98e:	d1c2      	bne.n	800a916 <_printf_float+0x2f2>
 800a990:	e6a3      	b.n	800a6da <_printf_float+0xb6>
 800a992:	2301      	movs	r3, #1
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	9206      	str	r2, [sp, #24]
 800a99a:	47b8      	blx	r7
 800a99c:	3001      	adds	r0, #1
 800a99e:	f43f ae9c 	beq.w	800a6da <_printf_float+0xb6>
 800a9a2:	9a06      	ldr	r2, [sp, #24]
 800a9a4:	f10b 0b01 	add.w	fp, fp, #1
 800a9a8:	e7bb      	b.n	800a922 <_printf_float+0x2fe>
 800a9aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b8      	blx	r7
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d1c0      	bne.n	800a93a <_printf_float+0x316>
 800a9b8:	e68f      	b.n	800a6da <_printf_float+0xb6>
 800a9ba:	9a06      	ldr	r2, [sp, #24]
 800a9bc:	464b      	mov	r3, r9
 800a9be:	4442      	add	r2, r8
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d1c3      	bne.n	800a952 <_printf_float+0x32e>
 800a9ca:	e686      	b.n	800a6da <_printf_float+0xb6>
 800a9cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9d0:	f1ba 0f01 	cmp.w	sl, #1
 800a9d4:	dc01      	bgt.n	800a9da <_printf_float+0x3b6>
 800a9d6:	07db      	lsls	r3, r3, #31
 800a9d8:	d536      	bpl.n	800aa48 <_printf_float+0x424>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4642      	mov	r2, r8
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	47b8      	blx	r7
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	f43f ae78 	beq.w	800a6da <_printf_float+0xb6>
 800a9ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	47b8      	blx	r7
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f43f ae70 	beq.w	800a6da <_printf_float+0xb6>
 800a9fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2300      	movs	r3, #0
 800aa02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa06:	f7f6 f87f 	bl	8000b08 <__aeabi_dcmpeq>
 800aa0a:	b9c0      	cbnz	r0, 800aa3e <_printf_float+0x41a>
 800aa0c:	4653      	mov	r3, sl
 800aa0e:	f108 0201 	add.w	r2, r8, #1
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b8      	blx	r7
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d10c      	bne.n	800aa36 <_printf_float+0x412>
 800aa1c:	e65d      	b.n	800a6da <_printf_float+0xb6>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	465a      	mov	r2, fp
 800aa22:	4631      	mov	r1, r6
 800aa24:	4628      	mov	r0, r5
 800aa26:	47b8      	blx	r7
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f43f ae56 	beq.w	800a6da <_printf_float+0xb6>
 800aa2e:	f108 0801 	add.w	r8, r8, #1
 800aa32:	45d0      	cmp	r8, sl
 800aa34:	dbf3      	blt.n	800aa1e <_printf_float+0x3fa>
 800aa36:	464b      	mov	r3, r9
 800aa38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa3c:	e6df      	b.n	800a7fe <_printf_float+0x1da>
 800aa3e:	f04f 0800 	mov.w	r8, #0
 800aa42:	f104 0b1a 	add.w	fp, r4, #26
 800aa46:	e7f4      	b.n	800aa32 <_printf_float+0x40e>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	4642      	mov	r2, r8
 800aa4c:	e7e1      	b.n	800aa12 <_printf_float+0x3ee>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	464a      	mov	r2, r9
 800aa52:	4631      	mov	r1, r6
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b8      	blx	r7
 800aa58:	3001      	adds	r0, #1
 800aa5a:	f43f ae3e 	beq.w	800a6da <_printf_float+0xb6>
 800aa5e:	f108 0801 	add.w	r8, r8, #1
 800aa62:	68e3      	ldr	r3, [r4, #12]
 800aa64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa66:	1a5b      	subs	r3, r3, r1
 800aa68:	4543      	cmp	r3, r8
 800aa6a:	dcf0      	bgt.n	800aa4e <_printf_float+0x42a>
 800aa6c:	e6fc      	b.n	800a868 <_printf_float+0x244>
 800aa6e:	f04f 0800 	mov.w	r8, #0
 800aa72:	f104 0919 	add.w	r9, r4, #25
 800aa76:	e7f4      	b.n	800aa62 <_printf_float+0x43e>

0800aa78 <_printf_common>:
 800aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	4616      	mov	r6, r2
 800aa7e:	4698      	mov	r8, r3
 800aa80:	688a      	ldr	r2, [r1, #8]
 800aa82:	690b      	ldr	r3, [r1, #16]
 800aa84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	bfb8      	it	lt
 800aa8c:	4613      	movlt	r3, r2
 800aa8e:	6033      	str	r3, [r6, #0]
 800aa90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa94:	4607      	mov	r7, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	b10a      	cbz	r2, 800aa9e <_printf_common+0x26>
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	6033      	str	r3, [r6, #0]
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	0699      	lsls	r1, r3, #26
 800aaa2:	bf42      	ittt	mi
 800aaa4:	6833      	ldrmi	r3, [r6, #0]
 800aaa6:	3302      	addmi	r3, #2
 800aaa8:	6033      	strmi	r3, [r6, #0]
 800aaaa:	6825      	ldr	r5, [r4, #0]
 800aaac:	f015 0506 	ands.w	r5, r5, #6
 800aab0:	d106      	bne.n	800aac0 <_printf_common+0x48>
 800aab2:	f104 0a19 	add.w	sl, r4, #25
 800aab6:	68e3      	ldr	r3, [r4, #12]
 800aab8:	6832      	ldr	r2, [r6, #0]
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	42ab      	cmp	r3, r5
 800aabe:	dc26      	bgt.n	800ab0e <_printf_common+0x96>
 800aac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aac4:	6822      	ldr	r2, [r4, #0]
 800aac6:	3b00      	subs	r3, #0
 800aac8:	bf18      	it	ne
 800aaca:	2301      	movne	r3, #1
 800aacc:	0692      	lsls	r2, r2, #26
 800aace:	d42b      	bmi.n	800ab28 <_printf_common+0xb0>
 800aad0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aad4:	4641      	mov	r1, r8
 800aad6:	4638      	mov	r0, r7
 800aad8:	47c8      	blx	r9
 800aada:	3001      	adds	r0, #1
 800aadc:	d01e      	beq.n	800ab1c <_printf_common+0xa4>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	6922      	ldr	r2, [r4, #16]
 800aae2:	f003 0306 	and.w	r3, r3, #6
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	bf02      	ittt	eq
 800aaea:	68e5      	ldreq	r5, [r4, #12]
 800aaec:	6833      	ldreq	r3, [r6, #0]
 800aaee:	1aed      	subeq	r5, r5, r3
 800aaf0:	68a3      	ldr	r3, [r4, #8]
 800aaf2:	bf0c      	ite	eq
 800aaf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaf8:	2500      	movne	r5, #0
 800aafa:	4293      	cmp	r3, r2
 800aafc:	bfc4      	itt	gt
 800aafe:	1a9b      	subgt	r3, r3, r2
 800ab00:	18ed      	addgt	r5, r5, r3
 800ab02:	2600      	movs	r6, #0
 800ab04:	341a      	adds	r4, #26
 800ab06:	42b5      	cmp	r5, r6
 800ab08:	d11a      	bne.n	800ab40 <_printf_common+0xc8>
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	e008      	b.n	800ab20 <_printf_common+0xa8>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4652      	mov	r2, sl
 800ab12:	4641      	mov	r1, r8
 800ab14:	4638      	mov	r0, r7
 800ab16:	47c8      	blx	r9
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d103      	bne.n	800ab24 <_printf_common+0xac>
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab24:	3501      	adds	r5, #1
 800ab26:	e7c6      	b.n	800aab6 <_printf_common+0x3e>
 800ab28:	18e1      	adds	r1, r4, r3
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	2030      	movs	r0, #48	@ 0x30
 800ab2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab32:	4422      	add	r2, r4
 800ab34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab3c:	3302      	adds	r3, #2
 800ab3e:	e7c7      	b.n	800aad0 <_printf_common+0x58>
 800ab40:	2301      	movs	r3, #1
 800ab42:	4622      	mov	r2, r4
 800ab44:	4641      	mov	r1, r8
 800ab46:	4638      	mov	r0, r7
 800ab48:	47c8      	blx	r9
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d0e6      	beq.n	800ab1c <_printf_common+0xa4>
 800ab4e:	3601      	adds	r6, #1
 800ab50:	e7d9      	b.n	800ab06 <_printf_common+0x8e>
	...

0800ab54 <_printf_i>:
 800ab54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab58:	7e0f      	ldrb	r7, [r1, #24]
 800ab5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab5c:	2f78      	cmp	r7, #120	@ 0x78
 800ab5e:	4691      	mov	r9, r2
 800ab60:	4680      	mov	r8, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	469a      	mov	sl, r3
 800ab66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab6a:	d807      	bhi.n	800ab7c <_printf_i+0x28>
 800ab6c:	2f62      	cmp	r7, #98	@ 0x62
 800ab6e:	d80a      	bhi.n	800ab86 <_printf_i+0x32>
 800ab70:	2f00      	cmp	r7, #0
 800ab72:	f000 80d1 	beq.w	800ad18 <_printf_i+0x1c4>
 800ab76:	2f58      	cmp	r7, #88	@ 0x58
 800ab78:	f000 80b8 	beq.w	800acec <_printf_i+0x198>
 800ab7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab84:	e03a      	b.n	800abfc <_printf_i+0xa8>
 800ab86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab8a:	2b15      	cmp	r3, #21
 800ab8c:	d8f6      	bhi.n	800ab7c <_printf_i+0x28>
 800ab8e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab94 <_printf_i+0x40>)
 800ab90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab94:	0800abed 	.word	0x0800abed
 800ab98:	0800ac01 	.word	0x0800ac01
 800ab9c:	0800ab7d 	.word	0x0800ab7d
 800aba0:	0800ab7d 	.word	0x0800ab7d
 800aba4:	0800ab7d 	.word	0x0800ab7d
 800aba8:	0800ab7d 	.word	0x0800ab7d
 800abac:	0800ac01 	.word	0x0800ac01
 800abb0:	0800ab7d 	.word	0x0800ab7d
 800abb4:	0800ab7d 	.word	0x0800ab7d
 800abb8:	0800ab7d 	.word	0x0800ab7d
 800abbc:	0800ab7d 	.word	0x0800ab7d
 800abc0:	0800acff 	.word	0x0800acff
 800abc4:	0800ac2b 	.word	0x0800ac2b
 800abc8:	0800acb9 	.word	0x0800acb9
 800abcc:	0800ab7d 	.word	0x0800ab7d
 800abd0:	0800ab7d 	.word	0x0800ab7d
 800abd4:	0800ad21 	.word	0x0800ad21
 800abd8:	0800ab7d 	.word	0x0800ab7d
 800abdc:	0800ac2b 	.word	0x0800ac2b
 800abe0:	0800ab7d 	.word	0x0800ab7d
 800abe4:	0800ab7d 	.word	0x0800ab7d
 800abe8:	0800acc1 	.word	0x0800acc1
 800abec:	6833      	ldr	r3, [r6, #0]
 800abee:	1d1a      	adds	r2, r3, #4
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6032      	str	r2, [r6, #0]
 800abf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abfc:	2301      	movs	r3, #1
 800abfe:	e09c      	b.n	800ad3a <_printf_i+0x1e6>
 800ac00:	6833      	ldr	r3, [r6, #0]
 800ac02:	6820      	ldr	r0, [r4, #0]
 800ac04:	1d19      	adds	r1, r3, #4
 800ac06:	6031      	str	r1, [r6, #0]
 800ac08:	0606      	lsls	r6, r0, #24
 800ac0a:	d501      	bpl.n	800ac10 <_printf_i+0xbc>
 800ac0c:	681d      	ldr	r5, [r3, #0]
 800ac0e:	e003      	b.n	800ac18 <_printf_i+0xc4>
 800ac10:	0645      	lsls	r5, r0, #25
 800ac12:	d5fb      	bpl.n	800ac0c <_printf_i+0xb8>
 800ac14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac18:	2d00      	cmp	r5, #0
 800ac1a:	da03      	bge.n	800ac24 <_printf_i+0xd0>
 800ac1c:	232d      	movs	r3, #45	@ 0x2d
 800ac1e:	426d      	negs	r5, r5
 800ac20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac24:	4858      	ldr	r0, [pc, #352]	@ (800ad88 <_printf_i+0x234>)
 800ac26:	230a      	movs	r3, #10
 800ac28:	e011      	b.n	800ac4e <_printf_i+0xfa>
 800ac2a:	6821      	ldr	r1, [r4, #0]
 800ac2c:	6833      	ldr	r3, [r6, #0]
 800ac2e:	0608      	lsls	r0, r1, #24
 800ac30:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac34:	d402      	bmi.n	800ac3c <_printf_i+0xe8>
 800ac36:	0649      	lsls	r1, r1, #25
 800ac38:	bf48      	it	mi
 800ac3a:	b2ad      	uxthmi	r5, r5
 800ac3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac3e:	4852      	ldr	r0, [pc, #328]	@ (800ad88 <_printf_i+0x234>)
 800ac40:	6033      	str	r3, [r6, #0]
 800ac42:	bf14      	ite	ne
 800ac44:	230a      	movne	r3, #10
 800ac46:	2308      	moveq	r3, #8
 800ac48:	2100      	movs	r1, #0
 800ac4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac4e:	6866      	ldr	r6, [r4, #4]
 800ac50:	60a6      	str	r6, [r4, #8]
 800ac52:	2e00      	cmp	r6, #0
 800ac54:	db05      	blt.n	800ac62 <_printf_i+0x10e>
 800ac56:	6821      	ldr	r1, [r4, #0]
 800ac58:	432e      	orrs	r6, r5
 800ac5a:	f021 0104 	bic.w	r1, r1, #4
 800ac5e:	6021      	str	r1, [r4, #0]
 800ac60:	d04b      	beq.n	800acfa <_printf_i+0x1a6>
 800ac62:	4616      	mov	r6, r2
 800ac64:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac68:	fb03 5711 	mls	r7, r3, r1, r5
 800ac6c:	5dc7      	ldrb	r7, [r0, r7]
 800ac6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac72:	462f      	mov	r7, r5
 800ac74:	42bb      	cmp	r3, r7
 800ac76:	460d      	mov	r5, r1
 800ac78:	d9f4      	bls.n	800ac64 <_printf_i+0x110>
 800ac7a:	2b08      	cmp	r3, #8
 800ac7c:	d10b      	bne.n	800ac96 <_printf_i+0x142>
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	07df      	lsls	r7, r3, #31
 800ac82:	d508      	bpl.n	800ac96 <_printf_i+0x142>
 800ac84:	6923      	ldr	r3, [r4, #16]
 800ac86:	6861      	ldr	r1, [r4, #4]
 800ac88:	4299      	cmp	r1, r3
 800ac8a:	bfde      	ittt	le
 800ac8c:	2330      	movle	r3, #48	@ 0x30
 800ac8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac92:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac96:	1b92      	subs	r2, r2, r6
 800ac98:	6122      	str	r2, [r4, #16]
 800ac9a:	f8cd a000 	str.w	sl, [sp]
 800ac9e:	464b      	mov	r3, r9
 800aca0:	aa03      	add	r2, sp, #12
 800aca2:	4621      	mov	r1, r4
 800aca4:	4640      	mov	r0, r8
 800aca6:	f7ff fee7 	bl	800aa78 <_printf_common>
 800acaa:	3001      	adds	r0, #1
 800acac:	d14a      	bne.n	800ad44 <_printf_i+0x1f0>
 800acae:	f04f 30ff 	mov.w	r0, #4294967295
 800acb2:	b004      	add	sp, #16
 800acb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	f043 0320 	orr.w	r3, r3, #32
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	4832      	ldr	r0, [pc, #200]	@ (800ad8c <_printf_i+0x238>)
 800acc2:	2778      	movs	r7, #120	@ 0x78
 800acc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acc8:	6823      	ldr	r3, [r4, #0]
 800acca:	6831      	ldr	r1, [r6, #0]
 800accc:	061f      	lsls	r7, r3, #24
 800acce:	f851 5b04 	ldr.w	r5, [r1], #4
 800acd2:	d402      	bmi.n	800acda <_printf_i+0x186>
 800acd4:	065f      	lsls	r7, r3, #25
 800acd6:	bf48      	it	mi
 800acd8:	b2ad      	uxthmi	r5, r5
 800acda:	6031      	str	r1, [r6, #0]
 800acdc:	07d9      	lsls	r1, r3, #31
 800acde:	bf44      	itt	mi
 800ace0:	f043 0320 	orrmi.w	r3, r3, #32
 800ace4:	6023      	strmi	r3, [r4, #0]
 800ace6:	b11d      	cbz	r5, 800acf0 <_printf_i+0x19c>
 800ace8:	2310      	movs	r3, #16
 800acea:	e7ad      	b.n	800ac48 <_printf_i+0xf4>
 800acec:	4826      	ldr	r0, [pc, #152]	@ (800ad88 <_printf_i+0x234>)
 800acee:	e7e9      	b.n	800acc4 <_printf_i+0x170>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	f023 0320 	bic.w	r3, r3, #32
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	e7f6      	b.n	800ace8 <_printf_i+0x194>
 800acfa:	4616      	mov	r6, r2
 800acfc:	e7bd      	b.n	800ac7a <_printf_i+0x126>
 800acfe:	6833      	ldr	r3, [r6, #0]
 800ad00:	6825      	ldr	r5, [r4, #0]
 800ad02:	6961      	ldr	r1, [r4, #20]
 800ad04:	1d18      	adds	r0, r3, #4
 800ad06:	6030      	str	r0, [r6, #0]
 800ad08:	062e      	lsls	r6, r5, #24
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	d501      	bpl.n	800ad12 <_printf_i+0x1be>
 800ad0e:	6019      	str	r1, [r3, #0]
 800ad10:	e002      	b.n	800ad18 <_printf_i+0x1c4>
 800ad12:	0668      	lsls	r0, r5, #25
 800ad14:	d5fb      	bpl.n	800ad0e <_printf_i+0x1ba>
 800ad16:	8019      	strh	r1, [r3, #0]
 800ad18:	2300      	movs	r3, #0
 800ad1a:	6123      	str	r3, [r4, #16]
 800ad1c:	4616      	mov	r6, r2
 800ad1e:	e7bc      	b.n	800ac9a <_printf_i+0x146>
 800ad20:	6833      	ldr	r3, [r6, #0]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	6032      	str	r2, [r6, #0]
 800ad26:	681e      	ldr	r6, [r3, #0]
 800ad28:	6862      	ldr	r2, [r4, #4]
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	f7f5 fa6f 	bl	8000210 <memchr>
 800ad32:	b108      	cbz	r0, 800ad38 <_printf_i+0x1e4>
 800ad34:	1b80      	subs	r0, r0, r6
 800ad36:	6060      	str	r0, [r4, #4]
 800ad38:	6863      	ldr	r3, [r4, #4]
 800ad3a:	6123      	str	r3, [r4, #16]
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad42:	e7aa      	b.n	800ac9a <_printf_i+0x146>
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	4632      	mov	r2, r6
 800ad48:	4649      	mov	r1, r9
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	47d0      	blx	sl
 800ad4e:	3001      	adds	r0, #1
 800ad50:	d0ad      	beq.n	800acae <_printf_i+0x15a>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	079b      	lsls	r3, r3, #30
 800ad56:	d413      	bmi.n	800ad80 <_printf_i+0x22c>
 800ad58:	68e0      	ldr	r0, [r4, #12]
 800ad5a:	9b03      	ldr	r3, [sp, #12]
 800ad5c:	4298      	cmp	r0, r3
 800ad5e:	bfb8      	it	lt
 800ad60:	4618      	movlt	r0, r3
 800ad62:	e7a6      	b.n	800acb2 <_printf_i+0x15e>
 800ad64:	2301      	movs	r3, #1
 800ad66:	4632      	mov	r2, r6
 800ad68:	4649      	mov	r1, r9
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	47d0      	blx	sl
 800ad6e:	3001      	adds	r0, #1
 800ad70:	d09d      	beq.n	800acae <_printf_i+0x15a>
 800ad72:	3501      	adds	r5, #1
 800ad74:	68e3      	ldr	r3, [r4, #12]
 800ad76:	9903      	ldr	r1, [sp, #12]
 800ad78:	1a5b      	subs	r3, r3, r1
 800ad7a:	42ab      	cmp	r3, r5
 800ad7c:	dcf2      	bgt.n	800ad64 <_printf_i+0x210>
 800ad7e:	e7eb      	b.n	800ad58 <_printf_i+0x204>
 800ad80:	2500      	movs	r5, #0
 800ad82:	f104 0619 	add.w	r6, r4, #25
 800ad86:	e7f5      	b.n	800ad74 <_printf_i+0x220>
 800ad88:	080104be 	.word	0x080104be
 800ad8c:	080104cf 	.word	0x080104cf

0800ad90 <_scanf_float>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	b087      	sub	sp, #28
 800ad96:	4691      	mov	r9, r2
 800ad98:	9303      	str	r3, [sp, #12]
 800ad9a:	688b      	ldr	r3, [r1, #8]
 800ad9c:	1e5a      	subs	r2, r3, #1
 800ad9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ada2:	bf81      	itttt	hi
 800ada4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ada8:	eb03 0b05 	addhi.w	fp, r3, r5
 800adac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800adb0:	608b      	strhi	r3, [r1, #8]
 800adb2:	680b      	ldr	r3, [r1, #0]
 800adb4:	460a      	mov	r2, r1
 800adb6:	f04f 0500 	mov.w	r5, #0
 800adba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800adbe:	f842 3b1c 	str.w	r3, [r2], #28
 800adc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800adc6:	4680      	mov	r8, r0
 800adc8:	460c      	mov	r4, r1
 800adca:	bf98      	it	ls
 800adcc:	f04f 0b00 	movls.w	fp, #0
 800add0:	9201      	str	r2, [sp, #4]
 800add2:	4616      	mov	r6, r2
 800add4:	46aa      	mov	sl, r5
 800add6:	462f      	mov	r7, r5
 800add8:	9502      	str	r5, [sp, #8]
 800adda:	68a2      	ldr	r2, [r4, #8]
 800addc:	b15a      	cbz	r2, 800adf6 <_scanf_float+0x66>
 800adde:	f8d9 3000 	ldr.w	r3, [r9]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b4e      	cmp	r3, #78	@ 0x4e
 800ade6:	d863      	bhi.n	800aeb0 <_scanf_float+0x120>
 800ade8:	2b40      	cmp	r3, #64	@ 0x40
 800adea:	d83b      	bhi.n	800ae64 <_scanf_float+0xd4>
 800adec:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800adf0:	b2c8      	uxtb	r0, r1
 800adf2:	280e      	cmp	r0, #14
 800adf4:	d939      	bls.n	800ae6a <_scanf_float+0xda>
 800adf6:	b11f      	cbz	r7, 800ae00 <_scanf_float+0x70>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae04:	f1ba 0f01 	cmp.w	sl, #1
 800ae08:	f200 8114 	bhi.w	800b034 <_scanf_float+0x2a4>
 800ae0c:	9b01      	ldr	r3, [sp, #4]
 800ae0e:	429e      	cmp	r6, r3
 800ae10:	f200 8105 	bhi.w	800b01e <_scanf_float+0x28e>
 800ae14:	2001      	movs	r0, #1
 800ae16:	b007      	add	sp, #28
 800ae18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ae20:	2a0d      	cmp	r2, #13
 800ae22:	d8e8      	bhi.n	800adf6 <_scanf_float+0x66>
 800ae24:	a101      	add	r1, pc, #4	@ (adr r1, 800ae2c <_scanf_float+0x9c>)
 800ae26:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae2a:	bf00      	nop
 800ae2c:	0800af75 	.word	0x0800af75
 800ae30:	0800adf7 	.word	0x0800adf7
 800ae34:	0800adf7 	.word	0x0800adf7
 800ae38:	0800adf7 	.word	0x0800adf7
 800ae3c:	0800afd1 	.word	0x0800afd1
 800ae40:	0800afab 	.word	0x0800afab
 800ae44:	0800adf7 	.word	0x0800adf7
 800ae48:	0800adf7 	.word	0x0800adf7
 800ae4c:	0800af83 	.word	0x0800af83
 800ae50:	0800adf7 	.word	0x0800adf7
 800ae54:	0800adf7 	.word	0x0800adf7
 800ae58:	0800adf7 	.word	0x0800adf7
 800ae5c:	0800adf7 	.word	0x0800adf7
 800ae60:	0800af3f 	.word	0x0800af3f
 800ae64:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ae68:	e7da      	b.n	800ae20 <_scanf_float+0x90>
 800ae6a:	290e      	cmp	r1, #14
 800ae6c:	d8c3      	bhi.n	800adf6 <_scanf_float+0x66>
 800ae6e:	a001      	add	r0, pc, #4	@ (adr r0, 800ae74 <_scanf_float+0xe4>)
 800ae70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae74:	0800af2f 	.word	0x0800af2f
 800ae78:	0800adf7 	.word	0x0800adf7
 800ae7c:	0800af2f 	.word	0x0800af2f
 800ae80:	0800afbf 	.word	0x0800afbf
 800ae84:	0800adf7 	.word	0x0800adf7
 800ae88:	0800aed1 	.word	0x0800aed1
 800ae8c:	0800af15 	.word	0x0800af15
 800ae90:	0800af15 	.word	0x0800af15
 800ae94:	0800af15 	.word	0x0800af15
 800ae98:	0800af15 	.word	0x0800af15
 800ae9c:	0800af15 	.word	0x0800af15
 800aea0:	0800af15 	.word	0x0800af15
 800aea4:	0800af15 	.word	0x0800af15
 800aea8:	0800af15 	.word	0x0800af15
 800aeac:	0800af15 	.word	0x0800af15
 800aeb0:	2b6e      	cmp	r3, #110	@ 0x6e
 800aeb2:	d809      	bhi.n	800aec8 <_scanf_float+0x138>
 800aeb4:	2b60      	cmp	r3, #96	@ 0x60
 800aeb6:	d8b1      	bhi.n	800ae1c <_scanf_float+0x8c>
 800aeb8:	2b54      	cmp	r3, #84	@ 0x54
 800aeba:	d07b      	beq.n	800afb4 <_scanf_float+0x224>
 800aebc:	2b59      	cmp	r3, #89	@ 0x59
 800aebe:	d19a      	bne.n	800adf6 <_scanf_float+0x66>
 800aec0:	2d07      	cmp	r5, #7
 800aec2:	d198      	bne.n	800adf6 <_scanf_float+0x66>
 800aec4:	2508      	movs	r5, #8
 800aec6:	e02f      	b.n	800af28 <_scanf_float+0x198>
 800aec8:	2b74      	cmp	r3, #116	@ 0x74
 800aeca:	d073      	beq.n	800afb4 <_scanf_float+0x224>
 800aecc:	2b79      	cmp	r3, #121	@ 0x79
 800aece:	e7f6      	b.n	800aebe <_scanf_float+0x12e>
 800aed0:	6821      	ldr	r1, [r4, #0]
 800aed2:	05c8      	lsls	r0, r1, #23
 800aed4:	d51e      	bpl.n	800af14 <_scanf_float+0x184>
 800aed6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800aeda:	6021      	str	r1, [r4, #0]
 800aedc:	3701      	adds	r7, #1
 800aede:	f1bb 0f00 	cmp.w	fp, #0
 800aee2:	d003      	beq.n	800aeec <_scanf_float+0x15c>
 800aee4:	3201      	adds	r2, #1
 800aee6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aeea:	60a2      	str	r2, [r4, #8]
 800aeec:	68a3      	ldr	r3, [r4, #8]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	60a3      	str	r3, [r4, #8]
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	3301      	adds	r3, #1
 800aef6:	6123      	str	r3, [r4, #16]
 800aef8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f8c9 3004 	str.w	r3, [r9, #4]
 800af04:	f340 8082 	ble.w	800b00c <_scanf_float+0x27c>
 800af08:	f8d9 3000 	ldr.w	r3, [r9]
 800af0c:	3301      	adds	r3, #1
 800af0e:	f8c9 3000 	str.w	r3, [r9]
 800af12:	e762      	b.n	800adda <_scanf_float+0x4a>
 800af14:	eb1a 0105 	adds.w	r1, sl, r5
 800af18:	f47f af6d 	bne.w	800adf6 <_scanf_float+0x66>
 800af1c:	6822      	ldr	r2, [r4, #0]
 800af1e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800af22:	6022      	str	r2, [r4, #0]
 800af24:	460d      	mov	r5, r1
 800af26:	468a      	mov	sl, r1
 800af28:	f806 3b01 	strb.w	r3, [r6], #1
 800af2c:	e7de      	b.n	800aeec <_scanf_float+0x15c>
 800af2e:	6822      	ldr	r2, [r4, #0]
 800af30:	0610      	lsls	r0, r2, #24
 800af32:	f57f af60 	bpl.w	800adf6 <_scanf_float+0x66>
 800af36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af3a:	6022      	str	r2, [r4, #0]
 800af3c:	e7f4      	b.n	800af28 <_scanf_float+0x198>
 800af3e:	f1ba 0f00 	cmp.w	sl, #0
 800af42:	d10c      	bne.n	800af5e <_scanf_float+0x1ce>
 800af44:	b977      	cbnz	r7, 800af64 <_scanf_float+0x1d4>
 800af46:	6822      	ldr	r2, [r4, #0]
 800af48:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af4c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800af50:	d108      	bne.n	800af64 <_scanf_float+0x1d4>
 800af52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af56:	6022      	str	r2, [r4, #0]
 800af58:	f04f 0a01 	mov.w	sl, #1
 800af5c:	e7e4      	b.n	800af28 <_scanf_float+0x198>
 800af5e:	f1ba 0f02 	cmp.w	sl, #2
 800af62:	d050      	beq.n	800b006 <_scanf_float+0x276>
 800af64:	2d01      	cmp	r5, #1
 800af66:	d002      	beq.n	800af6e <_scanf_float+0x1de>
 800af68:	2d04      	cmp	r5, #4
 800af6a:	f47f af44 	bne.w	800adf6 <_scanf_float+0x66>
 800af6e:	3501      	adds	r5, #1
 800af70:	b2ed      	uxtb	r5, r5
 800af72:	e7d9      	b.n	800af28 <_scanf_float+0x198>
 800af74:	f1ba 0f01 	cmp.w	sl, #1
 800af78:	f47f af3d 	bne.w	800adf6 <_scanf_float+0x66>
 800af7c:	f04f 0a02 	mov.w	sl, #2
 800af80:	e7d2      	b.n	800af28 <_scanf_float+0x198>
 800af82:	b975      	cbnz	r5, 800afa2 <_scanf_float+0x212>
 800af84:	2f00      	cmp	r7, #0
 800af86:	f47f af37 	bne.w	800adf8 <_scanf_float+0x68>
 800af8a:	6822      	ldr	r2, [r4, #0]
 800af8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800af94:	f040 8103 	bne.w	800b19e <_scanf_float+0x40e>
 800af98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af9c:	6022      	str	r2, [r4, #0]
 800af9e:	2501      	movs	r5, #1
 800afa0:	e7c2      	b.n	800af28 <_scanf_float+0x198>
 800afa2:	2d03      	cmp	r5, #3
 800afa4:	d0e3      	beq.n	800af6e <_scanf_float+0x1de>
 800afa6:	2d05      	cmp	r5, #5
 800afa8:	e7df      	b.n	800af6a <_scanf_float+0x1da>
 800afaa:	2d02      	cmp	r5, #2
 800afac:	f47f af23 	bne.w	800adf6 <_scanf_float+0x66>
 800afb0:	2503      	movs	r5, #3
 800afb2:	e7b9      	b.n	800af28 <_scanf_float+0x198>
 800afb4:	2d06      	cmp	r5, #6
 800afb6:	f47f af1e 	bne.w	800adf6 <_scanf_float+0x66>
 800afba:	2507      	movs	r5, #7
 800afbc:	e7b4      	b.n	800af28 <_scanf_float+0x198>
 800afbe:	6822      	ldr	r2, [r4, #0]
 800afc0:	0591      	lsls	r1, r2, #22
 800afc2:	f57f af18 	bpl.w	800adf6 <_scanf_float+0x66>
 800afc6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800afca:	6022      	str	r2, [r4, #0]
 800afcc:	9702      	str	r7, [sp, #8]
 800afce:	e7ab      	b.n	800af28 <_scanf_float+0x198>
 800afd0:	6822      	ldr	r2, [r4, #0]
 800afd2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800afd6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800afda:	d005      	beq.n	800afe8 <_scanf_float+0x258>
 800afdc:	0550      	lsls	r0, r2, #21
 800afde:	f57f af0a 	bpl.w	800adf6 <_scanf_float+0x66>
 800afe2:	2f00      	cmp	r7, #0
 800afe4:	f000 80db 	beq.w	800b19e <_scanf_float+0x40e>
 800afe8:	0591      	lsls	r1, r2, #22
 800afea:	bf58      	it	pl
 800afec:	9902      	ldrpl	r1, [sp, #8]
 800afee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aff2:	bf58      	it	pl
 800aff4:	1a79      	subpl	r1, r7, r1
 800aff6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800affa:	bf58      	it	pl
 800affc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b000:	6022      	str	r2, [r4, #0]
 800b002:	2700      	movs	r7, #0
 800b004:	e790      	b.n	800af28 <_scanf_float+0x198>
 800b006:	f04f 0a03 	mov.w	sl, #3
 800b00a:	e78d      	b.n	800af28 <_scanf_float+0x198>
 800b00c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b010:	4649      	mov	r1, r9
 800b012:	4640      	mov	r0, r8
 800b014:	4798      	blx	r3
 800b016:	2800      	cmp	r0, #0
 800b018:	f43f aedf 	beq.w	800adda <_scanf_float+0x4a>
 800b01c:	e6eb      	b.n	800adf6 <_scanf_float+0x66>
 800b01e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b022:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b026:	464a      	mov	r2, r9
 800b028:	4640      	mov	r0, r8
 800b02a:	4798      	blx	r3
 800b02c:	6923      	ldr	r3, [r4, #16]
 800b02e:	3b01      	subs	r3, #1
 800b030:	6123      	str	r3, [r4, #16]
 800b032:	e6eb      	b.n	800ae0c <_scanf_float+0x7c>
 800b034:	1e6b      	subs	r3, r5, #1
 800b036:	2b06      	cmp	r3, #6
 800b038:	d824      	bhi.n	800b084 <_scanf_float+0x2f4>
 800b03a:	2d02      	cmp	r5, #2
 800b03c:	d836      	bhi.n	800b0ac <_scanf_float+0x31c>
 800b03e:	9b01      	ldr	r3, [sp, #4]
 800b040:	429e      	cmp	r6, r3
 800b042:	f67f aee7 	bls.w	800ae14 <_scanf_float+0x84>
 800b046:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b04a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b04e:	464a      	mov	r2, r9
 800b050:	4640      	mov	r0, r8
 800b052:	4798      	blx	r3
 800b054:	6923      	ldr	r3, [r4, #16]
 800b056:	3b01      	subs	r3, #1
 800b058:	6123      	str	r3, [r4, #16]
 800b05a:	e7f0      	b.n	800b03e <_scanf_float+0x2ae>
 800b05c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b060:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b064:	464a      	mov	r2, r9
 800b066:	4640      	mov	r0, r8
 800b068:	4798      	blx	r3
 800b06a:	6923      	ldr	r3, [r4, #16]
 800b06c:	3b01      	subs	r3, #1
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b074:	fa5f fa8a 	uxtb.w	sl, sl
 800b078:	f1ba 0f02 	cmp.w	sl, #2
 800b07c:	d1ee      	bne.n	800b05c <_scanf_float+0x2cc>
 800b07e:	3d03      	subs	r5, #3
 800b080:	b2ed      	uxtb	r5, r5
 800b082:	1b76      	subs	r6, r6, r5
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	05da      	lsls	r2, r3, #23
 800b088:	d530      	bpl.n	800b0ec <_scanf_float+0x35c>
 800b08a:	055b      	lsls	r3, r3, #21
 800b08c:	d511      	bpl.n	800b0b2 <_scanf_float+0x322>
 800b08e:	9b01      	ldr	r3, [sp, #4]
 800b090:	429e      	cmp	r6, r3
 800b092:	f67f aebf 	bls.w	800ae14 <_scanf_float+0x84>
 800b096:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b09a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b09e:	464a      	mov	r2, r9
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	4798      	blx	r3
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	6123      	str	r3, [r4, #16]
 800b0aa:	e7f0      	b.n	800b08e <_scanf_float+0x2fe>
 800b0ac:	46aa      	mov	sl, r5
 800b0ae:	46b3      	mov	fp, r6
 800b0b0:	e7de      	b.n	800b070 <_scanf_float+0x2e0>
 800b0b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b0b6:	6923      	ldr	r3, [r4, #16]
 800b0b8:	2965      	cmp	r1, #101	@ 0x65
 800b0ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0be:	f106 35ff 	add.w	r5, r6, #4294967295
 800b0c2:	6123      	str	r3, [r4, #16]
 800b0c4:	d00c      	beq.n	800b0e0 <_scanf_float+0x350>
 800b0c6:	2945      	cmp	r1, #69	@ 0x45
 800b0c8:	d00a      	beq.n	800b0e0 <_scanf_float+0x350>
 800b0ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0ce:	464a      	mov	r2, r9
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	4798      	blx	r3
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	1eb5      	subs	r5, r6, #2
 800b0de:	6123      	str	r3, [r4, #16]
 800b0e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0e4:	464a      	mov	r2, r9
 800b0e6:	4640      	mov	r0, r8
 800b0e8:	4798      	blx	r3
 800b0ea:	462e      	mov	r6, r5
 800b0ec:	6822      	ldr	r2, [r4, #0]
 800b0ee:	f012 0210 	ands.w	r2, r2, #16
 800b0f2:	d001      	beq.n	800b0f8 <_scanf_float+0x368>
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	e68e      	b.n	800ae16 <_scanf_float+0x86>
 800b0f8:	7032      	strb	r2, [r6, #0]
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b104:	d125      	bne.n	800b152 <_scanf_float+0x3c2>
 800b106:	9b02      	ldr	r3, [sp, #8]
 800b108:	429f      	cmp	r7, r3
 800b10a:	d00a      	beq.n	800b122 <_scanf_float+0x392>
 800b10c:	1bda      	subs	r2, r3, r7
 800b10e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b112:	429e      	cmp	r6, r3
 800b114:	bf28      	it	cs
 800b116:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b11a:	4922      	ldr	r1, [pc, #136]	@ (800b1a4 <_scanf_float+0x414>)
 800b11c:	4630      	mov	r0, r6
 800b11e:	f000 f93d 	bl	800b39c <siprintf>
 800b122:	9901      	ldr	r1, [sp, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	4640      	mov	r0, r8
 800b128:	f002 fc72 	bl	800da10 <_strtod_r>
 800b12c:	9b03      	ldr	r3, [sp, #12]
 800b12e:	6821      	ldr	r1, [r4, #0]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f011 0f02 	tst.w	r1, #2
 800b136:	ec57 6b10 	vmov	r6, r7, d0
 800b13a:	f103 0204 	add.w	r2, r3, #4
 800b13e:	d015      	beq.n	800b16c <_scanf_float+0x3dc>
 800b140:	9903      	ldr	r1, [sp, #12]
 800b142:	600a      	str	r2, [r1, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	e9c3 6700 	strd	r6, r7, [r3]
 800b14a:	68e3      	ldr	r3, [r4, #12]
 800b14c:	3301      	adds	r3, #1
 800b14e:	60e3      	str	r3, [r4, #12]
 800b150:	e7d0      	b.n	800b0f4 <_scanf_float+0x364>
 800b152:	9b04      	ldr	r3, [sp, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0e4      	beq.n	800b122 <_scanf_float+0x392>
 800b158:	9905      	ldr	r1, [sp, #20]
 800b15a:	230a      	movs	r3, #10
 800b15c:	3101      	adds	r1, #1
 800b15e:	4640      	mov	r0, r8
 800b160:	f002 fcd6 	bl	800db10 <_strtol_r>
 800b164:	9b04      	ldr	r3, [sp, #16]
 800b166:	9e05      	ldr	r6, [sp, #20]
 800b168:	1ac2      	subs	r2, r0, r3
 800b16a:	e7d0      	b.n	800b10e <_scanf_float+0x37e>
 800b16c:	f011 0f04 	tst.w	r1, #4
 800b170:	9903      	ldr	r1, [sp, #12]
 800b172:	600a      	str	r2, [r1, #0]
 800b174:	d1e6      	bne.n	800b144 <_scanf_float+0x3b4>
 800b176:	681d      	ldr	r5, [r3, #0]
 800b178:	4632      	mov	r2, r6
 800b17a:	463b      	mov	r3, r7
 800b17c:	4630      	mov	r0, r6
 800b17e:	4639      	mov	r1, r7
 800b180:	f7f5 fcf4 	bl	8000b6c <__aeabi_dcmpun>
 800b184:	b128      	cbz	r0, 800b192 <_scanf_float+0x402>
 800b186:	4808      	ldr	r0, [pc, #32]	@ (800b1a8 <_scanf_float+0x418>)
 800b188:	f000 fa38 	bl	800b5fc <nanf>
 800b18c:	ed85 0a00 	vstr	s0, [r5]
 800b190:	e7db      	b.n	800b14a <_scanf_float+0x3ba>
 800b192:	4630      	mov	r0, r6
 800b194:	4639      	mov	r1, r7
 800b196:	f7f5 fd47 	bl	8000c28 <__aeabi_d2f>
 800b19a:	6028      	str	r0, [r5, #0]
 800b19c:	e7d5      	b.n	800b14a <_scanf_float+0x3ba>
 800b19e:	2700      	movs	r7, #0
 800b1a0:	e62e      	b.n	800ae00 <_scanf_float+0x70>
 800b1a2:	bf00      	nop
 800b1a4:	080104e0 	.word	0x080104e0
 800b1a8:	08010621 	.word	0x08010621

0800b1ac <std>:
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	b510      	push	{r4, lr}
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b1b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1ba:	6083      	str	r3, [r0, #8]
 800b1bc:	8181      	strh	r1, [r0, #12]
 800b1be:	6643      	str	r3, [r0, #100]	@ 0x64
 800b1c0:	81c2      	strh	r2, [r0, #14]
 800b1c2:	6183      	str	r3, [r0, #24]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	2208      	movs	r2, #8
 800b1c8:	305c      	adds	r0, #92	@ 0x5c
 800b1ca:	f000 f989 	bl	800b4e0 <memset>
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b204 <std+0x58>)
 800b1d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b208 <std+0x5c>)
 800b1d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b20c <std+0x60>)
 800b1d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1da:	4b0d      	ldr	r3, [pc, #52]	@ (800b210 <std+0x64>)
 800b1dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1de:	4b0d      	ldr	r3, [pc, #52]	@ (800b214 <std+0x68>)
 800b1e0:	6224      	str	r4, [r4, #32]
 800b1e2:	429c      	cmp	r4, r3
 800b1e4:	d006      	beq.n	800b1f4 <std+0x48>
 800b1e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1ea:	4294      	cmp	r4, r2
 800b1ec:	d002      	beq.n	800b1f4 <std+0x48>
 800b1ee:	33d0      	adds	r3, #208	@ 0xd0
 800b1f0:	429c      	cmp	r4, r3
 800b1f2:	d105      	bne.n	800b200 <std+0x54>
 800b1f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1fc:	f000 b9ec 	b.w	800b5d8 <__retarget_lock_init_recursive>
 800b200:	bd10      	pop	{r4, pc}
 800b202:	bf00      	nop
 800b204:	0800b3e1 	.word	0x0800b3e1
 800b208:	0800b403 	.word	0x0800b403
 800b20c:	0800b43b 	.word	0x0800b43b
 800b210:	0800b45f 	.word	0x0800b45f
 800b214:	20000dac 	.word	0x20000dac

0800b218 <stdio_exit_handler>:
 800b218:	4a02      	ldr	r2, [pc, #8]	@ (800b224 <stdio_exit_handler+0xc>)
 800b21a:	4903      	ldr	r1, [pc, #12]	@ (800b228 <stdio_exit_handler+0x10>)
 800b21c:	4803      	ldr	r0, [pc, #12]	@ (800b22c <stdio_exit_handler+0x14>)
 800b21e:	f000 b869 	b.w	800b2f4 <_fwalk_sglue>
 800b222:	bf00      	nop
 800b224:	20000018 	.word	0x20000018
 800b228:	0800decd 	.word	0x0800decd
 800b22c:	20000028 	.word	0x20000028

0800b230 <cleanup_stdio>:
 800b230:	6841      	ldr	r1, [r0, #4]
 800b232:	4b0c      	ldr	r3, [pc, #48]	@ (800b264 <cleanup_stdio+0x34>)
 800b234:	4299      	cmp	r1, r3
 800b236:	b510      	push	{r4, lr}
 800b238:	4604      	mov	r4, r0
 800b23a:	d001      	beq.n	800b240 <cleanup_stdio+0x10>
 800b23c:	f002 fe46 	bl	800decc <_fflush_r>
 800b240:	68a1      	ldr	r1, [r4, #8]
 800b242:	4b09      	ldr	r3, [pc, #36]	@ (800b268 <cleanup_stdio+0x38>)
 800b244:	4299      	cmp	r1, r3
 800b246:	d002      	beq.n	800b24e <cleanup_stdio+0x1e>
 800b248:	4620      	mov	r0, r4
 800b24a:	f002 fe3f 	bl	800decc <_fflush_r>
 800b24e:	68e1      	ldr	r1, [r4, #12]
 800b250:	4b06      	ldr	r3, [pc, #24]	@ (800b26c <cleanup_stdio+0x3c>)
 800b252:	4299      	cmp	r1, r3
 800b254:	d004      	beq.n	800b260 <cleanup_stdio+0x30>
 800b256:	4620      	mov	r0, r4
 800b258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b25c:	f002 be36 	b.w	800decc <_fflush_r>
 800b260:	bd10      	pop	{r4, pc}
 800b262:	bf00      	nop
 800b264:	20000dac 	.word	0x20000dac
 800b268:	20000e14 	.word	0x20000e14
 800b26c:	20000e7c 	.word	0x20000e7c

0800b270 <global_stdio_init.part.0>:
 800b270:	b510      	push	{r4, lr}
 800b272:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a0 <global_stdio_init.part.0+0x30>)
 800b274:	4c0b      	ldr	r4, [pc, #44]	@ (800b2a4 <global_stdio_init.part.0+0x34>)
 800b276:	4a0c      	ldr	r2, [pc, #48]	@ (800b2a8 <global_stdio_init.part.0+0x38>)
 800b278:	601a      	str	r2, [r3, #0]
 800b27a:	4620      	mov	r0, r4
 800b27c:	2200      	movs	r2, #0
 800b27e:	2104      	movs	r1, #4
 800b280:	f7ff ff94 	bl	800b1ac <std>
 800b284:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b288:	2201      	movs	r2, #1
 800b28a:	2109      	movs	r1, #9
 800b28c:	f7ff ff8e 	bl	800b1ac <std>
 800b290:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b294:	2202      	movs	r2, #2
 800b296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b29a:	2112      	movs	r1, #18
 800b29c:	f7ff bf86 	b.w	800b1ac <std>
 800b2a0:	20000ee4 	.word	0x20000ee4
 800b2a4:	20000dac 	.word	0x20000dac
 800b2a8:	0800b219 	.word	0x0800b219

0800b2ac <__sfp_lock_acquire>:
 800b2ac:	4801      	ldr	r0, [pc, #4]	@ (800b2b4 <__sfp_lock_acquire+0x8>)
 800b2ae:	f000 b994 	b.w	800b5da <__retarget_lock_acquire_recursive>
 800b2b2:	bf00      	nop
 800b2b4:	20000eed 	.word	0x20000eed

0800b2b8 <__sfp_lock_release>:
 800b2b8:	4801      	ldr	r0, [pc, #4]	@ (800b2c0 <__sfp_lock_release+0x8>)
 800b2ba:	f000 b98f 	b.w	800b5dc <__retarget_lock_release_recursive>
 800b2be:	bf00      	nop
 800b2c0:	20000eed 	.word	0x20000eed

0800b2c4 <__sinit>:
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	f7ff fff0 	bl	800b2ac <__sfp_lock_acquire>
 800b2cc:	6a23      	ldr	r3, [r4, #32]
 800b2ce:	b11b      	cbz	r3, 800b2d8 <__sinit+0x14>
 800b2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2d4:	f7ff bff0 	b.w	800b2b8 <__sfp_lock_release>
 800b2d8:	4b04      	ldr	r3, [pc, #16]	@ (800b2ec <__sinit+0x28>)
 800b2da:	6223      	str	r3, [r4, #32]
 800b2dc:	4b04      	ldr	r3, [pc, #16]	@ (800b2f0 <__sinit+0x2c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1f5      	bne.n	800b2d0 <__sinit+0xc>
 800b2e4:	f7ff ffc4 	bl	800b270 <global_stdio_init.part.0>
 800b2e8:	e7f2      	b.n	800b2d0 <__sinit+0xc>
 800b2ea:	bf00      	nop
 800b2ec:	0800b231 	.word	0x0800b231
 800b2f0:	20000ee4 	.word	0x20000ee4

0800b2f4 <_fwalk_sglue>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	4688      	mov	r8, r1
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	2600      	movs	r6, #0
 800b300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b304:	f1b9 0901 	subs.w	r9, r9, #1
 800b308:	d505      	bpl.n	800b316 <_fwalk_sglue+0x22>
 800b30a:	6824      	ldr	r4, [r4, #0]
 800b30c:	2c00      	cmp	r4, #0
 800b30e:	d1f7      	bne.n	800b300 <_fwalk_sglue+0xc>
 800b310:	4630      	mov	r0, r6
 800b312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b316:	89ab      	ldrh	r3, [r5, #12]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d907      	bls.n	800b32c <_fwalk_sglue+0x38>
 800b31c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b320:	3301      	adds	r3, #1
 800b322:	d003      	beq.n	800b32c <_fwalk_sglue+0x38>
 800b324:	4629      	mov	r1, r5
 800b326:	4638      	mov	r0, r7
 800b328:	47c0      	blx	r8
 800b32a:	4306      	orrs	r6, r0
 800b32c:	3568      	adds	r5, #104	@ 0x68
 800b32e:	e7e9      	b.n	800b304 <_fwalk_sglue+0x10>

0800b330 <sniprintf>:
 800b330:	b40c      	push	{r2, r3}
 800b332:	b530      	push	{r4, r5, lr}
 800b334:	4b18      	ldr	r3, [pc, #96]	@ (800b398 <sniprintf+0x68>)
 800b336:	1e0c      	subs	r4, r1, #0
 800b338:	681d      	ldr	r5, [r3, #0]
 800b33a:	b09d      	sub	sp, #116	@ 0x74
 800b33c:	da08      	bge.n	800b350 <sniprintf+0x20>
 800b33e:	238b      	movs	r3, #139	@ 0x8b
 800b340:	602b      	str	r3, [r5, #0]
 800b342:	f04f 30ff 	mov.w	r0, #4294967295
 800b346:	b01d      	add	sp, #116	@ 0x74
 800b348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b34c:	b002      	add	sp, #8
 800b34e:	4770      	bx	lr
 800b350:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b354:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b358:	f04f 0300 	mov.w	r3, #0
 800b35c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b35e:	bf14      	ite	ne
 800b360:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b364:	4623      	moveq	r3, r4
 800b366:	9304      	str	r3, [sp, #16]
 800b368:	9307      	str	r3, [sp, #28]
 800b36a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b36e:	9002      	str	r0, [sp, #8]
 800b370:	9006      	str	r0, [sp, #24]
 800b372:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b376:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b378:	ab21      	add	r3, sp, #132	@ 0x84
 800b37a:	a902      	add	r1, sp, #8
 800b37c:	4628      	mov	r0, r5
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	f002 fc24 	bl	800dbcc <_svfiprintf_r>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	bfbc      	itt	lt
 800b388:	238b      	movlt	r3, #139	@ 0x8b
 800b38a:	602b      	strlt	r3, [r5, #0]
 800b38c:	2c00      	cmp	r4, #0
 800b38e:	d0da      	beq.n	800b346 <sniprintf+0x16>
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	2200      	movs	r2, #0
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	e7d6      	b.n	800b346 <sniprintf+0x16>
 800b398:	20000024 	.word	0x20000024

0800b39c <siprintf>:
 800b39c:	b40e      	push	{r1, r2, r3}
 800b39e:	b510      	push	{r4, lr}
 800b3a0:	b09d      	sub	sp, #116	@ 0x74
 800b3a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b3a4:	9002      	str	r0, [sp, #8]
 800b3a6:	9006      	str	r0, [sp, #24]
 800b3a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b3ac:	480a      	ldr	r0, [pc, #40]	@ (800b3d8 <siprintf+0x3c>)
 800b3ae:	9107      	str	r1, [sp, #28]
 800b3b0:	9104      	str	r1, [sp, #16]
 800b3b2:	490a      	ldr	r1, [pc, #40]	@ (800b3dc <siprintf+0x40>)
 800b3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3b8:	9105      	str	r1, [sp, #20]
 800b3ba:	2400      	movs	r4, #0
 800b3bc:	a902      	add	r1, sp, #8
 800b3be:	6800      	ldr	r0, [r0, #0]
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b3c4:	f002 fc02 	bl	800dbcc <_svfiprintf_r>
 800b3c8:	9b02      	ldr	r3, [sp, #8]
 800b3ca:	701c      	strb	r4, [r3, #0]
 800b3cc:	b01d      	add	sp, #116	@ 0x74
 800b3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d2:	b003      	add	sp, #12
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	20000024 	.word	0x20000024
 800b3dc:	ffff0208 	.word	0xffff0208

0800b3e0 <__sread>:
 800b3e0:	b510      	push	{r4, lr}
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e8:	f000 f8a8 	bl	800b53c <_read_r>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	bfab      	itete	ge
 800b3f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b3f4:	181b      	addge	r3, r3, r0
 800b3f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3fa:	bfac      	ite	ge
 800b3fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3fe:	81a3      	strhlt	r3, [r4, #12]
 800b400:	bd10      	pop	{r4, pc}

0800b402 <__swrite>:
 800b402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b406:	461f      	mov	r7, r3
 800b408:	898b      	ldrh	r3, [r1, #12]
 800b40a:	05db      	lsls	r3, r3, #23
 800b40c:	4605      	mov	r5, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	4616      	mov	r6, r2
 800b412:	d505      	bpl.n	800b420 <__swrite+0x1e>
 800b414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b418:	2302      	movs	r3, #2
 800b41a:	2200      	movs	r2, #0
 800b41c:	f000 f87c 	bl	800b518 <_lseek_r>
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b42a:	81a3      	strh	r3, [r4, #12]
 800b42c:	4632      	mov	r2, r6
 800b42e:	463b      	mov	r3, r7
 800b430:	4628      	mov	r0, r5
 800b432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b436:	f000 b893 	b.w	800b560 <_write_r>

0800b43a <__sseek>:
 800b43a:	b510      	push	{r4, lr}
 800b43c:	460c      	mov	r4, r1
 800b43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b442:	f000 f869 	bl	800b518 <_lseek_r>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	bf15      	itete	ne
 800b44c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b44e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b452:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b456:	81a3      	strheq	r3, [r4, #12]
 800b458:	bf18      	it	ne
 800b45a:	81a3      	strhne	r3, [r4, #12]
 800b45c:	bd10      	pop	{r4, pc}

0800b45e <__sclose>:
 800b45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b462:	f000 b849 	b.w	800b4f8 <_close_r>

0800b466 <_vsniprintf_r>:
 800b466:	b530      	push	{r4, r5, lr}
 800b468:	4614      	mov	r4, r2
 800b46a:	2c00      	cmp	r4, #0
 800b46c:	b09b      	sub	sp, #108	@ 0x6c
 800b46e:	4605      	mov	r5, r0
 800b470:	461a      	mov	r2, r3
 800b472:	da05      	bge.n	800b480 <_vsniprintf_r+0x1a>
 800b474:	238b      	movs	r3, #139	@ 0x8b
 800b476:	6003      	str	r3, [r0, #0]
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	b01b      	add	sp, #108	@ 0x6c
 800b47e:	bd30      	pop	{r4, r5, pc}
 800b480:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b484:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b488:	f04f 0300 	mov.w	r3, #0
 800b48c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b48e:	bf14      	ite	ne
 800b490:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b494:	4623      	moveq	r3, r4
 800b496:	9302      	str	r3, [sp, #8]
 800b498:	9305      	str	r3, [sp, #20]
 800b49a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b49e:	9100      	str	r1, [sp, #0]
 800b4a0:	9104      	str	r1, [sp, #16]
 800b4a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b4a6:	4669      	mov	r1, sp
 800b4a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b4aa:	f002 fb8f 	bl	800dbcc <_svfiprintf_r>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	bfbc      	itt	lt
 800b4b2:	238b      	movlt	r3, #139	@ 0x8b
 800b4b4:	602b      	strlt	r3, [r5, #0]
 800b4b6:	2c00      	cmp	r4, #0
 800b4b8:	d0e0      	beq.n	800b47c <_vsniprintf_r+0x16>
 800b4ba:	9b00      	ldr	r3, [sp, #0]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	701a      	strb	r2, [r3, #0]
 800b4c0:	e7dc      	b.n	800b47c <_vsniprintf_r+0x16>
	...

0800b4c4 <vsniprintf>:
 800b4c4:	b507      	push	{r0, r1, r2, lr}
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	460a      	mov	r2, r1
 800b4cc:	4601      	mov	r1, r0
 800b4ce:	4803      	ldr	r0, [pc, #12]	@ (800b4dc <vsniprintf+0x18>)
 800b4d0:	6800      	ldr	r0, [r0, #0]
 800b4d2:	f7ff ffc8 	bl	800b466 <_vsniprintf_r>
 800b4d6:	b003      	add	sp, #12
 800b4d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4dc:	20000024 	.word	0x20000024

0800b4e0 <memset>:
 800b4e0:	4402      	add	r2, r0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d100      	bne.n	800b4ea <memset+0xa>
 800b4e8:	4770      	bx	lr
 800b4ea:	f803 1b01 	strb.w	r1, [r3], #1
 800b4ee:	e7f9      	b.n	800b4e4 <memset+0x4>

0800b4f0 <_localeconv_r>:
 800b4f0:	4800      	ldr	r0, [pc, #0]	@ (800b4f4 <_localeconv_r+0x4>)
 800b4f2:	4770      	bx	lr
 800b4f4:	20000164 	.word	0x20000164

0800b4f8 <_close_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d06      	ldr	r5, [pc, #24]	@ (800b514 <_close_r+0x1c>)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4604      	mov	r4, r0
 800b500:	4608      	mov	r0, r1
 800b502:	602b      	str	r3, [r5, #0]
 800b504:	f7fa fe59 	bl	80061ba <_close>
 800b508:	1c43      	adds	r3, r0, #1
 800b50a:	d102      	bne.n	800b512 <_close_r+0x1a>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	b103      	cbz	r3, 800b512 <_close_r+0x1a>
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	20000ee8 	.word	0x20000ee8

0800b518 <_lseek_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4d07      	ldr	r5, [pc, #28]	@ (800b538 <_lseek_r+0x20>)
 800b51c:	4604      	mov	r4, r0
 800b51e:	4608      	mov	r0, r1
 800b520:	4611      	mov	r1, r2
 800b522:	2200      	movs	r2, #0
 800b524:	602a      	str	r2, [r5, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	f7fa fe6e 	bl	8006208 <_lseek>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_lseek_r+0x1e>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_lseek_r+0x1e>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	20000ee8 	.word	0x20000ee8

0800b53c <_read_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d07      	ldr	r5, [pc, #28]	@ (800b55c <_read_r+0x20>)
 800b540:	4604      	mov	r4, r0
 800b542:	4608      	mov	r0, r1
 800b544:	4611      	mov	r1, r2
 800b546:	2200      	movs	r2, #0
 800b548:	602a      	str	r2, [r5, #0]
 800b54a:	461a      	mov	r2, r3
 800b54c:	f7fa fdfc 	bl	8006148 <_read>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d102      	bne.n	800b55a <_read_r+0x1e>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	b103      	cbz	r3, 800b55a <_read_r+0x1e>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	20000ee8 	.word	0x20000ee8

0800b560 <_write_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4d07      	ldr	r5, [pc, #28]	@ (800b580 <_write_r+0x20>)
 800b564:	4604      	mov	r4, r0
 800b566:	4608      	mov	r0, r1
 800b568:	4611      	mov	r1, r2
 800b56a:	2200      	movs	r2, #0
 800b56c:	602a      	str	r2, [r5, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	f7fa fe07 	bl	8006182 <_write>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d102      	bne.n	800b57e <_write_r+0x1e>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	b103      	cbz	r3, 800b57e <_write_r+0x1e>
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	20000ee8 	.word	0x20000ee8

0800b584 <__errno>:
 800b584:	4b01      	ldr	r3, [pc, #4]	@ (800b58c <__errno+0x8>)
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	20000024 	.word	0x20000024

0800b590 <__libc_init_array>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	4d0d      	ldr	r5, [pc, #52]	@ (800b5c8 <__libc_init_array+0x38>)
 800b594:	4c0d      	ldr	r4, [pc, #52]	@ (800b5cc <__libc_init_array+0x3c>)
 800b596:	1b64      	subs	r4, r4, r5
 800b598:	10a4      	asrs	r4, r4, #2
 800b59a:	2600      	movs	r6, #0
 800b59c:	42a6      	cmp	r6, r4
 800b59e:	d109      	bne.n	800b5b4 <__libc_init_array+0x24>
 800b5a0:	4d0b      	ldr	r5, [pc, #44]	@ (800b5d0 <__libc_init_array+0x40>)
 800b5a2:	4c0c      	ldr	r4, [pc, #48]	@ (800b5d4 <__libc_init_array+0x44>)
 800b5a4:	f003 ff5a 	bl	800f45c <_init>
 800b5a8:	1b64      	subs	r4, r4, r5
 800b5aa:	10a4      	asrs	r4, r4, #2
 800b5ac:	2600      	movs	r6, #0
 800b5ae:	42a6      	cmp	r6, r4
 800b5b0:	d105      	bne.n	800b5be <__libc_init_array+0x2e>
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b8:	4798      	blx	r3
 800b5ba:	3601      	adds	r6, #1
 800b5bc:	e7ee      	b.n	800b59c <__libc_init_array+0xc>
 800b5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c2:	4798      	blx	r3
 800b5c4:	3601      	adds	r6, #1
 800b5c6:	e7f2      	b.n	800b5ae <__libc_init_array+0x1e>
 800b5c8:	080108f4 	.word	0x080108f4
 800b5cc:	080108f4 	.word	0x080108f4
 800b5d0:	080108f4 	.word	0x080108f4
 800b5d4:	080108f8 	.word	0x080108f8

0800b5d8 <__retarget_lock_init_recursive>:
 800b5d8:	4770      	bx	lr

0800b5da <__retarget_lock_acquire_recursive>:
 800b5da:	4770      	bx	lr

0800b5dc <__retarget_lock_release_recursive>:
 800b5dc:	4770      	bx	lr

0800b5de <memcpy>:
 800b5de:	440a      	add	r2, r1
 800b5e0:	4291      	cmp	r1, r2
 800b5e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5e6:	d100      	bne.n	800b5ea <memcpy+0xc>
 800b5e8:	4770      	bx	lr
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5f4:	4291      	cmp	r1, r2
 800b5f6:	d1f9      	bne.n	800b5ec <memcpy+0xe>
 800b5f8:	bd10      	pop	{r4, pc}
	...

0800b5fc <nanf>:
 800b5fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b604 <nanf+0x8>
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	7fc00000 	.word	0x7fc00000

0800b608 <quorem>:
 800b608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	6903      	ldr	r3, [r0, #16]
 800b60e:	690c      	ldr	r4, [r1, #16]
 800b610:	42a3      	cmp	r3, r4
 800b612:	4607      	mov	r7, r0
 800b614:	db7e      	blt.n	800b714 <quorem+0x10c>
 800b616:	3c01      	subs	r4, #1
 800b618:	f101 0814 	add.w	r8, r1, #20
 800b61c:	00a3      	lsls	r3, r4, #2
 800b61e:	f100 0514 	add.w	r5, r0, #20
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b62e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b632:	3301      	adds	r3, #1
 800b634:	429a      	cmp	r2, r3
 800b636:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b63a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b63e:	d32e      	bcc.n	800b69e <quorem+0x96>
 800b640:	f04f 0a00 	mov.w	sl, #0
 800b644:	46c4      	mov	ip, r8
 800b646:	46ae      	mov	lr, r5
 800b648:	46d3      	mov	fp, sl
 800b64a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b64e:	b298      	uxth	r0, r3
 800b650:	fb06 a000 	mla	r0, r6, r0, sl
 800b654:	0c02      	lsrs	r2, r0, #16
 800b656:	0c1b      	lsrs	r3, r3, #16
 800b658:	fb06 2303 	mla	r3, r6, r3, r2
 800b65c:	f8de 2000 	ldr.w	r2, [lr]
 800b660:	b280      	uxth	r0, r0
 800b662:	b292      	uxth	r2, r2
 800b664:	1a12      	subs	r2, r2, r0
 800b666:	445a      	add	r2, fp
 800b668:	f8de 0000 	ldr.w	r0, [lr]
 800b66c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b670:	b29b      	uxth	r3, r3
 800b672:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b676:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b67a:	b292      	uxth	r2, r2
 800b67c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b680:	45e1      	cmp	r9, ip
 800b682:	f84e 2b04 	str.w	r2, [lr], #4
 800b686:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b68a:	d2de      	bcs.n	800b64a <quorem+0x42>
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	58eb      	ldr	r3, [r5, r3]
 800b690:	b92b      	cbnz	r3, 800b69e <quorem+0x96>
 800b692:	9b01      	ldr	r3, [sp, #4]
 800b694:	3b04      	subs	r3, #4
 800b696:	429d      	cmp	r5, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	d32f      	bcc.n	800b6fc <quorem+0xf4>
 800b69c:	613c      	str	r4, [r7, #16]
 800b69e:	4638      	mov	r0, r7
 800b6a0:	f001 f9c6 	bl	800ca30 <__mcmp>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	db25      	blt.n	800b6f4 <quorem+0xec>
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6b0:	f8d1 c000 	ldr.w	ip, [r1]
 800b6b4:	fa1f fe82 	uxth.w	lr, r2
 800b6b8:	fa1f f38c 	uxth.w	r3, ip
 800b6bc:	eba3 030e 	sub.w	r3, r3, lr
 800b6c0:	4403      	add	r3, r0
 800b6c2:	0c12      	lsrs	r2, r2, #16
 800b6c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b6c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6d2:	45c1      	cmp	r9, r8
 800b6d4:	f841 3b04 	str.w	r3, [r1], #4
 800b6d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b6dc:	d2e6      	bcs.n	800b6ac <quorem+0xa4>
 800b6de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6e6:	b922      	cbnz	r2, 800b6f2 <quorem+0xea>
 800b6e8:	3b04      	subs	r3, #4
 800b6ea:	429d      	cmp	r5, r3
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	d30b      	bcc.n	800b708 <quorem+0x100>
 800b6f0:	613c      	str	r4, [r7, #16]
 800b6f2:	3601      	adds	r6, #1
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	b003      	add	sp, #12
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	6812      	ldr	r2, [r2, #0]
 800b6fe:	3b04      	subs	r3, #4
 800b700:	2a00      	cmp	r2, #0
 800b702:	d1cb      	bne.n	800b69c <quorem+0x94>
 800b704:	3c01      	subs	r4, #1
 800b706:	e7c6      	b.n	800b696 <quorem+0x8e>
 800b708:	6812      	ldr	r2, [r2, #0]
 800b70a:	3b04      	subs	r3, #4
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	d1ef      	bne.n	800b6f0 <quorem+0xe8>
 800b710:	3c01      	subs	r4, #1
 800b712:	e7ea      	b.n	800b6ea <quorem+0xe2>
 800b714:	2000      	movs	r0, #0
 800b716:	e7ee      	b.n	800b6f6 <quorem+0xee>

0800b718 <_dtoa_r>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	69c7      	ldr	r7, [r0, #28]
 800b71e:	b097      	sub	sp, #92	@ 0x5c
 800b720:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b724:	ec55 4b10 	vmov	r4, r5, d0
 800b728:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b72a:	9107      	str	r1, [sp, #28]
 800b72c:	4681      	mov	r9, r0
 800b72e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b730:	9311      	str	r3, [sp, #68]	@ 0x44
 800b732:	b97f      	cbnz	r7, 800b754 <_dtoa_r+0x3c>
 800b734:	2010      	movs	r0, #16
 800b736:	f000 fe09 	bl	800c34c <malloc>
 800b73a:	4602      	mov	r2, r0
 800b73c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b740:	b920      	cbnz	r0, 800b74c <_dtoa_r+0x34>
 800b742:	4ba9      	ldr	r3, [pc, #676]	@ (800b9e8 <_dtoa_r+0x2d0>)
 800b744:	21ef      	movs	r1, #239	@ 0xef
 800b746:	48a9      	ldr	r0, [pc, #676]	@ (800b9ec <_dtoa_r+0x2d4>)
 800b748:	f002 fc2e 	bl	800dfa8 <__assert_func>
 800b74c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b750:	6007      	str	r7, [r0, #0]
 800b752:	60c7      	str	r7, [r0, #12]
 800b754:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b758:	6819      	ldr	r1, [r3, #0]
 800b75a:	b159      	cbz	r1, 800b774 <_dtoa_r+0x5c>
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	604a      	str	r2, [r1, #4]
 800b760:	2301      	movs	r3, #1
 800b762:	4093      	lsls	r3, r2
 800b764:	608b      	str	r3, [r1, #8]
 800b766:	4648      	mov	r0, r9
 800b768:	f000 fee6 	bl	800c538 <_Bfree>
 800b76c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b770:	2200      	movs	r2, #0
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	1e2b      	subs	r3, r5, #0
 800b776:	bfb9      	ittee	lt
 800b778:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b77c:	9305      	strlt	r3, [sp, #20]
 800b77e:	2300      	movge	r3, #0
 800b780:	6033      	strge	r3, [r6, #0]
 800b782:	9f05      	ldr	r7, [sp, #20]
 800b784:	4b9a      	ldr	r3, [pc, #616]	@ (800b9f0 <_dtoa_r+0x2d8>)
 800b786:	bfbc      	itt	lt
 800b788:	2201      	movlt	r2, #1
 800b78a:	6032      	strlt	r2, [r6, #0]
 800b78c:	43bb      	bics	r3, r7
 800b78e:	d112      	bne.n	800b7b6 <_dtoa_r+0x9e>
 800b790:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b792:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b79c:	4323      	orrs	r3, r4
 800b79e:	f000 855a 	beq.w	800c256 <_dtoa_r+0xb3e>
 800b7a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ba04 <_dtoa_r+0x2ec>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 855c 	beq.w	800c266 <_dtoa_r+0xb4e>
 800b7ae:	f10a 0303 	add.w	r3, sl, #3
 800b7b2:	f000 bd56 	b.w	800c262 <_dtoa_r+0xb4a>
 800b7b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	ec51 0b17 	vmov	r0, r1, d7
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b7c6:	f7f5 f99f 	bl	8000b08 <__aeabi_dcmpeq>
 800b7ca:	4680      	mov	r8, r0
 800b7cc:	b158      	cbz	r0, 800b7e6 <_dtoa_r+0xce>
 800b7ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	6013      	str	r3, [r2, #0]
 800b7d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7d6:	b113      	cbz	r3, 800b7de <_dtoa_r+0xc6>
 800b7d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b7da:	4b86      	ldr	r3, [pc, #536]	@ (800b9f4 <_dtoa_r+0x2dc>)
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ba08 <_dtoa_r+0x2f0>
 800b7e2:	f000 bd40 	b.w	800c266 <_dtoa_r+0xb4e>
 800b7e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b7ea:	aa14      	add	r2, sp, #80	@ 0x50
 800b7ec:	a915      	add	r1, sp, #84	@ 0x54
 800b7ee:	4648      	mov	r0, r9
 800b7f0:	f001 fa3e 	bl	800cc70 <__d2b>
 800b7f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b7f8:	9002      	str	r0, [sp, #8]
 800b7fa:	2e00      	cmp	r6, #0
 800b7fc:	d078      	beq.n	800b8f0 <_dtoa_r+0x1d8>
 800b7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b800:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b80c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b810:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b814:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b818:	4619      	mov	r1, r3
 800b81a:	2200      	movs	r2, #0
 800b81c:	4b76      	ldr	r3, [pc, #472]	@ (800b9f8 <_dtoa_r+0x2e0>)
 800b81e:	f7f4 fd53 	bl	80002c8 <__aeabi_dsub>
 800b822:	a36b      	add	r3, pc, #428	@ (adr r3, 800b9d0 <_dtoa_r+0x2b8>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 ff06 	bl	8000638 <__aeabi_dmul>
 800b82c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b9d8 <_dtoa_r+0x2c0>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 fd4b 	bl	80002cc <__adddf3>
 800b836:	4604      	mov	r4, r0
 800b838:	4630      	mov	r0, r6
 800b83a:	460d      	mov	r5, r1
 800b83c:	f7f4 fe92 	bl	8000564 <__aeabi_i2d>
 800b840:	a367      	add	r3, pc, #412	@ (adr r3, 800b9e0 <_dtoa_r+0x2c8>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 fef7 	bl	8000638 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4620      	mov	r0, r4
 800b850:	4629      	mov	r1, r5
 800b852:	f7f4 fd3b 	bl	80002cc <__adddf3>
 800b856:	4604      	mov	r4, r0
 800b858:	460d      	mov	r5, r1
 800b85a:	f7f5 f99d 	bl	8000b98 <__aeabi_d2iz>
 800b85e:	2200      	movs	r2, #0
 800b860:	4607      	mov	r7, r0
 800b862:	2300      	movs	r3, #0
 800b864:	4620      	mov	r0, r4
 800b866:	4629      	mov	r1, r5
 800b868:	f7f5 f958 	bl	8000b1c <__aeabi_dcmplt>
 800b86c:	b140      	cbz	r0, 800b880 <_dtoa_r+0x168>
 800b86e:	4638      	mov	r0, r7
 800b870:	f7f4 fe78 	bl	8000564 <__aeabi_i2d>
 800b874:	4622      	mov	r2, r4
 800b876:	462b      	mov	r3, r5
 800b878:	f7f5 f946 	bl	8000b08 <__aeabi_dcmpeq>
 800b87c:	b900      	cbnz	r0, 800b880 <_dtoa_r+0x168>
 800b87e:	3f01      	subs	r7, #1
 800b880:	2f16      	cmp	r7, #22
 800b882:	d852      	bhi.n	800b92a <_dtoa_r+0x212>
 800b884:	4b5d      	ldr	r3, [pc, #372]	@ (800b9fc <_dtoa_r+0x2e4>)
 800b886:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b892:	f7f5 f943 	bl	8000b1c <__aeabi_dcmplt>
 800b896:	2800      	cmp	r0, #0
 800b898:	d049      	beq.n	800b92e <_dtoa_r+0x216>
 800b89a:	3f01      	subs	r7, #1
 800b89c:	2300      	movs	r3, #0
 800b89e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b8a2:	1b9b      	subs	r3, r3, r6
 800b8a4:	1e5a      	subs	r2, r3, #1
 800b8a6:	bf45      	ittet	mi
 800b8a8:	f1c3 0301 	rsbmi	r3, r3, #1
 800b8ac:	9300      	strmi	r3, [sp, #0]
 800b8ae:	2300      	movpl	r3, #0
 800b8b0:	2300      	movmi	r3, #0
 800b8b2:	9206      	str	r2, [sp, #24]
 800b8b4:	bf54      	ite	pl
 800b8b6:	9300      	strpl	r3, [sp, #0]
 800b8b8:	9306      	strmi	r3, [sp, #24]
 800b8ba:	2f00      	cmp	r7, #0
 800b8bc:	db39      	blt.n	800b932 <_dtoa_r+0x21a>
 800b8be:	9b06      	ldr	r3, [sp, #24]
 800b8c0:	970d      	str	r7, [sp, #52]	@ 0x34
 800b8c2:	443b      	add	r3, r7
 800b8c4:	9306      	str	r3, [sp, #24]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	9308      	str	r3, [sp, #32]
 800b8ca:	9b07      	ldr	r3, [sp, #28]
 800b8cc:	2b09      	cmp	r3, #9
 800b8ce:	d863      	bhi.n	800b998 <_dtoa_r+0x280>
 800b8d0:	2b05      	cmp	r3, #5
 800b8d2:	bfc4      	itt	gt
 800b8d4:	3b04      	subgt	r3, #4
 800b8d6:	9307      	strgt	r3, [sp, #28]
 800b8d8:	9b07      	ldr	r3, [sp, #28]
 800b8da:	f1a3 0302 	sub.w	r3, r3, #2
 800b8de:	bfcc      	ite	gt
 800b8e0:	2400      	movgt	r4, #0
 800b8e2:	2401      	movle	r4, #1
 800b8e4:	2b03      	cmp	r3, #3
 800b8e6:	d863      	bhi.n	800b9b0 <_dtoa_r+0x298>
 800b8e8:	e8df f003 	tbb	[pc, r3]
 800b8ec:	2b375452 	.word	0x2b375452
 800b8f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b8f4:	441e      	add	r6, r3
 800b8f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	bfc1      	itttt	gt
 800b8fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b902:	409f      	lslgt	r7, r3
 800b904:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b908:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b90c:	bfd6      	itet	le
 800b90e:	f1c3 0320 	rsble	r3, r3, #32
 800b912:	ea47 0003 	orrgt.w	r0, r7, r3
 800b916:	fa04 f003 	lslle.w	r0, r4, r3
 800b91a:	f7f4 fe13 	bl	8000544 <__aeabi_ui2d>
 800b91e:	2201      	movs	r2, #1
 800b920:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b924:	3e01      	subs	r6, #1
 800b926:	9212      	str	r2, [sp, #72]	@ 0x48
 800b928:	e776      	b.n	800b818 <_dtoa_r+0x100>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e7b7      	b.n	800b89e <_dtoa_r+0x186>
 800b92e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b930:	e7b6      	b.n	800b8a0 <_dtoa_r+0x188>
 800b932:	9b00      	ldr	r3, [sp, #0]
 800b934:	1bdb      	subs	r3, r3, r7
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	427b      	negs	r3, r7
 800b93a:	9308      	str	r3, [sp, #32]
 800b93c:	2300      	movs	r3, #0
 800b93e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b940:	e7c3      	b.n	800b8ca <_dtoa_r+0x1b2>
 800b942:	2301      	movs	r3, #1
 800b944:	9309      	str	r3, [sp, #36]	@ 0x24
 800b946:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b948:	eb07 0b03 	add.w	fp, r7, r3
 800b94c:	f10b 0301 	add.w	r3, fp, #1
 800b950:	2b01      	cmp	r3, #1
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	bfb8      	it	lt
 800b956:	2301      	movlt	r3, #1
 800b958:	e006      	b.n	800b968 <_dtoa_r+0x250>
 800b95a:	2301      	movs	r3, #1
 800b95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b960:	2b00      	cmp	r3, #0
 800b962:	dd28      	ble.n	800b9b6 <_dtoa_r+0x29e>
 800b964:	469b      	mov	fp, r3
 800b966:	9303      	str	r3, [sp, #12]
 800b968:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b96c:	2100      	movs	r1, #0
 800b96e:	2204      	movs	r2, #4
 800b970:	f102 0514 	add.w	r5, r2, #20
 800b974:	429d      	cmp	r5, r3
 800b976:	d926      	bls.n	800b9c6 <_dtoa_r+0x2ae>
 800b978:	6041      	str	r1, [r0, #4]
 800b97a:	4648      	mov	r0, r9
 800b97c:	f000 fd9c 	bl	800c4b8 <_Balloc>
 800b980:	4682      	mov	sl, r0
 800b982:	2800      	cmp	r0, #0
 800b984:	d142      	bne.n	800ba0c <_dtoa_r+0x2f4>
 800b986:	4b1e      	ldr	r3, [pc, #120]	@ (800ba00 <_dtoa_r+0x2e8>)
 800b988:	4602      	mov	r2, r0
 800b98a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b98e:	e6da      	b.n	800b746 <_dtoa_r+0x2e>
 800b990:	2300      	movs	r3, #0
 800b992:	e7e3      	b.n	800b95c <_dtoa_r+0x244>
 800b994:	2300      	movs	r3, #0
 800b996:	e7d5      	b.n	800b944 <_dtoa_r+0x22c>
 800b998:	2401      	movs	r4, #1
 800b99a:	2300      	movs	r3, #0
 800b99c:	9307      	str	r3, [sp, #28]
 800b99e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b9a0:	f04f 3bff 	mov.w	fp, #4294967295
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800b9aa:	2312      	movs	r3, #18
 800b9ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800b9ae:	e7db      	b.n	800b968 <_dtoa_r+0x250>
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b4:	e7f4      	b.n	800b9a0 <_dtoa_r+0x288>
 800b9b6:	f04f 0b01 	mov.w	fp, #1
 800b9ba:	f8cd b00c 	str.w	fp, [sp, #12]
 800b9be:	465b      	mov	r3, fp
 800b9c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b9c4:	e7d0      	b.n	800b968 <_dtoa_r+0x250>
 800b9c6:	3101      	adds	r1, #1
 800b9c8:	0052      	lsls	r2, r2, #1
 800b9ca:	e7d1      	b.n	800b970 <_dtoa_r+0x258>
 800b9cc:	f3af 8000 	nop.w
 800b9d0:	636f4361 	.word	0x636f4361
 800b9d4:	3fd287a7 	.word	0x3fd287a7
 800b9d8:	8b60c8b3 	.word	0x8b60c8b3
 800b9dc:	3fc68a28 	.word	0x3fc68a28
 800b9e0:	509f79fb 	.word	0x509f79fb
 800b9e4:	3fd34413 	.word	0x3fd34413
 800b9e8:	080104f2 	.word	0x080104f2
 800b9ec:	08010509 	.word	0x08010509
 800b9f0:	7ff00000 	.word	0x7ff00000
 800b9f4:	080104bd 	.word	0x080104bd
 800b9f8:	3ff80000 	.word	0x3ff80000
 800b9fc:	080106b8 	.word	0x080106b8
 800ba00:	08010561 	.word	0x08010561
 800ba04:	080104ee 	.word	0x080104ee
 800ba08:	080104bc 	.word	0x080104bc
 800ba0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba10:	6018      	str	r0, [r3, #0]
 800ba12:	9b03      	ldr	r3, [sp, #12]
 800ba14:	2b0e      	cmp	r3, #14
 800ba16:	f200 80a1 	bhi.w	800bb5c <_dtoa_r+0x444>
 800ba1a:	2c00      	cmp	r4, #0
 800ba1c:	f000 809e 	beq.w	800bb5c <_dtoa_r+0x444>
 800ba20:	2f00      	cmp	r7, #0
 800ba22:	dd33      	ble.n	800ba8c <_dtoa_r+0x374>
 800ba24:	4b9c      	ldr	r3, [pc, #624]	@ (800bc98 <_dtoa_r+0x580>)
 800ba26:	f007 020f 	and.w	r2, r7, #15
 800ba2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba2e:	ed93 7b00 	vldr	d7, [r3]
 800ba32:	05f8      	lsls	r0, r7, #23
 800ba34:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ba38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba3c:	d516      	bpl.n	800ba6c <_dtoa_r+0x354>
 800ba3e:	4b97      	ldr	r3, [pc, #604]	@ (800bc9c <_dtoa_r+0x584>)
 800ba40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba48:	f7f4 ff20 	bl	800088c <__aeabi_ddiv>
 800ba4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba50:	f004 040f 	and.w	r4, r4, #15
 800ba54:	2603      	movs	r6, #3
 800ba56:	4d91      	ldr	r5, [pc, #580]	@ (800bc9c <_dtoa_r+0x584>)
 800ba58:	b954      	cbnz	r4, 800ba70 <_dtoa_r+0x358>
 800ba5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ba5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba62:	f7f4 ff13 	bl	800088c <__aeabi_ddiv>
 800ba66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba6a:	e028      	b.n	800babe <_dtoa_r+0x3a6>
 800ba6c:	2602      	movs	r6, #2
 800ba6e:	e7f2      	b.n	800ba56 <_dtoa_r+0x33e>
 800ba70:	07e1      	lsls	r1, r4, #31
 800ba72:	d508      	bpl.n	800ba86 <_dtoa_r+0x36e>
 800ba74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ba78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba7c:	f7f4 fddc 	bl	8000638 <__aeabi_dmul>
 800ba80:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ba84:	3601      	adds	r6, #1
 800ba86:	1064      	asrs	r4, r4, #1
 800ba88:	3508      	adds	r5, #8
 800ba8a:	e7e5      	b.n	800ba58 <_dtoa_r+0x340>
 800ba8c:	f000 80af 	beq.w	800bbee <_dtoa_r+0x4d6>
 800ba90:	427c      	negs	r4, r7
 800ba92:	4b81      	ldr	r3, [pc, #516]	@ (800bc98 <_dtoa_r+0x580>)
 800ba94:	4d81      	ldr	r5, [pc, #516]	@ (800bc9c <_dtoa_r+0x584>)
 800ba96:	f004 020f 	and.w	r2, r4, #15
 800ba9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800baa6:	f7f4 fdc7 	bl	8000638 <__aeabi_dmul>
 800baaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baae:	1124      	asrs	r4, r4, #4
 800bab0:	2300      	movs	r3, #0
 800bab2:	2602      	movs	r6, #2
 800bab4:	2c00      	cmp	r4, #0
 800bab6:	f040 808f 	bne.w	800bbd8 <_dtoa_r+0x4c0>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1d3      	bne.n	800ba66 <_dtoa_r+0x34e>
 800babe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bac0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f000 8094 	beq.w	800bbf2 <_dtoa_r+0x4da>
 800baca:	4b75      	ldr	r3, [pc, #468]	@ (800bca0 <_dtoa_r+0x588>)
 800bacc:	2200      	movs	r2, #0
 800bace:	4620      	mov	r0, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7f5 f823 	bl	8000b1c <__aeabi_dcmplt>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	f000 808b 	beq.w	800bbf2 <_dtoa_r+0x4da>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 8087 	beq.w	800bbf2 <_dtoa_r+0x4da>
 800bae4:	f1bb 0f00 	cmp.w	fp, #0
 800bae8:	dd34      	ble.n	800bb54 <_dtoa_r+0x43c>
 800baea:	4620      	mov	r0, r4
 800baec:	4b6d      	ldr	r3, [pc, #436]	@ (800bca4 <_dtoa_r+0x58c>)
 800baee:	2200      	movs	r2, #0
 800baf0:	4629      	mov	r1, r5
 800baf2:	f7f4 fda1 	bl	8000638 <__aeabi_dmul>
 800baf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bafa:	f107 38ff 	add.w	r8, r7, #4294967295
 800bafe:	3601      	adds	r6, #1
 800bb00:	465c      	mov	r4, fp
 800bb02:	4630      	mov	r0, r6
 800bb04:	f7f4 fd2e 	bl	8000564 <__aeabi_i2d>
 800bb08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb0c:	f7f4 fd94 	bl	8000638 <__aeabi_dmul>
 800bb10:	4b65      	ldr	r3, [pc, #404]	@ (800bca8 <_dtoa_r+0x590>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	f7f4 fbda 	bl	80002cc <__adddf3>
 800bb18:	4605      	mov	r5, r0
 800bb1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb1e:	2c00      	cmp	r4, #0
 800bb20:	d16a      	bne.n	800bbf8 <_dtoa_r+0x4e0>
 800bb22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb26:	4b61      	ldr	r3, [pc, #388]	@ (800bcac <_dtoa_r+0x594>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f7f4 fbcd 	bl	80002c8 <__aeabi_dsub>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb36:	462a      	mov	r2, r5
 800bb38:	4633      	mov	r3, r6
 800bb3a:	f7f5 f80d 	bl	8000b58 <__aeabi_dcmpgt>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	f040 8298 	bne.w	800c074 <_dtoa_r+0x95c>
 800bb44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb48:	462a      	mov	r2, r5
 800bb4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bb4e:	f7f4 ffe5 	bl	8000b1c <__aeabi_dcmplt>
 800bb52:	bb38      	cbnz	r0, 800bba4 <_dtoa_r+0x48c>
 800bb54:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bb58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bb5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f2c0 8157 	blt.w	800be12 <_dtoa_r+0x6fa>
 800bb64:	2f0e      	cmp	r7, #14
 800bb66:	f300 8154 	bgt.w	800be12 <_dtoa_r+0x6fa>
 800bb6a:	4b4b      	ldr	r3, [pc, #300]	@ (800bc98 <_dtoa_r+0x580>)
 800bb6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb70:	ed93 7b00 	vldr	d7, [r3]
 800bb74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	ed8d 7b00 	vstr	d7, [sp]
 800bb7c:	f280 80e5 	bge.w	800bd4a <_dtoa_r+0x632>
 800bb80:	9b03      	ldr	r3, [sp, #12]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f300 80e1 	bgt.w	800bd4a <_dtoa_r+0x632>
 800bb88:	d10c      	bne.n	800bba4 <_dtoa_r+0x48c>
 800bb8a:	4b48      	ldr	r3, [pc, #288]	@ (800bcac <_dtoa_r+0x594>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	ec51 0b17 	vmov	r0, r1, d7
 800bb92:	f7f4 fd51 	bl	8000638 <__aeabi_dmul>
 800bb96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb9a:	f7f4 ffd3 	bl	8000b44 <__aeabi_dcmpge>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	f000 8266 	beq.w	800c070 <_dtoa_r+0x958>
 800bba4:	2400      	movs	r4, #0
 800bba6:	4625      	mov	r5, r4
 800bba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbaa:	4656      	mov	r6, sl
 800bbac:	ea6f 0803 	mvn.w	r8, r3
 800bbb0:	2700      	movs	r7, #0
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4648      	mov	r0, r9
 800bbb6:	f000 fcbf 	bl	800c538 <_Bfree>
 800bbba:	2d00      	cmp	r5, #0
 800bbbc:	f000 80bd 	beq.w	800bd3a <_dtoa_r+0x622>
 800bbc0:	b12f      	cbz	r7, 800bbce <_dtoa_r+0x4b6>
 800bbc2:	42af      	cmp	r7, r5
 800bbc4:	d003      	beq.n	800bbce <_dtoa_r+0x4b6>
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	4648      	mov	r0, r9
 800bbca:	f000 fcb5 	bl	800c538 <_Bfree>
 800bbce:	4629      	mov	r1, r5
 800bbd0:	4648      	mov	r0, r9
 800bbd2:	f000 fcb1 	bl	800c538 <_Bfree>
 800bbd6:	e0b0      	b.n	800bd3a <_dtoa_r+0x622>
 800bbd8:	07e2      	lsls	r2, r4, #31
 800bbda:	d505      	bpl.n	800bbe8 <_dtoa_r+0x4d0>
 800bbdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbe0:	f7f4 fd2a 	bl	8000638 <__aeabi_dmul>
 800bbe4:	3601      	adds	r6, #1
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	1064      	asrs	r4, r4, #1
 800bbea:	3508      	adds	r5, #8
 800bbec:	e762      	b.n	800bab4 <_dtoa_r+0x39c>
 800bbee:	2602      	movs	r6, #2
 800bbf0:	e765      	b.n	800babe <_dtoa_r+0x3a6>
 800bbf2:	9c03      	ldr	r4, [sp, #12]
 800bbf4:	46b8      	mov	r8, r7
 800bbf6:	e784      	b.n	800bb02 <_dtoa_r+0x3ea>
 800bbf8:	4b27      	ldr	r3, [pc, #156]	@ (800bc98 <_dtoa_r+0x580>)
 800bbfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc04:	4454      	add	r4, sl
 800bc06:	2900      	cmp	r1, #0
 800bc08:	d054      	beq.n	800bcb4 <_dtoa_r+0x59c>
 800bc0a:	4929      	ldr	r1, [pc, #164]	@ (800bcb0 <_dtoa_r+0x598>)
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	f7f4 fe3d 	bl	800088c <__aeabi_ddiv>
 800bc12:	4633      	mov	r3, r6
 800bc14:	462a      	mov	r2, r5
 800bc16:	f7f4 fb57 	bl	80002c8 <__aeabi_dsub>
 800bc1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc1e:	4656      	mov	r6, sl
 800bc20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc24:	f7f4 ffb8 	bl	8000b98 <__aeabi_d2iz>
 800bc28:	4605      	mov	r5, r0
 800bc2a:	f7f4 fc9b 	bl	8000564 <__aeabi_i2d>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc36:	f7f4 fb47 	bl	80002c8 <__aeabi_dsub>
 800bc3a:	3530      	adds	r5, #48	@ 0x30
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc44:	f806 5b01 	strb.w	r5, [r6], #1
 800bc48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc4c:	f7f4 ff66 	bl	8000b1c <__aeabi_dcmplt>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d172      	bne.n	800bd3a <_dtoa_r+0x622>
 800bc54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc58:	4911      	ldr	r1, [pc, #68]	@ (800bca0 <_dtoa_r+0x588>)
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	f7f4 fb34 	bl	80002c8 <__aeabi_dsub>
 800bc60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc64:	f7f4 ff5a 	bl	8000b1c <__aeabi_dcmplt>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	f040 80b4 	bne.w	800bdd6 <_dtoa_r+0x6be>
 800bc6e:	42a6      	cmp	r6, r4
 800bc70:	f43f af70 	beq.w	800bb54 <_dtoa_r+0x43c>
 800bc74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bc78:	4b0a      	ldr	r3, [pc, #40]	@ (800bca4 <_dtoa_r+0x58c>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f7f4 fcdc 	bl	8000638 <__aeabi_dmul>
 800bc80:	4b08      	ldr	r3, [pc, #32]	@ (800bca4 <_dtoa_r+0x58c>)
 800bc82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc86:	2200      	movs	r2, #0
 800bc88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc8c:	f7f4 fcd4 	bl	8000638 <__aeabi_dmul>
 800bc90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc94:	e7c4      	b.n	800bc20 <_dtoa_r+0x508>
 800bc96:	bf00      	nop
 800bc98:	080106b8 	.word	0x080106b8
 800bc9c:	08010690 	.word	0x08010690
 800bca0:	3ff00000 	.word	0x3ff00000
 800bca4:	40240000 	.word	0x40240000
 800bca8:	401c0000 	.word	0x401c0000
 800bcac:	40140000 	.word	0x40140000
 800bcb0:	3fe00000 	.word	0x3fe00000
 800bcb4:	4631      	mov	r1, r6
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	f7f4 fcbe 	bl	8000638 <__aeabi_dmul>
 800bcbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bcc0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bcc2:	4656      	mov	r6, sl
 800bcc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcc8:	f7f4 ff66 	bl	8000b98 <__aeabi_d2iz>
 800bccc:	4605      	mov	r5, r0
 800bcce:	f7f4 fc49 	bl	8000564 <__aeabi_i2d>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcda:	f7f4 faf5 	bl	80002c8 <__aeabi_dsub>
 800bcde:	3530      	adds	r5, #48	@ 0x30
 800bce0:	f806 5b01 	strb.w	r5, [r6], #1
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	42a6      	cmp	r6, r4
 800bcea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcee:	f04f 0200 	mov.w	r2, #0
 800bcf2:	d124      	bne.n	800bd3e <_dtoa_r+0x626>
 800bcf4:	4baf      	ldr	r3, [pc, #700]	@ (800bfb4 <_dtoa_r+0x89c>)
 800bcf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bcfa:	f7f4 fae7 	bl	80002cc <__adddf3>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd06:	f7f4 ff27 	bl	8000b58 <__aeabi_dcmpgt>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d163      	bne.n	800bdd6 <_dtoa_r+0x6be>
 800bd0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd12:	49a8      	ldr	r1, [pc, #672]	@ (800bfb4 <_dtoa_r+0x89c>)
 800bd14:	2000      	movs	r0, #0
 800bd16:	f7f4 fad7 	bl	80002c8 <__aeabi_dsub>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd22:	f7f4 fefb 	bl	8000b1c <__aeabi_dcmplt>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	f43f af14 	beq.w	800bb54 <_dtoa_r+0x43c>
 800bd2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bd2e:	1e73      	subs	r3, r6, #1
 800bd30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd36:	2b30      	cmp	r3, #48	@ 0x30
 800bd38:	d0f8      	beq.n	800bd2c <_dtoa_r+0x614>
 800bd3a:	4647      	mov	r7, r8
 800bd3c:	e03b      	b.n	800bdb6 <_dtoa_r+0x69e>
 800bd3e:	4b9e      	ldr	r3, [pc, #632]	@ (800bfb8 <_dtoa_r+0x8a0>)
 800bd40:	f7f4 fc7a 	bl	8000638 <__aeabi_dmul>
 800bd44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd48:	e7bc      	b.n	800bcc4 <_dtoa_r+0x5ac>
 800bd4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bd4e:	4656      	mov	r6, sl
 800bd50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd54:	4620      	mov	r0, r4
 800bd56:	4629      	mov	r1, r5
 800bd58:	f7f4 fd98 	bl	800088c <__aeabi_ddiv>
 800bd5c:	f7f4 ff1c 	bl	8000b98 <__aeabi_d2iz>
 800bd60:	4680      	mov	r8, r0
 800bd62:	f7f4 fbff 	bl	8000564 <__aeabi_i2d>
 800bd66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd6a:	f7f4 fc65 	bl	8000638 <__aeabi_dmul>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	4620      	mov	r0, r4
 800bd74:	4629      	mov	r1, r5
 800bd76:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bd7a:	f7f4 faa5 	bl	80002c8 <__aeabi_dsub>
 800bd7e:	f806 4b01 	strb.w	r4, [r6], #1
 800bd82:	9d03      	ldr	r5, [sp, #12]
 800bd84:	eba6 040a 	sub.w	r4, r6, sl
 800bd88:	42a5      	cmp	r5, r4
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	d133      	bne.n	800bdf8 <_dtoa_r+0x6e0>
 800bd90:	f7f4 fa9c 	bl	80002cc <__adddf3>
 800bd94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd98:	4604      	mov	r4, r0
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	f7f4 fedc 	bl	8000b58 <__aeabi_dcmpgt>
 800bda0:	b9c0      	cbnz	r0, 800bdd4 <_dtoa_r+0x6bc>
 800bda2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bda6:	4620      	mov	r0, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f7f4 fead 	bl	8000b08 <__aeabi_dcmpeq>
 800bdae:	b110      	cbz	r0, 800bdb6 <_dtoa_r+0x69e>
 800bdb0:	f018 0f01 	tst.w	r8, #1
 800bdb4:	d10e      	bne.n	800bdd4 <_dtoa_r+0x6bc>
 800bdb6:	9902      	ldr	r1, [sp, #8]
 800bdb8:	4648      	mov	r0, r9
 800bdba:	f000 fbbd 	bl	800c538 <_Bfree>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	7033      	strb	r3, [r6, #0]
 800bdc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bdc4:	3701      	adds	r7, #1
 800bdc6:	601f      	str	r7, [r3, #0]
 800bdc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	f000 824b 	beq.w	800c266 <_dtoa_r+0xb4e>
 800bdd0:	601e      	str	r6, [r3, #0]
 800bdd2:	e248      	b.n	800c266 <_dtoa_r+0xb4e>
 800bdd4:	46b8      	mov	r8, r7
 800bdd6:	4633      	mov	r3, r6
 800bdd8:	461e      	mov	r6, r3
 800bdda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdde:	2a39      	cmp	r2, #57	@ 0x39
 800bde0:	d106      	bne.n	800bdf0 <_dtoa_r+0x6d8>
 800bde2:	459a      	cmp	sl, r3
 800bde4:	d1f8      	bne.n	800bdd8 <_dtoa_r+0x6c0>
 800bde6:	2230      	movs	r2, #48	@ 0x30
 800bde8:	f108 0801 	add.w	r8, r8, #1
 800bdec:	f88a 2000 	strb.w	r2, [sl]
 800bdf0:	781a      	ldrb	r2, [r3, #0]
 800bdf2:	3201      	adds	r2, #1
 800bdf4:	701a      	strb	r2, [r3, #0]
 800bdf6:	e7a0      	b.n	800bd3a <_dtoa_r+0x622>
 800bdf8:	4b6f      	ldr	r3, [pc, #444]	@ (800bfb8 <_dtoa_r+0x8a0>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f7f4 fc1c 	bl	8000638 <__aeabi_dmul>
 800be00:	2200      	movs	r2, #0
 800be02:	2300      	movs	r3, #0
 800be04:	4604      	mov	r4, r0
 800be06:	460d      	mov	r5, r1
 800be08:	f7f4 fe7e 	bl	8000b08 <__aeabi_dcmpeq>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	d09f      	beq.n	800bd50 <_dtoa_r+0x638>
 800be10:	e7d1      	b.n	800bdb6 <_dtoa_r+0x69e>
 800be12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be14:	2a00      	cmp	r2, #0
 800be16:	f000 80ea 	beq.w	800bfee <_dtoa_r+0x8d6>
 800be1a:	9a07      	ldr	r2, [sp, #28]
 800be1c:	2a01      	cmp	r2, #1
 800be1e:	f300 80cd 	bgt.w	800bfbc <_dtoa_r+0x8a4>
 800be22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800be24:	2a00      	cmp	r2, #0
 800be26:	f000 80c1 	beq.w	800bfac <_dtoa_r+0x894>
 800be2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be2e:	9c08      	ldr	r4, [sp, #32]
 800be30:	9e00      	ldr	r6, [sp, #0]
 800be32:	9a00      	ldr	r2, [sp, #0]
 800be34:	441a      	add	r2, r3
 800be36:	9200      	str	r2, [sp, #0]
 800be38:	9a06      	ldr	r2, [sp, #24]
 800be3a:	2101      	movs	r1, #1
 800be3c:	441a      	add	r2, r3
 800be3e:	4648      	mov	r0, r9
 800be40:	9206      	str	r2, [sp, #24]
 800be42:	f000 fc77 	bl	800c734 <__i2b>
 800be46:	4605      	mov	r5, r0
 800be48:	b166      	cbz	r6, 800be64 <_dtoa_r+0x74c>
 800be4a:	9b06      	ldr	r3, [sp, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dd09      	ble.n	800be64 <_dtoa_r+0x74c>
 800be50:	42b3      	cmp	r3, r6
 800be52:	9a00      	ldr	r2, [sp, #0]
 800be54:	bfa8      	it	ge
 800be56:	4633      	movge	r3, r6
 800be58:	1ad2      	subs	r2, r2, r3
 800be5a:	9200      	str	r2, [sp, #0]
 800be5c:	9a06      	ldr	r2, [sp, #24]
 800be5e:	1af6      	subs	r6, r6, r3
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	9306      	str	r3, [sp, #24]
 800be64:	9b08      	ldr	r3, [sp, #32]
 800be66:	b30b      	cbz	r3, 800beac <_dtoa_r+0x794>
 800be68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f000 80c6 	beq.w	800bffc <_dtoa_r+0x8e4>
 800be70:	2c00      	cmp	r4, #0
 800be72:	f000 80c0 	beq.w	800bff6 <_dtoa_r+0x8de>
 800be76:	4629      	mov	r1, r5
 800be78:	4622      	mov	r2, r4
 800be7a:	4648      	mov	r0, r9
 800be7c:	f000 fd12 	bl	800c8a4 <__pow5mult>
 800be80:	9a02      	ldr	r2, [sp, #8]
 800be82:	4601      	mov	r1, r0
 800be84:	4605      	mov	r5, r0
 800be86:	4648      	mov	r0, r9
 800be88:	f000 fc6a 	bl	800c760 <__multiply>
 800be8c:	9902      	ldr	r1, [sp, #8]
 800be8e:	4680      	mov	r8, r0
 800be90:	4648      	mov	r0, r9
 800be92:	f000 fb51 	bl	800c538 <_Bfree>
 800be96:	9b08      	ldr	r3, [sp, #32]
 800be98:	1b1b      	subs	r3, r3, r4
 800be9a:	9308      	str	r3, [sp, #32]
 800be9c:	f000 80b1 	beq.w	800c002 <_dtoa_r+0x8ea>
 800bea0:	9a08      	ldr	r2, [sp, #32]
 800bea2:	4641      	mov	r1, r8
 800bea4:	4648      	mov	r0, r9
 800bea6:	f000 fcfd 	bl	800c8a4 <__pow5mult>
 800beaa:	9002      	str	r0, [sp, #8]
 800beac:	2101      	movs	r1, #1
 800beae:	4648      	mov	r0, r9
 800beb0:	f000 fc40 	bl	800c734 <__i2b>
 800beb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800beb6:	4604      	mov	r4, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 81d8 	beq.w	800c26e <_dtoa_r+0xb56>
 800bebe:	461a      	mov	r2, r3
 800bec0:	4601      	mov	r1, r0
 800bec2:	4648      	mov	r0, r9
 800bec4:	f000 fcee 	bl	800c8a4 <__pow5mult>
 800bec8:	9b07      	ldr	r3, [sp, #28]
 800beca:	2b01      	cmp	r3, #1
 800becc:	4604      	mov	r4, r0
 800bece:	f300 809f 	bgt.w	800c010 <_dtoa_r+0x8f8>
 800bed2:	9b04      	ldr	r3, [sp, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f040 8097 	bne.w	800c008 <_dtoa_r+0x8f0>
 800beda:	9b05      	ldr	r3, [sp, #20]
 800bedc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f040 8093 	bne.w	800c00c <_dtoa_r+0x8f4>
 800bee6:	9b05      	ldr	r3, [sp, #20]
 800bee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800beec:	0d1b      	lsrs	r3, r3, #20
 800beee:	051b      	lsls	r3, r3, #20
 800bef0:	b133      	cbz	r3, 800bf00 <_dtoa_r+0x7e8>
 800bef2:	9b00      	ldr	r3, [sp, #0]
 800bef4:	3301      	adds	r3, #1
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	9b06      	ldr	r3, [sp, #24]
 800befa:	3301      	adds	r3, #1
 800befc:	9306      	str	r3, [sp, #24]
 800befe:	2301      	movs	r3, #1
 800bf00:	9308      	str	r3, [sp, #32]
 800bf02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f000 81b8 	beq.w	800c27a <_dtoa_r+0xb62>
 800bf0a:	6923      	ldr	r3, [r4, #16]
 800bf0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf10:	6918      	ldr	r0, [r3, #16]
 800bf12:	f000 fbc3 	bl	800c69c <__hi0bits>
 800bf16:	f1c0 0020 	rsb	r0, r0, #32
 800bf1a:	9b06      	ldr	r3, [sp, #24]
 800bf1c:	4418      	add	r0, r3
 800bf1e:	f010 001f 	ands.w	r0, r0, #31
 800bf22:	f000 8082 	beq.w	800c02a <_dtoa_r+0x912>
 800bf26:	f1c0 0320 	rsb	r3, r0, #32
 800bf2a:	2b04      	cmp	r3, #4
 800bf2c:	dd73      	ble.n	800c016 <_dtoa_r+0x8fe>
 800bf2e:	9b00      	ldr	r3, [sp, #0]
 800bf30:	f1c0 001c 	rsb	r0, r0, #28
 800bf34:	4403      	add	r3, r0
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	9b06      	ldr	r3, [sp, #24]
 800bf3a:	4403      	add	r3, r0
 800bf3c:	4406      	add	r6, r0
 800bf3e:	9306      	str	r3, [sp, #24]
 800bf40:	9b00      	ldr	r3, [sp, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dd05      	ble.n	800bf52 <_dtoa_r+0x83a>
 800bf46:	9902      	ldr	r1, [sp, #8]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	4648      	mov	r0, r9
 800bf4c:	f000 fd04 	bl	800c958 <__lshift>
 800bf50:	9002      	str	r0, [sp, #8]
 800bf52:	9b06      	ldr	r3, [sp, #24]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	dd05      	ble.n	800bf64 <_dtoa_r+0x84c>
 800bf58:	4621      	mov	r1, r4
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	4648      	mov	r0, r9
 800bf5e:	f000 fcfb 	bl	800c958 <__lshift>
 800bf62:	4604      	mov	r4, r0
 800bf64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d061      	beq.n	800c02e <_dtoa_r+0x916>
 800bf6a:	9802      	ldr	r0, [sp, #8]
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	f000 fd5f 	bl	800ca30 <__mcmp>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	da5b      	bge.n	800c02e <_dtoa_r+0x916>
 800bf76:	2300      	movs	r3, #0
 800bf78:	9902      	ldr	r1, [sp, #8]
 800bf7a:	220a      	movs	r2, #10
 800bf7c:	4648      	mov	r0, r9
 800bf7e:	f000 fafd 	bl	800c57c <__multadd>
 800bf82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf84:	9002      	str	r0, [sp, #8]
 800bf86:	f107 38ff 	add.w	r8, r7, #4294967295
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 8177 	beq.w	800c27e <_dtoa_r+0xb66>
 800bf90:	4629      	mov	r1, r5
 800bf92:	2300      	movs	r3, #0
 800bf94:	220a      	movs	r2, #10
 800bf96:	4648      	mov	r0, r9
 800bf98:	f000 faf0 	bl	800c57c <__multadd>
 800bf9c:	f1bb 0f00 	cmp.w	fp, #0
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	dc6f      	bgt.n	800c084 <_dtoa_r+0x96c>
 800bfa4:	9b07      	ldr	r3, [sp, #28]
 800bfa6:	2b02      	cmp	r3, #2
 800bfa8:	dc49      	bgt.n	800c03e <_dtoa_r+0x926>
 800bfaa:	e06b      	b.n	800c084 <_dtoa_r+0x96c>
 800bfac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bfae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bfb2:	e73c      	b.n	800be2e <_dtoa_r+0x716>
 800bfb4:	3fe00000 	.word	0x3fe00000
 800bfb8:	40240000 	.word	0x40240000
 800bfbc:	9b03      	ldr	r3, [sp, #12]
 800bfbe:	1e5c      	subs	r4, r3, #1
 800bfc0:	9b08      	ldr	r3, [sp, #32]
 800bfc2:	42a3      	cmp	r3, r4
 800bfc4:	db09      	blt.n	800bfda <_dtoa_r+0x8c2>
 800bfc6:	1b1c      	subs	r4, r3, r4
 800bfc8:	9b03      	ldr	r3, [sp, #12]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f6bf af30 	bge.w	800be30 <_dtoa_r+0x718>
 800bfd0:	9b00      	ldr	r3, [sp, #0]
 800bfd2:	9a03      	ldr	r2, [sp, #12]
 800bfd4:	1a9e      	subs	r6, r3, r2
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e72b      	b.n	800be32 <_dtoa_r+0x71a>
 800bfda:	9b08      	ldr	r3, [sp, #32]
 800bfdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bfde:	9408      	str	r4, [sp, #32]
 800bfe0:	1ae3      	subs	r3, r4, r3
 800bfe2:	441a      	add	r2, r3
 800bfe4:	9e00      	ldr	r6, [sp, #0]
 800bfe6:	9b03      	ldr	r3, [sp, #12]
 800bfe8:	920d      	str	r2, [sp, #52]	@ 0x34
 800bfea:	2400      	movs	r4, #0
 800bfec:	e721      	b.n	800be32 <_dtoa_r+0x71a>
 800bfee:	9c08      	ldr	r4, [sp, #32]
 800bff0:	9e00      	ldr	r6, [sp, #0]
 800bff2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bff4:	e728      	b.n	800be48 <_dtoa_r+0x730>
 800bff6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bffa:	e751      	b.n	800bea0 <_dtoa_r+0x788>
 800bffc:	9a08      	ldr	r2, [sp, #32]
 800bffe:	9902      	ldr	r1, [sp, #8]
 800c000:	e750      	b.n	800bea4 <_dtoa_r+0x78c>
 800c002:	f8cd 8008 	str.w	r8, [sp, #8]
 800c006:	e751      	b.n	800beac <_dtoa_r+0x794>
 800c008:	2300      	movs	r3, #0
 800c00a:	e779      	b.n	800bf00 <_dtoa_r+0x7e8>
 800c00c:	9b04      	ldr	r3, [sp, #16]
 800c00e:	e777      	b.n	800bf00 <_dtoa_r+0x7e8>
 800c010:	2300      	movs	r3, #0
 800c012:	9308      	str	r3, [sp, #32]
 800c014:	e779      	b.n	800bf0a <_dtoa_r+0x7f2>
 800c016:	d093      	beq.n	800bf40 <_dtoa_r+0x828>
 800c018:	9a00      	ldr	r2, [sp, #0]
 800c01a:	331c      	adds	r3, #28
 800c01c:	441a      	add	r2, r3
 800c01e:	9200      	str	r2, [sp, #0]
 800c020:	9a06      	ldr	r2, [sp, #24]
 800c022:	441a      	add	r2, r3
 800c024:	441e      	add	r6, r3
 800c026:	9206      	str	r2, [sp, #24]
 800c028:	e78a      	b.n	800bf40 <_dtoa_r+0x828>
 800c02a:	4603      	mov	r3, r0
 800c02c:	e7f4      	b.n	800c018 <_dtoa_r+0x900>
 800c02e:	9b03      	ldr	r3, [sp, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	46b8      	mov	r8, r7
 800c034:	dc20      	bgt.n	800c078 <_dtoa_r+0x960>
 800c036:	469b      	mov	fp, r3
 800c038:	9b07      	ldr	r3, [sp, #28]
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	dd1e      	ble.n	800c07c <_dtoa_r+0x964>
 800c03e:	f1bb 0f00 	cmp.w	fp, #0
 800c042:	f47f adb1 	bne.w	800bba8 <_dtoa_r+0x490>
 800c046:	4621      	mov	r1, r4
 800c048:	465b      	mov	r3, fp
 800c04a:	2205      	movs	r2, #5
 800c04c:	4648      	mov	r0, r9
 800c04e:	f000 fa95 	bl	800c57c <__multadd>
 800c052:	4601      	mov	r1, r0
 800c054:	4604      	mov	r4, r0
 800c056:	9802      	ldr	r0, [sp, #8]
 800c058:	f000 fcea 	bl	800ca30 <__mcmp>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	f77f ada3 	ble.w	800bba8 <_dtoa_r+0x490>
 800c062:	4656      	mov	r6, sl
 800c064:	2331      	movs	r3, #49	@ 0x31
 800c066:	f806 3b01 	strb.w	r3, [r6], #1
 800c06a:	f108 0801 	add.w	r8, r8, #1
 800c06e:	e59f      	b.n	800bbb0 <_dtoa_r+0x498>
 800c070:	9c03      	ldr	r4, [sp, #12]
 800c072:	46b8      	mov	r8, r7
 800c074:	4625      	mov	r5, r4
 800c076:	e7f4      	b.n	800c062 <_dtoa_r+0x94a>
 800c078:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 8101 	beq.w	800c286 <_dtoa_r+0xb6e>
 800c084:	2e00      	cmp	r6, #0
 800c086:	dd05      	ble.n	800c094 <_dtoa_r+0x97c>
 800c088:	4629      	mov	r1, r5
 800c08a:	4632      	mov	r2, r6
 800c08c:	4648      	mov	r0, r9
 800c08e:	f000 fc63 	bl	800c958 <__lshift>
 800c092:	4605      	mov	r5, r0
 800c094:	9b08      	ldr	r3, [sp, #32]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d05c      	beq.n	800c154 <_dtoa_r+0xa3c>
 800c09a:	6869      	ldr	r1, [r5, #4]
 800c09c:	4648      	mov	r0, r9
 800c09e:	f000 fa0b 	bl	800c4b8 <_Balloc>
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	b928      	cbnz	r0, 800c0b2 <_dtoa_r+0x99a>
 800c0a6:	4b82      	ldr	r3, [pc, #520]	@ (800c2b0 <_dtoa_r+0xb98>)
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c0ae:	f7ff bb4a 	b.w	800b746 <_dtoa_r+0x2e>
 800c0b2:	692a      	ldr	r2, [r5, #16]
 800c0b4:	3202      	adds	r2, #2
 800c0b6:	0092      	lsls	r2, r2, #2
 800c0b8:	f105 010c 	add.w	r1, r5, #12
 800c0bc:	300c      	adds	r0, #12
 800c0be:	f7ff fa8e 	bl	800b5de <memcpy>
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4648      	mov	r0, r9
 800c0c8:	f000 fc46 	bl	800c958 <__lshift>
 800c0cc:	f10a 0301 	add.w	r3, sl, #1
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	eb0a 030b 	add.w	r3, sl, fp
 800c0d6:	9308      	str	r3, [sp, #32]
 800c0d8:	9b04      	ldr	r3, [sp, #16]
 800c0da:	f003 0301 	and.w	r3, r3, #1
 800c0de:	462f      	mov	r7, r5
 800c0e0:	9306      	str	r3, [sp, #24]
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	9b00      	ldr	r3, [sp, #0]
 800c0e6:	9802      	ldr	r0, [sp, #8]
 800c0e8:	4621      	mov	r1, r4
 800c0ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800c0ee:	f7ff fa8b 	bl	800b608 <quorem>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	3330      	adds	r3, #48	@ 0x30
 800c0f6:	9003      	str	r0, [sp, #12]
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	9802      	ldr	r0, [sp, #8]
 800c0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0fe:	f000 fc97 	bl	800ca30 <__mcmp>
 800c102:	462a      	mov	r2, r5
 800c104:	9004      	str	r0, [sp, #16]
 800c106:	4621      	mov	r1, r4
 800c108:	4648      	mov	r0, r9
 800c10a:	f000 fcad 	bl	800ca68 <__mdiff>
 800c10e:	68c2      	ldr	r2, [r0, #12]
 800c110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c112:	4606      	mov	r6, r0
 800c114:	bb02      	cbnz	r2, 800c158 <_dtoa_r+0xa40>
 800c116:	4601      	mov	r1, r0
 800c118:	9802      	ldr	r0, [sp, #8]
 800c11a:	f000 fc89 	bl	800ca30 <__mcmp>
 800c11e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c120:	4602      	mov	r2, r0
 800c122:	4631      	mov	r1, r6
 800c124:	4648      	mov	r0, r9
 800c126:	920c      	str	r2, [sp, #48]	@ 0x30
 800c128:	9309      	str	r3, [sp, #36]	@ 0x24
 800c12a:	f000 fa05 	bl	800c538 <_Bfree>
 800c12e:	9b07      	ldr	r3, [sp, #28]
 800c130:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c132:	9e00      	ldr	r6, [sp, #0]
 800c134:	ea42 0103 	orr.w	r1, r2, r3
 800c138:	9b06      	ldr	r3, [sp, #24]
 800c13a:	4319      	orrs	r1, r3
 800c13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c13e:	d10d      	bne.n	800c15c <_dtoa_r+0xa44>
 800c140:	2b39      	cmp	r3, #57	@ 0x39
 800c142:	d027      	beq.n	800c194 <_dtoa_r+0xa7c>
 800c144:	9a04      	ldr	r2, [sp, #16]
 800c146:	2a00      	cmp	r2, #0
 800c148:	dd01      	ble.n	800c14e <_dtoa_r+0xa36>
 800c14a:	9b03      	ldr	r3, [sp, #12]
 800c14c:	3331      	adds	r3, #49	@ 0x31
 800c14e:	f88b 3000 	strb.w	r3, [fp]
 800c152:	e52e      	b.n	800bbb2 <_dtoa_r+0x49a>
 800c154:	4628      	mov	r0, r5
 800c156:	e7b9      	b.n	800c0cc <_dtoa_r+0x9b4>
 800c158:	2201      	movs	r2, #1
 800c15a:	e7e2      	b.n	800c122 <_dtoa_r+0xa0a>
 800c15c:	9904      	ldr	r1, [sp, #16]
 800c15e:	2900      	cmp	r1, #0
 800c160:	db04      	blt.n	800c16c <_dtoa_r+0xa54>
 800c162:	9807      	ldr	r0, [sp, #28]
 800c164:	4301      	orrs	r1, r0
 800c166:	9806      	ldr	r0, [sp, #24]
 800c168:	4301      	orrs	r1, r0
 800c16a:	d120      	bne.n	800c1ae <_dtoa_r+0xa96>
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	ddee      	ble.n	800c14e <_dtoa_r+0xa36>
 800c170:	9902      	ldr	r1, [sp, #8]
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	2201      	movs	r2, #1
 800c176:	4648      	mov	r0, r9
 800c178:	f000 fbee 	bl	800c958 <__lshift>
 800c17c:	4621      	mov	r1, r4
 800c17e:	9002      	str	r0, [sp, #8]
 800c180:	f000 fc56 	bl	800ca30 <__mcmp>
 800c184:	2800      	cmp	r0, #0
 800c186:	9b00      	ldr	r3, [sp, #0]
 800c188:	dc02      	bgt.n	800c190 <_dtoa_r+0xa78>
 800c18a:	d1e0      	bne.n	800c14e <_dtoa_r+0xa36>
 800c18c:	07da      	lsls	r2, r3, #31
 800c18e:	d5de      	bpl.n	800c14e <_dtoa_r+0xa36>
 800c190:	2b39      	cmp	r3, #57	@ 0x39
 800c192:	d1da      	bne.n	800c14a <_dtoa_r+0xa32>
 800c194:	2339      	movs	r3, #57	@ 0x39
 800c196:	f88b 3000 	strb.w	r3, [fp]
 800c19a:	4633      	mov	r3, r6
 800c19c:	461e      	mov	r6, r3
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c1a4:	2a39      	cmp	r2, #57	@ 0x39
 800c1a6:	d04e      	beq.n	800c246 <_dtoa_r+0xb2e>
 800c1a8:	3201      	adds	r2, #1
 800c1aa:	701a      	strb	r2, [r3, #0]
 800c1ac:	e501      	b.n	800bbb2 <_dtoa_r+0x49a>
 800c1ae:	2a00      	cmp	r2, #0
 800c1b0:	dd03      	ble.n	800c1ba <_dtoa_r+0xaa2>
 800c1b2:	2b39      	cmp	r3, #57	@ 0x39
 800c1b4:	d0ee      	beq.n	800c194 <_dtoa_r+0xa7c>
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	e7c9      	b.n	800c14e <_dtoa_r+0xa36>
 800c1ba:	9a00      	ldr	r2, [sp, #0]
 800c1bc:	9908      	ldr	r1, [sp, #32]
 800c1be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c1c2:	428a      	cmp	r2, r1
 800c1c4:	d028      	beq.n	800c218 <_dtoa_r+0xb00>
 800c1c6:	9902      	ldr	r1, [sp, #8]
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	220a      	movs	r2, #10
 800c1cc:	4648      	mov	r0, r9
 800c1ce:	f000 f9d5 	bl	800c57c <__multadd>
 800c1d2:	42af      	cmp	r7, r5
 800c1d4:	9002      	str	r0, [sp, #8]
 800c1d6:	f04f 0300 	mov.w	r3, #0
 800c1da:	f04f 020a 	mov.w	r2, #10
 800c1de:	4639      	mov	r1, r7
 800c1e0:	4648      	mov	r0, r9
 800c1e2:	d107      	bne.n	800c1f4 <_dtoa_r+0xadc>
 800c1e4:	f000 f9ca 	bl	800c57c <__multadd>
 800c1e8:	4607      	mov	r7, r0
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	9b00      	ldr	r3, [sp, #0]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	e777      	b.n	800c0e4 <_dtoa_r+0x9cc>
 800c1f4:	f000 f9c2 	bl	800c57c <__multadd>
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	4607      	mov	r7, r0
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	220a      	movs	r2, #10
 800c200:	4648      	mov	r0, r9
 800c202:	f000 f9bb 	bl	800c57c <__multadd>
 800c206:	4605      	mov	r5, r0
 800c208:	e7f0      	b.n	800c1ec <_dtoa_r+0xad4>
 800c20a:	f1bb 0f00 	cmp.w	fp, #0
 800c20e:	bfcc      	ite	gt
 800c210:	465e      	movgt	r6, fp
 800c212:	2601      	movle	r6, #1
 800c214:	4456      	add	r6, sl
 800c216:	2700      	movs	r7, #0
 800c218:	9902      	ldr	r1, [sp, #8]
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	2201      	movs	r2, #1
 800c21e:	4648      	mov	r0, r9
 800c220:	f000 fb9a 	bl	800c958 <__lshift>
 800c224:	4621      	mov	r1, r4
 800c226:	9002      	str	r0, [sp, #8]
 800c228:	f000 fc02 	bl	800ca30 <__mcmp>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	dcb4      	bgt.n	800c19a <_dtoa_r+0xa82>
 800c230:	d102      	bne.n	800c238 <_dtoa_r+0xb20>
 800c232:	9b00      	ldr	r3, [sp, #0]
 800c234:	07db      	lsls	r3, r3, #31
 800c236:	d4b0      	bmi.n	800c19a <_dtoa_r+0xa82>
 800c238:	4633      	mov	r3, r6
 800c23a:	461e      	mov	r6, r3
 800c23c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c240:	2a30      	cmp	r2, #48	@ 0x30
 800c242:	d0fa      	beq.n	800c23a <_dtoa_r+0xb22>
 800c244:	e4b5      	b.n	800bbb2 <_dtoa_r+0x49a>
 800c246:	459a      	cmp	sl, r3
 800c248:	d1a8      	bne.n	800c19c <_dtoa_r+0xa84>
 800c24a:	2331      	movs	r3, #49	@ 0x31
 800c24c:	f108 0801 	add.w	r8, r8, #1
 800c250:	f88a 3000 	strb.w	r3, [sl]
 800c254:	e4ad      	b.n	800bbb2 <_dtoa_r+0x49a>
 800c256:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c258:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c2b4 <_dtoa_r+0xb9c>
 800c25c:	b11b      	cbz	r3, 800c266 <_dtoa_r+0xb4e>
 800c25e:	f10a 0308 	add.w	r3, sl, #8
 800c262:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	4650      	mov	r0, sl
 800c268:	b017      	add	sp, #92	@ 0x5c
 800c26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26e:	9b07      	ldr	r3, [sp, #28]
 800c270:	2b01      	cmp	r3, #1
 800c272:	f77f ae2e 	ble.w	800bed2 <_dtoa_r+0x7ba>
 800c276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c278:	9308      	str	r3, [sp, #32]
 800c27a:	2001      	movs	r0, #1
 800c27c:	e64d      	b.n	800bf1a <_dtoa_r+0x802>
 800c27e:	f1bb 0f00 	cmp.w	fp, #0
 800c282:	f77f aed9 	ble.w	800c038 <_dtoa_r+0x920>
 800c286:	4656      	mov	r6, sl
 800c288:	9802      	ldr	r0, [sp, #8]
 800c28a:	4621      	mov	r1, r4
 800c28c:	f7ff f9bc 	bl	800b608 <quorem>
 800c290:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c294:	f806 3b01 	strb.w	r3, [r6], #1
 800c298:	eba6 020a 	sub.w	r2, r6, sl
 800c29c:	4593      	cmp	fp, r2
 800c29e:	ddb4      	ble.n	800c20a <_dtoa_r+0xaf2>
 800c2a0:	9902      	ldr	r1, [sp, #8]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	220a      	movs	r2, #10
 800c2a6:	4648      	mov	r0, r9
 800c2a8:	f000 f968 	bl	800c57c <__multadd>
 800c2ac:	9002      	str	r0, [sp, #8]
 800c2ae:	e7eb      	b.n	800c288 <_dtoa_r+0xb70>
 800c2b0:	08010561 	.word	0x08010561
 800c2b4:	080104e5 	.word	0x080104e5

0800c2b8 <_free_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	d041      	beq.n	800c344 <_free_r+0x8c>
 800c2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2c4:	1f0c      	subs	r4, r1, #4
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	bfb8      	it	lt
 800c2ca:	18e4      	addlt	r4, r4, r3
 800c2cc:	f000 f8e8 	bl	800c4a0 <__malloc_lock>
 800c2d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c348 <_free_r+0x90>)
 800c2d2:	6813      	ldr	r3, [r2, #0]
 800c2d4:	b933      	cbnz	r3, 800c2e4 <_free_r+0x2c>
 800c2d6:	6063      	str	r3, [r4, #4]
 800c2d8:	6014      	str	r4, [r2, #0]
 800c2da:	4628      	mov	r0, r5
 800c2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e0:	f000 b8e4 	b.w	800c4ac <__malloc_unlock>
 800c2e4:	42a3      	cmp	r3, r4
 800c2e6:	d908      	bls.n	800c2fa <_free_r+0x42>
 800c2e8:	6820      	ldr	r0, [r4, #0]
 800c2ea:	1821      	adds	r1, r4, r0
 800c2ec:	428b      	cmp	r3, r1
 800c2ee:	bf01      	itttt	eq
 800c2f0:	6819      	ldreq	r1, [r3, #0]
 800c2f2:	685b      	ldreq	r3, [r3, #4]
 800c2f4:	1809      	addeq	r1, r1, r0
 800c2f6:	6021      	streq	r1, [r4, #0]
 800c2f8:	e7ed      	b.n	800c2d6 <_free_r+0x1e>
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	b10b      	cbz	r3, 800c304 <_free_r+0x4c>
 800c300:	42a3      	cmp	r3, r4
 800c302:	d9fa      	bls.n	800c2fa <_free_r+0x42>
 800c304:	6811      	ldr	r1, [r2, #0]
 800c306:	1850      	adds	r0, r2, r1
 800c308:	42a0      	cmp	r0, r4
 800c30a:	d10b      	bne.n	800c324 <_free_r+0x6c>
 800c30c:	6820      	ldr	r0, [r4, #0]
 800c30e:	4401      	add	r1, r0
 800c310:	1850      	adds	r0, r2, r1
 800c312:	4283      	cmp	r3, r0
 800c314:	6011      	str	r1, [r2, #0]
 800c316:	d1e0      	bne.n	800c2da <_free_r+0x22>
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	6053      	str	r3, [r2, #4]
 800c31e:	4408      	add	r0, r1
 800c320:	6010      	str	r0, [r2, #0]
 800c322:	e7da      	b.n	800c2da <_free_r+0x22>
 800c324:	d902      	bls.n	800c32c <_free_r+0x74>
 800c326:	230c      	movs	r3, #12
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	e7d6      	b.n	800c2da <_free_r+0x22>
 800c32c:	6820      	ldr	r0, [r4, #0]
 800c32e:	1821      	adds	r1, r4, r0
 800c330:	428b      	cmp	r3, r1
 800c332:	bf04      	itt	eq
 800c334:	6819      	ldreq	r1, [r3, #0]
 800c336:	685b      	ldreq	r3, [r3, #4]
 800c338:	6063      	str	r3, [r4, #4]
 800c33a:	bf04      	itt	eq
 800c33c:	1809      	addeq	r1, r1, r0
 800c33e:	6021      	streq	r1, [r4, #0]
 800c340:	6054      	str	r4, [r2, #4]
 800c342:	e7ca      	b.n	800c2da <_free_r+0x22>
 800c344:	bd38      	pop	{r3, r4, r5, pc}
 800c346:	bf00      	nop
 800c348:	20000ef4 	.word	0x20000ef4

0800c34c <malloc>:
 800c34c:	4b02      	ldr	r3, [pc, #8]	@ (800c358 <malloc+0xc>)
 800c34e:	4601      	mov	r1, r0
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	f000 b825 	b.w	800c3a0 <_malloc_r>
 800c356:	bf00      	nop
 800c358:	20000024 	.word	0x20000024

0800c35c <sbrk_aligned>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	4e0f      	ldr	r6, [pc, #60]	@ (800c39c <sbrk_aligned+0x40>)
 800c360:	460c      	mov	r4, r1
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	4605      	mov	r5, r0
 800c366:	b911      	cbnz	r1, 800c36e <sbrk_aligned+0x12>
 800c368:	f001 fe04 	bl	800df74 <_sbrk_r>
 800c36c:	6030      	str	r0, [r6, #0]
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f001 fdff 	bl	800df74 <_sbrk_r>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d103      	bne.n	800c382 <sbrk_aligned+0x26>
 800c37a:	f04f 34ff 	mov.w	r4, #4294967295
 800c37e:	4620      	mov	r0, r4
 800c380:	bd70      	pop	{r4, r5, r6, pc}
 800c382:	1cc4      	adds	r4, r0, #3
 800c384:	f024 0403 	bic.w	r4, r4, #3
 800c388:	42a0      	cmp	r0, r4
 800c38a:	d0f8      	beq.n	800c37e <sbrk_aligned+0x22>
 800c38c:	1a21      	subs	r1, r4, r0
 800c38e:	4628      	mov	r0, r5
 800c390:	f001 fdf0 	bl	800df74 <_sbrk_r>
 800c394:	3001      	adds	r0, #1
 800c396:	d1f2      	bne.n	800c37e <sbrk_aligned+0x22>
 800c398:	e7ef      	b.n	800c37a <sbrk_aligned+0x1e>
 800c39a:	bf00      	nop
 800c39c:	20000ef0 	.word	0x20000ef0

0800c3a0 <_malloc_r>:
 800c3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	1ccd      	adds	r5, r1, #3
 800c3a6:	f025 0503 	bic.w	r5, r5, #3
 800c3aa:	3508      	adds	r5, #8
 800c3ac:	2d0c      	cmp	r5, #12
 800c3ae:	bf38      	it	cc
 800c3b0:	250c      	movcc	r5, #12
 800c3b2:	2d00      	cmp	r5, #0
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	db01      	blt.n	800c3bc <_malloc_r+0x1c>
 800c3b8:	42a9      	cmp	r1, r5
 800c3ba:	d904      	bls.n	800c3c6 <_malloc_r+0x26>
 800c3bc:	230c      	movs	r3, #12
 800c3be:	6033      	str	r3, [r6, #0]
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c49c <_malloc_r+0xfc>
 800c3ca:	f000 f869 	bl	800c4a0 <__malloc_lock>
 800c3ce:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d2:	461c      	mov	r4, r3
 800c3d4:	bb44      	cbnz	r4, 800c428 <_malloc_r+0x88>
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	4630      	mov	r0, r6
 800c3da:	f7ff ffbf 	bl	800c35c <sbrk_aligned>
 800c3de:	1c43      	adds	r3, r0, #1
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	d158      	bne.n	800c496 <_malloc_r+0xf6>
 800c3e4:	f8d8 4000 	ldr.w	r4, [r8]
 800c3e8:	4627      	mov	r7, r4
 800c3ea:	2f00      	cmp	r7, #0
 800c3ec:	d143      	bne.n	800c476 <_malloc_r+0xd6>
 800c3ee:	2c00      	cmp	r4, #0
 800c3f0:	d04b      	beq.n	800c48a <_malloc_r+0xea>
 800c3f2:	6823      	ldr	r3, [r4, #0]
 800c3f4:	4639      	mov	r1, r7
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	eb04 0903 	add.w	r9, r4, r3
 800c3fc:	f001 fdba 	bl	800df74 <_sbrk_r>
 800c400:	4581      	cmp	r9, r0
 800c402:	d142      	bne.n	800c48a <_malloc_r+0xea>
 800c404:	6821      	ldr	r1, [r4, #0]
 800c406:	1a6d      	subs	r5, r5, r1
 800c408:	4629      	mov	r1, r5
 800c40a:	4630      	mov	r0, r6
 800c40c:	f7ff ffa6 	bl	800c35c <sbrk_aligned>
 800c410:	3001      	adds	r0, #1
 800c412:	d03a      	beq.n	800c48a <_malloc_r+0xea>
 800c414:	6823      	ldr	r3, [r4, #0]
 800c416:	442b      	add	r3, r5
 800c418:	6023      	str	r3, [r4, #0]
 800c41a:	f8d8 3000 	ldr.w	r3, [r8]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	bb62      	cbnz	r2, 800c47c <_malloc_r+0xdc>
 800c422:	f8c8 7000 	str.w	r7, [r8]
 800c426:	e00f      	b.n	800c448 <_malloc_r+0xa8>
 800c428:	6822      	ldr	r2, [r4, #0]
 800c42a:	1b52      	subs	r2, r2, r5
 800c42c:	d420      	bmi.n	800c470 <_malloc_r+0xd0>
 800c42e:	2a0b      	cmp	r2, #11
 800c430:	d917      	bls.n	800c462 <_malloc_r+0xc2>
 800c432:	1961      	adds	r1, r4, r5
 800c434:	42a3      	cmp	r3, r4
 800c436:	6025      	str	r5, [r4, #0]
 800c438:	bf18      	it	ne
 800c43a:	6059      	strne	r1, [r3, #4]
 800c43c:	6863      	ldr	r3, [r4, #4]
 800c43e:	bf08      	it	eq
 800c440:	f8c8 1000 	streq.w	r1, [r8]
 800c444:	5162      	str	r2, [r4, r5]
 800c446:	604b      	str	r3, [r1, #4]
 800c448:	4630      	mov	r0, r6
 800c44a:	f000 f82f 	bl	800c4ac <__malloc_unlock>
 800c44e:	f104 000b 	add.w	r0, r4, #11
 800c452:	1d23      	adds	r3, r4, #4
 800c454:	f020 0007 	bic.w	r0, r0, #7
 800c458:	1ac2      	subs	r2, r0, r3
 800c45a:	bf1c      	itt	ne
 800c45c:	1a1b      	subne	r3, r3, r0
 800c45e:	50a3      	strne	r3, [r4, r2]
 800c460:	e7af      	b.n	800c3c2 <_malloc_r+0x22>
 800c462:	6862      	ldr	r2, [r4, #4]
 800c464:	42a3      	cmp	r3, r4
 800c466:	bf0c      	ite	eq
 800c468:	f8c8 2000 	streq.w	r2, [r8]
 800c46c:	605a      	strne	r2, [r3, #4]
 800c46e:	e7eb      	b.n	800c448 <_malloc_r+0xa8>
 800c470:	4623      	mov	r3, r4
 800c472:	6864      	ldr	r4, [r4, #4]
 800c474:	e7ae      	b.n	800c3d4 <_malloc_r+0x34>
 800c476:	463c      	mov	r4, r7
 800c478:	687f      	ldr	r7, [r7, #4]
 800c47a:	e7b6      	b.n	800c3ea <_malloc_r+0x4a>
 800c47c:	461a      	mov	r2, r3
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	42a3      	cmp	r3, r4
 800c482:	d1fb      	bne.n	800c47c <_malloc_r+0xdc>
 800c484:	2300      	movs	r3, #0
 800c486:	6053      	str	r3, [r2, #4]
 800c488:	e7de      	b.n	800c448 <_malloc_r+0xa8>
 800c48a:	230c      	movs	r3, #12
 800c48c:	6033      	str	r3, [r6, #0]
 800c48e:	4630      	mov	r0, r6
 800c490:	f000 f80c 	bl	800c4ac <__malloc_unlock>
 800c494:	e794      	b.n	800c3c0 <_malloc_r+0x20>
 800c496:	6005      	str	r5, [r0, #0]
 800c498:	e7d6      	b.n	800c448 <_malloc_r+0xa8>
 800c49a:	bf00      	nop
 800c49c:	20000ef4 	.word	0x20000ef4

0800c4a0 <__malloc_lock>:
 800c4a0:	4801      	ldr	r0, [pc, #4]	@ (800c4a8 <__malloc_lock+0x8>)
 800c4a2:	f7ff b89a 	b.w	800b5da <__retarget_lock_acquire_recursive>
 800c4a6:	bf00      	nop
 800c4a8:	20000eec 	.word	0x20000eec

0800c4ac <__malloc_unlock>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	@ (800c4b4 <__malloc_unlock+0x8>)
 800c4ae:	f7ff b895 	b.w	800b5dc <__retarget_lock_release_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	20000eec 	.word	0x20000eec

0800c4b8 <_Balloc>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	69c6      	ldr	r6, [r0, #28]
 800c4bc:	4604      	mov	r4, r0
 800c4be:	460d      	mov	r5, r1
 800c4c0:	b976      	cbnz	r6, 800c4e0 <_Balloc+0x28>
 800c4c2:	2010      	movs	r0, #16
 800c4c4:	f7ff ff42 	bl	800c34c <malloc>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	61e0      	str	r0, [r4, #28]
 800c4cc:	b920      	cbnz	r0, 800c4d8 <_Balloc+0x20>
 800c4ce:	4b18      	ldr	r3, [pc, #96]	@ (800c530 <_Balloc+0x78>)
 800c4d0:	4818      	ldr	r0, [pc, #96]	@ (800c534 <_Balloc+0x7c>)
 800c4d2:	216b      	movs	r1, #107	@ 0x6b
 800c4d4:	f001 fd68 	bl	800dfa8 <__assert_func>
 800c4d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4dc:	6006      	str	r6, [r0, #0]
 800c4de:	60c6      	str	r6, [r0, #12]
 800c4e0:	69e6      	ldr	r6, [r4, #28]
 800c4e2:	68f3      	ldr	r3, [r6, #12]
 800c4e4:	b183      	cbz	r3, 800c508 <_Balloc+0x50>
 800c4e6:	69e3      	ldr	r3, [r4, #28]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ee:	b9b8      	cbnz	r0, 800c520 <_Balloc+0x68>
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c4f6:	1d72      	adds	r2, r6, #5
 800c4f8:	0092      	lsls	r2, r2, #2
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f001 fd72 	bl	800dfe4 <_calloc_r>
 800c500:	b160      	cbz	r0, 800c51c <_Balloc+0x64>
 800c502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c506:	e00e      	b.n	800c526 <_Balloc+0x6e>
 800c508:	2221      	movs	r2, #33	@ 0x21
 800c50a:	2104      	movs	r1, #4
 800c50c:	4620      	mov	r0, r4
 800c50e:	f001 fd69 	bl	800dfe4 <_calloc_r>
 800c512:	69e3      	ldr	r3, [r4, #28]
 800c514:	60f0      	str	r0, [r6, #12]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e4      	bne.n	800c4e6 <_Balloc+0x2e>
 800c51c:	2000      	movs	r0, #0
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	6802      	ldr	r2, [r0, #0]
 800c522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c526:	2300      	movs	r3, #0
 800c528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c52c:	e7f7      	b.n	800c51e <_Balloc+0x66>
 800c52e:	bf00      	nop
 800c530:	080104f2 	.word	0x080104f2
 800c534:	08010572 	.word	0x08010572

0800c538 <_Bfree>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	69c6      	ldr	r6, [r0, #28]
 800c53c:	4605      	mov	r5, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	b976      	cbnz	r6, 800c560 <_Bfree+0x28>
 800c542:	2010      	movs	r0, #16
 800c544:	f7ff ff02 	bl	800c34c <malloc>
 800c548:	4602      	mov	r2, r0
 800c54a:	61e8      	str	r0, [r5, #28]
 800c54c:	b920      	cbnz	r0, 800c558 <_Bfree+0x20>
 800c54e:	4b09      	ldr	r3, [pc, #36]	@ (800c574 <_Bfree+0x3c>)
 800c550:	4809      	ldr	r0, [pc, #36]	@ (800c578 <_Bfree+0x40>)
 800c552:	218f      	movs	r1, #143	@ 0x8f
 800c554:	f001 fd28 	bl	800dfa8 <__assert_func>
 800c558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c55c:	6006      	str	r6, [r0, #0]
 800c55e:	60c6      	str	r6, [r0, #12]
 800c560:	b13c      	cbz	r4, 800c572 <_Bfree+0x3a>
 800c562:	69eb      	ldr	r3, [r5, #28]
 800c564:	6862      	ldr	r2, [r4, #4]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c56c:	6021      	str	r1, [r4, #0]
 800c56e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	080104f2 	.word	0x080104f2
 800c578:	08010572 	.word	0x08010572

0800c57c <__multadd>:
 800c57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c580:	690d      	ldr	r5, [r1, #16]
 800c582:	4607      	mov	r7, r0
 800c584:	460c      	mov	r4, r1
 800c586:	461e      	mov	r6, r3
 800c588:	f101 0c14 	add.w	ip, r1, #20
 800c58c:	2000      	movs	r0, #0
 800c58e:	f8dc 3000 	ldr.w	r3, [ip]
 800c592:	b299      	uxth	r1, r3
 800c594:	fb02 6101 	mla	r1, r2, r1, r6
 800c598:	0c1e      	lsrs	r6, r3, #16
 800c59a:	0c0b      	lsrs	r3, r1, #16
 800c59c:	fb02 3306 	mla	r3, r2, r6, r3
 800c5a0:	b289      	uxth	r1, r1
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5a8:	4285      	cmp	r5, r0
 800c5aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c5ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5b2:	dcec      	bgt.n	800c58e <__multadd+0x12>
 800c5b4:	b30e      	cbz	r6, 800c5fa <__multadd+0x7e>
 800c5b6:	68a3      	ldr	r3, [r4, #8]
 800c5b8:	42ab      	cmp	r3, r5
 800c5ba:	dc19      	bgt.n	800c5f0 <__multadd+0x74>
 800c5bc:	6861      	ldr	r1, [r4, #4]
 800c5be:	4638      	mov	r0, r7
 800c5c0:	3101      	adds	r1, #1
 800c5c2:	f7ff ff79 	bl	800c4b8 <_Balloc>
 800c5c6:	4680      	mov	r8, r0
 800c5c8:	b928      	cbnz	r0, 800c5d6 <__multadd+0x5a>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c600 <__multadd+0x84>)
 800c5ce:	480d      	ldr	r0, [pc, #52]	@ (800c604 <__multadd+0x88>)
 800c5d0:	21ba      	movs	r1, #186	@ 0xba
 800c5d2:	f001 fce9 	bl	800dfa8 <__assert_func>
 800c5d6:	6922      	ldr	r2, [r4, #16]
 800c5d8:	3202      	adds	r2, #2
 800c5da:	f104 010c 	add.w	r1, r4, #12
 800c5de:	0092      	lsls	r2, r2, #2
 800c5e0:	300c      	adds	r0, #12
 800c5e2:	f7fe fffc 	bl	800b5de <memcpy>
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	4638      	mov	r0, r7
 800c5ea:	f7ff ffa5 	bl	800c538 <_Bfree>
 800c5ee:	4644      	mov	r4, r8
 800c5f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5f4:	3501      	adds	r5, #1
 800c5f6:	615e      	str	r6, [r3, #20]
 800c5f8:	6125      	str	r5, [r4, #16]
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c600:	08010561 	.word	0x08010561
 800c604:	08010572 	.word	0x08010572

0800c608 <__s2b>:
 800c608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c60c:	460c      	mov	r4, r1
 800c60e:	4615      	mov	r5, r2
 800c610:	461f      	mov	r7, r3
 800c612:	2209      	movs	r2, #9
 800c614:	3308      	adds	r3, #8
 800c616:	4606      	mov	r6, r0
 800c618:	fb93 f3f2 	sdiv	r3, r3, r2
 800c61c:	2100      	movs	r1, #0
 800c61e:	2201      	movs	r2, #1
 800c620:	429a      	cmp	r2, r3
 800c622:	db09      	blt.n	800c638 <__s2b+0x30>
 800c624:	4630      	mov	r0, r6
 800c626:	f7ff ff47 	bl	800c4b8 <_Balloc>
 800c62a:	b940      	cbnz	r0, 800c63e <__s2b+0x36>
 800c62c:	4602      	mov	r2, r0
 800c62e:	4b19      	ldr	r3, [pc, #100]	@ (800c694 <__s2b+0x8c>)
 800c630:	4819      	ldr	r0, [pc, #100]	@ (800c698 <__s2b+0x90>)
 800c632:	21d3      	movs	r1, #211	@ 0xd3
 800c634:	f001 fcb8 	bl	800dfa8 <__assert_func>
 800c638:	0052      	lsls	r2, r2, #1
 800c63a:	3101      	adds	r1, #1
 800c63c:	e7f0      	b.n	800c620 <__s2b+0x18>
 800c63e:	9b08      	ldr	r3, [sp, #32]
 800c640:	6143      	str	r3, [r0, #20]
 800c642:	2d09      	cmp	r5, #9
 800c644:	f04f 0301 	mov.w	r3, #1
 800c648:	6103      	str	r3, [r0, #16]
 800c64a:	dd16      	ble.n	800c67a <__s2b+0x72>
 800c64c:	f104 0909 	add.w	r9, r4, #9
 800c650:	46c8      	mov	r8, r9
 800c652:	442c      	add	r4, r5
 800c654:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c658:	4601      	mov	r1, r0
 800c65a:	3b30      	subs	r3, #48	@ 0x30
 800c65c:	220a      	movs	r2, #10
 800c65e:	4630      	mov	r0, r6
 800c660:	f7ff ff8c 	bl	800c57c <__multadd>
 800c664:	45a0      	cmp	r8, r4
 800c666:	d1f5      	bne.n	800c654 <__s2b+0x4c>
 800c668:	f1a5 0408 	sub.w	r4, r5, #8
 800c66c:	444c      	add	r4, r9
 800c66e:	1b2d      	subs	r5, r5, r4
 800c670:	1963      	adds	r3, r4, r5
 800c672:	42bb      	cmp	r3, r7
 800c674:	db04      	blt.n	800c680 <__s2b+0x78>
 800c676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c67a:	340a      	adds	r4, #10
 800c67c:	2509      	movs	r5, #9
 800c67e:	e7f6      	b.n	800c66e <__s2b+0x66>
 800c680:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c684:	4601      	mov	r1, r0
 800c686:	3b30      	subs	r3, #48	@ 0x30
 800c688:	220a      	movs	r2, #10
 800c68a:	4630      	mov	r0, r6
 800c68c:	f7ff ff76 	bl	800c57c <__multadd>
 800c690:	e7ee      	b.n	800c670 <__s2b+0x68>
 800c692:	bf00      	nop
 800c694:	08010561 	.word	0x08010561
 800c698:	08010572 	.word	0x08010572

0800c69c <__hi0bits>:
 800c69c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	bf36      	itet	cc
 800c6a4:	0403      	lslcc	r3, r0, #16
 800c6a6:	2000      	movcs	r0, #0
 800c6a8:	2010      	movcc	r0, #16
 800c6aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6ae:	bf3c      	itt	cc
 800c6b0:	021b      	lslcc	r3, r3, #8
 800c6b2:	3008      	addcc	r0, #8
 800c6b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6b8:	bf3c      	itt	cc
 800c6ba:	011b      	lslcc	r3, r3, #4
 800c6bc:	3004      	addcc	r0, #4
 800c6be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6c2:	bf3c      	itt	cc
 800c6c4:	009b      	lslcc	r3, r3, #2
 800c6c6:	3002      	addcc	r0, #2
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	db05      	blt.n	800c6d8 <__hi0bits+0x3c>
 800c6cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c6d0:	f100 0001 	add.w	r0, r0, #1
 800c6d4:	bf08      	it	eq
 800c6d6:	2020      	moveq	r0, #32
 800c6d8:	4770      	bx	lr

0800c6da <__lo0bits>:
 800c6da:	6803      	ldr	r3, [r0, #0]
 800c6dc:	4602      	mov	r2, r0
 800c6de:	f013 0007 	ands.w	r0, r3, #7
 800c6e2:	d00b      	beq.n	800c6fc <__lo0bits+0x22>
 800c6e4:	07d9      	lsls	r1, r3, #31
 800c6e6:	d421      	bmi.n	800c72c <__lo0bits+0x52>
 800c6e8:	0798      	lsls	r0, r3, #30
 800c6ea:	bf49      	itett	mi
 800c6ec:	085b      	lsrmi	r3, r3, #1
 800c6ee:	089b      	lsrpl	r3, r3, #2
 800c6f0:	2001      	movmi	r0, #1
 800c6f2:	6013      	strmi	r3, [r2, #0]
 800c6f4:	bf5c      	itt	pl
 800c6f6:	6013      	strpl	r3, [r2, #0]
 800c6f8:	2002      	movpl	r0, #2
 800c6fa:	4770      	bx	lr
 800c6fc:	b299      	uxth	r1, r3
 800c6fe:	b909      	cbnz	r1, 800c704 <__lo0bits+0x2a>
 800c700:	0c1b      	lsrs	r3, r3, #16
 800c702:	2010      	movs	r0, #16
 800c704:	b2d9      	uxtb	r1, r3
 800c706:	b909      	cbnz	r1, 800c70c <__lo0bits+0x32>
 800c708:	3008      	adds	r0, #8
 800c70a:	0a1b      	lsrs	r3, r3, #8
 800c70c:	0719      	lsls	r1, r3, #28
 800c70e:	bf04      	itt	eq
 800c710:	091b      	lsreq	r3, r3, #4
 800c712:	3004      	addeq	r0, #4
 800c714:	0799      	lsls	r1, r3, #30
 800c716:	bf04      	itt	eq
 800c718:	089b      	lsreq	r3, r3, #2
 800c71a:	3002      	addeq	r0, #2
 800c71c:	07d9      	lsls	r1, r3, #31
 800c71e:	d403      	bmi.n	800c728 <__lo0bits+0x4e>
 800c720:	085b      	lsrs	r3, r3, #1
 800c722:	f100 0001 	add.w	r0, r0, #1
 800c726:	d003      	beq.n	800c730 <__lo0bits+0x56>
 800c728:	6013      	str	r3, [r2, #0]
 800c72a:	4770      	bx	lr
 800c72c:	2000      	movs	r0, #0
 800c72e:	4770      	bx	lr
 800c730:	2020      	movs	r0, #32
 800c732:	4770      	bx	lr

0800c734 <__i2b>:
 800c734:	b510      	push	{r4, lr}
 800c736:	460c      	mov	r4, r1
 800c738:	2101      	movs	r1, #1
 800c73a:	f7ff febd 	bl	800c4b8 <_Balloc>
 800c73e:	4602      	mov	r2, r0
 800c740:	b928      	cbnz	r0, 800c74e <__i2b+0x1a>
 800c742:	4b05      	ldr	r3, [pc, #20]	@ (800c758 <__i2b+0x24>)
 800c744:	4805      	ldr	r0, [pc, #20]	@ (800c75c <__i2b+0x28>)
 800c746:	f240 1145 	movw	r1, #325	@ 0x145
 800c74a:	f001 fc2d 	bl	800dfa8 <__assert_func>
 800c74e:	2301      	movs	r3, #1
 800c750:	6144      	str	r4, [r0, #20]
 800c752:	6103      	str	r3, [r0, #16]
 800c754:	bd10      	pop	{r4, pc}
 800c756:	bf00      	nop
 800c758:	08010561 	.word	0x08010561
 800c75c:	08010572 	.word	0x08010572

0800c760 <__multiply>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	4617      	mov	r7, r2
 800c766:	690a      	ldr	r2, [r1, #16]
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	bfa8      	it	ge
 800c76e:	463b      	movge	r3, r7
 800c770:	4689      	mov	r9, r1
 800c772:	bfa4      	itt	ge
 800c774:	460f      	movge	r7, r1
 800c776:	4699      	movge	r9, r3
 800c778:	693d      	ldr	r5, [r7, #16]
 800c77a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	eb05 060a 	add.w	r6, r5, sl
 800c786:	42b3      	cmp	r3, r6
 800c788:	b085      	sub	sp, #20
 800c78a:	bfb8      	it	lt
 800c78c:	3101      	addlt	r1, #1
 800c78e:	f7ff fe93 	bl	800c4b8 <_Balloc>
 800c792:	b930      	cbnz	r0, 800c7a2 <__multiply+0x42>
 800c794:	4602      	mov	r2, r0
 800c796:	4b41      	ldr	r3, [pc, #260]	@ (800c89c <__multiply+0x13c>)
 800c798:	4841      	ldr	r0, [pc, #260]	@ (800c8a0 <__multiply+0x140>)
 800c79a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c79e:	f001 fc03 	bl	800dfa8 <__assert_func>
 800c7a2:	f100 0414 	add.w	r4, r0, #20
 800c7a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c7aa:	4623      	mov	r3, r4
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4573      	cmp	r3, lr
 800c7b0:	d320      	bcc.n	800c7f4 <__multiply+0x94>
 800c7b2:	f107 0814 	add.w	r8, r7, #20
 800c7b6:	f109 0114 	add.w	r1, r9, #20
 800c7ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c7be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c7c2:	9302      	str	r3, [sp, #8]
 800c7c4:	1beb      	subs	r3, r5, r7
 800c7c6:	3b15      	subs	r3, #21
 800c7c8:	f023 0303 	bic.w	r3, r3, #3
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	3715      	adds	r7, #21
 800c7d0:	42bd      	cmp	r5, r7
 800c7d2:	bf38      	it	cc
 800c7d4:	2304      	movcc	r3, #4
 800c7d6:	9301      	str	r3, [sp, #4]
 800c7d8:	9b02      	ldr	r3, [sp, #8]
 800c7da:	9103      	str	r1, [sp, #12]
 800c7dc:	428b      	cmp	r3, r1
 800c7de:	d80c      	bhi.n	800c7fa <__multiply+0x9a>
 800c7e0:	2e00      	cmp	r6, #0
 800c7e2:	dd03      	ble.n	800c7ec <__multiply+0x8c>
 800c7e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d055      	beq.n	800c898 <__multiply+0x138>
 800c7ec:	6106      	str	r6, [r0, #16]
 800c7ee:	b005      	add	sp, #20
 800c7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f4:	f843 2b04 	str.w	r2, [r3], #4
 800c7f8:	e7d9      	b.n	800c7ae <__multiply+0x4e>
 800c7fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800c7fe:	f1ba 0f00 	cmp.w	sl, #0
 800c802:	d01f      	beq.n	800c844 <__multiply+0xe4>
 800c804:	46c4      	mov	ip, r8
 800c806:	46a1      	mov	r9, r4
 800c808:	2700      	movs	r7, #0
 800c80a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c80e:	f8d9 3000 	ldr.w	r3, [r9]
 800c812:	fa1f fb82 	uxth.w	fp, r2
 800c816:	b29b      	uxth	r3, r3
 800c818:	fb0a 330b 	mla	r3, sl, fp, r3
 800c81c:	443b      	add	r3, r7
 800c81e:	f8d9 7000 	ldr.w	r7, [r9]
 800c822:	0c12      	lsrs	r2, r2, #16
 800c824:	0c3f      	lsrs	r7, r7, #16
 800c826:	fb0a 7202 	mla	r2, sl, r2, r7
 800c82a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c82e:	b29b      	uxth	r3, r3
 800c830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c834:	4565      	cmp	r5, ip
 800c836:	f849 3b04 	str.w	r3, [r9], #4
 800c83a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c83e:	d8e4      	bhi.n	800c80a <__multiply+0xaa>
 800c840:	9b01      	ldr	r3, [sp, #4]
 800c842:	50e7      	str	r7, [r4, r3]
 800c844:	9b03      	ldr	r3, [sp, #12]
 800c846:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c84a:	3104      	adds	r1, #4
 800c84c:	f1b9 0f00 	cmp.w	r9, #0
 800c850:	d020      	beq.n	800c894 <__multiply+0x134>
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	4647      	mov	r7, r8
 800c856:	46a4      	mov	ip, r4
 800c858:	f04f 0a00 	mov.w	sl, #0
 800c85c:	f8b7 b000 	ldrh.w	fp, [r7]
 800c860:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c864:	fb09 220b 	mla	r2, r9, fp, r2
 800c868:	4452      	add	r2, sl
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c870:	f84c 3b04 	str.w	r3, [ip], #4
 800c874:	f857 3b04 	ldr.w	r3, [r7], #4
 800c878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c87c:	f8bc 3000 	ldrh.w	r3, [ip]
 800c880:	fb09 330a 	mla	r3, r9, sl, r3
 800c884:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c888:	42bd      	cmp	r5, r7
 800c88a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c88e:	d8e5      	bhi.n	800c85c <__multiply+0xfc>
 800c890:	9a01      	ldr	r2, [sp, #4]
 800c892:	50a3      	str	r3, [r4, r2]
 800c894:	3404      	adds	r4, #4
 800c896:	e79f      	b.n	800c7d8 <__multiply+0x78>
 800c898:	3e01      	subs	r6, #1
 800c89a:	e7a1      	b.n	800c7e0 <__multiply+0x80>
 800c89c:	08010561 	.word	0x08010561
 800c8a0:	08010572 	.word	0x08010572

0800c8a4 <__pow5mult>:
 800c8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8a8:	4615      	mov	r5, r2
 800c8aa:	f012 0203 	ands.w	r2, r2, #3
 800c8ae:	4607      	mov	r7, r0
 800c8b0:	460e      	mov	r6, r1
 800c8b2:	d007      	beq.n	800c8c4 <__pow5mult+0x20>
 800c8b4:	4c25      	ldr	r4, [pc, #148]	@ (800c94c <__pow5mult+0xa8>)
 800c8b6:	3a01      	subs	r2, #1
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8be:	f7ff fe5d 	bl	800c57c <__multadd>
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	10ad      	asrs	r5, r5, #2
 800c8c6:	d03d      	beq.n	800c944 <__pow5mult+0xa0>
 800c8c8:	69fc      	ldr	r4, [r7, #28]
 800c8ca:	b97c      	cbnz	r4, 800c8ec <__pow5mult+0x48>
 800c8cc:	2010      	movs	r0, #16
 800c8ce:	f7ff fd3d 	bl	800c34c <malloc>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	61f8      	str	r0, [r7, #28]
 800c8d6:	b928      	cbnz	r0, 800c8e4 <__pow5mult+0x40>
 800c8d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c950 <__pow5mult+0xac>)
 800c8da:	481e      	ldr	r0, [pc, #120]	@ (800c954 <__pow5mult+0xb0>)
 800c8dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c8e0:	f001 fb62 	bl	800dfa8 <__assert_func>
 800c8e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8e8:	6004      	str	r4, [r0, #0]
 800c8ea:	60c4      	str	r4, [r0, #12]
 800c8ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c8f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8f4:	b94c      	cbnz	r4, 800c90a <__pow5mult+0x66>
 800c8f6:	f240 2171 	movw	r1, #625	@ 0x271
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	f7ff ff1a 	bl	800c734 <__i2b>
 800c900:	2300      	movs	r3, #0
 800c902:	f8c8 0008 	str.w	r0, [r8, #8]
 800c906:	4604      	mov	r4, r0
 800c908:	6003      	str	r3, [r0, #0]
 800c90a:	f04f 0900 	mov.w	r9, #0
 800c90e:	07eb      	lsls	r3, r5, #31
 800c910:	d50a      	bpl.n	800c928 <__pow5mult+0x84>
 800c912:	4631      	mov	r1, r6
 800c914:	4622      	mov	r2, r4
 800c916:	4638      	mov	r0, r7
 800c918:	f7ff ff22 	bl	800c760 <__multiply>
 800c91c:	4631      	mov	r1, r6
 800c91e:	4680      	mov	r8, r0
 800c920:	4638      	mov	r0, r7
 800c922:	f7ff fe09 	bl	800c538 <_Bfree>
 800c926:	4646      	mov	r6, r8
 800c928:	106d      	asrs	r5, r5, #1
 800c92a:	d00b      	beq.n	800c944 <__pow5mult+0xa0>
 800c92c:	6820      	ldr	r0, [r4, #0]
 800c92e:	b938      	cbnz	r0, 800c940 <__pow5mult+0x9c>
 800c930:	4622      	mov	r2, r4
 800c932:	4621      	mov	r1, r4
 800c934:	4638      	mov	r0, r7
 800c936:	f7ff ff13 	bl	800c760 <__multiply>
 800c93a:	6020      	str	r0, [r4, #0]
 800c93c:	f8c0 9000 	str.w	r9, [r0]
 800c940:	4604      	mov	r4, r0
 800c942:	e7e4      	b.n	800c90e <__pow5mult+0x6a>
 800c944:	4630      	mov	r0, r6
 800c946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c94a:	bf00      	nop
 800c94c:	08010684 	.word	0x08010684
 800c950:	080104f2 	.word	0x080104f2
 800c954:	08010572 	.word	0x08010572

0800c958 <__lshift>:
 800c958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c95c:	460c      	mov	r4, r1
 800c95e:	6849      	ldr	r1, [r1, #4]
 800c960:	6923      	ldr	r3, [r4, #16]
 800c962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c966:	68a3      	ldr	r3, [r4, #8]
 800c968:	4607      	mov	r7, r0
 800c96a:	4691      	mov	r9, r2
 800c96c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c970:	f108 0601 	add.w	r6, r8, #1
 800c974:	42b3      	cmp	r3, r6
 800c976:	db0b      	blt.n	800c990 <__lshift+0x38>
 800c978:	4638      	mov	r0, r7
 800c97a:	f7ff fd9d 	bl	800c4b8 <_Balloc>
 800c97e:	4605      	mov	r5, r0
 800c980:	b948      	cbnz	r0, 800c996 <__lshift+0x3e>
 800c982:	4602      	mov	r2, r0
 800c984:	4b28      	ldr	r3, [pc, #160]	@ (800ca28 <__lshift+0xd0>)
 800c986:	4829      	ldr	r0, [pc, #164]	@ (800ca2c <__lshift+0xd4>)
 800c988:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c98c:	f001 fb0c 	bl	800dfa8 <__assert_func>
 800c990:	3101      	adds	r1, #1
 800c992:	005b      	lsls	r3, r3, #1
 800c994:	e7ee      	b.n	800c974 <__lshift+0x1c>
 800c996:	2300      	movs	r3, #0
 800c998:	f100 0114 	add.w	r1, r0, #20
 800c99c:	f100 0210 	add.w	r2, r0, #16
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	4553      	cmp	r3, sl
 800c9a4:	db33      	blt.n	800ca0e <__lshift+0xb6>
 800c9a6:	6920      	ldr	r0, [r4, #16]
 800c9a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9ac:	f104 0314 	add.w	r3, r4, #20
 800c9b0:	f019 091f 	ands.w	r9, r9, #31
 800c9b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9bc:	d02b      	beq.n	800ca16 <__lshift+0xbe>
 800c9be:	f1c9 0e20 	rsb	lr, r9, #32
 800c9c2:	468a      	mov	sl, r1
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	6818      	ldr	r0, [r3, #0]
 800c9c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c9cc:	4310      	orrs	r0, r2
 800c9ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c9d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9d6:	459c      	cmp	ip, r3
 800c9d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9dc:	d8f3      	bhi.n	800c9c6 <__lshift+0x6e>
 800c9de:	ebac 0304 	sub.w	r3, ip, r4
 800c9e2:	3b15      	subs	r3, #21
 800c9e4:	f023 0303 	bic.w	r3, r3, #3
 800c9e8:	3304      	adds	r3, #4
 800c9ea:	f104 0015 	add.w	r0, r4, #21
 800c9ee:	4560      	cmp	r0, ip
 800c9f0:	bf88      	it	hi
 800c9f2:	2304      	movhi	r3, #4
 800c9f4:	50ca      	str	r2, [r1, r3]
 800c9f6:	b10a      	cbz	r2, 800c9fc <__lshift+0xa4>
 800c9f8:	f108 0602 	add.w	r6, r8, #2
 800c9fc:	3e01      	subs	r6, #1
 800c9fe:	4638      	mov	r0, r7
 800ca00:	612e      	str	r6, [r5, #16]
 800ca02:	4621      	mov	r1, r4
 800ca04:	f7ff fd98 	bl	800c538 <_Bfree>
 800ca08:	4628      	mov	r0, r5
 800ca0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca12:	3301      	adds	r3, #1
 800ca14:	e7c5      	b.n	800c9a2 <__lshift+0x4a>
 800ca16:	3904      	subs	r1, #4
 800ca18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca20:	459c      	cmp	ip, r3
 800ca22:	d8f9      	bhi.n	800ca18 <__lshift+0xc0>
 800ca24:	e7ea      	b.n	800c9fc <__lshift+0xa4>
 800ca26:	bf00      	nop
 800ca28:	08010561 	.word	0x08010561
 800ca2c:	08010572 	.word	0x08010572

0800ca30 <__mcmp>:
 800ca30:	690a      	ldr	r2, [r1, #16]
 800ca32:	4603      	mov	r3, r0
 800ca34:	6900      	ldr	r0, [r0, #16]
 800ca36:	1a80      	subs	r0, r0, r2
 800ca38:	b530      	push	{r4, r5, lr}
 800ca3a:	d10e      	bne.n	800ca5a <__mcmp+0x2a>
 800ca3c:	3314      	adds	r3, #20
 800ca3e:	3114      	adds	r1, #20
 800ca40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca50:	4295      	cmp	r5, r2
 800ca52:	d003      	beq.n	800ca5c <__mcmp+0x2c>
 800ca54:	d205      	bcs.n	800ca62 <__mcmp+0x32>
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5a:	bd30      	pop	{r4, r5, pc}
 800ca5c:	42a3      	cmp	r3, r4
 800ca5e:	d3f3      	bcc.n	800ca48 <__mcmp+0x18>
 800ca60:	e7fb      	b.n	800ca5a <__mcmp+0x2a>
 800ca62:	2001      	movs	r0, #1
 800ca64:	e7f9      	b.n	800ca5a <__mcmp+0x2a>
	...

0800ca68 <__mdiff>:
 800ca68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	4689      	mov	r9, r1
 800ca6e:	4606      	mov	r6, r0
 800ca70:	4611      	mov	r1, r2
 800ca72:	4648      	mov	r0, r9
 800ca74:	4614      	mov	r4, r2
 800ca76:	f7ff ffdb 	bl	800ca30 <__mcmp>
 800ca7a:	1e05      	subs	r5, r0, #0
 800ca7c:	d112      	bne.n	800caa4 <__mdiff+0x3c>
 800ca7e:	4629      	mov	r1, r5
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7ff fd19 	bl	800c4b8 <_Balloc>
 800ca86:	4602      	mov	r2, r0
 800ca88:	b928      	cbnz	r0, 800ca96 <__mdiff+0x2e>
 800ca8a:	4b3f      	ldr	r3, [pc, #252]	@ (800cb88 <__mdiff+0x120>)
 800ca8c:	f240 2137 	movw	r1, #567	@ 0x237
 800ca90:	483e      	ldr	r0, [pc, #248]	@ (800cb8c <__mdiff+0x124>)
 800ca92:	f001 fa89 	bl	800dfa8 <__assert_func>
 800ca96:	2301      	movs	r3, #1
 800ca98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	b003      	add	sp, #12
 800caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa4:	bfbc      	itt	lt
 800caa6:	464b      	movlt	r3, r9
 800caa8:	46a1      	movlt	r9, r4
 800caaa:	4630      	mov	r0, r6
 800caac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cab0:	bfba      	itte	lt
 800cab2:	461c      	movlt	r4, r3
 800cab4:	2501      	movlt	r5, #1
 800cab6:	2500      	movge	r5, #0
 800cab8:	f7ff fcfe 	bl	800c4b8 <_Balloc>
 800cabc:	4602      	mov	r2, r0
 800cabe:	b918      	cbnz	r0, 800cac8 <__mdiff+0x60>
 800cac0:	4b31      	ldr	r3, [pc, #196]	@ (800cb88 <__mdiff+0x120>)
 800cac2:	f240 2145 	movw	r1, #581	@ 0x245
 800cac6:	e7e3      	b.n	800ca90 <__mdiff+0x28>
 800cac8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cacc:	6926      	ldr	r6, [r4, #16]
 800cace:	60c5      	str	r5, [r0, #12]
 800cad0:	f109 0310 	add.w	r3, r9, #16
 800cad4:	f109 0514 	add.w	r5, r9, #20
 800cad8:	f104 0e14 	add.w	lr, r4, #20
 800cadc:	f100 0b14 	add.w	fp, r0, #20
 800cae0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cae4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cae8:	9301      	str	r3, [sp, #4]
 800caea:	46d9      	mov	r9, fp
 800caec:	f04f 0c00 	mov.w	ip, #0
 800caf0:	9b01      	ldr	r3, [sp, #4]
 800caf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800caf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cafa:	9301      	str	r3, [sp, #4]
 800cafc:	fa1f f38a 	uxth.w	r3, sl
 800cb00:	4619      	mov	r1, r3
 800cb02:	b283      	uxth	r3, r0
 800cb04:	1acb      	subs	r3, r1, r3
 800cb06:	0c00      	lsrs	r0, r0, #16
 800cb08:	4463      	add	r3, ip
 800cb0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb18:	4576      	cmp	r6, lr
 800cb1a:	f849 3b04 	str.w	r3, [r9], #4
 800cb1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb22:	d8e5      	bhi.n	800caf0 <__mdiff+0x88>
 800cb24:	1b33      	subs	r3, r6, r4
 800cb26:	3b15      	subs	r3, #21
 800cb28:	f023 0303 	bic.w	r3, r3, #3
 800cb2c:	3415      	adds	r4, #21
 800cb2e:	3304      	adds	r3, #4
 800cb30:	42a6      	cmp	r6, r4
 800cb32:	bf38      	it	cc
 800cb34:	2304      	movcc	r3, #4
 800cb36:	441d      	add	r5, r3
 800cb38:	445b      	add	r3, fp
 800cb3a:	461e      	mov	r6, r3
 800cb3c:	462c      	mov	r4, r5
 800cb3e:	4544      	cmp	r4, r8
 800cb40:	d30e      	bcc.n	800cb60 <__mdiff+0xf8>
 800cb42:	f108 0103 	add.w	r1, r8, #3
 800cb46:	1b49      	subs	r1, r1, r5
 800cb48:	f021 0103 	bic.w	r1, r1, #3
 800cb4c:	3d03      	subs	r5, #3
 800cb4e:	45a8      	cmp	r8, r5
 800cb50:	bf38      	it	cc
 800cb52:	2100      	movcc	r1, #0
 800cb54:	440b      	add	r3, r1
 800cb56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb5a:	b191      	cbz	r1, 800cb82 <__mdiff+0x11a>
 800cb5c:	6117      	str	r7, [r2, #16]
 800cb5e:	e79d      	b.n	800ca9c <__mdiff+0x34>
 800cb60:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb64:	46e6      	mov	lr, ip
 800cb66:	0c08      	lsrs	r0, r1, #16
 800cb68:	fa1c fc81 	uxtah	ip, ip, r1
 800cb6c:	4471      	add	r1, lr
 800cb6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cb72:	b289      	uxth	r1, r1
 800cb74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb78:	f846 1b04 	str.w	r1, [r6], #4
 800cb7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb80:	e7dd      	b.n	800cb3e <__mdiff+0xd6>
 800cb82:	3f01      	subs	r7, #1
 800cb84:	e7e7      	b.n	800cb56 <__mdiff+0xee>
 800cb86:	bf00      	nop
 800cb88:	08010561 	.word	0x08010561
 800cb8c:	08010572 	.word	0x08010572

0800cb90 <__ulp>:
 800cb90:	b082      	sub	sp, #8
 800cb92:	ed8d 0b00 	vstr	d0, [sp]
 800cb96:	9a01      	ldr	r2, [sp, #4]
 800cb98:	4b0f      	ldr	r3, [pc, #60]	@ (800cbd8 <__ulp+0x48>)
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	dc08      	bgt.n	800cbb6 <__ulp+0x26>
 800cba4:	425b      	negs	r3, r3
 800cba6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cbaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cbae:	da04      	bge.n	800cbba <__ulp+0x2a>
 800cbb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cbb4:	4113      	asrs	r3, r2
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	e008      	b.n	800cbcc <__ulp+0x3c>
 800cbba:	f1a2 0314 	sub.w	r3, r2, #20
 800cbbe:	2b1e      	cmp	r3, #30
 800cbc0:	bfda      	itte	le
 800cbc2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cbc6:	40da      	lsrle	r2, r3
 800cbc8:	2201      	movgt	r2, #1
 800cbca:	2300      	movs	r3, #0
 800cbcc:	4619      	mov	r1, r3
 800cbce:	4610      	mov	r0, r2
 800cbd0:	ec41 0b10 	vmov	d0, r0, r1
 800cbd4:	b002      	add	sp, #8
 800cbd6:	4770      	bx	lr
 800cbd8:	7ff00000 	.word	0x7ff00000

0800cbdc <__b2d>:
 800cbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe0:	6906      	ldr	r6, [r0, #16]
 800cbe2:	f100 0814 	add.w	r8, r0, #20
 800cbe6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cbea:	1f37      	subs	r7, r6, #4
 800cbec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	f7ff fd53 	bl	800c69c <__hi0bits>
 800cbf6:	f1c0 0320 	rsb	r3, r0, #32
 800cbfa:	280a      	cmp	r0, #10
 800cbfc:	600b      	str	r3, [r1, #0]
 800cbfe:	491b      	ldr	r1, [pc, #108]	@ (800cc6c <__b2d+0x90>)
 800cc00:	dc15      	bgt.n	800cc2e <__b2d+0x52>
 800cc02:	f1c0 0c0b 	rsb	ip, r0, #11
 800cc06:	fa22 f30c 	lsr.w	r3, r2, ip
 800cc0a:	45b8      	cmp	r8, r7
 800cc0c:	ea43 0501 	orr.w	r5, r3, r1
 800cc10:	bf34      	ite	cc
 800cc12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc16:	2300      	movcs	r3, #0
 800cc18:	3015      	adds	r0, #21
 800cc1a:	fa02 f000 	lsl.w	r0, r2, r0
 800cc1e:	fa23 f30c 	lsr.w	r3, r3, ip
 800cc22:	4303      	orrs	r3, r0
 800cc24:	461c      	mov	r4, r3
 800cc26:	ec45 4b10 	vmov	d0, r4, r5
 800cc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2e:	45b8      	cmp	r8, r7
 800cc30:	bf3a      	itte	cc
 800cc32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc36:	f1a6 0708 	subcc.w	r7, r6, #8
 800cc3a:	2300      	movcs	r3, #0
 800cc3c:	380b      	subs	r0, #11
 800cc3e:	d012      	beq.n	800cc66 <__b2d+0x8a>
 800cc40:	f1c0 0120 	rsb	r1, r0, #32
 800cc44:	fa23 f401 	lsr.w	r4, r3, r1
 800cc48:	4082      	lsls	r2, r0
 800cc4a:	4322      	orrs	r2, r4
 800cc4c:	4547      	cmp	r7, r8
 800cc4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cc52:	bf8c      	ite	hi
 800cc54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cc58:	2200      	movls	r2, #0
 800cc5a:	4083      	lsls	r3, r0
 800cc5c:	40ca      	lsrs	r2, r1
 800cc5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cc62:	4313      	orrs	r3, r2
 800cc64:	e7de      	b.n	800cc24 <__b2d+0x48>
 800cc66:	ea42 0501 	orr.w	r5, r2, r1
 800cc6a:	e7db      	b.n	800cc24 <__b2d+0x48>
 800cc6c:	3ff00000 	.word	0x3ff00000

0800cc70 <__d2b>:
 800cc70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc74:	460f      	mov	r7, r1
 800cc76:	2101      	movs	r1, #1
 800cc78:	ec59 8b10 	vmov	r8, r9, d0
 800cc7c:	4616      	mov	r6, r2
 800cc7e:	f7ff fc1b 	bl	800c4b8 <_Balloc>
 800cc82:	4604      	mov	r4, r0
 800cc84:	b930      	cbnz	r0, 800cc94 <__d2b+0x24>
 800cc86:	4602      	mov	r2, r0
 800cc88:	4b23      	ldr	r3, [pc, #140]	@ (800cd18 <__d2b+0xa8>)
 800cc8a:	4824      	ldr	r0, [pc, #144]	@ (800cd1c <__d2b+0xac>)
 800cc8c:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc90:	f001 f98a 	bl	800dfa8 <__assert_func>
 800cc94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc9c:	b10d      	cbz	r5, 800cca2 <__d2b+0x32>
 800cc9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cca2:	9301      	str	r3, [sp, #4]
 800cca4:	f1b8 0300 	subs.w	r3, r8, #0
 800cca8:	d023      	beq.n	800ccf2 <__d2b+0x82>
 800ccaa:	4668      	mov	r0, sp
 800ccac:	9300      	str	r3, [sp, #0]
 800ccae:	f7ff fd14 	bl	800c6da <__lo0bits>
 800ccb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ccb6:	b1d0      	cbz	r0, 800ccee <__d2b+0x7e>
 800ccb8:	f1c0 0320 	rsb	r3, r0, #32
 800ccbc:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc0:	430b      	orrs	r3, r1
 800ccc2:	40c2      	lsrs	r2, r0
 800ccc4:	6163      	str	r3, [r4, #20]
 800ccc6:	9201      	str	r2, [sp, #4]
 800ccc8:	9b01      	ldr	r3, [sp, #4]
 800ccca:	61a3      	str	r3, [r4, #24]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	bf0c      	ite	eq
 800ccd0:	2201      	moveq	r2, #1
 800ccd2:	2202      	movne	r2, #2
 800ccd4:	6122      	str	r2, [r4, #16]
 800ccd6:	b1a5      	cbz	r5, 800cd02 <__d2b+0x92>
 800ccd8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ccdc:	4405      	add	r5, r0
 800ccde:	603d      	str	r5, [r7, #0]
 800cce0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cce4:	6030      	str	r0, [r6, #0]
 800cce6:	4620      	mov	r0, r4
 800cce8:	b003      	add	sp, #12
 800ccea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccee:	6161      	str	r1, [r4, #20]
 800ccf0:	e7ea      	b.n	800ccc8 <__d2b+0x58>
 800ccf2:	a801      	add	r0, sp, #4
 800ccf4:	f7ff fcf1 	bl	800c6da <__lo0bits>
 800ccf8:	9b01      	ldr	r3, [sp, #4]
 800ccfa:	6163      	str	r3, [r4, #20]
 800ccfc:	3020      	adds	r0, #32
 800ccfe:	2201      	movs	r2, #1
 800cd00:	e7e8      	b.n	800ccd4 <__d2b+0x64>
 800cd02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd0a:	6038      	str	r0, [r7, #0]
 800cd0c:	6918      	ldr	r0, [r3, #16]
 800cd0e:	f7ff fcc5 	bl	800c69c <__hi0bits>
 800cd12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd16:	e7e5      	b.n	800cce4 <__d2b+0x74>
 800cd18:	08010561 	.word	0x08010561
 800cd1c:	08010572 	.word	0x08010572

0800cd20 <__ratio>:
 800cd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd24:	b085      	sub	sp, #20
 800cd26:	e9cd 1000 	strd	r1, r0, [sp]
 800cd2a:	a902      	add	r1, sp, #8
 800cd2c:	f7ff ff56 	bl	800cbdc <__b2d>
 800cd30:	9800      	ldr	r0, [sp, #0]
 800cd32:	a903      	add	r1, sp, #12
 800cd34:	ec55 4b10 	vmov	r4, r5, d0
 800cd38:	f7ff ff50 	bl	800cbdc <__b2d>
 800cd3c:	9b01      	ldr	r3, [sp, #4]
 800cd3e:	6919      	ldr	r1, [r3, #16]
 800cd40:	9b00      	ldr	r3, [sp, #0]
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	1ac9      	subs	r1, r1, r3
 800cd46:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cd4a:	1a9b      	subs	r3, r3, r2
 800cd4c:	ec5b ab10 	vmov	sl, fp, d0
 800cd50:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	bfce      	itee	gt
 800cd58:	462a      	movgt	r2, r5
 800cd5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd5e:	465a      	movle	r2, fp
 800cd60:	462f      	mov	r7, r5
 800cd62:	46d9      	mov	r9, fp
 800cd64:	bfcc      	ite	gt
 800cd66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd6a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cd6e:	464b      	mov	r3, r9
 800cd70:	4652      	mov	r2, sl
 800cd72:	4620      	mov	r0, r4
 800cd74:	4639      	mov	r1, r7
 800cd76:	f7f3 fd89 	bl	800088c <__aeabi_ddiv>
 800cd7a:	ec41 0b10 	vmov	d0, r0, r1
 800cd7e:	b005      	add	sp, #20
 800cd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd84 <__copybits>:
 800cd84:	3901      	subs	r1, #1
 800cd86:	b570      	push	{r4, r5, r6, lr}
 800cd88:	1149      	asrs	r1, r1, #5
 800cd8a:	6914      	ldr	r4, [r2, #16]
 800cd8c:	3101      	adds	r1, #1
 800cd8e:	f102 0314 	add.w	r3, r2, #20
 800cd92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd9a:	1f05      	subs	r5, r0, #4
 800cd9c:	42a3      	cmp	r3, r4
 800cd9e:	d30c      	bcc.n	800cdba <__copybits+0x36>
 800cda0:	1aa3      	subs	r3, r4, r2
 800cda2:	3b11      	subs	r3, #17
 800cda4:	f023 0303 	bic.w	r3, r3, #3
 800cda8:	3211      	adds	r2, #17
 800cdaa:	42a2      	cmp	r2, r4
 800cdac:	bf88      	it	hi
 800cdae:	2300      	movhi	r3, #0
 800cdb0:	4418      	add	r0, r3
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4288      	cmp	r0, r1
 800cdb6:	d305      	bcc.n	800cdc4 <__copybits+0x40>
 800cdb8:	bd70      	pop	{r4, r5, r6, pc}
 800cdba:	f853 6b04 	ldr.w	r6, [r3], #4
 800cdbe:	f845 6f04 	str.w	r6, [r5, #4]!
 800cdc2:	e7eb      	b.n	800cd9c <__copybits+0x18>
 800cdc4:	f840 3b04 	str.w	r3, [r0], #4
 800cdc8:	e7f4      	b.n	800cdb4 <__copybits+0x30>

0800cdca <__any_on>:
 800cdca:	f100 0214 	add.w	r2, r0, #20
 800cdce:	6900      	ldr	r0, [r0, #16]
 800cdd0:	114b      	asrs	r3, r1, #5
 800cdd2:	4298      	cmp	r0, r3
 800cdd4:	b510      	push	{r4, lr}
 800cdd6:	db11      	blt.n	800cdfc <__any_on+0x32>
 800cdd8:	dd0a      	ble.n	800cdf0 <__any_on+0x26>
 800cdda:	f011 011f 	ands.w	r1, r1, #31
 800cdde:	d007      	beq.n	800cdf0 <__any_on+0x26>
 800cde0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cde4:	fa24 f001 	lsr.w	r0, r4, r1
 800cde8:	fa00 f101 	lsl.w	r1, r0, r1
 800cdec:	428c      	cmp	r4, r1
 800cdee:	d10b      	bne.n	800ce08 <__any_on+0x3e>
 800cdf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d803      	bhi.n	800ce00 <__any_on+0x36>
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	bd10      	pop	{r4, pc}
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	e7f7      	b.n	800cdf0 <__any_on+0x26>
 800ce00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce04:	2900      	cmp	r1, #0
 800ce06:	d0f5      	beq.n	800cdf4 <__any_on+0x2a>
 800ce08:	2001      	movs	r0, #1
 800ce0a:	e7f6      	b.n	800cdfa <__any_on+0x30>

0800ce0c <sulp>:
 800ce0c:	b570      	push	{r4, r5, r6, lr}
 800ce0e:	4604      	mov	r4, r0
 800ce10:	460d      	mov	r5, r1
 800ce12:	ec45 4b10 	vmov	d0, r4, r5
 800ce16:	4616      	mov	r6, r2
 800ce18:	f7ff feba 	bl	800cb90 <__ulp>
 800ce1c:	ec51 0b10 	vmov	r0, r1, d0
 800ce20:	b17e      	cbz	r6, 800ce42 <sulp+0x36>
 800ce22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ce26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	dd09      	ble.n	800ce42 <sulp+0x36>
 800ce2e:	051b      	lsls	r3, r3, #20
 800ce30:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ce34:	2400      	movs	r4, #0
 800ce36:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ce3a:	4622      	mov	r2, r4
 800ce3c:	462b      	mov	r3, r5
 800ce3e:	f7f3 fbfb 	bl	8000638 <__aeabi_dmul>
 800ce42:	ec41 0b10 	vmov	d0, r0, r1
 800ce46:	bd70      	pop	{r4, r5, r6, pc}

0800ce48 <_strtod_l>:
 800ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4c:	b09f      	sub	sp, #124	@ 0x7c
 800ce4e:	460c      	mov	r4, r1
 800ce50:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ce52:	2200      	movs	r2, #0
 800ce54:	921a      	str	r2, [sp, #104]	@ 0x68
 800ce56:	9005      	str	r0, [sp, #20]
 800ce58:	f04f 0a00 	mov.w	sl, #0
 800ce5c:	f04f 0b00 	mov.w	fp, #0
 800ce60:	460a      	mov	r2, r1
 800ce62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce64:	7811      	ldrb	r1, [r2, #0]
 800ce66:	292b      	cmp	r1, #43	@ 0x2b
 800ce68:	d04a      	beq.n	800cf00 <_strtod_l+0xb8>
 800ce6a:	d838      	bhi.n	800cede <_strtod_l+0x96>
 800ce6c:	290d      	cmp	r1, #13
 800ce6e:	d832      	bhi.n	800ced6 <_strtod_l+0x8e>
 800ce70:	2908      	cmp	r1, #8
 800ce72:	d832      	bhi.n	800ceda <_strtod_l+0x92>
 800ce74:	2900      	cmp	r1, #0
 800ce76:	d03b      	beq.n	800cef0 <_strtod_l+0xa8>
 800ce78:	2200      	movs	r2, #0
 800ce7a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ce7e:	782a      	ldrb	r2, [r5, #0]
 800ce80:	2a30      	cmp	r2, #48	@ 0x30
 800ce82:	f040 80b2 	bne.w	800cfea <_strtod_l+0x1a2>
 800ce86:	786a      	ldrb	r2, [r5, #1]
 800ce88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce8c:	2a58      	cmp	r2, #88	@ 0x58
 800ce8e:	d16e      	bne.n	800cf6e <_strtod_l+0x126>
 800ce90:	9302      	str	r3, [sp, #8]
 800ce92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce94:	9301      	str	r3, [sp, #4]
 800ce96:	ab1a      	add	r3, sp, #104	@ 0x68
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	4a8f      	ldr	r2, [pc, #572]	@ (800d0d8 <_strtod_l+0x290>)
 800ce9c:	9805      	ldr	r0, [sp, #20]
 800ce9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cea0:	a919      	add	r1, sp, #100	@ 0x64
 800cea2:	f001 f91b 	bl	800e0dc <__gethex>
 800cea6:	f010 060f 	ands.w	r6, r0, #15
 800ceaa:	4604      	mov	r4, r0
 800ceac:	d005      	beq.n	800ceba <_strtod_l+0x72>
 800ceae:	2e06      	cmp	r6, #6
 800ceb0:	d128      	bne.n	800cf04 <_strtod_l+0xbc>
 800ceb2:	3501      	adds	r5, #1
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9519      	str	r5, [sp, #100]	@ 0x64
 800ceb8:	930e      	str	r3, [sp, #56]	@ 0x38
 800ceba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f040 858e 	bne.w	800d9de <_strtod_l+0xb96>
 800cec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cec4:	b1cb      	cbz	r3, 800cefa <_strtod_l+0xb2>
 800cec6:	4652      	mov	r2, sl
 800cec8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cecc:	ec43 2b10 	vmov	d0, r2, r3
 800ced0:	b01f      	add	sp, #124	@ 0x7c
 800ced2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced6:	2920      	cmp	r1, #32
 800ced8:	d1ce      	bne.n	800ce78 <_strtod_l+0x30>
 800ceda:	3201      	adds	r2, #1
 800cedc:	e7c1      	b.n	800ce62 <_strtod_l+0x1a>
 800cede:	292d      	cmp	r1, #45	@ 0x2d
 800cee0:	d1ca      	bne.n	800ce78 <_strtod_l+0x30>
 800cee2:	2101      	movs	r1, #1
 800cee4:	910e      	str	r1, [sp, #56]	@ 0x38
 800cee6:	1c51      	adds	r1, r2, #1
 800cee8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ceea:	7852      	ldrb	r2, [r2, #1]
 800ceec:	2a00      	cmp	r2, #0
 800ceee:	d1c5      	bne.n	800ce7c <_strtod_l+0x34>
 800cef0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cef2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f040 8570 	bne.w	800d9da <_strtod_l+0xb92>
 800cefa:	4652      	mov	r2, sl
 800cefc:	465b      	mov	r3, fp
 800cefe:	e7e5      	b.n	800cecc <_strtod_l+0x84>
 800cf00:	2100      	movs	r1, #0
 800cf02:	e7ef      	b.n	800cee4 <_strtod_l+0x9c>
 800cf04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf06:	b13a      	cbz	r2, 800cf18 <_strtod_l+0xd0>
 800cf08:	2135      	movs	r1, #53	@ 0x35
 800cf0a:	a81c      	add	r0, sp, #112	@ 0x70
 800cf0c:	f7ff ff3a 	bl	800cd84 <__copybits>
 800cf10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf12:	9805      	ldr	r0, [sp, #20]
 800cf14:	f7ff fb10 	bl	800c538 <_Bfree>
 800cf18:	3e01      	subs	r6, #1
 800cf1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cf1c:	2e04      	cmp	r6, #4
 800cf1e:	d806      	bhi.n	800cf2e <_strtod_l+0xe6>
 800cf20:	e8df f006 	tbb	[pc, r6]
 800cf24:	201d0314 	.word	0x201d0314
 800cf28:	14          	.byte	0x14
 800cf29:	00          	.byte	0x00
 800cf2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cf2e:	05e1      	lsls	r1, r4, #23
 800cf30:	bf48      	it	mi
 800cf32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cf36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf3a:	0d1b      	lsrs	r3, r3, #20
 800cf3c:	051b      	lsls	r3, r3, #20
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1bb      	bne.n	800ceba <_strtod_l+0x72>
 800cf42:	f7fe fb1f 	bl	800b584 <__errno>
 800cf46:	2322      	movs	r3, #34	@ 0x22
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	e7b6      	b.n	800ceba <_strtod_l+0x72>
 800cf4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cf50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cf54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cf58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cf5c:	e7e7      	b.n	800cf2e <_strtod_l+0xe6>
 800cf5e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d0e0 <_strtod_l+0x298>
 800cf62:	e7e4      	b.n	800cf2e <_strtod_l+0xe6>
 800cf64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cf68:	f04f 3aff 	mov.w	sl, #4294967295
 800cf6c:	e7df      	b.n	800cf2e <_strtod_l+0xe6>
 800cf6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf70:	1c5a      	adds	r2, r3, #1
 800cf72:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf74:	785b      	ldrb	r3, [r3, #1]
 800cf76:	2b30      	cmp	r3, #48	@ 0x30
 800cf78:	d0f9      	beq.n	800cf6e <_strtod_l+0x126>
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d09d      	beq.n	800ceba <_strtod_l+0x72>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	2700      	movs	r7, #0
 800cf82:	9308      	str	r3, [sp, #32]
 800cf84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf86:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf88:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cf8a:	46b9      	mov	r9, r7
 800cf8c:	220a      	movs	r2, #10
 800cf8e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cf90:	7805      	ldrb	r5, [r0, #0]
 800cf92:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cf96:	b2d9      	uxtb	r1, r3
 800cf98:	2909      	cmp	r1, #9
 800cf9a:	d928      	bls.n	800cfee <_strtod_l+0x1a6>
 800cf9c:	494f      	ldr	r1, [pc, #316]	@ (800d0dc <_strtod_l+0x294>)
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f000 ffd6 	bl	800df50 <strncmp>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d032      	beq.n	800d00e <_strtod_l+0x1c6>
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	462a      	mov	r2, r5
 800cfac:	900a      	str	r0, [sp, #40]	@ 0x28
 800cfae:	464d      	mov	r5, r9
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2a65      	cmp	r2, #101	@ 0x65
 800cfb4:	d001      	beq.n	800cfba <_strtod_l+0x172>
 800cfb6:	2a45      	cmp	r2, #69	@ 0x45
 800cfb8:	d114      	bne.n	800cfe4 <_strtod_l+0x19c>
 800cfba:	b91d      	cbnz	r5, 800cfc4 <_strtod_l+0x17c>
 800cfbc:	9a08      	ldr	r2, [sp, #32]
 800cfbe:	4302      	orrs	r2, r0
 800cfc0:	d096      	beq.n	800cef0 <_strtod_l+0xa8>
 800cfc2:	2500      	movs	r5, #0
 800cfc4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cfc6:	1c62      	adds	r2, r4, #1
 800cfc8:	9219      	str	r2, [sp, #100]	@ 0x64
 800cfca:	7862      	ldrb	r2, [r4, #1]
 800cfcc:	2a2b      	cmp	r2, #43	@ 0x2b
 800cfce:	d07a      	beq.n	800d0c6 <_strtod_l+0x27e>
 800cfd0:	2a2d      	cmp	r2, #45	@ 0x2d
 800cfd2:	d07e      	beq.n	800d0d2 <_strtod_l+0x28a>
 800cfd4:	f04f 0c00 	mov.w	ip, #0
 800cfd8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cfdc:	2909      	cmp	r1, #9
 800cfde:	f240 8085 	bls.w	800d0ec <_strtod_l+0x2a4>
 800cfe2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cfe4:	f04f 0800 	mov.w	r8, #0
 800cfe8:	e0a5      	b.n	800d136 <_strtod_l+0x2ee>
 800cfea:	2300      	movs	r3, #0
 800cfec:	e7c8      	b.n	800cf80 <_strtod_l+0x138>
 800cfee:	f1b9 0f08 	cmp.w	r9, #8
 800cff2:	bfd8      	it	le
 800cff4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cff6:	f100 0001 	add.w	r0, r0, #1
 800cffa:	bfda      	itte	le
 800cffc:	fb02 3301 	mlale	r3, r2, r1, r3
 800d000:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d002:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d006:	f109 0901 	add.w	r9, r9, #1
 800d00a:	9019      	str	r0, [sp, #100]	@ 0x64
 800d00c:	e7bf      	b.n	800cf8e <_strtod_l+0x146>
 800d00e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d010:	1c5a      	adds	r2, r3, #1
 800d012:	9219      	str	r2, [sp, #100]	@ 0x64
 800d014:	785a      	ldrb	r2, [r3, #1]
 800d016:	f1b9 0f00 	cmp.w	r9, #0
 800d01a:	d03b      	beq.n	800d094 <_strtod_l+0x24c>
 800d01c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d01e:	464d      	mov	r5, r9
 800d020:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d024:	2b09      	cmp	r3, #9
 800d026:	d912      	bls.n	800d04e <_strtod_l+0x206>
 800d028:	2301      	movs	r3, #1
 800d02a:	e7c2      	b.n	800cfb2 <_strtod_l+0x16a>
 800d02c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d02e:	1c5a      	adds	r2, r3, #1
 800d030:	9219      	str	r2, [sp, #100]	@ 0x64
 800d032:	785a      	ldrb	r2, [r3, #1]
 800d034:	3001      	adds	r0, #1
 800d036:	2a30      	cmp	r2, #48	@ 0x30
 800d038:	d0f8      	beq.n	800d02c <_strtod_l+0x1e4>
 800d03a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d03e:	2b08      	cmp	r3, #8
 800d040:	f200 84d2 	bhi.w	800d9e8 <_strtod_l+0xba0>
 800d044:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d046:	900a      	str	r0, [sp, #40]	@ 0x28
 800d048:	2000      	movs	r0, #0
 800d04a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d04c:	4605      	mov	r5, r0
 800d04e:	3a30      	subs	r2, #48	@ 0x30
 800d050:	f100 0301 	add.w	r3, r0, #1
 800d054:	d018      	beq.n	800d088 <_strtod_l+0x240>
 800d056:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d058:	4419      	add	r1, r3
 800d05a:	910a      	str	r1, [sp, #40]	@ 0x28
 800d05c:	462e      	mov	r6, r5
 800d05e:	f04f 0e0a 	mov.w	lr, #10
 800d062:	1c71      	adds	r1, r6, #1
 800d064:	eba1 0c05 	sub.w	ip, r1, r5
 800d068:	4563      	cmp	r3, ip
 800d06a:	dc15      	bgt.n	800d098 <_strtod_l+0x250>
 800d06c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d070:	182b      	adds	r3, r5, r0
 800d072:	2b08      	cmp	r3, #8
 800d074:	f105 0501 	add.w	r5, r5, #1
 800d078:	4405      	add	r5, r0
 800d07a:	dc1a      	bgt.n	800d0b2 <_strtod_l+0x26a>
 800d07c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d07e:	230a      	movs	r3, #10
 800d080:	fb03 2301 	mla	r3, r3, r1, r2
 800d084:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d086:	2300      	movs	r3, #0
 800d088:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d08a:	1c51      	adds	r1, r2, #1
 800d08c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d08e:	7852      	ldrb	r2, [r2, #1]
 800d090:	4618      	mov	r0, r3
 800d092:	e7c5      	b.n	800d020 <_strtod_l+0x1d8>
 800d094:	4648      	mov	r0, r9
 800d096:	e7ce      	b.n	800d036 <_strtod_l+0x1ee>
 800d098:	2e08      	cmp	r6, #8
 800d09a:	dc05      	bgt.n	800d0a8 <_strtod_l+0x260>
 800d09c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d09e:	fb0e f606 	mul.w	r6, lr, r6
 800d0a2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d0a4:	460e      	mov	r6, r1
 800d0a6:	e7dc      	b.n	800d062 <_strtod_l+0x21a>
 800d0a8:	2910      	cmp	r1, #16
 800d0aa:	bfd8      	it	le
 800d0ac:	fb0e f707 	mulle.w	r7, lr, r7
 800d0b0:	e7f8      	b.n	800d0a4 <_strtod_l+0x25c>
 800d0b2:	2b0f      	cmp	r3, #15
 800d0b4:	bfdc      	itt	le
 800d0b6:	230a      	movle	r3, #10
 800d0b8:	fb03 2707 	mlale	r7, r3, r7, r2
 800d0bc:	e7e3      	b.n	800d086 <_strtod_l+0x23e>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e77a      	b.n	800cfbc <_strtod_l+0x174>
 800d0c6:	f04f 0c00 	mov.w	ip, #0
 800d0ca:	1ca2      	adds	r2, r4, #2
 800d0cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0ce:	78a2      	ldrb	r2, [r4, #2]
 800d0d0:	e782      	b.n	800cfd8 <_strtod_l+0x190>
 800d0d2:	f04f 0c01 	mov.w	ip, #1
 800d0d6:	e7f8      	b.n	800d0ca <_strtod_l+0x282>
 800d0d8:	08010794 	.word	0x08010794
 800d0dc:	080105cb 	.word	0x080105cb
 800d0e0:	7ff00000 	.word	0x7ff00000
 800d0e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d0e6:	1c51      	adds	r1, r2, #1
 800d0e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d0ea:	7852      	ldrb	r2, [r2, #1]
 800d0ec:	2a30      	cmp	r2, #48	@ 0x30
 800d0ee:	d0f9      	beq.n	800d0e4 <_strtod_l+0x29c>
 800d0f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d0f4:	2908      	cmp	r1, #8
 800d0f6:	f63f af75 	bhi.w	800cfe4 <_strtod_l+0x19c>
 800d0fa:	3a30      	subs	r2, #48	@ 0x30
 800d0fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d100:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d102:	f04f 080a 	mov.w	r8, #10
 800d106:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d108:	1c56      	adds	r6, r2, #1
 800d10a:	9619      	str	r6, [sp, #100]	@ 0x64
 800d10c:	7852      	ldrb	r2, [r2, #1]
 800d10e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d112:	f1be 0f09 	cmp.w	lr, #9
 800d116:	d939      	bls.n	800d18c <_strtod_l+0x344>
 800d118:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d11a:	1a76      	subs	r6, r6, r1
 800d11c:	2e08      	cmp	r6, #8
 800d11e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d122:	dc03      	bgt.n	800d12c <_strtod_l+0x2e4>
 800d124:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d126:	4588      	cmp	r8, r1
 800d128:	bfa8      	it	ge
 800d12a:	4688      	movge	r8, r1
 800d12c:	f1bc 0f00 	cmp.w	ip, #0
 800d130:	d001      	beq.n	800d136 <_strtod_l+0x2ee>
 800d132:	f1c8 0800 	rsb	r8, r8, #0
 800d136:	2d00      	cmp	r5, #0
 800d138:	d14e      	bne.n	800d1d8 <_strtod_l+0x390>
 800d13a:	9908      	ldr	r1, [sp, #32]
 800d13c:	4308      	orrs	r0, r1
 800d13e:	f47f aebc 	bne.w	800ceba <_strtod_l+0x72>
 800d142:	2b00      	cmp	r3, #0
 800d144:	f47f aed4 	bne.w	800cef0 <_strtod_l+0xa8>
 800d148:	2a69      	cmp	r2, #105	@ 0x69
 800d14a:	d028      	beq.n	800d19e <_strtod_l+0x356>
 800d14c:	dc25      	bgt.n	800d19a <_strtod_l+0x352>
 800d14e:	2a49      	cmp	r2, #73	@ 0x49
 800d150:	d025      	beq.n	800d19e <_strtod_l+0x356>
 800d152:	2a4e      	cmp	r2, #78	@ 0x4e
 800d154:	f47f aecc 	bne.w	800cef0 <_strtod_l+0xa8>
 800d158:	499a      	ldr	r1, [pc, #616]	@ (800d3c4 <_strtod_l+0x57c>)
 800d15a:	a819      	add	r0, sp, #100	@ 0x64
 800d15c:	f001 f9e0 	bl	800e520 <__match>
 800d160:	2800      	cmp	r0, #0
 800d162:	f43f aec5 	beq.w	800cef0 <_strtod_l+0xa8>
 800d166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	2b28      	cmp	r3, #40	@ 0x28
 800d16c:	d12e      	bne.n	800d1cc <_strtod_l+0x384>
 800d16e:	4996      	ldr	r1, [pc, #600]	@ (800d3c8 <_strtod_l+0x580>)
 800d170:	aa1c      	add	r2, sp, #112	@ 0x70
 800d172:	a819      	add	r0, sp, #100	@ 0x64
 800d174:	f001 f9e8 	bl	800e548 <__hexnan>
 800d178:	2805      	cmp	r0, #5
 800d17a:	d127      	bne.n	800d1cc <_strtod_l+0x384>
 800d17c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d17e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d182:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d186:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d18a:	e696      	b.n	800ceba <_strtod_l+0x72>
 800d18c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d18e:	fb08 2101 	mla	r1, r8, r1, r2
 800d192:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d196:	9209      	str	r2, [sp, #36]	@ 0x24
 800d198:	e7b5      	b.n	800d106 <_strtod_l+0x2be>
 800d19a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d19c:	e7da      	b.n	800d154 <_strtod_l+0x30c>
 800d19e:	498b      	ldr	r1, [pc, #556]	@ (800d3cc <_strtod_l+0x584>)
 800d1a0:	a819      	add	r0, sp, #100	@ 0x64
 800d1a2:	f001 f9bd 	bl	800e520 <__match>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	f43f aea2 	beq.w	800cef0 <_strtod_l+0xa8>
 800d1ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1ae:	4988      	ldr	r1, [pc, #544]	@ (800d3d0 <_strtod_l+0x588>)
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	a819      	add	r0, sp, #100	@ 0x64
 800d1b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1b6:	f001 f9b3 	bl	800e520 <__match>
 800d1ba:	b910      	cbnz	r0, 800d1c2 <_strtod_l+0x37a>
 800d1bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1be:	3301      	adds	r3, #1
 800d1c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1c2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d3e0 <_strtod_l+0x598>
 800d1c6:	f04f 0a00 	mov.w	sl, #0
 800d1ca:	e676      	b.n	800ceba <_strtod_l+0x72>
 800d1cc:	4881      	ldr	r0, [pc, #516]	@ (800d3d4 <_strtod_l+0x58c>)
 800d1ce:	f000 fee3 	bl	800df98 <nan>
 800d1d2:	ec5b ab10 	vmov	sl, fp, d0
 800d1d6:	e670      	b.n	800ceba <_strtod_l+0x72>
 800d1d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1da:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d1dc:	eba8 0303 	sub.w	r3, r8, r3
 800d1e0:	f1b9 0f00 	cmp.w	r9, #0
 800d1e4:	bf08      	it	eq
 800d1e6:	46a9      	moveq	r9, r5
 800d1e8:	2d10      	cmp	r5, #16
 800d1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ec:	462c      	mov	r4, r5
 800d1ee:	bfa8      	it	ge
 800d1f0:	2410      	movge	r4, #16
 800d1f2:	f7f3 f9a7 	bl	8000544 <__aeabi_ui2d>
 800d1f6:	2d09      	cmp	r5, #9
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	468b      	mov	fp, r1
 800d1fc:	dc13      	bgt.n	800d226 <_strtod_l+0x3de>
 800d1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d200:	2b00      	cmp	r3, #0
 800d202:	f43f ae5a 	beq.w	800ceba <_strtod_l+0x72>
 800d206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d208:	dd78      	ble.n	800d2fc <_strtod_l+0x4b4>
 800d20a:	2b16      	cmp	r3, #22
 800d20c:	dc5f      	bgt.n	800d2ce <_strtod_l+0x486>
 800d20e:	4972      	ldr	r1, [pc, #456]	@ (800d3d8 <_strtod_l+0x590>)
 800d210:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d214:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d218:	4652      	mov	r2, sl
 800d21a:	465b      	mov	r3, fp
 800d21c:	f7f3 fa0c 	bl	8000638 <__aeabi_dmul>
 800d220:	4682      	mov	sl, r0
 800d222:	468b      	mov	fp, r1
 800d224:	e649      	b.n	800ceba <_strtod_l+0x72>
 800d226:	4b6c      	ldr	r3, [pc, #432]	@ (800d3d8 <_strtod_l+0x590>)
 800d228:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d22c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d230:	f7f3 fa02 	bl	8000638 <__aeabi_dmul>
 800d234:	4682      	mov	sl, r0
 800d236:	4638      	mov	r0, r7
 800d238:	468b      	mov	fp, r1
 800d23a:	f7f3 f983 	bl	8000544 <__aeabi_ui2d>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
 800d242:	4650      	mov	r0, sl
 800d244:	4659      	mov	r1, fp
 800d246:	f7f3 f841 	bl	80002cc <__adddf3>
 800d24a:	2d0f      	cmp	r5, #15
 800d24c:	4682      	mov	sl, r0
 800d24e:	468b      	mov	fp, r1
 800d250:	ddd5      	ble.n	800d1fe <_strtod_l+0x3b6>
 800d252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d254:	1b2c      	subs	r4, r5, r4
 800d256:	441c      	add	r4, r3
 800d258:	2c00      	cmp	r4, #0
 800d25a:	f340 8093 	ble.w	800d384 <_strtod_l+0x53c>
 800d25e:	f014 030f 	ands.w	r3, r4, #15
 800d262:	d00a      	beq.n	800d27a <_strtod_l+0x432>
 800d264:	495c      	ldr	r1, [pc, #368]	@ (800d3d8 <_strtod_l+0x590>)
 800d266:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d26a:	4652      	mov	r2, sl
 800d26c:	465b      	mov	r3, fp
 800d26e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d272:	f7f3 f9e1 	bl	8000638 <__aeabi_dmul>
 800d276:	4682      	mov	sl, r0
 800d278:	468b      	mov	fp, r1
 800d27a:	f034 040f 	bics.w	r4, r4, #15
 800d27e:	d073      	beq.n	800d368 <_strtod_l+0x520>
 800d280:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d284:	dd49      	ble.n	800d31a <_strtod_l+0x4d2>
 800d286:	2400      	movs	r4, #0
 800d288:	46a0      	mov	r8, r4
 800d28a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d28c:	46a1      	mov	r9, r4
 800d28e:	9a05      	ldr	r2, [sp, #20]
 800d290:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d3e0 <_strtod_l+0x598>
 800d294:	2322      	movs	r3, #34	@ 0x22
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	f04f 0a00 	mov.w	sl, #0
 800d29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f43f ae0b 	beq.w	800ceba <_strtod_l+0x72>
 800d2a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2a6:	9805      	ldr	r0, [sp, #20]
 800d2a8:	f7ff f946 	bl	800c538 <_Bfree>
 800d2ac:	9805      	ldr	r0, [sp, #20]
 800d2ae:	4649      	mov	r1, r9
 800d2b0:	f7ff f942 	bl	800c538 <_Bfree>
 800d2b4:	9805      	ldr	r0, [sp, #20]
 800d2b6:	4641      	mov	r1, r8
 800d2b8:	f7ff f93e 	bl	800c538 <_Bfree>
 800d2bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d2be:	9805      	ldr	r0, [sp, #20]
 800d2c0:	f7ff f93a 	bl	800c538 <_Bfree>
 800d2c4:	9805      	ldr	r0, [sp, #20]
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	f7ff f936 	bl	800c538 <_Bfree>
 800d2cc:	e5f5      	b.n	800ceba <_strtod_l+0x72>
 800d2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	dbbc      	blt.n	800d252 <_strtod_l+0x40a>
 800d2d8:	4c3f      	ldr	r4, [pc, #252]	@ (800d3d8 <_strtod_l+0x590>)
 800d2da:	f1c5 050f 	rsb	r5, r5, #15
 800d2de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d2e2:	4652      	mov	r2, sl
 800d2e4:	465b      	mov	r3, fp
 800d2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ea:	f7f3 f9a5 	bl	8000638 <__aeabi_dmul>
 800d2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f0:	1b5d      	subs	r5, r3, r5
 800d2f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d2f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d2fa:	e78f      	b.n	800d21c <_strtod_l+0x3d4>
 800d2fc:	3316      	adds	r3, #22
 800d2fe:	dba8      	blt.n	800d252 <_strtod_l+0x40a>
 800d300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d302:	eba3 0808 	sub.w	r8, r3, r8
 800d306:	4b34      	ldr	r3, [pc, #208]	@ (800d3d8 <_strtod_l+0x590>)
 800d308:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d30c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d310:	4650      	mov	r0, sl
 800d312:	4659      	mov	r1, fp
 800d314:	f7f3 faba 	bl	800088c <__aeabi_ddiv>
 800d318:	e782      	b.n	800d220 <_strtod_l+0x3d8>
 800d31a:	2300      	movs	r3, #0
 800d31c:	4f2f      	ldr	r7, [pc, #188]	@ (800d3dc <_strtod_l+0x594>)
 800d31e:	1124      	asrs	r4, r4, #4
 800d320:	4650      	mov	r0, sl
 800d322:	4659      	mov	r1, fp
 800d324:	461e      	mov	r6, r3
 800d326:	2c01      	cmp	r4, #1
 800d328:	dc21      	bgt.n	800d36e <_strtod_l+0x526>
 800d32a:	b10b      	cbz	r3, 800d330 <_strtod_l+0x4e8>
 800d32c:	4682      	mov	sl, r0
 800d32e:	468b      	mov	fp, r1
 800d330:	492a      	ldr	r1, [pc, #168]	@ (800d3dc <_strtod_l+0x594>)
 800d332:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d336:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d33a:	4652      	mov	r2, sl
 800d33c:	465b      	mov	r3, fp
 800d33e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d342:	f7f3 f979 	bl	8000638 <__aeabi_dmul>
 800d346:	4b26      	ldr	r3, [pc, #152]	@ (800d3e0 <_strtod_l+0x598>)
 800d348:	460a      	mov	r2, r1
 800d34a:	400b      	ands	r3, r1
 800d34c:	4925      	ldr	r1, [pc, #148]	@ (800d3e4 <_strtod_l+0x59c>)
 800d34e:	428b      	cmp	r3, r1
 800d350:	4682      	mov	sl, r0
 800d352:	d898      	bhi.n	800d286 <_strtod_l+0x43e>
 800d354:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d358:	428b      	cmp	r3, r1
 800d35a:	bf86      	itte	hi
 800d35c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d3e8 <_strtod_l+0x5a0>
 800d360:	f04f 3aff 	movhi.w	sl, #4294967295
 800d364:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d368:	2300      	movs	r3, #0
 800d36a:	9308      	str	r3, [sp, #32]
 800d36c:	e076      	b.n	800d45c <_strtod_l+0x614>
 800d36e:	07e2      	lsls	r2, r4, #31
 800d370:	d504      	bpl.n	800d37c <_strtod_l+0x534>
 800d372:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d376:	f7f3 f95f 	bl	8000638 <__aeabi_dmul>
 800d37a:	2301      	movs	r3, #1
 800d37c:	3601      	adds	r6, #1
 800d37e:	1064      	asrs	r4, r4, #1
 800d380:	3708      	adds	r7, #8
 800d382:	e7d0      	b.n	800d326 <_strtod_l+0x4de>
 800d384:	d0f0      	beq.n	800d368 <_strtod_l+0x520>
 800d386:	4264      	negs	r4, r4
 800d388:	f014 020f 	ands.w	r2, r4, #15
 800d38c:	d00a      	beq.n	800d3a4 <_strtod_l+0x55c>
 800d38e:	4b12      	ldr	r3, [pc, #72]	@ (800d3d8 <_strtod_l+0x590>)
 800d390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d394:	4650      	mov	r0, sl
 800d396:	4659      	mov	r1, fp
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	f7f3 fa76 	bl	800088c <__aeabi_ddiv>
 800d3a0:	4682      	mov	sl, r0
 800d3a2:	468b      	mov	fp, r1
 800d3a4:	1124      	asrs	r4, r4, #4
 800d3a6:	d0df      	beq.n	800d368 <_strtod_l+0x520>
 800d3a8:	2c1f      	cmp	r4, #31
 800d3aa:	dd1f      	ble.n	800d3ec <_strtod_l+0x5a4>
 800d3ac:	2400      	movs	r4, #0
 800d3ae:	46a0      	mov	r8, r4
 800d3b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d3b2:	46a1      	mov	r9, r4
 800d3b4:	9a05      	ldr	r2, [sp, #20]
 800d3b6:	2322      	movs	r3, #34	@ 0x22
 800d3b8:	f04f 0a00 	mov.w	sl, #0
 800d3bc:	f04f 0b00 	mov.w	fp, #0
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	e76b      	b.n	800d29c <_strtod_l+0x454>
 800d3c4:	080104b9 	.word	0x080104b9
 800d3c8:	08010780 	.word	0x08010780
 800d3cc:	080104b1 	.word	0x080104b1
 800d3d0:	080104e8 	.word	0x080104e8
 800d3d4:	08010621 	.word	0x08010621
 800d3d8:	080106b8 	.word	0x080106b8
 800d3dc:	08010690 	.word	0x08010690
 800d3e0:	7ff00000 	.word	0x7ff00000
 800d3e4:	7ca00000 	.word	0x7ca00000
 800d3e8:	7fefffff 	.word	0x7fefffff
 800d3ec:	f014 0310 	ands.w	r3, r4, #16
 800d3f0:	bf18      	it	ne
 800d3f2:	236a      	movne	r3, #106	@ 0x6a
 800d3f4:	4ea9      	ldr	r6, [pc, #676]	@ (800d69c <_strtod_l+0x854>)
 800d3f6:	9308      	str	r3, [sp, #32]
 800d3f8:	4650      	mov	r0, sl
 800d3fa:	4659      	mov	r1, fp
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	07e7      	lsls	r7, r4, #31
 800d400:	d504      	bpl.n	800d40c <_strtod_l+0x5c4>
 800d402:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d406:	f7f3 f917 	bl	8000638 <__aeabi_dmul>
 800d40a:	2301      	movs	r3, #1
 800d40c:	1064      	asrs	r4, r4, #1
 800d40e:	f106 0608 	add.w	r6, r6, #8
 800d412:	d1f4      	bne.n	800d3fe <_strtod_l+0x5b6>
 800d414:	b10b      	cbz	r3, 800d41a <_strtod_l+0x5d2>
 800d416:	4682      	mov	sl, r0
 800d418:	468b      	mov	fp, r1
 800d41a:	9b08      	ldr	r3, [sp, #32]
 800d41c:	b1b3      	cbz	r3, 800d44c <_strtod_l+0x604>
 800d41e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d422:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d426:	2b00      	cmp	r3, #0
 800d428:	4659      	mov	r1, fp
 800d42a:	dd0f      	ble.n	800d44c <_strtod_l+0x604>
 800d42c:	2b1f      	cmp	r3, #31
 800d42e:	dd56      	ble.n	800d4de <_strtod_l+0x696>
 800d430:	2b34      	cmp	r3, #52	@ 0x34
 800d432:	bfde      	ittt	le
 800d434:	f04f 33ff 	movle.w	r3, #4294967295
 800d438:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d43c:	4093      	lslle	r3, r2
 800d43e:	f04f 0a00 	mov.w	sl, #0
 800d442:	bfcc      	ite	gt
 800d444:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d448:	ea03 0b01 	andle.w	fp, r3, r1
 800d44c:	2200      	movs	r2, #0
 800d44e:	2300      	movs	r3, #0
 800d450:	4650      	mov	r0, sl
 800d452:	4659      	mov	r1, fp
 800d454:	f7f3 fb58 	bl	8000b08 <__aeabi_dcmpeq>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d1a7      	bne.n	800d3ac <_strtod_l+0x564>
 800d45c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d462:	9805      	ldr	r0, [sp, #20]
 800d464:	462b      	mov	r3, r5
 800d466:	464a      	mov	r2, r9
 800d468:	f7ff f8ce 	bl	800c608 <__s2b>
 800d46c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d46e:	2800      	cmp	r0, #0
 800d470:	f43f af09 	beq.w	800d286 <_strtod_l+0x43e>
 800d474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d476:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d478:	2a00      	cmp	r2, #0
 800d47a:	eba3 0308 	sub.w	r3, r3, r8
 800d47e:	bfa8      	it	ge
 800d480:	2300      	movge	r3, #0
 800d482:	9312      	str	r3, [sp, #72]	@ 0x48
 800d484:	2400      	movs	r4, #0
 800d486:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d48a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d48c:	46a0      	mov	r8, r4
 800d48e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d490:	9805      	ldr	r0, [sp, #20]
 800d492:	6859      	ldr	r1, [r3, #4]
 800d494:	f7ff f810 	bl	800c4b8 <_Balloc>
 800d498:	4681      	mov	r9, r0
 800d49a:	2800      	cmp	r0, #0
 800d49c:	f43f aef7 	beq.w	800d28e <_strtod_l+0x446>
 800d4a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4a2:	691a      	ldr	r2, [r3, #16]
 800d4a4:	3202      	adds	r2, #2
 800d4a6:	f103 010c 	add.w	r1, r3, #12
 800d4aa:	0092      	lsls	r2, r2, #2
 800d4ac:	300c      	adds	r0, #12
 800d4ae:	f7fe f896 	bl	800b5de <memcpy>
 800d4b2:	ec4b ab10 	vmov	d0, sl, fp
 800d4b6:	9805      	ldr	r0, [sp, #20]
 800d4b8:	aa1c      	add	r2, sp, #112	@ 0x70
 800d4ba:	a91b      	add	r1, sp, #108	@ 0x6c
 800d4bc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d4c0:	f7ff fbd6 	bl	800cc70 <__d2b>
 800d4c4:	901a      	str	r0, [sp, #104]	@ 0x68
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f43f aee1 	beq.w	800d28e <_strtod_l+0x446>
 800d4cc:	9805      	ldr	r0, [sp, #20]
 800d4ce:	2101      	movs	r1, #1
 800d4d0:	f7ff f930 	bl	800c734 <__i2b>
 800d4d4:	4680      	mov	r8, r0
 800d4d6:	b948      	cbnz	r0, 800d4ec <_strtod_l+0x6a4>
 800d4d8:	f04f 0800 	mov.w	r8, #0
 800d4dc:	e6d7      	b.n	800d28e <_strtod_l+0x446>
 800d4de:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e6:	ea03 0a0a 	and.w	sl, r3, sl
 800d4ea:	e7af      	b.n	800d44c <_strtod_l+0x604>
 800d4ec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d4ee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d4f0:	2d00      	cmp	r5, #0
 800d4f2:	bfab      	itete	ge
 800d4f4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d4f6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d4f8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d4fa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d4fc:	bfac      	ite	ge
 800d4fe:	18ef      	addge	r7, r5, r3
 800d500:	1b5e      	sublt	r6, r3, r5
 800d502:	9b08      	ldr	r3, [sp, #32]
 800d504:	1aed      	subs	r5, r5, r3
 800d506:	4415      	add	r5, r2
 800d508:	4b65      	ldr	r3, [pc, #404]	@ (800d6a0 <_strtod_l+0x858>)
 800d50a:	3d01      	subs	r5, #1
 800d50c:	429d      	cmp	r5, r3
 800d50e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d512:	da50      	bge.n	800d5b6 <_strtod_l+0x76e>
 800d514:	1b5b      	subs	r3, r3, r5
 800d516:	2b1f      	cmp	r3, #31
 800d518:	eba2 0203 	sub.w	r2, r2, r3
 800d51c:	f04f 0101 	mov.w	r1, #1
 800d520:	dc3d      	bgt.n	800d59e <_strtod_l+0x756>
 800d522:	fa01 f303 	lsl.w	r3, r1, r3
 800d526:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d528:	2300      	movs	r3, #0
 800d52a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d52c:	18bd      	adds	r5, r7, r2
 800d52e:	9b08      	ldr	r3, [sp, #32]
 800d530:	42af      	cmp	r7, r5
 800d532:	4416      	add	r6, r2
 800d534:	441e      	add	r6, r3
 800d536:	463b      	mov	r3, r7
 800d538:	bfa8      	it	ge
 800d53a:	462b      	movge	r3, r5
 800d53c:	42b3      	cmp	r3, r6
 800d53e:	bfa8      	it	ge
 800d540:	4633      	movge	r3, r6
 800d542:	2b00      	cmp	r3, #0
 800d544:	bfc2      	ittt	gt
 800d546:	1aed      	subgt	r5, r5, r3
 800d548:	1af6      	subgt	r6, r6, r3
 800d54a:	1aff      	subgt	r7, r7, r3
 800d54c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d54e:	2b00      	cmp	r3, #0
 800d550:	dd16      	ble.n	800d580 <_strtod_l+0x738>
 800d552:	4641      	mov	r1, r8
 800d554:	9805      	ldr	r0, [sp, #20]
 800d556:	461a      	mov	r2, r3
 800d558:	f7ff f9a4 	bl	800c8a4 <__pow5mult>
 800d55c:	4680      	mov	r8, r0
 800d55e:	2800      	cmp	r0, #0
 800d560:	d0ba      	beq.n	800d4d8 <_strtod_l+0x690>
 800d562:	4601      	mov	r1, r0
 800d564:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d566:	9805      	ldr	r0, [sp, #20]
 800d568:	f7ff f8fa 	bl	800c760 <__multiply>
 800d56c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d56e:	2800      	cmp	r0, #0
 800d570:	f43f ae8d 	beq.w	800d28e <_strtod_l+0x446>
 800d574:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d576:	9805      	ldr	r0, [sp, #20]
 800d578:	f7fe ffde 	bl	800c538 <_Bfree>
 800d57c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d57e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d580:	2d00      	cmp	r5, #0
 800d582:	dc1d      	bgt.n	800d5c0 <_strtod_l+0x778>
 800d584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d586:	2b00      	cmp	r3, #0
 800d588:	dd23      	ble.n	800d5d2 <_strtod_l+0x78a>
 800d58a:	4649      	mov	r1, r9
 800d58c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d58e:	9805      	ldr	r0, [sp, #20]
 800d590:	f7ff f988 	bl	800c8a4 <__pow5mult>
 800d594:	4681      	mov	r9, r0
 800d596:	b9e0      	cbnz	r0, 800d5d2 <_strtod_l+0x78a>
 800d598:	f04f 0900 	mov.w	r9, #0
 800d59c:	e677      	b.n	800d28e <_strtod_l+0x446>
 800d59e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d5a2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d5a6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d5aa:	35e2      	adds	r5, #226	@ 0xe2
 800d5ac:	fa01 f305 	lsl.w	r3, r1, r5
 800d5b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d5b4:	e7ba      	b.n	800d52c <_strtod_l+0x6e4>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d5be:	e7b5      	b.n	800d52c <_strtod_l+0x6e4>
 800d5c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5c2:	9805      	ldr	r0, [sp, #20]
 800d5c4:	462a      	mov	r2, r5
 800d5c6:	f7ff f9c7 	bl	800c958 <__lshift>
 800d5ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d1d9      	bne.n	800d584 <_strtod_l+0x73c>
 800d5d0:	e65d      	b.n	800d28e <_strtod_l+0x446>
 800d5d2:	2e00      	cmp	r6, #0
 800d5d4:	dd07      	ble.n	800d5e6 <_strtod_l+0x79e>
 800d5d6:	4649      	mov	r1, r9
 800d5d8:	9805      	ldr	r0, [sp, #20]
 800d5da:	4632      	mov	r2, r6
 800d5dc:	f7ff f9bc 	bl	800c958 <__lshift>
 800d5e0:	4681      	mov	r9, r0
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d0d8      	beq.n	800d598 <_strtod_l+0x750>
 800d5e6:	2f00      	cmp	r7, #0
 800d5e8:	dd08      	ble.n	800d5fc <_strtod_l+0x7b4>
 800d5ea:	4641      	mov	r1, r8
 800d5ec:	9805      	ldr	r0, [sp, #20]
 800d5ee:	463a      	mov	r2, r7
 800d5f0:	f7ff f9b2 	bl	800c958 <__lshift>
 800d5f4:	4680      	mov	r8, r0
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	f43f ae49 	beq.w	800d28e <_strtod_l+0x446>
 800d5fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5fe:	9805      	ldr	r0, [sp, #20]
 800d600:	464a      	mov	r2, r9
 800d602:	f7ff fa31 	bl	800ca68 <__mdiff>
 800d606:	4604      	mov	r4, r0
 800d608:	2800      	cmp	r0, #0
 800d60a:	f43f ae40 	beq.w	800d28e <_strtod_l+0x446>
 800d60e:	68c3      	ldr	r3, [r0, #12]
 800d610:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d612:	2300      	movs	r3, #0
 800d614:	60c3      	str	r3, [r0, #12]
 800d616:	4641      	mov	r1, r8
 800d618:	f7ff fa0a 	bl	800ca30 <__mcmp>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	da45      	bge.n	800d6ac <_strtod_l+0x864>
 800d620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d622:	ea53 030a 	orrs.w	r3, r3, sl
 800d626:	d16b      	bne.n	800d700 <_strtod_l+0x8b8>
 800d628:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d167      	bne.n	800d700 <_strtod_l+0x8b8>
 800d630:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d634:	0d1b      	lsrs	r3, r3, #20
 800d636:	051b      	lsls	r3, r3, #20
 800d638:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d63c:	d960      	bls.n	800d700 <_strtod_l+0x8b8>
 800d63e:	6963      	ldr	r3, [r4, #20]
 800d640:	b913      	cbnz	r3, 800d648 <_strtod_l+0x800>
 800d642:	6923      	ldr	r3, [r4, #16]
 800d644:	2b01      	cmp	r3, #1
 800d646:	dd5b      	ble.n	800d700 <_strtod_l+0x8b8>
 800d648:	4621      	mov	r1, r4
 800d64a:	2201      	movs	r2, #1
 800d64c:	9805      	ldr	r0, [sp, #20]
 800d64e:	f7ff f983 	bl	800c958 <__lshift>
 800d652:	4641      	mov	r1, r8
 800d654:	4604      	mov	r4, r0
 800d656:	f7ff f9eb 	bl	800ca30 <__mcmp>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	dd50      	ble.n	800d700 <_strtod_l+0x8b8>
 800d65e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d662:	9a08      	ldr	r2, [sp, #32]
 800d664:	0d1b      	lsrs	r3, r3, #20
 800d666:	051b      	lsls	r3, r3, #20
 800d668:	2a00      	cmp	r2, #0
 800d66a:	d06a      	beq.n	800d742 <_strtod_l+0x8fa>
 800d66c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d670:	d867      	bhi.n	800d742 <_strtod_l+0x8fa>
 800d672:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d676:	f67f ae9d 	bls.w	800d3b4 <_strtod_l+0x56c>
 800d67a:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a4 <_strtod_l+0x85c>)
 800d67c:	4650      	mov	r0, sl
 800d67e:	4659      	mov	r1, fp
 800d680:	2200      	movs	r2, #0
 800d682:	f7f2 ffd9 	bl	8000638 <__aeabi_dmul>
 800d686:	4b08      	ldr	r3, [pc, #32]	@ (800d6a8 <_strtod_l+0x860>)
 800d688:	400b      	ands	r3, r1
 800d68a:	4682      	mov	sl, r0
 800d68c:	468b      	mov	fp, r1
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f47f ae08 	bne.w	800d2a4 <_strtod_l+0x45c>
 800d694:	9a05      	ldr	r2, [sp, #20]
 800d696:	2322      	movs	r3, #34	@ 0x22
 800d698:	6013      	str	r3, [r2, #0]
 800d69a:	e603      	b.n	800d2a4 <_strtod_l+0x45c>
 800d69c:	080107a8 	.word	0x080107a8
 800d6a0:	fffffc02 	.word	0xfffffc02
 800d6a4:	39500000 	.word	0x39500000
 800d6a8:	7ff00000 	.word	0x7ff00000
 800d6ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d6b0:	d165      	bne.n	800d77e <_strtod_l+0x936>
 800d6b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d6b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6b8:	b35a      	cbz	r2, 800d712 <_strtod_l+0x8ca>
 800d6ba:	4a9f      	ldr	r2, [pc, #636]	@ (800d938 <_strtod_l+0xaf0>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d12b      	bne.n	800d718 <_strtod_l+0x8d0>
 800d6c0:	9b08      	ldr	r3, [sp, #32]
 800d6c2:	4651      	mov	r1, sl
 800d6c4:	b303      	cbz	r3, 800d708 <_strtod_l+0x8c0>
 800d6c6:	4b9d      	ldr	r3, [pc, #628]	@ (800d93c <_strtod_l+0xaf4>)
 800d6c8:	465a      	mov	r2, fp
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d4:	d81b      	bhi.n	800d70e <_strtod_l+0x8c6>
 800d6d6:	0d1b      	lsrs	r3, r3, #20
 800d6d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e0:	4299      	cmp	r1, r3
 800d6e2:	d119      	bne.n	800d718 <_strtod_l+0x8d0>
 800d6e4:	4b96      	ldr	r3, [pc, #600]	@ (800d940 <_strtod_l+0xaf8>)
 800d6e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d102      	bne.n	800d6f2 <_strtod_l+0x8aa>
 800d6ec:	3101      	adds	r1, #1
 800d6ee:	f43f adce 	beq.w	800d28e <_strtod_l+0x446>
 800d6f2:	4b92      	ldr	r3, [pc, #584]	@ (800d93c <_strtod_l+0xaf4>)
 800d6f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6f6:	401a      	ands	r2, r3
 800d6f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d6fc:	f04f 0a00 	mov.w	sl, #0
 800d700:	9b08      	ldr	r3, [sp, #32]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1b9      	bne.n	800d67a <_strtod_l+0x832>
 800d706:	e5cd      	b.n	800d2a4 <_strtod_l+0x45c>
 800d708:	f04f 33ff 	mov.w	r3, #4294967295
 800d70c:	e7e8      	b.n	800d6e0 <_strtod_l+0x898>
 800d70e:	4613      	mov	r3, r2
 800d710:	e7e6      	b.n	800d6e0 <_strtod_l+0x898>
 800d712:	ea53 030a 	orrs.w	r3, r3, sl
 800d716:	d0a2      	beq.n	800d65e <_strtod_l+0x816>
 800d718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d71a:	b1db      	cbz	r3, 800d754 <_strtod_l+0x90c>
 800d71c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d71e:	4213      	tst	r3, r2
 800d720:	d0ee      	beq.n	800d700 <_strtod_l+0x8b8>
 800d722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d724:	9a08      	ldr	r2, [sp, #32]
 800d726:	4650      	mov	r0, sl
 800d728:	4659      	mov	r1, fp
 800d72a:	b1bb      	cbz	r3, 800d75c <_strtod_l+0x914>
 800d72c:	f7ff fb6e 	bl	800ce0c <sulp>
 800d730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d734:	ec53 2b10 	vmov	r2, r3, d0
 800d738:	f7f2 fdc8 	bl	80002cc <__adddf3>
 800d73c:	4682      	mov	sl, r0
 800d73e:	468b      	mov	fp, r1
 800d740:	e7de      	b.n	800d700 <_strtod_l+0x8b8>
 800d742:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d746:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d74a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d74e:	f04f 3aff 	mov.w	sl, #4294967295
 800d752:	e7d5      	b.n	800d700 <_strtod_l+0x8b8>
 800d754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d756:	ea13 0f0a 	tst.w	r3, sl
 800d75a:	e7e1      	b.n	800d720 <_strtod_l+0x8d8>
 800d75c:	f7ff fb56 	bl	800ce0c <sulp>
 800d760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d764:	ec53 2b10 	vmov	r2, r3, d0
 800d768:	f7f2 fdae 	bl	80002c8 <__aeabi_dsub>
 800d76c:	2200      	movs	r2, #0
 800d76e:	2300      	movs	r3, #0
 800d770:	4682      	mov	sl, r0
 800d772:	468b      	mov	fp, r1
 800d774:	f7f3 f9c8 	bl	8000b08 <__aeabi_dcmpeq>
 800d778:	2800      	cmp	r0, #0
 800d77a:	d0c1      	beq.n	800d700 <_strtod_l+0x8b8>
 800d77c:	e61a      	b.n	800d3b4 <_strtod_l+0x56c>
 800d77e:	4641      	mov	r1, r8
 800d780:	4620      	mov	r0, r4
 800d782:	f7ff facd 	bl	800cd20 <__ratio>
 800d786:	ec57 6b10 	vmov	r6, r7, d0
 800d78a:	2200      	movs	r2, #0
 800d78c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d790:	4630      	mov	r0, r6
 800d792:	4639      	mov	r1, r7
 800d794:	f7f3 f9cc 	bl	8000b30 <__aeabi_dcmple>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d06f      	beq.n	800d87c <_strtod_l+0xa34>
 800d79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d17a      	bne.n	800d898 <_strtod_l+0xa50>
 800d7a2:	f1ba 0f00 	cmp.w	sl, #0
 800d7a6:	d158      	bne.n	800d85a <_strtod_l+0xa12>
 800d7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d15a      	bne.n	800d868 <_strtod_l+0xa20>
 800d7b2:	4b64      	ldr	r3, [pc, #400]	@ (800d944 <_strtod_l+0xafc>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	f7f3 f9af 	bl	8000b1c <__aeabi_dcmplt>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d159      	bne.n	800d876 <_strtod_l+0xa2e>
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	4639      	mov	r1, r7
 800d7c6:	4b60      	ldr	r3, [pc, #384]	@ (800d948 <_strtod_l+0xb00>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f7f2 ff35 	bl	8000638 <__aeabi_dmul>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	460f      	mov	r7, r1
 800d7d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d7d6:	9606      	str	r6, [sp, #24]
 800d7d8:	9307      	str	r3, [sp, #28]
 800d7da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7de:	4d57      	ldr	r5, [pc, #348]	@ (800d93c <_strtod_l+0xaf4>)
 800d7e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7e6:	401d      	ands	r5, r3
 800d7e8:	4b58      	ldr	r3, [pc, #352]	@ (800d94c <_strtod_l+0xb04>)
 800d7ea:	429d      	cmp	r5, r3
 800d7ec:	f040 80b2 	bne.w	800d954 <_strtod_l+0xb0c>
 800d7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d7f6:	ec4b ab10 	vmov	d0, sl, fp
 800d7fa:	f7ff f9c9 	bl	800cb90 <__ulp>
 800d7fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d802:	ec51 0b10 	vmov	r0, r1, d0
 800d806:	f7f2 ff17 	bl	8000638 <__aeabi_dmul>
 800d80a:	4652      	mov	r2, sl
 800d80c:	465b      	mov	r3, fp
 800d80e:	f7f2 fd5d 	bl	80002cc <__adddf3>
 800d812:	460b      	mov	r3, r1
 800d814:	4949      	ldr	r1, [pc, #292]	@ (800d93c <_strtod_l+0xaf4>)
 800d816:	4a4e      	ldr	r2, [pc, #312]	@ (800d950 <_strtod_l+0xb08>)
 800d818:	4019      	ands	r1, r3
 800d81a:	4291      	cmp	r1, r2
 800d81c:	4682      	mov	sl, r0
 800d81e:	d942      	bls.n	800d8a6 <_strtod_l+0xa5e>
 800d820:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d822:	4b47      	ldr	r3, [pc, #284]	@ (800d940 <_strtod_l+0xaf8>)
 800d824:	429a      	cmp	r2, r3
 800d826:	d103      	bne.n	800d830 <_strtod_l+0x9e8>
 800d828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d82a:	3301      	adds	r3, #1
 800d82c:	f43f ad2f 	beq.w	800d28e <_strtod_l+0x446>
 800d830:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d940 <_strtod_l+0xaf8>
 800d834:	f04f 3aff 	mov.w	sl, #4294967295
 800d838:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d83a:	9805      	ldr	r0, [sp, #20]
 800d83c:	f7fe fe7c 	bl	800c538 <_Bfree>
 800d840:	9805      	ldr	r0, [sp, #20]
 800d842:	4649      	mov	r1, r9
 800d844:	f7fe fe78 	bl	800c538 <_Bfree>
 800d848:	9805      	ldr	r0, [sp, #20]
 800d84a:	4641      	mov	r1, r8
 800d84c:	f7fe fe74 	bl	800c538 <_Bfree>
 800d850:	9805      	ldr	r0, [sp, #20]
 800d852:	4621      	mov	r1, r4
 800d854:	f7fe fe70 	bl	800c538 <_Bfree>
 800d858:	e619      	b.n	800d48e <_strtod_l+0x646>
 800d85a:	f1ba 0f01 	cmp.w	sl, #1
 800d85e:	d103      	bne.n	800d868 <_strtod_l+0xa20>
 800d860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d862:	2b00      	cmp	r3, #0
 800d864:	f43f ada6 	beq.w	800d3b4 <_strtod_l+0x56c>
 800d868:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d918 <_strtod_l+0xad0>
 800d86c:	4f35      	ldr	r7, [pc, #212]	@ (800d944 <_strtod_l+0xafc>)
 800d86e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d872:	2600      	movs	r6, #0
 800d874:	e7b1      	b.n	800d7da <_strtod_l+0x992>
 800d876:	4f34      	ldr	r7, [pc, #208]	@ (800d948 <_strtod_l+0xb00>)
 800d878:	2600      	movs	r6, #0
 800d87a:	e7aa      	b.n	800d7d2 <_strtod_l+0x98a>
 800d87c:	4b32      	ldr	r3, [pc, #200]	@ (800d948 <_strtod_l+0xb00>)
 800d87e:	4630      	mov	r0, r6
 800d880:	4639      	mov	r1, r7
 800d882:	2200      	movs	r2, #0
 800d884:	f7f2 fed8 	bl	8000638 <__aeabi_dmul>
 800d888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d88a:	4606      	mov	r6, r0
 800d88c:	460f      	mov	r7, r1
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d09f      	beq.n	800d7d2 <_strtod_l+0x98a>
 800d892:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d896:	e7a0      	b.n	800d7da <_strtod_l+0x992>
 800d898:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d920 <_strtod_l+0xad8>
 800d89c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8a0:	ec57 6b17 	vmov	r6, r7, d7
 800d8a4:	e799      	b.n	800d7da <_strtod_l+0x992>
 800d8a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d8aa:	9b08      	ldr	r3, [sp, #32]
 800d8ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1c1      	bne.n	800d838 <_strtod_l+0x9f0>
 800d8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8b8:	0d1b      	lsrs	r3, r3, #20
 800d8ba:	051b      	lsls	r3, r3, #20
 800d8bc:	429d      	cmp	r5, r3
 800d8be:	d1bb      	bne.n	800d838 <_strtod_l+0x9f0>
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	f7f3 fa18 	bl	8000cf8 <__aeabi_d2lz>
 800d8c8:	f7f2 fe88 	bl	80005dc <__aeabi_l2d>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	4639      	mov	r1, r7
 800d8d4:	f7f2 fcf8 	bl	80002c8 <__aeabi_dsub>
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4602      	mov	r2, r0
 800d8dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d8e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8e6:	ea46 060a 	orr.w	r6, r6, sl
 800d8ea:	431e      	orrs	r6, r3
 800d8ec:	d06f      	beq.n	800d9ce <_strtod_l+0xb86>
 800d8ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800d928 <_strtod_l+0xae0>)
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	f7f3 f912 	bl	8000b1c <__aeabi_dcmplt>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	f47f acd3 	bne.w	800d2a4 <_strtod_l+0x45c>
 800d8fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800d930 <_strtod_l+0xae8>)
 800d900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d908:	f7f3 f926 	bl	8000b58 <__aeabi_dcmpgt>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d093      	beq.n	800d838 <_strtod_l+0x9f0>
 800d910:	e4c8      	b.n	800d2a4 <_strtod_l+0x45c>
 800d912:	bf00      	nop
 800d914:	f3af 8000 	nop.w
 800d918:	00000000 	.word	0x00000000
 800d91c:	bff00000 	.word	0xbff00000
 800d920:	00000000 	.word	0x00000000
 800d924:	3ff00000 	.word	0x3ff00000
 800d928:	94a03595 	.word	0x94a03595
 800d92c:	3fdfffff 	.word	0x3fdfffff
 800d930:	35afe535 	.word	0x35afe535
 800d934:	3fe00000 	.word	0x3fe00000
 800d938:	000fffff 	.word	0x000fffff
 800d93c:	7ff00000 	.word	0x7ff00000
 800d940:	7fefffff 	.word	0x7fefffff
 800d944:	3ff00000 	.word	0x3ff00000
 800d948:	3fe00000 	.word	0x3fe00000
 800d94c:	7fe00000 	.word	0x7fe00000
 800d950:	7c9fffff 	.word	0x7c9fffff
 800d954:	9b08      	ldr	r3, [sp, #32]
 800d956:	b323      	cbz	r3, 800d9a2 <_strtod_l+0xb5a>
 800d958:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d95c:	d821      	bhi.n	800d9a2 <_strtod_l+0xb5a>
 800d95e:	a328      	add	r3, pc, #160	@ (adr r3, 800da00 <_strtod_l+0xbb8>)
 800d960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d964:	4630      	mov	r0, r6
 800d966:	4639      	mov	r1, r7
 800d968:	f7f3 f8e2 	bl	8000b30 <__aeabi_dcmple>
 800d96c:	b1a0      	cbz	r0, 800d998 <_strtod_l+0xb50>
 800d96e:	4639      	mov	r1, r7
 800d970:	4630      	mov	r0, r6
 800d972:	f7f3 f939 	bl	8000be8 <__aeabi_d2uiz>
 800d976:	2801      	cmp	r0, #1
 800d978:	bf38      	it	cc
 800d97a:	2001      	movcc	r0, #1
 800d97c:	f7f2 fde2 	bl	8000544 <__aeabi_ui2d>
 800d980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d982:	4606      	mov	r6, r0
 800d984:	460f      	mov	r7, r1
 800d986:	b9fb      	cbnz	r3, 800d9c8 <_strtod_l+0xb80>
 800d988:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d98c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d98e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d990:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d994:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d998:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d99a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d99e:	1b5b      	subs	r3, r3, r5
 800d9a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d9a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d9a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d9aa:	f7ff f8f1 	bl	800cb90 <__ulp>
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	ec53 2b10 	vmov	r2, r3, d0
 800d9b4:	4659      	mov	r1, fp
 800d9b6:	f7f2 fe3f 	bl	8000638 <__aeabi_dmul>
 800d9ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d9be:	f7f2 fc85 	bl	80002cc <__adddf3>
 800d9c2:	4682      	mov	sl, r0
 800d9c4:	468b      	mov	fp, r1
 800d9c6:	e770      	b.n	800d8aa <_strtod_l+0xa62>
 800d9c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d9cc:	e7e0      	b.n	800d990 <_strtod_l+0xb48>
 800d9ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800da08 <_strtod_l+0xbc0>)
 800d9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d4:	f7f3 f8a2 	bl	8000b1c <__aeabi_dcmplt>
 800d9d8:	e798      	b.n	800d90c <_strtod_l+0xac4>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800d9de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d9e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9e2:	6013      	str	r3, [r2, #0]
 800d9e4:	f7ff ba6d 	b.w	800cec2 <_strtod_l+0x7a>
 800d9e8:	2a65      	cmp	r2, #101	@ 0x65
 800d9ea:	f43f ab68 	beq.w	800d0be <_strtod_l+0x276>
 800d9ee:	2a45      	cmp	r2, #69	@ 0x45
 800d9f0:	f43f ab65 	beq.w	800d0be <_strtod_l+0x276>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	f7ff bba0 	b.w	800d13a <_strtod_l+0x2f2>
 800d9fa:	bf00      	nop
 800d9fc:	f3af 8000 	nop.w
 800da00:	ffc00000 	.word	0xffc00000
 800da04:	41dfffff 	.word	0x41dfffff
 800da08:	94a03595 	.word	0x94a03595
 800da0c:	3fcfffff 	.word	0x3fcfffff

0800da10 <_strtod_r>:
 800da10:	4b01      	ldr	r3, [pc, #4]	@ (800da18 <_strtod_r+0x8>)
 800da12:	f7ff ba19 	b.w	800ce48 <_strtod_l>
 800da16:	bf00      	nop
 800da18:	20000074 	.word	0x20000074

0800da1c <_strtol_l.isra.0>:
 800da1c:	2b24      	cmp	r3, #36	@ 0x24
 800da1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da22:	4686      	mov	lr, r0
 800da24:	4690      	mov	r8, r2
 800da26:	d801      	bhi.n	800da2c <_strtol_l.isra.0+0x10>
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d106      	bne.n	800da3a <_strtol_l.isra.0+0x1e>
 800da2c:	f7fd fdaa 	bl	800b584 <__errno>
 800da30:	2316      	movs	r3, #22
 800da32:	6003      	str	r3, [r0, #0]
 800da34:	2000      	movs	r0, #0
 800da36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3a:	4834      	ldr	r0, [pc, #208]	@ (800db0c <_strtol_l.isra.0+0xf0>)
 800da3c:	460d      	mov	r5, r1
 800da3e:	462a      	mov	r2, r5
 800da40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da44:	5d06      	ldrb	r6, [r0, r4]
 800da46:	f016 0608 	ands.w	r6, r6, #8
 800da4a:	d1f8      	bne.n	800da3e <_strtol_l.isra.0+0x22>
 800da4c:	2c2d      	cmp	r4, #45	@ 0x2d
 800da4e:	d110      	bne.n	800da72 <_strtol_l.isra.0+0x56>
 800da50:	782c      	ldrb	r4, [r5, #0]
 800da52:	2601      	movs	r6, #1
 800da54:	1c95      	adds	r5, r2, #2
 800da56:	f033 0210 	bics.w	r2, r3, #16
 800da5a:	d115      	bne.n	800da88 <_strtol_l.isra.0+0x6c>
 800da5c:	2c30      	cmp	r4, #48	@ 0x30
 800da5e:	d10d      	bne.n	800da7c <_strtol_l.isra.0+0x60>
 800da60:	782a      	ldrb	r2, [r5, #0]
 800da62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800da66:	2a58      	cmp	r2, #88	@ 0x58
 800da68:	d108      	bne.n	800da7c <_strtol_l.isra.0+0x60>
 800da6a:	786c      	ldrb	r4, [r5, #1]
 800da6c:	3502      	adds	r5, #2
 800da6e:	2310      	movs	r3, #16
 800da70:	e00a      	b.n	800da88 <_strtol_l.isra.0+0x6c>
 800da72:	2c2b      	cmp	r4, #43	@ 0x2b
 800da74:	bf04      	itt	eq
 800da76:	782c      	ldrbeq	r4, [r5, #0]
 800da78:	1c95      	addeq	r5, r2, #2
 800da7a:	e7ec      	b.n	800da56 <_strtol_l.isra.0+0x3a>
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1f6      	bne.n	800da6e <_strtol_l.isra.0+0x52>
 800da80:	2c30      	cmp	r4, #48	@ 0x30
 800da82:	bf14      	ite	ne
 800da84:	230a      	movne	r3, #10
 800da86:	2308      	moveq	r3, #8
 800da88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800da8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800da90:	2200      	movs	r2, #0
 800da92:	fbbc f9f3 	udiv	r9, ip, r3
 800da96:	4610      	mov	r0, r2
 800da98:	fb03 ca19 	mls	sl, r3, r9, ip
 800da9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800daa0:	2f09      	cmp	r7, #9
 800daa2:	d80f      	bhi.n	800dac4 <_strtol_l.isra.0+0xa8>
 800daa4:	463c      	mov	r4, r7
 800daa6:	42a3      	cmp	r3, r4
 800daa8:	dd1b      	ble.n	800dae2 <_strtol_l.isra.0+0xc6>
 800daaa:	1c57      	adds	r7, r2, #1
 800daac:	d007      	beq.n	800dabe <_strtol_l.isra.0+0xa2>
 800daae:	4581      	cmp	r9, r0
 800dab0:	d314      	bcc.n	800dadc <_strtol_l.isra.0+0xc0>
 800dab2:	d101      	bne.n	800dab8 <_strtol_l.isra.0+0x9c>
 800dab4:	45a2      	cmp	sl, r4
 800dab6:	db11      	blt.n	800dadc <_strtol_l.isra.0+0xc0>
 800dab8:	fb00 4003 	mla	r0, r0, r3, r4
 800dabc:	2201      	movs	r2, #1
 800dabe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dac2:	e7eb      	b.n	800da9c <_strtol_l.isra.0+0x80>
 800dac4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dac8:	2f19      	cmp	r7, #25
 800daca:	d801      	bhi.n	800dad0 <_strtol_l.isra.0+0xb4>
 800dacc:	3c37      	subs	r4, #55	@ 0x37
 800dace:	e7ea      	b.n	800daa6 <_strtol_l.isra.0+0x8a>
 800dad0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dad4:	2f19      	cmp	r7, #25
 800dad6:	d804      	bhi.n	800dae2 <_strtol_l.isra.0+0xc6>
 800dad8:	3c57      	subs	r4, #87	@ 0x57
 800dada:	e7e4      	b.n	800daa6 <_strtol_l.isra.0+0x8a>
 800dadc:	f04f 32ff 	mov.w	r2, #4294967295
 800dae0:	e7ed      	b.n	800dabe <_strtol_l.isra.0+0xa2>
 800dae2:	1c53      	adds	r3, r2, #1
 800dae4:	d108      	bne.n	800daf8 <_strtol_l.isra.0+0xdc>
 800dae6:	2322      	movs	r3, #34	@ 0x22
 800dae8:	f8ce 3000 	str.w	r3, [lr]
 800daec:	4660      	mov	r0, ip
 800daee:	f1b8 0f00 	cmp.w	r8, #0
 800daf2:	d0a0      	beq.n	800da36 <_strtol_l.isra.0+0x1a>
 800daf4:	1e69      	subs	r1, r5, #1
 800daf6:	e006      	b.n	800db06 <_strtol_l.isra.0+0xea>
 800daf8:	b106      	cbz	r6, 800dafc <_strtol_l.isra.0+0xe0>
 800dafa:	4240      	negs	r0, r0
 800dafc:	f1b8 0f00 	cmp.w	r8, #0
 800db00:	d099      	beq.n	800da36 <_strtol_l.isra.0+0x1a>
 800db02:	2a00      	cmp	r2, #0
 800db04:	d1f6      	bne.n	800daf4 <_strtol_l.isra.0+0xd8>
 800db06:	f8c8 1000 	str.w	r1, [r8]
 800db0a:	e794      	b.n	800da36 <_strtol_l.isra.0+0x1a>
 800db0c:	080107d1 	.word	0x080107d1

0800db10 <_strtol_r>:
 800db10:	f7ff bf84 	b.w	800da1c <_strtol_l.isra.0>

0800db14 <__ssputs_r>:
 800db14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db18:	688e      	ldr	r6, [r1, #8]
 800db1a:	461f      	mov	r7, r3
 800db1c:	42be      	cmp	r6, r7
 800db1e:	680b      	ldr	r3, [r1, #0]
 800db20:	4682      	mov	sl, r0
 800db22:	460c      	mov	r4, r1
 800db24:	4690      	mov	r8, r2
 800db26:	d82d      	bhi.n	800db84 <__ssputs_r+0x70>
 800db28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db30:	d026      	beq.n	800db80 <__ssputs_r+0x6c>
 800db32:	6965      	ldr	r5, [r4, #20]
 800db34:	6909      	ldr	r1, [r1, #16]
 800db36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db3a:	eba3 0901 	sub.w	r9, r3, r1
 800db3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db42:	1c7b      	adds	r3, r7, #1
 800db44:	444b      	add	r3, r9
 800db46:	106d      	asrs	r5, r5, #1
 800db48:	429d      	cmp	r5, r3
 800db4a:	bf38      	it	cc
 800db4c:	461d      	movcc	r5, r3
 800db4e:	0553      	lsls	r3, r2, #21
 800db50:	d527      	bpl.n	800dba2 <__ssputs_r+0x8e>
 800db52:	4629      	mov	r1, r5
 800db54:	f7fe fc24 	bl	800c3a0 <_malloc_r>
 800db58:	4606      	mov	r6, r0
 800db5a:	b360      	cbz	r0, 800dbb6 <__ssputs_r+0xa2>
 800db5c:	6921      	ldr	r1, [r4, #16]
 800db5e:	464a      	mov	r2, r9
 800db60:	f7fd fd3d 	bl	800b5de <memcpy>
 800db64:	89a3      	ldrh	r3, [r4, #12]
 800db66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db6e:	81a3      	strh	r3, [r4, #12]
 800db70:	6126      	str	r6, [r4, #16]
 800db72:	6165      	str	r5, [r4, #20]
 800db74:	444e      	add	r6, r9
 800db76:	eba5 0509 	sub.w	r5, r5, r9
 800db7a:	6026      	str	r6, [r4, #0]
 800db7c:	60a5      	str	r5, [r4, #8]
 800db7e:	463e      	mov	r6, r7
 800db80:	42be      	cmp	r6, r7
 800db82:	d900      	bls.n	800db86 <__ssputs_r+0x72>
 800db84:	463e      	mov	r6, r7
 800db86:	6820      	ldr	r0, [r4, #0]
 800db88:	4632      	mov	r2, r6
 800db8a:	4641      	mov	r1, r8
 800db8c:	f000 f9c6 	bl	800df1c <memmove>
 800db90:	68a3      	ldr	r3, [r4, #8]
 800db92:	1b9b      	subs	r3, r3, r6
 800db94:	60a3      	str	r3, [r4, #8]
 800db96:	6823      	ldr	r3, [r4, #0]
 800db98:	4433      	add	r3, r6
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	2000      	movs	r0, #0
 800db9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba2:	462a      	mov	r2, r5
 800dba4:	f000 fd7d 	bl	800e6a2 <_realloc_r>
 800dba8:	4606      	mov	r6, r0
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d1e0      	bne.n	800db70 <__ssputs_r+0x5c>
 800dbae:	6921      	ldr	r1, [r4, #16]
 800dbb0:	4650      	mov	r0, sl
 800dbb2:	f7fe fb81 	bl	800c2b8 <_free_r>
 800dbb6:	230c      	movs	r3, #12
 800dbb8:	f8ca 3000 	str.w	r3, [sl]
 800dbbc:	89a3      	ldrh	r3, [r4, #12]
 800dbbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbc2:	81a3      	strh	r3, [r4, #12]
 800dbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc8:	e7e9      	b.n	800db9e <__ssputs_r+0x8a>
	...

0800dbcc <_svfiprintf_r>:
 800dbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd0:	4698      	mov	r8, r3
 800dbd2:	898b      	ldrh	r3, [r1, #12]
 800dbd4:	061b      	lsls	r3, r3, #24
 800dbd6:	b09d      	sub	sp, #116	@ 0x74
 800dbd8:	4607      	mov	r7, r0
 800dbda:	460d      	mov	r5, r1
 800dbdc:	4614      	mov	r4, r2
 800dbde:	d510      	bpl.n	800dc02 <_svfiprintf_r+0x36>
 800dbe0:	690b      	ldr	r3, [r1, #16]
 800dbe2:	b973      	cbnz	r3, 800dc02 <_svfiprintf_r+0x36>
 800dbe4:	2140      	movs	r1, #64	@ 0x40
 800dbe6:	f7fe fbdb 	bl	800c3a0 <_malloc_r>
 800dbea:	6028      	str	r0, [r5, #0]
 800dbec:	6128      	str	r0, [r5, #16]
 800dbee:	b930      	cbnz	r0, 800dbfe <_svfiprintf_r+0x32>
 800dbf0:	230c      	movs	r3, #12
 800dbf2:	603b      	str	r3, [r7, #0]
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	b01d      	add	sp, #116	@ 0x74
 800dbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfe:	2340      	movs	r3, #64	@ 0x40
 800dc00:	616b      	str	r3, [r5, #20]
 800dc02:	2300      	movs	r3, #0
 800dc04:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc06:	2320      	movs	r3, #32
 800dc08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc10:	2330      	movs	r3, #48	@ 0x30
 800dc12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ddb0 <_svfiprintf_r+0x1e4>
 800dc16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc1a:	f04f 0901 	mov.w	r9, #1
 800dc1e:	4623      	mov	r3, r4
 800dc20:	469a      	mov	sl, r3
 800dc22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc26:	b10a      	cbz	r2, 800dc2c <_svfiprintf_r+0x60>
 800dc28:	2a25      	cmp	r2, #37	@ 0x25
 800dc2a:	d1f9      	bne.n	800dc20 <_svfiprintf_r+0x54>
 800dc2c:	ebba 0b04 	subs.w	fp, sl, r4
 800dc30:	d00b      	beq.n	800dc4a <_svfiprintf_r+0x7e>
 800dc32:	465b      	mov	r3, fp
 800dc34:	4622      	mov	r2, r4
 800dc36:	4629      	mov	r1, r5
 800dc38:	4638      	mov	r0, r7
 800dc3a:	f7ff ff6b 	bl	800db14 <__ssputs_r>
 800dc3e:	3001      	adds	r0, #1
 800dc40:	f000 80a7 	beq.w	800dd92 <_svfiprintf_r+0x1c6>
 800dc44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc46:	445a      	add	r2, fp
 800dc48:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc4a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 809f 	beq.w	800dd92 <_svfiprintf_r+0x1c6>
 800dc54:	2300      	movs	r3, #0
 800dc56:	f04f 32ff 	mov.w	r2, #4294967295
 800dc5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc5e:	f10a 0a01 	add.w	sl, sl, #1
 800dc62:	9304      	str	r3, [sp, #16]
 800dc64:	9307      	str	r3, [sp, #28]
 800dc66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc6c:	4654      	mov	r4, sl
 800dc6e:	2205      	movs	r2, #5
 800dc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc74:	484e      	ldr	r0, [pc, #312]	@ (800ddb0 <_svfiprintf_r+0x1e4>)
 800dc76:	f7f2 facb 	bl	8000210 <memchr>
 800dc7a:	9a04      	ldr	r2, [sp, #16]
 800dc7c:	b9d8      	cbnz	r0, 800dcb6 <_svfiprintf_r+0xea>
 800dc7e:	06d0      	lsls	r0, r2, #27
 800dc80:	bf44      	itt	mi
 800dc82:	2320      	movmi	r3, #32
 800dc84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc88:	0711      	lsls	r1, r2, #28
 800dc8a:	bf44      	itt	mi
 800dc8c:	232b      	movmi	r3, #43	@ 0x2b
 800dc8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc92:	f89a 3000 	ldrb.w	r3, [sl]
 800dc96:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc98:	d015      	beq.n	800dcc6 <_svfiprintf_r+0xfa>
 800dc9a:	9a07      	ldr	r2, [sp, #28]
 800dc9c:	4654      	mov	r4, sl
 800dc9e:	2000      	movs	r0, #0
 800dca0:	f04f 0c0a 	mov.w	ip, #10
 800dca4:	4621      	mov	r1, r4
 800dca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcaa:	3b30      	subs	r3, #48	@ 0x30
 800dcac:	2b09      	cmp	r3, #9
 800dcae:	d94b      	bls.n	800dd48 <_svfiprintf_r+0x17c>
 800dcb0:	b1b0      	cbz	r0, 800dce0 <_svfiprintf_r+0x114>
 800dcb2:	9207      	str	r2, [sp, #28]
 800dcb4:	e014      	b.n	800dce0 <_svfiprintf_r+0x114>
 800dcb6:	eba0 0308 	sub.w	r3, r0, r8
 800dcba:	fa09 f303 	lsl.w	r3, r9, r3
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	9304      	str	r3, [sp, #16]
 800dcc2:	46a2      	mov	sl, r4
 800dcc4:	e7d2      	b.n	800dc6c <_svfiprintf_r+0xa0>
 800dcc6:	9b03      	ldr	r3, [sp, #12]
 800dcc8:	1d19      	adds	r1, r3, #4
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	9103      	str	r1, [sp, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	bfbb      	ittet	lt
 800dcd2:	425b      	neglt	r3, r3
 800dcd4:	f042 0202 	orrlt.w	r2, r2, #2
 800dcd8:	9307      	strge	r3, [sp, #28]
 800dcda:	9307      	strlt	r3, [sp, #28]
 800dcdc:	bfb8      	it	lt
 800dcde:	9204      	strlt	r2, [sp, #16]
 800dce0:	7823      	ldrb	r3, [r4, #0]
 800dce2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dce4:	d10a      	bne.n	800dcfc <_svfiprintf_r+0x130>
 800dce6:	7863      	ldrb	r3, [r4, #1]
 800dce8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcea:	d132      	bne.n	800dd52 <_svfiprintf_r+0x186>
 800dcec:	9b03      	ldr	r3, [sp, #12]
 800dcee:	1d1a      	adds	r2, r3, #4
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	9203      	str	r2, [sp, #12]
 800dcf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcf8:	3402      	adds	r4, #2
 800dcfa:	9305      	str	r3, [sp, #20]
 800dcfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ddc0 <_svfiprintf_r+0x1f4>
 800dd00:	7821      	ldrb	r1, [r4, #0]
 800dd02:	2203      	movs	r2, #3
 800dd04:	4650      	mov	r0, sl
 800dd06:	f7f2 fa83 	bl	8000210 <memchr>
 800dd0a:	b138      	cbz	r0, 800dd1c <_svfiprintf_r+0x150>
 800dd0c:	9b04      	ldr	r3, [sp, #16]
 800dd0e:	eba0 000a 	sub.w	r0, r0, sl
 800dd12:	2240      	movs	r2, #64	@ 0x40
 800dd14:	4082      	lsls	r2, r0
 800dd16:	4313      	orrs	r3, r2
 800dd18:	3401      	adds	r4, #1
 800dd1a:	9304      	str	r3, [sp, #16]
 800dd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd20:	4824      	ldr	r0, [pc, #144]	@ (800ddb4 <_svfiprintf_r+0x1e8>)
 800dd22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd26:	2206      	movs	r2, #6
 800dd28:	f7f2 fa72 	bl	8000210 <memchr>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d036      	beq.n	800dd9e <_svfiprintf_r+0x1d2>
 800dd30:	4b21      	ldr	r3, [pc, #132]	@ (800ddb8 <_svfiprintf_r+0x1ec>)
 800dd32:	bb1b      	cbnz	r3, 800dd7c <_svfiprintf_r+0x1b0>
 800dd34:	9b03      	ldr	r3, [sp, #12]
 800dd36:	3307      	adds	r3, #7
 800dd38:	f023 0307 	bic.w	r3, r3, #7
 800dd3c:	3308      	adds	r3, #8
 800dd3e:	9303      	str	r3, [sp, #12]
 800dd40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd42:	4433      	add	r3, r6
 800dd44:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd46:	e76a      	b.n	800dc1e <_svfiprintf_r+0x52>
 800dd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd4c:	460c      	mov	r4, r1
 800dd4e:	2001      	movs	r0, #1
 800dd50:	e7a8      	b.n	800dca4 <_svfiprintf_r+0xd8>
 800dd52:	2300      	movs	r3, #0
 800dd54:	3401      	adds	r4, #1
 800dd56:	9305      	str	r3, [sp, #20]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	f04f 0c0a 	mov.w	ip, #10
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd64:	3a30      	subs	r2, #48	@ 0x30
 800dd66:	2a09      	cmp	r2, #9
 800dd68:	d903      	bls.n	800dd72 <_svfiprintf_r+0x1a6>
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d0c6      	beq.n	800dcfc <_svfiprintf_r+0x130>
 800dd6e:	9105      	str	r1, [sp, #20]
 800dd70:	e7c4      	b.n	800dcfc <_svfiprintf_r+0x130>
 800dd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd76:	4604      	mov	r4, r0
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e7f0      	b.n	800dd5e <_svfiprintf_r+0x192>
 800dd7c:	ab03      	add	r3, sp, #12
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	462a      	mov	r2, r5
 800dd82:	4b0e      	ldr	r3, [pc, #56]	@ (800ddbc <_svfiprintf_r+0x1f0>)
 800dd84:	a904      	add	r1, sp, #16
 800dd86:	4638      	mov	r0, r7
 800dd88:	f7fc fc4c 	bl	800a624 <_printf_float>
 800dd8c:	1c42      	adds	r2, r0, #1
 800dd8e:	4606      	mov	r6, r0
 800dd90:	d1d6      	bne.n	800dd40 <_svfiprintf_r+0x174>
 800dd92:	89ab      	ldrh	r3, [r5, #12]
 800dd94:	065b      	lsls	r3, r3, #25
 800dd96:	f53f af2d 	bmi.w	800dbf4 <_svfiprintf_r+0x28>
 800dd9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd9c:	e72c      	b.n	800dbf8 <_svfiprintf_r+0x2c>
 800dd9e:	ab03      	add	r3, sp, #12
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	462a      	mov	r2, r5
 800dda4:	4b05      	ldr	r3, [pc, #20]	@ (800ddbc <_svfiprintf_r+0x1f0>)
 800dda6:	a904      	add	r1, sp, #16
 800dda8:	4638      	mov	r0, r7
 800ddaa:	f7fc fed3 	bl	800ab54 <_printf_i>
 800ddae:	e7ed      	b.n	800dd8c <_svfiprintf_r+0x1c0>
 800ddb0:	080105cd 	.word	0x080105cd
 800ddb4:	080105d7 	.word	0x080105d7
 800ddb8:	0800a625 	.word	0x0800a625
 800ddbc:	0800db15 	.word	0x0800db15
 800ddc0:	080105d3 	.word	0x080105d3

0800ddc4 <__sflush_r>:
 800ddc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddcc:	0716      	lsls	r6, r2, #28
 800ddce:	4605      	mov	r5, r0
 800ddd0:	460c      	mov	r4, r1
 800ddd2:	d454      	bmi.n	800de7e <__sflush_r+0xba>
 800ddd4:	684b      	ldr	r3, [r1, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	dc02      	bgt.n	800dde0 <__sflush_r+0x1c>
 800ddda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	dd48      	ble.n	800de72 <__sflush_r+0xae>
 800dde0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dde2:	2e00      	cmp	r6, #0
 800dde4:	d045      	beq.n	800de72 <__sflush_r+0xae>
 800dde6:	2300      	movs	r3, #0
 800dde8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ddec:	682f      	ldr	r7, [r5, #0]
 800ddee:	6a21      	ldr	r1, [r4, #32]
 800ddf0:	602b      	str	r3, [r5, #0]
 800ddf2:	d030      	beq.n	800de56 <__sflush_r+0x92>
 800ddf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ddf6:	89a3      	ldrh	r3, [r4, #12]
 800ddf8:	0759      	lsls	r1, r3, #29
 800ddfa:	d505      	bpl.n	800de08 <__sflush_r+0x44>
 800ddfc:	6863      	ldr	r3, [r4, #4]
 800ddfe:	1ad2      	subs	r2, r2, r3
 800de00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de02:	b10b      	cbz	r3, 800de08 <__sflush_r+0x44>
 800de04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de06:	1ad2      	subs	r2, r2, r3
 800de08:	2300      	movs	r3, #0
 800de0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de0c:	6a21      	ldr	r1, [r4, #32]
 800de0e:	4628      	mov	r0, r5
 800de10:	47b0      	blx	r6
 800de12:	1c43      	adds	r3, r0, #1
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	d106      	bne.n	800de26 <__sflush_r+0x62>
 800de18:	6829      	ldr	r1, [r5, #0]
 800de1a:	291d      	cmp	r1, #29
 800de1c:	d82b      	bhi.n	800de76 <__sflush_r+0xb2>
 800de1e:	4a2a      	ldr	r2, [pc, #168]	@ (800dec8 <__sflush_r+0x104>)
 800de20:	40ca      	lsrs	r2, r1
 800de22:	07d6      	lsls	r6, r2, #31
 800de24:	d527      	bpl.n	800de76 <__sflush_r+0xb2>
 800de26:	2200      	movs	r2, #0
 800de28:	6062      	str	r2, [r4, #4]
 800de2a:	04d9      	lsls	r1, r3, #19
 800de2c:	6922      	ldr	r2, [r4, #16]
 800de2e:	6022      	str	r2, [r4, #0]
 800de30:	d504      	bpl.n	800de3c <__sflush_r+0x78>
 800de32:	1c42      	adds	r2, r0, #1
 800de34:	d101      	bne.n	800de3a <__sflush_r+0x76>
 800de36:	682b      	ldr	r3, [r5, #0]
 800de38:	b903      	cbnz	r3, 800de3c <__sflush_r+0x78>
 800de3a:	6560      	str	r0, [r4, #84]	@ 0x54
 800de3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de3e:	602f      	str	r7, [r5, #0]
 800de40:	b1b9      	cbz	r1, 800de72 <__sflush_r+0xae>
 800de42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de46:	4299      	cmp	r1, r3
 800de48:	d002      	beq.n	800de50 <__sflush_r+0x8c>
 800de4a:	4628      	mov	r0, r5
 800de4c:	f7fe fa34 	bl	800c2b8 <_free_r>
 800de50:	2300      	movs	r3, #0
 800de52:	6363      	str	r3, [r4, #52]	@ 0x34
 800de54:	e00d      	b.n	800de72 <__sflush_r+0xae>
 800de56:	2301      	movs	r3, #1
 800de58:	4628      	mov	r0, r5
 800de5a:	47b0      	blx	r6
 800de5c:	4602      	mov	r2, r0
 800de5e:	1c50      	adds	r0, r2, #1
 800de60:	d1c9      	bne.n	800ddf6 <__sflush_r+0x32>
 800de62:	682b      	ldr	r3, [r5, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d0c6      	beq.n	800ddf6 <__sflush_r+0x32>
 800de68:	2b1d      	cmp	r3, #29
 800de6a:	d001      	beq.n	800de70 <__sflush_r+0xac>
 800de6c:	2b16      	cmp	r3, #22
 800de6e:	d11e      	bne.n	800deae <__sflush_r+0xea>
 800de70:	602f      	str	r7, [r5, #0]
 800de72:	2000      	movs	r0, #0
 800de74:	e022      	b.n	800debc <__sflush_r+0xf8>
 800de76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de7a:	b21b      	sxth	r3, r3
 800de7c:	e01b      	b.n	800deb6 <__sflush_r+0xf2>
 800de7e:	690f      	ldr	r7, [r1, #16]
 800de80:	2f00      	cmp	r7, #0
 800de82:	d0f6      	beq.n	800de72 <__sflush_r+0xae>
 800de84:	0793      	lsls	r3, r2, #30
 800de86:	680e      	ldr	r6, [r1, #0]
 800de88:	bf08      	it	eq
 800de8a:	694b      	ldreq	r3, [r1, #20]
 800de8c:	600f      	str	r7, [r1, #0]
 800de8e:	bf18      	it	ne
 800de90:	2300      	movne	r3, #0
 800de92:	eba6 0807 	sub.w	r8, r6, r7
 800de96:	608b      	str	r3, [r1, #8]
 800de98:	f1b8 0f00 	cmp.w	r8, #0
 800de9c:	dde9      	ble.n	800de72 <__sflush_r+0xae>
 800de9e:	6a21      	ldr	r1, [r4, #32]
 800dea0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dea2:	4643      	mov	r3, r8
 800dea4:	463a      	mov	r2, r7
 800dea6:	4628      	mov	r0, r5
 800dea8:	47b0      	blx	r6
 800deaa:	2800      	cmp	r0, #0
 800deac:	dc08      	bgt.n	800dec0 <__sflush_r+0xfc>
 800deae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deb6:	81a3      	strh	r3, [r4, #12]
 800deb8:	f04f 30ff 	mov.w	r0, #4294967295
 800debc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec0:	4407      	add	r7, r0
 800dec2:	eba8 0800 	sub.w	r8, r8, r0
 800dec6:	e7e7      	b.n	800de98 <__sflush_r+0xd4>
 800dec8:	20400001 	.word	0x20400001

0800decc <_fflush_r>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	690b      	ldr	r3, [r1, #16]
 800ded0:	4605      	mov	r5, r0
 800ded2:	460c      	mov	r4, r1
 800ded4:	b913      	cbnz	r3, 800dedc <_fflush_r+0x10>
 800ded6:	2500      	movs	r5, #0
 800ded8:	4628      	mov	r0, r5
 800deda:	bd38      	pop	{r3, r4, r5, pc}
 800dedc:	b118      	cbz	r0, 800dee6 <_fflush_r+0x1a>
 800dede:	6a03      	ldr	r3, [r0, #32]
 800dee0:	b90b      	cbnz	r3, 800dee6 <_fflush_r+0x1a>
 800dee2:	f7fd f9ef 	bl	800b2c4 <__sinit>
 800dee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d0f3      	beq.n	800ded6 <_fflush_r+0xa>
 800deee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800def0:	07d0      	lsls	r0, r2, #31
 800def2:	d404      	bmi.n	800defe <_fflush_r+0x32>
 800def4:	0599      	lsls	r1, r3, #22
 800def6:	d402      	bmi.n	800defe <_fflush_r+0x32>
 800def8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800defa:	f7fd fb6e 	bl	800b5da <__retarget_lock_acquire_recursive>
 800defe:	4628      	mov	r0, r5
 800df00:	4621      	mov	r1, r4
 800df02:	f7ff ff5f 	bl	800ddc4 <__sflush_r>
 800df06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df08:	07da      	lsls	r2, r3, #31
 800df0a:	4605      	mov	r5, r0
 800df0c:	d4e4      	bmi.n	800ded8 <_fflush_r+0xc>
 800df0e:	89a3      	ldrh	r3, [r4, #12]
 800df10:	059b      	lsls	r3, r3, #22
 800df12:	d4e1      	bmi.n	800ded8 <_fflush_r+0xc>
 800df14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df16:	f7fd fb61 	bl	800b5dc <__retarget_lock_release_recursive>
 800df1a:	e7dd      	b.n	800ded8 <_fflush_r+0xc>

0800df1c <memmove>:
 800df1c:	4288      	cmp	r0, r1
 800df1e:	b510      	push	{r4, lr}
 800df20:	eb01 0402 	add.w	r4, r1, r2
 800df24:	d902      	bls.n	800df2c <memmove+0x10>
 800df26:	4284      	cmp	r4, r0
 800df28:	4623      	mov	r3, r4
 800df2a:	d807      	bhi.n	800df3c <memmove+0x20>
 800df2c:	1e43      	subs	r3, r0, #1
 800df2e:	42a1      	cmp	r1, r4
 800df30:	d008      	beq.n	800df44 <memmove+0x28>
 800df32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df3a:	e7f8      	b.n	800df2e <memmove+0x12>
 800df3c:	4402      	add	r2, r0
 800df3e:	4601      	mov	r1, r0
 800df40:	428a      	cmp	r2, r1
 800df42:	d100      	bne.n	800df46 <memmove+0x2a>
 800df44:	bd10      	pop	{r4, pc}
 800df46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df4e:	e7f7      	b.n	800df40 <memmove+0x24>

0800df50 <strncmp>:
 800df50:	b510      	push	{r4, lr}
 800df52:	b16a      	cbz	r2, 800df70 <strncmp+0x20>
 800df54:	3901      	subs	r1, #1
 800df56:	1884      	adds	r4, r0, r2
 800df58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df60:	429a      	cmp	r2, r3
 800df62:	d103      	bne.n	800df6c <strncmp+0x1c>
 800df64:	42a0      	cmp	r0, r4
 800df66:	d001      	beq.n	800df6c <strncmp+0x1c>
 800df68:	2a00      	cmp	r2, #0
 800df6a:	d1f5      	bne.n	800df58 <strncmp+0x8>
 800df6c:	1ad0      	subs	r0, r2, r3
 800df6e:	bd10      	pop	{r4, pc}
 800df70:	4610      	mov	r0, r2
 800df72:	e7fc      	b.n	800df6e <strncmp+0x1e>

0800df74 <_sbrk_r>:
 800df74:	b538      	push	{r3, r4, r5, lr}
 800df76:	4d06      	ldr	r5, [pc, #24]	@ (800df90 <_sbrk_r+0x1c>)
 800df78:	2300      	movs	r3, #0
 800df7a:	4604      	mov	r4, r0
 800df7c:	4608      	mov	r0, r1
 800df7e:	602b      	str	r3, [r5, #0]
 800df80:	f7f8 f950 	bl	8006224 <_sbrk>
 800df84:	1c43      	adds	r3, r0, #1
 800df86:	d102      	bne.n	800df8e <_sbrk_r+0x1a>
 800df88:	682b      	ldr	r3, [r5, #0]
 800df8a:	b103      	cbz	r3, 800df8e <_sbrk_r+0x1a>
 800df8c:	6023      	str	r3, [r4, #0]
 800df8e:	bd38      	pop	{r3, r4, r5, pc}
 800df90:	20000ee8 	.word	0x20000ee8
 800df94:	00000000 	.word	0x00000000

0800df98 <nan>:
 800df98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dfa0 <nan+0x8>
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	00000000 	.word	0x00000000
 800dfa4:	7ff80000 	.word	0x7ff80000

0800dfa8 <__assert_func>:
 800dfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfaa:	4614      	mov	r4, r2
 800dfac:	461a      	mov	r2, r3
 800dfae:	4b09      	ldr	r3, [pc, #36]	@ (800dfd4 <__assert_func+0x2c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	68d8      	ldr	r0, [r3, #12]
 800dfb6:	b14c      	cbz	r4, 800dfcc <__assert_func+0x24>
 800dfb8:	4b07      	ldr	r3, [pc, #28]	@ (800dfd8 <__assert_func+0x30>)
 800dfba:	9100      	str	r1, [sp, #0]
 800dfbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfc0:	4906      	ldr	r1, [pc, #24]	@ (800dfdc <__assert_func+0x34>)
 800dfc2:	462b      	mov	r3, r5
 800dfc4:	f000 fba8 	bl	800e718 <fiprintf>
 800dfc8:	f000 fbb8 	bl	800e73c <abort>
 800dfcc:	4b04      	ldr	r3, [pc, #16]	@ (800dfe0 <__assert_func+0x38>)
 800dfce:	461c      	mov	r4, r3
 800dfd0:	e7f3      	b.n	800dfba <__assert_func+0x12>
 800dfd2:	bf00      	nop
 800dfd4:	20000024 	.word	0x20000024
 800dfd8:	080105e6 	.word	0x080105e6
 800dfdc:	080105f3 	.word	0x080105f3
 800dfe0:	08010621 	.word	0x08010621

0800dfe4 <_calloc_r>:
 800dfe4:	b570      	push	{r4, r5, r6, lr}
 800dfe6:	fba1 5402 	umull	r5, r4, r1, r2
 800dfea:	b934      	cbnz	r4, 800dffa <_calloc_r+0x16>
 800dfec:	4629      	mov	r1, r5
 800dfee:	f7fe f9d7 	bl	800c3a0 <_malloc_r>
 800dff2:	4606      	mov	r6, r0
 800dff4:	b928      	cbnz	r0, 800e002 <_calloc_r+0x1e>
 800dff6:	4630      	mov	r0, r6
 800dff8:	bd70      	pop	{r4, r5, r6, pc}
 800dffa:	220c      	movs	r2, #12
 800dffc:	6002      	str	r2, [r0, #0]
 800dffe:	2600      	movs	r6, #0
 800e000:	e7f9      	b.n	800dff6 <_calloc_r+0x12>
 800e002:	462a      	mov	r2, r5
 800e004:	4621      	mov	r1, r4
 800e006:	f7fd fa6b 	bl	800b4e0 <memset>
 800e00a:	e7f4      	b.n	800dff6 <_calloc_r+0x12>

0800e00c <rshift>:
 800e00c:	6903      	ldr	r3, [r0, #16]
 800e00e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e012:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e016:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e01a:	f100 0414 	add.w	r4, r0, #20
 800e01e:	dd45      	ble.n	800e0ac <rshift+0xa0>
 800e020:	f011 011f 	ands.w	r1, r1, #31
 800e024:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e028:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e02c:	d10c      	bne.n	800e048 <rshift+0x3c>
 800e02e:	f100 0710 	add.w	r7, r0, #16
 800e032:	4629      	mov	r1, r5
 800e034:	42b1      	cmp	r1, r6
 800e036:	d334      	bcc.n	800e0a2 <rshift+0x96>
 800e038:	1a9b      	subs	r3, r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	1eea      	subs	r2, r5, #3
 800e03e:	4296      	cmp	r6, r2
 800e040:	bf38      	it	cc
 800e042:	2300      	movcc	r3, #0
 800e044:	4423      	add	r3, r4
 800e046:	e015      	b.n	800e074 <rshift+0x68>
 800e048:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e04c:	f1c1 0820 	rsb	r8, r1, #32
 800e050:	40cf      	lsrs	r7, r1
 800e052:	f105 0e04 	add.w	lr, r5, #4
 800e056:	46a1      	mov	r9, r4
 800e058:	4576      	cmp	r6, lr
 800e05a:	46f4      	mov	ip, lr
 800e05c:	d815      	bhi.n	800e08a <rshift+0x7e>
 800e05e:	1a9a      	subs	r2, r3, r2
 800e060:	0092      	lsls	r2, r2, #2
 800e062:	3a04      	subs	r2, #4
 800e064:	3501      	adds	r5, #1
 800e066:	42ae      	cmp	r6, r5
 800e068:	bf38      	it	cc
 800e06a:	2200      	movcc	r2, #0
 800e06c:	18a3      	adds	r3, r4, r2
 800e06e:	50a7      	str	r7, [r4, r2]
 800e070:	b107      	cbz	r7, 800e074 <rshift+0x68>
 800e072:	3304      	adds	r3, #4
 800e074:	1b1a      	subs	r2, r3, r4
 800e076:	42a3      	cmp	r3, r4
 800e078:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e07c:	bf08      	it	eq
 800e07e:	2300      	moveq	r3, #0
 800e080:	6102      	str	r2, [r0, #16]
 800e082:	bf08      	it	eq
 800e084:	6143      	streq	r3, [r0, #20]
 800e086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e08a:	f8dc c000 	ldr.w	ip, [ip]
 800e08e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e092:	ea4c 0707 	orr.w	r7, ip, r7
 800e096:	f849 7b04 	str.w	r7, [r9], #4
 800e09a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e09e:	40cf      	lsrs	r7, r1
 800e0a0:	e7da      	b.n	800e058 <rshift+0x4c>
 800e0a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e0a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e0aa:	e7c3      	b.n	800e034 <rshift+0x28>
 800e0ac:	4623      	mov	r3, r4
 800e0ae:	e7e1      	b.n	800e074 <rshift+0x68>

0800e0b0 <__hexdig_fun>:
 800e0b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e0b4:	2b09      	cmp	r3, #9
 800e0b6:	d802      	bhi.n	800e0be <__hexdig_fun+0xe>
 800e0b8:	3820      	subs	r0, #32
 800e0ba:	b2c0      	uxtb	r0, r0
 800e0bc:	4770      	bx	lr
 800e0be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e0c2:	2b05      	cmp	r3, #5
 800e0c4:	d801      	bhi.n	800e0ca <__hexdig_fun+0x1a>
 800e0c6:	3847      	subs	r0, #71	@ 0x47
 800e0c8:	e7f7      	b.n	800e0ba <__hexdig_fun+0xa>
 800e0ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e0ce:	2b05      	cmp	r3, #5
 800e0d0:	d801      	bhi.n	800e0d6 <__hexdig_fun+0x26>
 800e0d2:	3827      	subs	r0, #39	@ 0x27
 800e0d4:	e7f1      	b.n	800e0ba <__hexdig_fun+0xa>
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	4770      	bx	lr
	...

0800e0dc <__gethex>:
 800e0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e0:	b085      	sub	sp, #20
 800e0e2:	468a      	mov	sl, r1
 800e0e4:	9302      	str	r3, [sp, #8]
 800e0e6:	680b      	ldr	r3, [r1, #0]
 800e0e8:	9001      	str	r0, [sp, #4]
 800e0ea:	4690      	mov	r8, r2
 800e0ec:	1c9c      	adds	r4, r3, #2
 800e0ee:	46a1      	mov	r9, r4
 800e0f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e0f4:	2830      	cmp	r0, #48	@ 0x30
 800e0f6:	d0fa      	beq.n	800e0ee <__gethex+0x12>
 800e0f8:	eba9 0303 	sub.w	r3, r9, r3
 800e0fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800e100:	f7ff ffd6 	bl	800e0b0 <__hexdig_fun>
 800e104:	4605      	mov	r5, r0
 800e106:	2800      	cmp	r0, #0
 800e108:	d168      	bne.n	800e1dc <__gethex+0x100>
 800e10a:	49a0      	ldr	r1, [pc, #640]	@ (800e38c <__gethex+0x2b0>)
 800e10c:	2201      	movs	r2, #1
 800e10e:	4648      	mov	r0, r9
 800e110:	f7ff ff1e 	bl	800df50 <strncmp>
 800e114:	4607      	mov	r7, r0
 800e116:	2800      	cmp	r0, #0
 800e118:	d167      	bne.n	800e1ea <__gethex+0x10e>
 800e11a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e11e:	4626      	mov	r6, r4
 800e120:	f7ff ffc6 	bl	800e0b0 <__hexdig_fun>
 800e124:	2800      	cmp	r0, #0
 800e126:	d062      	beq.n	800e1ee <__gethex+0x112>
 800e128:	4623      	mov	r3, r4
 800e12a:	7818      	ldrb	r0, [r3, #0]
 800e12c:	2830      	cmp	r0, #48	@ 0x30
 800e12e:	4699      	mov	r9, r3
 800e130:	f103 0301 	add.w	r3, r3, #1
 800e134:	d0f9      	beq.n	800e12a <__gethex+0x4e>
 800e136:	f7ff ffbb 	bl	800e0b0 <__hexdig_fun>
 800e13a:	fab0 f580 	clz	r5, r0
 800e13e:	096d      	lsrs	r5, r5, #5
 800e140:	f04f 0b01 	mov.w	fp, #1
 800e144:	464a      	mov	r2, r9
 800e146:	4616      	mov	r6, r2
 800e148:	3201      	adds	r2, #1
 800e14a:	7830      	ldrb	r0, [r6, #0]
 800e14c:	f7ff ffb0 	bl	800e0b0 <__hexdig_fun>
 800e150:	2800      	cmp	r0, #0
 800e152:	d1f8      	bne.n	800e146 <__gethex+0x6a>
 800e154:	498d      	ldr	r1, [pc, #564]	@ (800e38c <__gethex+0x2b0>)
 800e156:	2201      	movs	r2, #1
 800e158:	4630      	mov	r0, r6
 800e15a:	f7ff fef9 	bl	800df50 <strncmp>
 800e15e:	2800      	cmp	r0, #0
 800e160:	d13f      	bne.n	800e1e2 <__gethex+0x106>
 800e162:	b944      	cbnz	r4, 800e176 <__gethex+0x9a>
 800e164:	1c74      	adds	r4, r6, #1
 800e166:	4622      	mov	r2, r4
 800e168:	4616      	mov	r6, r2
 800e16a:	3201      	adds	r2, #1
 800e16c:	7830      	ldrb	r0, [r6, #0]
 800e16e:	f7ff ff9f 	bl	800e0b0 <__hexdig_fun>
 800e172:	2800      	cmp	r0, #0
 800e174:	d1f8      	bne.n	800e168 <__gethex+0x8c>
 800e176:	1ba4      	subs	r4, r4, r6
 800e178:	00a7      	lsls	r7, r4, #2
 800e17a:	7833      	ldrb	r3, [r6, #0]
 800e17c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e180:	2b50      	cmp	r3, #80	@ 0x50
 800e182:	d13e      	bne.n	800e202 <__gethex+0x126>
 800e184:	7873      	ldrb	r3, [r6, #1]
 800e186:	2b2b      	cmp	r3, #43	@ 0x2b
 800e188:	d033      	beq.n	800e1f2 <__gethex+0x116>
 800e18a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e18c:	d034      	beq.n	800e1f8 <__gethex+0x11c>
 800e18e:	1c71      	adds	r1, r6, #1
 800e190:	2400      	movs	r4, #0
 800e192:	7808      	ldrb	r0, [r1, #0]
 800e194:	f7ff ff8c 	bl	800e0b0 <__hexdig_fun>
 800e198:	1e43      	subs	r3, r0, #1
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	2b18      	cmp	r3, #24
 800e19e:	d830      	bhi.n	800e202 <__gethex+0x126>
 800e1a0:	f1a0 0210 	sub.w	r2, r0, #16
 800e1a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e1a8:	f7ff ff82 	bl	800e0b0 <__hexdig_fun>
 800e1ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800e1b0:	fa5f fc8c 	uxtb.w	ip, ip
 800e1b4:	f1bc 0f18 	cmp.w	ip, #24
 800e1b8:	f04f 030a 	mov.w	r3, #10
 800e1bc:	d91e      	bls.n	800e1fc <__gethex+0x120>
 800e1be:	b104      	cbz	r4, 800e1c2 <__gethex+0xe6>
 800e1c0:	4252      	negs	r2, r2
 800e1c2:	4417      	add	r7, r2
 800e1c4:	f8ca 1000 	str.w	r1, [sl]
 800e1c8:	b1ed      	cbz	r5, 800e206 <__gethex+0x12a>
 800e1ca:	f1bb 0f00 	cmp.w	fp, #0
 800e1ce:	bf0c      	ite	eq
 800e1d0:	2506      	moveq	r5, #6
 800e1d2:	2500      	movne	r5, #0
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	b005      	add	sp, #20
 800e1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1dc:	2500      	movs	r5, #0
 800e1de:	462c      	mov	r4, r5
 800e1e0:	e7b0      	b.n	800e144 <__gethex+0x68>
 800e1e2:	2c00      	cmp	r4, #0
 800e1e4:	d1c7      	bne.n	800e176 <__gethex+0x9a>
 800e1e6:	4627      	mov	r7, r4
 800e1e8:	e7c7      	b.n	800e17a <__gethex+0x9e>
 800e1ea:	464e      	mov	r6, r9
 800e1ec:	462f      	mov	r7, r5
 800e1ee:	2501      	movs	r5, #1
 800e1f0:	e7c3      	b.n	800e17a <__gethex+0x9e>
 800e1f2:	2400      	movs	r4, #0
 800e1f4:	1cb1      	adds	r1, r6, #2
 800e1f6:	e7cc      	b.n	800e192 <__gethex+0xb6>
 800e1f8:	2401      	movs	r4, #1
 800e1fa:	e7fb      	b.n	800e1f4 <__gethex+0x118>
 800e1fc:	fb03 0002 	mla	r0, r3, r2, r0
 800e200:	e7ce      	b.n	800e1a0 <__gethex+0xc4>
 800e202:	4631      	mov	r1, r6
 800e204:	e7de      	b.n	800e1c4 <__gethex+0xe8>
 800e206:	eba6 0309 	sub.w	r3, r6, r9
 800e20a:	3b01      	subs	r3, #1
 800e20c:	4629      	mov	r1, r5
 800e20e:	2b07      	cmp	r3, #7
 800e210:	dc0a      	bgt.n	800e228 <__gethex+0x14c>
 800e212:	9801      	ldr	r0, [sp, #4]
 800e214:	f7fe f950 	bl	800c4b8 <_Balloc>
 800e218:	4604      	mov	r4, r0
 800e21a:	b940      	cbnz	r0, 800e22e <__gethex+0x152>
 800e21c:	4b5c      	ldr	r3, [pc, #368]	@ (800e390 <__gethex+0x2b4>)
 800e21e:	4602      	mov	r2, r0
 800e220:	21e4      	movs	r1, #228	@ 0xe4
 800e222:	485c      	ldr	r0, [pc, #368]	@ (800e394 <__gethex+0x2b8>)
 800e224:	f7ff fec0 	bl	800dfa8 <__assert_func>
 800e228:	3101      	adds	r1, #1
 800e22a:	105b      	asrs	r3, r3, #1
 800e22c:	e7ef      	b.n	800e20e <__gethex+0x132>
 800e22e:	f100 0a14 	add.w	sl, r0, #20
 800e232:	2300      	movs	r3, #0
 800e234:	4655      	mov	r5, sl
 800e236:	469b      	mov	fp, r3
 800e238:	45b1      	cmp	r9, r6
 800e23a:	d337      	bcc.n	800e2ac <__gethex+0x1d0>
 800e23c:	f845 bb04 	str.w	fp, [r5], #4
 800e240:	eba5 050a 	sub.w	r5, r5, sl
 800e244:	10ad      	asrs	r5, r5, #2
 800e246:	6125      	str	r5, [r4, #16]
 800e248:	4658      	mov	r0, fp
 800e24a:	f7fe fa27 	bl	800c69c <__hi0bits>
 800e24e:	016d      	lsls	r5, r5, #5
 800e250:	f8d8 6000 	ldr.w	r6, [r8]
 800e254:	1a2d      	subs	r5, r5, r0
 800e256:	42b5      	cmp	r5, r6
 800e258:	dd54      	ble.n	800e304 <__gethex+0x228>
 800e25a:	1bad      	subs	r5, r5, r6
 800e25c:	4629      	mov	r1, r5
 800e25e:	4620      	mov	r0, r4
 800e260:	f7fe fdb3 	bl	800cdca <__any_on>
 800e264:	4681      	mov	r9, r0
 800e266:	b178      	cbz	r0, 800e288 <__gethex+0x1ac>
 800e268:	1e6b      	subs	r3, r5, #1
 800e26a:	1159      	asrs	r1, r3, #5
 800e26c:	f003 021f 	and.w	r2, r3, #31
 800e270:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e274:	f04f 0901 	mov.w	r9, #1
 800e278:	fa09 f202 	lsl.w	r2, r9, r2
 800e27c:	420a      	tst	r2, r1
 800e27e:	d003      	beq.n	800e288 <__gethex+0x1ac>
 800e280:	454b      	cmp	r3, r9
 800e282:	dc36      	bgt.n	800e2f2 <__gethex+0x216>
 800e284:	f04f 0902 	mov.w	r9, #2
 800e288:	4629      	mov	r1, r5
 800e28a:	4620      	mov	r0, r4
 800e28c:	f7ff febe 	bl	800e00c <rshift>
 800e290:	442f      	add	r7, r5
 800e292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e296:	42bb      	cmp	r3, r7
 800e298:	da42      	bge.n	800e320 <__gethex+0x244>
 800e29a:	9801      	ldr	r0, [sp, #4]
 800e29c:	4621      	mov	r1, r4
 800e29e:	f7fe f94b 	bl	800c538 <_Bfree>
 800e2a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	25a3      	movs	r5, #163	@ 0xa3
 800e2aa:	e793      	b.n	800e1d4 <__gethex+0xf8>
 800e2ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e2b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e2b2:	d012      	beq.n	800e2da <__gethex+0x1fe>
 800e2b4:	2b20      	cmp	r3, #32
 800e2b6:	d104      	bne.n	800e2c2 <__gethex+0x1e6>
 800e2b8:	f845 bb04 	str.w	fp, [r5], #4
 800e2bc:	f04f 0b00 	mov.w	fp, #0
 800e2c0:	465b      	mov	r3, fp
 800e2c2:	7830      	ldrb	r0, [r6, #0]
 800e2c4:	9303      	str	r3, [sp, #12]
 800e2c6:	f7ff fef3 	bl	800e0b0 <__hexdig_fun>
 800e2ca:	9b03      	ldr	r3, [sp, #12]
 800e2cc:	f000 000f 	and.w	r0, r0, #15
 800e2d0:	4098      	lsls	r0, r3
 800e2d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	e7ae      	b.n	800e238 <__gethex+0x15c>
 800e2da:	45b1      	cmp	r9, r6
 800e2dc:	d8ea      	bhi.n	800e2b4 <__gethex+0x1d8>
 800e2de:	492b      	ldr	r1, [pc, #172]	@ (800e38c <__gethex+0x2b0>)
 800e2e0:	9303      	str	r3, [sp, #12]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	f7ff fe33 	bl	800df50 <strncmp>
 800e2ea:	9b03      	ldr	r3, [sp, #12]
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d1e1      	bne.n	800e2b4 <__gethex+0x1d8>
 800e2f0:	e7a2      	b.n	800e238 <__gethex+0x15c>
 800e2f2:	1ea9      	subs	r1, r5, #2
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f7fe fd68 	bl	800cdca <__any_on>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d0c2      	beq.n	800e284 <__gethex+0x1a8>
 800e2fe:	f04f 0903 	mov.w	r9, #3
 800e302:	e7c1      	b.n	800e288 <__gethex+0x1ac>
 800e304:	da09      	bge.n	800e31a <__gethex+0x23e>
 800e306:	1b75      	subs	r5, r6, r5
 800e308:	4621      	mov	r1, r4
 800e30a:	9801      	ldr	r0, [sp, #4]
 800e30c:	462a      	mov	r2, r5
 800e30e:	f7fe fb23 	bl	800c958 <__lshift>
 800e312:	1b7f      	subs	r7, r7, r5
 800e314:	4604      	mov	r4, r0
 800e316:	f100 0a14 	add.w	sl, r0, #20
 800e31a:	f04f 0900 	mov.w	r9, #0
 800e31e:	e7b8      	b.n	800e292 <__gethex+0x1b6>
 800e320:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e324:	42bd      	cmp	r5, r7
 800e326:	dd6f      	ble.n	800e408 <__gethex+0x32c>
 800e328:	1bed      	subs	r5, r5, r7
 800e32a:	42ae      	cmp	r6, r5
 800e32c:	dc34      	bgt.n	800e398 <__gethex+0x2bc>
 800e32e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e332:	2b02      	cmp	r3, #2
 800e334:	d022      	beq.n	800e37c <__gethex+0x2a0>
 800e336:	2b03      	cmp	r3, #3
 800e338:	d024      	beq.n	800e384 <__gethex+0x2a8>
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d115      	bne.n	800e36a <__gethex+0x28e>
 800e33e:	42ae      	cmp	r6, r5
 800e340:	d113      	bne.n	800e36a <__gethex+0x28e>
 800e342:	2e01      	cmp	r6, #1
 800e344:	d10b      	bne.n	800e35e <__gethex+0x282>
 800e346:	9a02      	ldr	r2, [sp, #8]
 800e348:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e34c:	6013      	str	r3, [r2, #0]
 800e34e:	2301      	movs	r3, #1
 800e350:	6123      	str	r3, [r4, #16]
 800e352:	f8ca 3000 	str.w	r3, [sl]
 800e356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e358:	2562      	movs	r5, #98	@ 0x62
 800e35a:	601c      	str	r4, [r3, #0]
 800e35c:	e73a      	b.n	800e1d4 <__gethex+0xf8>
 800e35e:	1e71      	subs	r1, r6, #1
 800e360:	4620      	mov	r0, r4
 800e362:	f7fe fd32 	bl	800cdca <__any_on>
 800e366:	2800      	cmp	r0, #0
 800e368:	d1ed      	bne.n	800e346 <__gethex+0x26a>
 800e36a:	9801      	ldr	r0, [sp, #4]
 800e36c:	4621      	mov	r1, r4
 800e36e:	f7fe f8e3 	bl	800c538 <_Bfree>
 800e372:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e374:	2300      	movs	r3, #0
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	2550      	movs	r5, #80	@ 0x50
 800e37a:	e72b      	b.n	800e1d4 <__gethex+0xf8>
 800e37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1f3      	bne.n	800e36a <__gethex+0x28e>
 800e382:	e7e0      	b.n	800e346 <__gethex+0x26a>
 800e384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1dd      	bne.n	800e346 <__gethex+0x26a>
 800e38a:	e7ee      	b.n	800e36a <__gethex+0x28e>
 800e38c:	080105cb 	.word	0x080105cb
 800e390:	08010561 	.word	0x08010561
 800e394:	08010622 	.word	0x08010622
 800e398:	1e6f      	subs	r7, r5, #1
 800e39a:	f1b9 0f00 	cmp.w	r9, #0
 800e39e:	d130      	bne.n	800e402 <__gethex+0x326>
 800e3a0:	b127      	cbz	r7, 800e3ac <__gethex+0x2d0>
 800e3a2:	4639      	mov	r1, r7
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f7fe fd10 	bl	800cdca <__any_on>
 800e3aa:	4681      	mov	r9, r0
 800e3ac:	117a      	asrs	r2, r7, #5
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e3b4:	f007 071f 	and.w	r7, r7, #31
 800e3b8:	40bb      	lsls	r3, r7
 800e3ba:	4213      	tst	r3, r2
 800e3bc:	4629      	mov	r1, r5
 800e3be:	4620      	mov	r0, r4
 800e3c0:	bf18      	it	ne
 800e3c2:	f049 0902 	orrne.w	r9, r9, #2
 800e3c6:	f7ff fe21 	bl	800e00c <rshift>
 800e3ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e3ce:	1b76      	subs	r6, r6, r5
 800e3d0:	2502      	movs	r5, #2
 800e3d2:	f1b9 0f00 	cmp.w	r9, #0
 800e3d6:	d047      	beq.n	800e468 <__gethex+0x38c>
 800e3d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	d015      	beq.n	800e40c <__gethex+0x330>
 800e3e0:	2b03      	cmp	r3, #3
 800e3e2:	d017      	beq.n	800e414 <__gethex+0x338>
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d109      	bne.n	800e3fc <__gethex+0x320>
 800e3e8:	f019 0f02 	tst.w	r9, #2
 800e3ec:	d006      	beq.n	800e3fc <__gethex+0x320>
 800e3ee:	f8da 3000 	ldr.w	r3, [sl]
 800e3f2:	ea49 0903 	orr.w	r9, r9, r3
 800e3f6:	f019 0f01 	tst.w	r9, #1
 800e3fa:	d10e      	bne.n	800e41a <__gethex+0x33e>
 800e3fc:	f045 0510 	orr.w	r5, r5, #16
 800e400:	e032      	b.n	800e468 <__gethex+0x38c>
 800e402:	f04f 0901 	mov.w	r9, #1
 800e406:	e7d1      	b.n	800e3ac <__gethex+0x2d0>
 800e408:	2501      	movs	r5, #1
 800e40a:	e7e2      	b.n	800e3d2 <__gethex+0x2f6>
 800e40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e40e:	f1c3 0301 	rsb	r3, r3, #1
 800e412:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e416:	2b00      	cmp	r3, #0
 800e418:	d0f0      	beq.n	800e3fc <__gethex+0x320>
 800e41a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e41e:	f104 0314 	add.w	r3, r4, #20
 800e422:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e426:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e42a:	f04f 0c00 	mov.w	ip, #0
 800e42e:	4618      	mov	r0, r3
 800e430:	f853 2b04 	ldr.w	r2, [r3], #4
 800e434:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e438:	d01b      	beq.n	800e472 <__gethex+0x396>
 800e43a:	3201      	adds	r2, #1
 800e43c:	6002      	str	r2, [r0, #0]
 800e43e:	2d02      	cmp	r5, #2
 800e440:	f104 0314 	add.w	r3, r4, #20
 800e444:	d13c      	bne.n	800e4c0 <__gethex+0x3e4>
 800e446:	f8d8 2000 	ldr.w	r2, [r8]
 800e44a:	3a01      	subs	r2, #1
 800e44c:	42b2      	cmp	r2, r6
 800e44e:	d109      	bne.n	800e464 <__gethex+0x388>
 800e450:	1171      	asrs	r1, r6, #5
 800e452:	2201      	movs	r2, #1
 800e454:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e458:	f006 061f 	and.w	r6, r6, #31
 800e45c:	fa02 f606 	lsl.w	r6, r2, r6
 800e460:	421e      	tst	r6, r3
 800e462:	d13a      	bne.n	800e4da <__gethex+0x3fe>
 800e464:	f045 0520 	orr.w	r5, r5, #32
 800e468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e46a:	601c      	str	r4, [r3, #0]
 800e46c:	9b02      	ldr	r3, [sp, #8]
 800e46e:	601f      	str	r7, [r3, #0]
 800e470:	e6b0      	b.n	800e1d4 <__gethex+0xf8>
 800e472:	4299      	cmp	r1, r3
 800e474:	f843 cc04 	str.w	ip, [r3, #-4]
 800e478:	d8d9      	bhi.n	800e42e <__gethex+0x352>
 800e47a:	68a3      	ldr	r3, [r4, #8]
 800e47c:	459b      	cmp	fp, r3
 800e47e:	db17      	blt.n	800e4b0 <__gethex+0x3d4>
 800e480:	6861      	ldr	r1, [r4, #4]
 800e482:	9801      	ldr	r0, [sp, #4]
 800e484:	3101      	adds	r1, #1
 800e486:	f7fe f817 	bl	800c4b8 <_Balloc>
 800e48a:	4681      	mov	r9, r0
 800e48c:	b918      	cbnz	r0, 800e496 <__gethex+0x3ba>
 800e48e:	4b1a      	ldr	r3, [pc, #104]	@ (800e4f8 <__gethex+0x41c>)
 800e490:	4602      	mov	r2, r0
 800e492:	2184      	movs	r1, #132	@ 0x84
 800e494:	e6c5      	b.n	800e222 <__gethex+0x146>
 800e496:	6922      	ldr	r2, [r4, #16]
 800e498:	3202      	adds	r2, #2
 800e49a:	f104 010c 	add.w	r1, r4, #12
 800e49e:	0092      	lsls	r2, r2, #2
 800e4a0:	300c      	adds	r0, #12
 800e4a2:	f7fd f89c 	bl	800b5de <memcpy>
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	9801      	ldr	r0, [sp, #4]
 800e4aa:	f7fe f845 	bl	800c538 <_Bfree>
 800e4ae:	464c      	mov	r4, r9
 800e4b0:	6923      	ldr	r3, [r4, #16]
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4b8:	6122      	str	r2, [r4, #16]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	615a      	str	r2, [r3, #20]
 800e4be:	e7be      	b.n	800e43e <__gethex+0x362>
 800e4c0:	6922      	ldr	r2, [r4, #16]
 800e4c2:	455a      	cmp	r2, fp
 800e4c4:	dd0b      	ble.n	800e4de <__gethex+0x402>
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f7ff fd9f 	bl	800e00c <rshift>
 800e4ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4d2:	3701      	adds	r7, #1
 800e4d4:	42bb      	cmp	r3, r7
 800e4d6:	f6ff aee0 	blt.w	800e29a <__gethex+0x1be>
 800e4da:	2501      	movs	r5, #1
 800e4dc:	e7c2      	b.n	800e464 <__gethex+0x388>
 800e4de:	f016 061f 	ands.w	r6, r6, #31
 800e4e2:	d0fa      	beq.n	800e4da <__gethex+0x3fe>
 800e4e4:	4453      	add	r3, sl
 800e4e6:	f1c6 0620 	rsb	r6, r6, #32
 800e4ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e4ee:	f7fe f8d5 	bl	800c69c <__hi0bits>
 800e4f2:	42b0      	cmp	r0, r6
 800e4f4:	dbe7      	blt.n	800e4c6 <__gethex+0x3ea>
 800e4f6:	e7f0      	b.n	800e4da <__gethex+0x3fe>
 800e4f8:	08010561 	.word	0x08010561

0800e4fc <L_shift>:
 800e4fc:	f1c2 0208 	rsb	r2, r2, #8
 800e500:	0092      	lsls	r2, r2, #2
 800e502:	b570      	push	{r4, r5, r6, lr}
 800e504:	f1c2 0620 	rsb	r6, r2, #32
 800e508:	6843      	ldr	r3, [r0, #4]
 800e50a:	6804      	ldr	r4, [r0, #0]
 800e50c:	fa03 f506 	lsl.w	r5, r3, r6
 800e510:	432c      	orrs	r4, r5
 800e512:	40d3      	lsrs	r3, r2
 800e514:	6004      	str	r4, [r0, #0]
 800e516:	f840 3f04 	str.w	r3, [r0, #4]!
 800e51a:	4288      	cmp	r0, r1
 800e51c:	d3f4      	bcc.n	800e508 <L_shift+0xc>
 800e51e:	bd70      	pop	{r4, r5, r6, pc}

0800e520 <__match>:
 800e520:	b530      	push	{r4, r5, lr}
 800e522:	6803      	ldr	r3, [r0, #0]
 800e524:	3301      	adds	r3, #1
 800e526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e52a:	b914      	cbnz	r4, 800e532 <__match+0x12>
 800e52c:	6003      	str	r3, [r0, #0]
 800e52e:	2001      	movs	r0, #1
 800e530:	bd30      	pop	{r4, r5, pc}
 800e532:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e536:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e53a:	2d19      	cmp	r5, #25
 800e53c:	bf98      	it	ls
 800e53e:	3220      	addls	r2, #32
 800e540:	42a2      	cmp	r2, r4
 800e542:	d0f0      	beq.n	800e526 <__match+0x6>
 800e544:	2000      	movs	r0, #0
 800e546:	e7f3      	b.n	800e530 <__match+0x10>

0800e548 <__hexnan>:
 800e548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54c:	680b      	ldr	r3, [r1, #0]
 800e54e:	6801      	ldr	r1, [r0, #0]
 800e550:	115e      	asrs	r6, r3, #5
 800e552:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e556:	f013 031f 	ands.w	r3, r3, #31
 800e55a:	b087      	sub	sp, #28
 800e55c:	bf18      	it	ne
 800e55e:	3604      	addne	r6, #4
 800e560:	2500      	movs	r5, #0
 800e562:	1f37      	subs	r7, r6, #4
 800e564:	4682      	mov	sl, r0
 800e566:	4690      	mov	r8, r2
 800e568:	9301      	str	r3, [sp, #4]
 800e56a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e56e:	46b9      	mov	r9, r7
 800e570:	463c      	mov	r4, r7
 800e572:	9502      	str	r5, [sp, #8]
 800e574:	46ab      	mov	fp, r5
 800e576:	784a      	ldrb	r2, [r1, #1]
 800e578:	1c4b      	adds	r3, r1, #1
 800e57a:	9303      	str	r3, [sp, #12]
 800e57c:	b342      	cbz	r2, 800e5d0 <__hexnan+0x88>
 800e57e:	4610      	mov	r0, r2
 800e580:	9105      	str	r1, [sp, #20]
 800e582:	9204      	str	r2, [sp, #16]
 800e584:	f7ff fd94 	bl	800e0b0 <__hexdig_fun>
 800e588:	2800      	cmp	r0, #0
 800e58a:	d151      	bne.n	800e630 <__hexnan+0xe8>
 800e58c:	9a04      	ldr	r2, [sp, #16]
 800e58e:	9905      	ldr	r1, [sp, #20]
 800e590:	2a20      	cmp	r2, #32
 800e592:	d818      	bhi.n	800e5c6 <__hexnan+0x7e>
 800e594:	9b02      	ldr	r3, [sp, #8]
 800e596:	459b      	cmp	fp, r3
 800e598:	dd13      	ble.n	800e5c2 <__hexnan+0x7a>
 800e59a:	454c      	cmp	r4, r9
 800e59c:	d206      	bcs.n	800e5ac <__hexnan+0x64>
 800e59e:	2d07      	cmp	r5, #7
 800e5a0:	dc04      	bgt.n	800e5ac <__hexnan+0x64>
 800e5a2:	462a      	mov	r2, r5
 800e5a4:	4649      	mov	r1, r9
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f7ff ffa8 	bl	800e4fc <L_shift>
 800e5ac:	4544      	cmp	r4, r8
 800e5ae:	d952      	bls.n	800e656 <__hexnan+0x10e>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f1a4 0904 	sub.w	r9, r4, #4
 800e5b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5ba:	f8cd b008 	str.w	fp, [sp, #8]
 800e5be:	464c      	mov	r4, r9
 800e5c0:	461d      	mov	r5, r3
 800e5c2:	9903      	ldr	r1, [sp, #12]
 800e5c4:	e7d7      	b.n	800e576 <__hexnan+0x2e>
 800e5c6:	2a29      	cmp	r2, #41	@ 0x29
 800e5c8:	d157      	bne.n	800e67a <__hexnan+0x132>
 800e5ca:	3102      	adds	r1, #2
 800e5cc:	f8ca 1000 	str.w	r1, [sl]
 800e5d0:	f1bb 0f00 	cmp.w	fp, #0
 800e5d4:	d051      	beq.n	800e67a <__hexnan+0x132>
 800e5d6:	454c      	cmp	r4, r9
 800e5d8:	d206      	bcs.n	800e5e8 <__hexnan+0xa0>
 800e5da:	2d07      	cmp	r5, #7
 800e5dc:	dc04      	bgt.n	800e5e8 <__hexnan+0xa0>
 800e5de:	462a      	mov	r2, r5
 800e5e0:	4649      	mov	r1, r9
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f7ff ff8a 	bl	800e4fc <L_shift>
 800e5e8:	4544      	cmp	r4, r8
 800e5ea:	d936      	bls.n	800e65a <__hexnan+0x112>
 800e5ec:	f1a8 0204 	sub.w	r2, r8, #4
 800e5f0:	4623      	mov	r3, r4
 800e5f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e5f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e5fa:	429f      	cmp	r7, r3
 800e5fc:	d2f9      	bcs.n	800e5f2 <__hexnan+0xaa>
 800e5fe:	1b3b      	subs	r3, r7, r4
 800e600:	f023 0303 	bic.w	r3, r3, #3
 800e604:	3304      	adds	r3, #4
 800e606:	3401      	adds	r4, #1
 800e608:	3e03      	subs	r6, #3
 800e60a:	42b4      	cmp	r4, r6
 800e60c:	bf88      	it	hi
 800e60e:	2304      	movhi	r3, #4
 800e610:	4443      	add	r3, r8
 800e612:	2200      	movs	r2, #0
 800e614:	f843 2b04 	str.w	r2, [r3], #4
 800e618:	429f      	cmp	r7, r3
 800e61a:	d2fb      	bcs.n	800e614 <__hexnan+0xcc>
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	b91b      	cbnz	r3, 800e628 <__hexnan+0xe0>
 800e620:	4547      	cmp	r7, r8
 800e622:	d128      	bne.n	800e676 <__hexnan+0x12e>
 800e624:	2301      	movs	r3, #1
 800e626:	603b      	str	r3, [r7, #0]
 800e628:	2005      	movs	r0, #5
 800e62a:	b007      	add	sp, #28
 800e62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e630:	3501      	adds	r5, #1
 800e632:	2d08      	cmp	r5, #8
 800e634:	f10b 0b01 	add.w	fp, fp, #1
 800e638:	dd06      	ble.n	800e648 <__hexnan+0x100>
 800e63a:	4544      	cmp	r4, r8
 800e63c:	d9c1      	bls.n	800e5c2 <__hexnan+0x7a>
 800e63e:	2300      	movs	r3, #0
 800e640:	f844 3c04 	str.w	r3, [r4, #-4]
 800e644:	2501      	movs	r5, #1
 800e646:	3c04      	subs	r4, #4
 800e648:	6822      	ldr	r2, [r4, #0]
 800e64a:	f000 000f 	and.w	r0, r0, #15
 800e64e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e652:	6020      	str	r0, [r4, #0]
 800e654:	e7b5      	b.n	800e5c2 <__hexnan+0x7a>
 800e656:	2508      	movs	r5, #8
 800e658:	e7b3      	b.n	800e5c2 <__hexnan+0x7a>
 800e65a:	9b01      	ldr	r3, [sp, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d0dd      	beq.n	800e61c <__hexnan+0xd4>
 800e660:	f1c3 0320 	rsb	r3, r3, #32
 800e664:	f04f 32ff 	mov.w	r2, #4294967295
 800e668:	40da      	lsrs	r2, r3
 800e66a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e66e:	4013      	ands	r3, r2
 800e670:	f846 3c04 	str.w	r3, [r6, #-4]
 800e674:	e7d2      	b.n	800e61c <__hexnan+0xd4>
 800e676:	3f04      	subs	r7, #4
 800e678:	e7d0      	b.n	800e61c <__hexnan+0xd4>
 800e67a:	2004      	movs	r0, #4
 800e67c:	e7d5      	b.n	800e62a <__hexnan+0xe2>

0800e67e <__ascii_mbtowc>:
 800e67e:	b082      	sub	sp, #8
 800e680:	b901      	cbnz	r1, 800e684 <__ascii_mbtowc+0x6>
 800e682:	a901      	add	r1, sp, #4
 800e684:	b142      	cbz	r2, 800e698 <__ascii_mbtowc+0x1a>
 800e686:	b14b      	cbz	r3, 800e69c <__ascii_mbtowc+0x1e>
 800e688:	7813      	ldrb	r3, [r2, #0]
 800e68a:	600b      	str	r3, [r1, #0]
 800e68c:	7812      	ldrb	r2, [r2, #0]
 800e68e:	1e10      	subs	r0, r2, #0
 800e690:	bf18      	it	ne
 800e692:	2001      	movne	r0, #1
 800e694:	b002      	add	sp, #8
 800e696:	4770      	bx	lr
 800e698:	4610      	mov	r0, r2
 800e69a:	e7fb      	b.n	800e694 <__ascii_mbtowc+0x16>
 800e69c:	f06f 0001 	mvn.w	r0, #1
 800e6a0:	e7f8      	b.n	800e694 <__ascii_mbtowc+0x16>

0800e6a2 <_realloc_r>:
 800e6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a6:	4607      	mov	r7, r0
 800e6a8:	4614      	mov	r4, r2
 800e6aa:	460d      	mov	r5, r1
 800e6ac:	b921      	cbnz	r1, 800e6b8 <_realloc_r+0x16>
 800e6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	f7fd be74 	b.w	800c3a0 <_malloc_r>
 800e6b8:	b92a      	cbnz	r2, 800e6c6 <_realloc_r+0x24>
 800e6ba:	f7fd fdfd 	bl	800c2b8 <_free_r>
 800e6be:	4625      	mov	r5, r4
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c6:	f000 f840 	bl	800e74a <_malloc_usable_size_r>
 800e6ca:	4284      	cmp	r4, r0
 800e6cc:	4606      	mov	r6, r0
 800e6ce:	d802      	bhi.n	800e6d6 <_realloc_r+0x34>
 800e6d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e6d4:	d8f4      	bhi.n	800e6c0 <_realloc_r+0x1e>
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4638      	mov	r0, r7
 800e6da:	f7fd fe61 	bl	800c3a0 <_malloc_r>
 800e6de:	4680      	mov	r8, r0
 800e6e0:	b908      	cbnz	r0, 800e6e6 <_realloc_r+0x44>
 800e6e2:	4645      	mov	r5, r8
 800e6e4:	e7ec      	b.n	800e6c0 <_realloc_r+0x1e>
 800e6e6:	42b4      	cmp	r4, r6
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	4629      	mov	r1, r5
 800e6ec:	bf28      	it	cs
 800e6ee:	4632      	movcs	r2, r6
 800e6f0:	f7fc ff75 	bl	800b5de <memcpy>
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	4638      	mov	r0, r7
 800e6f8:	f7fd fdde 	bl	800c2b8 <_free_r>
 800e6fc:	e7f1      	b.n	800e6e2 <_realloc_r+0x40>

0800e6fe <__ascii_wctomb>:
 800e6fe:	4603      	mov	r3, r0
 800e700:	4608      	mov	r0, r1
 800e702:	b141      	cbz	r1, 800e716 <__ascii_wctomb+0x18>
 800e704:	2aff      	cmp	r2, #255	@ 0xff
 800e706:	d904      	bls.n	800e712 <__ascii_wctomb+0x14>
 800e708:	228a      	movs	r2, #138	@ 0x8a
 800e70a:	601a      	str	r2, [r3, #0]
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295
 800e710:	4770      	bx	lr
 800e712:	700a      	strb	r2, [r1, #0]
 800e714:	2001      	movs	r0, #1
 800e716:	4770      	bx	lr

0800e718 <fiprintf>:
 800e718:	b40e      	push	{r1, r2, r3}
 800e71a:	b503      	push	{r0, r1, lr}
 800e71c:	4601      	mov	r1, r0
 800e71e:	ab03      	add	r3, sp, #12
 800e720:	4805      	ldr	r0, [pc, #20]	@ (800e738 <fiprintf+0x20>)
 800e722:	f853 2b04 	ldr.w	r2, [r3], #4
 800e726:	6800      	ldr	r0, [r0, #0]
 800e728:	9301      	str	r3, [sp, #4]
 800e72a:	f000 f83f 	bl	800e7ac <_vfiprintf_r>
 800e72e:	b002      	add	sp, #8
 800e730:	f85d eb04 	ldr.w	lr, [sp], #4
 800e734:	b003      	add	sp, #12
 800e736:	4770      	bx	lr
 800e738:	20000024 	.word	0x20000024

0800e73c <abort>:
 800e73c:	b508      	push	{r3, lr}
 800e73e:	2006      	movs	r0, #6
 800e740:	f000 fa08 	bl	800eb54 <raise>
 800e744:	2001      	movs	r0, #1
 800e746:	f7f7 fcf4 	bl	8006132 <_exit>

0800e74a <_malloc_usable_size_r>:
 800e74a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e74e:	1f18      	subs	r0, r3, #4
 800e750:	2b00      	cmp	r3, #0
 800e752:	bfbc      	itt	lt
 800e754:	580b      	ldrlt	r3, [r1, r0]
 800e756:	18c0      	addlt	r0, r0, r3
 800e758:	4770      	bx	lr

0800e75a <__sfputc_r>:
 800e75a:	6893      	ldr	r3, [r2, #8]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	2b00      	cmp	r3, #0
 800e760:	b410      	push	{r4}
 800e762:	6093      	str	r3, [r2, #8]
 800e764:	da08      	bge.n	800e778 <__sfputc_r+0x1e>
 800e766:	6994      	ldr	r4, [r2, #24]
 800e768:	42a3      	cmp	r3, r4
 800e76a:	db01      	blt.n	800e770 <__sfputc_r+0x16>
 800e76c:	290a      	cmp	r1, #10
 800e76e:	d103      	bne.n	800e778 <__sfputc_r+0x1e>
 800e770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e774:	f000 b932 	b.w	800e9dc <__swbuf_r>
 800e778:	6813      	ldr	r3, [r2, #0]
 800e77a:	1c58      	adds	r0, r3, #1
 800e77c:	6010      	str	r0, [r2, #0]
 800e77e:	7019      	strb	r1, [r3, #0]
 800e780:	4608      	mov	r0, r1
 800e782:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <__sfputs_r>:
 800e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78a:	4606      	mov	r6, r0
 800e78c:	460f      	mov	r7, r1
 800e78e:	4614      	mov	r4, r2
 800e790:	18d5      	adds	r5, r2, r3
 800e792:	42ac      	cmp	r4, r5
 800e794:	d101      	bne.n	800e79a <__sfputs_r+0x12>
 800e796:	2000      	movs	r0, #0
 800e798:	e007      	b.n	800e7aa <__sfputs_r+0x22>
 800e79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e79e:	463a      	mov	r2, r7
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	f7ff ffda 	bl	800e75a <__sfputc_r>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	d1f3      	bne.n	800e792 <__sfputs_r+0xa>
 800e7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e7ac <_vfiprintf_r>:
 800e7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b0:	460d      	mov	r5, r1
 800e7b2:	b09d      	sub	sp, #116	@ 0x74
 800e7b4:	4614      	mov	r4, r2
 800e7b6:	4698      	mov	r8, r3
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	b118      	cbz	r0, 800e7c4 <_vfiprintf_r+0x18>
 800e7bc:	6a03      	ldr	r3, [r0, #32]
 800e7be:	b90b      	cbnz	r3, 800e7c4 <_vfiprintf_r+0x18>
 800e7c0:	f7fc fd80 	bl	800b2c4 <__sinit>
 800e7c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7c6:	07d9      	lsls	r1, r3, #31
 800e7c8:	d405      	bmi.n	800e7d6 <_vfiprintf_r+0x2a>
 800e7ca:	89ab      	ldrh	r3, [r5, #12]
 800e7cc:	059a      	lsls	r2, r3, #22
 800e7ce:	d402      	bmi.n	800e7d6 <_vfiprintf_r+0x2a>
 800e7d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7d2:	f7fc ff02 	bl	800b5da <__retarget_lock_acquire_recursive>
 800e7d6:	89ab      	ldrh	r3, [r5, #12]
 800e7d8:	071b      	lsls	r3, r3, #28
 800e7da:	d501      	bpl.n	800e7e0 <_vfiprintf_r+0x34>
 800e7dc:	692b      	ldr	r3, [r5, #16]
 800e7de:	b99b      	cbnz	r3, 800e808 <_vfiprintf_r+0x5c>
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f000 f938 	bl	800ea58 <__swsetup_r>
 800e7e8:	b170      	cbz	r0, 800e808 <_vfiprintf_r+0x5c>
 800e7ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7ec:	07dc      	lsls	r4, r3, #31
 800e7ee:	d504      	bpl.n	800e7fa <_vfiprintf_r+0x4e>
 800e7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f4:	b01d      	add	sp, #116	@ 0x74
 800e7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fa:	89ab      	ldrh	r3, [r5, #12]
 800e7fc:	0598      	lsls	r0, r3, #22
 800e7fe:	d4f7      	bmi.n	800e7f0 <_vfiprintf_r+0x44>
 800e800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e802:	f7fc feeb 	bl	800b5dc <__retarget_lock_release_recursive>
 800e806:	e7f3      	b.n	800e7f0 <_vfiprintf_r+0x44>
 800e808:	2300      	movs	r3, #0
 800e80a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e80c:	2320      	movs	r3, #32
 800e80e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e812:	f8cd 800c 	str.w	r8, [sp, #12]
 800e816:	2330      	movs	r3, #48	@ 0x30
 800e818:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e9c8 <_vfiprintf_r+0x21c>
 800e81c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e820:	f04f 0901 	mov.w	r9, #1
 800e824:	4623      	mov	r3, r4
 800e826:	469a      	mov	sl, r3
 800e828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e82c:	b10a      	cbz	r2, 800e832 <_vfiprintf_r+0x86>
 800e82e:	2a25      	cmp	r2, #37	@ 0x25
 800e830:	d1f9      	bne.n	800e826 <_vfiprintf_r+0x7a>
 800e832:	ebba 0b04 	subs.w	fp, sl, r4
 800e836:	d00b      	beq.n	800e850 <_vfiprintf_r+0xa4>
 800e838:	465b      	mov	r3, fp
 800e83a:	4622      	mov	r2, r4
 800e83c:	4629      	mov	r1, r5
 800e83e:	4630      	mov	r0, r6
 800e840:	f7ff ffa2 	bl	800e788 <__sfputs_r>
 800e844:	3001      	adds	r0, #1
 800e846:	f000 80a7 	beq.w	800e998 <_vfiprintf_r+0x1ec>
 800e84a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e84c:	445a      	add	r2, fp
 800e84e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e850:	f89a 3000 	ldrb.w	r3, [sl]
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 809f 	beq.w	800e998 <_vfiprintf_r+0x1ec>
 800e85a:	2300      	movs	r3, #0
 800e85c:	f04f 32ff 	mov.w	r2, #4294967295
 800e860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e864:	f10a 0a01 	add.w	sl, sl, #1
 800e868:	9304      	str	r3, [sp, #16]
 800e86a:	9307      	str	r3, [sp, #28]
 800e86c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e870:	931a      	str	r3, [sp, #104]	@ 0x68
 800e872:	4654      	mov	r4, sl
 800e874:	2205      	movs	r2, #5
 800e876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e87a:	4853      	ldr	r0, [pc, #332]	@ (800e9c8 <_vfiprintf_r+0x21c>)
 800e87c:	f7f1 fcc8 	bl	8000210 <memchr>
 800e880:	9a04      	ldr	r2, [sp, #16]
 800e882:	b9d8      	cbnz	r0, 800e8bc <_vfiprintf_r+0x110>
 800e884:	06d1      	lsls	r1, r2, #27
 800e886:	bf44      	itt	mi
 800e888:	2320      	movmi	r3, #32
 800e88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e88e:	0713      	lsls	r3, r2, #28
 800e890:	bf44      	itt	mi
 800e892:	232b      	movmi	r3, #43	@ 0x2b
 800e894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e898:	f89a 3000 	ldrb.w	r3, [sl]
 800e89c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e89e:	d015      	beq.n	800e8cc <_vfiprintf_r+0x120>
 800e8a0:	9a07      	ldr	r2, [sp, #28]
 800e8a2:	4654      	mov	r4, sl
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	f04f 0c0a 	mov.w	ip, #10
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8b0:	3b30      	subs	r3, #48	@ 0x30
 800e8b2:	2b09      	cmp	r3, #9
 800e8b4:	d94b      	bls.n	800e94e <_vfiprintf_r+0x1a2>
 800e8b6:	b1b0      	cbz	r0, 800e8e6 <_vfiprintf_r+0x13a>
 800e8b8:	9207      	str	r2, [sp, #28]
 800e8ba:	e014      	b.n	800e8e6 <_vfiprintf_r+0x13a>
 800e8bc:	eba0 0308 	sub.w	r3, r0, r8
 800e8c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	9304      	str	r3, [sp, #16]
 800e8c8:	46a2      	mov	sl, r4
 800e8ca:	e7d2      	b.n	800e872 <_vfiprintf_r+0xc6>
 800e8cc:	9b03      	ldr	r3, [sp, #12]
 800e8ce:	1d19      	adds	r1, r3, #4
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	9103      	str	r1, [sp, #12]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	bfbb      	ittet	lt
 800e8d8:	425b      	neglt	r3, r3
 800e8da:	f042 0202 	orrlt.w	r2, r2, #2
 800e8de:	9307      	strge	r3, [sp, #28]
 800e8e0:	9307      	strlt	r3, [sp, #28]
 800e8e2:	bfb8      	it	lt
 800e8e4:	9204      	strlt	r2, [sp, #16]
 800e8e6:	7823      	ldrb	r3, [r4, #0]
 800e8e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8ea:	d10a      	bne.n	800e902 <_vfiprintf_r+0x156>
 800e8ec:	7863      	ldrb	r3, [r4, #1]
 800e8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8f0:	d132      	bne.n	800e958 <_vfiprintf_r+0x1ac>
 800e8f2:	9b03      	ldr	r3, [sp, #12]
 800e8f4:	1d1a      	adds	r2, r3, #4
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	9203      	str	r2, [sp, #12]
 800e8fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8fe:	3402      	adds	r4, #2
 800e900:	9305      	str	r3, [sp, #20]
 800e902:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e9d8 <_vfiprintf_r+0x22c>
 800e906:	7821      	ldrb	r1, [r4, #0]
 800e908:	2203      	movs	r2, #3
 800e90a:	4650      	mov	r0, sl
 800e90c:	f7f1 fc80 	bl	8000210 <memchr>
 800e910:	b138      	cbz	r0, 800e922 <_vfiprintf_r+0x176>
 800e912:	9b04      	ldr	r3, [sp, #16]
 800e914:	eba0 000a 	sub.w	r0, r0, sl
 800e918:	2240      	movs	r2, #64	@ 0x40
 800e91a:	4082      	lsls	r2, r0
 800e91c:	4313      	orrs	r3, r2
 800e91e:	3401      	adds	r4, #1
 800e920:	9304      	str	r3, [sp, #16]
 800e922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e926:	4829      	ldr	r0, [pc, #164]	@ (800e9cc <_vfiprintf_r+0x220>)
 800e928:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e92c:	2206      	movs	r2, #6
 800e92e:	f7f1 fc6f 	bl	8000210 <memchr>
 800e932:	2800      	cmp	r0, #0
 800e934:	d03f      	beq.n	800e9b6 <_vfiprintf_r+0x20a>
 800e936:	4b26      	ldr	r3, [pc, #152]	@ (800e9d0 <_vfiprintf_r+0x224>)
 800e938:	bb1b      	cbnz	r3, 800e982 <_vfiprintf_r+0x1d6>
 800e93a:	9b03      	ldr	r3, [sp, #12]
 800e93c:	3307      	adds	r3, #7
 800e93e:	f023 0307 	bic.w	r3, r3, #7
 800e942:	3308      	adds	r3, #8
 800e944:	9303      	str	r3, [sp, #12]
 800e946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e948:	443b      	add	r3, r7
 800e94a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e94c:	e76a      	b.n	800e824 <_vfiprintf_r+0x78>
 800e94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e952:	460c      	mov	r4, r1
 800e954:	2001      	movs	r0, #1
 800e956:	e7a8      	b.n	800e8aa <_vfiprintf_r+0xfe>
 800e958:	2300      	movs	r3, #0
 800e95a:	3401      	adds	r4, #1
 800e95c:	9305      	str	r3, [sp, #20]
 800e95e:	4619      	mov	r1, r3
 800e960:	f04f 0c0a 	mov.w	ip, #10
 800e964:	4620      	mov	r0, r4
 800e966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e96a:	3a30      	subs	r2, #48	@ 0x30
 800e96c:	2a09      	cmp	r2, #9
 800e96e:	d903      	bls.n	800e978 <_vfiprintf_r+0x1cc>
 800e970:	2b00      	cmp	r3, #0
 800e972:	d0c6      	beq.n	800e902 <_vfiprintf_r+0x156>
 800e974:	9105      	str	r1, [sp, #20]
 800e976:	e7c4      	b.n	800e902 <_vfiprintf_r+0x156>
 800e978:	fb0c 2101 	mla	r1, ip, r1, r2
 800e97c:	4604      	mov	r4, r0
 800e97e:	2301      	movs	r3, #1
 800e980:	e7f0      	b.n	800e964 <_vfiprintf_r+0x1b8>
 800e982:	ab03      	add	r3, sp, #12
 800e984:	9300      	str	r3, [sp, #0]
 800e986:	462a      	mov	r2, r5
 800e988:	4b12      	ldr	r3, [pc, #72]	@ (800e9d4 <_vfiprintf_r+0x228>)
 800e98a:	a904      	add	r1, sp, #16
 800e98c:	4630      	mov	r0, r6
 800e98e:	f7fb fe49 	bl	800a624 <_printf_float>
 800e992:	4607      	mov	r7, r0
 800e994:	1c78      	adds	r0, r7, #1
 800e996:	d1d6      	bne.n	800e946 <_vfiprintf_r+0x19a>
 800e998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e99a:	07d9      	lsls	r1, r3, #31
 800e99c:	d405      	bmi.n	800e9aa <_vfiprintf_r+0x1fe>
 800e99e:	89ab      	ldrh	r3, [r5, #12]
 800e9a0:	059a      	lsls	r2, r3, #22
 800e9a2:	d402      	bmi.n	800e9aa <_vfiprintf_r+0x1fe>
 800e9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9a6:	f7fc fe19 	bl	800b5dc <__retarget_lock_release_recursive>
 800e9aa:	89ab      	ldrh	r3, [r5, #12]
 800e9ac:	065b      	lsls	r3, r3, #25
 800e9ae:	f53f af1f 	bmi.w	800e7f0 <_vfiprintf_r+0x44>
 800e9b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9b4:	e71e      	b.n	800e7f4 <_vfiprintf_r+0x48>
 800e9b6:	ab03      	add	r3, sp, #12
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	462a      	mov	r2, r5
 800e9bc:	4b05      	ldr	r3, [pc, #20]	@ (800e9d4 <_vfiprintf_r+0x228>)
 800e9be:	a904      	add	r1, sp, #16
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	f7fc f8c7 	bl	800ab54 <_printf_i>
 800e9c6:	e7e4      	b.n	800e992 <_vfiprintf_r+0x1e6>
 800e9c8:	080105cd 	.word	0x080105cd
 800e9cc:	080105d7 	.word	0x080105d7
 800e9d0:	0800a625 	.word	0x0800a625
 800e9d4:	0800e789 	.word	0x0800e789
 800e9d8:	080105d3 	.word	0x080105d3

0800e9dc <__swbuf_r>:
 800e9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9de:	460e      	mov	r6, r1
 800e9e0:	4614      	mov	r4, r2
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	b118      	cbz	r0, 800e9ee <__swbuf_r+0x12>
 800e9e6:	6a03      	ldr	r3, [r0, #32]
 800e9e8:	b90b      	cbnz	r3, 800e9ee <__swbuf_r+0x12>
 800e9ea:	f7fc fc6b 	bl	800b2c4 <__sinit>
 800e9ee:	69a3      	ldr	r3, [r4, #24]
 800e9f0:	60a3      	str	r3, [r4, #8]
 800e9f2:	89a3      	ldrh	r3, [r4, #12]
 800e9f4:	071a      	lsls	r2, r3, #28
 800e9f6:	d501      	bpl.n	800e9fc <__swbuf_r+0x20>
 800e9f8:	6923      	ldr	r3, [r4, #16]
 800e9fa:	b943      	cbnz	r3, 800ea0e <__swbuf_r+0x32>
 800e9fc:	4621      	mov	r1, r4
 800e9fe:	4628      	mov	r0, r5
 800ea00:	f000 f82a 	bl	800ea58 <__swsetup_r>
 800ea04:	b118      	cbz	r0, 800ea0e <__swbuf_r+0x32>
 800ea06:	f04f 37ff 	mov.w	r7, #4294967295
 800ea0a:	4638      	mov	r0, r7
 800ea0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	6922      	ldr	r2, [r4, #16]
 800ea12:	1a98      	subs	r0, r3, r2
 800ea14:	6963      	ldr	r3, [r4, #20]
 800ea16:	b2f6      	uxtb	r6, r6
 800ea18:	4283      	cmp	r3, r0
 800ea1a:	4637      	mov	r7, r6
 800ea1c:	dc05      	bgt.n	800ea2a <__swbuf_r+0x4e>
 800ea1e:	4621      	mov	r1, r4
 800ea20:	4628      	mov	r0, r5
 800ea22:	f7ff fa53 	bl	800decc <_fflush_r>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d1ed      	bne.n	800ea06 <__swbuf_r+0x2a>
 800ea2a:	68a3      	ldr	r3, [r4, #8]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	60a3      	str	r3, [r4, #8]
 800ea30:	6823      	ldr	r3, [r4, #0]
 800ea32:	1c5a      	adds	r2, r3, #1
 800ea34:	6022      	str	r2, [r4, #0]
 800ea36:	701e      	strb	r6, [r3, #0]
 800ea38:	6962      	ldr	r2, [r4, #20]
 800ea3a:	1c43      	adds	r3, r0, #1
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d004      	beq.n	800ea4a <__swbuf_r+0x6e>
 800ea40:	89a3      	ldrh	r3, [r4, #12]
 800ea42:	07db      	lsls	r3, r3, #31
 800ea44:	d5e1      	bpl.n	800ea0a <__swbuf_r+0x2e>
 800ea46:	2e0a      	cmp	r6, #10
 800ea48:	d1df      	bne.n	800ea0a <__swbuf_r+0x2e>
 800ea4a:	4621      	mov	r1, r4
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	f7ff fa3d 	bl	800decc <_fflush_r>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d0d9      	beq.n	800ea0a <__swbuf_r+0x2e>
 800ea56:	e7d6      	b.n	800ea06 <__swbuf_r+0x2a>

0800ea58 <__swsetup_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4b29      	ldr	r3, [pc, #164]	@ (800eb00 <__swsetup_r+0xa8>)
 800ea5c:	4605      	mov	r5, r0
 800ea5e:	6818      	ldr	r0, [r3, #0]
 800ea60:	460c      	mov	r4, r1
 800ea62:	b118      	cbz	r0, 800ea6c <__swsetup_r+0x14>
 800ea64:	6a03      	ldr	r3, [r0, #32]
 800ea66:	b90b      	cbnz	r3, 800ea6c <__swsetup_r+0x14>
 800ea68:	f7fc fc2c 	bl	800b2c4 <__sinit>
 800ea6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea70:	0719      	lsls	r1, r3, #28
 800ea72:	d422      	bmi.n	800eaba <__swsetup_r+0x62>
 800ea74:	06da      	lsls	r2, r3, #27
 800ea76:	d407      	bmi.n	800ea88 <__swsetup_r+0x30>
 800ea78:	2209      	movs	r2, #9
 800ea7a:	602a      	str	r2, [r5, #0]
 800ea7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea80:	81a3      	strh	r3, [r4, #12]
 800ea82:	f04f 30ff 	mov.w	r0, #4294967295
 800ea86:	e033      	b.n	800eaf0 <__swsetup_r+0x98>
 800ea88:	0758      	lsls	r0, r3, #29
 800ea8a:	d512      	bpl.n	800eab2 <__swsetup_r+0x5a>
 800ea8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea8e:	b141      	cbz	r1, 800eaa2 <__swsetup_r+0x4a>
 800ea90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea94:	4299      	cmp	r1, r3
 800ea96:	d002      	beq.n	800ea9e <__swsetup_r+0x46>
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f7fd fc0d 	bl	800c2b8 <_free_r>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	6363      	str	r3, [r4, #52]	@ 0x34
 800eaa2:	89a3      	ldrh	r3, [r4, #12]
 800eaa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eaa8:	81a3      	strh	r3, [r4, #12]
 800eaaa:	2300      	movs	r3, #0
 800eaac:	6063      	str	r3, [r4, #4]
 800eaae:	6923      	ldr	r3, [r4, #16]
 800eab0:	6023      	str	r3, [r4, #0]
 800eab2:	89a3      	ldrh	r3, [r4, #12]
 800eab4:	f043 0308 	orr.w	r3, r3, #8
 800eab8:	81a3      	strh	r3, [r4, #12]
 800eaba:	6923      	ldr	r3, [r4, #16]
 800eabc:	b94b      	cbnz	r3, 800ead2 <__swsetup_r+0x7a>
 800eabe:	89a3      	ldrh	r3, [r4, #12]
 800eac0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eac8:	d003      	beq.n	800ead2 <__swsetup_r+0x7a>
 800eaca:	4621      	mov	r1, r4
 800eacc:	4628      	mov	r0, r5
 800eace:	f000 f883 	bl	800ebd8 <__smakebuf_r>
 800ead2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ead6:	f013 0201 	ands.w	r2, r3, #1
 800eada:	d00a      	beq.n	800eaf2 <__swsetup_r+0x9a>
 800eadc:	2200      	movs	r2, #0
 800eade:	60a2      	str	r2, [r4, #8]
 800eae0:	6962      	ldr	r2, [r4, #20]
 800eae2:	4252      	negs	r2, r2
 800eae4:	61a2      	str	r2, [r4, #24]
 800eae6:	6922      	ldr	r2, [r4, #16]
 800eae8:	b942      	cbnz	r2, 800eafc <__swsetup_r+0xa4>
 800eaea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eaee:	d1c5      	bne.n	800ea7c <__swsetup_r+0x24>
 800eaf0:	bd38      	pop	{r3, r4, r5, pc}
 800eaf2:	0799      	lsls	r1, r3, #30
 800eaf4:	bf58      	it	pl
 800eaf6:	6962      	ldrpl	r2, [r4, #20]
 800eaf8:	60a2      	str	r2, [r4, #8]
 800eafa:	e7f4      	b.n	800eae6 <__swsetup_r+0x8e>
 800eafc:	2000      	movs	r0, #0
 800eafe:	e7f7      	b.n	800eaf0 <__swsetup_r+0x98>
 800eb00:	20000024 	.word	0x20000024

0800eb04 <_raise_r>:
 800eb04:	291f      	cmp	r1, #31
 800eb06:	b538      	push	{r3, r4, r5, lr}
 800eb08:	4605      	mov	r5, r0
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	d904      	bls.n	800eb18 <_raise_r+0x14>
 800eb0e:	2316      	movs	r3, #22
 800eb10:	6003      	str	r3, [r0, #0]
 800eb12:	f04f 30ff 	mov.w	r0, #4294967295
 800eb16:	bd38      	pop	{r3, r4, r5, pc}
 800eb18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb1a:	b112      	cbz	r2, 800eb22 <_raise_r+0x1e>
 800eb1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb20:	b94b      	cbnz	r3, 800eb36 <_raise_r+0x32>
 800eb22:	4628      	mov	r0, r5
 800eb24:	f000 f830 	bl	800eb88 <_getpid_r>
 800eb28:	4622      	mov	r2, r4
 800eb2a:	4601      	mov	r1, r0
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb32:	f000 b817 	b.w	800eb64 <_kill_r>
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d00a      	beq.n	800eb50 <_raise_r+0x4c>
 800eb3a:	1c59      	adds	r1, r3, #1
 800eb3c:	d103      	bne.n	800eb46 <_raise_r+0x42>
 800eb3e:	2316      	movs	r3, #22
 800eb40:	6003      	str	r3, [r0, #0]
 800eb42:	2001      	movs	r0, #1
 800eb44:	e7e7      	b.n	800eb16 <_raise_r+0x12>
 800eb46:	2100      	movs	r1, #0
 800eb48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	4798      	blx	r3
 800eb50:	2000      	movs	r0, #0
 800eb52:	e7e0      	b.n	800eb16 <_raise_r+0x12>

0800eb54 <raise>:
 800eb54:	4b02      	ldr	r3, [pc, #8]	@ (800eb60 <raise+0xc>)
 800eb56:	4601      	mov	r1, r0
 800eb58:	6818      	ldr	r0, [r3, #0]
 800eb5a:	f7ff bfd3 	b.w	800eb04 <_raise_r>
 800eb5e:	bf00      	nop
 800eb60:	20000024 	.word	0x20000024

0800eb64 <_kill_r>:
 800eb64:	b538      	push	{r3, r4, r5, lr}
 800eb66:	4d07      	ldr	r5, [pc, #28]	@ (800eb84 <_kill_r+0x20>)
 800eb68:	2300      	movs	r3, #0
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	4608      	mov	r0, r1
 800eb6e:	4611      	mov	r1, r2
 800eb70:	602b      	str	r3, [r5, #0]
 800eb72:	f7f7 face 	bl	8006112 <_kill>
 800eb76:	1c43      	adds	r3, r0, #1
 800eb78:	d102      	bne.n	800eb80 <_kill_r+0x1c>
 800eb7a:	682b      	ldr	r3, [r5, #0]
 800eb7c:	b103      	cbz	r3, 800eb80 <_kill_r+0x1c>
 800eb7e:	6023      	str	r3, [r4, #0]
 800eb80:	bd38      	pop	{r3, r4, r5, pc}
 800eb82:	bf00      	nop
 800eb84:	20000ee8 	.word	0x20000ee8

0800eb88 <_getpid_r>:
 800eb88:	f7f7 babb 	b.w	8006102 <_getpid>

0800eb8c <__swhatbuf_r>:
 800eb8c:	b570      	push	{r4, r5, r6, lr}
 800eb8e:	460c      	mov	r4, r1
 800eb90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb94:	2900      	cmp	r1, #0
 800eb96:	b096      	sub	sp, #88	@ 0x58
 800eb98:	4615      	mov	r5, r2
 800eb9a:	461e      	mov	r6, r3
 800eb9c:	da0d      	bge.n	800ebba <__swhatbuf_r+0x2e>
 800eb9e:	89a3      	ldrh	r3, [r4, #12]
 800eba0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eba4:	f04f 0100 	mov.w	r1, #0
 800eba8:	bf14      	ite	ne
 800ebaa:	2340      	movne	r3, #64	@ 0x40
 800ebac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	6031      	str	r1, [r6, #0]
 800ebb4:	602b      	str	r3, [r5, #0]
 800ebb6:	b016      	add	sp, #88	@ 0x58
 800ebb8:	bd70      	pop	{r4, r5, r6, pc}
 800ebba:	466a      	mov	r2, sp
 800ebbc:	f000 f848 	bl	800ec50 <_fstat_r>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	dbec      	blt.n	800eb9e <__swhatbuf_r+0x12>
 800ebc4:	9901      	ldr	r1, [sp, #4]
 800ebc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ebca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ebce:	4259      	negs	r1, r3
 800ebd0:	4159      	adcs	r1, r3
 800ebd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebd6:	e7eb      	b.n	800ebb0 <__swhatbuf_r+0x24>

0800ebd8 <__smakebuf_r>:
 800ebd8:	898b      	ldrh	r3, [r1, #12]
 800ebda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebdc:	079d      	lsls	r5, r3, #30
 800ebde:	4606      	mov	r6, r0
 800ebe0:	460c      	mov	r4, r1
 800ebe2:	d507      	bpl.n	800ebf4 <__smakebuf_r+0x1c>
 800ebe4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	6123      	str	r3, [r4, #16]
 800ebec:	2301      	movs	r3, #1
 800ebee:	6163      	str	r3, [r4, #20]
 800ebf0:	b003      	add	sp, #12
 800ebf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebf4:	ab01      	add	r3, sp, #4
 800ebf6:	466a      	mov	r2, sp
 800ebf8:	f7ff ffc8 	bl	800eb8c <__swhatbuf_r>
 800ebfc:	9f00      	ldr	r7, [sp, #0]
 800ebfe:	4605      	mov	r5, r0
 800ec00:	4639      	mov	r1, r7
 800ec02:	4630      	mov	r0, r6
 800ec04:	f7fd fbcc 	bl	800c3a0 <_malloc_r>
 800ec08:	b948      	cbnz	r0, 800ec1e <__smakebuf_r+0x46>
 800ec0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec0e:	059a      	lsls	r2, r3, #22
 800ec10:	d4ee      	bmi.n	800ebf0 <__smakebuf_r+0x18>
 800ec12:	f023 0303 	bic.w	r3, r3, #3
 800ec16:	f043 0302 	orr.w	r3, r3, #2
 800ec1a:	81a3      	strh	r3, [r4, #12]
 800ec1c:	e7e2      	b.n	800ebe4 <__smakebuf_r+0xc>
 800ec1e:	89a3      	ldrh	r3, [r4, #12]
 800ec20:	6020      	str	r0, [r4, #0]
 800ec22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec26:	81a3      	strh	r3, [r4, #12]
 800ec28:	9b01      	ldr	r3, [sp, #4]
 800ec2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec2e:	b15b      	cbz	r3, 800ec48 <__smakebuf_r+0x70>
 800ec30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec34:	4630      	mov	r0, r6
 800ec36:	f000 f81d 	bl	800ec74 <_isatty_r>
 800ec3a:	b128      	cbz	r0, 800ec48 <__smakebuf_r+0x70>
 800ec3c:	89a3      	ldrh	r3, [r4, #12]
 800ec3e:	f023 0303 	bic.w	r3, r3, #3
 800ec42:	f043 0301 	orr.w	r3, r3, #1
 800ec46:	81a3      	strh	r3, [r4, #12]
 800ec48:	89a3      	ldrh	r3, [r4, #12]
 800ec4a:	431d      	orrs	r5, r3
 800ec4c:	81a5      	strh	r5, [r4, #12]
 800ec4e:	e7cf      	b.n	800ebf0 <__smakebuf_r+0x18>

0800ec50 <_fstat_r>:
 800ec50:	b538      	push	{r3, r4, r5, lr}
 800ec52:	4d07      	ldr	r5, [pc, #28]	@ (800ec70 <_fstat_r+0x20>)
 800ec54:	2300      	movs	r3, #0
 800ec56:	4604      	mov	r4, r0
 800ec58:	4608      	mov	r0, r1
 800ec5a:	4611      	mov	r1, r2
 800ec5c:	602b      	str	r3, [r5, #0]
 800ec5e:	f7f7 fab8 	bl	80061d2 <_fstat>
 800ec62:	1c43      	adds	r3, r0, #1
 800ec64:	d102      	bne.n	800ec6c <_fstat_r+0x1c>
 800ec66:	682b      	ldr	r3, [r5, #0]
 800ec68:	b103      	cbz	r3, 800ec6c <_fstat_r+0x1c>
 800ec6a:	6023      	str	r3, [r4, #0]
 800ec6c:	bd38      	pop	{r3, r4, r5, pc}
 800ec6e:	bf00      	nop
 800ec70:	20000ee8 	.word	0x20000ee8

0800ec74 <_isatty_r>:
 800ec74:	b538      	push	{r3, r4, r5, lr}
 800ec76:	4d06      	ldr	r5, [pc, #24]	@ (800ec90 <_isatty_r+0x1c>)
 800ec78:	2300      	movs	r3, #0
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	4608      	mov	r0, r1
 800ec7e:	602b      	str	r3, [r5, #0]
 800ec80:	f7f7 fab7 	bl	80061f2 <_isatty>
 800ec84:	1c43      	adds	r3, r0, #1
 800ec86:	d102      	bne.n	800ec8e <_isatty_r+0x1a>
 800ec88:	682b      	ldr	r3, [r5, #0]
 800ec8a:	b103      	cbz	r3, 800ec8e <_isatty_r+0x1a>
 800ec8c:	6023      	str	r3, [r4, #0]
 800ec8e:	bd38      	pop	{r3, r4, r5, pc}
 800ec90:	20000ee8 	.word	0x20000ee8

0800ec94 <powf>:
 800ec94:	b508      	push	{r3, lr}
 800ec96:	ed2d 8b04 	vpush	{d8-d9}
 800ec9a:	eeb0 8a60 	vmov.f32	s16, s1
 800ec9e:	eeb0 9a40 	vmov.f32	s18, s0
 800eca2:	f000 f881 	bl	800eda8 <__ieee754_powf>
 800eca6:	eeb4 8a48 	vcmp.f32	s16, s16
 800ecaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecae:	eef0 8a40 	vmov.f32	s17, s0
 800ecb2:	d63e      	bvs.n	800ed32 <powf+0x9e>
 800ecb4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ecb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecbc:	d112      	bne.n	800ece4 <powf+0x50>
 800ecbe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ecc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc6:	d039      	beq.n	800ed3c <powf+0xa8>
 800ecc8:	eeb0 0a48 	vmov.f32	s0, s16
 800eccc:	f000 f85f 	bl	800ed8e <finitef>
 800ecd0:	b378      	cbz	r0, 800ed32 <powf+0x9e>
 800ecd2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ecd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecda:	d52a      	bpl.n	800ed32 <powf+0x9e>
 800ecdc:	f7fc fc52 	bl	800b584 <__errno>
 800ece0:	2322      	movs	r3, #34	@ 0x22
 800ece2:	e014      	b.n	800ed0e <powf+0x7a>
 800ece4:	f000 f853 	bl	800ed8e <finitef>
 800ece8:	b998      	cbnz	r0, 800ed12 <powf+0x7e>
 800ecea:	eeb0 0a49 	vmov.f32	s0, s18
 800ecee:	f000 f84e 	bl	800ed8e <finitef>
 800ecf2:	b170      	cbz	r0, 800ed12 <powf+0x7e>
 800ecf4:	eeb0 0a48 	vmov.f32	s0, s16
 800ecf8:	f000 f849 	bl	800ed8e <finitef>
 800ecfc:	b148      	cbz	r0, 800ed12 <powf+0x7e>
 800ecfe:	eef4 8a68 	vcmp.f32	s17, s17
 800ed02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed06:	d7e9      	bvc.n	800ecdc <powf+0x48>
 800ed08:	f7fc fc3c 	bl	800b584 <__errno>
 800ed0c:	2321      	movs	r3, #33	@ 0x21
 800ed0e:	6003      	str	r3, [r0, #0]
 800ed10:	e00f      	b.n	800ed32 <powf+0x9e>
 800ed12:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ed16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1a:	d10a      	bne.n	800ed32 <powf+0x9e>
 800ed1c:	eeb0 0a49 	vmov.f32	s0, s18
 800ed20:	f000 f835 	bl	800ed8e <finitef>
 800ed24:	b128      	cbz	r0, 800ed32 <powf+0x9e>
 800ed26:	eeb0 0a48 	vmov.f32	s0, s16
 800ed2a:	f000 f830 	bl	800ed8e <finitef>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	d1d4      	bne.n	800ecdc <powf+0x48>
 800ed32:	eeb0 0a68 	vmov.f32	s0, s17
 800ed36:	ecbd 8b04 	vpop	{d8-d9}
 800ed3a:	bd08      	pop	{r3, pc}
 800ed3c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ed40:	e7f7      	b.n	800ed32 <powf+0x9e>
	...

0800ed44 <sqrtf>:
 800ed44:	b508      	push	{r3, lr}
 800ed46:	ed2d 8b02 	vpush	{d8}
 800ed4a:	eeb0 8a40 	vmov.f32	s16, s0
 800ed4e:	f000 f828 	bl	800eda2 <__ieee754_sqrtf>
 800ed52:	eeb4 8a48 	vcmp.f32	s16, s16
 800ed56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5a:	d60c      	bvs.n	800ed76 <sqrtf+0x32>
 800ed5c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ed7c <sqrtf+0x38>
 800ed60:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ed64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed68:	d505      	bpl.n	800ed76 <sqrtf+0x32>
 800ed6a:	f7fc fc0b 	bl	800b584 <__errno>
 800ed6e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ed72:	2321      	movs	r3, #33	@ 0x21
 800ed74:	6003      	str	r3, [r0, #0]
 800ed76:	ecbd 8b02 	vpop	{d8}
 800ed7a:	bd08      	pop	{r3, pc}
 800ed7c:	00000000 	.word	0x00000000

0800ed80 <fabsf>:
 800ed80:	ee10 3a10 	vmov	r3, s0
 800ed84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed88:	ee00 3a10 	vmov	s0, r3
 800ed8c:	4770      	bx	lr

0800ed8e <finitef>:
 800ed8e:	ee10 3a10 	vmov	r3, s0
 800ed92:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ed96:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ed9a:	bfac      	ite	ge
 800ed9c:	2000      	movge	r0, #0
 800ed9e:	2001      	movlt	r0, #1
 800eda0:	4770      	bx	lr

0800eda2 <__ieee754_sqrtf>:
 800eda2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800eda6:	4770      	bx	lr

0800eda8 <__ieee754_powf>:
 800eda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edac:	ee10 4a90 	vmov	r4, s1
 800edb0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800edb4:	ed2d 8b02 	vpush	{d8}
 800edb8:	ee10 6a10 	vmov	r6, s0
 800edbc:	eeb0 8a40 	vmov.f32	s16, s0
 800edc0:	eef0 8a60 	vmov.f32	s17, s1
 800edc4:	d10c      	bne.n	800ede0 <__ieee754_powf+0x38>
 800edc6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800edca:	0076      	lsls	r6, r6, #1
 800edcc:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800edd0:	f240 8274 	bls.w	800f2bc <__ieee754_powf+0x514>
 800edd4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800edd8:	ecbd 8b02 	vpop	{d8}
 800eddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ede0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ede4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ede8:	d802      	bhi.n	800edf0 <__ieee754_powf+0x48>
 800edea:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800edee:	d908      	bls.n	800ee02 <__ieee754_powf+0x5a>
 800edf0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800edf4:	d1ee      	bne.n	800edd4 <__ieee754_powf+0x2c>
 800edf6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800edfa:	0064      	lsls	r4, r4, #1
 800edfc:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ee00:	e7e6      	b.n	800edd0 <__ieee754_powf+0x28>
 800ee02:	2e00      	cmp	r6, #0
 800ee04:	da1f      	bge.n	800ee46 <__ieee754_powf+0x9e>
 800ee06:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ee0a:	f080 8260 	bcs.w	800f2ce <__ieee754_powf+0x526>
 800ee0e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ee12:	d32f      	bcc.n	800ee74 <__ieee754_powf+0xcc>
 800ee14:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ee18:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ee1c:	fa49 f503 	asr.w	r5, r9, r3
 800ee20:	fa05 f303 	lsl.w	r3, r5, r3
 800ee24:	454b      	cmp	r3, r9
 800ee26:	d123      	bne.n	800ee70 <__ieee754_powf+0xc8>
 800ee28:	f005 0501 	and.w	r5, r5, #1
 800ee2c:	f1c5 0502 	rsb	r5, r5, #2
 800ee30:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ee34:	d11f      	bne.n	800ee76 <__ieee754_powf+0xce>
 800ee36:	2c00      	cmp	r4, #0
 800ee38:	f280 8246 	bge.w	800f2c8 <__ieee754_powf+0x520>
 800ee3c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ee40:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ee44:	e7c8      	b.n	800edd8 <__ieee754_powf+0x30>
 800ee46:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ee4a:	d111      	bne.n	800ee70 <__ieee754_powf+0xc8>
 800ee4c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ee50:	f000 8234 	beq.w	800f2bc <__ieee754_powf+0x514>
 800ee54:	d906      	bls.n	800ee64 <__ieee754_powf+0xbc>
 800ee56:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800f16c <__ieee754_powf+0x3c4>
 800ee5a:	2c00      	cmp	r4, #0
 800ee5c:	bfa8      	it	ge
 800ee5e:	eeb0 0a68 	vmovge.f32	s0, s17
 800ee62:	e7b9      	b.n	800edd8 <__ieee754_powf+0x30>
 800ee64:	2c00      	cmp	r4, #0
 800ee66:	f280 822c 	bge.w	800f2c2 <__ieee754_powf+0x51a>
 800ee6a:	eeb1 0a68 	vneg.f32	s0, s17
 800ee6e:	e7b3      	b.n	800edd8 <__ieee754_powf+0x30>
 800ee70:	2500      	movs	r5, #0
 800ee72:	e7dd      	b.n	800ee30 <__ieee754_powf+0x88>
 800ee74:	2500      	movs	r5, #0
 800ee76:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ee7a:	d102      	bne.n	800ee82 <__ieee754_powf+0xda>
 800ee7c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ee80:	e7aa      	b.n	800edd8 <__ieee754_powf+0x30>
 800ee82:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ee86:	f040 8227 	bne.w	800f2d8 <__ieee754_powf+0x530>
 800ee8a:	2e00      	cmp	r6, #0
 800ee8c:	f2c0 8224 	blt.w	800f2d8 <__ieee754_powf+0x530>
 800ee90:	eeb0 0a48 	vmov.f32	s0, s16
 800ee94:	ecbd 8b02 	vpop	{d8}
 800ee98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee9c:	f7ff bf81 	b.w	800eda2 <__ieee754_sqrtf>
 800eea0:	2d01      	cmp	r5, #1
 800eea2:	d199      	bne.n	800edd8 <__ieee754_powf+0x30>
 800eea4:	eeb1 0a40 	vneg.f32	s0, s0
 800eea8:	e796      	b.n	800edd8 <__ieee754_powf+0x30>
 800eeaa:	0ff0      	lsrs	r0, r6, #31
 800eeac:	3801      	subs	r0, #1
 800eeae:	ea55 0300 	orrs.w	r3, r5, r0
 800eeb2:	d104      	bne.n	800eebe <__ieee754_powf+0x116>
 800eeb4:	ee38 8a48 	vsub.f32	s16, s16, s16
 800eeb8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800eebc:	e78c      	b.n	800edd8 <__ieee754_powf+0x30>
 800eebe:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800eec2:	d96d      	bls.n	800efa0 <__ieee754_powf+0x1f8>
 800eec4:	4baa      	ldr	r3, [pc, #680]	@ (800f170 <__ieee754_powf+0x3c8>)
 800eec6:	4598      	cmp	r8, r3
 800eec8:	d808      	bhi.n	800eedc <__ieee754_powf+0x134>
 800eeca:	2c00      	cmp	r4, #0
 800eecc:	da0b      	bge.n	800eee6 <__ieee754_powf+0x13e>
 800eece:	2000      	movs	r0, #0
 800eed0:	ecbd 8b02 	vpop	{d8}
 800eed4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eed8:	f000 baba 	b.w	800f450 <__math_oflowf>
 800eedc:	4ba5      	ldr	r3, [pc, #660]	@ (800f174 <__ieee754_powf+0x3cc>)
 800eede:	4598      	cmp	r8, r3
 800eee0:	d908      	bls.n	800eef4 <__ieee754_powf+0x14c>
 800eee2:	2c00      	cmp	r4, #0
 800eee4:	dcf3      	bgt.n	800eece <__ieee754_powf+0x126>
 800eee6:	2000      	movs	r0, #0
 800eee8:	ecbd 8b02 	vpop	{d8}
 800eeec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef0:	f000 baa8 	b.w	800f444 <__math_uflowf>
 800eef4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800eef8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eefc:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800f178 <__ieee754_powf+0x3d0>
 800ef00:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800ef04:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ef08:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ef0c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ef10:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ef14:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800f17c <__ieee754_powf+0x3d4>
 800ef18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef1c:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800f180 <__ieee754_powf+0x3d8>
 800ef20:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ef24:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800f184 <__ieee754_powf+0x3dc>
 800ef28:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ef2c:	eeb0 7a67 	vmov.f32	s14, s15
 800ef30:	eea0 7a26 	vfma.f32	s14, s0, s13
 800ef34:	ee17 3a10 	vmov	r3, s14
 800ef38:	f36f 030b 	bfc	r3, #0, #12
 800ef3c:	ee07 3a10 	vmov	s14, r3
 800ef40:	eeb0 6a47 	vmov.f32	s12, s14
 800ef44:	eea0 6a66 	vfms.f32	s12, s0, s13
 800ef48:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ef4c:	3d01      	subs	r5, #1
 800ef4e:	4305      	orrs	r5, r0
 800ef50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef54:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800ef58:	f36f 040b 	bfc	r4, #0, #12
 800ef5c:	bf18      	it	ne
 800ef5e:	eeb0 8a66 	vmovne.f32	s16, s13
 800ef62:	ee06 4a90 	vmov	s13, r4
 800ef66:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ef6a:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800ef6e:	ee67 7a26 	vmul.f32	s15, s14, s13
 800ef72:	eee6 0a07 	vfma.f32	s1, s12, s14
 800ef76:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ef7a:	ee17 1a10 	vmov	r1, s14
 800ef7e:	2900      	cmp	r1, #0
 800ef80:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ef84:	f340 80dd 	ble.w	800f142 <__ieee754_powf+0x39a>
 800ef88:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ef8c:	f240 80ca 	bls.w	800f124 <__ieee754_powf+0x37c>
 800ef90:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ef94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef98:	bf4c      	ite	mi
 800ef9a:	2001      	movmi	r0, #1
 800ef9c:	2000      	movpl	r0, #0
 800ef9e:	e797      	b.n	800eed0 <__ieee754_powf+0x128>
 800efa0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800efa4:	bf01      	itttt	eq
 800efa6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f188 <__ieee754_powf+0x3e0>
 800efaa:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800efae:	f06f 0317 	mvneq.w	r3, #23
 800efb2:	ee17 7a90 	vmoveq	r7, s15
 800efb6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800efba:	bf18      	it	ne
 800efbc:	2300      	movne	r3, #0
 800efbe:	3a7f      	subs	r2, #127	@ 0x7f
 800efc0:	441a      	add	r2, r3
 800efc2:	4b72      	ldr	r3, [pc, #456]	@ (800f18c <__ieee754_powf+0x3e4>)
 800efc4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800efc8:	429f      	cmp	r7, r3
 800efca:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800efce:	dd06      	ble.n	800efde <__ieee754_powf+0x236>
 800efd0:	4b6f      	ldr	r3, [pc, #444]	@ (800f190 <__ieee754_powf+0x3e8>)
 800efd2:	429f      	cmp	r7, r3
 800efd4:	f340 80a4 	ble.w	800f120 <__ieee754_powf+0x378>
 800efd8:	3201      	adds	r2, #1
 800efda:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800efde:	2600      	movs	r6, #0
 800efe0:	4b6c      	ldr	r3, [pc, #432]	@ (800f194 <__ieee754_powf+0x3ec>)
 800efe2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800efe6:	ee07 1a10 	vmov	s14, r1
 800efea:	edd3 5a00 	vldr	s11, [r3]
 800efee:	4b6a      	ldr	r3, [pc, #424]	@ (800f198 <__ieee754_powf+0x3f0>)
 800eff0:	ee75 7a87 	vadd.f32	s15, s11, s14
 800eff4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eff8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800effc:	1049      	asrs	r1, r1, #1
 800effe:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f002:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f006:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f00a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f00e:	ee07 1a90 	vmov	s15, r1
 800f012:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f016:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f01a:	ee15 7a10 	vmov	r7, s10
 800f01e:	401f      	ands	r7, r3
 800f020:	ee06 7a90 	vmov	s13, r7
 800f024:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f028:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f02c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f030:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f034:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f19c <__ieee754_powf+0x3f4>
 800f038:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f1a0 <__ieee754_powf+0x3f8>
 800f03c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f040:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f1a4 <__ieee754_powf+0x3fc>
 800f044:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f048:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f178 <__ieee754_powf+0x3d0>
 800f04c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f050:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f1a8 <__ieee754_powf+0x400>
 800f054:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f058:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f1ac <__ieee754_powf+0x404>
 800f05c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f060:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f064:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f068:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f06c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f070:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f074:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f078:	eef0 5a67 	vmov.f32	s11, s15
 800f07c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f080:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f084:	ee15 1a90 	vmov	r1, s11
 800f088:	4019      	ands	r1, r3
 800f08a:	ee05 1a90 	vmov	s11, r1
 800f08e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f092:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f09a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f09e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f0a2:	eeb0 6a67 	vmov.f32	s12, s15
 800f0a6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f0aa:	ee16 1a10 	vmov	r1, s12
 800f0ae:	4019      	ands	r1, r3
 800f0b0:	ee06 1a10 	vmov	s12, r1
 800f0b4:	eeb0 7a46 	vmov.f32	s14, s12
 800f0b8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f0bc:	493c      	ldr	r1, [pc, #240]	@ (800f1b0 <__ieee754_powf+0x408>)
 800f0be:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f0c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0c6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f1b4 <__ieee754_powf+0x40c>
 800f0ca:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f1b8 <__ieee754_powf+0x410>
 800f0ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0d2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f1bc <__ieee754_powf+0x414>
 800f0d6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f0da:	ed91 7a00 	vldr	s14, [r1]
 800f0de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0e2:	ee07 2a10 	vmov	s14, r2
 800f0e6:	4a36      	ldr	r2, [pc, #216]	@ (800f1c0 <__ieee754_powf+0x418>)
 800f0e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800f0ec:	eeb0 7a67 	vmov.f32	s14, s15
 800f0f0:	eea6 7a25 	vfma.f32	s14, s12, s11
 800f0f4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f0f8:	ed92 5a00 	vldr	s10, [r2]
 800f0fc:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f100:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f104:	ee17 2a10 	vmov	r2, s14
 800f108:	401a      	ands	r2, r3
 800f10a:	ee07 2a10 	vmov	s14, r2
 800f10e:	ee77 6a66 	vsub.f32	s13, s14, s13
 800f112:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f116:	eee6 6a65 	vfms.f32	s13, s12, s11
 800f11a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f11e:	e715      	b.n	800ef4c <__ieee754_powf+0x1a4>
 800f120:	2601      	movs	r6, #1
 800f122:	e75d      	b.n	800efe0 <__ieee754_powf+0x238>
 800f124:	d152      	bne.n	800f1cc <__ieee754_powf+0x424>
 800f126:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f1c4 <__ieee754_powf+0x41c>
 800f12a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f12e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f132:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13a:	f73f af29 	bgt.w	800ef90 <__ieee754_powf+0x1e8>
 800f13e:	2386      	movs	r3, #134	@ 0x86
 800f140:	e048      	b.n	800f1d4 <__ieee754_powf+0x42c>
 800f142:	4a21      	ldr	r2, [pc, #132]	@ (800f1c8 <__ieee754_powf+0x420>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d907      	bls.n	800f158 <__ieee754_powf+0x3b0>
 800f148:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f150:	bf4c      	ite	mi
 800f152:	2001      	movmi	r0, #1
 800f154:	2000      	movpl	r0, #0
 800f156:	e6c7      	b.n	800eee8 <__ieee754_powf+0x140>
 800f158:	d138      	bne.n	800f1cc <__ieee754_powf+0x424>
 800f15a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f15e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f166:	dbea      	blt.n	800f13e <__ieee754_powf+0x396>
 800f168:	e7ee      	b.n	800f148 <__ieee754_powf+0x3a0>
 800f16a:	bf00      	nop
 800f16c:	00000000 	.word	0x00000000
 800f170:	3f7ffff3 	.word	0x3f7ffff3
 800f174:	3f800007 	.word	0x3f800007
 800f178:	3eaaaaab 	.word	0x3eaaaaab
 800f17c:	3fb8aa00 	.word	0x3fb8aa00
 800f180:	3fb8aa3b 	.word	0x3fb8aa3b
 800f184:	36eca570 	.word	0x36eca570
 800f188:	4b800000 	.word	0x4b800000
 800f18c:	001cc471 	.word	0x001cc471
 800f190:	005db3d6 	.word	0x005db3d6
 800f194:	080108e4 	.word	0x080108e4
 800f198:	fffff000 	.word	0xfffff000
 800f19c:	3e6c3255 	.word	0x3e6c3255
 800f1a0:	3e53f142 	.word	0x3e53f142
 800f1a4:	3e8ba305 	.word	0x3e8ba305
 800f1a8:	3edb6db7 	.word	0x3edb6db7
 800f1ac:	3f19999a 	.word	0x3f19999a
 800f1b0:	080108d4 	.word	0x080108d4
 800f1b4:	3f76384f 	.word	0x3f76384f
 800f1b8:	3f763800 	.word	0x3f763800
 800f1bc:	369dc3a0 	.word	0x369dc3a0
 800f1c0:	080108dc 	.word	0x080108dc
 800f1c4:	3338aa3c 	.word	0x3338aa3c
 800f1c8:	43160000 	.word	0x43160000
 800f1cc:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f1d0:	d96f      	bls.n	800f2b2 <__ieee754_powf+0x50a>
 800f1d2:	15db      	asrs	r3, r3, #23
 800f1d4:	3b7e      	subs	r3, #126	@ 0x7e
 800f1d6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f1da:	4118      	asrs	r0, r3
 800f1dc:	4408      	add	r0, r1
 800f1de:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f1e2:	4a4e      	ldr	r2, [pc, #312]	@ (800f31c <__ieee754_powf+0x574>)
 800f1e4:	3b7f      	subs	r3, #127	@ 0x7f
 800f1e6:	411a      	asrs	r2, r3
 800f1e8:	4002      	ands	r2, r0
 800f1ea:	ee07 2a10 	vmov	s14, r2
 800f1ee:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f1f2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f1f6:	f1c3 0317 	rsb	r3, r3, #23
 800f1fa:	4118      	asrs	r0, r3
 800f1fc:	2900      	cmp	r1, #0
 800f1fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f202:	bfb8      	it	lt
 800f204:	4240      	neglt	r0, r0
 800f206:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800f20a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800f320 <__ieee754_powf+0x578>
 800f20e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800f324 <__ieee754_powf+0x57c>
 800f212:	ee16 3a90 	vmov	r3, s13
 800f216:	f36f 030b 	bfc	r3, #0, #12
 800f21a:	ee06 3a90 	vmov	s13, r3
 800f21e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f222:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f226:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f22a:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800f328 <__ieee754_powf+0x580>
 800f22e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f232:	eee0 7a87 	vfma.f32	s15, s1, s14
 800f236:	eeb0 7a67 	vmov.f32	s14, s15
 800f23a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f23e:	eef0 5a47 	vmov.f32	s11, s14
 800f242:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800f246:	ee67 6a07 	vmul.f32	s13, s14, s14
 800f24a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f24e:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800f32c <__ieee754_powf+0x584>
 800f252:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800f330 <__ieee754_powf+0x588>
 800f256:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f25a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800f334 <__ieee754_powf+0x58c>
 800f25e:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f262:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800f338 <__ieee754_powf+0x590>
 800f266:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800f26a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f33c <__ieee754_powf+0x594>
 800f26e:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f272:	eeb0 6a47 	vmov.f32	s12, s14
 800f276:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800f27a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f27e:	ee67 5a06 	vmul.f32	s11, s14, s12
 800f282:	ee36 6a66 	vsub.f32	s12, s12, s13
 800f286:	eee7 7a27 	vfma.f32	s15, s14, s15
 800f28a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f28e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f296:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f29a:	ee10 3a10 	vmov	r3, s0
 800f29e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f2a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f2a6:	da06      	bge.n	800f2b6 <__ieee754_powf+0x50e>
 800f2a8:	f000 f84c 	bl	800f344 <scalbnf>
 800f2ac:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f2b0:	e592      	b.n	800edd8 <__ieee754_powf+0x30>
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	e7a7      	b.n	800f206 <__ieee754_powf+0x45e>
 800f2b6:	ee00 3a10 	vmov	s0, r3
 800f2ba:	e7f7      	b.n	800f2ac <__ieee754_powf+0x504>
 800f2bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f2c0:	e58a      	b.n	800edd8 <__ieee754_powf+0x30>
 800f2c2:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800f340 <__ieee754_powf+0x598>
 800f2c6:	e587      	b.n	800edd8 <__ieee754_powf+0x30>
 800f2c8:	eeb0 0a48 	vmov.f32	s0, s16
 800f2cc:	e584      	b.n	800edd8 <__ieee754_powf+0x30>
 800f2ce:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f2d2:	f43f adbb 	beq.w	800ee4c <__ieee754_powf+0xa4>
 800f2d6:	2502      	movs	r5, #2
 800f2d8:	eeb0 0a48 	vmov.f32	s0, s16
 800f2dc:	f7ff fd50 	bl	800ed80 <fabsf>
 800f2e0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f2e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f2e8:	4647      	mov	r7, r8
 800f2ea:	d003      	beq.n	800f2f4 <__ieee754_powf+0x54c>
 800f2ec:	f1b8 0f00 	cmp.w	r8, #0
 800f2f0:	f47f addb 	bne.w	800eeaa <__ieee754_powf+0x102>
 800f2f4:	2c00      	cmp	r4, #0
 800f2f6:	bfbc      	itt	lt
 800f2f8:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f2fc:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f300:	2e00      	cmp	r6, #0
 800f302:	f6bf ad69 	bge.w	800edd8 <__ieee754_powf+0x30>
 800f306:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f30a:	ea58 0805 	orrs.w	r8, r8, r5
 800f30e:	f47f adc7 	bne.w	800eea0 <__ieee754_powf+0xf8>
 800f312:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f316:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f31a:	e55d      	b.n	800edd8 <__ieee754_powf+0x30>
 800f31c:	ff800000 	.word	0xff800000
 800f320:	3f317218 	.word	0x3f317218
 800f324:	3f317200 	.word	0x3f317200
 800f328:	35bfbe8c 	.word	0x35bfbe8c
 800f32c:	b5ddea0e 	.word	0xb5ddea0e
 800f330:	3331bb4c 	.word	0x3331bb4c
 800f334:	388ab355 	.word	0x388ab355
 800f338:	bb360b61 	.word	0xbb360b61
 800f33c:	3e2aaaab 	.word	0x3e2aaaab
 800f340:	00000000 	.word	0x00000000

0800f344 <scalbnf>:
 800f344:	ee10 3a10 	vmov	r3, s0
 800f348:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f34c:	d02b      	beq.n	800f3a6 <scalbnf+0x62>
 800f34e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f352:	d302      	bcc.n	800f35a <scalbnf+0x16>
 800f354:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f358:	4770      	bx	lr
 800f35a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f35e:	d123      	bne.n	800f3a8 <scalbnf+0x64>
 800f360:	4b24      	ldr	r3, [pc, #144]	@ (800f3f4 <scalbnf+0xb0>)
 800f362:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f3f8 <scalbnf+0xb4>
 800f366:	4298      	cmp	r0, r3
 800f368:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f36c:	db17      	blt.n	800f39e <scalbnf+0x5a>
 800f36e:	ee10 3a10 	vmov	r3, s0
 800f372:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f376:	3a19      	subs	r2, #25
 800f378:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f37c:	4288      	cmp	r0, r1
 800f37e:	dd15      	ble.n	800f3ac <scalbnf+0x68>
 800f380:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f3fc <scalbnf+0xb8>
 800f384:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f400 <scalbnf+0xbc>
 800f388:	ee10 3a10 	vmov	r3, s0
 800f38c:	eeb0 7a67 	vmov.f32	s14, s15
 800f390:	2b00      	cmp	r3, #0
 800f392:	bfb8      	it	lt
 800f394:	eef0 7a66 	vmovlt.f32	s15, s13
 800f398:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f39c:	4770      	bx	lr
 800f39e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f404 <scalbnf+0xc0>
 800f3a2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f3a6:	4770      	bx	lr
 800f3a8:	0dd2      	lsrs	r2, r2, #23
 800f3aa:	e7e5      	b.n	800f378 <scalbnf+0x34>
 800f3ac:	4410      	add	r0, r2
 800f3ae:	28fe      	cmp	r0, #254	@ 0xfe
 800f3b0:	dce6      	bgt.n	800f380 <scalbnf+0x3c>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	dd06      	ble.n	800f3c4 <scalbnf+0x80>
 800f3b6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f3ba:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f3be:	ee00 3a10 	vmov	s0, r3
 800f3c2:	4770      	bx	lr
 800f3c4:	f110 0f16 	cmn.w	r0, #22
 800f3c8:	da09      	bge.n	800f3de <scalbnf+0x9a>
 800f3ca:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f404 <scalbnf+0xc0>
 800f3ce:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f408 <scalbnf+0xc4>
 800f3d2:	ee10 3a10 	vmov	r3, s0
 800f3d6:	eeb0 7a67 	vmov.f32	s14, s15
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	e7d9      	b.n	800f392 <scalbnf+0x4e>
 800f3de:	3019      	adds	r0, #25
 800f3e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f3e4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f3e8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f40c <scalbnf+0xc8>
 800f3ec:	ee07 3a90 	vmov	s15, r3
 800f3f0:	e7d7      	b.n	800f3a2 <scalbnf+0x5e>
 800f3f2:	bf00      	nop
 800f3f4:	ffff3cb0 	.word	0xffff3cb0
 800f3f8:	4c000000 	.word	0x4c000000
 800f3fc:	7149f2ca 	.word	0x7149f2ca
 800f400:	f149f2ca 	.word	0xf149f2ca
 800f404:	0da24260 	.word	0x0da24260
 800f408:	8da24260 	.word	0x8da24260
 800f40c:	33000000 	.word	0x33000000

0800f410 <with_errnof>:
 800f410:	b510      	push	{r4, lr}
 800f412:	ed2d 8b02 	vpush	{d8}
 800f416:	eeb0 8a40 	vmov.f32	s16, s0
 800f41a:	4604      	mov	r4, r0
 800f41c:	f7fc f8b2 	bl	800b584 <__errno>
 800f420:	eeb0 0a48 	vmov.f32	s0, s16
 800f424:	ecbd 8b02 	vpop	{d8}
 800f428:	6004      	str	r4, [r0, #0]
 800f42a:	bd10      	pop	{r4, pc}

0800f42c <xflowf>:
 800f42c:	b130      	cbz	r0, 800f43c <xflowf+0x10>
 800f42e:	eef1 7a40 	vneg.f32	s15, s0
 800f432:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f436:	2022      	movs	r0, #34	@ 0x22
 800f438:	f7ff bfea 	b.w	800f410 <with_errnof>
 800f43c:	eef0 7a40 	vmov.f32	s15, s0
 800f440:	e7f7      	b.n	800f432 <xflowf+0x6>
	...

0800f444 <__math_uflowf>:
 800f444:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f44c <__math_uflowf+0x8>
 800f448:	f7ff bff0 	b.w	800f42c <xflowf>
 800f44c:	10000000 	.word	0x10000000

0800f450 <__math_oflowf>:
 800f450:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f458 <__math_oflowf+0x8>
 800f454:	f7ff bfea 	b.w	800f42c <xflowf>
 800f458:	70000000 	.word	0x70000000

0800f45c <_init>:
 800f45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45e:	bf00      	nop
 800f460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f462:	bc08      	pop	{r3}
 800f464:	469e      	mov	lr, r3
 800f466:	4770      	bx	lr

0800f468 <_fini>:
 800f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46a:	bf00      	nop
 800f46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f46e:	bc08      	pop	{r3}
 800f470:	469e      	mov	lr, r3
 800f472:	4770      	bx	lr
