
STM32H756ZG_Nucleo_sandbox_FCDEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  08008e80  08008e80  00009e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009604  08009604  0000b314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009604  08009604  0000a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800960c  0800960c  0000b314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800960c  0800960c  0000a60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009610  08009610  0000a610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009614  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  080097e8  0000b1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08009888  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000924  20000314  08009928  0000b314  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000c38  08009928  0000bc38  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000b314  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001531f  00000000  00000000  0000b344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b09  00000000  00000000  00020663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010b8  00000000  00000000  00023170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ced  00000000  00000000  00024228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027d56  00000000  00000000  00024f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014e71  00000000  00000000  0004cc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f496d  00000000  00000000  00061adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00156449  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000057e0  00000000  00000000  0015648c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  0015bc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000314 	.word	0x20000314
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e64 	.word	0x08008e64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000318 	.word	0x20000318
 800020c:	08008e64 	.word	0x08008e64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <adxl375_write>:

// Optional: for serial debug display
char x_char[6], y_char[6], z_char[6];

void adxl375_write(uint8_t reg, uint8_t value)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = reg;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, ADXL375_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000f2c:	f107 020c 	add.w	r2, r7, #12
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2302      	movs	r3, #2
 8000f38:	21a6      	movs	r1, #166	@ 0xa6
 8000f3a:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <adxl375_write+0x34>)
 8000f3c:	f002 f908 	bl	8003150 <HAL_I2C_Master_Transmit>
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000420 	.word	0x20000420

08000f4c <adxl375_read>:

uint8_t adxl375_read(uint8_t reg)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af04      	add	r7, sp, #16
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	2301      	movs	r3, #1
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	f107 030f 	add.w	r3, r7, #15
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	21a6      	movs	r1, #166	@ 0xa6
 8000f72:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <adxl375_read+0x38>)
 8000f74:	f002 fa04 	bl	8003380 <HAL_I2C_Mem_Read>
    return value;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000420 	.word	0x20000420

08000f88 <adxl375_read_xyz>:

void adxl375_read_xyz(int16_t *x, int16_t *y, int16_t *z)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, ADXL375_REG_DATAX0, I2C_MEMADD_SIZE_8BIT, data_rec, 6, HAL_MAX_DELAY);
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <adxl375_read_xyz+0x78>)
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2232      	movs	r2, #50	@ 0x32
 8000fa6:	21a6      	movs	r1, #166	@ 0xa6
 8000fa8:	4816      	ldr	r0, [pc, #88]	@ (8001004 <adxl375_read_xyz+0x7c>)
 8000faa:	f002 f9e9 	bl	8003380 <HAL_I2C_Mem_Read>

    *x = (int16_t)((data_rec[1] << 8) | data_rec[0]);
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <adxl375_read_xyz+0x78>)
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <adxl375_read_xyz+0x78>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data_rec[3] << 8) | data_rec[2]);
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <adxl375_read_xyz+0x78>)
 8000fc8:	78db      	ldrb	r3, [r3, #3]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <adxl375_read_xyz+0x78>)
 8000fd2:	789b      	ldrb	r3, [r3, #2]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data_rec[5] << 8) | data_rec[4]);
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <adxl375_read_xyz+0x78>)
 8000fe0:	795b      	ldrb	r3, [r3, #5]
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <adxl375_read_xyz+0x78>)
 8000fea:	791b      	ldrb	r3, [r3, #4]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	801a      	strh	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000330 	.word	0x20000330
 8001004:	20000420 	.word	0x20000420

08001008 <adxl375_init>:

void adxl375_init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    chipid = adxl375_read(ADXL375_REG_DEVID);  // Read device ID (should be 0xE5)
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ff9d 	bl	8000f4c <adxl375_read>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <adxl375_init+0x30>)
 8001018:	701a      	strb	r2, [r3, #0]

    adxl375_write(ADXL375_REG_DATA_FORMAT, 0x0B); // (0x0B = 00001011)
 800101a:	210b      	movs	r1, #11
 800101c:	2031      	movs	r0, #49	@ 0x31
 800101e:	f7ff ff79 	bl	8000f14 <adxl375_write>
    adxl375_write(ADXL375_REG_BW_RATE, 0x0A);     // Set Output Data Rate to 100 Hz (0x0A = 00001010)
 8001022:	210a      	movs	r1, #10
 8001024:	202c      	movs	r0, #44	@ 0x2c
 8001026:	f7ff ff75 	bl	8000f14 <adxl375_write>
    adxl375_write(ADXL375_REG_POWER_CTL, 0x08);   // Set Measure bit (00001000)
 800102a:	2108      	movs	r1, #8
 800102c:	202d      	movs	r0, #45	@ 0x2d
 800102e:	f7ff ff71 	bl	8000f14 <adxl375_write>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000336 	.word	0x20000336

0800103c <adxl375_read_xyz_mps2>:
    adxl375_read_xyz(NULL, NULL, &z);
    return z;
}

void adxl375_read_xyz_mps2(float *x_mps2, float *y_mps2, float *z_mps2)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
    int16_t raw_x, raw_y, raw_z;
    adxl375_read_xyz(&raw_x, &raw_y, &raw_z);
 8001048:	f107 0212 	add.w	r2, r7, #18
 800104c:	f107 0114 	add.w	r1, r7, #20
 8001050:	f107 0316 	add.w	r3, r7, #22
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff97 	bl	8000f88 <adxl375_read_xyz>
    // Convert raw data to m/s^2
    // Scale factor is 49 mg/LSB. 1 g = 1000 mg.
    // Acceleration (g) = raw_value * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f)
    // Acceleration (m/s^2) = Acceleration (g) * GRAVITY_MS2

    if (x_mps2 != NULL) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d010      	beq.n	8001082 <adxl375_read_xyz_mps2+0x46>
        *x_mps2 = (float)raw_x * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f) * GRAVITY_MS2;
 8001060:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80010dc <adxl375_read_xyz_mps2+0xa0>
 8001070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001074:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80010e0 <adxl375_read_xyz_mps2+0xa4>
 8001078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	edc3 7a00 	vstr	s15, [r3]
    }
    if (y_mps2 != NULL) {
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d010      	beq.n	80010aa <adxl375_read_xyz_mps2+0x6e>
        *y_mps2 = (float)raw_y * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f) * GRAVITY_MS2;
 8001088:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80010dc <adxl375_read_xyz_mps2+0xa0>
 8001098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80010e0 <adxl375_read_xyz_mps2+0xa4>
 80010a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	edc3 7a00 	vstr	s15, [r3]
    }
    if (z_mps2 != NULL) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d010      	beq.n	80010d2 <adxl375_read_xyz_mps2+0x96>
        *z_mps2 = (float)raw_z * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f) * GRAVITY_MS2;
 80010b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010bc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80010dc <adxl375_read_xyz_mps2+0xa0>
 80010c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c4:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80010e0 <adxl375_read_xyz_mps2+0xa4>
 80010c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	3d48b439 	.word	0x3d48b439
 80010e0:	411ce80a 	.word	0x411ce80a

080010e4 <adxl375_write_offsets>:

// New functions for offset registers
void adxl375_write_offsets(int8_t ofx, int8_t ofy, int8_t ofz)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	460b      	mov	r3, r1
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	4613      	mov	r3, r2
 80010f4:	717b      	strb	r3, [r7, #5]
    adxl375_write(ADXL375_REG_OFSX, (uint8_t)ofx);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4619      	mov	r1, r3
 80010fa:	201e      	movs	r0, #30
 80010fc:	f7ff ff0a 	bl	8000f14 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSY, (uint8_t)ofy);
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	4619      	mov	r1, r3
 8001104:	201f      	movs	r0, #31
 8001106:	f7ff ff05 	bl	8000f14 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSZ, (uint8_t)ofz);
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	4619      	mov	r1, r3
 800110e:	2020      	movs	r0, #32
 8001110:	f7ff ff00 	bl	8000f14 <adxl375_write>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <adxl375_read_offsets>:

void adxl375_read_offsets(int8_t *ofx, int8_t *ofy, int8_t *ofz)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
    if (ofx != NULL) {
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <adxl375_read_offsets+0x20>
        *ofx = (int8_t)adxl375_read(ADXL375_REG_OFSX);
 800112e:	201e      	movs	r0, #30
 8001130:	f7ff ff0c 	bl	8000f4c <adxl375_read>
 8001134:	4603      	mov	r3, r0
 8001136:	b25a      	sxtb	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	701a      	strb	r2, [r3, #0]
    }
    if (ofy != NULL) {
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <adxl375_read_offsets+0x34>
        *ofy = (int8_t)adxl375_read(ADXL375_REG_OFSY);
 8001142:	201f      	movs	r0, #31
 8001144:	f7ff ff02 	bl	8000f4c <adxl375_read>
 8001148:	4603      	mov	r3, r0
 800114a:	b25a      	sxtb	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	701a      	strb	r2, [r3, #0]
    }
    if (ofz != NULL) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <adxl375_read_offsets+0x48>
        *ofz = (int8_t)adxl375_read(ADXL375_REG_OFSZ);
 8001156:	2020      	movs	r0, #32
 8001158:	f7ff fef8 	bl	8000f4c <adxl375_read>
 800115c:	4603      	mov	r3, r0
 800115e:	b25a      	sxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	701a      	strb	r2, [r3, #0]
    }
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <clamp_int8>:
*/

void calibrate_adxl375_offsets(void);

// Helper function to clamp a float to int8_t range
static int8_t clamp_int8(float val) {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	ed87 0a01 	vstr	s0, [r7, #4]
    if (val > 127.0f) return 127;
 8001176:	edd7 7a01 	vldr	s15, [r7, #4]
 800117a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80011c0 <clamp_int8+0x54>
 800117e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	dd01      	ble.n	800118c <clamp_int8+0x20>
 8001188:	237f      	movs	r3, #127	@ 0x7f
 800118a:	e013      	b.n	80011b4 <clamp_int8+0x48>
    if (val < -128.0f) return -128;
 800118c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001190:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80011c4 <clamp_int8+0x58>
 8001194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	d502      	bpl.n	80011a4 <clamp_int8+0x38>
 800119e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80011a2:	e007      	b.n	80011b4 <clamp_int8+0x48>
    return (int8_t)val;
 80011a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ac:	edc7 7a00 	vstr	s15, [r7]
 80011b0:	783b      	ldrb	r3, [r7, #0]
 80011b2:	b25b      	sxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	42fe0000 	.word	0x42fe0000
 80011c4:	c3000000 	.word	0xc3000000

080011c8 <calibrate_adxl375_offsets>:

void calibrate_adxl375_offsets(void) {
 80011c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011cc:	b0a5      	sub	sp, #148	@ 0x94
 80011ce:	af06      	add	r7, sp, #24
    const int num_readings = 50;
 80011d0:	2332      	movs	r3, #50	@ 0x32
 80011d2:	663b      	str	r3, [r7, #96]	@ 0x60
    float sum_x_mps2 = 0.0f, sum_y_mps2 = 0.0f, sum_z_mps2 = 0.0f;
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	673b      	str	r3, [r7, #112]	@ 0x70
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    float offset_x_mps2, offset_y_mps2, offset_z_mps2;
    float offset_x_mg, offset_y_mg, offset_z_mg;
    float offset_x_lsb, offset_y_lsb, offset_z_lsb;
    int8_t reg_ofx, reg_ofy, reg_ofz;

    sprintf(uart_buffer, "Starting ADXL375 offset calibration (ensure sensor is stable, Z-axis up)...\r\n");
 80011e6:	49cc      	ldr	r1, [pc, #816]	@ (8001518 <calibrate_adxl375_offsets+0x350>)
 80011e8:	48cc      	ldr	r0, [pc, #816]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 80011ea:	f005 fd07 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80011ee:	48cb      	ldr	r0, [pc, #812]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 80011f0:	f7ff f85e 	bl	80002b0 <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	49c7      	ldr	r1, [pc, #796]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 80011fe:	48c8      	ldr	r0, [pc, #800]	@ (8001520 <calibrate_adxl375_offsets+0x358>)
 8001200:	f004 f836 	bl	8005270 <HAL_UART_Transmit>

    // 1. Reset hardware offsets to 0 to measure current raw offsets
    adxl375_write_offsets(0, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff ff6b 	bl	80010e4 <adxl375_write_offsets>
    HAL_Delay(20); // Give it a moment
 800120e:	2014      	movs	r0, #20
 8001210:	f001 f8ca 	bl	80023a8 <HAL_Delay>

    sprintf(uart_buffer, "Taking %d readings for averaging...\r\n", num_readings);
 8001214:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001216:	49c3      	ldr	r1, [pc, #780]	@ (8001524 <calibrate_adxl375_offsets+0x35c>)
 8001218:	48c0      	ldr	r0, [pc, #768]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 800121a:	f005 fcef 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800121e:	48bf      	ldr	r0, [pc, #764]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001220:	f7ff f846 	bl	80002b0 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	b29a      	uxth	r2, r3
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	49bb      	ldr	r1, [pc, #748]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 800122e:	48bc      	ldr	r0, [pc, #752]	@ (8001520 <calibrate_adxl375_offsets+0x358>)
 8001230:	f004 f81e 	bl	8005270 <HAL_UART_Transmit>

    // 2. Read and average multiple readings
    for (int i = 0; i < num_readings; i++) {
 8001234:	2300      	movs	r3, #0
 8001236:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001238:	e026      	b.n	8001288 <calibrate_adxl375_offsets+0xc0>
        float cur_x, cur_y, cur_z;
        adxl375_read_xyz_mps2(&cur_x, &cur_y, &cur_z);
 800123a:	f107 0210 	add.w	r2, r7, #16
 800123e:	f107 0114 	add.w	r1, r7, #20
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fef8 	bl	800103c <adxl375_read_xyz_mps2>
        sum_x_mps2 += cur_x;
 800124c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001250:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
        sum_y_mps2 += cur_y;
 800125c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001260:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
        sum_z_mps2 += cur_z;
 800126c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001270:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001278:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
        HAL_Delay(20); // Adjusted delay, ADXL375 ODR is 100Hz (10ms period), 20ms is safe
 800127c:	2014      	movs	r0, #20
 800127e:	f001 f893 	bl	80023a8 <HAL_Delay>
    for (int i = 0; i < num_readings; i++) {
 8001282:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001284:	3301      	adds	r3, #1
 8001286:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001288:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800128a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800128c:	429a      	cmp	r2, r3
 800128e:	dbd4      	blt.n	800123a <calibrate_adxl375_offsets+0x72>
    }
    avg_x_mps2 = sum_x_mps2 / num_readings;
 8001290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 800129e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a2:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    avg_y_mps2 = sum_y_mps2 / num_readings;
 80012a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b0:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    avg_z_mps2 = sum_z_mps2 / num_readings;
 80012bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c6:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80012ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ce:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    sprintf(uart_buffer, "Avg raw readings (before cal): X=%.2f, Y=%.2f, Z=%.2f m/s^2\r\n", avg_x_mps2, avg_y_mps2, avg_z_mps2);
 80012d2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80012d4:	f7ff f958 	bl	8000588 <__aeabi_f2d>
 80012d8:	4680      	mov	r8, r0
 80012da:	4689      	mov	r9, r1
 80012dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80012de:	f7ff f953 	bl	8000588 <__aeabi_f2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80012e8:	f7ff f94e 	bl	8000588 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012f4:	e9cd 4500 	strd	r4, r5, [sp]
 80012f8:	4642      	mov	r2, r8
 80012fa:	464b      	mov	r3, r9
 80012fc:	498a      	ldr	r1, [pc, #552]	@ (8001528 <calibrate_adxl375_offsets+0x360>)
 80012fe:	4887      	ldr	r0, [pc, #540]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001300:	f005 fc7c 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001304:	4885      	ldr	r0, [pc, #532]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001306:	f7fe ffd3 	bl	80002b0 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	4982      	ldr	r1, [pc, #520]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001314:	4882      	ldr	r0, [pc, #520]	@ (8001520 <calibrate_adxl375_offsets+0x358>)
 8001316:	f003 ffab 	bl	8005270 <HAL_UART_Transmit>

    // 3. Calculate desired offsets (assuming Z is up, X & Y are horizontal)
    // For X and Y, the current average IS the offset we want to remove.
    offset_x_mps2 = avg_x_mps2;
 800131a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800131c:	653b      	str	r3, [r7, #80]	@ 0x50
    offset_y_mps2 = avg_y_mps2;
 800131e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001320:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // For Z, we want it to read GRAVITY_MS2 (approx 9.81). So, offset = current_avg - target_value
    offset_z_mps2 = avg_z_mps2 - GRAVITY_MS2; // If Z points up, its reading should be +GRAVITY_MS2
 8001322:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001326:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800152c <calibrate_adxl375_offsets+0x364>
 800132a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800132e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    sprintf(uart_buffer, "Calculated m/s^2 offsets to remove: X=%.2f, Y=%.2f, Z(comp for G)=%.2f\r\n", offset_x_mps2, offset_y_mps2, offset_z_mps2);
 8001332:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001334:	f7ff f928 	bl	8000588 <__aeabi_f2d>
 8001338:	4680      	mov	r8, r0
 800133a:	4689      	mov	r9, r1
 800133c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800133e:	f7ff f923 	bl	8000588 <__aeabi_f2d>
 8001342:	4604      	mov	r4, r0
 8001344:	460d      	mov	r5, r1
 8001346:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001348:	f7ff f91e 	bl	8000588 <__aeabi_f2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001354:	e9cd 4500 	strd	r4, r5, [sp]
 8001358:	4642      	mov	r2, r8
 800135a:	464b      	mov	r3, r9
 800135c:	4974      	ldr	r1, [pc, #464]	@ (8001530 <calibrate_adxl375_offsets+0x368>)
 800135e:	486f      	ldr	r0, [pc, #444]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001360:	f005 fc4c 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001364:	486d      	ldr	r0, [pc, #436]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001366:	f7fe ffa3 	bl	80002b0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	496a      	ldr	r1, [pc, #424]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001374:	486a      	ldr	r0, [pc, #424]	@ (8001520 <calibrate_adxl375_offsets+0x358>)
 8001376:	f003 ff7b 	bl	8005270 <HAL_UART_Transmit>

    // 4. Convert offsets from m/s^2 to mg, then to LSB for OFS registers
    const float adxl375_offset_lsb_mg_datasheet = 15.6f;
 800137a:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <calibrate_adxl375_offsets+0x36c>)
 800137c:	647b      	str	r3, [r7, #68]	@ 0x44
    // Empirically observed amplification factor of the offset register's effect
    const float empirical_amplification_factor = 12.5f; // Derived from (12.01+12.73+12.78)/3
 800137e:	4b6e      	ldr	r3, [pc, #440]	@ (8001538 <calibrate_adxl375_offsets+0x370>)
 8001380:	643b      	str	r3, [r7, #64]	@ 0x40
    const float actual_offset_mg_per_lsb = adxl375_offset_lsb_mg_datasheet * empirical_amplification_factor;
 8001382:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001386:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    offset_x_mg = (offset_x_mps2 / GRAVITY_MS2) * 1000.0f;
 8001392:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001396:	eddf 6a65 	vldr	s13, [pc, #404]	@ 800152c <calibrate_adxl375_offsets+0x364>
 800139a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139e:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800153c <calibrate_adxl375_offsets+0x374>
 80013a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    offset_y_mg = (offset_y_mps2 / GRAVITY_MS2) * 1000.0f;
 80013aa:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80013ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800152c <calibrate_adxl375_offsets+0x364>
 80013b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b6:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 800153c <calibrate_adxl375_offsets+0x374>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    offset_z_mg = (offset_z_mps2 / GRAVITY_MS2) * 1000.0f;
 80013c2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80013c6:	eddf 6a59 	vldr	s13, [pc, #356]	@ 800152c <calibrate_adxl375_offsets+0x364>
 80013ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ce:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800153c <calibrate_adxl375_offsets+0x374>
 80013d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Use the effective actual_offset_mg_per_lsb for conversion
    offset_x_lsb = offset_x_mg / actual_offset_mg_per_lsb;
 80013da:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80013de:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80013e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    offset_y_lsb = offset_y_mg / actual_offset_mg_per_lsb;
 80013ea:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80013ee:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80013f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    offset_z_lsb = offset_z_mg / actual_offset_mg_per_lsb;
 80013fa:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80013fe:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001406:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // 5. Write the NEGATIVE of the LSB values to the offset registers, clamping to int8_t range
    reg_ofx = clamp_int8(-offset_x_lsb);
 800140a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800140e:	eef1 7a67 	vneg.f32	s15, s15
 8001412:	eeb0 0a67 	vmov.f32	s0, s15
 8001416:	f7ff fea9 	bl	800116c <clamp_int8>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    reg_ofy = clamp_int8(-offset_y_lsb);
 8001420:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001424:	eef1 7a67 	vneg.f32	s15, s15
 8001428:	eeb0 0a67 	vmov.f32	s0, s15
 800142c:	f7ff fe9e 	bl	800116c <clamp_int8>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    reg_ofz = clamp_int8(-offset_z_lsb);
 8001436:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800143a:	eef1 7a67 	vneg.f32	s15, s15
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	f7ff fe93 	bl	800116c <clamp_int8>
 8001446:	4603      	mov	r3, r0
 8001448:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    sprintf(uart_buffer, "Values to write to OFS registers (LSB, 15.6mg/LSB): OFSX=%d, OFSY=%d, OFSZ=%d\r\n", reg_ofx, reg_ofy, reg_ofz);
 800144c:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8001450:	f997 1022 	ldrsb.w	r1, [r7, #34]	@ 0x22
 8001454:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	460b      	mov	r3, r1
 800145c:	4938      	ldr	r1, [pc, #224]	@ (8001540 <calibrate_adxl375_offsets+0x378>)
 800145e:	482f      	ldr	r0, [pc, #188]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001460:	f005 fbcc 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001464:	482d      	ldr	r0, [pc, #180]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001466:	f7fe ff23 	bl	80002b0 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	492a      	ldr	r1, [pc, #168]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001474:	482a      	ldr	r0, [pc, #168]	@ (8001520 <calibrate_adxl375_offsets+0x358>)
 8001476:	f003 fefb 	bl	8005270 <HAL_UART_Transmit>

    adxl375_write_offsets(reg_ofx, reg_ofy, reg_ofz);
 800147a:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 800147e:	f997 1022 	ldrsb.w	r1, [r7, #34]	@ 0x22
 8001482:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe2c 	bl	80010e4 <adxl375_write_offsets>
    HAL_Delay(10); // Short delay after writing offsets
 800148c:	200a      	movs	r0, #10
 800148e:	f000 ff8b 	bl	80023a8 <HAL_Delay>

    sprintf(uart_buffer, "ADXL375 offset calibration complete. New offsets written to sensor.\r\n");
 8001492:	492c      	ldr	r1, [pc, #176]	@ (8001544 <calibrate_adxl375_offsets+0x37c>)
 8001494:	4821      	ldr	r0, [pc, #132]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 8001496:	f005 fbb1 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800149a:	4820      	ldr	r0, [pc, #128]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 800149c:	f7fe ff08 	bl	80002b0 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	491c      	ldr	r1, [pc, #112]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 80014aa:	481d      	ldr	r0, [pc, #116]	@ (8001520 <calibrate_adxl375_offsets+0x358>)
 80014ac:	f003 fee0 	bl	8005270 <HAL_UART_Transmit>

    // Optional: Read back offsets written to sensor to verify
    int8_t rofx, rofy, rofz;
    adxl375_read_offsets(&rofx, &rofy, &rofz);
 80014b0:	f107 021e 	add.w	r2, r7, #30
 80014b4:	f107 011f 	add.w	r1, r7, #31
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe2d 	bl	800111c <adxl375_read_offsets>
    sprintf(uart_buffer, "Read back from OFS registers: OFSX=%d, OFSY=%d, OFSZ=%d\r\n", rofx, rofy, rofz);
 80014c2:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80014c6:	461a      	mov	r2, r3
 80014c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	460b      	mov	r3, r1
 80014d6:	491c      	ldr	r1, [pc, #112]	@ (8001548 <calibrate_adxl375_offsets+0x380>)
 80014d8:	4810      	ldr	r0, [pc, #64]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 80014da:	f005 fb8f 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80014de:	480f      	ldr	r0, [pc, #60]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 80014e0:	f7fe fee6 	bl	80002b0 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	490b      	ldr	r1, [pc, #44]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 80014ee:	480c      	ldr	r0, [pc, #48]	@ (8001520 <calibrate_adxl375_offsets+0x358>)
 80014f0:	f003 febe 	bl	8005270 <HAL_UART_Transmit>

    // Optional: Take a few readings after calibration to see the effect
    sprintf(uart_buffer, "Taking a few readings post-calibration...\r\n");
 80014f4:	4915      	ldr	r1, [pc, #84]	@ (800154c <calibrate_adxl375_offsets+0x384>)
 80014f6:	4809      	ldr	r0, [pc, #36]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 80014f8:	f005 fb80 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80014fc:	4807      	ldr	r0, [pc, #28]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 80014fe:	f7fe fed7 	bl	80002b0 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	4904      	ldr	r1, [pc, #16]	@ (800151c <calibrate_adxl375_offsets+0x354>)
 800150c:	4804      	ldr	r0, [pc, #16]	@ (8001520 <calibrate_adxl375_offsets+0x358>)
 800150e:	f003 feaf 	bl	8005270 <HAL_UART_Transmit>
    for(int k=0; k<3; k++){
 8001512:	2300      	movs	r3, #0
 8001514:	667b      	str	r3, [r7, #100]	@ 0x64
 8001516:	e053      	b.n	80015c0 <calibrate_adxl375_offsets+0x3f8>
 8001518:	08008e80 	.word	0x08008e80
 800151c:	200009dc 	.word	0x200009dc
 8001520:	20000474 	.word	0x20000474
 8001524:	08008ed0 	.word	0x08008ed0
 8001528:	08008ef8 	.word	0x08008ef8
 800152c:	411ce80a 	.word	0x411ce80a
 8001530:	08008f38 	.word	0x08008f38
 8001534:	4179999a 	.word	0x4179999a
 8001538:	41480000 	.word	0x41480000
 800153c:	447a0000 	.word	0x447a0000
 8001540:	08008f84 	.word	0x08008f84
 8001544:	08008fd4 	.word	0x08008fd4
 8001548:	0800901c 	.word	0x0800901c
 800154c:	08009058 	.word	0x08009058
        float post_cal_x, post_cal_y, post_cal_z;
        adxl375_read_xyz_mps2(&post_cal_x, &post_cal_y, &post_cal_z);
 8001550:	1d3a      	adds	r2, r7, #4
 8001552:	f107 0108 	add.w	r1, r7, #8
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fd6e 	bl	800103c <adxl375_read_xyz_mps2>
        sprintf(uart_buffer, "Post-Cal Reading %d: X=%.2f, Y=%.2f, Z=%.2f m/s^2\r\n", k+1, post_cal_x, post_cal_y, post_cal_z);
 8001560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001562:	1c5e      	adds	r6, r3, #1
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f80e 	bl	8000588 <__aeabi_f2d>
 800156c:	4604      	mov	r4, r0
 800156e:	460d      	mov	r5, r1
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f808 	bl	8000588 <__aeabi_f2d>
 8001578:	4680      	mov	r8, r0
 800157a:	4689      	mov	r9, r1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f802 	bl	8000588 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800158c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001590:	e9cd 4500 	strd	r4, r5, [sp]
 8001594:	4632      	mov	r2, r6
 8001596:	490f      	ldr	r1, [pc, #60]	@ (80015d4 <calibrate_adxl375_offsets+0x40c>)
 8001598:	480f      	ldr	r0, [pc, #60]	@ (80015d8 <calibrate_adxl375_offsets+0x410>)
 800159a:	f005 fb2f 	bl	8006bfc <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800159e:	480e      	ldr	r0, [pc, #56]	@ (80015d8 <calibrate_adxl375_offsets+0x410>)
 80015a0:	f7fe fe86 	bl	80002b0 <strlen>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	490a      	ldr	r1, [pc, #40]	@ (80015d8 <calibrate_adxl375_offsets+0x410>)
 80015ae:	480b      	ldr	r0, [pc, #44]	@ (80015dc <calibrate_adxl375_offsets+0x414>)
 80015b0:	f003 fe5e 	bl	8005270 <HAL_UART_Transmit>
        HAL_Delay(100);
 80015b4:	2064      	movs	r0, #100	@ 0x64
 80015b6:	f000 fef7 	bl	80023a8 <HAL_Delay>
    for(int k=0; k<3; k++){
 80015ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015bc:	3301      	adds	r3, #1
 80015be:	667b      	str	r3, [r7, #100]	@ 0x64
 80015c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	ddc4      	ble.n	8001550 <calibrate_adxl375_offsets+0x388>
    }
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	377c      	adds	r7, #124	@ 0x7c
 80015cc:	46bd      	mov	sp, r7
 80015ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015d2:	bf00      	nop
 80015d4:	08009084 	.word	0x08009084
 80015d8:	200009dc 	.word	0x200009dc
 80015dc:	20000474 	.word	0x20000474

080015e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015e4:	b088      	sub	sp, #32
 80015e6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f000 fe81 	bl	80022ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f93c 	bl	8001868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f000 fa8e 	bl	8001b10 <MX_GPIO_Init>
  MX_ETH_Init();
 80015f4:	f000 f9a0 	bl	8001938 <MX_ETH_Init>
  MX_I2C1_Init();
 80015f8:	f000 f9ec 	bl	80019d4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80015fc:	f000 fa2a 	bl	8001a54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001600:	f000 fa58 	bl	8001ab4 <MX_USB_OTG_FS_PCD_Init>
  // Initialize I2C (already called by HAL_Init system, but good to ensure)
  // MX_I2C1_Init(); // Called above in peripheral init sequence

  // char uart_buffer[100]; // Moved global and resized
  
  sprintf(uart_buffer, "System Initialized. UART OK.\r\n");
 8001604:	4989      	ldr	r1, [pc, #548]	@ (800182c <main+0x24c>)
 8001606:	488a      	ldr	r0, [pc, #552]	@ (8001830 <main+0x250>)
 8001608:	f005 faf8 	bl	8006bfc <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800160c:	4888      	ldr	r0, [pc, #544]	@ (8001830 <main+0x250>)
 800160e:	f7fe fe4f 	bl	80002b0 <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	4985      	ldr	r1, [pc, #532]	@ (8001830 <main+0x250>)
 800161c:	4885      	ldr	r0, [pc, #532]	@ (8001834 <main+0x254>)
 800161e:	f003 fe27 	bl	8005270 <HAL_UART_Transmit>
  
  // Scan the I2C bus first to see what devices are present
  sprintf(uart_buffer, "Scanning I2C bus for devices...\r\n");
 8001622:	4985      	ldr	r1, [pc, #532]	@ (8001838 <main+0x258>)
 8001624:	4882      	ldr	r0, [pc, #520]	@ (8001830 <main+0x250>)
 8001626:	f005 fae9 	bl	8006bfc <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800162a:	4881      	ldr	r0, [pc, #516]	@ (8001830 <main+0x250>)
 800162c:	f7fe fe40 	bl	80002b0 <strlen>
 8001630:	4603      	mov	r3, r0
 8001632:	b29a      	uxth	r2, r3
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	497d      	ldr	r1, [pc, #500]	@ (8001830 <main+0x250>)
 800163a:	487e      	ldr	r0, [pc, #504]	@ (8001834 <main+0x254>)
 800163c:	f003 fe18 	bl	8005270 <HAL_UART_Transmit>
  
  uint8_t i2c_devices_found = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 1; i < 128; i++) {
 8001644:	2301      	movs	r3, #1
 8001646:	73bb      	strb	r3, [r7, #14]
 8001648:	e03e      	b.n	80016c8 <main+0xe8>
    if (i < 0x08 || i > 0x77) continue; // Valid 7-bit addresses
 800164a:	7bbb      	ldrb	r3, [r7, #14]
 800164c:	2b07      	cmp	r3, #7
 800164e:	d937      	bls.n	80016c0 <main+0xe0>
 8001650:	7bbb      	ldrb	r3, [r7, #14]
 8001652:	2b77      	cmp	r3, #119	@ 0x77
 8001654:	d834      	bhi.n	80016c0 <main+0xe0>

    HAL_StatusTypeDef i2c_result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 2, 10); // Use 2 trials, 10ms timeout
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	b29b      	uxth	r3, r3
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	b299      	uxth	r1, r3
 800165e:	230a      	movs	r3, #10
 8001660:	2202      	movs	r2, #2
 8001662:	4876      	ldr	r0, [pc, #472]	@ (800183c <main+0x25c>)
 8001664:	f001 ffa6 	bl	80035b4 <HAL_I2C_IsDeviceReady>
 8001668:	4603      	mov	r3, r0
 800166a:	733b      	strb	r3, [r7, #12]
    
    if (i2c_result == HAL_OK) {
 800166c:	7b3b      	ldrb	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d127      	bne.n	80016c2 <main+0xe2>
      i2c_devices_found++;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	3301      	adds	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
      sprintf(uart_buffer, "Found I2C device at address: 0x%02X\r\n", i);
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	461a      	mov	r2, r3
 800167c:	4970      	ldr	r1, [pc, #448]	@ (8001840 <main+0x260>)
 800167e:	486c      	ldr	r0, [pc, #432]	@ (8001830 <main+0x250>)
 8001680:	f005 fabc 	bl	8006bfc <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001684:	486a      	ldr	r0, [pc, #424]	@ (8001830 <main+0x250>)
 8001686:	f7fe fe13 	bl	80002b0 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	b29a      	uxth	r2, r3
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	4967      	ldr	r1, [pc, #412]	@ (8001830 <main+0x250>)
 8001694:	4867      	ldr	r0, [pc, #412]	@ (8001834 <main+0x254>)
 8001696:	f003 fdeb 	bl	8005270 <HAL_UART_Transmit>
      if (i == (BMP390_I2C_ADDRESS_LOW >> 1) || i == (BMP390_I2C_ADDRESS_HIGH >> 1)) {
        sprintf(uart_buffer, "  --> This could be a BMP390 sensor!\r\n");
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
      }
      */
      if (i == (ADXL375_ADDRESS >> 1)) {
 800169a:	7bbb      	ldrb	r3, [r7, #14]
 800169c:	2b53      	cmp	r3, #83	@ 0x53
 800169e:	d110      	bne.n	80016c2 <main+0xe2>
        sprintf(uart_buffer, "  --> This could be an ADXL375 sensor!\r\n");
 80016a0:	4968      	ldr	r1, [pc, #416]	@ (8001844 <main+0x264>)
 80016a2:	4863      	ldr	r0, [pc, #396]	@ (8001830 <main+0x250>)
 80016a4:	f005 faaa 	bl	8006bfc <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80016a8:	4861      	ldr	r0, [pc, #388]	@ (8001830 <main+0x250>)
 80016aa:	f7fe fe01 	bl	80002b0 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	495e      	ldr	r1, [pc, #376]	@ (8001830 <main+0x250>)
 80016b8:	485e      	ldr	r0, [pc, #376]	@ (8001834 <main+0x254>)
 80016ba:	f003 fdd9 	bl	8005270 <HAL_UART_Transmit>
 80016be:	e000      	b.n	80016c2 <main+0xe2>
    if (i < 0x08 || i > 0x77) continue; // Valid 7-bit addresses
 80016c0:	bf00      	nop
  for (uint8_t i = 1; i < 128; i++) {
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	3301      	adds	r3, #1
 80016c6:	73bb      	strb	r3, [r7, #14]
 80016c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dabc      	bge.n	800164a <main+0x6a>
      }
    }
  }
  
  if (i2c_devices_found == 0) {
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10f      	bne.n	80016f6 <main+0x116>
    sprintf(uart_buffer, "No I2C devices found! Check wiring/pull-ups.\r\n");
 80016d6:	495c      	ldr	r1, [pc, #368]	@ (8001848 <main+0x268>)
 80016d8:	4855      	ldr	r0, [pc, #340]	@ (8001830 <main+0x250>)
 80016da:	f005 fa8f 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80016de:	4854      	ldr	r0, [pc, #336]	@ (8001830 <main+0x250>)
 80016e0:	f7fe fde6 	bl	80002b0 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	4950      	ldr	r1, [pc, #320]	@ (8001830 <main+0x250>)
 80016ee:	4851      	ldr	r0, [pc, #324]	@ (8001834 <main+0x254>)
 80016f0:	f003 fdbe 	bl	8005270 <HAL_UART_Transmit>
 80016f4:	e010      	b.n	8001718 <main+0x138>
  } else {
    sprintf(uart_buffer, "Found %d I2C devices in total.\r\n", i2c_devices_found);
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4954      	ldr	r1, [pc, #336]	@ (800184c <main+0x26c>)
 80016fc:	484c      	ldr	r0, [pc, #304]	@ (8001830 <main+0x250>)
 80016fe:	f005 fa7d 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001702:	484b      	ldr	r0, [pc, #300]	@ (8001830 <main+0x250>)
 8001704:	f7fe fdd4 	bl	80002b0 <strlen>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	4947      	ldr	r1, [pc, #284]	@ (8001830 <main+0x250>)
 8001712:	4848      	ldr	r0, [pc, #288]	@ (8001834 <main+0x254>)
 8001714:	f003 fdac 	bl	8005270 <HAL_UART_Transmit>
  }

  // Initialize ADXL375
  sprintf(uart_buffer, "Initializing ADXL375...\r\n");
 8001718:	494d      	ldr	r1, [pc, #308]	@ (8001850 <main+0x270>)
 800171a:	4845      	ldr	r0, [pc, #276]	@ (8001830 <main+0x250>)
 800171c:	f005 fa6e 	bl	8006bfc <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001720:	4843      	ldr	r0, [pc, #268]	@ (8001830 <main+0x250>)
 8001722:	f7fe fdc5 	bl	80002b0 <strlen>
 8001726:	4603      	mov	r3, r0
 8001728:	b29a      	uxth	r2, r3
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	4940      	ldr	r1, [pc, #256]	@ (8001830 <main+0x250>)
 8001730:	4840      	ldr	r0, [pc, #256]	@ (8001834 <main+0x254>)
 8001732:	f003 fd9d 	bl	8005270 <HAL_UART_Transmit>
  adxl375_init();
 8001736:	f7ff fc67 	bl	8001008 <adxl375_init>
  uint8_t adxl_chip_id = adxl375_read(ADXL375_REG_DEVID);
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fc06 	bl	8000f4c <adxl375_read>
 8001740:	4603      	mov	r3, r0
 8001742:	737b      	strb	r3, [r7, #13]
  sprintf(uart_buffer, "ADXL375 Chip ID: 0x%02X (Expected: 0xE5)\r\n", adxl_chip_id);
 8001744:	7b7b      	ldrb	r3, [r7, #13]
 8001746:	461a      	mov	r2, r3
 8001748:	4942      	ldr	r1, [pc, #264]	@ (8001854 <main+0x274>)
 800174a:	4839      	ldr	r0, [pc, #228]	@ (8001830 <main+0x250>)
 800174c:	f005 fa56 	bl	8006bfc <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001750:	4837      	ldr	r0, [pc, #220]	@ (8001830 <main+0x250>)
 8001752:	f7fe fdad 	bl	80002b0 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	4934      	ldr	r1, [pc, #208]	@ (8001830 <main+0x250>)
 8001760:	4834      	ldr	r0, [pc, #208]	@ (8001834 <main+0x254>)
 8001762:	f003 fd85 	bl	8005270 <HAL_UART_Transmit>
  if (adxl_chip_id == 0xE5) {
 8001766:	7b7b      	ldrb	r3, [r7, #13]
 8001768:	2be5      	cmp	r3, #229	@ 0xe5
 800176a:	d111      	bne.n	8001790 <main+0x1b0>
    sprintf(uart_buffer, "ADXL375 Initialized Successfully!\r\n");
 800176c:	493a      	ldr	r1, [pc, #232]	@ (8001858 <main+0x278>)
 800176e:	4830      	ldr	r0, [pc, #192]	@ (8001830 <main+0x250>)
 8001770:	f005 fa44 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001774:	482e      	ldr	r0, [pc, #184]	@ (8001830 <main+0x250>)
 8001776:	f7fe fd9b 	bl	80002b0 <strlen>
 800177a:	4603      	mov	r3, r0
 800177c:	b29a      	uxth	r2, r3
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	492b      	ldr	r1, [pc, #172]	@ (8001830 <main+0x250>)
 8001784:	482b      	ldr	r0, [pc, #172]	@ (8001834 <main+0x254>)
 8001786:	f003 fd73 	bl	8005270 <HAL_UART_Transmit>

    // Calibrate ADXL375 offsets
    calibrate_adxl375_offsets();
 800178a:	f7ff fd1d 	bl	80011c8 <calibrate_adxl375_offsets>
 800178e:	e010      	b.n	80017b2 <main+0x1d2>

  } else {
    sprintf(uart_buffer, "ADXL375 Initialization FAILED! Chip ID: 0x%02X. Check wiring or device.\r\n", adxl_chip_id);
 8001790:	7b7b      	ldrb	r3, [r7, #13]
 8001792:	461a      	mov	r2, r3
 8001794:	4931      	ldr	r1, [pc, #196]	@ (800185c <main+0x27c>)
 8001796:	4826      	ldr	r0, [pc, #152]	@ (8001830 <main+0x250>)
 8001798:	f005 fa30 	bl	8006bfc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800179c:	4824      	ldr	r0, [pc, #144]	@ (8001830 <main+0x250>)
 800179e:	f7fe fd87 	bl	80002b0 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	4921      	ldr	r1, [pc, #132]	@ (8001830 <main+0x250>)
 80017ac:	4821      	ldr	r0, [pc, #132]	@ (8001834 <main+0x254>)
 80017ae:	f003 fd5f 	bl	8005270 <HAL_UART_Transmit>
      sea_level_pressure_hpa = 1013.25f; // Default
  }
  */
  
  // Turn on LED to indicate ready state
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET); // LD2 is usually green or yellow.
 80017b2:	2201      	movs	r2, #1
 80017b4:	2180      	movs	r1, #128	@ 0x80
 80017b6:	482a      	ldr	r0, [pc, #168]	@ (8001860 <main+0x280>)
 80017b8:	f001 fbfa 	bl	8002fb0 <HAL_GPIO_WritePin>
    }
    */

    // ADXL375 Data Reading
    float ax_mps2, ay_mps2, az_mps2;
    adxl375_read_xyz_mps2(&ax_mps2, &ay_mps2, &az_mps2);
 80017bc:	463a      	mov	r2, r7
 80017be:	1d39      	adds	r1, r7, #4
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc39 	bl	800103c <adxl375_read_xyz_mps2>

    sprintf(uart_buffer, "%0.2f, %0.2f, %0.2f\r\n",
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fedb 	bl	8000588 <__aeabi_f2d>
 80017d2:	4680      	mov	r8, r0
 80017d4:	4689      	mov	r9, r1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fed5 	bl	8000588 <__aeabi_f2d>
 80017de:	4604      	mov	r4, r0
 80017e0:	460d      	mov	r5, r1
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fecf 	bl	8000588 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017f2:	e9cd 4500 	strd	r4, r5, [sp]
 80017f6:	4642      	mov	r2, r8
 80017f8:	464b      	mov	r3, r9
 80017fa:	491a      	ldr	r1, [pc, #104]	@ (8001864 <main+0x284>)
 80017fc:	480c      	ldr	r0, [pc, #48]	@ (8001830 <main+0x250>)
 80017fe:	f005 f9fd 	bl	8006bfc <siprintf>
            ax_mps2, ay_mps2, az_mps2);
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001802:	480b      	ldr	r0, [pc, #44]	@ (8001830 <main+0x250>)
 8001804:	f7fe fd54 	bl	80002b0 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b29a      	uxth	r2, r3
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <main+0x250>)
 8001812:	4808      	ldr	r0, [pc, #32]	@ (8001834 <main+0x254>)
 8001814:	f003 fd2c 	bl	8005270 <HAL_UART_Transmit>
    
    HAL_GPIO_TogglePin(GPIOB, LD1_Pin); // Toggle LD1 (usually green) to show activity
 8001818:	2101      	movs	r1, #1
 800181a:	4811      	ldr	r0, [pc, #68]	@ (8001860 <main+0x280>)
 800181c:	f001 fbe1 	bl	8002fe2 <HAL_GPIO_TogglePin>
    
    /* LSM6DSO code commented out as sensor is removed */
    
    HAL_Delay(200); // Delay for readability, adjust as needed. ADXL375 ODR is 100Hz by default.
 8001820:	20c8      	movs	r0, #200	@ 0xc8
 8001822:	f000 fdc1 	bl	80023a8 <HAL_Delay>
  {
 8001826:	bf00      	nop
 8001828:	e7c8      	b.n	80017bc <main+0x1dc>
 800182a:	bf00      	nop
 800182c:	080090b8 	.word	0x080090b8
 8001830:	200009dc 	.word	0x200009dc
 8001834:	20000474 	.word	0x20000474
 8001838:	080090d8 	.word	0x080090d8
 800183c:	20000420 	.word	0x20000420
 8001840:	080090fc 	.word	0x080090fc
 8001844:	08009124 	.word	0x08009124
 8001848:	08009150 	.word	0x08009150
 800184c:	08009180 	.word	0x08009180
 8001850:	080091a4 	.word	0x080091a4
 8001854:	080091c0 	.word	0x080091c0
 8001858:	080091ec 	.word	0x080091ec
 800185c:	08009210 	.word	0x08009210
 8001860:	40020400 	.word	0x40020400
 8001864:	0800925c 	.word	0x0800925c

08001868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	@ 0x50
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	2230      	movs	r2, #48	@ 0x30
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f005 fa25 	bl	8006cc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800188c:	f002 fbd8 	bl	8004040 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <SystemClock_Config+0xc8>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	4a26      	ldr	r2, [pc, #152]	@ (8001930 <SystemClock_Config+0xc8>)
 8001896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189a:	6413      	str	r3, [r2, #64]	@ 0x40
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <SystemClock_Config+0xc8>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018a8:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <SystemClock_Config+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018b0:	4a20      	ldr	r2, [pc, #128]	@ (8001934 <SystemClock_Config+0xcc>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <SystemClock_Config+0xcc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018c8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ce:	2302      	movs	r3, #2
 80018d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018d8:	2304      	movs	r3, #4
 80018da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018dc:	2348      	movs	r3, #72	@ 0x48
 80018de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e0:	2302      	movs	r3, #2
 80018e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018e4:	2303      	movs	r3, #3
 80018e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 fbb7 	bl	8004060 <HAL_RCC_OscConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018f8:	f000 f9ac 	bl	8001c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fc:	230f      	movs	r3, #15
 80018fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	2102      	movs	r1, #2
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fe45 	bl	80045a8 <HAL_RCC_ClockConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001924:	f000 f996 	bl	8001c54 <Error_Handler>
  }
}
 8001928:	bf00      	nop
 800192a:	3750      	adds	r7, #80	@ 0x50
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_ETH_Init+0x84>)
 800193e:	4a20      	ldr	r2, [pc, #128]	@ (80019c0 <MX_ETH_Init+0x88>)
 8001940:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <MX_ETH_Init+0x8c>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <MX_ETH_Init+0x8c>)
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MX_ETH_Init+0x8c>)
 8001950:	22e1      	movs	r2, #225	@ 0xe1
 8001952:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_ETH_Init+0x8c>)
 8001956:	2200      	movs	r2, #0
 8001958:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_ETH_Init+0x8c>)
 800195c:	2200      	movs	r2, #0
 800195e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_ETH_Init+0x8c>)
 8001962:	2200      	movs	r2, #0
 8001964:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <MX_ETH_Init+0x84>)
 8001968:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <MX_ETH_Init+0x8c>)
 800196a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <MX_ETH_Init+0x84>)
 800196e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001972:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <MX_ETH_Init+0x84>)
 8001976:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <MX_ETH_Init+0x90>)
 8001978:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <MX_ETH_Init+0x84>)
 800197c:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <MX_ETH_Init+0x94>)
 800197e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001980:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <MX_ETH_Init+0x84>)
 8001982:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001986:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <MX_ETH_Init+0x84>)
 800198a:	f000 fe17 	bl	80025bc <HAL_ETH_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001994:	f000 f95e 	bl	8001c54 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001998:	2238      	movs	r2, #56	@ 0x38
 800199a:	2100      	movs	r1, #0
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <MX_ETH_Init+0x98>)
 800199e:	f005 f992 	bl	8006cc6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <MX_ETH_Init+0x98>)
 80019a4:	2221      	movs	r2, #33	@ 0x21
 80019a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <MX_ETH_Init+0x98>)
 80019aa:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80019ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <MX_ETH_Init+0x98>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000370 	.word	0x20000370
 80019c0:	40028000 	.word	0x40028000
 80019c4:	20000adc 	.word	0x20000adc
 80019c8:	20000274 	.word	0x20000274
 80019cc:	200001d4 	.word	0x200001d4
 80019d0:	20000338 	.word	0x20000338

080019d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019da:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <MX_I2C1_Init+0x78>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <MX_I2C1_Init+0x7c>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019f6:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <MX_I2C1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a0e:	480e      	ldr	r0, [pc, #56]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a10:	f001 fb02 	bl	8003018 <HAL_I2C_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a1a:	f000 f91b 	bl	8001c54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a22:	f002 f93b 	bl	8003c9c <HAL_I2CEx_ConfigAnalogFilter>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a2c:	f000 f912 	bl	8001c54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_I2C1_Init+0x74>)
 8001a34:	f002 f97d 	bl	8003d32 <HAL_I2CEx_ConfigDigitalFilter>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a3e:	f000 f909 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000420 	.word	0x20000420
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	00808cd2 	.word	0x00808cd2

08001a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a58:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a5a:	4a15      	ldr	r2, [pc, #84]	@ (8001ab0 <MX_USART3_UART_Init+0x5c>)
 8001a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_USART3_UART_Init+0x58>)
 8001a98:	f003 fb9c 	bl	80051d4 <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001aa2:	f000 f8d7 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000474 	.word	0x20000474
 8001ab0:	40004800 	.word	0x40004800

08001ab4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001abe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ac2:	2206      	movs	r2, #6
 8001ac4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001aea:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001af6:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001af8:	f002 f967 	bl	8003dca <HAL_PCD_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b02:	f000 f8a7 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200004fc 	.word	0x200004fc

08001b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	@ 0x30
 8001b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	4b47      	ldr	r3, [pc, #284]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a46      	ldr	r2, [pc, #280]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b44      	ldr	r3, [pc, #272]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3e:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a40      	ldr	r2, [pc, #256]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b3b      	ldr	r3, [pc, #236]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b35      	ldr	r3, [pc, #212]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a34      	ldr	r2, [pc, #208]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b32      	ldr	r3, [pc, #200]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b86:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b9e:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a28      	ldr	r2, [pc, #160]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <MX_GPIO_Init+0x134>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001bbc:	4822      	ldr	r0, [pc, #136]	@ (8001c48 <MX_GPIO_Init+0x138>)
 8001bbe:	f001 f9f7 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2140      	movs	r1, #64	@ 0x40
 8001bc6:	4821      	ldr	r0, [pc, #132]	@ (8001c4c <MX_GPIO_Init+0x13c>)
 8001bc8:	f001 f9f2 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001bcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	481b      	ldr	r0, [pc, #108]	@ (8001c50 <MX_GPIO_Init+0x140>)
 8001be4:	f001 f838 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001be8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4811      	ldr	r0, [pc, #68]	@ (8001c48 <MX_GPIO_Init+0x138>)
 8001c02:	f001 f829 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c06:	2340      	movs	r3, #64	@ 0x40
 8001c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480b      	ldr	r0, [pc, #44]	@ (8001c4c <MX_GPIO_Init+0x13c>)
 8001c1e:	f001 f81b 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c22:	2380      	movs	r3, #128	@ 0x80
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <MX_GPIO_Init+0x13c>)
 8001c36:	f001 f80f 	bl	8002c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	@ 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40021800 	.word	0x40021800
 8001c50:	40020800 	.word	0x40020800

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <Error_Handler+0x8>

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08e      	sub	sp, #56	@ 0x38
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001e00 <HAL_ETH_MspInit+0x158>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f040 8096 	bne.w	8001df8 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001cd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	623b      	str	r3, [r7, #32]
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	4b47      	ldr	r3, [pc, #284]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	4a46      	ldr	r2, [pc, #280]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001cea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf0:	4b44      	ldr	r3, [pc, #272]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	4b41      	ldr	r3, [pc, #260]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	4a40      	ldr	r2, [pc, #256]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d08:	4b3e      	ldr	r3, [pc, #248]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	4a3a      	ldr	r2, [pc, #232]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d20:	4b38      	ldr	r3, [pc, #224]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b35      	ldr	r3, [pc, #212]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	4a34      	ldr	r2, [pc, #208]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d38:	4b32      	ldr	r3, [pc, #200]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d44:	4b2f      	ldr	r3, [pc, #188]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	4a2e      	ldr	r2, [pc, #184]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d50:	4b2c      	ldr	r3, [pc, #176]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d5c:	4b29      	ldr	r3, [pc, #164]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	4a28      	ldr	r2, [pc, #160]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d68:	4b26      	ldr	r3, [pc, #152]	@ (8001e04 <HAL_ETH_MspInit+0x15c>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d74:	2332      	movs	r3, #50	@ 0x32
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d84:	230b      	movs	r3, #11
 8001d86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	481e      	ldr	r0, [pc, #120]	@ (8001e08 <HAL_ETH_MspInit+0x160>)
 8001d90:	f000 ff62 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d94:	2386      	movs	r3, #134	@ 0x86
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001da4:	230b      	movs	r3, #11
 8001da6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	4817      	ldr	r0, [pc, #92]	@ (8001e0c <HAL_ETH_MspInit+0x164>)
 8001db0:	f000 ff52 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001db4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc6:	230b      	movs	r3, #11
 8001dc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480f      	ldr	r0, [pc, #60]	@ (8001e10 <HAL_ETH_MspInit+0x168>)
 8001dd2:	f000 ff41 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001dd6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001de8:	230b      	movs	r3, #11
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df0:	4619      	mov	r1, r3
 8001df2:	4808      	ldr	r0, [pc, #32]	@ (8001e14 <HAL_ETH_MspInit+0x16c>)
 8001df4:	f000 ff30 	bl	8002c58 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001df8:	bf00      	nop
 8001dfa:	3738      	adds	r7, #56	@ 0x38
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40028000 	.word	0x40028000
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40021800 	.word	0x40021800

08001e18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0aa      	sub	sp, #168	@ 0xa8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	2284      	movs	r2, #132	@ 0x84
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f004 ff44 	bl	8006cc6 <memset>
  if(hi2c->Instance==I2C1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a22      	ldr	r2, [pc, #136]	@ (8001ecc <HAL_I2C_MspInit+0xb4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d13c      	bne.n	8001ec2 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 fdcc 	bl	80049f4 <HAL_RCCEx_PeriphCLKConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e62:	f7ff fef7 	bl	8001c54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_I2C_MspInit+0xb8>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_I2C_MspInit+0xb8>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <HAL_I2C_MspInit+0xb8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e86:	2312      	movs	r3, #18
 8001e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480b      	ldr	r0, [pc, #44]	@ (8001ed4 <HAL_I2C_MspInit+0xbc>)
 8001ea6:	f000 fed7 	bl	8002c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_I2C_MspInit+0xb8>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_I2C_MspInit+0xb8>)
 8001eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_I2C_MspInit+0xb8>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ec2:	bf00      	nop
 8001ec4:	37a8      	adds	r7, #168	@ 0xa8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020400 	.word	0x40020400

08001ed8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0aa      	sub	sp, #168	@ 0xa8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2284      	movs	r2, #132	@ 0x84
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 fee4 	bl	8006cc6 <memset>
  if(huart->Instance==USART3)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a22      	ldr	r2, [pc, #136]	@ (8001f8c <HAL_UART_MspInit+0xb4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d13c      	bne.n	8001f82 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fd6c 	bl	80049f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f22:	f7ff fe97 	bl	8001c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f26:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <HAL_UART_MspInit+0xb8>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a19      	ldr	r2, [pc, #100]	@ (8001f90 <HAL_UART_MspInit+0xb8>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <HAL_UART_MspInit+0xb8>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3e:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <HAL_UART_MspInit+0xb8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <HAL_UART_MspInit+0xb8>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_UART_MspInit+0xb8>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f70:	2307      	movs	r3, #7
 8001f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f76:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <HAL_UART_MspInit+0xbc>)
 8001f7e:	f000 fe6b 	bl	8002c58 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001f82:	bf00      	nop
 8001f84:	37a8      	adds	r7, #168	@ 0xa8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40004800 	.word	0x40004800
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020c00 	.word	0x40020c00

08001f98 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b0ac      	sub	sp, #176	@ 0xb0
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb0:	f107 0318 	add.w	r3, r7, #24
 8001fb4:	2284      	movs	r2, #132	@ 0x84
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f004 fe84 	bl	8006cc6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fc6:	d159      	bne.n	800207c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001fc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001fcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 fd0b 	bl	80049f4 <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fe4:	f7ff fe36 	bl	8001c54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <HAL_PCD_MspInit+0xec>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	4a25      	ldr	r2, [pc, #148]	@ (8002084 <HAL_PCD_MspInit+0xec>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff4:	4b23      	ldr	r3, [pc, #140]	@ (8002084 <HAL_PCD_MspInit+0xec>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002000:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800201a:	230a      	movs	r3, #10
 800201c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002024:	4619      	mov	r1, r3
 8002026:	4818      	ldr	r0, [pc, #96]	@ (8002088 <HAL_PCD_MspInit+0xf0>)
 8002028:	f000 fe16 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800202c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002040:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002044:	4619      	mov	r1, r3
 8002046:	4810      	ldr	r0, [pc, #64]	@ (8002088 <HAL_PCD_MspInit+0xf0>)
 8002048:	f000 fe06 	bl	8002c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800204c:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <HAL_PCD_MspInit+0xec>)
 800204e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002050:	4a0c      	ldr	r2, [pc, #48]	@ (8002084 <HAL_PCD_MspInit+0xec>)
 8002052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002056:	6353      	str	r3, [r2, #52]	@ 0x34
 8002058:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <HAL_PCD_MspInit+0xec>)
 800205a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4b07      	ldr	r3, [pc, #28]	@ (8002084 <HAL_PCD_MspInit+0xec>)
 8002066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002068:	4a06      	ldr	r2, [pc, #24]	@ (8002084 <HAL_PCD_MspInit+0xec>)
 800206a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <HAL_PCD_MspInit+0xec>)
 8002072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800207c:	bf00      	nop
 800207e:	37b0      	adds	r7, #176	@ 0xb0
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	40020000 	.word	0x40020000

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <NMI_Handler+0x4>

08002094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <MemManage_Handler+0x4>

080020a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e2:	f000 f941 	bl	8002368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  return 1;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_kill>:

int _kill(int pid, int sig)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002104:	f004 fe32 	bl	8006d6c <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	2216      	movs	r2, #22
 800210c:	601a      	str	r2, [r3, #0]
  return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_exit>:

void _exit (int status)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002122:	f04f 31ff 	mov.w	r1, #4294967295
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffe7 	bl	80020fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <_exit+0x12>

08002130 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00a      	b.n	8002158 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002142:	f3af 8000 	nop.w
 8002146:	4601      	mov	r1, r0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf0      	blt.n	8002142 <_read+0x12>
  }

  return len;
 8002160:	687b      	ldr	r3, [r7, #4]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e009      	b.n	8002190 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbf1      	blt.n	800217c <_write+0x12>
  }
  return len;
 8002198:	687b      	ldr	r3, [r7, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_close>:

int _close(int file)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ca:	605a      	str	r2, [r3, #4]
  return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_isatty>:

int _isatty(int file)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	@ (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	@ (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	@ (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f004 fd96 	bl	8006d6c <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a05      	ldr	r2, [pc, #20]	@ (8002270 <_sbrk+0x64>)
 800225c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20050000 	.word	0x20050000
 800226c:	00000400 	.word	0x00000400
 8002270:	20000ae4 	.word	0x20000ae4
 8002274:	20000c38 	.word	0x20000c38

08002278 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <SystemInit+0x20>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <SystemInit+0x20>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800229c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022a0:	f7ff ffea 	bl	8002278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a4:	480c      	ldr	r0, [pc, #48]	@ (80022d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a6:	490d      	ldr	r1, [pc, #52]	@ (80022dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a8:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ac:	e002      	b.n	80022b4 <LoopCopyDataInit>

080022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b2:	3304      	adds	r3, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b8:	d3f9      	bcc.n	80022ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022bc:	4c0a      	ldr	r4, [pc, #40]	@ (80022e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c0:	e001      	b.n	80022c6 <LoopFillZerobss>

080022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c4:	3204      	adds	r2, #4

080022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c8:	d3fb      	bcc.n	80022c2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80022ca:	f004 fd55 	bl	8006d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ce:	f7ff f987 	bl	80015e0 <main>
  bx  lr    
 80022d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80022e0:	08009614 	.word	0x08009614
  ldr r2, =_sbss
 80022e4:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80022e8:	20000c38 	.word	0x20000c38

080022ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC_IRQHandler>

080022ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f2:	2003      	movs	r0, #3
 80022f4:	f000 f92e 	bl	8002554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f000 f805 	bl	8002308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fe:	f7ff fcaf 	bl	8001c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_InitTick+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_InitTick+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f93b 	bl	80025a2 <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00e      	b.n	8002354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d80a      	bhi.n	8002352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 f911 	bl	800256a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4a06      	ldr	r2, [pc, #24]	@ (8002364 <HAL_InitTick+0x5c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000000 	.word	0x20000000
 8002360:	20000008 	.word	0x20000008
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	@ (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000008 	.word	0x20000008
 800238c:	20000ae8 	.word	0x20000ae8

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b03      	ldr	r3, [pc, #12]	@ (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000ae8 	.word	0x20000ae8

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff ffee 	bl	8002390 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <HAL_Delay+0x44>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffde 	bl	8002390 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008

080023f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <__NVIC_SetPriorityGrouping+0x40>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 800241a:	4313      	orrs	r3, r2
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	@ (8002430 <__NVIC_SetPriorityGrouping+0x40>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00
 8002434:	05fa0000 	.word	0x05fa0000

08002438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <__NVIC_GetPriorityGrouping+0x18>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 0307 	and.w	r3, r3, #7
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	@ (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	@ 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002520:	d301      	bcc.n	8002526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002522:	2301      	movs	r3, #1
 8002524:	e00f      	b.n	8002546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <SysTick_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252e:	210f      	movs	r1, #15
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f7ff ff8e 	bl	8002454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <SysTick_Config+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253e:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <SysTick_Config+0x40>)
 8002540:	2207      	movs	r2, #7
 8002542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff47 	bl	80023f0 <__NVIC_SetPriorityGrouping>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800257c:	f7ff ff5c 	bl	8002438 <__NVIC_GetPriorityGrouping>
 8002580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f7ff ff8e 	bl	80024a8 <NVIC_EncodePriority>
 800258c:	4602      	mov	r2, r0
 800258e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff5d 	bl	8002454 <__NVIC_SetPriority>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffb0 	bl	8002510 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e086      	b.n	80026dc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d106      	bne.n	80025e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fb61 	bl	8001ca8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	4b3f      	ldr	r3, [pc, #252]	@ (80026e4 <HAL_ETH_Init+0x128>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	4a3e      	ldr	r2, [pc, #248]	@ (80026e4 <HAL_ETH_Init+0x128>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f2:	4b3c      	ldr	r3, [pc, #240]	@ (80026e4 <HAL_ETH_Init+0x128>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025fe:	4b3a      	ldr	r3, [pc, #232]	@ (80026e8 <HAL_ETH_Init+0x12c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a39      	ldr	r2, [pc, #228]	@ (80026e8 <HAL_ETH_Init+0x12c>)
 8002604:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002608:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800260a:	4b37      	ldr	r3, [pc, #220]	@ (80026e8 <HAL_ETH_Init+0x12c>)
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4935      	ldr	r1, [pc, #212]	@ (80026e8 <HAL_ETH_Init+0x12c>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002618:	4b33      	ldr	r3, [pc, #204]	@ (80026e8 <HAL_ETH_Init+0x12c>)
 800261a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002632:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002634:	f7ff feac 	bl	8002390 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800263a:	e011      	b.n	8002660 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800263c:	f7ff fea8 	bl	8002390 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800264a:	d909      	bls.n	8002660 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2204      	movs	r2, #4
 8002650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	22e0      	movs	r2, #224	@ 0xe0
 8002658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e03d      	b.n	80026dc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e4      	bne.n	800263c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f97a 	bl	800296c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fa25 	bl	8002ac8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fa7b 	bl	8002b7a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	461a      	mov	r2, r3
 800268a:	2100      	movs	r1, #0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f9e3 	bl	8002a58 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80026a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b0f      	ldr	r3, [pc, #60]	@ (80026ec <HAL_ETH_Init+0x130>)
 80026b0:	430b      	orrs	r3, r1
 80026b2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80026c6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2210      	movs	r2, #16
 80026d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40013800 	.word	0x40013800
 80026ec:	00020060 	.word	0x00020060

080026f0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4b53      	ldr	r3, [pc, #332]	@ (8002854 <ETH_SetMACConfig+0x164>)
 8002706:	4013      	ands	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	7b9b      	ldrb	r3, [r3, #14]
 800270e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	7c12      	ldrb	r2, [r2, #16]
 8002714:	2a00      	cmp	r2, #0
 8002716:	d102      	bne.n	800271e <ETH_SetMACConfig+0x2e>
 8002718:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800271c:	e000      	b.n	8002720 <ETH_SetMACConfig+0x30>
 800271e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002720:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	7c52      	ldrb	r2, [r2, #17]
 8002726:	2a00      	cmp	r2, #0
 8002728:	d102      	bne.n	8002730 <ETH_SetMACConfig+0x40>
 800272a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800272e:	e000      	b.n	8002732 <ETH_SetMACConfig+0x42>
 8002730:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002732:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002738:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	7fdb      	ldrb	r3, [r3, #31]
 800273e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002740:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002746:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	7f92      	ldrb	r2, [r2, #30]
 800274c:	2a00      	cmp	r2, #0
 800274e:	d102      	bne.n	8002756 <ETH_SetMACConfig+0x66>
 8002750:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002754:	e000      	b.n	8002758 <ETH_SetMACConfig+0x68>
 8002756:	2200      	movs	r2, #0
                        macconf->Speed |
 8002758:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7f1b      	ldrb	r3, [r3, #28]
 800275e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002760:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002766:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	791b      	ldrb	r3, [r3, #4]
 800276c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800276e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002776:	2a00      	cmp	r2, #0
 8002778:	d102      	bne.n	8002780 <ETH_SetMACConfig+0x90>
 800277a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277e:	e000      	b.n	8002782 <ETH_SetMACConfig+0x92>
 8002780:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002782:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	7bdb      	ldrb	r3, [r3, #15]
 8002788:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800278a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002790:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002798:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800279a:	4313      	orrs	r3, r2
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7ff fdf8 	bl	80023a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80027ce:	4013      	ands	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80027de:	2a00      	cmp	r2, #0
 80027e0:	d101      	bne.n	80027e6 <ETH_SetMACConfig+0xf6>
 80027e2:	2280      	movs	r2, #128	@ 0x80
 80027e4:	e000      	b.n	80027e8 <ETH_SetMACConfig+0xf8>
 80027e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80027f6:	2a01      	cmp	r2, #1
 80027f8:	d101      	bne.n	80027fe <ETH_SetMACConfig+0x10e>
 80027fa:	2208      	movs	r2, #8
 80027fc:	e000      	b.n	8002800 <ETH_SetMACConfig+0x110>
 80027fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002800:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002808:	2a01      	cmp	r2, #1
 800280a:	d101      	bne.n	8002810 <ETH_SetMACConfig+0x120>
 800280c:	2204      	movs	r2, #4
 800280e:	e000      	b.n	8002812 <ETH_SetMACConfig+0x122>
 8002810:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002812:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800281a:	2a01      	cmp	r2, #1
 800281c:	d101      	bne.n	8002822 <ETH_SetMACConfig+0x132>
 800281e:	2202      	movs	r2, #2
 8002820:	e000      	b.n	8002824 <ETH_SetMACConfig+0x134>
 8002822:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002824:	4313      	orrs	r3, r2
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800283c:	2001      	movs	r0, #1
 800283e:	f7ff fdb3 	bl	80023a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	fd20810f 	.word	0xfd20810f

08002858 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <ETH_SetDMAConfig+0x110>)
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	7b1b      	ldrb	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <ETH_SetDMAConfig+0x2c>
 800287e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002882:	e000      	b.n	8002886 <ETH_SetDMAConfig+0x2e>
 8002884:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	7b5b      	ldrb	r3, [r3, #13]
 800288a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800288c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	7f52      	ldrb	r2, [r2, #29]
 8002892:	2a00      	cmp	r2, #0
 8002894:	d102      	bne.n	800289c <ETH_SetDMAConfig+0x44>
 8002896:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800289a:	e000      	b.n	800289e <ETH_SetDMAConfig+0x46>
 800289c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800289e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	7b9b      	ldrb	r3, [r3, #14]
 80028a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	7f1b      	ldrb	r3, [r3, #28]
 80028b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	7f9b      	ldrb	r3, [r3, #30]
 80028ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028cc:	4313      	orrs	r3, r2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028dc:	461a      	mov	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ee:	2001      	movs	r0, #1
 80028f0:	f7ff fd5a 	bl	80023a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028fc:	461a      	mov	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	791b      	ldrb	r3, [r3, #4]
 8002906:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800290c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002912:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002918:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002920:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002922:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800292a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002930:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800293a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800293e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800294c:	2001      	movs	r0, #1
 800294e:	f7ff fd2b 	bl	80023a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	f8de3f23 	.word	0xf8de3f23

0800296c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b0a6      	sub	sp, #152	@ 0x98
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002974:	2301      	movs	r3, #1
 8002976:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002980:	2300      	movs	r3, #0
 8002982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029ae:	2300      	movs	r3, #0
 80029b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fe7f 	bl	80026f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029f2:	2301      	movs	r3, #1
 80029f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a2c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a32:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a34:	2301      	movs	r3, #1
 8002a36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff05 	bl	8002858 <ETH_SetDMAConfig>
}
 8002a4e:	bf00      	nop
 8002a50:	3798      	adds	r7, #152	@ 0x98
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3305      	adds	r3, #5
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	3204      	adds	r2, #4
 8002a70:	7812      	ldrb	r2, [r2, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <ETH_MACAddressConfig+0x68>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3303      	adds	r3, #3
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	061a      	lsls	r2, r3, #24
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	041b      	lsls	r3, r3, #16
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3301      	adds	r3, #1
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <ETH_MACAddressConfig+0x6c>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40028040 	.word	0x40028040
 8002ac4:	40028044 	.word	0x40028044

08002ac8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e03e      	b.n	8002b54 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68d9      	ldr	r1, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	3206      	adds	r2, #6
 8002b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d80c      	bhi.n	8002b38 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68d9      	ldr	r1, [r3, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	e004      	b.n	8002b42 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3301      	adds	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d9bd      	bls.n	8002ad6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b6c:	611a      	str	r2, [r3, #16]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e048      	b.n	8002c1a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6919      	ldr	r1, [r3, #16]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002bc4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	3212      	adds	r2, #18
 8002be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d80c      	bhi.n	8002c0a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6919      	ldr	r1, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	e004      	b.n	8002c14 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d9b3      	bls.n	8002b88 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c4a:	60da      	str	r2, [r3, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	@ 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e175      	b.n	8002f64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8164 	bne.w	8002f5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d005      	beq.n	8002cae <HAL_GPIO_Init+0x56>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d130      	bne.n	8002d10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 0201 	and.w	r2, r3, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d017      	beq.n	8002d4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d123      	bne.n	8002da0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	69b9      	ldr	r1, [r7, #24]
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80be 	beq.w	8002f5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de2:	4b66      	ldr	r3, [pc, #408]	@ (8002f7c <HAL_GPIO_Init+0x324>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	4a65      	ldr	r2, [pc, #404]	@ (8002f7c <HAL_GPIO_Init+0x324>)
 8002de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dee:	4b63      	ldr	r3, [pc, #396]	@ (8002f7c <HAL_GPIO_Init+0x324>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dfa:	4a61      	ldr	r2, [pc, #388]	@ (8002f80 <HAL_GPIO_Init+0x328>)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	3302      	adds	r3, #2
 8002e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	220f      	movs	r2, #15
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a58      	ldr	r2, [pc, #352]	@ (8002f84 <HAL_GPIO_Init+0x32c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d037      	beq.n	8002e96 <HAL_GPIO_Init+0x23e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a57      	ldr	r2, [pc, #348]	@ (8002f88 <HAL_GPIO_Init+0x330>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d031      	beq.n	8002e92 <HAL_GPIO_Init+0x23a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a56      	ldr	r2, [pc, #344]	@ (8002f8c <HAL_GPIO_Init+0x334>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02b      	beq.n	8002e8e <HAL_GPIO_Init+0x236>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a55      	ldr	r2, [pc, #340]	@ (8002f90 <HAL_GPIO_Init+0x338>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_Init+0x232>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a54      	ldr	r2, [pc, #336]	@ (8002f94 <HAL_GPIO_Init+0x33c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_Init+0x22e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a53      	ldr	r2, [pc, #332]	@ (8002f98 <HAL_GPIO_Init+0x340>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x22a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a52      	ldr	r2, [pc, #328]	@ (8002f9c <HAL_GPIO_Init+0x344>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x226>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a51      	ldr	r2, [pc, #324]	@ (8002fa0 <HAL_GPIO_Init+0x348>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x222>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a50      	ldr	r2, [pc, #320]	@ (8002fa4 <HAL_GPIO_Init+0x34c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x21e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4f      	ldr	r2, [pc, #316]	@ (8002fa8 <HAL_GPIO_Init+0x350>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x21a>
 8002e6e:	2309      	movs	r3, #9
 8002e70:	e012      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e72:	230a      	movs	r3, #10
 8002e74:	e010      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e76:	2308      	movs	r3, #8
 8002e78:	e00e      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e7a:	2307      	movs	r3, #7
 8002e7c:	e00c      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e7e:	2306      	movs	r3, #6
 8002e80:	e00a      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e82:	2305      	movs	r3, #5
 8002e84:	e008      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e86:	2304      	movs	r3, #4
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e004      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e002      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e96:	2300      	movs	r3, #0
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f002 0203 	and.w	r2, r2, #3
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	4093      	lsls	r3, r2
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ea8:	4935      	ldr	r1, [pc, #212]	@ (8002f80 <HAL_GPIO_Init+0x328>)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fac <HAL_GPIO_Init+0x354>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eda:	4a34      	ldr	r2, [pc, #208]	@ (8002fac <HAL_GPIO_Init+0x354>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee0:	4b32      	ldr	r3, [pc, #200]	@ (8002fac <HAL_GPIO_Init+0x354>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f04:	4a29      	ldr	r2, [pc, #164]	@ (8002fac <HAL_GPIO_Init+0x354>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f0a:	4b28      	ldr	r3, [pc, #160]	@ (8002fac <HAL_GPIO_Init+0x354>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fac <HAL_GPIO_Init+0x354>)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <HAL_GPIO_Init+0x354>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f58:	4a14      	ldr	r2, [pc, #80]	@ (8002fac <HAL_GPIO_Init+0x354>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	f67f ae86 	bls.w	8002c78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	@ 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40020000 	.word	0x40020000
 8002f88:	40020400 	.word	0x40020400
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40020c00 	.word	0x40020c00
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40021400 	.word	0x40021400
 8002f9c:	40021800 	.word	0x40021800
 8002fa0:	40021c00 	.word	0x40021c00
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	40022400 	.word	0x40022400
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fc0:	787b      	ldrb	r3, [r7, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fcc:	e003      	b.n	8002fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	041a      	lsls	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	619a      	str	r2, [r3, #24]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ff4:	887a      	ldrh	r2, [r7, #2]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	041a      	lsls	r2, r3, #16
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	43d9      	mvns	r1, r3
 8003000:	887b      	ldrh	r3, [r7, #2]
 8003002:	400b      	ands	r3, r1
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	619a      	str	r2, [r3, #24]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e08b      	b.n	8003142 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe feea 	bl	8001e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	@ 0x24
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003068:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003078:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	e006      	b.n	80030a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800309e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d108      	bne.n	80030ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	e007      	b.n	80030ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <HAL_I2C_Init+0x134>)
 80030d6:	430b      	orrs	r3, r1
 80030d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69d9      	ldr	r1, [r3, #28]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1a      	ldr	r2, [r3, #32]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	02008000 	.word	0x02008000

08003150 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	461a      	mov	r2, r3
 800315c:	460b      	mov	r3, r1
 800315e:	817b      	strh	r3, [r7, #10]
 8003160:	4613      	mov	r3, r2
 8003162:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b20      	cmp	r3, #32
 800316e:	f040 80fd 	bne.w	800336c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_I2C_Master_Transmit+0x30>
 800317c:	2302      	movs	r3, #2
 800317e:	e0f6      	b.n	800336e <HAL_I2C_Master_Transmit+0x21e>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003188:	f7ff f902 	bl	8002390 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2319      	movs	r3, #25
 8003194:	2201      	movs	r2, #1
 8003196:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fb88 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0e1      	b.n	800336e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2221      	movs	r2, #33	@ 0x21
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2210      	movs	r2, #16
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	893a      	ldrh	r2, [r7, #8]
 80031ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2bff      	cmp	r3, #255	@ 0xff
 80031da:	d906      	bls.n	80031ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	22ff      	movs	r2, #255	@ 0xff
 80031e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80031e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e007      	b.n	80031fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80031f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d024      	beq.n	800324c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	8979      	ldrh	r1, [r7, #10]
 800323e:	4b4e      	ldr	r3, [pc, #312]	@ (8003378 <HAL_I2C_Master_Transmit+0x228>)
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fcf7 	bl	8003c38 <I2C_TransferConfig>
 800324a:	e066      	b.n	800331a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003250:	b2da      	uxtb	r2, r3
 8003252:	8979      	ldrh	r1, [r7, #10]
 8003254:	4b48      	ldr	r3, [pc, #288]	@ (8003378 <HAL_I2C_Master_Transmit+0x228>)
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fcec 	bl	8003c38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003260:	e05b      	b.n	800331a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	6a39      	ldr	r1, [r7, #32]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fb7b 	bl	8003962 <I2C_WaitOnTXISFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07b      	b.n	800336e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d034      	beq.n	800331a <HAL_I2C_Master_Transmit+0x1ca>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d130      	bne.n	800331a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	2200      	movs	r2, #0
 80032c0:	2180      	movs	r1, #128	@ 0x80
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 faf4 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e04d      	b.n	800336e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2bff      	cmp	r3, #255	@ 0xff
 80032da:	d90e      	bls.n	80032fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	22ff      	movs	r2, #255	@ 0xff
 80032e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	2300      	movs	r3, #0
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fca0 	bl	8003c38 <I2C_TransferConfig>
 80032f8:	e00f      	b.n	800331a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	b2da      	uxtb	r2, r3
 800330a:	8979      	ldrh	r1, [r7, #10]
 800330c:	2300      	movs	r3, #0
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fc8f 	bl	8003c38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d19e      	bne.n	8003262 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	6a39      	ldr	r1, [r7, #32]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fb61 	bl	80039f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e01a      	b.n	800336e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2220      	movs	r2, #32
 800333e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <HAL_I2C_Master_Transmit+0x22c>)
 800334c:	400b      	ands	r3, r1
 800334e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	80002000 	.word	0x80002000
 800337c:	fe00e800 	.word	0xfe00e800

08003380 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	4608      	mov	r0, r1
 800338a:	4611      	mov	r1, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4603      	mov	r3, r0
 8003390:	817b      	strh	r3, [r7, #10]
 8003392:	460b      	mov	r3, r1
 8003394:	813b      	strh	r3, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	f040 80fd 	bne.w	80035a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_I2C_Mem_Read+0x34>
 80033ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0f1      	b.n	80035a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_I2C_Mem_Read+0x4e>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0ea      	b.n	80035a4 <HAL_I2C_Mem_Read+0x224>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033d6:	f7fe ffdb 	bl	8002390 <HAL_GetTick>
 80033da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2319      	movs	r3, #25
 80033e2:	2201      	movs	r2, #1
 80033e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fa61 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0d5      	b.n	80035a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2222      	movs	r2, #34	@ 0x22
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2240      	movs	r2, #64	@ 0x40
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003418:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003420:	88f8      	ldrh	r0, [r7, #6]
 8003422:	893a      	ldrh	r2, [r7, #8]
 8003424:	8979      	ldrh	r1, [r7, #10]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4603      	mov	r3, r0
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f9c5 	bl	80037c0 <I2C_RequestMemoryRead>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0ad      	b.n	80035a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	2bff      	cmp	r3, #255	@ 0xff
 8003450:	d90e      	bls.n	8003470 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345c:	b2da      	uxtb	r2, r3
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	4b52      	ldr	r3, [pc, #328]	@ (80035ac <HAL_I2C_Mem_Read+0x22c>)
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fbe5 	bl	8003c38 <I2C_TransferConfig>
 800346e:	e00f      	b.n	8003490 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347e:	b2da      	uxtb	r2, r3
 8003480:	8979      	ldrh	r1, [r7, #10]
 8003482:	4b4a      	ldr	r3, [pc, #296]	@ (80035ac <HAL_I2C_Mem_Read+0x22c>)
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fbd4 	bl	8003c38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003496:	2200      	movs	r2, #0
 8003498:	2104      	movs	r1, #4
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa08 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07c      	b.n	80035a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d034      	beq.n	8003550 <HAL_I2C_Mem_Read+0x1d0>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d130      	bne.n	8003550 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	2200      	movs	r2, #0
 80034f6:	2180      	movs	r1, #128	@ 0x80
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f9d9 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e04d      	b.n	80035a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2bff      	cmp	r3, #255	@ 0xff
 8003510:	d90e      	bls.n	8003530 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351c:	b2da      	uxtb	r2, r3
 800351e:	8979      	ldrh	r1, [r7, #10]
 8003520:	2300      	movs	r3, #0
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fb85 	bl	8003c38 <I2C_TransferConfig>
 800352e:	e00f      	b.n	8003550 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353e:	b2da      	uxtb	r2, r3
 8003540:	8979      	ldrh	r1, [r7, #10]
 8003542:	2300      	movs	r3, #0
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fb74 	bl	8003c38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d19a      	bne.n	8003490 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fa46 	bl	80039f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e01a      	b.n	80035a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2220      	movs	r2, #32
 8003574:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_I2C_Mem_Read+0x230>)
 8003582:	400b      	ands	r3, r1
 8003584:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	80002400 	.word	0x80002400
 80035b0:	fe00e800 	.word	0xfe00e800

080035b4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	@ 0x28
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	460b      	mov	r3, r1
 80035c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	f040 80e9 	bne.w	80037ac <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0df      	b.n	80037ae <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_I2C_IsDeviceReady+0x48>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0d8      	b.n	80037ae <HAL_I2C_IsDeviceReady+0x1fa>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2224      	movs	r2, #36	@ 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <HAL_I2C_IsDeviceReady+0x72>
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003620:	4b65      	ldr	r3, [pc, #404]	@ (80037b8 <HAL_I2C_IsDeviceReady+0x204>)
 8003622:	4313      	orrs	r3, r2
 8003624:	e004      	b.n	8003630 <HAL_I2C_IsDeviceReady+0x7c>
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800362c:	4b63      	ldr	r3, [pc, #396]	@ (80037bc <HAL_I2C_IsDeviceReady+0x208>)
 800362e:	4313      	orrs	r3, r2
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003636:	f7fe feab 	bl	8002390 <HAL_GetTick>
 800363a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b10      	cmp	r3, #16
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003668:	e034      	b.n	80036d4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d01a      	beq.n	80036a8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003672:	f7fe fe8d 	bl	8002390 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d302      	bcc.n	8003688 <HAL_I2C_IsDeviceReady+0xd4>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10f      	bne.n	80036a8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e082      	b.n	80037ae <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80036d4:	7fbb      	ldrb	r3, [r7, #30]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <HAL_I2C_IsDeviceReady+0x12c>
 80036da:	7f7b      	ldrb	r3, [r7, #29]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0c4      	beq.n	800366a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d027      	beq.n	800373e <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2120      	movs	r1, #32
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f8d9 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003708:	2b04      	cmp	r3, #4
 800370a:	d107      	bne.n	800371c <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2220      	movs	r2, #32
 8003712:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
 800371a:	e026      	b.n	800376a <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e023      	b.n	800376a <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2220      	movs	r2, #32
 8003728:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e037      	b.n	80037ae <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2210      	movs	r2, #16
 8003744:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2200      	movs	r2, #0
 800374e:	2120      	movs	r1, #32
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f8ad 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e003      	b.n	800376a <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2220      	movs	r2, #32
 8003768:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	3301      	adds	r3, #1
 800376e:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d904      	bls.n	8003782 <HAL_I2C_IsDeviceReady+0x1ce>
 8003778:	7ffb      	ldrb	r3, [r7, #31]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	429a      	cmp	r2, r3
 8003788:	f63f af43 	bhi.w	8003612 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	02002000 	.word	0x02002000
 80037bc:	02002800 	.word	0x02002800

080037c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	461a      	mov	r2, r3
 80037ce:	4603      	mov	r3, r0
 80037d0:	817b      	strh	r3, [r7, #10]
 80037d2:	460b      	mov	r3, r1
 80037d4:	813b      	strh	r3, [r7, #8]
 80037d6:	4613      	mov	r3, r2
 80037d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	8979      	ldrh	r1, [r7, #10]
 80037e0:	4b20      	ldr	r3, [pc, #128]	@ (8003864 <I2C_RequestMemoryRead+0xa4>)
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2300      	movs	r3, #0
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fa26 	bl	8003c38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8b6 	bl	8003962 <I2C_WaitOnTXISFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e02c      	b.n	800385a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003806:	893b      	ldrh	r3, [r7, #8]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003810:	e015      	b.n	800383e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003812:	893b      	ldrh	r3, [r7, #8]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	b29b      	uxth	r3, r3
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f89c 	bl	8003962 <I2C_WaitOnTXISFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e012      	b.n	800385a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003834:	893b      	ldrh	r3, [r7, #8]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2200      	movs	r2, #0
 8003846:	2140      	movs	r1, #64	@ 0x40
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f831 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	80002000 	.word	0x80002000

08003868 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d103      	bne.n	8003886 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d007      	beq.n	80038a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	619a      	str	r2, [r3, #24]
  }
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c0:	e03b      	b.n	800393a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f8d6 	bl	8003a78 <I2C_IsErrorOccurred>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e041      	b.n	800395a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d02d      	beq.n	800393a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fe fd57 	bl	8002390 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d122      	bne.n	800393a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4013      	ands	r3, r2
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	429a      	cmp	r2, r3
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	429a      	cmp	r2, r3
 8003910:	d113      	bne.n	800393a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e00f      	b.n	800395a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0b4      	beq.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800396e:	e033      	b.n	80039d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f87f 	bl	8003a78 <I2C_IsErrorOccurred>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e031      	b.n	80039e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d025      	beq.n	80039d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7fe fd00 	bl	8002390 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11a      	bne.n	80039d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d013      	beq.n	80039d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e007      	b.n	80039e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d1c4      	bne.n	8003970 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039fc:	e02f      	b.n	8003a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f838 	bl	8003a78 <I2C_IsErrorOccurred>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e02d      	b.n	8003a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a12:	f7fe fcbd 	bl	8002390 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11a      	bne.n	8003a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d013      	beq.n	8003a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e007      	b.n	8003a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d1c8      	bne.n	80039fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	@ 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d068      	beq.n	8003b76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aac:	e049      	b.n	8003b42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d045      	beq.n	8003b42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7fe fc6b 	bl	8002390 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <I2C_IsErrorOccurred+0x54>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d13a      	bne.n	8003b42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ade:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aee:	d121      	bne.n	8003b34 <I2C_IsErrorOccurred+0xbc>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003af6:	d01d      	beq.n	8003b34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d01a      	beq.n	8003b34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b0e:	f7fe fc3f 	bl	8002390 <HAL_GetTick>
 8003b12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b14:	e00e      	b.n	8003b34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b16:	f7fe fc3b 	bl	8002390 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b19      	cmp	r3, #25
 8003b22:	d907      	bls.n	8003b34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f043 0320 	orr.w	r3, r3, #32
 8003b2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003b32:	e006      	b.n	8003b42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d1e9      	bne.n	8003b16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d003      	beq.n	8003b58 <I2C_IsErrorOccurred+0xe0>
 8003b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0aa      	beq.n	8003aae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d103      	bne.n	8003b68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2220      	movs	r2, #32
 8003b66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	f043 0304 	orr.w	r3, r3, #4
 8003b6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f043 0308 	orr.w	r3, r3, #8
 8003bb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f043 0302 	orr.w	r3, r3, #2
 8003bd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01c      	beq.n	8003c26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fe3b 	bl	8003868 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c34 <I2C_IsErrorOccurred+0x1bc>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003c26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3728      	adds	r7, #40	@ 0x28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	fe00e800 	.word	0xfe00e800

08003c38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	817b      	strh	r3, [r7, #10]
 8003c46:	4613      	mov	r3, r2
 8003c48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c50:	7a7b      	ldrb	r3, [r7, #9]
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c58:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c66:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	0d5b      	lsrs	r3, r3, #21
 8003c72:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <I2C_TransferConfig+0x60>)
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	ea02 0103 	and.w	r1, r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	03ff63ff 	.word	0x03ff63ff

08003c9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d138      	bne.n	8003d24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e032      	b.n	8003d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2224      	movs	r2, #36	@ 0x24
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d24:	2302      	movs	r3, #2
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d139      	bne.n	8003dbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e033      	b.n	8003dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2224      	movs	r2, #36	@ 0x24
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af02      	add	r7, sp, #8
 8003dd0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e108      	b.n	8003fee <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fe f8ce 	bl	8001f98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e0a:	d102      	bne.n	8003e12 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 ff3c 	bl	8005c94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	7c1a      	ldrb	r2, [r3, #16]
 8003e24:	f88d 2000 	strb.w	r2, [sp]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e2c:	f001 fed8 	bl	8005be0 <USB_CoreInit>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0d5      	b.n	8003fee <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 ff34 	bl	8005cb6 <USB_SetCurrentMode>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0c6      	b.n	8003fee <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e04a      	b.n	8003efc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e66:	7bfa      	ldrb	r2, [r7, #15]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3315      	adds	r3, #21
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3314      	adds	r3, #20
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	b298      	uxth	r0, r3
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	332e      	adds	r3, #46	@ 0x2e
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	331c      	adds	r3, #28
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	3320      	adds	r3, #32
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3324      	adds	r3, #36	@ 0x24
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	791b      	ldrb	r3, [r3, #4]
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d3af      	bcc.n	8003e66 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
 8003f0a:	e044      	b.n	8003f96 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	3301      	adds	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	791b      	ldrb	r3, [r3, #4]
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d3b5      	bcc.n	8003f0c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7c1a      	ldrb	r2, [r3, #16]
 8003fa8:	f88d 2000 	strb.w	r2, [sp]
 8003fac:	3304      	adds	r3, #4
 8003fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fb0:	f001 fece 	bl	8005d50 <USB_DevInit>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e013      	b.n	8003fee <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7b1b      	ldrb	r3, [r3, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d102      	bne.n	8003fe2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f80b 	bl	8003ff8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f002 f889 	bl	80060fe <USB_DevDisconnect>

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004026:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_PCDEx_ActivateLPM+0x44>)
 8004028:	4313      	orrs	r3, r2
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	10000003 	.word	0x10000003

08004040 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004044:	4b05      	ldr	r3, [pc, #20]	@ (800405c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a04      	ldr	r2, [pc, #16]	@ (800405c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800404a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404e:	6013      	str	r3, [r2, #0]
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40007000 	.word	0x40007000

08004060 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004068:	2300      	movs	r3, #0
 800406a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e291      	b.n	800459a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8087 	beq.w	8004192 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004084:	4b96      	ldr	r3, [pc, #600]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b04      	cmp	r3, #4
 800408e:	d00c      	beq.n	80040aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004090:	4b93      	ldr	r3, [pc, #588]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b08      	cmp	r3, #8
 800409a:	d112      	bne.n	80040c2 <HAL_RCC_OscConfig+0x62>
 800409c:	4b90      	ldr	r3, [pc, #576]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040a8:	d10b      	bne.n	80040c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040aa:	4b8d      	ldr	r3, [pc, #564]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06c      	beq.n	8004190 <HAL_RCC_OscConfig+0x130>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d168      	bne.n	8004190 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e26b      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x7a>
 80040cc:	4b84      	ldr	r3, [pc, #528]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a83      	ldr	r2, [pc, #524]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e02e      	b.n	8004138 <HAL_RCC_OscConfig+0xd8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x9c>
 80040e2:	4b7f      	ldr	r3, [pc, #508]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a7e      	ldr	r2, [pc, #504]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b7c      	ldr	r3, [pc, #496]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a7b      	ldr	r2, [pc, #492]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80040f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e01d      	b.n	8004138 <HAL_RCC_OscConfig+0xd8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0xc0>
 8004106:	4b76      	ldr	r3, [pc, #472]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a75      	ldr	r2, [pc, #468]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 800410c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b73      	ldr	r3, [pc, #460]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a72      	ldr	r2, [pc, #456]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e00b      	b.n	8004138 <HAL_RCC_OscConfig+0xd8>
 8004120:	4b6f      	ldr	r3, [pc, #444]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6e      	ldr	r2, [pc, #440]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b6c      	ldr	r3, [pc, #432]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a6b      	ldr	r2, [pc, #428]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fe f926 	bl	8002390 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004148:	f7fe f922 	bl	8002390 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	@ 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e21f      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	4b61      	ldr	r3, [pc, #388]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0xe8>
 8004166:	e014      	b.n	8004192 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fe f912 	bl	8002390 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7fe f90e 	bl	8002390 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e20b      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	4b57      	ldr	r3, [pc, #348]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x110>
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d069      	beq.n	8004272 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419e:	4b50      	ldr	r3, [pc, #320]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041aa:	4b4d      	ldr	r3, [pc, #308]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d11c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x190>
 80041b6:	4b4a      	ldr	r3, [pc, #296]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d116      	bne.n	80041f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	4b47      	ldr	r3, [pc, #284]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_RCC_OscConfig+0x17a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e1df      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041da:	4b41      	ldr	r3, [pc, #260]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	493d      	ldr	r1, [pc, #244]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ee:	e040      	b.n	8004272 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d023      	beq.n	8004240 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f8:	4b39      	ldr	r3, [pc, #228]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a38      	ldr	r2, [pc, #224]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fe f8c4 	bl	8002390 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420c:	f7fe f8c0 	bl	8002390 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e1bd      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421e:	4b30      	ldr	r3, [pc, #192]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422a:	4b2d      	ldr	r3, [pc, #180]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4929      	ldr	r1, [pc, #164]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]
 800423e:	e018      	b.n	8004272 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004240:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a26      	ldr	r2, [pc, #152]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe f8a0 	bl	8002390 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004254:	f7fe f89c 	bl	8002390 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e199      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004266:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d038      	beq.n	80042f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d019      	beq.n	80042ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004286:	4b16      	ldr	r3, [pc, #88]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 8004288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428a:	4a15      	ldr	r2, [pc, #84]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fe f87d 	bl	8002390 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429a:	f7fe f879 	bl	8002390 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e176      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ac:	4b0c      	ldr	r3, [pc, #48]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80042ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x23a>
 80042b8:	e01a      	b.n	80042f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ba:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80042bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042be:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <HAL_RCC_OscConfig+0x280>)
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fe f863 	bl	8002390 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ce:	f7fe f85f 	bl	8002390 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d903      	bls.n	80042e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e15c      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
 80042e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	4b91      	ldr	r3, [pc, #580]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80042e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1ee      	bne.n	80042ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a4 	beq.w	8004446 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fe:	4b8b      	ldr	r3, [pc, #556]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10d      	bne.n	8004326 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	4b88      	ldr	r3, [pc, #544]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	4a87      	ldr	r2, [pc, #540]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004314:	6413      	str	r3, [r2, #64]	@ 0x40
 8004316:	4b85      	ldr	r3, [pc, #532]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004326:	4b82      	ldr	r3, [pc, #520]	@ (8004530 <HAL_RCC_OscConfig+0x4d0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d118      	bne.n	8004364 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004332:	4b7f      	ldr	r3, [pc, #508]	@ (8004530 <HAL_RCC_OscConfig+0x4d0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7e      	ldr	r2, [pc, #504]	@ (8004530 <HAL_RCC_OscConfig+0x4d0>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433e:	f7fe f827 	bl	8002390 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004346:	f7fe f823 	bl	8002390 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b64      	cmp	r3, #100	@ 0x64
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e120      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004358:	4b75      	ldr	r3, [pc, #468]	@ (8004530 <HAL_RCC_OscConfig+0x4d0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x31a>
 800436c:	4b6f      	ldr	r3, [pc, #444]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004370:	4a6e      	ldr	r2, [pc, #440]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6713      	str	r3, [r2, #112]	@ 0x70
 8004378:	e02d      	b.n	80043d6 <HAL_RCC_OscConfig+0x376>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0x33c>
 8004382:	4b6a      	ldr	r3, [pc, #424]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004386:	4a69      	ldr	r2, [pc, #420]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	6713      	str	r3, [r2, #112]	@ 0x70
 800438e:	4b67      	ldr	r3, [pc, #412]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004392:	4a66      	ldr	r2, [pc, #408]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004394:	f023 0304 	bic.w	r3, r3, #4
 8004398:	6713      	str	r3, [r2, #112]	@ 0x70
 800439a:	e01c      	b.n	80043d6 <HAL_RCC_OscConfig+0x376>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b05      	cmp	r3, #5
 80043a2:	d10c      	bne.n	80043be <HAL_RCC_OscConfig+0x35e>
 80043a4:	4b61      	ldr	r3, [pc, #388]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	4a60      	ldr	r2, [pc, #384]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80043aa:	f043 0304 	orr.w	r3, r3, #4
 80043ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b0:	4b5e      	ldr	r3, [pc, #376]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b4:	4a5d      	ldr	r2, [pc, #372]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80043bc:	e00b      	b.n	80043d6 <HAL_RCC_OscConfig+0x376>
 80043be:	4b5b      	ldr	r3, [pc, #364]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	4a5a      	ldr	r2, [pc, #360]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ca:	4b58      	ldr	r3, [pc, #352]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	4a57      	ldr	r2, [pc, #348]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d015      	beq.n	800440a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fd ffd7 	bl	8002390 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fd ffd3 	bl	8002390 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0ce      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fc:	4b4b      	ldr	r3, [pc, #300]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ee      	beq.n	80043e6 <HAL_RCC_OscConfig+0x386>
 8004408:	e014      	b.n	8004434 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fd ffc1 	bl	8002390 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fd ffbd 	bl	8002390 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e0b8      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004428:	4b40      	ldr	r3, [pc, #256]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1ee      	bne.n	8004412 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800443a:	4b3c      	ldr	r3, [pc, #240]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	4a3b      	ldr	r2, [pc, #236]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004444:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80a4 	beq.w	8004598 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004450:	4b36      	ldr	r3, [pc, #216]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b08      	cmp	r3, #8
 800445a:	d06b      	beq.n	8004534 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d149      	bne.n	80044f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004464:	4b31      	ldr	r3, [pc, #196]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a30      	ldr	r2, [pc, #192]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 800446a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800446e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd ff8e 	bl	8002390 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fd ff8a 	bl	8002390 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e087      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	4b28      	ldr	r3, [pc, #160]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	019b      	lsls	r3, r3, #6
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	3b01      	subs	r3, #1
 80044b0:	041b      	lsls	r3, r3, #16
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	4313      	orrs	r3, r2
 80044bc:	4a1b      	ldr	r2, [pc, #108]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80044be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c4:	4b19      	ldr	r3, [pc, #100]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a18      	ldr	r2, [pc, #96]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80044ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd ff5e 	bl	8002390 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fd ff5a 	bl	8002390 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e057      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	4b10      	ldr	r3, [pc, #64]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x478>
 80044f6:	e04f      	b.n	8004598 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f8:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a0b      	ldr	r2, [pc, #44]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 80044fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd ff44 	bl	8002390 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd ff40 	bl	8002390 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e03d      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	4b03      	ldr	r3, [pc, #12]	@ (800452c <HAL_RCC_OscConfig+0x4cc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x4ac>
 800452a:	e035      	b.n	8004598 <HAL_RCC_OscConfig+0x538>
 800452c:	40023800 	.word	0x40023800
 8004530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004534:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <HAL_RCC_OscConfig+0x544>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d028      	beq.n	8004594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d121      	bne.n	8004594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d11a      	bne.n	8004594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800456a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800456c:	4293      	cmp	r3, r2
 800456e:	d111      	bne.n	8004594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	3b01      	subs	r3, #1
 800457e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800

080045a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0d0      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	4b6a      	ldr	r3, [pc, #424]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d910      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b67      	ldr	r3, [pc, #412]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 020f 	bic.w	r2, r3, #15
 80045d6:	4965      	ldr	r1, [pc, #404]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b63      	ldr	r3, [pc, #396]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0b8      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004608:	4b59      	ldr	r3, [pc, #356]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a58      	ldr	r2, [pc, #352]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 800460e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004620:	4b53      	ldr	r3, [pc, #332]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a52      	ldr	r2, [pc, #328]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800462a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b50      	ldr	r3, [pc, #320]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	494d      	ldr	r1, [pc, #308]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d040      	beq.n	80046cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d115      	bne.n	800468a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466a:	4b41      	ldr	r3, [pc, #260]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e073      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467a:	4b3d      	ldr	r3, [pc, #244]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e06b      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468a:	4b39      	ldr	r3, [pc, #228]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f023 0203 	bic.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4936      	ldr	r1, [pc, #216]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469c:	f7fd fe78 	bl	8002390 <HAL_GetTick>
 80046a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a4:	f7fd fe74 	bl	8002390 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e053      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 020c 	and.w	r2, r3, #12
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d1eb      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046cc:	4b27      	ldr	r3, [pc, #156]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d210      	bcs.n	80046fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b24      	ldr	r3, [pc, #144]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 020f 	bic.w	r2, r3, #15
 80046e2:	4922      	ldr	r1, [pc, #136]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b20      	ldr	r3, [pc, #128]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e032      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004708:	4b19      	ldr	r3, [pc, #100]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4916      	ldr	r1, [pc, #88]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004726:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	490e      	ldr	r1, [pc, #56]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800473a:	f000 f821 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 800473e:	4602      	mov	r2, r0
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	490a      	ldr	r1, [pc, #40]	@ (8004774 <HAL_RCC_ClockConfig+0x1cc>)
 800474c:	5ccb      	ldrb	r3, [r1, r3]
 800474e:	fa22 f303 	lsr.w	r3, r2, r3
 8004752:	4a09      	ldr	r2, [pc, #36]	@ (8004778 <HAL_RCC_ClockConfig+0x1d0>)
 8004754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004756:	4b09      	ldr	r3, [pc, #36]	@ (800477c <HAL_RCC_ClockConfig+0x1d4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd fdd4 	bl	8002308 <HAL_InitTick>

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40023c00 	.word	0x40023c00
 8004770:	40023800 	.word	0x40023800
 8004774:	08009274 	.word	0x08009274
 8004778:	20000000 	.word	0x20000000
 800477c:	20000004 	.word	0x20000004

08004780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004784:	b094      	sub	sp, #80	@ 0x50
 8004786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	647b      	str	r3, [r7, #68]	@ 0x44
 800478c:	2300      	movs	r3, #0
 800478e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004790:	2300      	movs	r3, #0
 8004792:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004798:	4b79      	ldr	r3, [pc, #484]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x200>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 030c 	and.w	r3, r3, #12
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d00d      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x40>
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	f200 80e1 	bhi.w	800496c <HAL_RCC_GetSysClockFreq+0x1ec>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x34>
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x3a>
 80047b2:	e0db      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b73      	ldr	r3, [pc, #460]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x204>)
 80047b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047b8:	e0db      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ba:	4b73      	ldr	r3, [pc, #460]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x208>)
 80047bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047be:	e0d8      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x200>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d063      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	2200      	movs	r2, #0
 80047de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047ea:	2300      	movs	r3, #0
 80047ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047f2:	4622      	mov	r2, r4
 80047f4:	462b      	mov	r3, r5
 80047f6:	f04f 0000 	mov.w	r0, #0
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	0159      	lsls	r1, r3, #5
 8004800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004804:	0150      	lsls	r0, r2, #5
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4621      	mov	r1, r4
 800480c:	1a51      	subs	r1, r2, r1
 800480e:	6139      	str	r1, [r7, #16]
 8004810:	4629      	mov	r1, r5
 8004812:	eb63 0301 	sbc.w	r3, r3, r1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004824:	4659      	mov	r1, fp
 8004826:	018b      	lsls	r3, r1, #6
 8004828:	4651      	mov	r1, sl
 800482a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800482e:	4651      	mov	r1, sl
 8004830:	018a      	lsls	r2, r1, #6
 8004832:	4651      	mov	r1, sl
 8004834:	ebb2 0801 	subs.w	r8, r2, r1
 8004838:	4659      	mov	r1, fp
 800483a:	eb63 0901 	sbc.w	r9, r3, r1
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800484a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800484e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004852:	4690      	mov	r8, r2
 8004854:	4699      	mov	r9, r3
 8004856:	4623      	mov	r3, r4
 8004858:	eb18 0303 	adds.w	r3, r8, r3
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	462b      	mov	r3, r5
 8004860:	eb49 0303 	adc.w	r3, r9, r3
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004872:	4629      	mov	r1, r5
 8004874:	024b      	lsls	r3, r1, #9
 8004876:	4621      	mov	r1, r4
 8004878:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800487c:	4621      	mov	r1, r4
 800487e:	024a      	lsls	r2, r1, #9
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004886:	2200      	movs	r2, #0
 8004888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800488a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800488c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004890:	f7fc f9aa 	bl	8000be8 <__aeabi_uldivmod>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4613      	mov	r3, r2
 800489a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800489c:	e058      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800489e:	4b38      	ldr	r3, [pc, #224]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	099b      	lsrs	r3, r3, #6
 80048a4:	2200      	movs	r2, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	4611      	mov	r1, r2
 80048aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048ae:	623b      	str	r3, [r7, #32]
 80048b0:	2300      	movs	r3, #0
 80048b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	f04f 0000 	mov.w	r0, #0
 80048c0:	f04f 0100 	mov.w	r1, #0
 80048c4:	0159      	lsls	r1, r3, #5
 80048c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ca:	0150      	lsls	r0, r2, #5
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4641      	mov	r1, r8
 80048d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80048d6:	4649      	mov	r1, r9
 80048d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048f0:	ebb2 040a 	subs.w	r4, r2, sl
 80048f4:	eb63 050b 	sbc.w	r5, r3, fp
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	00eb      	lsls	r3, r5, #3
 8004902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004906:	00e2      	lsls	r2, r4, #3
 8004908:	4614      	mov	r4, r2
 800490a:	461d      	mov	r5, r3
 800490c:	4643      	mov	r3, r8
 800490e:	18e3      	adds	r3, r4, r3
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	464b      	mov	r3, r9
 8004914:	eb45 0303 	adc.w	r3, r5, r3
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004926:	4629      	mov	r1, r5
 8004928:	028b      	lsls	r3, r1, #10
 800492a:	4621      	mov	r1, r4
 800492c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004930:	4621      	mov	r1, r4
 8004932:	028a      	lsls	r2, r1, #10
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800493a:	2200      	movs	r2, #0
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	61fa      	str	r2, [r7, #28]
 8004940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004944:	f7fc f950 	bl	8000be8 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4613      	mov	r3, r2
 800494e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x200>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	3301      	adds	r3, #1
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004960:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800496a:	e002      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x204>)
 800496e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004974:	4618      	mov	r0, r3
 8004976:	3750      	adds	r7, #80	@ 0x50
 8004978:	46bd      	mov	sp, r7
 800497a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	00f42400 	.word	0x00f42400
 8004988:	007a1200 	.word	0x007a1200

0800498c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004990:	4b03      	ldr	r3, [pc, #12]	@ (80049a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004992:	681b      	ldr	r3, [r3, #0]
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000000 	.word	0x20000000

080049a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049a8:	f7ff fff0 	bl	800498c <HAL_RCC_GetHCLKFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	0a9b      	lsrs	r3, r3, #10
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	4903      	ldr	r1, [pc, #12]	@ (80049c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ba:	5ccb      	ldrb	r3, [r1, r3]
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40023800 	.word	0x40023800
 80049c8:	08009284 	.word	0x08009284

080049cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049d0:	f7ff ffdc 	bl	800498c <HAL_RCC_GetHCLKFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	0b5b      	lsrs	r3, r3, #13
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4903      	ldr	r1, [pc, #12]	@ (80049f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40023800 	.word	0x40023800
 80049f0:	08009284 	.word	0x08009284

080049f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d012      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a1c:	4b69      	ldr	r3, [pc, #420]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a68      	ldr	r2, [pc, #416]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a26:	6093      	str	r3, [r2, #8]
 8004a28:	4b66      	ldr	r3, [pc, #408]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a30:	4964      	ldr	r1, [pc, #400]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5c:	4959      	ldr	r1, [pc, #356]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d017      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a98:	494a      	ldr	r1, [pc, #296]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aa8:	d101      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 808b 	beq.w	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	4a39      	ldr	r2, [pc, #228]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae4:	4b37      	ldr	r3, [pc, #220]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004af0:	4b35      	ldr	r3, [pc, #212]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a34      	ldr	r2, [pc, #208]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afc:	f7fd fc48 	bl	8002390 <HAL_GetTick>
 8004b00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b04:	f7fd fc44 	bl	8002390 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	@ 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e357      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b16:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b22:	4b28      	ldr	r3, [pc, #160]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d035      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d02e      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b40:	4b20      	ldr	r3, [pc, #128]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b54:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b56:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b62:	4a18      	ldr	r2, [pc, #96]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b68:	4b16      	ldr	r3, [pc, #88]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d114      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fd fc0c 	bl	8002390 <HAL_GetTick>
 8004b78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7c:	f7fd fc08 	bl	8002390 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e319      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b92:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0ee      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004baa:	d111      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004bac:	4b05      	ldr	r3, [pc, #20]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bba:	400b      	ands	r3, r1
 8004bbc:	4901      	ldr	r1, [pc, #4]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
 8004bc2:	e00b      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40007000 	.word	0x40007000
 8004bcc:	0ffffcff 	.word	0x0ffffcff
 8004bd0:	4baa      	ldr	r3, [pc, #680]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4aa9      	ldr	r2, [pc, #676]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bda:	6093      	str	r3, [r2, #8]
 8004bdc:	4ba7      	ldr	r3, [pc, #668]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be8:	49a4      	ldr	r1, [pc, #656]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d010      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bfa:	4ba0      	ldr	r3, [pc, #640]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c00:	4a9e      	ldr	r2, [pc, #632]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	4999      	ldr	r1, [pc, #612]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c28:	4b94      	ldr	r3, [pc, #592]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c36:	4991      	ldr	r1, [pc, #580]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c4a:	4b8c      	ldr	r3, [pc, #560]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c58:	4988      	ldr	r1, [pc, #544]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c6c:	4b83      	ldr	r3, [pc, #524]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c7a:	4980      	ldr	r1, [pc, #512]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9c:	4977      	ldr	r1, [pc, #476]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cb0:	4b72      	ldr	r3, [pc, #456]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb6:	f023 0203 	bic.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbe:	496f      	ldr	r1, [pc, #444]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd8:	f023 020c 	bic.w	r2, r3, #12
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce0:	4966      	ldr	r1, [pc, #408]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cf4:	4b61      	ldr	r3, [pc, #388]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d02:	495e      	ldr	r1, [pc, #376]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d16:	4b59      	ldr	r3, [pc, #356]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d24:	4955      	ldr	r1, [pc, #340]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d38:	4b50      	ldr	r3, [pc, #320]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d46:	494d      	ldr	r1, [pc, #308]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d5a:	4b48      	ldr	r3, [pc, #288]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d68:	4944      	ldr	r1, [pc, #272]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8a:	493c      	ldr	r1, [pc, #240]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d9e:	4b37      	ldr	r3, [pc, #220]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dac:	4933      	ldr	r1, [pc, #204]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dce:	492b      	ldr	r1, [pc, #172]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d011      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004de2:	4b26      	ldr	r3, [pc, #152]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004df0:	4922      	ldr	r1, [pc, #136]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e00:	d101      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e22:	4b16      	ldr	r3, [pc, #88]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e30:	4912      	ldr	r1, [pc, #72]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e44:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e54:	4909      	ldr	r1, [pc, #36]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d006      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80d9 	beq.w	8005022 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e70:	4b02      	ldr	r3, [pc, #8]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a01      	ldr	r2, [pc, #4]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e7a:	e001      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e82:	f7fd fa85 	bl	8002390 <HAL_GetTick>
 8004e86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e8a:	f7fd fa81 	bl	8002390 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b64      	cmp	r3, #100	@ 0x64
 8004e96:	d901      	bls.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e194      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d021      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d11d      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ebc:	4b64      	ldr	r3, [pc, #400]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec2:	0c1b      	lsrs	r3, r3, #16
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004eca:	4b61      	ldr	r3, [pc, #388]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed0:	0e1b      	lsrs	r3, r3, #24
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	019a      	lsls	r2, r3, #6
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	071b      	lsls	r3, r3, #28
 8004ef0:	4957      	ldr	r1, [pc, #348]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d02e      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f22:	d129      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f24:	4b4a      	ldr	r3, [pc, #296]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f32:	4b47      	ldr	r3, [pc, #284]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f38:	0f1b      	lsrs	r3, r3, #28
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	019a      	lsls	r2, r3, #6
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	061b      	lsls	r3, r3, #24
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	071b      	lsls	r3, r3, #28
 8004f58:	493d      	ldr	r1, [pc, #244]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f60:	4b3b      	ldr	r3, [pc, #236]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f66:	f023 021f 	bic.w	r2, r3, #31
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4937      	ldr	r1, [pc, #220]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01d      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f84:	4b32      	ldr	r3, [pc, #200]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f8a:	0e1b      	lsrs	r3, r3, #24
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f92:	4b2f      	ldr	r3, [pc, #188]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f98:	0f1b      	lsrs	r3, r3, #28
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	019a      	lsls	r2, r3, #6
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	041b      	lsls	r3, r3, #16
 8004fac:	431a      	orrs	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	071b      	lsls	r3, r3, #28
 8004fb8:	4925      	ldr	r1, [pc, #148]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d011      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	019a      	lsls	r2, r3, #6
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	071b      	lsls	r3, r3, #28
 8004fe8:	4919      	ldr	r1, [pc, #100]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ff0:	4b17      	ldr	r3, [pc, #92]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a16      	ldr	r2, [pc, #88]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffc:	f7fd f9c8 	bl	8002390 <HAL_GetTick>
 8005000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005004:	f7fd f9c4 	bl	8002390 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	@ 0x64
 8005010:	d901      	bls.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e0d7      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005016:	4b0e      	ldr	r3, [pc, #56]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b01      	cmp	r3, #1
 8005026:	f040 80cd 	bne.w	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800502a:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a08      	ldr	r2, [pc, #32]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005036:	f7fd f9ab 	bl	8002390 <HAL_GetTick>
 800503a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800503c:	e00a      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800503e:	f7fd f9a7 	bl	8002390 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b64      	cmp	r3, #100	@ 0x64
 800504a:	d903      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e0ba      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005050:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005054:	4b5e      	ldr	r3, [pc, #376]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800505c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005060:	d0ed      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800507e:	2b00      	cmp	r3, #0
 8005080:	d02e      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d12a      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800508a:	4b51      	ldr	r3, [pc, #324]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005098:	4b4d      	ldr	r3, [pc, #308]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509e:	0f1b      	lsrs	r3, r3, #28
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	019a      	lsls	r2, r3, #6
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	061b      	lsls	r3, r3, #24
 80050b8:	431a      	orrs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	071b      	lsls	r3, r3, #28
 80050be:	4944      	ldr	r1, [pc, #272]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050c6:	4b42      	ldr	r3, [pc, #264]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	3b01      	subs	r3, #1
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	493d      	ldr	r1, [pc, #244]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d022      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050f4:	d11d      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050f6:	4b36      	ldr	r3, [pc, #216]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fc:	0e1b      	lsrs	r3, r3, #24
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005104:	4b32      	ldr	r3, [pc, #200]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510a:	0f1b      	lsrs	r3, r3, #28
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	019a      	lsls	r2, r3, #6
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	431a      	orrs	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	061b      	lsls	r3, r3, #24
 8005124:	431a      	orrs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	071b      	lsls	r3, r3, #28
 800512a:	4929      	ldr	r1, [pc, #164]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d028      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800513e:	4b24      	ldr	r3, [pc, #144]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	0e1b      	lsrs	r3, r3, #24
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800514c:	4b20      	ldr	r3, [pc, #128]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	019a      	lsls	r2, r3, #6
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	041b      	lsls	r3, r3, #16
 8005164:	431a      	orrs	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	071b      	lsls	r3, r3, #28
 8005172:	4917      	ldr	r1, [pc, #92]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800517a:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800517c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005180:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005188:	4911      	ldr	r1, [pc, #68]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005190:	4b0f      	ldr	r3, [pc, #60]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a0e      	ldr	r2, [pc, #56]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800519a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519c:	f7fd f8f8 	bl	8002390 <HAL_GetTick>
 80051a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051a4:	f7fd f8f4 	bl	8002390 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	@ 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e007      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051b6:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051c2:	d1ef      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800

080051d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e040      	b.n	8005268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fc fe6e 	bl	8001ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2224      	movs	r2, #36	@ 0x24
 8005200:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fb16 	bl	800584c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f8af 	bl	8005384 <UART_SetConfig>
 8005226:	4603      	mov	r3, r0
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e01b      	b.n	8005268 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800523e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800524e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fb95 	bl	8005990 <UART_CheckIdleState>
 8005266:	4603      	mov	r3, r0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	@ 0x28
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005284:	2b20      	cmp	r3, #32
 8005286:	d177      	bne.n	8005378 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Transmit+0x24>
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e070      	b.n	800537a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2221      	movs	r2, #33	@ 0x21
 80052a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a6:	f7fd f873 	bl	8002390 <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c4:	d108      	bne.n	80052d8 <HAL_UART_Transmit+0x68>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	e003      	b.n	80052e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052e0:	e02f      	b.n	8005342 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	2180      	movs	r1, #128	@ 0x80
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fba6 	bl	8005a3e <UART_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d004      	beq.n	8005302 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e03b      	b.n	800537a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005316:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	3302      	adds	r3, #2
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	e007      	b.n	8005330 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3301      	adds	r3, #1
 800532e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1c9      	bne.n	80052e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2200      	movs	r2, #0
 8005356:	2140      	movs	r1, #64	@ 0x40
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fb70 	bl	8005a3e <UART_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e005      	b.n	800537a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	e000      	b.n	800537a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005378:	2302      	movs	r3, #2
  }
}
 800537a:	4618      	mov	r0, r3
 800537c:	3720      	adds	r7, #32
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4ba6      	ldr	r3, [pc, #664]	@ (8005648 <UART_SetConfig+0x2c4>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	6979      	ldr	r1, [r7, #20]
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a94      	ldr	r2, [pc, #592]	@ (800564c <UART_SetConfig+0x2c8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d120      	bne.n	8005442 <UART_SetConfig+0xbe>
 8005400:	4b93      	ldr	r3, [pc, #588]	@ (8005650 <UART_SetConfig+0x2cc>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b03      	cmp	r3, #3
 800540c:	d816      	bhi.n	800543c <UART_SetConfig+0xb8>
 800540e:	a201      	add	r2, pc, #4	@ (adr r2, 8005414 <UART_SetConfig+0x90>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005425 	.word	0x08005425
 8005418:	08005431 	.word	0x08005431
 800541c:	0800542b 	.word	0x0800542b
 8005420:	08005437 	.word	0x08005437
 8005424:	2301      	movs	r3, #1
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e150      	b.n	80056cc <UART_SetConfig+0x348>
 800542a:	2302      	movs	r3, #2
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e14d      	b.n	80056cc <UART_SetConfig+0x348>
 8005430:	2304      	movs	r3, #4
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e14a      	b.n	80056cc <UART_SetConfig+0x348>
 8005436:	2308      	movs	r3, #8
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e147      	b.n	80056cc <UART_SetConfig+0x348>
 800543c:	2310      	movs	r3, #16
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e144      	b.n	80056cc <UART_SetConfig+0x348>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a83      	ldr	r2, [pc, #524]	@ (8005654 <UART_SetConfig+0x2d0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d132      	bne.n	80054b2 <UART_SetConfig+0x12e>
 800544c:	4b80      	ldr	r3, [pc, #512]	@ (8005650 <UART_SetConfig+0x2cc>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b0c      	cmp	r3, #12
 8005458:	d828      	bhi.n	80054ac <UART_SetConfig+0x128>
 800545a:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <UART_SetConfig+0xdc>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005495 	.word	0x08005495
 8005464:	080054ad 	.word	0x080054ad
 8005468:	080054ad 	.word	0x080054ad
 800546c:	080054ad 	.word	0x080054ad
 8005470:	080054a1 	.word	0x080054a1
 8005474:	080054ad 	.word	0x080054ad
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054ad 	.word	0x080054ad
 8005480:	0800549b 	.word	0x0800549b
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054ad 	.word	0x080054ad
 8005490:	080054a7 	.word	0x080054a7
 8005494:	2300      	movs	r3, #0
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e118      	b.n	80056cc <UART_SetConfig+0x348>
 800549a:	2302      	movs	r3, #2
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e115      	b.n	80056cc <UART_SetConfig+0x348>
 80054a0:	2304      	movs	r3, #4
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e112      	b.n	80056cc <UART_SetConfig+0x348>
 80054a6:	2308      	movs	r3, #8
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e10f      	b.n	80056cc <UART_SetConfig+0x348>
 80054ac:	2310      	movs	r3, #16
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e10c      	b.n	80056cc <UART_SetConfig+0x348>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a68      	ldr	r2, [pc, #416]	@ (8005658 <UART_SetConfig+0x2d4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d120      	bne.n	80054fe <UART_SetConfig+0x17a>
 80054bc:	4b64      	ldr	r3, [pc, #400]	@ (8005650 <UART_SetConfig+0x2cc>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054c6:	2b30      	cmp	r3, #48	@ 0x30
 80054c8:	d013      	beq.n	80054f2 <UART_SetConfig+0x16e>
 80054ca:	2b30      	cmp	r3, #48	@ 0x30
 80054cc:	d814      	bhi.n	80054f8 <UART_SetConfig+0x174>
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d009      	beq.n	80054e6 <UART_SetConfig+0x162>
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d810      	bhi.n	80054f8 <UART_SetConfig+0x174>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <UART_SetConfig+0x15c>
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d006      	beq.n	80054ec <UART_SetConfig+0x168>
 80054de:	e00b      	b.n	80054f8 <UART_SetConfig+0x174>
 80054e0:	2300      	movs	r3, #0
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e0f2      	b.n	80056cc <UART_SetConfig+0x348>
 80054e6:	2302      	movs	r3, #2
 80054e8:	77fb      	strb	r3, [r7, #31]
 80054ea:	e0ef      	b.n	80056cc <UART_SetConfig+0x348>
 80054ec:	2304      	movs	r3, #4
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e0ec      	b.n	80056cc <UART_SetConfig+0x348>
 80054f2:	2308      	movs	r3, #8
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e0e9      	b.n	80056cc <UART_SetConfig+0x348>
 80054f8:	2310      	movs	r3, #16
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e0e6      	b.n	80056cc <UART_SetConfig+0x348>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a56      	ldr	r2, [pc, #344]	@ (800565c <UART_SetConfig+0x2d8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d120      	bne.n	800554a <UART_SetConfig+0x1c6>
 8005508:	4b51      	ldr	r3, [pc, #324]	@ (8005650 <UART_SetConfig+0x2cc>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005512:	2bc0      	cmp	r3, #192	@ 0xc0
 8005514:	d013      	beq.n	800553e <UART_SetConfig+0x1ba>
 8005516:	2bc0      	cmp	r3, #192	@ 0xc0
 8005518:	d814      	bhi.n	8005544 <UART_SetConfig+0x1c0>
 800551a:	2b80      	cmp	r3, #128	@ 0x80
 800551c:	d009      	beq.n	8005532 <UART_SetConfig+0x1ae>
 800551e:	2b80      	cmp	r3, #128	@ 0x80
 8005520:	d810      	bhi.n	8005544 <UART_SetConfig+0x1c0>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <UART_SetConfig+0x1a8>
 8005526:	2b40      	cmp	r3, #64	@ 0x40
 8005528:	d006      	beq.n	8005538 <UART_SetConfig+0x1b4>
 800552a:	e00b      	b.n	8005544 <UART_SetConfig+0x1c0>
 800552c:	2300      	movs	r3, #0
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e0cc      	b.n	80056cc <UART_SetConfig+0x348>
 8005532:	2302      	movs	r3, #2
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e0c9      	b.n	80056cc <UART_SetConfig+0x348>
 8005538:	2304      	movs	r3, #4
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e0c6      	b.n	80056cc <UART_SetConfig+0x348>
 800553e:	2308      	movs	r3, #8
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e0c3      	b.n	80056cc <UART_SetConfig+0x348>
 8005544:	2310      	movs	r3, #16
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e0c0      	b.n	80056cc <UART_SetConfig+0x348>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a44      	ldr	r2, [pc, #272]	@ (8005660 <UART_SetConfig+0x2dc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d125      	bne.n	80055a0 <UART_SetConfig+0x21c>
 8005554:	4b3e      	ldr	r3, [pc, #248]	@ (8005650 <UART_SetConfig+0x2cc>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800555e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005562:	d017      	beq.n	8005594 <UART_SetConfig+0x210>
 8005564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005568:	d817      	bhi.n	800559a <UART_SetConfig+0x216>
 800556a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800556e:	d00b      	beq.n	8005588 <UART_SetConfig+0x204>
 8005570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005574:	d811      	bhi.n	800559a <UART_SetConfig+0x216>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <UART_SetConfig+0x1fe>
 800557a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800557e:	d006      	beq.n	800558e <UART_SetConfig+0x20a>
 8005580:	e00b      	b.n	800559a <UART_SetConfig+0x216>
 8005582:	2300      	movs	r3, #0
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e0a1      	b.n	80056cc <UART_SetConfig+0x348>
 8005588:	2302      	movs	r3, #2
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e09e      	b.n	80056cc <UART_SetConfig+0x348>
 800558e:	2304      	movs	r3, #4
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e09b      	b.n	80056cc <UART_SetConfig+0x348>
 8005594:	2308      	movs	r3, #8
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e098      	b.n	80056cc <UART_SetConfig+0x348>
 800559a:	2310      	movs	r3, #16
 800559c:	77fb      	strb	r3, [r7, #31]
 800559e:	e095      	b.n	80056cc <UART_SetConfig+0x348>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005664 <UART_SetConfig+0x2e0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d125      	bne.n	80055f6 <UART_SetConfig+0x272>
 80055aa:	4b29      	ldr	r3, [pc, #164]	@ (8005650 <UART_SetConfig+0x2cc>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055b8:	d017      	beq.n	80055ea <UART_SetConfig+0x266>
 80055ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055be:	d817      	bhi.n	80055f0 <UART_SetConfig+0x26c>
 80055c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c4:	d00b      	beq.n	80055de <UART_SetConfig+0x25a>
 80055c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ca:	d811      	bhi.n	80055f0 <UART_SetConfig+0x26c>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <UART_SetConfig+0x254>
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055d4:	d006      	beq.n	80055e4 <UART_SetConfig+0x260>
 80055d6:	e00b      	b.n	80055f0 <UART_SetConfig+0x26c>
 80055d8:	2301      	movs	r3, #1
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e076      	b.n	80056cc <UART_SetConfig+0x348>
 80055de:	2302      	movs	r3, #2
 80055e0:	77fb      	strb	r3, [r7, #31]
 80055e2:	e073      	b.n	80056cc <UART_SetConfig+0x348>
 80055e4:	2304      	movs	r3, #4
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e070      	b.n	80056cc <UART_SetConfig+0x348>
 80055ea:	2308      	movs	r3, #8
 80055ec:	77fb      	strb	r3, [r7, #31]
 80055ee:	e06d      	b.n	80056cc <UART_SetConfig+0x348>
 80055f0:	2310      	movs	r3, #16
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e06a      	b.n	80056cc <UART_SetConfig+0x348>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005668 <UART_SetConfig+0x2e4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d138      	bne.n	8005672 <UART_SetConfig+0x2ee>
 8005600:	4b13      	ldr	r3, [pc, #76]	@ (8005650 <UART_SetConfig+0x2cc>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005606:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800560a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800560e:	d017      	beq.n	8005640 <UART_SetConfig+0x2bc>
 8005610:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005614:	d82a      	bhi.n	800566c <UART_SetConfig+0x2e8>
 8005616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561a:	d00b      	beq.n	8005634 <UART_SetConfig+0x2b0>
 800561c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005620:	d824      	bhi.n	800566c <UART_SetConfig+0x2e8>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <UART_SetConfig+0x2aa>
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562a:	d006      	beq.n	800563a <UART_SetConfig+0x2b6>
 800562c:	e01e      	b.n	800566c <UART_SetConfig+0x2e8>
 800562e:	2300      	movs	r3, #0
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e04b      	b.n	80056cc <UART_SetConfig+0x348>
 8005634:	2302      	movs	r3, #2
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e048      	b.n	80056cc <UART_SetConfig+0x348>
 800563a:	2304      	movs	r3, #4
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e045      	b.n	80056cc <UART_SetConfig+0x348>
 8005640:	2308      	movs	r3, #8
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e042      	b.n	80056cc <UART_SetConfig+0x348>
 8005646:	bf00      	nop
 8005648:	efff69f3 	.word	0xefff69f3
 800564c:	40011000 	.word	0x40011000
 8005650:	40023800 	.word	0x40023800
 8005654:	40004400 	.word	0x40004400
 8005658:	40004800 	.word	0x40004800
 800565c:	40004c00 	.word	0x40004c00
 8005660:	40005000 	.word	0x40005000
 8005664:	40011400 	.word	0x40011400
 8005668:	40007800 	.word	0x40007800
 800566c:	2310      	movs	r3, #16
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e02c      	b.n	80056cc <UART_SetConfig+0x348>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a72      	ldr	r2, [pc, #456]	@ (8005840 <UART_SetConfig+0x4bc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d125      	bne.n	80056c8 <UART_SetConfig+0x344>
 800567c:	4b71      	ldr	r3, [pc, #452]	@ (8005844 <UART_SetConfig+0x4c0>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005682:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005686:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800568a:	d017      	beq.n	80056bc <UART_SetConfig+0x338>
 800568c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005690:	d817      	bhi.n	80056c2 <UART_SetConfig+0x33e>
 8005692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005696:	d00b      	beq.n	80056b0 <UART_SetConfig+0x32c>
 8005698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800569c:	d811      	bhi.n	80056c2 <UART_SetConfig+0x33e>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <UART_SetConfig+0x326>
 80056a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056a6:	d006      	beq.n	80056b6 <UART_SetConfig+0x332>
 80056a8:	e00b      	b.n	80056c2 <UART_SetConfig+0x33e>
 80056aa:	2300      	movs	r3, #0
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e00d      	b.n	80056cc <UART_SetConfig+0x348>
 80056b0:	2302      	movs	r3, #2
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e00a      	b.n	80056cc <UART_SetConfig+0x348>
 80056b6:	2304      	movs	r3, #4
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e007      	b.n	80056cc <UART_SetConfig+0x348>
 80056bc:	2308      	movs	r3, #8
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e004      	b.n	80056cc <UART_SetConfig+0x348>
 80056c2:	2310      	movs	r3, #16
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e001      	b.n	80056cc <UART_SetConfig+0x348>
 80056c8:	2310      	movs	r3, #16
 80056ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d4:	d15b      	bne.n	800578e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80056d6:	7ffb      	ldrb	r3, [r7, #31]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d828      	bhi.n	800572e <UART_SetConfig+0x3aa>
 80056dc:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <UART_SetConfig+0x360>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005719 	.word	0x08005719
 80056f0:	0800572f 	.word	0x0800572f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	0800572f 	.word	0x0800572f
 8005700:	0800572f 	.word	0x0800572f
 8005704:	08005727 	.word	0x08005727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7ff f94c 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 800570c:	61b8      	str	r0, [r7, #24]
        break;
 800570e:	e013      	b.n	8005738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7ff f95c 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 8005714:	61b8      	str	r0, [r7, #24]
        break;
 8005716:	e00f      	b.n	8005738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005718:	4b4b      	ldr	r3, [pc, #300]	@ (8005848 <UART_SetConfig+0x4c4>)
 800571a:	61bb      	str	r3, [r7, #24]
        break;
 800571c:	e00c      	b.n	8005738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571e:	f7ff f82f 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8005722:	61b8      	str	r0, [r7, #24]
        break;
 8005724:	e008      	b.n	8005738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800572a:	61bb      	str	r3, [r7, #24]
        break;
 800572c:	e004      	b.n	8005738 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	77bb      	strb	r3, [r7, #30]
        break;
 8005736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d074      	beq.n	8005828 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	005a      	lsls	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	441a      	add	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d916      	bls.n	8005788 <UART_SetConfig+0x404>
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005760:	d212      	bcs.n	8005788 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f023 030f 	bic.w	r3, r3, #15
 800576a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	b29b      	uxth	r3, r3
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	b29a      	uxth	r2, r3
 8005778:	89fb      	ldrh	r3, [r7, #14]
 800577a:	4313      	orrs	r3, r2
 800577c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	89fa      	ldrh	r2, [r7, #14]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	e04f      	b.n	8005828 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	77bb      	strb	r3, [r7, #30]
 800578c:	e04c      	b.n	8005828 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800578e:	7ffb      	ldrb	r3, [r7, #31]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d828      	bhi.n	80057e6 <UART_SetConfig+0x462>
 8005794:	a201      	add	r2, pc, #4	@ (adr r2, 800579c <UART_SetConfig+0x418>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	080057e7 	.word	0x080057e7
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	080057e7 	.word	0x080057e7
 80057b4:	080057e7 	.word	0x080057e7
 80057b8:	080057e7 	.word	0x080057e7
 80057bc:	080057df 	.word	0x080057df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c0:	f7ff f8f0 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 80057c4:	61b8      	str	r0, [r7, #24]
        break;
 80057c6:	e013      	b.n	80057f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7ff f900 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 80057cc:	61b8      	str	r0, [r7, #24]
        break;
 80057ce:	e00f      	b.n	80057f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <UART_SetConfig+0x4c4>)
 80057d2:	61bb      	str	r3, [r7, #24]
        break;
 80057d4:	e00c      	b.n	80057f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d6:	f7fe ffd3 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 80057da:	61b8      	str	r0, [r7, #24]
        break;
 80057dc:	e008      	b.n	80057f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057e2:	61bb      	str	r3, [r7, #24]
        break;
 80057e4:	e004      	b.n	80057f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	77bb      	strb	r3, [r7, #30]
        break;
 80057ee:	bf00      	nop
    }

    if (pclk != 0U)
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d018      	beq.n	8005828 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	085a      	lsrs	r2, r3, #1
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	441a      	add	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b0f      	cmp	r3, #15
 800580e:	d909      	bls.n	8005824 <UART_SetConfig+0x4a0>
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005816:	d205      	bcs.n	8005824 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	b29a      	uxth	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	e001      	b.n	8005828 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005834:	7fbb      	ldrb	r3, [r7, #30]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40007c00 	.word	0x40007c00
 8005844:	40023800 	.word	0x40023800
 8005848:	00f42400 	.word	0x00f42400

0800584c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01a      	beq.n	8005962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800594a:	d10a      	bne.n	8005962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	605a      	str	r2, [r3, #4]
  }
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08c      	sub	sp, #48	@ 0x30
 8005994:	af02      	add	r7, sp, #8
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059a0:	f7fc fcf6 	bl	8002390 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d12e      	bne.n	8005a12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	2200      	movs	r2, #0
 80059be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f83b 	bl	8005a3e <UART_WaitOnFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d021      	beq.n	8005a12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60fb      	str	r3, [r7, #12]
   return(result);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	617b      	str	r3, [r7, #20]
   return(result);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e6      	bne.n	80059ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e011      	b.n	8005a36 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3728      	adds	r7, #40	@ 0x28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4e:	e04f      	b.n	8005af0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d04b      	beq.n	8005af0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a58:	f7fc fc9a 	bl	8002390 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d302      	bcc.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e04e      	b.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d037      	beq.n	8005af0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b80      	cmp	r3, #128	@ 0x80
 8005a84:	d034      	beq.n	8005af0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b40      	cmp	r3, #64	@ 0x40
 8005a8a:	d031      	beq.n	8005af0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d110      	bne.n	8005abc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2208      	movs	r2, #8
 8005aa0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f838 	bl	8005b18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2208      	movs	r2, #8
 8005aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e029      	b.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aca:	d111      	bne.n	8005af0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ad4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f81e 	bl	8005b18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e00f      	b.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4013      	ands	r3, r2
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d0a0      	beq.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b095      	sub	sp, #84	@ 0x54
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e6      	bne.n	8005b20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d118      	bne.n	8005bc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f023 0310 	bic.w	r3, r3, #16
 8005ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6979      	ldr	r1, [r7, #20]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e6      	bne.n	8005b8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bd4:	bf00      	nop
 8005bd6:	3754      	adds	r7, #84	@ 0x54
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005be0:	b084      	sub	sp, #16
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	f107 001c 	add.w	r0, r7, #28
 8005bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bf2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d121      	bne.n	8005c3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	4b21      	ldr	r3, [pc, #132]	@ (8005c90 <USB_CoreInit+0xb0>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d105      	bne.n	8005c32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa92 	bl	800615c <USB_CoreReset>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
 8005c3c:	e010      	b.n	8005c60 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fa86 	bl	800615c <USB_CoreReset>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c60:	7fbb      	ldrb	r3, [r7, #30]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10b      	bne.n	8005c7e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f043 0206 	orr.w	r2, r3, #6
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c8a:	b004      	add	sp, #16
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	ffbdffbf 	.word	0xffbdffbf

08005c94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f023 0201 	bic.w	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d115      	bne.n	8005d04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ce4:	200a      	movs	r0, #10
 8005ce6:	f7fc fb5f 	bl	80023a8 <HAL_Delay>
      ms += 10U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	330a      	adds	r3, #10
 8005cee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fa25 	bl	8006140 <USB_GetMode>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d01e      	beq.n	8005d3a <USB_SetCurrentMode+0x84>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d00:	d9f0      	bls.n	8005ce4 <USB_SetCurrentMode+0x2e>
 8005d02:	e01a      	b.n	8005d3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d115      	bne.n	8005d36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d16:	200a      	movs	r0, #10
 8005d18:	f7fc fb46 	bl	80023a8 <HAL_Delay>
      ms += 10U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	330a      	adds	r3, #10
 8005d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa0c 	bl	8006140 <USB_GetMode>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <USB_SetCurrentMode+0x84>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d32:	d9f0      	bls.n	8005d16 <USB_SetCurrentMode+0x60>
 8005d34:	e001      	b.n	8005d3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e005      	b.n	8005d46 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d3e:	d101      	bne.n	8005d44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d50:	b084      	sub	sp, #16
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	e009      	b.n	8005d84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	3340      	adds	r3, #64	@ 0x40
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3301      	adds	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b0e      	cmp	r3, #14
 8005d88:	d9f2      	bls.n	8005d70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d11c      	bne.n	8005dcc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005da0:	f043 0302 	orr.w	r3, r3, #2
 8005da4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e005      	b.n	8005dd8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005dde:	461a      	mov	r2, r3
 8005de0:	2300      	movs	r3, #0
 8005de2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005de4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d10d      	bne.n	8005e08 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005df4:	2100      	movs	r1, #0
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f968 	bl	80060cc <USB_SetDevSpeed>
 8005dfc:	e008      	b.n	8005e10 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005dfe:	2101      	movs	r1, #1
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f963 	bl	80060cc <USB_SetDevSpeed>
 8005e06:	e003      	b.n	8005e10 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e08:	2103      	movs	r1, #3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f95e 	bl	80060cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e10:	2110      	movs	r1, #16
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f8fa 	bl	800600c <USB_FlushTxFifo>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f924 	bl	8006070 <USB_FlushRxFifo>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e38:	461a      	mov	r2, r3
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e44:	461a      	mov	r2, r3
 8005e46:	2300      	movs	r3, #0
 8005e48:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e50:	461a      	mov	r2, r3
 8005e52:	2300      	movs	r3, #0
 8005e54:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e043      	b.n	8005ee4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e72:	d118      	bne.n	8005ea6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e86:	461a      	mov	r2, r3
 8005e88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e013      	b.n	8005eb8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	e008      	b.n	8005eb8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005edc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ee8:	461a      	mov	r2, r3
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d3b5      	bcc.n	8005e5c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	e043      	b.n	8005f7e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f0c:	d118      	bne.n	8005f40 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f20:	461a      	mov	r2, r3
 8005f22:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	e013      	b.n	8005f52 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f36:	461a      	mov	r2, r3
 8005f38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	e008      	b.n	8005f52 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2300      	movs	r3, #0
 8005f62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f70:	461a      	mov	r2, r3
 8005f72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f82:	461a      	mov	r2, r3
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d3b5      	bcc.n	8005ef6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f9c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005faa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d105      	bne.n	8005fc0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f043 0210 	orr.w	r2, r3, #16
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699a      	ldr	r2, [r3, #24]
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006004 <USB_DevInit+0x2b4>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fcc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f043 0208 	orr.w	r2, r3, #8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fe0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d105      	bne.n	8005ff4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <USB_DevInit+0x2b8>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006000:	b004      	add	sp, #16
 8006002:	4770      	bx	lr
 8006004:	803c3800 	.word	0x803c3800
 8006008:	40000004 	.word	0x40000004

0800600c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006026:	d901      	bls.n	800602c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e01b      	b.n	8006064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	daf2      	bge.n	800601a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	019b      	lsls	r3, r3, #6
 800603c:	f043 0220 	orr.w	r2, r3, #32
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006050:	d901      	bls.n	8006056 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e006      	b.n	8006064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b20      	cmp	r3, #32
 8006060:	d0f0      	beq.n	8006044 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006088:	d901      	bls.n	800608e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e018      	b.n	80060c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	daf2      	bge.n	800607c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2210      	movs	r2, #16
 800609e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060ac:	d901      	bls.n	80060b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e006      	b.n	80060c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d0f0      	beq.n	80060a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060ec:	4313      	orrs	r3, r2
 80060ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800612c:	f043 0302 	orr.w	r3, r3, #2
 8006130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0301 	and.w	r3, r3, #1
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006174:	d901      	bls.n	800617a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e022      	b.n	80061c0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	daf2      	bge.n	8006168 <USB_CoreReset+0xc>

  count = 10U;
 8006182:	230a      	movs	r3, #10
 8006184:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006186:	e002      	b.n	800618e <USB_CoreReset+0x32>
  {
    count--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3b01      	subs	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f9      	bne.n	8006188 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f043 0201 	orr.w	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ac:	d901      	bls.n	80061b2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e006      	b.n	80061c0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d0f0      	beq.n	80061a0 <USB_CoreReset+0x44>

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <__cvt>:
 80061cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d0:	ec57 6b10 	vmov	r6, r7, d0
 80061d4:	2f00      	cmp	r7, #0
 80061d6:	460c      	mov	r4, r1
 80061d8:	4619      	mov	r1, r3
 80061da:	463b      	mov	r3, r7
 80061dc:	bfbb      	ittet	lt
 80061de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80061e2:	461f      	movlt	r7, r3
 80061e4:	2300      	movge	r3, #0
 80061e6:	232d      	movlt	r3, #45	@ 0x2d
 80061e8:	700b      	strb	r3, [r1, #0]
 80061ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80061f0:	4691      	mov	r9, r2
 80061f2:	f023 0820 	bic.w	r8, r3, #32
 80061f6:	bfbc      	itt	lt
 80061f8:	4632      	movlt	r2, r6
 80061fa:	4616      	movlt	r6, r2
 80061fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006200:	d005      	beq.n	800620e <__cvt+0x42>
 8006202:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006206:	d100      	bne.n	800620a <__cvt+0x3e>
 8006208:	3401      	adds	r4, #1
 800620a:	2102      	movs	r1, #2
 800620c:	e000      	b.n	8006210 <__cvt+0x44>
 800620e:	2103      	movs	r1, #3
 8006210:	ab03      	add	r3, sp, #12
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	ab02      	add	r3, sp, #8
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	ec47 6b10 	vmov	d0, r6, r7
 800621c:	4653      	mov	r3, sl
 800621e:	4622      	mov	r2, r4
 8006220:	f000 fe6a 	bl	8006ef8 <_dtoa_r>
 8006224:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006228:	4605      	mov	r5, r0
 800622a:	d119      	bne.n	8006260 <__cvt+0x94>
 800622c:	f019 0f01 	tst.w	r9, #1
 8006230:	d00e      	beq.n	8006250 <__cvt+0x84>
 8006232:	eb00 0904 	add.w	r9, r0, r4
 8006236:	2200      	movs	r2, #0
 8006238:	2300      	movs	r3, #0
 800623a:	4630      	mov	r0, r6
 800623c:	4639      	mov	r1, r7
 800623e:	f7fa fc63 	bl	8000b08 <__aeabi_dcmpeq>
 8006242:	b108      	cbz	r0, 8006248 <__cvt+0x7c>
 8006244:	f8cd 900c 	str.w	r9, [sp, #12]
 8006248:	2230      	movs	r2, #48	@ 0x30
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	454b      	cmp	r3, r9
 800624e:	d31e      	bcc.n	800628e <__cvt+0xc2>
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006254:	1b5b      	subs	r3, r3, r5
 8006256:	4628      	mov	r0, r5
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	b004      	add	sp, #16
 800625c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006260:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006264:	eb00 0904 	add.w	r9, r0, r4
 8006268:	d1e5      	bne.n	8006236 <__cvt+0x6a>
 800626a:	7803      	ldrb	r3, [r0, #0]
 800626c:	2b30      	cmp	r3, #48	@ 0x30
 800626e:	d10a      	bne.n	8006286 <__cvt+0xba>
 8006270:	2200      	movs	r2, #0
 8006272:	2300      	movs	r3, #0
 8006274:	4630      	mov	r0, r6
 8006276:	4639      	mov	r1, r7
 8006278:	f7fa fc46 	bl	8000b08 <__aeabi_dcmpeq>
 800627c:	b918      	cbnz	r0, 8006286 <__cvt+0xba>
 800627e:	f1c4 0401 	rsb	r4, r4, #1
 8006282:	f8ca 4000 	str.w	r4, [sl]
 8006286:	f8da 3000 	ldr.w	r3, [sl]
 800628a:	4499      	add	r9, r3
 800628c:	e7d3      	b.n	8006236 <__cvt+0x6a>
 800628e:	1c59      	adds	r1, r3, #1
 8006290:	9103      	str	r1, [sp, #12]
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	e7d9      	b.n	800624a <__cvt+0x7e>

08006296 <__exponent>:
 8006296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006298:	2900      	cmp	r1, #0
 800629a:	bfba      	itte	lt
 800629c:	4249      	neglt	r1, r1
 800629e:	232d      	movlt	r3, #45	@ 0x2d
 80062a0:	232b      	movge	r3, #43	@ 0x2b
 80062a2:	2909      	cmp	r1, #9
 80062a4:	7002      	strb	r2, [r0, #0]
 80062a6:	7043      	strb	r3, [r0, #1]
 80062a8:	dd29      	ble.n	80062fe <__exponent+0x68>
 80062aa:	f10d 0307 	add.w	r3, sp, #7
 80062ae:	461d      	mov	r5, r3
 80062b0:	270a      	movs	r7, #10
 80062b2:	461a      	mov	r2, r3
 80062b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80062b8:	fb07 1416 	mls	r4, r7, r6, r1
 80062bc:	3430      	adds	r4, #48	@ 0x30
 80062be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062c2:	460c      	mov	r4, r1
 80062c4:	2c63      	cmp	r4, #99	@ 0x63
 80062c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80062ca:	4631      	mov	r1, r6
 80062cc:	dcf1      	bgt.n	80062b2 <__exponent+0x1c>
 80062ce:	3130      	adds	r1, #48	@ 0x30
 80062d0:	1e94      	subs	r4, r2, #2
 80062d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062d6:	1c41      	adds	r1, r0, #1
 80062d8:	4623      	mov	r3, r4
 80062da:	42ab      	cmp	r3, r5
 80062dc:	d30a      	bcc.n	80062f4 <__exponent+0x5e>
 80062de:	f10d 0309 	add.w	r3, sp, #9
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	42ac      	cmp	r4, r5
 80062e6:	bf88      	it	hi
 80062e8:	2300      	movhi	r3, #0
 80062ea:	3302      	adds	r3, #2
 80062ec:	4403      	add	r3, r0
 80062ee:	1a18      	subs	r0, r3, r0
 80062f0:	b003      	add	sp, #12
 80062f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062fc:	e7ed      	b.n	80062da <__exponent+0x44>
 80062fe:	2330      	movs	r3, #48	@ 0x30
 8006300:	3130      	adds	r1, #48	@ 0x30
 8006302:	7083      	strb	r3, [r0, #2]
 8006304:	70c1      	strb	r1, [r0, #3]
 8006306:	1d03      	adds	r3, r0, #4
 8006308:	e7f1      	b.n	80062ee <__exponent+0x58>
	...

0800630c <_printf_float>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	b08d      	sub	sp, #52	@ 0x34
 8006312:	460c      	mov	r4, r1
 8006314:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006318:	4616      	mov	r6, r2
 800631a:	461f      	mov	r7, r3
 800631c:	4605      	mov	r5, r0
 800631e:	f000 fcdb 	bl	8006cd8 <_localeconv_r>
 8006322:	6803      	ldr	r3, [r0, #0]
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	4618      	mov	r0, r3
 8006328:	f7f9 ffc2 	bl	80002b0 <strlen>
 800632c:	2300      	movs	r3, #0
 800632e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006330:	f8d8 3000 	ldr.w	r3, [r8]
 8006334:	9005      	str	r0, [sp, #20]
 8006336:	3307      	adds	r3, #7
 8006338:	f023 0307 	bic.w	r3, r3, #7
 800633c:	f103 0208 	add.w	r2, r3, #8
 8006340:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006344:	f8d4 b000 	ldr.w	fp, [r4]
 8006348:	f8c8 2000 	str.w	r2, [r8]
 800634c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006350:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006354:	9307      	str	r3, [sp, #28]
 8006356:	f8cd 8018 	str.w	r8, [sp, #24]
 800635a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800635e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006362:	4b9c      	ldr	r3, [pc, #624]	@ (80065d4 <_printf_float+0x2c8>)
 8006364:	f04f 32ff 	mov.w	r2, #4294967295
 8006368:	f7fa fc00 	bl	8000b6c <__aeabi_dcmpun>
 800636c:	bb70      	cbnz	r0, 80063cc <_printf_float+0xc0>
 800636e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006372:	4b98      	ldr	r3, [pc, #608]	@ (80065d4 <_printf_float+0x2c8>)
 8006374:	f04f 32ff 	mov.w	r2, #4294967295
 8006378:	f7fa fbda 	bl	8000b30 <__aeabi_dcmple>
 800637c:	bb30      	cbnz	r0, 80063cc <_printf_float+0xc0>
 800637e:	2200      	movs	r2, #0
 8006380:	2300      	movs	r3, #0
 8006382:	4640      	mov	r0, r8
 8006384:	4649      	mov	r1, r9
 8006386:	f7fa fbc9 	bl	8000b1c <__aeabi_dcmplt>
 800638a:	b110      	cbz	r0, 8006392 <_printf_float+0x86>
 800638c:	232d      	movs	r3, #45	@ 0x2d
 800638e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006392:	4a91      	ldr	r2, [pc, #580]	@ (80065d8 <_printf_float+0x2cc>)
 8006394:	4b91      	ldr	r3, [pc, #580]	@ (80065dc <_printf_float+0x2d0>)
 8006396:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800639a:	bf8c      	ite	hi
 800639c:	4690      	movhi	r8, r2
 800639e:	4698      	movls	r8, r3
 80063a0:	2303      	movs	r3, #3
 80063a2:	6123      	str	r3, [r4, #16]
 80063a4:	f02b 0304 	bic.w	r3, fp, #4
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	f04f 0900 	mov.w	r9, #0
 80063ae:	9700      	str	r7, [sp, #0]
 80063b0:	4633      	mov	r3, r6
 80063b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f9d2 	bl	8006760 <_printf_common>
 80063bc:	3001      	adds	r0, #1
 80063be:	f040 808d 	bne.w	80064dc <_printf_float+0x1d0>
 80063c2:	f04f 30ff 	mov.w	r0, #4294967295
 80063c6:	b00d      	add	sp, #52	@ 0x34
 80063c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	4640      	mov	r0, r8
 80063d2:	4649      	mov	r1, r9
 80063d4:	f7fa fbca 	bl	8000b6c <__aeabi_dcmpun>
 80063d8:	b140      	cbz	r0, 80063ec <_printf_float+0xe0>
 80063da:	464b      	mov	r3, r9
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfbc      	itt	lt
 80063e0:	232d      	movlt	r3, #45	@ 0x2d
 80063e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063e6:	4a7e      	ldr	r2, [pc, #504]	@ (80065e0 <_printf_float+0x2d4>)
 80063e8:	4b7e      	ldr	r3, [pc, #504]	@ (80065e4 <_printf_float+0x2d8>)
 80063ea:	e7d4      	b.n	8006396 <_printf_float+0x8a>
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80063f2:	9206      	str	r2, [sp, #24]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	d13b      	bne.n	8006470 <_printf_float+0x164>
 80063f8:	2306      	movs	r3, #6
 80063fa:	6063      	str	r3, [r4, #4]
 80063fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006400:	2300      	movs	r3, #0
 8006402:	6022      	str	r2, [r4, #0]
 8006404:	9303      	str	r3, [sp, #12]
 8006406:	ab0a      	add	r3, sp, #40	@ 0x28
 8006408:	e9cd a301 	strd	sl, r3, [sp, #4]
 800640c:	ab09      	add	r3, sp, #36	@ 0x24
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	6861      	ldr	r1, [r4, #4]
 8006412:	ec49 8b10 	vmov	d0, r8, r9
 8006416:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800641a:	4628      	mov	r0, r5
 800641c:	f7ff fed6 	bl	80061cc <__cvt>
 8006420:	9b06      	ldr	r3, [sp, #24]
 8006422:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006424:	2b47      	cmp	r3, #71	@ 0x47
 8006426:	4680      	mov	r8, r0
 8006428:	d129      	bne.n	800647e <_printf_float+0x172>
 800642a:	1cc8      	adds	r0, r1, #3
 800642c:	db02      	blt.n	8006434 <_printf_float+0x128>
 800642e:	6863      	ldr	r3, [r4, #4]
 8006430:	4299      	cmp	r1, r3
 8006432:	dd41      	ble.n	80064b8 <_printf_float+0x1ac>
 8006434:	f1aa 0a02 	sub.w	sl, sl, #2
 8006438:	fa5f fa8a 	uxtb.w	sl, sl
 800643c:	3901      	subs	r1, #1
 800643e:	4652      	mov	r2, sl
 8006440:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006444:	9109      	str	r1, [sp, #36]	@ 0x24
 8006446:	f7ff ff26 	bl	8006296 <__exponent>
 800644a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800644c:	1813      	adds	r3, r2, r0
 800644e:	2a01      	cmp	r2, #1
 8006450:	4681      	mov	r9, r0
 8006452:	6123      	str	r3, [r4, #16]
 8006454:	dc02      	bgt.n	800645c <_printf_float+0x150>
 8006456:	6822      	ldr	r2, [r4, #0]
 8006458:	07d2      	lsls	r2, r2, #31
 800645a:	d501      	bpl.n	8006460 <_printf_float+0x154>
 800645c:	3301      	adds	r3, #1
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0a2      	beq.n	80063ae <_printf_float+0xa2>
 8006468:	232d      	movs	r3, #45	@ 0x2d
 800646a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800646e:	e79e      	b.n	80063ae <_printf_float+0xa2>
 8006470:	9a06      	ldr	r2, [sp, #24]
 8006472:	2a47      	cmp	r2, #71	@ 0x47
 8006474:	d1c2      	bne.n	80063fc <_printf_float+0xf0>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1c0      	bne.n	80063fc <_printf_float+0xf0>
 800647a:	2301      	movs	r3, #1
 800647c:	e7bd      	b.n	80063fa <_printf_float+0xee>
 800647e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006482:	d9db      	bls.n	800643c <_printf_float+0x130>
 8006484:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006488:	d118      	bne.n	80064bc <_printf_float+0x1b0>
 800648a:	2900      	cmp	r1, #0
 800648c:	6863      	ldr	r3, [r4, #4]
 800648e:	dd0b      	ble.n	80064a8 <_printf_float+0x19c>
 8006490:	6121      	str	r1, [r4, #16]
 8006492:	b913      	cbnz	r3, 800649a <_printf_float+0x18e>
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	07d0      	lsls	r0, r2, #31
 8006498:	d502      	bpl.n	80064a0 <_printf_float+0x194>
 800649a:	3301      	adds	r3, #1
 800649c:	440b      	add	r3, r1
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80064a2:	f04f 0900 	mov.w	r9, #0
 80064a6:	e7db      	b.n	8006460 <_printf_float+0x154>
 80064a8:	b913      	cbnz	r3, 80064b0 <_printf_float+0x1a4>
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	07d2      	lsls	r2, r2, #31
 80064ae:	d501      	bpl.n	80064b4 <_printf_float+0x1a8>
 80064b0:	3302      	adds	r3, #2
 80064b2:	e7f4      	b.n	800649e <_printf_float+0x192>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e7f2      	b.n	800649e <_printf_float+0x192>
 80064b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064be:	4299      	cmp	r1, r3
 80064c0:	db05      	blt.n	80064ce <_printf_float+0x1c2>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	6121      	str	r1, [r4, #16]
 80064c6:	07d8      	lsls	r0, r3, #31
 80064c8:	d5ea      	bpl.n	80064a0 <_printf_float+0x194>
 80064ca:	1c4b      	adds	r3, r1, #1
 80064cc:	e7e7      	b.n	800649e <_printf_float+0x192>
 80064ce:	2900      	cmp	r1, #0
 80064d0:	bfd4      	ite	le
 80064d2:	f1c1 0202 	rsble	r2, r1, #2
 80064d6:	2201      	movgt	r2, #1
 80064d8:	4413      	add	r3, r2
 80064da:	e7e0      	b.n	800649e <_printf_float+0x192>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	055a      	lsls	r2, r3, #21
 80064e0:	d407      	bmi.n	80064f2 <_printf_float+0x1e6>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	4642      	mov	r2, r8
 80064e6:	4631      	mov	r1, r6
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b8      	blx	r7
 80064ec:	3001      	adds	r0, #1
 80064ee:	d12b      	bne.n	8006548 <_printf_float+0x23c>
 80064f0:	e767      	b.n	80063c2 <_printf_float+0xb6>
 80064f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064f6:	f240 80dd 	bls.w	80066b4 <_printf_float+0x3a8>
 80064fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064fe:	2200      	movs	r2, #0
 8006500:	2300      	movs	r3, #0
 8006502:	f7fa fb01 	bl	8000b08 <__aeabi_dcmpeq>
 8006506:	2800      	cmp	r0, #0
 8006508:	d033      	beq.n	8006572 <_printf_float+0x266>
 800650a:	4a37      	ldr	r2, [pc, #220]	@ (80065e8 <_printf_float+0x2dc>)
 800650c:	2301      	movs	r3, #1
 800650e:	4631      	mov	r1, r6
 8006510:	4628      	mov	r0, r5
 8006512:	47b8      	blx	r7
 8006514:	3001      	adds	r0, #1
 8006516:	f43f af54 	beq.w	80063c2 <_printf_float+0xb6>
 800651a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800651e:	4543      	cmp	r3, r8
 8006520:	db02      	blt.n	8006528 <_printf_float+0x21c>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	07d8      	lsls	r0, r3, #31
 8006526:	d50f      	bpl.n	8006548 <_printf_float+0x23c>
 8006528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800652c:	4631      	mov	r1, r6
 800652e:	4628      	mov	r0, r5
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	f43f af45 	beq.w	80063c2 <_printf_float+0xb6>
 8006538:	f04f 0900 	mov.w	r9, #0
 800653c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006540:	f104 0a1a 	add.w	sl, r4, #26
 8006544:	45c8      	cmp	r8, r9
 8006546:	dc09      	bgt.n	800655c <_printf_float+0x250>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	079b      	lsls	r3, r3, #30
 800654c:	f100 8103 	bmi.w	8006756 <_printf_float+0x44a>
 8006550:	68e0      	ldr	r0, [r4, #12]
 8006552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006554:	4298      	cmp	r0, r3
 8006556:	bfb8      	it	lt
 8006558:	4618      	movlt	r0, r3
 800655a:	e734      	b.n	80063c6 <_printf_float+0xba>
 800655c:	2301      	movs	r3, #1
 800655e:	4652      	mov	r2, sl
 8006560:	4631      	mov	r1, r6
 8006562:	4628      	mov	r0, r5
 8006564:	47b8      	blx	r7
 8006566:	3001      	adds	r0, #1
 8006568:	f43f af2b 	beq.w	80063c2 <_printf_float+0xb6>
 800656c:	f109 0901 	add.w	r9, r9, #1
 8006570:	e7e8      	b.n	8006544 <_printf_float+0x238>
 8006572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	dc39      	bgt.n	80065ec <_printf_float+0x2e0>
 8006578:	4a1b      	ldr	r2, [pc, #108]	@ (80065e8 <_printf_float+0x2dc>)
 800657a:	2301      	movs	r3, #1
 800657c:	4631      	mov	r1, r6
 800657e:	4628      	mov	r0, r5
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	f43f af1d 	beq.w	80063c2 <_printf_float+0xb6>
 8006588:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800658c:	ea59 0303 	orrs.w	r3, r9, r3
 8006590:	d102      	bne.n	8006598 <_printf_float+0x28c>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	07d9      	lsls	r1, r3, #31
 8006596:	d5d7      	bpl.n	8006548 <_printf_float+0x23c>
 8006598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800659c:	4631      	mov	r1, r6
 800659e:	4628      	mov	r0, r5
 80065a0:	47b8      	blx	r7
 80065a2:	3001      	adds	r0, #1
 80065a4:	f43f af0d 	beq.w	80063c2 <_printf_float+0xb6>
 80065a8:	f04f 0a00 	mov.w	sl, #0
 80065ac:	f104 0b1a 	add.w	fp, r4, #26
 80065b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b2:	425b      	negs	r3, r3
 80065b4:	4553      	cmp	r3, sl
 80065b6:	dc01      	bgt.n	80065bc <_printf_float+0x2b0>
 80065b8:	464b      	mov	r3, r9
 80065ba:	e793      	b.n	80064e4 <_printf_float+0x1d8>
 80065bc:	2301      	movs	r3, #1
 80065be:	465a      	mov	r2, fp
 80065c0:	4631      	mov	r1, r6
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	f43f aefb 	beq.w	80063c2 <_printf_float+0xb6>
 80065cc:	f10a 0a01 	add.w	sl, sl, #1
 80065d0:	e7ee      	b.n	80065b0 <_printf_float+0x2a4>
 80065d2:	bf00      	nop
 80065d4:	7fefffff 	.word	0x7fefffff
 80065d8:	08009290 	.word	0x08009290
 80065dc:	0800928c 	.word	0x0800928c
 80065e0:	08009298 	.word	0x08009298
 80065e4:	08009294 	.word	0x08009294
 80065e8:	0800929c 	.word	0x0800929c
 80065ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065f2:	4553      	cmp	r3, sl
 80065f4:	bfa8      	it	ge
 80065f6:	4653      	movge	r3, sl
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	4699      	mov	r9, r3
 80065fc:	dc36      	bgt.n	800666c <_printf_float+0x360>
 80065fe:	f04f 0b00 	mov.w	fp, #0
 8006602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006606:	f104 021a 	add.w	r2, r4, #26
 800660a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800660c:	9306      	str	r3, [sp, #24]
 800660e:	eba3 0309 	sub.w	r3, r3, r9
 8006612:	455b      	cmp	r3, fp
 8006614:	dc31      	bgt.n	800667a <_printf_float+0x36e>
 8006616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006618:	459a      	cmp	sl, r3
 800661a:	dc3a      	bgt.n	8006692 <_printf_float+0x386>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	07da      	lsls	r2, r3, #31
 8006620:	d437      	bmi.n	8006692 <_printf_float+0x386>
 8006622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006624:	ebaa 0903 	sub.w	r9, sl, r3
 8006628:	9b06      	ldr	r3, [sp, #24]
 800662a:	ebaa 0303 	sub.w	r3, sl, r3
 800662e:	4599      	cmp	r9, r3
 8006630:	bfa8      	it	ge
 8006632:	4699      	movge	r9, r3
 8006634:	f1b9 0f00 	cmp.w	r9, #0
 8006638:	dc33      	bgt.n	80066a2 <_printf_float+0x396>
 800663a:	f04f 0800 	mov.w	r8, #0
 800663e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006642:	f104 0b1a 	add.w	fp, r4, #26
 8006646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006648:	ebaa 0303 	sub.w	r3, sl, r3
 800664c:	eba3 0309 	sub.w	r3, r3, r9
 8006650:	4543      	cmp	r3, r8
 8006652:	f77f af79 	ble.w	8006548 <_printf_float+0x23c>
 8006656:	2301      	movs	r3, #1
 8006658:	465a      	mov	r2, fp
 800665a:	4631      	mov	r1, r6
 800665c:	4628      	mov	r0, r5
 800665e:	47b8      	blx	r7
 8006660:	3001      	adds	r0, #1
 8006662:	f43f aeae 	beq.w	80063c2 <_printf_float+0xb6>
 8006666:	f108 0801 	add.w	r8, r8, #1
 800666a:	e7ec      	b.n	8006646 <_printf_float+0x33a>
 800666c:	4642      	mov	r2, r8
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	d1c2      	bne.n	80065fe <_printf_float+0x2f2>
 8006678:	e6a3      	b.n	80063c2 <_printf_float+0xb6>
 800667a:	2301      	movs	r3, #1
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	9206      	str	r2, [sp, #24]
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	f43f ae9c 	beq.w	80063c2 <_printf_float+0xb6>
 800668a:	9a06      	ldr	r2, [sp, #24]
 800668c:	f10b 0b01 	add.w	fp, fp, #1
 8006690:	e7bb      	b.n	800660a <_printf_float+0x2fe>
 8006692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	d1c0      	bne.n	8006622 <_printf_float+0x316>
 80066a0:	e68f      	b.n	80063c2 <_printf_float+0xb6>
 80066a2:	9a06      	ldr	r2, [sp, #24]
 80066a4:	464b      	mov	r3, r9
 80066a6:	4442      	add	r2, r8
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	d1c3      	bne.n	800663a <_printf_float+0x32e>
 80066b2:	e686      	b.n	80063c2 <_printf_float+0xb6>
 80066b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066b8:	f1ba 0f01 	cmp.w	sl, #1
 80066bc:	dc01      	bgt.n	80066c2 <_printf_float+0x3b6>
 80066be:	07db      	lsls	r3, r3, #31
 80066c0:	d536      	bpl.n	8006730 <_printf_float+0x424>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4642      	mov	r2, r8
 80066c6:	4631      	mov	r1, r6
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	f43f ae78 	beq.w	80063c2 <_printf_float+0xb6>
 80066d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	f43f ae70 	beq.w	80063c2 <_printf_float+0xb6>
 80066e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066e6:	2200      	movs	r2, #0
 80066e8:	2300      	movs	r3, #0
 80066ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066ee:	f7fa fa0b 	bl	8000b08 <__aeabi_dcmpeq>
 80066f2:	b9c0      	cbnz	r0, 8006726 <_printf_float+0x41a>
 80066f4:	4653      	mov	r3, sl
 80066f6:	f108 0201 	add.w	r2, r8, #1
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	d10c      	bne.n	800671e <_printf_float+0x412>
 8006704:	e65d      	b.n	80063c2 <_printf_float+0xb6>
 8006706:	2301      	movs	r3, #1
 8006708:	465a      	mov	r2, fp
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	47b8      	blx	r7
 8006710:	3001      	adds	r0, #1
 8006712:	f43f ae56 	beq.w	80063c2 <_printf_float+0xb6>
 8006716:	f108 0801 	add.w	r8, r8, #1
 800671a:	45d0      	cmp	r8, sl
 800671c:	dbf3      	blt.n	8006706 <_printf_float+0x3fa>
 800671e:	464b      	mov	r3, r9
 8006720:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006724:	e6df      	b.n	80064e6 <_printf_float+0x1da>
 8006726:	f04f 0800 	mov.w	r8, #0
 800672a:	f104 0b1a 	add.w	fp, r4, #26
 800672e:	e7f4      	b.n	800671a <_printf_float+0x40e>
 8006730:	2301      	movs	r3, #1
 8006732:	4642      	mov	r2, r8
 8006734:	e7e1      	b.n	80066fa <_printf_float+0x3ee>
 8006736:	2301      	movs	r3, #1
 8006738:	464a      	mov	r2, r9
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f ae3e 	beq.w	80063c2 <_printf_float+0xb6>
 8006746:	f108 0801 	add.w	r8, r8, #1
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800674e:	1a5b      	subs	r3, r3, r1
 8006750:	4543      	cmp	r3, r8
 8006752:	dcf0      	bgt.n	8006736 <_printf_float+0x42a>
 8006754:	e6fc      	b.n	8006550 <_printf_float+0x244>
 8006756:	f04f 0800 	mov.w	r8, #0
 800675a:	f104 0919 	add.w	r9, r4, #25
 800675e:	e7f4      	b.n	800674a <_printf_float+0x43e>

08006760 <_printf_common>:
 8006760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	4616      	mov	r6, r2
 8006766:	4698      	mov	r8, r3
 8006768:	688a      	ldr	r2, [r1, #8]
 800676a:	690b      	ldr	r3, [r1, #16]
 800676c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006770:	4293      	cmp	r3, r2
 8006772:	bfb8      	it	lt
 8006774:	4613      	movlt	r3, r2
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800677c:	4607      	mov	r7, r0
 800677e:	460c      	mov	r4, r1
 8006780:	b10a      	cbz	r2, 8006786 <_printf_common+0x26>
 8006782:	3301      	adds	r3, #1
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	0699      	lsls	r1, r3, #26
 800678a:	bf42      	ittt	mi
 800678c:	6833      	ldrmi	r3, [r6, #0]
 800678e:	3302      	addmi	r3, #2
 8006790:	6033      	strmi	r3, [r6, #0]
 8006792:	6825      	ldr	r5, [r4, #0]
 8006794:	f015 0506 	ands.w	r5, r5, #6
 8006798:	d106      	bne.n	80067a8 <_printf_common+0x48>
 800679a:	f104 0a19 	add.w	sl, r4, #25
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	6832      	ldr	r2, [r6, #0]
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dc26      	bgt.n	80067f6 <_printf_common+0x96>
 80067a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	3b00      	subs	r3, #0
 80067b0:	bf18      	it	ne
 80067b2:	2301      	movne	r3, #1
 80067b4:	0692      	lsls	r2, r2, #26
 80067b6:	d42b      	bmi.n	8006810 <_printf_common+0xb0>
 80067b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067bc:	4641      	mov	r1, r8
 80067be:	4638      	mov	r0, r7
 80067c0:	47c8      	blx	r9
 80067c2:	3001      	adds	r0, #1
 80067c4:	d01e      	beq.n	8006804 <_printf_common+0xa4>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	6922      	ldr	r2, [r4, #16]
 80067ca:	f003 0306 	and.w	r3, r3, #6
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	bf02      	ittt	eq
 80067d2:	68e5      	ldreq	r5, [r4, #12]
 80067d4:	6833      	ldreq	r3, [r6, #0]
 80067d6:	1aed      	subeq	r5, r5, r3
 80067d8:	68a3      	ldr	r3, [r4, #8]
 80067da:	bf0c      	ite	eq
 80067dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067e0:	2500      	movne	r5, #0
 80067e2:	4293      	cmp	r3, r2
 80067e4:	bfc4      	itt	gt
 80067e6:	1a9b      	subgt	r3, r3, r2
 80067e8:	18ed      	addgt	r5, r5, r3
 80067ea:	2600      	movs	r6, #0
 80067ec:	341a      	adds	r4, #26
 80067ee:	42b5      	cmp	r5, r6
 80067f0:	d11a      	bne.n	8006828 <_printf_common+0xc8>
 80067f2:	2000      	movs	r0, #0
 80067f4:	e008      	b.n	8006808 <_printf_common+0xa8>
 80067f6:	2301      	movs	r3, #1
 80067f8:	4652      	mov	r2, sl
 80067fa:	4641      	mov	r1, r8
 80067fc:	4638      	mov	r0, r7
 80067fe:	47c8      	blx	r9
 8006800:	3001      	adds	r0, #1
 8006802:	d103      	bne.n	800680c <_printf_common+0xac>
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680c:	3501      	adds	r5, #1
 800680e:	e7c6      	b.n	800679e <_printf_common+0x3e>
 8006810:	18e1      	adds	r1, r4, r3
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	2030      	movs	r0, #48	@ 0x30
 8006816:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800681a:	4422      	add	r2, r4
 800681c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006820:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006824:	3302      	adds	r3, #2
 8006826:	e7c7      	b.n	80067b8 <_printf_common+0x58>
 8006828:	2301      	movs	r3, #1
 800682a:	4622      	mov	r2, r4
 800682c:	4641      	mov	r1, r8
 800682e:	4638      	mov	r0, r7
 8006830:	47c8      	blx	r9
 8006832:	3001      	adds	r0, #1
 8006834:	d0e6      	beq.n	8006804 <_printf_common+0xa4>
 8006836:	3601      	adds	r6, #1
 8006838:	e7d9      	b.n	80067ee <_printf_common+0x8e>
	...

0800683c <_printf_i>:
 800683c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	7e0f      	ldrb	r7, [r1, #24]
 8006842:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006844:	2f78      	cmp	r7, #120	@ 0x78
 8006846:	4691      	mov	r9, r2
 8006848:	4680      	mov	r8, r0
 800684a:	460c      	mov	r4, r1
 800684c:	469a      	mov	sl, r3
 800684e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006852:	d807      	bhi.n	8006864 <_printf_i+0x28>
 8006854:	2f62      	cmp	r7, #98	@ 0x62
 8006856:	d80a      	bhi.n	800686e <_printf_i+0x32>
 8006858:	2f00      	cmp	r7, #0
 800685a:	f000 80d1 	beq.w	8006a00 <_printf_i+0x1c4>
 800685e:	2f58      	cmp	r7, #88	@ 0x58
 8006860:	f000 80b8 	beq.w	80069d4 <_printf_i+0x198>
 8006864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006868:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800686c:	e03a      	b.n	80068e4 <_printf_i+0xa8>
 800686e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006872:	2b15      	cmp	r3, #21
 8006874:	d8f6      	bhi.n	8006864 <_printf_i+0x28>
 8006876:	a101      	add	r1, pc, #4	@ (adr r1, 800687c <_printf_i+0x40>)
 8006878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800687c:	080068d5 	.word	0x080068d5
 8006880:	080068e9 	.word	0x080068e9
 8006884:	08006865 	.word	0x08006865
 8006888:	08006865 	.word	0x08006865
 800688c:	08006865 	.word	0x08006865
 8006890:	08006865 	.word	0x08006865
 8006894:	080068e9 	.word	0x080068e9
 8006898:	08006865 	.word	0x08006865
 800689c:	08006865 	.word	0x08006865
 80068a0:	08006865 	.word	0x08006865
 80068a4:	08006865 	.word	0x08006865
 80068a8:	080069e7 	.word	0x080069e7
 80068ac:	08006913 	.word	0x08006913
 80068b0:	080069a1 	.word	0x080069a1
 80068b4:	08006865 	.word	0x08006865
 80068b8:	08006865 	.word	0x08006865
 80068bc:	08006a09 	.word	0x08006a09
 80068c0:	08006865 	.word	0x08006865
 80068c4:	08006913 	.word	0x08006913
 80068c8:	08006865 	.word	0x08006865
 80068cc:	08006865 	.word	0x08006865
 80068d0:	080069a9 	.word	0x080069a9
 80068d4:	6833      	ldr	r3, [r6, #0]
 80068d6:	1d1a      	adds	r2, r3, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6032      	str	r2, [r6, #0]
 80068dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068e4:	2301      	movs	r3, #1
 80068e6:	e09c      	b.n	8006a22 <_printf_i+0x1e6>
 80068e8:	6833      	ldr	r3, [r6, #0]
 80068ea:	6820      	ldr	r0, [r4, #0]
 80068ec:	1d19      	adds	r1, r3, #4
 80068ee:	6031      	str	r1, [r6, #0]
 80068f0:	0606      	lsls	r6, r0, #24
 80068f2:	d501      	bpl.n	80068f8 <_printf_i+0xbc>
 80068f4:	681d      	ldr	r5, [r3, #0]
 80068f6:	e003      	b.n	8006900 <_printf_i+0xc4>
 80068f8:	0645      	lsls	r5, r0, #25
 80068fa:	d5fb      	bpl.n	80068f4 <_printf_i+0xb8>
 80068fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006900:	2d00      	cmp	r5, #0
 8006902:	da03      	bge.n	800690c <_printf_i+0xd0>
 8006904:	232d      	movs	r3, #45	@ 0x2d
 8006906:	426d      	negs	r5, r5
 8006908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800690c:	4858      	ldr	r0, [pc, #352]	@ (8006a70 <_printf_i+0x234>)
 800690e:	230a      	movs	r3, #10
 8006910:	e011      	b.n	8006936 <_printf_i+0xfa>
 8006912:	6821      	ldr	r1, [r4, #0]
 8006914:	6833      	ldr	r3, [r6, #0]
 8006916:	0608      	lsls	r0, r1, #24
 8006918:	f853 5b04 	ldr.w	r5, [r3], #4
 800691c:	d402      	bmi.n	8006924 <_printf_i+0xe8>
 800691e:	0649      	lsls	r1, r1, #25
 8006920:	bf48      	it	mi
 8006922:	b2ad      	uxthmi	r5, r5
 8006924:	2f6f      	cmp	r7, #111	@ 0x6f
 8006926:	4852      	ldr	r0, [pc, #328]	@ (8006a70 <_printf_i+0x234>)
 8006928:	6033      	str	r3, [r6, #0]
 800692a:	bf14      	ite	ne
 800692c:	230a      	movne	r3, #10
 800692e:	2308      	moveq	r3, #8
 8006930:	2100      	movs	r1, #0
 8006932:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006936:	6866      	ldr	r6, [r4, #4]
 8006938:	60a6      	str	r6, [r4, #8]
 800693a:	2e00      	cmp	r6, #0
 800693c:	db05      	blt.n	800694a <_printf_i+0x10e>
 800693e:	6821      	ldr	r1, [r4, #0]
 8006940:	432e      	orrs	r6, r5
 8006942:	f021 0104 	bic.w	r1, r1, #4
 8006946:	6021      	str	r1, [r4, #0]
 8006948:	d04b      	beq.n	80069e2 <_printf_i+0x1a6>
 800694a:	4616      	mov	r6, r2
 800694c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006950:	fb03 5711 	mls	r7, r3, r1, r5
 8006954:	5dc7      	ldrb	r7, [r0, r7]
 8006956:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800695a:	462f      	mov	r7, r5
 800695c:	42bb      	cmp	r3, r7
 800695e:	460d      	mov	r5, r1
 8006960:	d9f4      	bls.n	800694c <_printf_i+0x110>
 8006962:	2b08      	cmp	r3, #8
 8006964:	d10b      	bne.n	800697e <_printf_i+0x142>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	07df      	lsls	r7, r3, #31
 800696a:	d508      	bpl.n	800697e <_printf_i+0x142>
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	6861      	ldr	r1, [r4, #4]
 8006970:	4299      	cmp	r1, r3
 8006972:	bfde      	ittt	le
 8006974:	2330      	movle	r3, #48	@ 0x30
 8006976:	f806 3c01 	strble.w	r3, [r6, #-1]
 800697a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800697e:	1b92      	subs	r2, r2, r6
 8006980:	6122      	str	r2, [r4, #16]
 8006982:	f8cd a000 	str.w	sl, [sp]
 8006986:	464b      	mov	r3, r9
 8006988:	aa03      	add	r2, sp, #12
 800698a:	4621      	mov	r1, r4
 800698c:	4640      	mov	r0, r8
 800698e:	f7ff fee7 	bl	8006760 <_printf_common>
 8006992:	3001      	adds	r0, #1
 8006994:	d14a      	bne.n	8006a2c <_printf_i+0x1f0>
 8006996:	f04f 30ff 	mov.w	r0, #4294967295
 800699a:	b004      	add	sp, #16
 800699c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	f043 0320 	orr.w	r3, r3, #32
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	4832      	ldr	r0, [pc, #200]	@ (8006a74 <_printf_i+0x238>)
 80069aa:	2778      	movs	r7, #120	@ 0x78
 80069ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	6831      	ldr	r1, [r6, #0]
 80069b4:	061f      	lsls	r7, r3, #24
 80069b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80069ba:	d402      	bmi.n	80069c2 <_printf_i+0x186>
 80069bc:	065f      	lsls	r7, r3, #25
 80069be:	bf48      	it	mi
 80069c0:	b2ad      	uxthmi	r5, r5
 80069c2:	6031      	str	r1, [r6, #0]
 80069c4:	07d9      	lsls	r1, r3, #31
 80069c6:	bf44      	itt	mi
 80069c8:	f043 0320 	orrmi.w	r3, r3, #32
 80069cc:	6023      	strmi	r3, [r4, #0]
 80069ce:	b11d      	cbz	r5, 80069d8 <_printf_i+0x19c>
 80069d0:	2310      	movs	r3, #16
 80069d2:	e7ad      	b.n	8006930 <_printf_i+0xf4>
 80069d4:	4826      	ldr	r0, [pc, #152]	@ (8006a70 <_printf_i+0x234>)
 80069d6:	e7e9      	b.n	80069ac <_printf_i+0x170>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	f023 0320 	bic.w	r3, r3, #32
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	e7f6      	b.n	80069d0 <_printf_i+0x194>
 80069e2:	4616      	mov	r6, r2
 80069e4:	e7bd      	b.n	8006962 <_printf_i+0x126>
 80069e6:	6833      	ldr	r3, [r6, #0]
 80069e8:	6825      	ldr	r5, [r4, #0]
 80069ea:	6961      	ldr	r1, [r4, #20]
 80069ec:	1d18      	adds	r0, r3, #4
 80069ee:	6030      	str	r0, [r6, #0]
 80069f0:	062e      	lsls	r6, r5, #24
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	d501      	bpl.n	80069fa <_printf_i+0x1be>
 80069f6:	6019      	str	r1, [r3, #0]
 80069f8:	e002      	b.n	8006a00 <_printf_i+0x1c4>
 80069fa:	0668      	lsls	r0, r5, #25
 80069fc:	d5fb      	bpl.n	80069f6 <_printf_i+0x1ba>
 80069fe:	8019      	strh	r1, [r3, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	6123      	str	r3, [r4, #16]
 8006a04:	4616      	mov	r6, r2
 8006a06:	e7bc      	b.n	8006982 <_printf_i+0x146>
 8006a08:	6833      	ldr	r3, [r6, #0]
 8006a0a:	1d1a      	adds	r2, r3, #4
 8006a0c:	6032      	str	r2, [r6, #0]
 8006a0e:	681e      	ldr	r6, [r3, #0]
 8006a10:	6862      	ldr	r2, [r4, #4]
 8006a12:	2100      	movs	r1, #0
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7f9 fbfb 	bl	8000210 <memchr>
 8006a1a:	b108      	cbz	r0, 8006a20 <_printf_i+0x1e4>
 8006a1c:	1b80      	subs	r0, r0, r6
 8006a1e:	6060      	str	r0, [r4, #4]
 8006a20:	6863      	ldr	r3, [r4, #4]
 8006a22:	6123      	str	r3, [r4, #16]
 8006a24:	2300      	movs	r3, #0
 8006a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a2a:	e7aa      	b.n	8006982 <_printf_i+0x146>
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	4632      	mov	r2, r6
 8006a30:	4649      	mov	r1, r9
 8006a32:	4640      	mov	r0, r8
 8006a34:	47d0      	blx	sl
 8006a36:	3001      	adds	r0, #1
 8006a38:	d0ad      	beq.n	8006996 <_printf_i+0x15a>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	079b      	lsls	r3, r3, #30
 8006a3e:	d413      	bmi.n	8006a68 <_printf_i+0x22c>
 8006a40:	68e0      	ldr	r0, [r4, #12]
 8006a42:	9b03      	ldr	r3, [sp, #12]
 8006a44:	4298      	cmp	r0, r3
 8006a46:	bfb8      	it	lt
 8006a48:	4618      	movlt	r0, r3
 8006a4a:	e7a6      	b.n	800699a <_printf_i+0x15e>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4632      	mov	r2, r6
 8006a50:	4649      	mov	r1, r9
 8006a52:	4640      	mov	r0, r8
 8006a54:	47d0      	blx	sl
 8006a56:	3001      	adds	r0, #1
 8006a58:	d09d      	beq.n	8006996 <_printf_i+0x15a>
 8006a5a:	3501      	adds	r5, #1
 8006a5c:	68e3      	ldr	r3, [r4, #12]
 8006a5e:	9903      	ldr	r1, [sp, #12]
 8006a60:	1a5b      	subs	r3, r3, r1
 8006a62:	42ab      	cmp	r3, r5
 8006a64:	dcf2      	bgt.n	8006a4c <_printf_i+0x210>
 8006a66:	e7eb      	b.n	8006a40 <_printf_i+0x204>
 8006a68:	2500      	movs	r5, #0
 8006a6a:	f104 0619 	add.w	r6, r4, #25
 8006a6e:	e7f5      	b.n	8006a5c <_printf_i+0x220>
 8006a70:	0800929e 	.word	0x0800929e
 8006a74:	080092af 	.word	0x080092af

08006a78 <std>:
 8006a78:	2300      	movs	r3, #0
 8006a7a:	b510      	push	{r4, lr}
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a86:	6083      	str	r3, [r0, #8]
 8006a88:	8181      	strh	r1, [r0, #12]
 8006a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a8c:	81c2      	strh	r2, [r0, #14]
 8006a8e:	6183      	str	r3, [r0, #24]
 8006a90:	4619      	mov	r1, r3
 8006a92:	2208      	movs	r2, #8
 8006a94:	305c      	adds	r0, #92	@ 0x5c
 8006a96:	f000 f916 	bl	8006cc6 <memset>
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <std+0x58>)
 8006a9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <std+0x5c>)
 8006aa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <std+0x60>)
 8006aa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006adc <std+0x64>)
 8006aa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae0 <std+0x68>)
 8006aac:	6224      	str	r4, [r4, #32]
 8006aae:	429c      	cmp	r4, r3
 8006ab0:	d006      	beq.n	8006ac0 <std+0x48>
 8006ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ab6:	4294      	cmp	r4, r2
 8006ab8:	d002      	beq.n	8006ac0 <std+0x48>
 8006aba:	33d0      	adds	r3, #208	@ 0xd0
 8006abc:	429c      	cmp	r4, r3
 8006abe:	d105      	bne.n	8006acc <std+0x54>
 8006ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac8:	f000 b97a 	b.w	8006dc0 <__retarget_lock_init_recursive>
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	bf00      	nop
 8006ad0:	08006c41 	.word	0x08006c41
 8006ad4:	08006c63 	.word	0x08006c63
 8006ad8:	08006c9b 	.word	0x08006c9b
 8006adc:	08006cbf 	.word	0x08006cbf
 8006ae0:	20000aec 	.word	0x20000aec

08006ae4 <stdio_exit_handler>:
 8006ae4:	4a02      	ldr	r2, [pc, #8]	@ (8006af0 <stdio_exit_handler+0xc>)
 8006ae6:	4903      	ldr	r1, [pc, #12]	@ (8006af4 <stdio_exit_handler+0x10>)
 8006ae8:	4803      	ldr	r0, [pc, #12]	@ (8006af8 <stdio_exit_handler+0x14>)
 8006aea:	f000 b869 	b.w	8006bc0 <_fwalk_sglue>
 8006aee:	bf00      	nop
 8006af0:	2000000c 	.word	0x2000000c
 8006af4:	08008745 	.word	0x08008745
 8006af8:	2000001c 	.word	0x2000001c

08006afc <cleanup_stdio>:
 8006afc:	6841      	ldr	r1, [r0, #4]
 8006afe:	4b0c      	ldr	r3, [pc, #48]	@ (8006b30 <cleanup_stdio+0x34>)
 8006b00:	4299      	cmp	r1, r3
 8006b02:	b510      	push	{r4, lr}
 8006b04:	4604      	mov	r4, r0
 8006b06:	d001      	beq.n	8006b0c <cleanup_stdio+0x10>
 8006b08:	f001 fe1c 	bl	8008744 <_fflush_r>
 8006b0c:	68a1      	ldr	r1, [r4, #8]
 8006b0e:	4b09      	ldr	r3, [pc, #36]	@ (8006b34 <cleanup_stdio+0x38>)
 8006b10:	4299      	cmp	r1, r3
 8006b12:	d002      	beq.n	8006b1a <cleanup_stdio+0x1e>
 8006b14:	4620      	mov	r0, r4
 8006b16:	f001 fe15 	bl	8008744 <_fflush_r>
 8006b1a:	68e1      	ldr	r1, [r4, #12]
 8006b1c:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <cleanup_stdio+0x3c>)
 8006b1e:	4299      	cmp	r1, r3
 8006b20:	d004      	beq.n	8006b2c <cleanup_stdio+0x30>
 8006b22:	4620      	mov	r0, r4
 8006b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b28:	f001 be0c 	b.w	8008744 <_fflush_r>
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000aec 	.word	0x20000aec
 8006b34:	20000b54 	.word	0x20000b54
 8006b38:	20000bbc 	.word	0x20000bbc

08006b3c <global_stdio_init.part.0>:
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b6c <global_stdio_init.part.0+0x30>)
 8006b40:	4c0b      	ldr	r4, [pc, #44]	@ (8006b70 <global_stdio_init.part.0+0x34>)
 8006b42:	4a0c      	ldr	r2, [pc, #48]	@ (8006b74 <global_stdio_init.part.0+0x38>)
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	4620      	mov	r0, r4
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2104      	movs	r1, #4
 8006b4c:	f7ff ff94 	bl	8006a78 <std>
 8006b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b54:	2201      	movs	r2, #1
 8006b56:	2109      	movs	r1, #9
 8006b58:	f7ff ff8e 	bl	8006a78 <std>
 8006b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b60:	2202      	movs	r2, #2
 8006b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b66:	2112      	movs	r1, #18
 8006b68:	f7ff bf86 	b.w	8006a78 <std>
 8006b6c:	20000c24 	.word	0x20000c24
 8006b70:	20000aec 	.word	0x20000aec
 8006b74:	08006ae5 	.word	0x08006ae5

08006b78 <__sfp_lock_acquire>:
 8006b78:	4801      	ldr	r0, [pc, #4]	@ (8006b80 <__sfp_lock_acquire+0x8>)
 8006b7a:	f000 b922 	b.w	8006dc2 <__retarget_lock_acquire_recursive>
 8006b7e:	bf00      	nop
 8006b80:	20000c2d 	.word	0x20000c2d

08006b84 <__sfp_lock_release>:
 8006b84:	4801      	ldr	r0, [pc, #4]	@ (8006b8c <__sfp_lock_release+0x8>)
 8006b86:	f000 b91d 	b.w	8006dc4 <__retarget_lock_release_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	20000c2d 	.word	0x20000c2d

08006b90 <__sinit>:
 8006b90:	b510      	push	{r4, lr}
 8006b92:	4604      	mov	r4, r0
 8006b94:	f7ff fff0 	bl	8006b78 <__sfp_lock_acquire>
 8006b98:	6a23      	ldr	r3, [r4, #32]
 8006b9a:	b11b      	cbz	r3, 8006ba4 <__sinit+0x14>
 8006b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba0:	f7ff bff0 	b.w	8006b84 <__sfp_lock_release>
 8006ba4:	4b04      	ldr	r3, [pc, #16]	@ (8006bb8 <__sinit+0x28>)
 8006ba6:	6223      	str	r3, [r4, #32]
 8006ba8:	4b04      	ldr	r3, [pc, #16]	@ (8006bbc <__sinit+0x2c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1f5      	bne.n	8006b9c <__sinit+0xc>
 8006bb0:	f7ff ffc4 	bl	8006b3c <global_stdio_init.part.0>
 8006bb4:	e7f2      	b.n	8006b9c <__sinit+0xc>
 8006bb6:	bf00      	nop
 8006bb8:	08006afd 	.word	0x08006afd
 8006bbc:	20000c24 	.word	0x20000c24

08006bc0 <_fwalk_sglue>:
 8006bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	4688      	mov	r8, r1
 8006bc8:	4614      	mov	r4, r2
 8006bca:	2600      	movs	r6, #0
 8006bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8006bd4:	d505      	bpl.n	8006be2 <_fwalk_sglue+0x22>
 8006bd6:	6824      	ldr	r4, [r4, #0]
 8006bd8:	2c00      	cmp	r4, #0
 8006bda:	d1f7      	bne.n	8006bcc <_fwalk_sglue+0xc>
 8006bdc:	4630      	mov	r0, r6
 8006bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be2:	89ab      	ldrh	r3, [r5, #12]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d907      	bls.n	8006bf8 <_fwalk_sglue+0x38>
 8006be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bec:	3301      	adds	r3, #1
 8006bee:	d003      	beq.n	8006bf8 <_fwalk_sglue+0x38>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	47c0      	blx	r8
 8006bf6:	4306      	orrs	r6, r0
 8006bf8:	3568      	adds	r5, #104	@ 0x68
 8006bfa:	e7e9      	b.n	8006bd0 <_fwalk_sglue+0x10>

08006bfc <siprintf>:
 8006bfc:	b40e      	push	{r1, r2, r3}
 8006bfe:	b510      	push	{r4, lr}
 8006c00:	b09d      	sub	sp, #116	@ 0x74
 8006c02:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006c04:	9002      	str	r0, [sp, #8]
 8006c06:	9006      	str	r0, [sp, #24]
 8006c08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c0c:	480a      	ldr	r0, [pc, #40]	@ (8006c38 <siprintf+0x3c>)
 8006c0e:	9107      	str	r1, [sp, #28]
 8006c10:	9104      	str	r1, [sp, #16]
 8006c12:	490a      	ldr	r1, [pc, #40]	@ (8006c3c <siprintf+0x40>)
 8006c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c18:	9105      	str	r1, [sp, #20]
 8006c1a:	2400      	movs	r4, #0
 8006c1c:	a902      	add	r1, sp, #8
 8006c1e:	6800      	ldr	r0, [r0, #0]
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006c24:	f001 fc0e 	bl	8008444 <_svfiprintf_r>
 8006c28:	9b02      	ldr	r3, [sp, #8]
 8006c2a:	701c      	strb	r4, [r3, #0]
 8006c2c:	b01d      	add	sp, #116	@ 0x74
 8006c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c32:	b003      	add	sp, #12
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000018 	.word	0x20000018
 8006c3c:	ffff0208 	.word	0xffff0208

08006c40 <__sread>:
 8006c40:	b510      	push	{r4, lr}
 8006c42:	460c      	mov	r4, r1
 8006c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c48:	f000 f86c 	bl	8006d24 <_read_r>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	bfab      	itete	ge
 8006c50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c52:	89a3      	ldrhlt	r3, [r4, #12]
 8006c54:	181b      	addge	r3, r3, r0
 8006c56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c5a:	bfac      	ite	ge
 8006c5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c5e:	81a3      	strhlt	r3, [r4, #12]
 8006c60:	bd10      	pop	{r4, pc}

08006c62 <__swrite>:
 8006c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c66:	461f      	mov	r7, r3
 8006c68:	898b      	ldrh	r3, [r1, #12]
 8006c6a:	05db      	lsls	r3, r3, #23
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	4616      	mov	r6, r2
 8006c72:	d505      	bpl.n	8006c80 <__swrite+0x1e>
 8006c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c78:	2302      	movs	r3, #2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f000 f840 	bl	8006d00 <_lseek_r>
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	463b      	mov	r3, r7
 8006c90:	4628      	mov	r0, r5
 8006c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c96:	f000 b857 	b.w	8006d48 <_write_r>

08006c9a <__sseek>:
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca2:	f000 f82d 	bl	8006d00 <_lseek_r>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	bf15      	itete	ne
 8006cac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cb6:	81a3      	strheq	r3, [r4, #12]
 8006cb8:	bf18      	it	ne
 8006cba:	81a3      	strhne	r3, [r4, #12]
 8006cbc:	bd10      	pop	{r4, pc}

08006cbe <__sclose>:
 8006cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc2:	f000 b80d 	b.w	8006ce0 <_close_r>

08006cc6 <memset>:
 8006cc6:	4402      	add	r2, r0
 8006cc8:	4603      	mov	r3, r0
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d100      	bne.n	8006cd0 <memset+0xa>
 8006cce:	4770      	bx	lr
 8006cd0:	f803 1b01 	strb.w	r1, [r3], #1
 8006cd4:	e7f9      	b.n	8006cca <memset+0x4>
	...

08006cd8 <_localeconv_r>:
 8006cd8:	4800      	ldr	r0, [pc, #0]	@ (8006cdc <_localeconv_r+0x4>)
 8006cda:	4770      	bx	lr
 8006cdc:	20000158 	.word	0x20000158

08006ce0 <_close_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4d06      	ldr	r5, [pc, #24]	@ (8006cfc <_close_r+0x1c>)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4608      	mov	r0, r1
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	f7fb fa59 	bl	80021a2 <_close>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_close_r+0x1a>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_close_r+0x1a>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	20000c28 	.word	0x20000c28

08006d00 <_lseek_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4d07      	ldr	r5, [pc, #28]	@ (8006d20 <_lseek_r+0x20>)
 8006d04:	4604      	mov	r4, r0
 8006d06:	4608      	mov	r0, r1
 8006d08:	4611      	mov	r1, r2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	602a      	str	r2, [r5, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f7fb fa6e 	bl	80021f0 <_lseek>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_lseek_r+0x1e>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_lseek_r+0x1e>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	20000c28 	.word	0x20000c28

08006d24 <_read_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d07      	ldr	r5, [pc, #28]	@ (8006d44 <_read_r+0x20>)
 8006d28:	4604      	mov	r4, r0
 8006d2a:	4608      	mov	r0, r1
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	2200      	movs	r2, #0
 8006d30:	602a      	str	r2, [r5, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	f7fb f9fc 	bl	8002130 <_read>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_read_r+0x1e>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_read_r+0x1e>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	20000c28 	.word	0x20000c28

08006d48 <_write_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d07      	ldr	r5, [pc, #28]	@ (8006d68 <_write_r+0x20>)
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	4608      	mov	r0, r1
 8006d50:	4611      	mov	r1, r2
 8006d52:	2200      	movs	r2, #0
 8006d54:	602a      	str	r2, [r5, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	f7fb fa07 	bl	800216a <_write>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_write_r+0x1e>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_write_r+0x1e>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	20000c28 	.word	0x20000c28

08006d6c <__errno>:
 8006d6c:	4b01      	ldr	r3, [pc, #4]	@ (8006d74 <__errno+0x8>)
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000018 	.word	0x20000018

08006d78 <__libc_init_array>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8006db0 <__libc_init_array+0x38>)
 8006d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8006db4 <__libc_init_array+0x3c>)
 8006d7e:	1b64      	subs	r4, r4, r5
 8006d80:	10a4      	asrs	r4, r4, #2
 8006d82:	2600      	movs	r6, #0
 8006d84:	42a6      	cmp	r6, r4
 8006d86:	d109      	bne.n	8006d9c <__libc_init_array+0x24>
 8006d88:	4d0b      	ldr	r5, [pc, #44]	@ (8006db8 <__libc_init_array+0x40>)
 8006d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8006dbc <__libc_init_array+0x44>)
 8006d8c:	f002 f86a 	bl	8008e64 <_init>
 8006d90:	1b64      	subs	r4, r4, r5
 8006d92:	10a4      	asrs	r4, r4, #2
 8006d94:	2600      	movs	r6, #0
 8006d96:	42a6      	cmp	r6, r4
 8006d98:	d105      	bne.n	8006da6 <__libc_init_array+0x2e>
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da0:	4798      	blx	r3
 8006da2:	3601      	adds	r6, #1
 8006da4:	e7ee      	b.n	8006d84 <__libc_init_array+0xc>
 8006da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006daa:	4798      	blx	r3
 8006dac:	3601      	adds	r6, #1
 8006dae:	e7f2      	b.n	8006d96 <__libc_init_array+0x1e>
 8006db0:	0800960c 	.word	0x0800960c
 8006db4:	0800960c 	.word	0x0800960c
 8006db8:	0800960c 	.word	0x0800960c
 8006dbc:	08009610 	.word	0x08009610

08006dc0 <__retarget_lock_init_recursive>:
 8006dc0:	4770      	bx	lr

08006dc2 <__retarget_lock_acquire_recursive>:
 8006dc2:	4770      	bx	lr

08006dc4 <__retarget_lock_release_recursive>:
 8006dc4:	4770      	bx	lr

08006dc6 <memcpy>:
 8006dc6:	440a      	add	r2, r1
 8006dc8:	4291      	cmp	r1, r2
 8006dca:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dce:	d100      	bne.n	8006dd2 <memcpy+0xc>
 8006dd0:	4770      	bx	lr
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ddc:	4291      	cmp	r1, r2
 8006dde:	d1f9      	bne.n	8006dd4 <memcpy+0xe>
 8006de0:	bd10      	pop	{r4, pc}

08006de2 <quorem>:
 8006de2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de6:	6903      	ldr	r3, [r0, #16]
 8006de8:	690c      	ldr	r4, [r1, #16]
 8006dea:	42a3      	cmp	r3, r4
 8006dec:	4607      	mov	r7, r0
 8006dee:	db7e      	blt.n	8006eee <quorem+0x10c>
 8006df0:	3c01      	subs	r4, #1
 8006df2:	f101 0814 	add.w	r8, r1, #20
 8006df6:	00a3      	lsls	r3, r4, #2
 8006df8:	f100 0514 	add.w	r5, r0, #20
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e14:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e18:	d32e      	bcc.n	8006e78 <quorem+0x96>
 8006e1a:	f04f 0a00 	mov.w	sl, #0
 8006e1e:	46c4      	mov	ip, r8
 8006e20:	46ae      	mov	lr, r5
 8006e22:	46d3      	mov	fp, sl
 8006e24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e28:	b298      	uxth	r0, r3
 8006e2a:	fb06 a000 	mla	r0, r6, r0, sl
 8006e2e:	0c02      	lsrs	r2, r0, #16
 8006e30:	0c1b      	lsrs	r3, r3, #16
 8006e32:	fb06 2303 	mla	r3, r6, r3, r2
 8006e36:	f8de 2000 	ldr.w	r2, [lr]
 8006e3a:	b280      	uxth	r0, r0
 8006e3c:	b292      	uxth	r2, r2
 8006e3e:	1a12      	subs	r2, r2, r0
 8006e40:	445a      	add	r2, fp
 8006e42:	f8de 0000 	ldr.w	r0, [lr]
 8006e46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e54:	b292      	uxth	r2, r2
 8006e56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e5a:	45e1      	cmp	r9, ip
 8006e5c:	f84e 2b04 	str.w	r2, [lr], #4
 8006e60:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e64:	d2de      	bcs.n	8006e24 <quorem+0x42>
 8006e66:	9b00      	ldr	r3, [sp, #0]
 8006e68:	58eb      	ldr	r3, [r5, r3]
 8006e6a:	b92b      	cbnz	r3, 8006e78 <quorem+0x96>
 8006e6c:	9b01      	ldr	r3, [sp, #4]
 8006e6e:	3b04      	subs	r3, #4
 8006e70:	429d      	cmp	r5, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	d32f      	bcc.n	8006ed6 <quorem+0xf4>
 8006e76:	613c      	str	r4, [r7, #16]
 8006e78:	4638      	mov	r0, r7
 8006e7a:	f001 f97f 	bl	800817c <__mcmp>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	db25      	blt.n	8006ece <quorem+0xec>
 8006e82:	4629      	mov	r1, r5
 8006e84:	2000      	movs	r0, #0
 8006e86:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e8a:	f8d1 c000 	ldr.w	ip, [r1]
 8006e8e:	fa1f fe82 	uxth.w	lr, r2
 8006e92:	fa1f f38c 	uxth.w	r3, ip
 8006e96:	eba3 030e 	sub.w	r3, r3, lr
 8006e9a:	4403      	add	r3, r0
 8006e9c:	0c12      	lsrs	r2, r2, #16
 8006e9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ea2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eac:	45c1      	cmp	r9, r8
 8006eae:	f841 3b04 	str.w	r3, [r1], #4
 8006eb2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006eb6:	d2e6      	bcs.n	8006e86 <quorem+0xa4>
 8006eb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ebc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ec0:	b922      	cbnz	r2, 8006ecc <quorem+0xea>
 8006ec2:	3b04      	subs	r3, #4
 8006ec4:	429d      	cmp	r5, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	d30b      	bcc.n	8006ee2 <quorem+0x100>
 8006eca:	613c      	str	r4, [r7, #16]
 8006ecc:	3601      	adds	r6, #1
 8006ece:	4630      	mov	r0, r6
 8006ed0:	b003      	add	sp, #12
 8006ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	3b04      	subs	r3, #4
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	d1cb      	bne.n	8006e76 <quorem+0x94>
 8006ede:	3c01      	subs	r4, #1
 8006ee0:	e7c6      	b.n	8006e70 <quorem+0x8e>
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	3b04      	subs	r3, #4
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	d1ef      	bne.n	8006eca <quorem+0xe8>
 8006eea:	3c01      	subs	r4, #1
 8006eec:	e7ea      	b.n	8006ec4 <quorem+0xe2>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	e7ee      	b.n	8006ed0 <quorem+0xee>
 8006ef2:	0000      	movs	r0, r0
 8006ef4:	0000      	movs	r0, r0
	...

08006ef8 <_dtoa_r>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	69c7      	ldr	r7, [r0, #28]
 8006efe:	b097      	sub	sp, #92	@ 0x5c
 8006f00:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006f04:	ec55 4b10 	vmov	r4, r5, d0
 8006f08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006f0a:	9107      	str	r1, [sp, #28]
 8006f0c:	4681      	mov	r9, r0
 8006f0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f10:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f12:	b97f      	cbnz	r7, 8006f34 <_dtoa_r+0x3c>
 8006f14:	2010      	movs	r0, #16
 8006f16:	f000 fe09 	bl	8007b2c <malloc>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006f20:	b920      	cbnz	r0, 8006f2c <_dtoa_r+0x34>
 8006f22:	4ba9      	ldr	r3, [pc, #676]	@ (80071c8 <_dtoa_r+0x2d0>)
 8006f24:	21ef      	movs	r1, #239	@ 0xef
 8006f26:	48a9      	ldr	r0, [pc, #676]	@ (80071cc <_dtoa_r+0x2d4>)
 8006f28:	f001 fc5e 	bl	80087e8 <__assert_func>
 8006f2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f30:	6007      	str	r7, [r0, #0]
 8006f32:	60c7      	str	r7, [r0, #12]
 8006f34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f38:	6819      	ldr	r1, [r3, #0]
 8006f3a:	b159      	cbz	r1, 8006f54 <_dtoa_r+0x5c>
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	604a      	str	r2, [r1, #4]
 8006f40:	2301      	movs	r3, #1
 8006f42:	4093      	lsls	r3, r2
 8006f44:	608b      	str	r3, [r1, #8]
 8006f46:	4648      	mov	r0, r9
 8006f48:	f000 fee6 	bl	8007d18 <_Bfree>
 8006f4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	1e2b      	subs	r3, r5, #0
 8006f56:	bfb9      	ittee	lt
 8006f58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f5c:	9305      	strlt	r3, [sp, #20]
 8006f5e:	2300      	movge	r3, #0
 8006f60:	6033      	strge	r3, [r6, #0]
 8006f62:	9f05      	ldr	r7, [sp, #20]
 8006f64:	4b9a      	ldr	r3, [pc, #616]	@ (80071d0 <_dtoa_r+0x2d8>)
 8006f66:	bfbc      	itt	lt
 8006f68:	2201      	movlt	r2, #1
 8006f6a:	6032      	strlt	r2, [r6, #0]
 8006f6c:	43bb      	bics	r3, r7
 8006f6e:	d112      	bne.n	8006f96 <_dtoa_r+0x9e>
 8006f70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f7c:	4323      	orrs	r3, r4
 8006f7e:	f000 855a 	beq.w	8007a36 <_dtoa_r+0xb3e>
 8006f82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80071e4 <_dtoa_r+0x2ec>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 855c 	beq.w	8007a46 <_dtoa_r+0xb4e>
 8006f8e:	f10a 0303 	add.w	r3, sl, #3
 8006f92:	f000 bd56 	b.w	8007a42 <_dtoa_r+0xb4a>
 8006f96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	ec51 0b17 	vmov	r0, r1, d7
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006fa6:	f7f9 fdaf 	bl	8000b08 <__aeabi_dcmpeq>
 8006faa:	4680      	mov	r8, r0
 8006fac:	b158      	cbz	r0, 8006fc6 <_dtoa_r+0xce>
 8006fae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fb6:	b113      	cbz	r3, 8006fbe <_dtoa_r+0xc6>
 8006fb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006fba:	4b86      	ldr	r3, [pc, #536]	@ (80071d4 <_dtoa_r+0x2dc>)
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80071e8 <_dtoa_r+0x2f0>
 8006fc2:	f000 bd40 	b.w	8007a46 <_dtoa_r+0xb4e>
 8006fc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006fca:	aa14      	add	r2, sp, #80	@ 0x50
 8006fcc:	a915      	add	r1, sp, #84	@ 0x54
 8006fce:	4648      	mov	r0, r9
 8006fd0:	f001 f984 	bl	80082dc <__d2b>
 8006fd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006fd8:	9002      	str	r0, [sp, #8]
 8006fda:	2e00      	cmp	r6, #0
 8006fdc:	d078      	beq.n	80070d0 <_dtoa_r+0x1d8>
 8006fde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fe0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ff0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ff4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	4b76      	ldr	r3, [pc, #472]	@ (80071d8 <_dtoa_r+0x2e0>)
 8006ffe:	f7f9 f963 	bl	80002c8 <__aeabi_dsub>
 8007002:	a36b      	add	r3, pc, #428	@ (adr r3, 80071b0 <_dtoa_r+0x2b8>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f7f9 fb16 	bl	8000638 <__aeabi_dmul>
 800700c:	a36a      	add	r3, pc, #424	@ (adr r3, 80071b8 <_dtoa_r+0x2c0>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	f7f9 f95b 	bl	80002cc <__adddf3>
 8007016:	4604      	mov	r4, r0
 8007018:	4630      	mov	r0, r6
 800701a:	460d      	mov	r5, r1
 800701c:	f7f9 faa2 	bl	8000564 <__aeabi_i2d>
 8007020:	a367      	add	r3, pc, #412	@ (adr r3, 80071c0 <_dtoa_r+0x2c8>)
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f7f9 fb07 	bl	8000638 <__aeabi_dmul>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4620      	mov	r0, r4
 8007030:	4629      	mov	r1, r5
 8007032:	f7f9 f94b 	bl	80002cc <__adddf3>
 8007036:	4604      	mov	r4, r0
 8007038:	460d      	mov	r5, r1
 800703a:	f7f9 fdad 	bl	8000b98 <__aeabi_d2iz>
 800703e:	2200      	movs	r2, #0
 8007040:	4607      	mov	r7, r0
 8007042:	2300      	movs	r3, #0
 8007044:	4620      	mov	r0, r4
 8007046:	4629      	mov	r1, r5
 8007048:	f7f9 fd68 	bl	8000b1c <__aeabi_dcmplt>
 800704c:	b140      	cbz	r0, 8007060 <_dtoa_r+0x168>
 800704e:	4638      	mov	r0, r7
 8007050:	f7f9 fa88 	bl	8000564 <__aeabi_i2d>
 8007054:	4622      	mov	r2, r4
 8007056:	462b      	mov	r3, r5
 8007058:	f7f9 fd56 	bl	8000b08 <__aeabi_dcmpeq>
 800705c:	b900      	cbnz	r0, 8007060 <_dtoa_r+0x168>
 800705e:	3f01      	subs	r7, #1
 8007060:	2f16      	cmp	r7, #22
 8007062:	d852      	bhi.n	800710a <_dtoa_r+0x212>
 8007064:	4b5d      	ldr	r3, [pc, #372]	@ (80071dc <_dtoa_r+0x2e4>)
 8007066:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007072:	f7f9 fd53 	bl	8000b1c <__aeabi_dcmplt>
 8007076:	2800      	cmp	r0, #0
 8007078:	d049      	beq.n	800710e <_dtoa_r+0x216>
 800707a:	3f01      	subs	r7, #1
 800707c:	2300      	movs	r3, #0
 800707e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007080:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007082:	1b9b      	subs	r3, r3, r6
 8007084:	1e5a      	subs	r2, r3, #1
 8007086:	bf45      	ittet	mi
 8007088:	f1c3 0301 	rsbmi	r3, r3, #1
 800708c:	9300      	strmi	r3, [sp, #0]
 800708e:	2300      	movpl	r3, #0
 8007090:	2300      	movmi	r3, #0
 8007092:	9206      	str	r2, [sp, #24]
 8007094:	bf54      	ite	pl
 8007096:	9300      	strpl	r3, [sp, #0]
 8007098:	9306      	strmi	r3, [sp, #24]
 800709a:	2f00      	cmp	r7, #0
 800709c:	db39      	blt.n	8007112 <_dtoa_r+0x21a>
 800709e:	9b06      	ldr	r3, [sp, #24]
 80070a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80070a2:	443b      	add	r3, r7
 80070a4:	9306      	str	r3, [sp, #24]
 80070a6:	2300      	movs	r3, #0
 80070a8:	9308      	str	r3, [sp, #32]
 80070aa:	9b07      	ldr	r3, [sp, #28]
 80070ac:	2b09      	cmp	r3, #9
 80070ae:	d863      	bhi.n	8007178 <_dtoa_r+0x280>
 80070b0:	2b05      	cmp	r3, #5
 80070b2:	bfc4      	itt	gt
 80070b4:	3b04      	subgt	r3, #4
 80070b6:	9307      	strgt	r3, [sp, #28]
 80070b8:	9b07      	ldr	r3, [sp, #28]
 80070ba:	f1a3 0302 	sub.w	r3, r3, #2
 80070be:	bfcc      	ite	gt
 80070c0:	2400      	movgt	r4, #0
 80070c2:	2401      	movle	r4, #1
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d863      	bhi.n	8007190 <_dtoa_r+0x298>
 80070c8:	e8df f003 	tbb	[pc, r3]
 80070cc:	2b375452 	.word	0x2b375452
 80070d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80070d4:	441e      	add	r6, r3
 80070d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80070da:	2b20      	cmp	r3, #32
 80070dc:	bfc1      	itttt	gt
 80070de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80070e2:	409f      	lslgt	r7, r3
 80070e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80070e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80070ec:	bfd6      	itet	le
 80070ee:	f1c3 0320 	rsble	r3, r3, #32
 80070f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80070f6:	fa04 f003 	lslle.w	r0, r4, r3
 80070fa:	f7f9 fa23 	bl	8000544 <__aeabi_ui2d>
 80070fe:	2201      	movs	r2, #1
 8007100:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007104:	3e01      	subs	r6, #1
 8007106:	9212      	str	r2, [sp, #72]	@ 0x48
 8007108:	e776      	b.n	8006ff8 <_dtoa_r+0x100>
 800710a:	2301      	movs	r3, #1
 800710c:	e7b7      	b.n	800707e <_dtoa_r+0x186>
 800710e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007110:	e7b6      	b.n	8007080 <_dtoa_r+0x188>
 8007112:	9b00      	ldr	r3, [sp, #0]
 8007114:	1bdb      	subs	r3, r3, r7
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	427b      	negs	r3, r7
 800711a:	9308      	str	r3, [sp, #32]
 800711c:	2300      	movs	r3, #0
 800711e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007120:	e7c3      	b.n	80070aa <_dtoa_r+0x1b2>
 8007122:	2301      	movs	r3, #1
 8007124:	9309      	str	r3, [sp, #36]	@ 0x24
 8007126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007128:	eb07 0b03 	add.w	fp, r7, r3
 800712c:	f10b 0301 	add.w	r3, fp, #1
 8007130:	2b01      	cmp	r3, #1
 8007132:	9303      	str	r3, [sp, #12]
 8007134:	bfb8      	it	lt
 8007136:	2301      	movlt	r3, #1
 8007138:	e006      	b.n	8007148 <_dtoa_r+0x250>
 800713a:	2301      	movs	r3, #1
 800713c:	9309      	str	r3, [sp, #36]	@ 0x24
 800713e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007140:	2b00      	cmp	r3, #0
 8007142:	dd28      	ble.n	8007196 <_dtoa_r+0x29e>
 8007144:	469b      	mov	fp, r3
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800714c:	2100      	movs	r1, #0
 800714e:	2204      	movs	r2, #4
 8007150:	f102 0514 	add.w	r5, r2, #20
 8007154:	429d      	cmp	r5, r3
 8007156:	d926      	bls.n	80071a6 <_dtoa_r+0x2ae>
 8007158:	6041      	str	r1, [r0, #4]
 800715a:	4648      	mov	r0, r9
 800715c:	f000 fd9c 	bl	8007c98 <_Balloc>
 8007160:	4682      	mov	sl, r0
 8007162:	2800      	cmp	r0, #0
 8007164:	d142      	bne.n	80071ec <_dtoa_r+0x2f4>
 8007166:	4b1e      	ldr	r3, [pc, #120]	@ (80071e0 <_dtoa_r+0x2e8>)
 8007168:	4602      	mov	r2, r0
 800716a:	f240 11af 	movw	r1, #431	@ 0x1af
 800716e:	e6da      	b.n	8006f26 <_dtoa_r+0x2e>
 8007170:	2300      	movs	r3, #0
 8007172:	e7e3      	b.n	800713c <_dtoa_r+0x244>
 8007174:	2300      	movs	r3, #0
 8007176:	e7d5      	b.n	8007124 <_dtoa_r+0x22c>
 8007178:	2401      	movs	r4, #1
 800717a:	2300      	movs	r3, #0
 800717c:	9307      	str	r3, [sp, #28]
 800717e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007180:	f04f 3bff 	mov.w	fp, #4294967295
 8007184:	2200      	movs	r2, #0
 8007186:	f8cd b00c 	str.w	fp, [sp, #12]
 800718a:	2312      	movs	r3, #18
 800718c:	920c      	str	r2, [sp, #48]	@ 0x30
 800718e:	e7db      	b.n	8007148 <_dtoa_r+0x250>
 8007190:	2301      	movs	r3, #1
 8007192:	9309      	str	r3, [sp, #36]	@ 0x24
 8007194:	e7f4      	b.n	8007180 <_dtoa_r+0x288>
 8007196:	f04f 0b01 	mov.w	fp, #1
 800719a:	f8cd b00c 	str.w	fp, [sp, #12]
 800719e:	465b      	mov	r3, fp
 80071a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80071a4:	e7d0      	b.n	8007148 <_dtoa_r+0x250>
 80071a6:	3101      	adds	r1, #1
 80071a8:	0052      	lsls	r2, r2, #1
 80071aa:	e7d1      	b.n	8007150 <_dtoa_r+0x258>
 80071ac:	f3af 8000 	nop.w
 80071b0:	636f4361 	.word	0x636f4361
 80071b4:	3fd287a7 	.word	0x3fd287a7
 80071b8:	8b60c8b3 	.word	0x8b60c8b3
 80071bc:	3fc68a28 	.word	0x3fc68a28
 80071c0:	509f79fb 	.word	0x509f79fb
 80071c4:	3fd34413 	.word	0x3fd34413
 80071c8:	080092cd 	.word	0x080092cd
 80071cc:	080092e4 	.word	0x080092e4
 80071d0:	7ff00000 	.word	0x7ff00000
 80071d4:	0800929d 	.word	0x0800929d
 80071d8:	3ff80000 	.word	0x3ff80000
 80071dc:	08009438 	.word	0x08009438
 80071e0:	0800933c 	.word	0x0800933c
 80071e4:	080092c9 	.word	0x080092c9
 80071e8:	0800929c 	.word	0x0800929c
 80071ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071f0:	6018      	str	r0, [r3, #0]
 80071f2:	9b03      	ldr	r3, [sp, #12]
 80071f4:	2b0e      	cmp	r3, #14
 80071f6:	f200 80a1 	bhi.w	800733c <_dtoa_r+0x444>
 80071fa:	2c00      	cmp	r4, #0
 80071fc:	f000 809e 	beq.w	800733c <_dtoa_r+0x444>
 8007200:	2f00      	cmp	r7, #0
 8007202:	dd33      	ble.n	800726c <_dtoa_r+0x374>
 8007204:	4b9c      	ldr	r3, [pc, #624]	@ (8007478 <_dtoa_r+0x580>)
 8007206:	f007 020f 	and.w	r2, r7, #15
 800720a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800720e:	ed93 7b00 	vldr	d7, [r3]
 8007212:	05f8      	lsls	r0, r7, #23
 8007214:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007218:	ea4f 1427 	mov.w	r4, r7, asr #4
 800721c:	d516      	bpl.n	800724c <_dtoa_r+0x354>
 800721e:	4b97      	ldr	r3, [pc, #604]	@ (800747c <_dtoa_r+0x584>)
 8007220:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007224:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007228:	f7f9 fb30 	bl	800088c <__aeabi_ddiv>
 800722c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007230:	f004 040f 	and.w	r4, r4, #15
 8007234:	2603      	movs	r6, #3
 8007236:	4d91      	ldr	r5, [pc, #580]	@ (800747c <_dtoa_r+0x584>)
 8007238:	b954      	cbnz	r4, 8007250 <_dtoa_r+0x358>
 800723a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800723e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007242:	f7f9 fb23 	bl	800088c <__aeabi_ddiv>
 8007246:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800724a:	e028      	b.n	800729e <_dtoa_r+0x3a6>
 800724c:	2602      	movs	r6, #2
 800724e:	e7f2      	b.n	8007236 <_dtoa_r+0x33e>
 8007250:	07e1      	lsls	r1, r4, #31
 8007252:	d508      	bpl.n	8007266 <_dtoa_r+0x36e>
 8007254:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007258:	e9d5 2300 	ldrd	r2, r3, [r5]
 800725c:	f7f9 f9ec 	bl	8000638 <__aeabi_dmul>
 8007260:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007264:	3601      	adds	r6, #1
 8007266:	1064      	asrs	r4, r4, #1
 8007268:	3508      	adds	r5, #8
 800726a:	e7e5      	b.n	8007238 <_dtoa_r+0x340>
 800726c:	f000 80af 	beq.w	80073ce <_dtoa_r+0x4d6>
 8007270:	427c      	negs	r4, r7
 8007272:	4b81      	ldr	r3, [pc, #516]	@ (8007478 <_dtoa_r+0x580>)
 8007274:	4d81      	ldr	r5, [pc, #516]	@ (800747c <_dtoa_r+0x584>)
 8007276:	f004 020f 	and.w	r2, r4, #15
 800727a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007286:	f7f9 f9d7 	bl	8000638 <__aeabi_dmul>
 800728a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800728e:	1124      	asrs	r4, r4, #4
 8007290:	2300      	movs	r3, #0
 8007292:	2602      	movs	r6, #2
 8007294:	2c00      	cmp	r4, #0
 8007296:	f040 808f 	bne.w	80073b8 <_dtoa_r+0x4c0>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1d3      	bne.n	8007246 <_dtoa_r+0x34e>
 800729e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8094 	beq.w	80073d2 <_dtoa_r+0x4da>
 80072aa:	4b75      	ldr	r3, [pc, #468]	@ (8007480 <_dtoa_r+0x588>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	4620      	mov	r0, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	f7f9 fc33 	bl	8000b1c <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f000 808b 	beq.w	80073d2 <_dtoa_r+0x4da>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8087 	beq.w	80073d2 <_dtoa_r+0x4da>
 80072c4:	f1bb 0f00 	cmp.w	fp, #0
 80072c8:	dd34      	ble.n	8007334 <_dtoa_r+0x43c>
 80072ca:	4620      	mov	r0, r4
 80072cc:	4b6d      	ldr	r3, [pc, #436]	@ (8007484 <_dtoa_r+0x58c>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 f9b1 	bl	8000638 <__aeabi_dmul>
 80072d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072da:	f107 38ff 	add.w	r8, r7, #4294967295
 80072de:	3601      	adds	r6, #1
 80072e0:	465c      	mov	r4, fp
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7f9 f93e 	bl	8000564 <__aeabi_i2d>
 80072e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ec:	f7f9 f9a4 	bl	8000638 <__aeabi_dmul>
 80072f0:	4b65      	ldr	r3, [pc, #404]	@ (8007488 <_dtoa_r+0x590>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	f7f8 ffea 	bl	80002cc <__adddf3>
 80072f8:	4605      	mov	r5, r0
 80072fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80072fe:	2c00      	cmp	r4, #0
 8007300:	d16a      	bne.n	80073d8 <_dtoa_r+0x4e0>
 8007302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007306:	4b61      	ldr	r3, [pc, #388]	@ (800748c <_dtoa_r+0x594>)
 8007308:	2200      	movs	r2, #0
 800730a:	f7f8 ffdd 	bl	80002c8 <__aeabi_dsub>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007316:	462a      	mov	r2, r5
 8007318:	4633      	mov	r3, r6
 800731a:	f7f9 fc1d 	bl	8000b58 <__aeabi_dcmpgt>
 800731e:	2800      	cmp	r0, #0
 8007320:	f040 8298 	bne.w	8007854 <_dtoa_r+0x95c>
 8007324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007328:	462a      	mov	r2, r5
 800732a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800732e:	f7f9 fbf5 	bl	8000b1c <__aeabi_dcmplt>
 8007332:	bb38      	cbnz	r0, 8007384 <_dtoa_r+0x48c>
 8007334:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007338:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800733c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800733e:	2b00      	cmp	r3, #0
 8007340:	f2c0 8157 	blt.w	80075f2 <_dtoa_r+0x6fa>
 8007344:	2f0e      	cmp	r7, #14
 8007346:	f300 8154 	bgt.w	80075f2 <_dtoa_r+0x6fa>
 800734a:	4b4b      	ldr	r3, [pc, #300]	@ (8007478 <_dtoa_r+0x580>)
 800734c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007350:	ed93 7b00 	vldr	d7, [r3]
 8007354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007356:	2b00      	cmp	r3, #0
 8007358:	ed8d 7b00 	vstr	d7, [sp]
 800735c:	f280 80e5 	bge.w	800752a <_dtoa_r+0x632>
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f300 80e1 	bgt.w	800752a <_dtoa_r+0x632>
 8007368:	d10c      	bne.n	8007384 <_dtoa_r+0x48c>
 800736a:	4b48      	ldr	r3, [pc, #288]	@ (800748c <_dtoa_r+0x594>)
 800736c:	2200      	movs	r2, #0
 800736e:	ec51 0b17 	vmov	r0, r1, d7
 8007372:	f7f9 f961 	bl	8000638 <__aeabi_dmul>
 8007376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800737a:	f7f9 fbe3 	bl	8000b44 <__aeabi_dcmpge>
 800737e:	2800      	cmp	r0, #0
 8007380:	f000 8266 	beq.w	8007850 <_dtoa_r+0x958>
 8007384:	2400      	movs	r4, #0
 8007386:	4625      	mov	r5, r4
 8007388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800738a:	4656      	mov	r6, sl
 800738c:	ea6f 0803 	mvn.w	r8, r3
 8007390:	2700      	movs	r7, #0
 8007392:	4621      	mov	r1, r4
 8007394:	4648      	mov	r0, r9
 8007396:	f000 fcbf 	bl	8007d18 <_Bfree>
 800739a:	2d00      	cmp	r5, #0
 800739c:	f000 80bd 	beq.w	800751a <_dtoa_r+0x622>
 80073a0:	b12f      	cbz	r7, 80073ae <_dtoa_r+0x4b6>
 80073a2:	42af      	cmp	r7, r5
 80073a4:	d003      	beq.n	80073ae <_dtoa_r+0x4b6>
 80073a6:	4639      	mov	r1, r7
 80073a8:	4648      	mov	r0, r9
 80073aa:	f000 fcb5 	bl	8007d18 <_Bfree>
 80073ae:	4629      	mov	r1, r5
 80073b0:	4648      	mov	r0, r9
 80073b2:	f000 fcb1 	bl	8007d18 <_Bfree>
 80073b6:	e0b0      	b.n	800751a <_dtoa_r+0x622>
 80073b8:	07e2      	lsls	r2, r4, #31
 80073ba:	d505      	bpl.n	80073c8 <_dtoa_r+0x4d0>
 80073bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073c0:	f7f9 f93a 	bl	8000638 <__aeabi_dmul>
 80073c4:	3601      	adds	r6, #1
 80073c6:	2301      	movs	r3, #1
 80073c8:	1064      	asrs	r4, r4, #1
 80073ca:	3508      	adds	r5, #8
 80073cc:	e762      	b.n	8007294 <_dtoa_r+0x39c>
 80073ce:	2602      	movs	r6, #2
 80073d0:	e765      	b.n	800729e <_dtoa_r+0x3a6>
 80073d2:	9c03      	ldr	r4, [sp, #12]
 80073d4:	46b8      	mov	r8, r7
 80073d6:	e784      	b.n	80072e2 <_dtoa_r+0x3ea>
 80073d8:	4b27      	ldr	r3, [pc, #156]	@ (8007478 <_dtoa_r+0x580>)
 80073da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073e4:	4454      	add	r4, sl
 80073e6:	2900      	cmp	r1, #0
 80073e8:	d054      	beq.n	8007494 <_dtoa_r+0x59c>
 80073ea:	4929      	ldr	r1, [pc, #164]	@ (8007490 <_dtoa_r+0x598>)
 80073ec:	2000      	movs	r0, #0
 80073ee:	f7f9 fa4d 	bl	800088c <__aeabi_ddiv>
 80073f2:	4633      	mov	r3, r6
 80073f4:	462a      	mov	r2, r5
 80073f6:	f7f8 ff67 	bl	80002c8 <__aeabi_dsub>
 80073fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073fe:	4656      	mov	r6, sl
 8007400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007404:	f7f9 fbc8 	bl	8000b98 <__aeabi_d2iz>
 8007408:	4605      	mov	r5, r0
 800740a:	f7f9 f8ab 	bl	8000564 <__aeabi_i2d>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007416:	f7f8 ff57 	bl	80002c8 <__aeabi_dsub>
 800741a:	3530      	adds	r5, #48	@ 0x30
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007424:	f806 5b01 	strb.w	r5, [r6], #1
 8007428:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800742c:	f7f9 fb76 	bl	8000b1c <__aeabi_dcmplt>
 8007430:	2800      	cmp	r0, #0
 8007432:	d172      	bne.n	800751a <_dtoa_r+0x622>
 8007434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007438:	4911      	ldr	r1, [pc, #68]	@ (8007480 <_dtoa_r+0x588>)
 800743a:	2000      	movs	r0, #0
 800743c:	f7f8 ff44 	bl	80002c8 <__aeabi_dsub>
 8007440:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007444:	f7f9 fb6a 	bl	8000b1c <__aeabi_dcmplt>
 8007448:	2800      	cmp	r0, #0
 800744a:	f040 80b4 	bne.w	80075b6 <_dtoa_r+0x6be>
 800744e:	42a6      	cmp	r6, r4
 8007450:	f43f af70 	beq.w	8007334 <_dtoa_r+0x43c>
 8007454:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007458:	4b0a      	ldr	r3, [pc, #40]	@ (8007484 <_dtoa_r+0x58c>)
 800745a:	2200      	movs	r2, #0
 800745c:	f7f9 f8ec 	bl	8000638 <__aeabi_dmul>
 8007460:	4b08      	ldr	r3, [pc, #32]	@ (8007484 <_dtoa_r+0x58c>)
 8007462:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007466:	2200      	movs	r2, #0
 8007468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800746c:	f7f9 f8e4 	bl	8000638 <__aeabi_dmul>
 8007470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007474:	e7c4      	b.n	8007400 <_dtoa_r+0x508>
 8007476:	bf00      	nop
 8007478:	08009438 	.word	0x08009438
 800747c:	08009410 	.word	0x08009410
 8007480:	3ff00000 	.word	0x3ff00000
 8007484:	40240000 	.word	0x40240000
 8007488:	401c0000 	.word	0x401c0000
 800748c:	40140000 	.word	0x40140000
 8007490:	3fe00000 	.word	0x3fe00000
 8007494:	4631      	mov	r1, r6
 8007496:	4628      	mov	r0, r5
 8007498:	f7f9 f8ce 	bl	8000638 <__aeabi_dmul>
 800749c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80074a2:	4656      	mov	r6, sl
 80074a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074a8:	f7f9 fb76 	bl	8000b98 <__aeabi_d2iz>
 80074ac:	4605      	mov	r5, r0
 80074ae:	f7f9 f859 	bl	8000564 <__aeabi_i2d>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ba:	f7f8 ff05 	bl	80002c8 <__aeabi_dsub>
 80074be:	3530      	adds	r5, #48	@ 0x30
 80074c0:	f806 5b01 	strb.w	r5, [r6], #1
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	42a6      	cmp	r6, r4
 80074ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	d124      	bne.n	800751e <_dtoa_r+0x626>
 80074d4:	4baf      	ldr	r3, [pc, #700]	@ (8007794 <_dtoa_r+0x89c>)
 80074d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80074da:	f7f8 fef7 	bl	80002cc <__adddf3>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074e6:	f7f9 fb37 	bl	8000b58 <__aeabi_dcmpgt>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d163      	bne.n	80075b6 <_dtoa_r+0x6be>
 80074ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80074f2:	49a8      	ldr	r1, [pc, #672]	@ (8007794 <_dtoa_r+0x89c>)
 80074f4:	2000      	movs	r0, #0
 80074f6:	f7f8 fee7 	bl	80002c8 <__aeabi_dsub>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007502:	f7f9 fb0b 	bl	8000b1c <__aeabi_dcmplt>
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f af14 	beq.w	8007334 <_dtoa_r+0x43c>
 800750c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800750e:	1e73      	subs	r3, r6, #1
 8007510:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007512:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007516:	2b30      	cmp	r3, #48	@ 0x30
 8007518:	d0f8      	beq.n	800750c <_dtoa_r+0x614>
 800751a:	4647      	mov	r7, r8
 800751c:	e03b      	b.n	8007596 <_dtoa_r+0x69e>
 800751e:	4b9e      	ldr	r3, [pc, #632]	@ (8007798 <_dtoa_r+0x8a0>)
 8007520:	f7f9 f88a 	bl	8000638 <__aeabi_dmul>
 8007524:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007528:	e7bc      	b.n	80074a4 <_dtoa_r+0x5ac>
 800752a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800752e:	4656      	mov	r6, sl
 8007530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007534:	4620      	mov	r0, r4
 8007536:	4629      	mov	r1, r5
 8007538:	f7f9 f9a8 	bl	800088c <__aeabi_ddiv>
 800753c:	f7f9 fb2c 	bl	8000b98 <__aeabi_d2iz>
 8007540:	4680      	mov	r8, r0
 8007542:	f7f9 f80f 	bl	8000564 <__aeabi_i2d>
 8007546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800754a:	f7f9 f875 	bl	8000638 <__aeabi_dmul>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4620      	mov	r0, r4
 8007554:	4629      	mov	r1, r5
 8007556:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800755a:	f7f8 feb5 	bl	80002c8 <__aeabi_dsub>
 800755e:	f806 4b01 	strb.w	r4, [r6], #1
 8007562:	9d03      	ldr	r5, [sp, #12]
 8007564:	eba6 040a 	sub.w	r4, r6, sl
 8007568:	42a5      	cmp	r5, r4
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	d133      	bne.n	80075d8 <_dtoa_r+0x6e0>
 8007570:	f7f8 feac 	bl	80002cc <__adddf3>
 8007574:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007578:	4604      	mov	r4, r0
 800757a:	460d      	mov	r5, r1
 800757c:	f7f9 faec 	bl	8000b58 <__aeabi_dcmpgt>
 8007580:	b9c0      	cbnz	r0, 80075b4 <_dtoa_r+0x6bc>
 8007582:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007586:	4620      	mov	r0, r4
 8007588:	4629      	mov	r1, r5
 800758a:	f7f9 fabd 	bl	8000b08 <__aeabi_dcmpeq>
 800758e:	b110      	cbz	r0, 8007596 <_dtoa_r+0x69e>
 8007590:	f018 0f01 	tst.w	r8, #1
 8007594:	d10e      	bne.n	80075b4 <_dtoa_r+0x6bc>
 8007596:	9902      	ldr	r1, [sp, #8]
 8007598:	4648      	mov	r0, r9
 800759a:	f000 fbbd 	bl	8007d18 <_Bfree>
 800759e:	2300      	movs	r3, #0
 80075a0:	7033      	strb	r3, [r6, #0]
 80075a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80075a4:	3701      	adds	r7, #1
 80075a6:	601f      	str	r7, [r3, #0]
 80075a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 824b 	beq.w	8007a46 <_dtoa_r+0xb4e>
 80075b0:	601e      	str	r6, [r3, #0]
 80075b2:	e248      	b.n	8007a46 <_dtoa_r+0xb4e>
 80075b4:	46b8      	mov	r8, r7
 80075b6:	4633      	mov	r3, r6
 80075b8:	461e      	mov	r6, r3
 80075ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075be:	2a39      	cmp	r2, #57	@ 0x39
 80075c0:	d106      	bne.n	80075d0 <_dtoa_r+0x6d8>
 80075c2:	459a      	cmp	sl, r3
 80075c4:	d1f8      	bne.n	80075b8 <_dtoa_r+0x6c0>
 80075c6:	2230      	movs	r2, #48	@ 0x30
 80075c8:	f108 0801 	add.w	r8, r8, #1
 80075cc:	f88a 2000 	strb.w	r2, [sl]
 80075d0:	781a      	ldrb	r2, [r3, #0]
 80075d2:	3201      	adds	r2, #1
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	e7a0      	b.n	800751a <_dtoa_r+0x622>
 80075d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007798 <_dtoa_r+0x8a0>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f9 f82c 	bl	8000638 <__aeabi_dmul>
 80075e0:	2200      	movs	r2, #0
 80075e2:	2300      	movs	r3, #0
 80075e4:	4604      	mov	r4, r0
 80075e6:	460d      	mov	r5, r1
 80075e8:	f7f9 fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d09f      	beq.n	8007530 <_dtoa_r+0x638>
 80075f0:	e7d1      	b.n	8007596 <_dtoa_r+0x69e>
 80075f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075f4:	2a00      	cmp	r2, #0
 80075f6:	f000 80ea 	beq.w	80077ce <_dtoa_r+0x8d6>
 80075fa:	9a07      	ldr	r2, [sp, #28]
 80075fc:	2a01      	cmp	r2, #1
 80075fe:	f300 80cd 	bgt.w	800779c <_dtoa_r+0x8a4>
 8007602:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007604:	2a00      	cmp	r2, #0
 8007606:	f000 80c1 	beq.w	800778c <_dtoa_r+0x894>
 800760a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800760e:	9c08      	ldr	r4, [sp, #32]
 8007610:	9e00      	ldr	r6, [sp, #0]
 8007612:	9a00      	ldr	r2, [sp, #0]
 8007614:	441a      	add	r2, r3
 8007616:	9200      	str	r2, [sp, #0]
 8007618:	9a06      	ldr	r2, [sp, #24]
 800761a:	2101      	movs	r1, #1
 800761c:	441a      	add	r2, r3
 800761e:	4648      	mov	r0, r9
 8007620:	9206      	str	r2, [sp, #24]
 8007622:	f000 fc2d 	bl	8007e80 <__i2b>
 8007626:	4605      	mov	r5, r0
 8007628:	b166      	cbz	r6, 8007644 <_dtoa_r+0x74c>
 800762a:	9b06      	ldr	r3, [sp, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	dd09      	ble.n	8007644 <_dtoa_r+0x74c>
 8007630:	42b3      	cmp	r3, r6
 8007632:	9a00      	ldr	r2, [sp, #0]
 8007634:	bfa8      	it	ge
 8007636:	4633      	movge	r3, r6
 8007638:	1ad2      	subs	r2, r2, r3
 800763a:	9200      	str	r2, [sp, #0]
 800763c:	9a06      	ldr	r2, [sp, #24]
 800763e:	1af6      	subs	r6, r6, r3
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	9306      	str	r3, [sp, #24]
 8007644:	9b08      	ldr	r3, [sp, #32]
 8007646:	b30b      	cbz	r3, 800768c <_dtoa_r+0x794>
 8007648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 80c6 	beq.w	80077dc <_dtoa_r+0x8e4>
 8007650:	2c00      	cmp	r4, #0
 8007652:	f000 80c0 	beq.w	80077d6 <_dtoa_r+0x8de>
 8007656:	4629      	mov	r1, r5
 8007658:	4622      	mov	r2, r4
 800765a:	4648      	mov	r0, r9
 800765c:	f000 fcc8 	bl	8007ff0 <__pow5mult>
 8007660:	9a02      	ldr	r2, [sp, #8]
 8007662:	4601      	mov	r1, r0
 8007664:	4605      	mov	r5, r0
 8007666:	4648      	mov	r0, r9
 8007668:	f000 fc20 	bl	8007eac <__multiply>
 800766c:	9902      	ldr	r1, [sp, #8]
 800766e:	4680      	mov	r8, r0
 8007670:	4648      	mov	r0, r9
 8007672:	f000 fb51 	bl	8007d18 <_Bfree>
 8007676:	9b08      	ldr	r3, [sp, #32]
 8007678:	1b1b      	subs	r3, r3, r4
 800767a:	9308      	str	r3, [sp, #32]
 800767c:	f000 80b1 	beq.w	80077e2 <_dtoa_r+0x8ea>
 8007680:	9a08      	ldr	r2, [sp, #32]
 8007682:	4641      	mov	r1, r8
 8007684:	4648      	mov	r0, r9
 8007686:	f000 fcb3 	bl	8007ff0 <__pow5mult>
 800768a:	9002      	str	r0, [sp, #8]
 800768c:	2101      	movs	r1, #1
 800768e:	4648      	mov	r0, r9
 8007690:	f000 fbf6 	bl	8007e80 <__i2b>
 8007694:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007696:	4604      	mov	r4, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 81d8 	beq.w	8007a4e <_dtoa_r+0xb56>
 800769e:	461a      	mov	r2, r3
 80076a0:	4601      	mov	r1, r0
 80076a2:	4648      	mov	r0, r9
 80076a4:	f000 fca4 	bl	8007ff0 <__pow5mult>
 80076a8:	9b07      	ldr	r3, [sp, #28]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	4604      	mov	r4, r0
 80076ae:	f300 809f 	bgt.w	80077f0 <_dtoa_r+0x8f8>
 80076b2:	9b04      	ldr	r3, [sp, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f040 8097 	bne.w	80077e8 <_dtoa_r+0x8f0>
 80076ba:	9b05      	ldr	r3, [sp, #20]
 80076bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 8093 	bne.w	80077ec <_dtoa_r+0x8f4>
 80076c6:	9b05      	ldr	r3, [sp, #20]
 80076c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076cc:	0d1b      	lsrs	r3, r3, #20
 80076ce:	051b      	lsls	r3, r3, #20
 80076d0:	b133      	cbz	r3, 80076e0 <_dtoa_r+0x7e8>
 80076d2:	9b00      	ldr	r3, [sp, #0]
 80076d4:	3301      	adds	r3, #1
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	9b06      	ldr	r3, [sp, #24]
 80076da:	3301      	adds	r3, #1
 80076dc:	9306      	str	r3, [sp, #24]
 80076de:	2301      	movs	r3, #1
 80076e0:	9308      	str	r3, [sp, #32]
 80076e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 81b8 	beq.w	8007a5a <_dtoa_r+0xb62>
 80076ea:	6923      	ldr	r3, [r4, #16]
 80076ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076f0:	6918      	ldr	r0, [r3, #16]
 80076f2:	f000 fb79 	bl	8007de8 <__hi0bits>
 80076f6:	f1c0 0020 	rsb	r0, r0, #32
 80076fa:	9b06      	ldr	r3, [sp, #24]
 80076fc:	4418      	add	r0, r3
 80076fe:	f010 001f 	ands.w	r0, r0, #31
 8007702:	f000 8082 	beq.w	800780a <_dtoa_r+0x912>
 8007706:	f1c0 0320 	rsb	r3, r0, #32
 800770a:	2b04      	cmp	r3, #4
 800770c:	dd73      	ble.n	80077f6 <_dtoa_r+0x8fe>
 800770e:	9b00      	ldr	r3, [sp, #0]
 8007710:	f1c0 001c 	rsb	r0, r0, #28
 8007714:	4403      	add	r3, r0
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	9b06      	ldr	r3, [sp, #24]
 800771a:	4403      	add	r3, r0
 800771c:	4406      	add	r6, r0
 800771e:	9306      	str	r3, [sp, #24]
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	dd05      	ble.n	8007732 <_dtoa_r+0x83a>
 8007726:	9902      	ldr	r1, [sp, #8]
 8007728:	461a      	mov	r2, r3
 800772a:	4648      	mov	r0, r9
 800772c:	f000 fcba 	bl	80080a4 <__lshift>
 8007730:	9002      	str	r0, [sp, #8]
 8007732:	9b06      	ldr	r3, [sp, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	dd05      	ble.n	8007744 <_dtoa_r+0x84c>
 8007738:	4621      	mov	r1, r4
 800773a:	461a      	mov	r2, r3
 800773c:	4648      	mov	r0, r9
 800773e:	f000 fcb1 	bl	80080a4 <__lshift>
 8007742:	4604      	mov	r4, r0
 8007744:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007746:	2b00      	cmp	r3, #0
 8007748:	d061      	beq.n	800780e <_dtoa_r+0x916>
 800774a:	9802      	ldr	r0, [sp, #8]
 800774c:	4621      	mov	r1, r4
 800774e:	f000 fd15 	bl	800817c <__mcmp>
 8007752:	2800      	cmp	r0, #0
 8007754:	da5b      	bge.n	800780e <_dtoa_r+0x916>
 8007756:	2300      	movs	r3, #0
 8007758:	9902      	ldr	r1, [sp, #8]
 800775a:	220a      	movs	r2, #10
 800775c:	4648      	mov	r0, r9
 800775e:	f000 fafd 	bl	8007d5c <__multadd>
 8007762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007764:	9002      	str	r0, [sp, #8]
 8007766:	f107 38ff 	add.w	r8, r7, #4294967295
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8177 	beq.w	8007a5e <_dtoa_r+0xb66>
 8007770:	4629      	mov	r1, r5
 8007772:	2300      	movs	r3, #0
 8007774:	220a      	movs	r2, #10
 8007776:	4648      	mov	r0, r9
 8007778:	f000 faf0 	bl	8007d5c <__multadd>
 800777c:	f1bb 0f00 	cmp.w	fp, #0
 8007780:	4605      	mov	r5, r0
 8007782:	dc6f      	bgt.n	8007864 <_dtoa_r+0x96c>
 8007784:	9b07      	ldr	r3, [sp, #28]
 8007786:	2b02      	cmp	r3, #2
 8007788:	dc49      	bgt.n	800781e <_dtoa_r+0x926>
 800778a:	e06b      	b.n	8007864 <_dtoa_r+0x96c>
 800778c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800778e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007792:	e73c      	b.n	800760e <_dtoa_r+0x716>
 8007794:	3fe00000 	.word	0x3fe00000
 8007798:	40240000 	.word	0x40240000
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	1e5c      	subs	r4, r3, #1
 80077a0:	9b08      	ldr	r3, [sp, #32]
 80077a2:	42a3      	cmp	r3, r4
 80077a4:	db09      	blt.n	80077ba <_dtoa_r+0x8c2>
 80077a6:	1b1c      	subs	r4, r3, r4
 80077a8:	9b03      	ldr	r3, [sp, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f6bf af30 	bge.w	8007610 <_dtoa_r+0x718>
 80077b0:	9b00      	ldr	r3, [sp, #0]
 80077b2:	9a03      	ldr	r2, [sp, #12]
 80077b4:	1a9e      	subs	r6, r3, r2
 80077b6:	2300      	movs	r3, #0
 80077b8:	e72b      	b.n	8007612 <_dtoa_r+0x71a>
 80077ba:	9b08      	ldr	r3, [sp, #32]
 80077bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077be:	9408      	str	r4, [sp, #32]
 80077c0:	1ae3      	subs	r3, r4, r3
 80077c2:	441a      	add	r2, r3
 80077c4:	9e00      	ldr	r6, [sp, #0]
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80077ca:	2400      	movs	r4, #0
 80077cc:	e721      	b.n	8007612 <_dtoa_r+0x71a>
 80077ce:	9c08      	ldr	r4, [sp, #32]
 80077d0:	9e00      	ldr	r6, [sp, #0]
 80077d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80077d4:	e728      	b.n	8007628 <_dtoa_r+0x730>
 80077d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80077da:	e751      	b.n	8007680 <_dtoa_r+0x788>
 80077dc:	9a08      	ldr	r2, [sp, #32]
 80077de:	9902      	ldr	r1, [sp, #8]
 80077e0:	e750      	b.n	8007684 <_dtoa_r+0x78c>
 80077e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80077e6:	e751      	b.n	800768c <_dtoa_r+0x794>
 80077e8:	2300      	movs	r3, #0
 80077ea:	e779      	b.n	80076e0 <_dtoa_r+0x7e8>
 80077ec:	9b04      	ldr	r3, [sp, #16]
 80077ee:	e777      	b.n	80076e0 <_dtoa_r+0x7e8>
 80077f0:	2300      	movs	r3, #0
 80077f2:	9308      	str	r3, [sp, #32]
 80077f4:	e779      	b.n	80076ea <_dtoa_r+0x7f2>
 80077f6:	d093      	beq.n	8007720 <_dtoa_r+0x828>
 80077f8:	9a00      	ldr	r2, [sp, #0]
 80077fa:	331c      	adds	r3, #28
 80077fc:	441a      	add	r2, r3
 80077fe:	9200      	str	r2, [sp, #0]
 8007800:	9a06      	ldr	r2, [sp, #24]
 8007802:	441a      	add	r2, r3
 8007804:	441e      	add	r6, r3
 8007806:	9206      	str	r2, [sp, #24]
 8007808:	e78a      	b.n	8007720 <_dtoa_r+0x828>
 800780a:	4603      	mov	r3, r0
 800780c:	e7f4      	b.n	80077f8 <_dtoa_r+0x900>
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	46b8      	mov	r8, r7
 8007814:	dc20      	bgt.n	8007858 <_dtoa_r+0x960>
 8007816:	469b      	mov	fp, r3
 8007818:	9b07      	ldr	r3, [sp, #28]
 800781a:	2b02      	cmp	r3, #2
 800781c:	dd1e      	ble.n	800785c <_dtoa_r+0x964>
 800781e:	f1bb 0f00 	cmp.w	fp, #0
 8007822:	f47f adb1 	bne.w	8007388 <_dtoa_r+0x490>
 8007826:	4621      	mov	r1, r4
 8007828:	465b      	mov	r3, fp
 800782a:	2205      	movs	r2, #5
 800782c:	4648      	mov	r0, r9
 800782e:	f000 fa95 	bl	8007d5c <__multadd>
 8007832:	4601      	mov	r1, r0
 8007834:	4604      	mov	r4, r0
 8007836:	9802      	ldr	r0, [sp, #8]
 8007838:	f000 fca0 	bl	800817c <__mcmp>
 800783c:	2800      	cmp	r0, #0
 800783e:	f77f ada3 	ble.w	8007388 <_dtoa_r+0x490>
 8007842:	4656      	mov	r6, sl
 8007844:	2331      	movs	r3, #49	@ 0x31
 8007846:	f806 3b01 	strb.w	r3, [r6], #1
 800784a:	f108 0801 	add.w	r8, r8, #1
 800784e:	e59f      	b.n	8007390 <_dtoa_r+0x498>
 8007850:	9c03      	ldr	r4, [sp, #12]
 8007852:	46b8      	mov	r8, r7
 8007854:	4625      	mov	r5, r4
 8007856:	e7f4      	b.n	8007842 <_dtoa_r+0x94a>
 8007858:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800785c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8101 	beq.w	8007a66 <_dtoa_r+0xb6e>
 8007864:	2e00      	cmp	r6, #0
 8007866:	dd05      	ble.n	8007874 <_dtoa_r+0x97c>
 8007868:	4629      	mov	r1, r5
 800786a:	4632      	mov	r2, r6
 800786c:	4648      	mov	r0, r9
 800786e:	f000 fc19 	bl	80080a4 <__lshift>
 8007872:	4605      	mov	r5, r0
 8007874:	9b08      	ldr	r3, [sp, #32]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d05c      	beq.n	8007934 <_dtoa_r+0xa3c>
 800787a:	6869      	ldr	r1, [r5, #4]
 800787c:	4648      	mov	r0, r9
 800787e:	f000 fa0b 	bl	8007c98 <_Balloc>
 8007882:	4606      	mov	r6, r0
 8007884:	b928      	cbnz	r0, 8007892 <_dtoa_r+0x99a>
 8007886:	4b82      	ldr	r3, [pc, #520]	@ (8007a90 <_dtoa_r+0xb98>)
 8007888:	4602      	mov	r2, r0
 800788a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800788e:	f7ff bb4a 	b.w	8006f26 <_dtoa_r+0x2e>
 8007892:	692a      	ldr	r2, [r5, #16]
 8007894:	3202      	adds	r2, #2
 8007896:	0092      	lsls	r2, r2, #2
 8007898:	f105 010c 	add.w	r1, r5, #12
 800789c:	300c      	adds	r0, #12
 800789e:	f7ff fa92 	bl	8006dc6 <memcpy>
 80078a2:	2201      	movs	r2, #1
 80078a4:	4631      	mov	r1, r6
 80078a6:	4648      	mov	r0, r9
 80078a8:	f000 fbfc 	bl	80080a4 <__lshift>
 80078ac:	f10a 0301 	add.w	r3, sl, #1
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	eb0a 030b 	add.w	r3, sl, fp
 80078b6:	9308      	str	r3, [sp, #32]
 80078b8:	9b04      	ldr	r3, [sp, #16]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	462f      	mov	r7, r5
 80078c0:	9306      	str	r3, [sp, #24]
 80078c2:	4605      	mov	r5, r0
 80078c4:	9b00      	ldr	r3, [sp, #0]
 80078c6:	9802      	ldr	r0, [sp, #8]
 80078c8:	4621      	mov	r1, r4
 80078ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80078ce:	f7ff fa88 	bl	8006de2 <quorem>
 80078d2:	4603      	mov	r3, r0
 80078d4:	3330      	adds	r3, #48	@ 0x30
 80078d6:	9003      	str	r0, [sp, #12]
 80078d8:	4639      	mov	r1, r7
 80078da:	9802      	ldr	r0, [sp, #8]
 80078dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078de:	f000 fc4d 	bl	800817c <__mcmp>
 80078e2:	462a      	mov	r2, r5
 80078e4:	9004      	str	r0, [sp, #16]
 80078e6:	4621      	mov	r1, r4
 80078e8:	4648      	mov	r0, r9
 80078ea:	f000 fc63 	bl	80081b4 <__mdiff>
 80078ee:	68c2      	ldr	r2, [r0, #12]
 80078f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f2:	4606      	mov	r6, r0
 80078f4:	bb02      	cbnz	r2, 8007938 <_dtoa_r+0xa40>
 80078f6:	4601      	mov	r1, r0
 80078f8:	9802      	ldr	r0, [sp, #8]
 80078fa:	f000 fc3f 	bl	800817c <__mcmp>
 80078fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007900:	4602      	mov	r2, r0
 8007902:	4631      	mov	r1, r6
 8007904:	4648      	mov	r0, r9
 8007906:	920c      	str	r2, [sp, #48]	@ 0x30
 8007908:	9309      	str	r3, [sp, #36]	@ 0x24
 800790a:	f000 fa05 	bl	8007d18 <_Bfree>
 800790e:	9b07      	ldr	r3, [sp, #28]
 8007910:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007912:	9e00      	ldr	r6, [sp, #0]
 8007914:	ea42 0103 	orr.w	r1, r2, r3
 8007918:	9b06      	ldr	r3, [sp, #24]
 800791a:	4319      	orrs	r1, r3
 800791c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791e:	d10d      	bne.n	800793c <_dtoa_r+0xa44>
 8007920:	2b39      	cmp	r3, #57	@ 0x39
 8007922:	d027      	beq.n	8007974 <_dtoa_r+0xa7c>
 8007924:	9a04      	ldr	r2, [sp, #16]
 8007926:	2a00      	cmp	r2, #0
 8007928:	dd01      	ble.n	800792e <_dtoa_r+0xa36>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	3331      	adds	r3, #49	@ 0x31
 800792e:	f88b 3000 	strb.w	r3, [fp]
 8007932:	e52e      	b.n	8007392 <_dtoa_r+0x49a>
 8007934:	4628      	mov	r0, r5
 8007936:	e7b9      	b.n	80078ac <_dtoa_r+0x9b4>
 8007938:	2201      	movs	r2, #1
 800793a:	e7e2      	b.n	8007902 <_dtoa_r+0xa0a>
 800793c:	9904      	ldr	r1, [sp, #16]
 800793e:	2900      	cmp	r1, #0
 8007940:	db04      	blt.n	800794c <_dtoa_r+0xa54>
 8007942:	9807      	ldr	r0, [sp, #28]
 8007944:	4301      	orrs	r1, r0
 8007946:	9806      	ldr	r0, [sp, #24]
 8007948:	4301      	orrs	r1, r0
 800794a:	d120      	bne.n	800798e <_dtoa_r+0xa96>
 800794c:	2a00      	cmp	r2, #0
 800794e:	ddee      	ble.n	800792e <_dtoa_r+0xa36>
 8007950:	9902      	ldr	r1, [sp, #8]
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	2201      	movs	r2, #1
 8007956:	4648      	mov	r0, r9
 8007958:	f000 fba4 	bl	80080a4 <__lshift>
 800795c:	4621      	mov	r1, r4
 800795e:	9002      	str	r0, [sp, #8]
 8007960:	f000 fc0c 	bl	800817c <__mcmp>
 8007964:	2800      	cmp	r0, #0
 8007966:	9b00      	ldr	r3, [sp, #0]
 8007968:	dc02      	bgt.n	8007970 <_dtoa_r+0xa78>
 800796a:	d1e0      	bne.n	800792e <_dtoa_r+0xa36>
 800796c:	07da      	lsls	r2, r3, #31
 800796e:	d5de      	bpl.n	800792e <_dtoa_r+0xa36>
 8007970:	2b39      	cmp	r3, #57	@ 0x39
 8007972:	d1da      	bne.n	800792a <_dtoa_r+0xa32>
 8007974:	2339      	movs	r3, #57	@ 0x39
 8007976:	f88b 3000 	strb.w	r3, [fp]
 800797a:	4633      	mov	r3, r6
 800797c:	461e      	mov	r6, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007984:	2a39      	cmp	r2, #57	@ 0x39
 8007986:	d04e      	beq.n	8007a26 <_dtoa_r+0xb2e>
 8007988:	3201      	adds	r2, #1
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	e501      	b.n	8007392 <_dtoa_r+0x49a>
 800798e:	2a00      	cmp	r2, #0
 8007990:	dd03      	ble.n	800799a <_dtoa_r+0xaa2>
 8007992:	2b39      	cmp	r3, #57	@ 0x39
 8007994:	d0ee      	beq.n	8007974 <_dtoa_r+0xa7c>
 8007996:	3301      	adds	r3, #1
 8007998:	e7c9      	b.n	800792e <_dtoa_r+0xa36>
 800799a:	9a00      	ldr	r2, [sp, #0]
 800799c:	9908      	ldr	r1, [sp, #32]
 800799e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079a2:	428a      	cmp	r2, r1
 80079a4:	d028      	beq.n	80079f8 <_dtoa_r+0xb00>
 80079a6:	9902      	ldr	r1, [sp, #8]
 80079a8:	2300      	movs	r3, #0
 80079aa:	220a      	movs	r2, #10
 80079ac:	4648      	mov	r0, r9
 80079ae:	f000 f9d5 	bl	8007d5c <__multadd>
 80079b2:	42af      	cmp	r7, r5
 80079b4:	9002      	str	r0, [sp, #8]
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	f04f 020a 	mov.w	r2, #10
 80079be:	4639      	mov	r1, r7
 80079c0:	4648      	mov	r0, r9
 80079c2:	d107      	bne.n	80079d4 <_dtoa_r+0xadc>
 80079c4:	f000 f9ca 	bl	8007d5c <__multadd>
 80079c8:	4607      	mov	r7, r0
 80079ca:	4605      	mov	r5, r0
 80079cc:	9b00      	ldr	r3, [sp, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	e777      	b.n	80078c4 <_dtoa_r+0x9cc>
 80079d4:	f000 f9c2 	bl	8007d5c <__multadd>
 80079d8:	4629      	mov	r1, r5
 80079da:	4607      	mov	r7, r0
 80079dc:	2300      	movs	r3, #0
 80079de:	220a      	movs	r2, #10
 80079e0:	4648      	mov	r0, r9
 80079e2:	f000 f9bb 	bl	8007d5c <__multadd>
 80079e6:	4605      	mov	r5, r0
 80079e8:	e7f0      	b.n	80079cc <_dtoa_r+0xad4>
 80079ea:	f1bb 0f00 	cmp.w	fp, #0
 80079ee:	bfcc      	ite	gt
 80079f0:	465e      	movgt	r6, fp
 80079f2:	2601      	movle	r6, #1
 80079f4:	4456      	add	r6, sl
 80079f6:	2700      	movs	r7, #0
 80079f8:	9902      	ldr	r1, [sp, #8]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	2201      	movs	r2, #1
 80079fe:	4648      	mov	r0, r9
 8007a00:	f000 fb50 	bl	80080a4 <__lshift>
 8007a04:	4621      	mov	r1, r4
 8007a06:	9002      	str	r0, [sp, #8]
 8007a08:	f000 fbb8 	bl	800817c <__mcmp>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	dcb4      	bgt.n	800797a <_dtoa_r+0xa82>
 8007a10:	d102      	bne.n	8007a18 <_dtoa_r+0xb20>
 8007a12:	9b00      	ldr	r3, [sp, #0]
 8007a14:	07db      	lsls	r3, r3, #31
 8007a16:	d4b0      	bmi.n	800797a <_dtoa_r+0xa82>
 8007a18:	4633      	mov	r3, r6
 8007a1a:	461e      	mov	r6, r3
 8007a1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a20:	2a30      	cmp	r2, #48	@ 0x30
 8007a22:	d0fa      	beq.n	8007a1a <_dtoa_r+0xb22>
 8007a24:	e4b5      	b.n	8007392 <_dtoa_r+0x49a>
 8007a26:	459a      	cmp	sl, r3
 8007a28:	d1a8      	bne.n	800797c <_dtoa_r+0xa84>
 8007a2a:	2331      	movs	r3, #49	@ 0x31
 8007a2c:	f108 0801 	add.w	r8, r8, #1
 8007a30:	f88a 3000 	strb.w	r3, [sl]
 8007a34:	e4ad      	b.n	8007392 <_dtoa_r+0x49a>
 8007a36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007a94 <_dtoa_r+0xb9c>
 8007a3c:	b11b      	cbz	r3, 8007a46 <_dtoa_r+0xb4e>
 8007a3e:	f10a 0308 	add.w	r3, sl, #8
 8007a42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	4650      	mov	r0, sl
 8007a48:	b017      	add	sp, #92	@ 0x5c
 8007a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4e:	9b07      	ldr	r3, [sp, #28]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	f77f ae2e 	ble.w	80076b2 <_dtoa_r+0x7ba>
 8007a56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a58:	9308      	str	r3, [sp, #32]
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	e64d      	b.n	80076fa <_dtoa_r+0x802>
 8007a5e:	f1bb 0f00 	cmp.w	fp, #0
 8007a62:	f77f aed9 	ble.w	8007818 <_dtoa_r+0x920>
 8007a66:	4656      	mov	r6, sl
 8007a68:	9802      	ldr	r0, [sp, #8]
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f7ff f9b9 	bl	8006de2 <quorem>
 8007a70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007a74:	f806 3b01 	strb.w	r3, [r6], #1
 8007a78:	eba6 020a 	sub.w	r2, r6, sl
 8007a7c:	4593      	cmp	fp, r2
 8007a7e:	ddb4      	ble.n	80079ea <_dtoa_r+0xaf2>
 8007a80:	9902      	ldr	r1, [sp, #8]
 8007a82:	2300      	movs	r3, #0
 8007a84:	220a      	movs	r2, #10
 8007a86:	4648      	mov	r0, r9
 8007a88:	f000 f968 	bl	8007d5c <__multadd>
 8007a8c:	9002      	str	r0, [sp, #8]
 8007a8e:	e7eb      	b.n	8007a68 <_dtoa_r+0xb70>
 8007a90:	0800933c 	.word	0x0800933c
 8007a94:	080092c0 	.word	0x080092c0

08007a98 <_free_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	d041      	beq.n	8007b24 <_free_r+0x8c>
 8007aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa4:	1f0c      	subs	r4, r1, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bfb8      	it	lt
 8007aaa:	18e4      	addlt	r4, r4, r3
 8007aac:	f000 f8e8 	bl	8007c80 <__malloc_lock>
 8007ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b28 <_free_r+0x90>)
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	b933      	cbnz	r3, 8007ac4 <_free_r+0x2c>
 8007ab6:	6063      	str	r3, [r4, #4]
 8007ab8:	6014      	str	r4, [r2, #0]
 8007aba:	4628      	mov	r0, r5
 8007abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac0:	f000 b8e4 	b.w	8007c8c <__malloc_unlock>
 8007ac4:	42a3      	cmp	r3, r4
 8007ac6:	d908      	bls.n	8007ada <_free_r+0x42>
 8007ac8:	6820      	ldr	r0, [r4, #0]
 8007aca:	1821      	adds	r1, r4, r0
 8007acc:	428b      	cmp	r3, r1
 8007ace:	bf01      	itttt	eq
 8007ad0:	6819      	ldreq	r1, [r3, #0]
 8007ad2:	685b      	ldreq	r3, [r3, #4]
 8007ad4:	1809      	addeq	r1, r1, r0
 8007ad6:	6021      	streq	r1, [r4, #0]
 8007ad8:	e7ed      	b.n	8007ab6 <_free_r+0x1e>
 8007ada:	461a      	mov	r2, r3
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	b10b      	cbz	r3, 8007ae4 <_free_r+0x4c>
 8007ae0:	42a3      	cmp	r3, r4
 8007ae2:	d9fa      	bls.n	8007ada <_free_r+0x42>
 8007ae4:	6811      	ldr	r1, [r2, #0]
 8007ae6:	1850      	adds	r0, r2, r1
 8007ae8:	42a0      	cmp	r0, r4
 8007aea:	d10b      	bne.n	8007b04 <_free_r+0x6c>
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	4401      	add	r1, r0
 8007af0:	1850      	adds	r0, r2, r1
 8007af2:	4283      	cmp	r3, r0
 8007af4:	6011      	str	r1, [r2, #0]
 8007af6:	d1e0      	bne.n	8007aba <_free_r+0x22>
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	6053      	str	r3, [r2, #4]
 8007afe:	4408      	add	r0, r1
 8007b00:	6010      	str	r0, [r2, #0]
 8007b02:	e7da      	b.n	8007aba <_free_r+0x22>
 8007b04:	d902      	bls.n	8007b0c <_free_r+0x74>
 8007b06:	230c      	movs	r3, #12
 8007b08:	602b      	str	r3, [r5, #0]
 8007b0a:	e7d6      	b.n	8007aba <_free_r+0x22>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	1821      	adds	r1, r4, r0
 8007b10:	428b      	cmp	r3, r1
 8007b12:	bf04      	itt	eq
 8007b14:	6819      	ldreq	r1, [r3, #0]
 8007b16:	685b      	ldreq	r3, [r3, #4]
 8007b18:	6063      	str	r3, [r4, #4]
 8007b1a:	bf04      	itt	eq
 8007b1c:	1809      	addeq	r1, r1, r0
 8007b1e:	6021      	streq	r1, [r4, #0]
 8007b20:	6054      	str	r4, [r2, #4]
 8007b22:	e7ca      	b.n	8007aba <_free_r+0x22>
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop
 8007b28:	20000c34 	.word	0x20000c34

08007b2c <malloc>:
 8007b2c:	4b02      	ldr	r3, [pc, #8]	@ (8007b38 <malloc+0xc>)
 8007b2e:	4601      	mov	r1, r0
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f000 b825 	b.w	8007b80 <_malloc_r>
 8007b36:	bf00      	nop
 8007b38:	20000018 	.word	0x20000018

08007b3c <sbrk_aligned>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8007b7c <sbrk_aligned+0x40>)
 8007b40:	460c      	mov	r4, r1
 8007b42:	6831      	ldr	r1, [r6, #0]
 8007b44:	4605      	mov	r5, r0
 8007b46:	b911      	cbnz	r1, 8007b4e <sbrk_aligned+0x12>
 8007b48:	f000 fe3e 	bl	80087c8 <_sbrk_r>
 8007b4c:	6030      	str	r0, [r6, #0]
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4628      	mov	r0, r5
 8007b52:	f000 fe39 	bl	80087c8 <_sbrk_r>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	d103      	bne.n	8007b62 <sbrk_aligned+0x26>
 8007b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8007b5e:	4620      	mov	r0, r4
 8007b60:	bd70      	pop	{r4, r5, r6, pc}
 8007b62:	1cc4      	adds	r4, r0, #3
 8007b64:	f024 0403 	bic.w	r4, r4, #3
 8007b68:	42a0      	cmp	r0, r4
 8007b6a:	d0f8      	beq.n	8007b5e <sbrk_aligned+0x22>
 8007b6c:	1a21      	subs	r1, r4, r0
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 fe2a 	bl	80087c8 <_sbrk_r>
 8007b74:	3001      	adds	r0, #1
 8007b76:	d1f2      	bne.n	8007b5e <sbrk_aligned+0x22>
 8007b78:	e7ef      	b.n	8007b5a <sbrk_aligned+0x1e>
 8007b7a:	bf00      	nop
 8007b7c:	20000c30 	.word	0x20000c30

08007b80 <_malloc_r>:
 8007b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b84:	1ccd      	adds	r5, r1, #3
 8007b86:	f025 0503 	bic.w	r5, r5, #3
 8007b8a:	3508      	adds	r5, #8
 8007b8c:	2d0c      	cmp	r5, #12
 8007b8e:	bf38      	it	cc
 8007b90:	250c      	movcc	r5, #12
 8007b92:	2d00      	cmp	r5, #0
 8007b94:	4606      	mov	r6, r0
 8007b96:	db01      	blt.n	8007b9c <_malloc_r+0x1c>
 8007b98:	42a9      	cmp	r1, r5
 8007b9a:	d904      	bls.n	8007ba6 <_malloc_r+0x26>
 8007b9c:	230c      	movs	r3, #12
 8007b9e:	6033      	str	r3, [r6, #0]
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c7c <_malloc_r+0xfc>
 8007baa:	f000 f869 	bl	8007c80 <__malloc_lock>
 8007bae:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb2:	461c      	mov	r4, r3
 8007bb4:	bb44      	cbnz	r4, 8007c08 <_malloc_r+0x88>
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	4630      	mov	r0, r6
 8007bba:	f7ff ffbf 	bl	8007b3c <sbrk_aligned>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	d158      	bne.n	8007c76 <_malloc_r+0xf6>
 8007bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8007bc8:	4627      	mov	r7, r4
 8007bca:	2f00      	cmp	r7, #0
 8007bcc:	d143      	bne.n	8007c56 <_malloc_r+0xd6>
 8007bce:	2c00      	cmp	r4, #0
 8007bd0:	d04b      	beq.n	8007c6a <_malloc_r+0xea>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	eb04 0903 	add.w	r9, r4, r3
 8007bdc:	f000 fdf4 	bl	80087c8 <_sbrk_r>
 8007be0:	4581      	cmp	r9, r0
 8007be2:	d142      	bne.n	8007c6a <_malloc_r+0xea>
 8007be4:	6821      	ldr	r1, [r4, #0]
 8007be6:	1a6d      	subs	r5, r5, r1
 8007be8:	4629      	mov	r1, r5
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7ff ffa6 	bl	8007b3c <sbrk_aligned>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d03a      	beq.n	8007c6a <_malloc_r+0xea>
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	442b      	add	r3, r5
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	bb62      	cbnz	r2, 8007c5c <_malloc_r+0xdc>
 8007c02:	f8c8 7000 	str.w	r7, [r8]
 8007c06:	e00f      	b.n	8007c28 <_malloc_r+0xa8>
 8007c08:	6822      	ldr	r2, [r4, #0]
 8007c0a:	1b52      	subs	r2, r2, r5
 8007c0c:	d420      	bmi.n	8007c50 <_malloc_r+0xd0>
 8007c0e:	2a0b      	cmp	r2, #11
 8007c10:	d917      	bls.n	8007c42 <_malloc_r+0xc2>
 8007c12:	1961      	adds	r1, r4, r5
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	6025      	str	r5, [r4, #0]
 8007c18:	bf18      	it	ne
 8007c1a:	6059      	strne	r1, [r3, #4]
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	bf08      	it	eq
 8007c20:	f8c8 1000 	streq.w	r1, [r8]
 8007c24:	5162      	str	r2, [r4, r5]
 8007c26:	604b      	str	r3, [r1, #4]
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f000 f82f 	bl	8007c8c <__malloc_unlock>
 8007c2e:	f104 000b 	add.w	r0, r4, #11
 8007c32:	1d23      	adds	r3, r4, #4
 8007c34:	f020 0007 	bic.w	r0, r0, #7
 8007c38:	1ac2      	subs	r2, r0, r3
 8007c3a:	bf1c      	itt	ne
 8007c3c:	1a1b      	subne	r3, r3, r0
 8007c3e:	50a3      	strne	r3, [r4, r2]
 8007c40:	e7af      	b.n	8007ba2 <_malloc_r+0x22>
 8007c42:	6862      	ldr	r2, [r4, #4]
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	bf0c      	ite	eq
 8007c48:	f8c8 2000 	streq.w	r2, [r8]
 8007c4c:	605a      	strne	r2, [r3, #4]
 8007c4e:	e7eb      	b.n	8007c28 <_malloc_r+0xa8>
 8007c50:	4623      	mov	r3, r4
 8007c52:	6864      	ldr	r4, [r4, #4]
 8007c54:	e7ae      	b.n	8007bb4 <_malloc_r+0x34>
 8007c56:	463c      	mov	r4, r7
 8007c58:	687f      	ldr	r7, [r7, #4]
 8007c5a:	e7b6      	b.n	8007bca <_malloc_r+0x4a>
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	d1fb      	bne.n	8007c5c <_malloc_r+0xdc>
 8007c64:	2300      	movs	r3, #0
 8007c66:	6053      	str	r3, [r2, #4]
 8007c68:	e7de      	b.n	8007c28 <_malloc_r+0xa8>
 8007c6a:	230c      	movs	r3, #12
 8007c6c:	6033      	str	r3, [r6, #0]
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f000 f80c 	bl	8007c8c <__malloc_unlock>
 8007c74:	e794      	b.n	8007ba0 <_malloc_r+0x20>
 8007c76:	6005      	str	r5, [r0, #0]
 8007c78:	e7d6      	b.n	8007c28 <_malloc_r+0xa8>
 8007c7a:	bf00      	nop
 8007c7c:	20000c34 	.word	0x20000c34

08007c80 <__malloc_lock>:
 8007c80:	4801      	ldr	r0, [pc, #4]	@ (8007c88 <__malloc_lock+0x8>)
 8007c82:	f7ff b89e 	b.w	8006dc2 <__retarget_lock_acquire_recursive>
 8007c86:	bf00      	nop
 8007c88:	20000c2c 	.word	0x20000c2c

08007c8c <__malloc_unlock>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	@ (8007c94 <__malloc_unlock+0x8>)
 8007c8e:	f7ff b899 	b.w	8006dc4 <__retarget_lock_release_recursive>
 8007c92:	bf00      	nop
 8007c94:	20000c2c 	.word	0x20000c2c

08007c98 <_Balloc>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	69c6      	ldr	r6, [r0, #28]
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	b976      	cbnz	r6, 8007cc0 <_Balloc+0x28>
 8007ca2:	2010      	movs	r0, #16
 8007ca4:	f7ff ff42 	bl	8007b2c <malloc>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	61e0      	str	r0, [r4, #28]
 8007cac:	b920      	cbnz	r0, 8007cb8 <_Balloc+0x20>
 8007cae:	4b18      	ldr	r3, [pc, #96]	@ (8007d10 <_Balloc+0x78>)
 8007cb0:	4818      	ldr	r0, [pc, #96]	@ (8007d14 <_Balloc+0x7c>)
 8007cb2:	216b      	movs	r1, #107	@ 0x6b
 8007cb4:	f000 fd98 	bl	80087e8 <__assert_func>
 8007cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cbc:	6006      	str	r6, [r0, #0]
 8007cbe:	60c6      	str	r6, [r0, #12]
 8007cc0:	69e6      	ldr	r6, [r4, #28]
 8007cc2:	68f3      	ldr	r3, [r6, #12]
 8007cc4:	b183      	cbz	r3, 8007ce8 <_Balloc+0x50>
 8007cc6:	69e3      	ldr	r3, [r4, #28]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cce:	b9b8      	cbnz	r0, 8007d00 <_Balloc+0x68>
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8007cd6:	1d72      	adds	r2, r6, #5
 8007cd8:	0092      	lsls	r2, r2, #2
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 fda2 	bl	8008824 <_calloc_r>
 8007ce0:	b160      	cbz	r0, 8007cfc <_Balloc+0x64>
 8007ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ce6:	e00e      	b.n	8007d06 <_Balloc+0x6e>
 8007ce8:	2221      	movs	r2, #33	@ 0x21
 8007cea:	2104      	movs	r1, #4
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fd99 	bl	8008824 <_calloc_r>
 8007cf2:	69e3      	ldr	r3, [r4, #28]
 8007cf4:	60f0      	str	r0, [r6, #12]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e4      	bne.n	8007cc6 <_Balloc+0x2e>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	6802      	ldr	r2, [r0, #0]
 8007d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d06:	2300      	movs	r3, #0
 8007d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d0c:	e7f7      	b.n	8007cfe <_Balloc+0x66>
 8007d0e:	bf00      	nop
 8007d10:	080092cd 	.word	0x080092cd
 8007d14:	0800934d 	.word	0x0800934d

08007d18 <_Bfree>:
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	69c6      	ldr	r6, [r0, #28]
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	b976      	cbnz	r6, 8007d40 <_Bfree+0x28>
 8007d22:	2010      	movs	r0, #16
 8007d24:	f7ff ff02 	bl	8007b2c <malloc>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	61e8      	str	r0, [r5, #28]
 8007d2c:	b920      	cbnz	r0, 8007d38 <_Bfree+0x20>
 8007d2e:	4b09      	ldr	r3, [pc, #36]	@ (8007d54 <_Bfree+0x3c>)
 8007d30:	4809      	ldr	r0, [pc, #36]	@ (8007d58 <_Bfree+0x40>)
 8007d32:	218f      	movs	r1, #143	@ 0x8f
 8007d34:	f000 fd58 	bl	80087e8 <__assert_func>
 8007d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d3c:	6006      	str	r6, [r0, #0]
 8007d3e:	60c6      	str	r6, [r0, #12]
 8007d40:	b13c      	cbz	r4, 8007d52 <_Bfree+0x3a>
 8007d42:	69eb      	ldr	r3, [r5, #28]
 8007d44:	6862      	ldr	r2, [r4, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d4c:	6021      	str	r1, [r4, #0]
 8007d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	080092cd 	.word	0x080092cd
 8007d58:	0800934d 	.word	0x0800934d

08007d5c <__multadd>:
 8007d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d60:	690d      	ldr	r5, [r1, #16]
 8007d62:	4607      	mov	r7, r0
 8007d64:	460c      	mov	r4, r1
 8007d66:	461e      	mov	r6, r3
 8007d68:	f101 0c14 	add.w	ip, r1, #20
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8007d72:	b299      	uxth	r1, r3
 8007d74:	fb02 6101 	mla	r1, r2, r1, r6
 8007d78:	0c1e      	lsrs	r6, r3, #16
 8007d7a:	0c0b      	lsrs	r3, r1, #16
 8007d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8007d80:	b289      	uxth	r1, r1
 8007d82:	3001      	adds	r0, #1
 8007d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d88:	4285      	cmp	r5, r0
 8007d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d92:	dcec      	bgt.n	8007d6e <__multadd+0x12>
 8007d94:	b30e      	cbz	r6, 8007dda <__multadd+0x7e>
 8007d96:	68a3      	ldr	r3, [r4, #8]
 8007d98:	42ab      	cmp	r3, r5
 8007d9a:	dc19      	bgt.n	8007dd0 <__multadd+0x74>
 8007d9c:	6861      	ldr	r1, [r4, #4]
 8007d9e:	4638      	mov	r0, r7
 8007da0:	3101      	adds	r1, #1
 8007da2:	f7ff ff79 	bl	8007c98 <_Balloc>
 8007da6:	4680      	mov	r8, r0
 8007da8:	b928      	cbnz	r0, 8007db6 <__multadd+0x5a>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4b0c      	ldr	r3, [pc, #48]	@ (8007de0 <__multadd+0x84>)
 8007dae:	480d      	ldr	r0, [pc, #52]	@ (8007de4 <__multadd+0x88>)
 8007db0:	21ba      	movs	r1, #186	@ 0xba
 8007db2:	f000 fd19 	bl	80087e8 <__assert_func>
 8007db6:	6922      	ldr	r2, [r4, #16]
 8007db8:	3202      	adds	r2, #2
 8007dba:	f104 010c 	add.w	r1, r4, #12
 8007dbe:	0092      	lsls	r2, r2, #2
 8007dc0:	300c      	adds	r0, #12
 8007dc2:	f7ff f800 	bl	8006dc6 <memcpy>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f7ff ffa5 	bl	8007d18 <_Bfree>
 8007dce:	4644      	mov	r4, r8
 8007dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	615e      	str	r6, [r3, #20]
 8007dd8:	6125      	str	r5, [r4, #16]
 8007dda:	4620      	mov	r0, r4
 8007ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de0:	0800933c 	.word	0x0800933c
 8007de4:	0800934d 	.word	0x0800934d

08007de8 <__hi0bits>:
 8007de8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007dec:	4603      	mov	r3, r0
 8007dee:	bf36      	itet	cc
 8007df0:	0403      	lslcc	r3, r0, #16
 8007df2:	2000      	movcs	r0, #0
 8007df4:	2010      	movcc	r0, #16
 8007df6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dfa:	bf3c      	itt	cc
 8007dfc:	021b      	lslcc	r3, r3, #8
 8007dfe:	3008      	addcc	r0, #8
 8007e00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e04:	bf3c      	itt	cc
 8007e06:	011b      	lslcc	r3, r3, #4
 8007e08:	3004      	addcc	r0, #4
 8007e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0e:	bf3c      	itt	cc
 8007e10:	009b      	lslcc	r3, r3, #2
 8007e12:	3002      	addcc	r0, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	db05      	blt.n	8007e24 <__hi0bits+0x3c>
 8007e18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e1c:	f100 0001 	add.w	r0, r0, #1
 8007e20:	bf08      	it	eq
 8007e22:	2020      	moveq	r0, #32
 8007e24:	4770      	bx	lr

08007e26 <__lo0bits>:
 8007e26:	6803      	ldr	r3, [r0, #0]
 8007e28:	4602      	mov	r2, r0
 8007e2a:	f013 0007 	ands.w	r0, r3, #7
 8007e2e:	d00b      	beq.n	8007e48 <__lo0bits+0x22>
 8007e30:	07d9      	lsls	r1, r3, #31
 8007e32:	d421      	bmi.n	8007e78 <__lo0bits+0x52>
 8007e34:	0798      	lsls	r0, r3, #30
 8007e36:	bf49      	itett	mi
 8007e38:	085b      	lsrmi	r3, r3, #1
 8007e3a:	089b      	lsrpl	r3, r3, #2
 8007e3c:	2001      	movmi	r0, #1
 8007e3e:	6013      	strmi	r3, [r2, #0]
 8007e40:	bf5c      	itt	pl
 8007e42:	6013      	strpl	r3, [r2, #0]
 8007e44:	2002      	movpl	r0, #2
 8007e46:	4770      	bx	lr
 8007e48:	b299      	uxth	r1, r3
 8007e4a:	b909      	cbnz	r1, 8007e50 <__lo0bits+0x2a>
 8007e4c:	0c1b      	lsrs	r3, r3, #16
 8007e4e:	2010      	movs	r0, #16
 8007e50:	b2d9      	uxtb	r1, r3
 8007e52:	b909      	cbnz	r1, 8007e58 <__lo0bits+0x32>
 8007e54:	3008      	adds	r0, #8
 8007e56:	0a1b      	lsrs	r3, r3, #8
 8007e58:	0719      	lsls	r1, r3, #28
 8007e5a:	bf04      	itt	eq
 8007e5c:	091b      	lsreq	r3, r3, #4
 8007e5e:	3004      	addeq	r0, #4
 8007e60:	0799      	lsls	r1, r3, #30
 8007e62:	bf04      	itt	eq
 8007e64:	089b      	lsreq	r3, r3, #2
 8007e66:	3002      	addeq	r0, #2
 8007e68:	07d9      	lsls	r1, r3, #31
 8007e6a:	d403      	bmi.n	8007e74 <__lo0bits+0x4e>
 8007e6c:	085b      	lsrs	r3, r3, #1
 8007e6e:	f100 0001 	add.w	r0, r0, #1
 8007e72:	d003      	beq.n	8007e7c <__lo0bits+0x56>
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	4770      	bx	lr
 8007e78:	2000      	movs	r0, #0
 8007e7a:	4770      	bx	lr
 8007e7c:	2020      	movs	r0, #32
 8007e7e:	4770      	bx	lr

08007e80 <__i2b>:
 8007e80:	b510      	push	{r4, lr}
 8007e82:	460c      	mov	r4, r1
 8007e84:	2101      	movs	r1, #1
 8007e86:	f7ff ff07 	bl	8007c98 <_Balloc>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	b928      	cbnz	r0, 8007e9a <__i2b+0x1a>
 8007e8e:	4b05      	ldr	r3, [pc, #20]	@ (8007ea4 <__i2b+0x24>)
 8007e90:	4805      	ldr	r0, [pc, #20]	@ (8007ea8 <__i2b+0x28>)
 8007e92:	f240 1145 	movw	r1, #325	@ 0x145
 8007e96:	f000 fca7 	bl	80087e8 <__assert_func>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	6144      	str	r4, [r0, #20]
 8007e9e:	6103      	str	r3, [r0, #16]
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	bf00      	nop
 8007ea4:	0800933c 	.word	0x0800933c
 8007ea8:	0800934d 	.word	0x0800934d

08007eac <__multiply>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	4617      	mov	r7, r2
 8007eb2:	690a      	ldr	r2, [r1, #16]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	bfa8      	it	ge
 8007eba:	463b      	movge	r3, r7
 8007ebc:	4689      	mov	r9, r1
 8007ebe:	bfa4      	itt	ge
 8007ec0:	460f      	movge	r7, r1
 8007ec2:	4699      	movge	r9, r3
 8007ec4:	693d      	ldr	r5, [r7, #16]
 8007ec6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	eb05 060a 	add.w	r6, r5, sl
 8007ed2:	42b3      	cmp	r3, r6
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	bfb8      	it	lt
 8007ed8:	3101      	addlt	r1, #1
 8007eda:	f7ff fedd 	bl	8007c98 <_Balloc>
 8007ede:	b930      	cbnz	r0, 8007eee <__multiply+0x42>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	4b41      	ldr	r3, [pc, #260]	@ (8007fe8 <__multiply+0x13c>)
 8007ee4:	4841      	ldr	r0, [pc, #260]	@ (8007fec <__multiply+0x140>)
 8007ee6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007eea:	f000 fc7d 	bl	80087e8 <__assert_func>
 8007eee:	f100 0414 	add.w	r4, r0, #20
 8007ef2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007ef6:	4623      	mov	r3, r4
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4573      	cmp	r3, lr
 8007efc:	d320      	bcc.n	8007f40 <__multiply+0x94>
 8007efe:	f107 0814 	add.w	r8, r7, #20
 8007f02:	f109 0114 	add.w	r1, r9, #20
 8007f06:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007f0a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007f0e:	9302      	str	r3, [sp, #8]
 8007f10:	1beb      	subs	r3, r5, r7
 8007f12:	3b15      	subs	r3, #21
 8007f14:	f023 0303 	bic.w	r3, r3, #3
 8007f18:	3304      	adds	r3, #4
 8007f1a:	3715      	adds	r7, #21
 8007f1c:	42bd      	cmp	r5, r7
 8007f1e:	bf38      	it	cc
 8007f20:	2304      	movcc	r3, #4
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	9103      	str	r1, [sp, #12]
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	d80c      	bhi.n	8007f46 <__multiply+0x9a>
 8007f2c:	2e00      	cmp	r6, #0
 8007f2e:	dd03      	ble.n	8007f38 <__multiply+0x8c>
 8007f30:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d055      	beq.n	8007fe4 <__multiply+0x138>
 8007f38:	6106      	str	r6, [r0, #16]
 8007f3a:	b005      	add	sp, #20
 8007f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f40:	f843 2b04 	str.w	r2, [r3], #4
 8007f44:	e7d9      	b.n	8007efa <__multiply+0x4e>
 8007f46:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f4a:	f1ba 0f00 	cmp.w	sl, #0
 8007f4e:	d01f      	beq.n	8007f90 <__multiply+0xe4>
 8007f50:	46c4      	mov	ip, r8
 8007f52:	46a1      	mov	r9, r4
 8007f54:	2700      	movs	r7, #0
 8007f56:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f5a:	f8d9 3000 	ldr.w	r3, [r9]
 8007f5e:	fa1f fb82 	uxth.w	fp, r2
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f68:	443b      	add	r3, r7
 8007f6a:	f8d9 7000 	ldr.w	r7, [r9]
 8007f6e:	0c12      	lsrs	r2, r2, #16
 8007f70:	0c3f      	lsrs	r7, r7, #16
 8007f72:	fb0a 7202 	mla	r2, sl, r2, r7
 8007f76:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f80:	4565      	cmp	r5, ip
 8007f82:	f849 3b04 	str.w	r3, [r9], #4
 8007f86:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007f8a:	d8e4      	bhi.n	8007f56 <__multiply+0xaa>
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	50e7      	str	r7, [r4, r3]
 8007f90:	9b03      	ldr	r3, [sp, #12]
 8007f92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f96:	3104      	adds	r1, #4
 8007f98:	f1b9 0f00 	cmp.w	r9, #0
 8007f9c:	d020      	beq.n	8007fe0 <__multiply+0x134>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	4647      	mov	r7, r8
 8007fa2:	46a4      	mov	ip, r4
 8007fa4:	f04f 0a00 	mov.w	sl, #0
 8007fa8:	f8b7 b000 	ldrh.w	fp, [r7]
 8007fac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007fb0:	fb09 220b 	mla	r2, r9, fp, r2
 8007fb4:	4452      	add	r2, sl
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fbc:	f84c 3b04 	str.w	r3, [ip], #4
 8007fc0:	f857 3b04 	ldr.w	r3, [r7], #4
 8007fc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fc8:	f8bc 3000 	ldrh.w	r3, [ip]
 8007fcc:	fb09 330a 	mla	r3, r9, sl, r3
 8007fd0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007fd4:	42bd      	cmp	r5, r7
 8007fd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fda:	d8e5      	bhi.n	8007fa8 <__multiply+0xfc>
 8007fdc:	9a01      	ldr	r2, [sp, #4]
 8007fde:	50a3      	str	r3, [r4, r2]
 8007fe0:	3404      	adds	r4, #4
 8007fe2:	e79f      	b.n	8007f24 <__multiply+0x78>
 8007fe4:	3e01      	subs	r6, #1
 8007fe6:	e7a1      	b.n	8007f2c <__multiply+0x80>
 8007fe8:	0800933c 	.word	0x0800933c
 8007fec:	0800934d 	.word	0x0800934d

08007ff0 <__pow5mult>:
 8007ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff4:	4615      	mov	r5, r2
 8007ff6:	f012 0203 	ands.w	r2, r2, #3
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	460e      	mov	r6, r1
 8007ffe:	d007      	beq.n	8008010 <__pow5mult+0x20>
 8008000:	4c25      	ldr	r4, [pc, #148]	@ (8008098 <__pow5mult+0xa8>)
 8008002:	3a01      	subs	r2, #1
 8008004:	2300      	movs	r3, #0
 8008006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800800a:	f7ff fea7 	bl	8007d5c <__multadd>
 800800e:	4606      	mov	r6, r0
 8008010:	10ad      	asrs	r5, r5, #2
 8008012:	d03d      	beq.n	8008090 <__pow5mult+0xa0>
 8008014:	69fc      	ldr	r4, [r7, #28]
 8008016:	b97c      	cbnz	r4, 8008038 <__pow5mult+0x48>
 8008018:	2010      	movs	r0, #16
 800801a:	f7ff fd87 	bl	8007b2c <malloc>
 800801e:	4602      	mov	r2, r0
 8008020:	61f8      	str	r0, [r7, #28]
 8008022:	b928      	cbnz	r0, 8008030 <__pow5mult+0x40>
 8008024:	4b1d      	ldr	r3, [pc, #116]	@ (800809c <__pow5mult+0xac>)
 8008026:	481e      	ldr	r0, [pc, #120]	@ (80080a0 <__pow5mult+0xb0>)
 8008028:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800802c:	f000 fbdc 	bl	80087e8 <__assert_func>
 8008030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008034:	6004      	str	r4, [r0, #0]
 8008036:	60c4      	str	r4, [r0, #12]
 8008038:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800803c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008040:	b94c      	cbnz	r4, 8008056 <__pow5mult+0x66>
 8008042:	f240 2171 	movw	r1, #625	@ 0x271
 8008046:	4638      	mov	r0, r7
 8008048:	f7ff ff1a 	bl	8007e80 <__i2b>
 800804c:	2300      	movs	r3, #0
 800804e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008052:	4604      	mov	r4, r0
 8008054:	6003      	str	r3, [r0, #0]
 8008056:	f04f 0900 	mov.w	r9, #0
 800805a:	07eb      	lsls	r3, r5, #31
 800805c:	d50a      	bpl.n	8008074 <__pow5mult+0x84>
 800805e:	4631      	mov	r1, r6
 8008060:	4622      	mov	r2, r4
 8008062:	4638      	mov	r0, r7
 8008064:	f7ff ff22 	bl	8007eac <__multiply>
 8008068:	4631      	mov	r1, r6
 800806a:	4680      	mov	r8, r0
 800806c:	4638      	mov	r0, r7
 800806e:	f7ff fe53 	bl	8007d18 <_Bfree>
 8008072:	4646      	mov	r6, r8
 8008074:	106d      	asrs	r5, r5, #1
 8008076:	d00b      	beq.n	8008090 <__pow5mult+0xa0>
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	b938      	cbnz	r0, 800808c <__pow5mult+0x9c>
 800807c:	4622      	mov	r2, r4
 800807e:	4621      	mov	r1, r4
 8008080:	4638      	mov	r0, r7
 8008082:	f7ff ff13 	bl	8007eac <__multiply>
 8008086:	6020      	str	r0, [r4, #0]
 8008088:	f8c0 9000 	str.w	r9, [r0]
 800808c:	4604      	mov	r4, r0
 800808e:	e7e4      	b.n	800805a <__pow5mult+0x6a>
 8008090:	4630      	mov	r0, r6
 8008092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008096:	bf00      	nop
 8008098:	08009400 	.word	0x08009400
 800809c:	080092cd 	.word	0x080092cd
 80080a0:	0800934d 	.word	0x0800934d

080080a4 <__lshift>:
 80080a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	460c      	mov	r4, r1
 80080aa:	6849      	ldr	r1, [r1, #4]
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080b2:	68a3      	ldr	r3, [r4, #8]
 80080b4:	4607      	mov	r7, r0
 80080b6:	4691      	mov	r9, r2
 80080b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080bc:	f108 0601 	add.w	r6, r8, #1
 80080c0:	42b3      	cmp	r3, r6
 80080c2:	db0b      	blt.n	80080dc <__lshift+0x38>
 80080c4:	4638      	mov	r0, r7
 80080c6:	f7ff fde7 	bl	8007c98 <_Balloc>
 80080ca:	4605      	mov	r5, r0
 80080cc:	b948      	cbnz	r0, 80080e2 <__lshift+0x3e>
 80080ce:	4602      	mov	r2, r0
 80080d0:	4b28      	ldr	r3, [pc, #160]	@ (8008174 <__lshift+0xd0>)
 80080d2:	4829      	ldr	r0, [pc, #164]	@ (8008178 <__lshift+0xd4>)
 80080d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080d8:	f000 fb86 	bl	80087e8 <__assert_func>
 80080dc:	3101      	adds	r1, #1
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	e7ee      	b.n	80080c0 <__lshift+0x1c>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f100 0114 	add.w	r1, r0, #20
 80080e8:	f100 0210 	add.w	r2, r0, #16
 80080ec:	4618      	mov	r0, r3
 80080ee:	4553      	cmp	r3, sl
 80080f0:	db33      	blt.n	800815a <__lshift+0xb6>
 80080f2:	6920      	ldr	r0, [r4, #16]
 80080f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080f8:	f104 0314 	add.w	r3, r4, #20
 80080fc:	f019 091f 	ands.w	r9, r9, #31
 8008100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008104:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008108:	d02b      	beq.n	8008162 <__lshift+0xbe>
 800810a:	f1c9 0e20 	rsb	lr, r9, #32
 800810e:	468a      	mov	sl, r1
 8008110:	2200      	movs	r2, #0
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	fa00 f009 	lsl.w	r0, r0, r9
 8008118:	4310      	orrs	r0, r2
 800811a:	f84a 0b04 	str.w	r0, [sl], #4
 800811e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008122:	459c      	cmp	ip, r3
 8008124:	fa22 f20e 	lsr.w	r2, r2, lr
 8008128:	d8f3      	bhi.n	8008112 <__lshift+0x6e>
 800812a:	ebac 0304 	sub.w	r3, ip, r4
 800812e:	3b15      	subs	r3, #21
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	3304      	adds	r3, #4
 8008136:	f104 0015 	add.w	r0, r4, #21
 800813a:	4560      	cmp	r0, ip
 800813c:	bf88      	it	hi
 800813e:	2304      	movhi	r3, #4
 8008140:	50ca      	str	r2, [r1, r3]
 8008142:	b10a      	cbz	r2, 8008148 <__lshift+0xa4>
 8008144:	f108 0602 	add.w	r6, r8, #2
 8008148:	3e01      	subs	r6, #1
 800814a:	4638      	mov	r0, r7
 800814c:	612e      	str	r6, [r5, #16]
 800814e:	4621      	mov	r1, r4
 8008150:	f7ff fde2 	bl	8007d18 <_Bfree>
 8008154:	4628      	mov	r0, r5
 8008156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815a:	f842 0f04 	str.w	r0, [r2, #4]!
 800815e:	3301      	adds	r3, #1
 8008160:	e7c5      	b.n	80080ee <__lshift+0x4a>
 8008162:	3904      	subs	r1, #4
 8008164:	f853 2b04 	ldr.w	r2, [r3], #4
 8008168:	f841 2f04 	str.w	r2, [r1, #4]!
 800816c:	459c      	cmp	ip, r3
 800816e:	d8f9      	bhi.n	8008164 <__lshift+0xc0>
 8008170:	e7ea      	b.n	8008148 <__lshift+0xa4>
 8008172:	bf00      	nop
 8008174:	0800933c 	.word	0x0800933c
 8008178:	0800934d 	.word	0x0800934d

0800817c <__mcmp>:
 800817c:	690a      	ldr	r2, [r1, #16]
 800817e:	4603      	mov	r3, r0
 8008180:	6900      	ldr	r0, [r0, #16]
 8008182:	1a80      	subs	r0, r0, r2
 8008184:	b530      	push	{r4, r5, lr}
 8008186:	d10e      	bne.n	80081a6 <__mcmp+0x2a>
 8008188:	3314      	adds	r3, #20
 800818a:	3114      	adds	r1, #20
 800818c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008190:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008194:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008198:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800819c:	4295      	cmp	r5, r2
 800819e:	d003      	beq.n	80081a8 <__mcmp+0x2c>
 80081a0:	d205      	bcs.n	80081ae <__mcmp+0x32>
 80081a2:	f04f 30ff 	mov.w	r0, #4294967295
 80081a6:	bd30      	pop	{r4, r5, pc}
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	d3f3      	bcc.n	8008194 <__mcmp+0x18>
 80081ac:	e7fb      	b.n	80081a6 <__mcmp+0x2a>
 80081ae:	2001      	movs	r0, #1
 80081b0:	e7f9      	b.n	80081a6 <__mcmp+0x2a>
	...

080081b4 <__mdiff>:
 80081b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	4689      	mov	r9, r1
 80081ba:	4606      	mov	r6, r0
 80081bc:	4611      	mov	r1, r2
 80081be:	4648      	mov	r0, r9
 80081c0:	4614      	mov	r4, r2
 80081c2:	f7ff ffdb 	bl	800817c <__mcmp>
 80081c6:	1e05      	subs	r5, r0, #0
 80081c8:	d112      	bne.n	80081f0 <__mdiff+0x3c>
 80081ca:	4629      	mov	r1, r5
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff fd63 	bl	8007c98 <_Balloc>
 80081d2:	4602      	mov	r2, r0
 80081d4:	b928      	cbnz	r0, 80081e2 <__mdiff+0x2e>
 80081d6:	4b3f      	ldr	r3, [pc, #252]	@ (80082d4 <__mdiff+0x120>)
 80081d8:	f240 2137 	movw	r1, #567	@ 0x237
 80081dc:	483e      	ldr	r0, [pc, #248]	@ (80082d8 <__mdiff+0x124>)
 80081de:	f000 fb03 	bl	80087e8 <__assert_func>
 80081e2:	2301      	movs	r3, #1
 80081e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081e8:	4610      	mov	r0, r2
 80081ea:	b003      	add	sp, #12
 80081ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f0:	bfbc      	itt	lt
 80081f2:	464b      	movlt	r3, r9
 80081f4:	46a1      	movlt	r9, r4
 80081f6:	4630      	mov	r0, r6
 80081f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081fc:	bfba      	itte	lt
 80081fe:	461c      	movlt	r4, r3
 8008200:	2501      	movlt	r5, #1
 8008202:	2500      	movge	r5, #0
 8008204:	f7ff fd48 	bl	8007c98 <_Balloc>
 8008208:	4602      	mov	r2, r0
 800820a:	b918      	cbnz	r0, 8008214 <__mdiff+0x60>
 800820c:	4b31      	ldr	r3, [pc, #196]	@ (80082d4 <__mdiff+0x120>)
 800820e:	f240 2145 	movw	r1, #581	@ 0x245
 8008212:	e7e3      	b.n	80081dc <__mdiff+0x28>
 8008214:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008218:	6926      	ldr	r6, [r4, #16]
 800821a:	60c5      	str	r5, [r0, #12]
 800821c:	f109 0310 	add.w	r3, r9, #16
 8008220:	f109 0514 	add.w	r5, r9, #20
 8008224:	f104 0e14 	add.w	lr, r4, #20
 8008228:	f100 0b14 	add.w	fp, r0, #20
 800822c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008230:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	46d9      	mov	r9, fp
 8008238:	f04f 0c00 	mov.w	ip, #0
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008242:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	fa1f f38a 	uxth.w	r3, sl
 800824c:	4619      	mov	r1, r3
 800824e:	b283      	uxth	r3, r0
 8008250:	1acb      	subs	r3, r1, r3
 8008252:	0c00      	lsrs	r0, r0, #16
 8008254:	4463      	add	r3, ip
 8008256:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800825a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800825e:	b29b      	uxth	r3, r3
 8008260:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008264:	4576      	cmp	r6, lr
 8008266:	f849 3b04 	str.w	r3, [r9], #4
 800826a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800826e:	d8e5      	bhi.n	800823c <__mdiff+0x88>
 8008270:	1b33      	subs	r3, r6, r4
 8008272:	3b15      	subs	r3, #21
 8008274:	f023 0303 	bic.w	r3, r3, #3
 8008278:	3415      	adds	r4, #21
 800827a:	3304      	adds	r3, #4
 800827c:	42a6      	cmp	r6, r4
 800827e:	bf38      	it	cc
 8008280:	2304      	movcc	r3, #4
 8008282:	441d      	add	r5, r3
 8008284:	445b      	add	r3, fp
 8008286:	461e      	mov	r6, r3
 8008288:	462c      	mov	r4, r5
 800828a:	4544      	cmp	r4, r8
 800828c:	d30e      	bcc.n	80082ac <__mdiff+0xf8>
 800828e:	f108 0103 	add.w	r1, r8, #3
 8008292:	1b49      	subs	r1, r1, r5
 8008294:	f021 0103 	bic.w	r1, r1, #3
 8008298:	3d03      	subs	r5, #3
 800829a:	45a8      	cmp	r8, r5
 800829c:	bf38      	it	cc
 800829e:	2100      	movcc	r1, #0
 80082a0:	440b      	add	r3, r1
 80082a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082a6:	b191      	cbz	r1, 80082ce <__mdiff+0x11a>
 80082a8:	6117      	str	r7, [r2, #16]
 80082aa:	e79d      	b.n	80081e8 <__mdiff+0x34>
 80082ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80082b0:	46e6      	mov	lr, ip
 80082b2:	0c08      	lsrs	r0, r1, #16
 80082b4:	fa1c fc81 	uxtah	ip, ip, r1
 80082b8:	4471      	add	r1, lr
 80082ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082be:	b289      	uxth	r1, r1
 80082c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082c4:	f846 1b04 	str.w	r1, [r6], #4
 80082c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082cc:	e7dd      	b.n	800828a <__mdiff+0xd6>
 80082ce:	3f01      	subs	r7, #1
 80082d0:	e7e7      	b.n	80082a2 <__mdiff+0xee>
 80082d2:	bf00      	nop
 80082d4:	0800933c 	.word	0x0800933c
 80082d8:	0800934d 	.word	0x0800934d

080082dc <__d2b>:
 80082dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082e0:	460f      	mov	r7, r1
 80082e2:	2101      	movs	r1, #1
 80082e4:	ec59 8b10 	vmov	r8, r9, d0
 80082e8:	4616      	mov	r6, r2
 80082ea:	f7ff fcd5 	bl	8007c98 <_Balloc>
 80082ee:	4604      	mov	r4, r0
 80082f0:	b930      	cbnz	r0, 8008300 <__d2b+0x24>
 80082f2:	4602      	mov	r2, r0
 80082f4:	4b23      	ldr	r3, [pc, #140]	@ (8008384 <__d2b+0xa8>)
 80082f6:	4824      	ldr	r0, [pc, #144]	@ (8008388 <__d2b+0xac>)
 80082f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80082fc:	f000 fa74 	bl	80087e8 <__assert_func>
 8008300:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008304:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008308:	b10d      	cbz	r5, 800830e <__d2b+0x32>
 800830a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	f1b8 0300 	subs.w	r3, r8, #0
 8008314:	d023      	beq.n	800835e <__d2b+0x82>
 8008316:	4668      	mov	r0, sp
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	f7ff fd84 	bl	8007e26 <__lo0bits>
 800831e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008322:	b1d0      	cbz	r0, 800835a <__d2b+0x7e>
 8008324:	f1c0 0320 	rsb	r3, r0, #32
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	430b      	orrs	r3, r1
 800832e:	40c2      	lsrs	r2, r0
 8008330:	6163      	str	r3, [r4, #20]
 8008332:	9201      	str	r2, [sp, #4]
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	61a3      	str	r3, [r4, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	bf0c      	ite	eq
 800833c:	2201      	moveq	r2, #1
 800833e:	2202      	movne	r2, #2
 8008340:	6122      	str	r2, [r4, #16]
 8008342:	b1a5      	cbz	r5, 800836e <__d2b+0x92>
 8008344:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008348:	4405      	add	r5, r0
 800834a:	603d      	str	r5, [r7, #0]
 800834c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008350:	6030      	str	r0, [r6, #0]
 8008352:	4620      	mov	r0, r4
 8008354:	b003      	add	sp, #12
 8008356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800835a:	6161      	str	r1, [r4, #20]
 800835c:	e7ea      	b.n	8008334 <__d2b+0x58>
 800835e:	a801      	add	r0, sp, #4
 8008360:	f7ff fd61 	bl	8007e26 <__lo0bits>
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	6163      	str	r3, [r4, #20]
 8008368:	3020      	adds	r0, #32
 800836a:	2201      	movs	r2, #1
 800836c:	e7e8      	b.n	8008340 <__d2b+0x64>
 800836e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008372:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008376:	6038      	str	r0, [r7, #0]
 8008378:	6918      	ldr	r0, [r3, #16]
 800837a:	f7ff fd35 	bl	8007de8 <__hi0bits>
 800837e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008382:	e7e5      	b.n	8008350 <__d2b+0x74>
 8008384:	0800933c 	.word	0x0800933c
 8008388:	0800934d 	.word	0x0800934d

0800838c <__ssputs_r>:
 800838c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	688e      	ldr	r6, [r1, #8]
 8008392:	461f      	mov	r7, r3
 8008394:	42be      	cmp	r6, r7
 8008396:	680b      	ldr	r3, [r1, #0]
 8008398:	4682      	mov	sl, r0
 800839a:	460c      	mov	r4, r1
 800839c:	4690      	mov	r8, r2
 800839e:	d82d      	bhi.n	80083fc <__ssputs_r+0x70>
 80083a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083a8:	d026      	beq.n	80083f8 <__ssputs_r+0x6c>
 80083aa:	6965      	ldr	r5, [r4, #20]
 80083ac:	6909      	ldr	r1, [r1, #16]
 80083ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083b2:	eba3 0901 	sub.w	r9, r3, r1
 80083b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083ba:	1c7b      	adds	r3, r7, #1
 80083bc:	444b      	add	r3, r9
 80083be:	106d      	asrs	r5, r5, #1
 80083c0:	429d      	cmp	r5, r3
 80083c2:	bf38      	it	cc
 80083c4:	461d      	movcc	r5, r3
 80083c6:	0553      	lsls	r3, r2, #21
 80083c8:	d527      	bpl.n	800841a <__ssputs_r+0x8e>
 80083ca:	4629      	mov	r1, r5
 80083cc:	f7ff fbd8 	bl	8007b80 <_malloc_r>
 80083d0:	4606      	mov	r6, r0
 80083d2:	b360      	cbz	r0, 800842e <__ssputs_r+0xa2>
 80083d4:	6921      	ldr	r1, [r4, #16]
 80083d6:	464a      	mov	r2, r9
 80083d8:	f7fe fcf5 	bl	8006dc6 <memcpy>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	6126      	str	r6, [r4, #16]
 80083ea:	6165      	str	r5, [r4, #20]
 80083ec:	444e      	add	r6, r9
 80083ee:	eba5 0509 	sub.w	r5, r5, r9
 80083f2:	6026      	str	r6, [r4, #0]
 80083f4:	60a5      	str	r5, [r4, #8]
 80083f6:	463e      	mov	r6, r7
 80083f8:	42be      	cmp	r6, r7
 80083fa:	d900      	bls.n	80083fe <__ssputs_r+0x72>
 80083fc:	463e      	mov	r6, r7
 80083fe:	6820      	ldr	r0, [r4, #0]
 8008400:	4632      	mov	r2, r6
 8008402:	4641      	mov	r1, r8
 8008404:	f000 f9c6 	bl	8008794 <memmove>
 8008408:	68a3      	ldr	r3, [r4, #8]
 800840a:	1b9b      	subs	r3, r3, r6
 800840c:	60a3      	str	r3, [r4, #8]
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	4433      	add	r3, r6
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	2000      	movs	r0, #0
 8008416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841a:	462a      	mov	r2, r5
 800841c:	f000 fa28 	bl	8008870 <_realloc_r>
 8008420:	4606      	mov	r6, r0
 8008422:	2800      	cmp	r0, #0
 8008424:	d1e0      	bne.n	80083e8 <__ssputs_r+0x5c>
 8008426:	6921      	ldr	r1, [r4, #16]
 8008428:	4650      	mov	r0, sl
 800842a:	f7ff fb35 	bl	8007a98 <_free_r>
 800842e:	230c      	movs	r3, #12
 8008430:	f8ca 3000 	str.w	r3, [sl]
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	e7e9      	b.n	8008416 <__ssputs_r+0x8a>
	...

08008444 <_svfiprintf_r>:
 8008444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	4698      	mov	r8, r3
 800844a:	898b      	ldrh	r3, [r1, #12]
 800844c:	061b      	lsls	r3, r3, #24
 800844e:	b09d      	sub	sp, #116	@ 0x74
 8008450:	4607      	mov	r7, r0
 8008452:	460d      	mov	r5, r1
 8008454:	4614      	mov	r4, r2
 8008456:	d510      	bpl.n	800847a <_svfiprintf_r+0x36>
 8008458:	690b      	ldr	r3, [r1, #16]
 800845a:	b973      	cbnz	r3, 800847a <_svfiprintf_r+0x36>
 800845c:	2140      	movs	r1, #64	@ 0x40
 800845e:	f7ff fb8f 	bl	8007b80 <_malloc_r>
 8008462:	6028      	str	r0, [r5, #0]
 8008464:	6128      	str	r0, [r5, #16]
 8008466:	b930      	cbnz	r0, 8008476 <_svfiprintf_r+0x32>
 8008468:	230c      	movs	r3, #12
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	b01d      	add	sp, #116	@ 0x74
 8008472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008476:	2340      	movs	r3, #64	@ 0x40
 8008478:	616b      	str	r3, [r5, #20]
 800847a:	2300      	movs	r3, #0
 800847c:	9309      	str	r3, [sp, #36]	@ 0x24
 800847e:	2320      	movs	r3, #32
 8008480:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008484:	f8cd 800c 	str.w	r8, [sp, #12]
 8008488:	2330      	movs	r3, #48	@ 0x30
 800848a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008628 <_svfiprintf_r+0x1e4>
 800848e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008492:	f04f 0901 	mov.w	r9, #1
 8008496:	4623      	mov	r3, r4
 8008498:	469a      	mov	sl, r3
 800849a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800849e:	b10a      	cbz	r2, 80084a4 <_svfiprintf_r+0x60>
 80084a0:	2a25      	cmp	r2, #37	@ 0x25
 80084a2:	d1f9      	bne.n	8008498 <_svfiprintf_r+0x54>
 80084a4:	ebba 0b04 	subs.w	fp, sl, r4
 80084a8:	d00b      	beq.n	80084c2 <_svfiprintf_r+0x7e>
 80084aa:	465b      	mov	r3, fp
 80084ac:	4622      	mov	r2, r4
 80084ae:	4629      	mov	r1, r5
 80084b0:	4638      	mov	r0, r7
 80084b2:	f7ff ff6b 	bl	800838c <__ssputs_r>
 80084b6:	3001      	adds	r0, #1
 80084b8:	f000 80a7 	beq.w	800860a <_svfiprintf_r+0x1c6>
 80084bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084be:	445a      	add	r2, fp
 80084c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80084c2:	f89a 3000 	ldrb.w	r3, [sl]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 809f 	beq.w	800860a <_svfiprintf_r+0x1c6>
 80084cc:	2300      	movs	r3, #0
 80084ce:	f04f 32ff 	mov.w	r2, #4294967295
 80084d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d6:	f10a 0a01 	add.w	sl, sl, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	9307      	str	r3, [sp, #28]
 80084de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80084e4:	4654      	mov	r4, sl
 80084e6:	2205      	movs	r2, #5
 80084e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ec:	484e      	ldr	r0, [pc, #312]	@ (8008628 <_svfiprintf_r+0x1e4>)
 80084ee:	f7f7 fe8f 	bl	8000210 <memchr>
 80084f2:	9a04      	ldr	r2, [sp, #16]
 80084f4:	b9d8      	cbnz	r0, 800852e <_svfiprintf_r+0xea>
 80084f6:	06d0      	lsls	r0, r2, #27
 80084f8:	bf44      	itt	mi
 80084fa:	2320      	movmi	r3, #32
 80084fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008500:	0711      	lsls	r1, r2, #28
 8008502:	bf44      	itt	mi
 8008504:	232b      	movmi	r3, #43	@ 0x2b
 8008506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800850a:	f89a 3000 	ldrb.w	r3, [sl]
 800850e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008510:	d015      	beq.n	800853e <_svfiprintf_r+0xfa>
 8008512:	9a07      	ldr	r2, [sp, #28]
 8008514:	4654      	mov	r4, sl
 8008516:	2000      	movs	r0, #0
 8008518:	f04f 0c0a 	mov.w	ip, #10
 800851c:	4621      	mov	r1, r4
 800851e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008522:	3b30      	subs	r3, #48	@ 0x30
 8008524:	2b09      	cmp	r3, #9
 8008526:	d94b      	bls.n	80085c0 <_svfiprintf_r+0x17c>
 8008528:	b1b0      	cbz	r0, 8008558 <_svfiprintf_r+0x114>
 800852a:	9207      	str	r2, [sp, #28]
 800852c:	e014      	b.n	8008558 <_svfiprintf_r+0x114>
 800852e:	eba0 0308 	sub.w	r3, r0, r8
 8008532:	fa09 f303 	lsl.w	r3, r9, r3
 8008536:	4313      	orrs	r3, r2
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	46a2      	mov	sl, r4
 800853c:	e7d2      	b.n	80084e4 <_svfiprintf_r+0xa0>
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	1d19      	adds	r1, r3, #4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	9103      	str	r1, [sp, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	bfbb      	ittet	lt
 800854a:	425b      	neglt	r3, r3
 800854c:	f042 0202 	orrlt.w	r2, r2, #2
 8008550:	9307      	strge	r3, [sp, #28]
 8008552:	9307      	strlt	r3, [sp, #28]
 8008554:	bfb8      	it	lt
 8008556:	9204      	strlt	r2, [sp, #16]
 8008558:	7823      	ldrb	r3, [r4, #0]
 800855a:	2b2e      	cmp	r3, #46	@ 0x2e
 800855c:	d10a      	bne.n	8008574 <_svfiprintf_r+0x130>
 800855e:	7863      	ldrb	r3, [r4, #1]
 8008560:	2b2a      	cmp	r3, #42	@ 0x2a
 8008562:	d132      	bne.n	80085ca <_svfiprintf_r+0x186>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	1d1a      	adds	r2, r3, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	9203      	str	r2, [sp, #12]
 800856c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008570:	3402      	adds	r4, #2
 8008572:	9305      	str	r3, [sp, #20]
 8008574:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008638 <_svfiprintf_r+0x1f4>
 8008578:	7821      	ldrb	r1, [r4, #0]
 800857a:	2203      	movs	r2, #3
 800857c:	4650      	mov	r0, sl
 800857e:	f7f7 fe47 	bl	8000210 <memchr>
 8008582:	b138      	cbz	r0, 8008594 <_svfiprintf_r+0x150>
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	eba0 000a 	sub.w	r0, r0, sl
 800858a:	2240      	movs	r2, #64	@ 0x40
 800858c:	4082      	lsls	r2, r0
 800858e:	4313      	orrs	r3, r2
 8008590:	3401      	adds	r4, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008598:	4824      	ldr	r0, [pc, #144]	@ (800862c <_svfiprintf_r+0x1e8>)
 800859a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800859e:	2206      	movs	r2, #6
 80085a0:	f7f7 fe36 	bl	8000210 <memchr>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d036      	beq.n	8008616 <_svfiprintf_r+0x1d2>
 80085a8:	4b21      	ldr	r3, [pc, #132]	@ (8008630 <_svfiprintf_r+0x1ec>)
 80085aa:	bb1b      	cbnz	r3, 80085f4 <_svfiprintf_r+0x1b0>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	3307      	adds	r3, #7
 80085b0:	f023 0307 	bic.w	r3, r3, #7
 80085b4:	3308      	adds	r3, #8
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ba:	4433      	add	r3, r6
 80085bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085be:	e76a      	b.n	8008496 <_svfiprintf_r+0x52>
 80085c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c4:	460c      	mov	r4, r1
 80085c6:	2001      	movs	r0, #1
 80085c8:	e7a8      	b.n	800851c <_svfiprintf_r+0xd8>
 80085ca:	2300      	movs	r3, #0
 80085cc:	3401      	adds	r4, #1
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	4619      	mov	r1, r3
 80085d2:	f04f 0c0a 	mov.w	ip, #10
 80085d6:	4620      	mov	r0, r4
 80085d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085dc:	3a30      	subs	r2, #48	@ 0x30
 80085de:	2a09      	cmp	r2, #9
 80085e0:	d903      	bls.n	80085ea <_svfiprintf_r+0x1a6>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0c6      	beq.n	8008574 <_svfiprintf_r+0x130>
 80085e6:	9105      	str	r1, [sp, #20]
 80085e8:	e7c4      	b.n	8008574 <_svfiprintf_r+0x130>
 80085ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ee:	4604      	mov	r4, r0
 80085f0:	2301      	movs	r3, #1
 80085f2:	e7f0      	b.n	80085d6 <_svfiprintf_r+0x192>
 80085f4:	ab03      	add	r3, sp, #12
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	462a      	mov	r2, r5
 80085fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008634 <_svfiprintf_r+0x1f0>)
 80085fc:	a904      	add	r1, sp, #16
 80085fe:	4638      	mov	r0, r7
 8008600:	f7fd fe84 	bl	800630c <_printf_float>
 8008604:	1c42      	adds	r2, r0, #1
 8008606:	4606      	mov	r6, r0
 8008608:	d1d6      	bne.n	80085b8 <_svfiprintf_r+0x174>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	065b      	lsls	r3, r3, #25
 800860e:	f53f af2d 	bmi.w	800846c <_svfiprintf_r+0x28>
 8008612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008614:	e72c      	b.n	8008470 <_svfiprintf_r+0x2c>
 8008616:	ab03      	add	r3, sp, #12
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	462a      	mov	r2, r5
 800861c:	4b05      	ldr	r3, [pc, #20]	@ (8008634 <_svfiprintf_r+0x1f0>)
 800861e:	a904      	add	r1, sp, #16
 8008620:	4638      	mov	r0, r7
 8008622:	f7fe f90b 	bl	800683c <_printf_i>
 8008626:	e7ed      	b.n	8008604 <_svfiprintf_r+0x1c0>
 8008628:	080093a6 	.word	0x080093a6
 800862c:	080093b0 	.word	0x080093b0
 8008630:	0800630d 	.word	0x0800630d
 8008634:	0800838d 	.word	0x0800838d
 8008638:	080093ac 	.word	0x080093ac

0800863c <__sflush_r>:
 800863c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008644:	0716      	lsls	r6, r2, #28
 8008646:	4605      	mov	r5, r0
 8008648:	460c      	mov	r4, r1
 800864a:	d454      	bmi.n	80086f6 <__sflush_r+0xba>
 800864c:	684b      	ldr	r3, [r1, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dc02      	bgt.n	8008658 <__sflush_r+0x1c>
 8008652:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	dd48      	ble.n	80086ea <__sflush_r+0xae>
 8008658:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800865a:	2e00      	cmp	r6, #0
 800865c:	d045      	beq.n	80086ea <__sflush_r+0xae>
 800865e:	2300      	movs	r3, #0
 8008660:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008664:	682f      	ldr	r7, [r5, #0]
 8008666:	6a21      	ldr	r1, [r4, #32]
 8008668:	602b      	str	r3, [r5, #0]
 800866a:	d030      	beq.n	80086ce <__sflush_r+0x92>
 800866c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	0759      	lsls	r1, r3, #29
 8008672:	d505      	bpl.n	8008680 <__sflush_r+0x44>
 8008674:	6863      	ldr	r3, [r4, #4]
 8008676:	1ad2      	subs	r2, r2, r3
 8008678:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800867a:	b10b      	cbz	r3, 8008680 <__sflush_r+0x44>
 800867c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	2300      	movs	r3, #0
 8008682:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008684:	6a21      	ldr	r1, [r4, #32]
 8008686:	4628      	mov	r0, r5
 8008688:	47b0      	blx	r6
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	d106      	bne.n	800869e <__sflush_r+0x62>
 8008690:	6829      	ldr	r1, [r5, #0]
 8008692:	291d      	cmp	r1, #29
 8008694:	d82b      	bhi.n	80086ee <__sflush_r+0xb2>
 8008696:	4a2a      	ldr	r2, [pc, #168]	@ (8008740 <__sflush_r+0x104>)
 8008698:	40ca      	lsrs	r2, r1
 800869a:	07d6      	lsls	r6, r2, #31
 800869c:	d527      	bpl.n	80086ee <__sflush_r+0xb2>
 800869e:	2200      	movs	r2, #0
 80086a0:	6062      	str	r2, [r4, #4]
 80086a2:	04d9      	lsls	r1, r3, #19
 80086a4:	6922      	ldr	r2, [r4, #16]
 80086a6:	6022      	str	r2, [r4, #0]
 80086a8:	d504      	bpl.n	80086b4 <__sflush_r+0x78>
 80086aa:	1c42      	adds	r2, r0, #1
 80086ac:	d101      	bne.n	80086b2 <__sflush_r+0x76>
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	b903      	cbnz	r3, 80086b4 <__sflush_r+0x78>
 80086b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80086b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086b6:	602f      	str	r7, [r5, #0]
 80086b8:	b1b9      	cbz	r1, 80086ea <__sflush_r+0xae>
 80086ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086be:	4299      	cmp	r1, r3
 80086c0:	d002      	beq.n	80086c8 <__sflush_r+0x8c>
 80086c2:	4628      	mov	r0, r5
 80086c4:	f7ff f9e8 	bl	8007a98 <_free_r>
 80086c8:	2300      	movs	r3, #0
 80086ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80086cc:	e00d      	b.n	80086ea <__sflush_r+0xae>
 80086ce:	2301      	movs	r3, #1
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b0      	blx	r6
 80086d4:	4602      	mov	r2, r0
 80086d6:	1c50      	adds	r0, r2, #1
 80086d8:	d1c9      	bne.n	800866e <__sflush_r+0x32>
 80086da:	682b      	ldr	r3, [r5, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0c6      	beq.n	800866e <__sflush_r+0x32>
 80086e0:	2b1d      	cmp	r3, #29
 80086e2:	d001      	beq.n	80086e8 <__sflush_r+0xac>
 80086e4:	2b16      	cmp	r3, #22
 80086e6:	d11e      	bne.n	8008726 <__sflush_r+0xea>
 80086e8:	602f      	str	r7, [r5, #0]
 80086ea:	2000      	movs	r0, #0
 80086ec:	e022      	b.n	8008734 <__sflush_r+0xf8>
 80086ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086f2:	b21b      	sxth	r3, r3
 80086f4:	e01b      	b.n	800872e <__sflush_r+0xf2>
 80086f6:	690f      	ldr	r7, [r1, #16]
 80086f8:	2f00      	cmp	r7, #0
 80086fa:	d0f6      	beq.n	80086ea <__sflush_r+0xae>
 80086fc:	0793      	lsls	r3, r2, #30
 80086fe:	680e      	ldr	r6, [r1, #0]
 8008700:	bf08      	it	eq
 8008702:	694b      	ldreq	r3, [r1, #20]
 8008704:	600f      	str	r7, [r1, #0]
 8008706:	bf18      	it	ne
 8008708:	2300      	movne	r3, #0
 800870a:	eba6 0807 	sub.w	r8, r6, r7
 800870e:	608b      	str	r3, [r1, #8]
 8008710:	f1b8 0f00 	cmp.w	r8, #0
 8008714:	dde9      	ble.n	80086ea <__sflush_r+0xae>
 8008716:	6a21      	ldr	r1, [r4, #32]
 8008718:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800871a:	4643      	mov	r3, r8
 800871c:	463a      	mov	r2, r7
 800871e:	4628      	mov	r0, r5
 8008720:	47b0      	blx	r6
 8008722:	2800      	cmp	r0, #0
 8008724:	dc08      	bgt.n	8008738 <__sflush_r+0xfc>
 8008726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800872a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800872e:	81a3      	strh	r3, [r4, #12]
 8008730:	f04f 30ff 	mov.w	r0, #4294967295
 8008734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008738:	4407      	add	r7, r0
 800873a:	eba8 0800 	sub.w	r8, r8, r0
 800873e:	e7e7      	b.n	8008710 <__sflush_r+0xd4>
 8008740:	20400001 	.word	0x20400001

08008744 <_fflush_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	690b      	ldr	r3, [r1, #16]
 8008748:	4605      	mov	r5, r0
 800874a:	460c      	mov	r4, r1
 800874c:	b913      	cbnz	r3, 8008754 <_fflush_r+0x10>
 800874e:	2500      	movs	r5, #0
 8008750:	4628      	mov	r0, r5
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	b118      	cbz	r0, 800875e <_fflush_r+0x1a>
 8008756:	6a03      	ldr	r3, [r0, #32]
 8008758:	b90b      	cbnz	r3, 800875e <_fflush_r+0x1a>
 800875a:	f7fe fa19 	bl	8006b90 <__sinit>
 800875e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0f3      	beq.n	800874e <_fflush_r+0xa>
 8008766:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008768:	07d0      	lsls	r0, r2, #31
 800876a:	d404      	bmi.n	8008776 <_fflush_r+0x32>
 800876c:	0599      	lsls	r1, r3, #22
 800876e:	d402      	bmi.n	8008776 <_fflush_r+0x32>
 8008770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008772:	f7fe fb26 	bl	8006dc2 <__retarget_lock_acquire_recursive>
 8008776:	4628      	mov	r0, r5
 8008778:	4621      	mov	r1, r4
 800877a:	f7ff ff5f 	bl	800863c <__sflush_r>
 800877e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008780:	07da      	lsls	r2, r3, #31
 8008782:	4605      	mov	r5, r0
 8008784:	d4e4      	bmi.n	8008750 <_fflush_r+0xc>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	059b      	lsls	r3, r3, #22
 800878a:	d4e1      	bmi.n	8008750 <_fflush_r+0xc>
 800878c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878e:	f7fe fb19 	bl	8006dc4 <__retarget_lock_release_recursive>
 8008792:	e7dd      	b.n	8008750 <_fflush_r+0xc>

08008794 <memmove>:
 8008794:	4288      	cmp	r0, r1
 8008796:	b510      	push	{r4, lr}
 8008798:	eb01 0402 	add.w	r4, r1, r2
 800879c:	d902      	bls.n	80087a4 <memmove+0x10>
 800879e:	4284      	cmp	r4, r0
 80087a0:	4623      	mov	r3, r4
 80087a2:	d807      	bhi.n	80087b4 <memmove+0x20>
 80087a4:	1e43      	subs	r3, r0, #1
 80087a6:	42a1      	cmp	r1, r4
 80087a8:	d008      	beq.n	80087bc <memmove+0x28>
 80087aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087b2:	e7f8      	b.n	80087a6 <memmove+0x12>
 80087b4:	4402      	add	r2, r0
 80087b6:	4601      	mov	r1, r0
 80087b8:	428a      	cmp	r2, r1
 80087ba:	d100      	bne.n	80087be <memmove+0x2a>
 80087bc:	bd10      	pop	{r4, pc}
 80087be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087c6:	e7f7      	b.n	80087b8 <memmove+0x24>

080087c8 <_sbrk_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d06      	ldr	r5, [pc, #24]	@ (80087e4 <_sbrk_r+0x1c>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f7f9 fd1a 	bl	800220c <_sbrk>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_sbrk_r+0x1a>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_sbrk_r+0x1a>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20000c28 	.word	0x20000c28

080087e8 <__assert_func>:
 80087e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087ea:	4614      	mov	r4, r2
 80087ec:	461a      	mov	r2, r3
 80087ee:	4b09      	ldr	r3, [pc, #36]	@ (8008814 <__assert_func+0x2c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4605      	mov	r5, r0
 80087f4:	68d8      	ldr	r0, [r3, #12]
 80087f6:	b14c      	cbz	r4, 800880c <__assert_func+0x24>
 80087f8:	4b07      	ldr	r3, [pc, #28]	@ (8008818 <__assert_func+0x30>)
 80087fa:	9100      	str	r1, [sp, #0]
 80087fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008800:	4906      	ldr	r1, [pc, #24]	@ (800881c <__assert_func+0x34>)
 8008802:	462b      	mov	r3, r5
 8008804:	f000 f870 	bl	80088e8 <fiprintf>
 8008808:	f000 f880 	bl	800890c <abort>
 800880c:	4b04      	ldr	r3, [pc, #16]	@ (8008820 <__assert_func+0x38>)
 800880e:	461c      	mov	r4, r3
 8008810:	e7f3      	b.n	80087fa <__assert_func+0x12>
 8008812:	bf00      	nop
 8008814:	20000018 	.word	0x20000018
 8008818:	080093c1 	.word	0x080093c1
 800881c:	080093ce 	.word	0x080093ce
 8008820:	080093fc 	.word	0x080093fc

08008824 <_calloc_r>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	fba1 5402 	umull	r5, r4, r1, r2
 800882a:	b934      	cbnz	r4, 800883a <_calloc_r+0x16>
 800882c:	4629      	mov	r1, r5
 800882e:	f7ff f9a7 	bl	8007b80 <_malloc_r>
 8008832:	4606      	mov	r6, r0
 8008834:	b928      	cbnz	r0, 8008842 <_calloc_r+0x1e>
 8008836:	4630      	mov	r0, r6
 8008838:	bd70      	pop	{r4, r5, r6, pc}
 800883a:	220c      	movs	r2, #12
 800883c:	6002      	str	r2, [r0, #0]
 800883e:	2600      	movs	r6, #0
 8008840:	e7f9      	b.n	8008836 <_calloc_r+0x12>
 8008842:	462a      	mov	r2, r5
 8008844:	4621      	mov	r1, r4
 8008846:	f7fe fa3e 	bl	8006cc6 <memset>
 800884a:	e7f4      	b.n	8008836 <_calloc_r+0x12>

0800884c <__ascii_mbtowc>:
 800884c:	b082      	sub	sp, #8
 800884e:	b901      	cbnz	r1, 8008852 <__ascii_mbtowc+0x6>
 8008850:	a901      	add	r1, sp, #4
 8008852:	b142      	cbz	r2, 8008866 <__ascii_mbtowc+0x1a>
 8008854:	b14b      	cbz	r3, 800886a <__ascii_mbtowc+0x1e>
 8008856:	7813      	ldrb	r3, [r2, #0]
 8008858:	600b      	str	r3, [r1, #0]
 800885a:	7812      	ldrb	r2, [r2, #0]
 800885c:	1e10      	subs	r0, r2, #0
 800885e:	bf18      	it	ne
 8008860:	2001      	movne	r0, #1
 8008862:	b002      	add	sp, #8
 8008864:	4770      	bx	lr
 8008866:	4610      	mov	r0, r2
 8008868:	e7fb      	b.n	8008862 <__ascii_mbtowc+0x16>
 800886a:	f06f 0001 	mvn.w	r0, #1
 800886e:	e7f8      	b.n	8008862 <__ascii_mbtowc+0x16>

08008870 <_realloc_r>:
 8008870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008874:	4607      	mov	r7, r0
 8008876:	4614      	mov	r4, r2
 8008878:	460d      	mov	r5, r1
 800887a:	b921      	cbnz	r1, 8008886 <_realloc_r+0x16>
 800887c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008880:	4611      	mov	r1, r2
 8008882:	f7ff b97d 	b.w	8007b80 <_malloc_r>
 8008886:	b92a      	cbnz	r2, 8008894 <_realloc_r+0x24>
 8008888:	f7ff f906 	bl	8007a98 <_free_r>
 800888c:	4625      	mov	r5, r4
 800888e:	4628      	mov	r0, r5
 8008890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008894:	f000 f841 	bl	800891a <_malloc_usable_size_r>
 8008898:	4284      	cmp	r4, r0
 800889a:	4606      	mov	r6, r0
 800889c:	d802      	bhi.n	80088a4 <_realloc_r+0x34>
 800889e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088a2:	d8f4      	bhi.n	800888e <_realloc_r+0x1e>
 80088a4:	4621      	mov	r1, r4
 80088a6:	4638      	mov	r0, r7
 80088a8:	f7ff f96a 	bl	8007b80 <_malloc_r>
 80088ac:	4680      	mov	r8, r0
 80088ae:	b908      	cbnz	r0, 80088b4 <_realloc_r+0x44>
 80088b0:	4645      	mov	r5, r8
 80088b2:	e7ec      	b.n	800888e <_realloc_r+0x1e>
 80088b4:	42b4      	cmp	r4, r6
 80088b6:	4622      	mov	r2, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	bf28      	it	cs
 80088bc:	4632      	movcs	r2, r6
 80088be:	f7fe fa82 	bl	8006dc6 <memcpy>
 80088c2:	4629      	mov	r1, r5
 80088c4:	4638      	mov	r0, r7
 80088c6:	f7ff f8e7 	bl	8007a98 <_free_r>
 80088ca:	e7f1      	b.n	80088b0 <_realloc_r+0x40>

080088cc <__ascii_wctomb>:
 80088cc:	4603      	mov	r3, r0
 80088ce:	4608      	mov	r0, r1
 80088d0:	b141      	cbz	r1, 80088e4 <__ascii_wctomb+0x18>
 80088d2:	2aff      	cmp	r2, #255	@ 0xff
 80088d4:	d904      	bls.n	80088e0 <__ascii_wctomb+0x14>
 80088d6:	228a      	movs	r2, #138	@ 0x8a
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	f04f 30ff 	mov.w	r0, #4294967295
 80088de:	4770      	bx	lr
 80088e0:	700a      	strb	r2, [r1, #0]
 80088e2:	2001      	movs	r0, #1
 80088e4:	4770      	bx	lr
	...

080088e8 <fiprintf>:
 80088e8:	b40e      	push	{r1, r2, r3}
 80088ea:	b503      	push	{r0, r1, lr}
 80088ec:	4601      	mov	r1, r0
 80088ee:	ab03      	add	r3, sp, #12
 80088f0:	4805      	ldr	r0, [pc, #20]	@ (8008908 <fiprintf+0x20>)
 80088f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f6:	6800      	ldr	r0, [r0, #0]
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	f000 f83f 	bl	800897c <_vfiprintf_r>
 80088fe:	b002      	add	sp, #8
 8008900:	f85d eb04 	ldr.w	lr, [sp], #4
 8008904:	b003      	add	sp, #12
 8008906:	4770      	bx	lr
 8008908:	20000018 	.word	0x20000018

0800890c <abort>:
 800890c:	b508      	push	{r3, lr}
 800890e:	2006      	movs	r0, #6
 8008910:	f000 fa08 	bl	8008d24 <raise>
 8008914:	2001      	movs	r0, #1
 8008916:	f7f9 fc00 	bl	800211a <_exit>

0800891a <_malloc_usable_size_r>:
 800891a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800891e:	1f18      	subs	r0, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfbc      	itt	lt
 8008924:	580b      	ldrlt	r3, [r1, r0]
 8008926:	18c0      	addlt	r0, r0, r3
 8008928:	4770      	bx	lr

0800892a <__sfputc_r>:
 800892a:	6893      	ldr	r3, [r2, #8]
 800892c:	3b01      	subs	r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	b410      	push	{r4}
 8008932:	6093      	str	r3, [r2, #8]
 8008934:	da08      	bge.n	8008948 <__sfputc_r+0x1e>
 8008936:	6994      	ldr	r4, [r2, #24]
 8008938:	42a3      	cmp	r3, r4
 800893a:	db01      	blt.n	8008940 <__sfputc_r+0x16>
 800893c:	290a      	cmp	r1, #10
 800893e:	d103      	bne.n	8008948 <__sfputc_r+0x1e>
 8008940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008944:	f000 b932 	b.w	8008bac <__swbuf_r>
 8008948:	6813      	ldr	r3, [r2, #0]
 800894a:	1c58      	adds	r0, r3, #1
 800894c:	6010      	str	r0, [r2, #0]
 800894e:	7019      	strb	r1, [r3, #0]
 8008950:	4608      	mov	r0, r1
 8008952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008956:	4770      	bx	lr

08008958 <__sfputs_r>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	4606      	mov	r6, r0
 800895c:	460f      	mov	r7, r1
 800895e:	4614      	mov	r4, r2
 8008960:	18d5      	adds	r5, r2, r3
 8008962:	42ac      	cmp	r4, r5
 8008964:	d101      	bne.n	800896a <__sfputs_r+0x12>
 8008966:	2000      	movs	r0, #0
 8008968:	e007      	b.n	800897a <__sfputs_r+0x22>
 800896a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896e:	463a      	mov	r2, r7
 8008970:	4630      	mov	r0, r6
 8008972:	f7ff ffda 	bl	800892a <__sfputc_r>
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	d1f3      	bne.n	8008962 <__sfputs_r+0xa>
 800897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800897c <_vfiprintf_r>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	460d      	mov	r5, r1
 8008982:	b09d      	sub	sp, #116	@ 0x74
 8008984:	4614      	mov	r4, r2
 8008986:	4698      	mov	r8, r3
 8008988:	4606      	mov	r6, r0
 800898a:	b118      	cbz	r0, 8008994 <_vfiprintf_r+0x18>
 800898c:	6a03      	ldr	r3, [r0, #32]
 800898e:	b90b      	cbnz	r3, 8008994 <_vfiprintf_r+0x18>
 8008990:	f7fe f8fe 	bl	8006b90 <__sinit>
 8008994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008996:	07d9      	lsls	r1, r3, #31
 8008998:	d405      	bmi.n	80089a6 <_vfiprintf_r+0x2a>
 800899a:	89ab      	ldrh	r3, [r5, #12]
 800899c:	059a      	lsls	r2, r3, #22
 800899e:	d402      	bmi.n	80089a6 <_vfiprintf_r+0x2a>
 80089a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089a2:	f7fe fa0e 	bl	8006dc2 <__retarget_lock_acquire_recursive>
 80089a6:	89ab      	ldrh	r3, [r5, #12]
 80089a8:	071b      	lsls	r3, r3, #28
 80089aa:	d501      	bpl.n	80089b0 <_vfiprintf_r+0x34>
 80089ac:	692b      	ldr	r3, [r5, #16]
 80089ae:	b99b      	cbnz	r3, 80089d8 <_vfiprintf_r+0x5c>
 80089b0:	4629      	mov	r1, r5
 80089b2:	4630      	mov	r0, r6
 80089b4:	f000 f938 	bl	8008c28 <__swsetup_r>
 80089b8:	b170      	cbz	r0, 80089d8 <_vfiprintf_r+0x5c>
 80089ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089bc:	07dc      	lsls	r4, r3, #31
 80089be:	d504      	bpl.n	80089ca <_vfiprintf_r+0x4e>
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295
 80089c4:	b01d      	add	sp, #116	@ 0x74
 80089c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	0598      	lsls	r0, r3, #22
 80089ce:	d4f7      	bmi.n	80089c0 <_vfiprintf_r+0x44>
 80089d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089d2:	f7fe f9f7 	bl	8006dc4 <__retarget_lock_release_recursive>
 80089d6:	e7f3      	b.n	80089c0 <_vfiprintf_r+0x44>
 80089d8:	2300      	movs	r3, #0
 80089da:	9309      	str	r3, [sp, #36]	@ 0x24
 80089dc:	2320      	movs	r3, #32
 80089de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80089e6:	2330      	movs	r3, #48	@ 0x30
 80089e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b98 <_vfiprintf_r+0x21c>
 80089ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089f0:	f04f 0901 	mov.w	r9, #1
 80089f4:	4623      	mov	r3, r4
 80089f6:	469a      	mov	sl, r3
 80089f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089fc:	b10a      	cbz	r2, 8008a02 <_vfiprintf_r+0x86>
 80089fe:	2a25      	cmp	r2, #37	@ 0x25
 8008a00:	d1f9      	bne.n	80089f6 <_vfiprintf_r+0x7a>
 8008a02:	ebba 0b04 	subs.w	fp, sl, r4
 8008a06:	d00b      	beq.n	8008a20 <_vfiprintf_r+0xa4>
 8008a08:	465b      	mov	r3, fp
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7ff ffa2 	bl	8008958 <__sfputs_r>
 8008a14:	3001      	adds	r0, #1
 8008a16:	f000 80a7 	beq.w	8008b68 <_vfiprintf_r+0x1ec>
 8008a1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a1c:	445a      	add	r2, fp
 8008a1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a20:	f89a 3000 	ldrb.w	r3, [sl]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 809f 	beq.w	8008b68 <_vfiprintf_r+0x1ec>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a34:	f10a 0a01 	add.w	sl, sl, #1
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	9307      	str	r3, [sp, #28]
 8008a3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a40:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a42:	4654      	mov	r4, sl
 8008a44:	2205      	movs	r2, #5
 8008a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4a:	4853      	ldr	r0, [pc, #332]	@ (8008b98 <_vfiprintf_r+0x21c>)
 8008a4c:	f7f7 fbe0 	bl	8000210 <memchr>
 8008a50:	9a04      	ldr	r2, [sp, #16]
 8008a52:	b9d8      	cbnz	r0, 8008a8c <_vfiprintf_r+0x110>
 8008a54:	06d1      	lsls	r1, r2, #27
 8008a56:	bf44      	itt	mi
 8008a58:	2320      	movmi	r3, #32
 8008a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a5e:	0713      	lsls	r3, r2, #28
 8008a60:	bf44      	itt	mi
 8008a62:	232b      	movmi	r3, #43	@ 0x2b
 8008a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a68:	f89a 3000 	ldrb.w	r3, [sl]
 8008a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a6e:	d015      	beq.n	8008a9c <_vfiprintf_r+0x120>
 8008a70:	9a07      	ldr	r2, [sp, #28]
 8008a72:	4654      	mov	r4, sl
 8008a74:	2000      	movs	r0, #0
 8008a76:	f04f 0c0a 	mov.w	ip, #10
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a80:	3b30      	subs	r3, #48	@ 0x30
 8008a82:	2b09      	cmp	r3, #9
 8008a84:	d94b      	bls.n	8008b1e <_vfiprintf_r+0x1a2>
 8008a86:	b1b0      	cbz	r0, 8008ab6 <_vfiprintf_r+0x13a>
 8008a88:	9207      	str	r2, [sp, #28]
 8008a8a:	e014      	b.n	8008ab6 <_vfiprintf_r+0x13a>
 8008a8c:	eba0 0308 	sub.w	r3, r0, r8
 8008a90:	fa09 f303 	lsl.w	r3, r9, r3
 8008a94:	4313      	orrs	r3, r2
 8008a96:	9304      	str	r3, [sp, #16]
 8008a98:	46a2      	mov	sl, r4
 8008a9a:	e7d2      	b.n	8008a42 <_vfiprintf_r+0xc6>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	1d19      	adds	r1, r3, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	9103      	str	r1, [sp, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	bfbb      	ittet	lt
 8008aa8:	425b      	neglt	r3, r3
 8008aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8008aae:	9307      	strge	r3, [sp, #28]
 8008ab0:	9307      	strlt	r3, [sp, #28]
 8008ab2:	bfb8      	it	lt
 8008ab4:	9204      	strlt	r2, [sp, #16]
 8008ab6:	7823      	ldrb	r3, [r4, #0]
 8008ab8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aba:	d10a      	bne.n	8008ad2 <_vfiprintf_r+0x156>
 8008abc:	7863      	ldrb	r3, [r4, #1]
 8008abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ac0:	d132      	bne.n	8008b28 <_vfiprintf_r+0x1ac>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	1d1a      	adds	r2, r3, #4
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	9203      	str	r2, [sp, #12]
 8008aca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ace:	3402      	adds	r4, #2
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ba8 <_vfiprintf_r+0x22c>
 8008ad6:	7821      	ldrb	r1, [r4, #0]
 8008ad8:	2203      	movs	r2, #3
 8008ada:	4650      	mov	r0, sl
 8008adc:	f7f7 fb98 	bl	8000210 <memchr>
 8008ae0:	b138      	cbz	r0, 8008af2 <_vfiprintf_r+0x176>
 8008ae2:	9b04      	ldr	r3, [sp, #16]
 8008ae4:	eba0 000a 	sub.w	r0, r0, sl
 8008ae8:	2240      	movs	r2, #64	@ 0x40
 8008aea:	4082      	lsls	r2, r0
 8008aec:	4313      	orrs	r3, r2
 8008aee:	3401      	adds	r4, #1
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af6:	4829      	ldr	r0, [pc, #164]	@ (8008b9c <_vfiprintf_r+0x220>)
 8008af8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008afc:	2206      	movs	r2, #6
 8008afe:	f7f7 fb87 	bl	8000210 <memchr>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d03f      	beq.n	8008b86 <_vfiprintf_r+0x20a>
 8008b06:	4b26      	ldr	r3, [pc, #152]	@ (8008ba0 <_vfiprintf_r+0x224>)
 8008b08:	bb1b      	cbnz	r3, 8008b52 <_vfiprintf_r+0x1d6>
 8008b0a:	9b03      	ldr	r3, [sp, #12]
 8008b0c:	3307      	adds	r3, #7
 8008b0e:	f023 0307 	bic.w	r3, r3, #7
 8008b12:	3308      	adds	r3, #8
 8008b14:	9303      	str	r3, [sp, #12]
 8008b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b18:	443b      	add	r3, r7
 8008b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b1c:	e76a      	b.n	80089f4 <_vfiprintf_r+0x78>
 8008b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b22:	460c      	mov	r4, r1
 8008b24:	2001      	movs	r0, #1
 8008b26:	e7a8      	b.n	8008a7a <_vfiprintf_r+0xfe>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	3401      	adds	r4, #1
 8008b2c:	9305      	str	r3, [sp, #20]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	f04f 0c0a 	mov.w	ip, #10
 8008b34:	4620      	mov	r0, r4
 8008b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b3a:	3a30      	subs	r2, #48	@ 0x30
 8008b3c:	2a09      	cmp	r2, #9
 8008b3e:	d903      	bls.n	8008b48 <_vfiprintf_r+0x1cc>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0c6      	beq.n	8008ad2 <_vfiprintf_r+0x156>
 8008b44:	9105      	str	r1, [sp, #20]
 8008b46:	e7c4      	b.n	8008ad2 <_vfiprintf_r+0x156>
 8008b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e7f0      	b.n	8008b34 <_vfiprintf_r+0x1b8>
 8008b52:	ab03      	add	r3, sp, #12
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	462a      	mov	r2, r5
 8008b58:	4b12      	ldr	r3, [pc, #72]	@ (8008ba4 <_vfiprintf_r+0x228>)
 8008b5a:	a904      	add	r1, sp, #16
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7fd fbd5 	bl	800630c <_printf_float>
 8008b62:	4607      	mov	r7, r0
 8008b64:	1c78      	adds	r0, r7, #1
 8008b66:	d1d6      	bne.n	8008b16 <_vfiprintf_r+0x19a>
 8008b68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b6a:	07d9      	lsls	r1, r3, #31
 8008b6c:	d405      	bmi.n	8008b7a <_vfiprintf_r+0x1fe>
 8008b6e:	89ab      	ldrh	r3, [r5, #12]
 8008b70:	059a      	lsls	r2, r3, #22
 8008b72:	d402      	bmi.n	8008b7a <_vfiprintf_r+0x1fe>
 8008b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b76:	f7fe f925 	bl	8006dc4 <__retarget_lock_release_recursive>
 8008b7a:	89ab      	ldrh	r3, [r5, #12]
 8008b7c:	065b      	lsls	r3, r3, #25
 8008b7e:	f53f af1f 	bmi.w	80089c0 <_vfiprintf_r+0x44>
 8008b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b84:	e71e      	b.n	80089c4 <_vfiprintf_r+0x48>
 8008b86:	ab03      	add	r3, sp, #12
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	462a      	mov	r2, r5
 8008b8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <_vfiprintf_r+0x228>)
 8008b8e:	a904      	add	r1, sp, #16
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7fd fe53 	bl	800683c <_printf_i>
 8008b96:	e7e4      	b.n	8008b62 <_vfiprintf_r+0x1e6>
 8008b98:	080093a6 	.word	0x080093a6
 8008b9c:	080093b0 	.word	0x080093b0
 8008ba0:	0800630d 	.word	0x0800630d
 8008ba4:	08008959 	.word	0x08008959
 8008ba8:	080093ac 	.word	0x080093ac

08008bac <__swbuf_r>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	460e      	mov	r6, r1
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	b118      	cbz	r0, 8008bbe <__swbuf_r+0x12>
 8008bb6:	6a03      	ldr	r3, [r0, #32]
 8008bb8:	b90b      	cbnz	r3, 8008bbe <__swbuf_r+0x12>
 8008bba:	f7fd ffe9 	bl	8006b90 <__sinit>
 8008bbe:	69a3      	ldr	r3, [r4, #24]
 8008bc0:	60a3      	str	r3, [r4, #8]
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	071a      	lsls	r2, r3, #28
 8008bc6:	d501      	bpl.n	8008bcc <__swbuf_r+0x20>
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	b943      	cbnz	r3, 8008bde <__swbuf_r+0x32>
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4628      	mov	r0, r5
 8008bd0:	f000 f82a 	bl	8008c28 <__swsetup_r>
 8008bd4:	b118      	cbz	r0, 8008bde <__swbuf_r+0x32>
 8008bd6:	f04f 37ff 	mov.w	r7, #4294967295
 8008bda:	4638      	mov	r0, r7
 8008bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	6922      	ldr	r2, [r4, #16]
 8008be2:	1a98      	subs	r0, r3, r2
 8008be4:	6963      	ldr	r3, [r4, #20]
 8008be6:	b2f6      	uxtb	r6, r6
 8008be8:	4283      	cmp	r3, r0
 8008bea:	4637      	mov	r7, r6
 8008bec:	dc05      	bgt.n	8008bfa <__swbuf_r+0x4e>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7ff fda7 	bl	8008744 <_fflush_r>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d1ed      	bne.n	8008bd6 <__swbuf_r+0x2a>
 8008bfa:	68a3      	ldr	r3, [r4, #8]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	60a3      	str	r3, [r4, #8]
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	6022      	str	r2, [r4, #0]
 8008c06:	701e      	strb	r6, [r3, #0]
 8008c08:	6962      	ldr	r2, [r4, #20]
 8008c0a:	1c43      	adds	r3, r0, #1
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d004      	beq.n	8008c1a <__swbuf_r+0x6e>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	07db      	lsls	r3, r3, #31
 8008c14:	d5e1      	bpl.n	8008bda <__swbuf_r+0x2e>
 8008c16:	2e0a      	cmp	r6, #10
 8008c18:	d1df      	bne.n	8008bda <__swbuf_r+0x2e>
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f7ff fd91 	bl	8008744 <_fflush_r>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d0d9      	beq.n	8008bda <__swbuf_r+0x2e>
 8008c26:	e7d6      	b.n	8008bd6 <__swbuf_r+0x2a>

08008c28 <__swsetup_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4b29      	ldr	r3, [pc, #164]	@ (8008cd0 <__swsetup_r+0xa8>)
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	460c      	mov	r4, r1
 8008c32:	b118      	cbz	r0, 8008c3c <__swsetup_r+0x14>
 8008c34:	6a03      	ldr	r3, [r0, #32]
 8008c36:	b90b      	cbnz	r3, 8008c3c <__swsetup_r+0x14>
 8008c38:	f7fd ffaa 	bl	8006b90 <__sinit>
 8008c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c40:	0719      	lsls	r1, r3, #28
 8008c42:	d422      	bmi.n	8008c8a <__swsetup_r+0x62>
 8008c44:	06da      	lsls	r2, r3, #27
 8008c46:	d407      	bmi.n	8008c58 <__swsetup_r+0x30>
 8008c48:	2209      	movs	r2, #9
 8008c4a:	602a      	str	r2, [r5, #0]
 8008c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	f04f 30ff 	mov.w	r0, #4294967295
 8008c56:	e033      	b.n	8008cc0 <__swsetup_r+0x98>
 8008c58:	0758      	lsls	r0, r3, #29
 8008c5a:	d512      	bpl.n	8008c82 <__swsetup_r+0x5a>
 8008c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c5e:	b141      	cbz	r1, 8008c72 <__swsetup_r+0x4a>
 8008c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c64:	4299      	cmp	r1, r3
 8008c66:	d002      	beq.n	8008c6e <__swsetup_r+0x46>
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f7fe ff15 	bl	8007a98 <_free_r>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	6063      	str	r3, [r4, #4]
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f043 0308 	orr.w	r3, r3, #8
 8008c88:	81a3      	strh	r3, [r4, #12]
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	b94b      	cbnz	r3, 8008ca2 <__swsetup_r+0x7a>
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c98:	d003      	beq.n	8008ca2 <__swsetup_r+0x7a>
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 f883 	bl	8008da8 <__smakebuf_r>
 8008ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca6:	f013 0201 	ands.w	r2, r3, #1
 8008caa:	d00a      	beq.n	8008cc2 <__swsetup_r+0x9a>
 8008cac:	2200      	movs	r2, #0
 8008cae:	60a2      	str	r2, [r4, #8]
 8008cb0:	6962      	ldr	r2, [r4, #20]
 8008cb2:	4252      	negs	r2, r2
 8008cb4:	61a2      	str	r2, [r4, #24]
 8008cb6:	6922      	ldr	r2, [r4, #16]
 8008cb8:	b942      	cbnz	r2, 8008ccc <__swsetup_r+0xa4>
 8008cba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cbe:	d1c5      	bne.n	8008c4c <__swsetup_r+0x24>
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}
 8008cc2:	0799      	lsls	r1, r3, #30
 8008cc4:	bf58      	it	pl
 8008cc6:	6962      	ldrpl	r2, [r4, #20]
 8008cc8:	60a2      	str	r2, [r4, #8]
 8008cca:	e7f4      	b.n	8008cb6 <__swsetup_r+0x8e>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e7f7      	b.n	8008cc0 <__swsetup_r+0x98>
 8008cd0:	20000018 	.word	0x20000018

08008cd4 <_raise_r>:
 8008cd4:	291f      	cmp	r1, #31
 8008cd6:	b538      	push	{r3, r4, r5, lr}
 8008cd8:	4605      	mov	r5, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	d904      	bls.n	8008ce8 <_raise_r+0x14>
 8008cde:	2316      	movs	r3, #22
 8008ce0:	6003      	str	r3, [r0, #0]
 8008ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008cea:	b112      	cbz	r2, 8008cf2 <_raise_r+0x1e>
 8008cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cf0:	b94b      	cbnz	r3, 8008d06 <_raise_r+0x32>
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f000 f830 	bl	8008d58 <_getpid_r>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d02:	f000 b817 	b.w	8008d34 <_kill_r>
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d00a      	beq.n	8008d20 <_raise_r+0x4c>
 8008d0a:	1c59      	adds	r1, r3, #1
 8008d0c:	d103      	bne.n	8008d16 <_raise_r+0x42>
 8008d0e:	2316      	movs	r3, #22
 8008d10:	6003      	str	r3, [r0, #0]
 8008d12:	2001      	movs	r0, #1
 8008d14:	e7e7      	b.n	8008ce6 <_raise_r+0x12>
 8008d16:	2100      	movs	r1, #0
 8008d18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4798      	blx	r3
 8008d20:	2000      	movs	r0, #0
 8008d22:	e7e0      	b.n	8008ce6 <_raise_r+0x12>

08008d24 <raise>:
 8008d24:	4b02      	ldr	r3, [pc, #8]	@ (8008d30 <raise+0xc>)
 8008d26:	4601      	mov	r1, r0
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	f7ff bfd3 	b.w	8008cd4 <_raise_r>
 8008d2e:	bf00      	nop
 8008d30:	20000018 	.word	0x20000018

08008d34 <_kill_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4d07      	ldr	r5, [pc, #28]	@ (8008d54 <_kill_r+0x20>)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	4611      	mov	r1, r2
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	f7f9 f9da 	bl	80020fa <_kill>
 8008d46:	1c43      	adds	r3, r0, #1
 8008d48:	d102      	bne.n	8008d50 <_kill_r+0x1c>
 8008d4a:	682b      	ldr	r3, [r5, #0]
 8008d4c:	b103      	cbz	r3, 8008d50 <_kill_r+0x1c>
 8008d4e:	6023      	str	r3, [r4, #0]
 8008d50:	bd38      	pop	{r3, r4, r5, pc}
 8008d52:	bf00      	nop
 8008d54:	20000c28 	.word	0x20000c28

08008d58 <_getpid_r>:
 8008d58:	f7f9 b9c7 	b.w	80020ea <_getpid>

08008d5c <__swhatbuf_r>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	460c      	mov	r4, r1
 8008d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d64:	2900      	cmp	r1, #0
 8008d66:	b096      	sub	sp, #88	@ 0x58
 8008d68:	4615      	mov	r5, r2
 8008d6a:	461e      	mov	r6, r3
 8008d6c:	da0d      	bge.n	8008d8a <__swhatbuf_r+0x2e>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d74:	f04f 0100 	mov.w	r1, #0
 8008d78:	bf14      	ite	ne
 8008d7a:	2340      	movne	r3, #64	@ 0x40
 8008d7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d80:	2000      	movs	r0, #0
 8008d82:	6031      	str	r1, [r6, #0]
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	b016      	add	sp, #88	@ 0x58
 8008d88:	bd70      	pop	{r4, r5, r6, pc}
 8008d8a:	466a      	mov	r2, sp
 8008d8c:	f000 f848 	bl	8008e20 <_fstat_r>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	dbec      	blt.n	8008d6e <__swhatbuf_r+0x12>
 8008d94:	9901      	ldr	r1, [sp, #4]
 8008d96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d9e:	4259      	negs	r1, r3
 8008da0:	4159      	adcs	r1, r3
 8008da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008da6:	e7eb      	b.n	8008d80 <__swhatbuf_r+0x24>

08008da8 <__smakebuf_r>:
 8008da8:	898b      	ldrh	r3, [r1, #12]
 8008daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dac:	079d      	lsls	r5, r3, #30
 8008dae:	4606      	mov	r6, r0
 8008db0:	460c      	mov	r4, r1
 8008db2:	d507      	bpl.n	8008dc4 <__smakebuf_r+0x1c>
 8008db4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	6163      	str	r3, [r4, #20]
 8008dc0:	b003      	add	sp, #12
 8008dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc4:	ab01      	add	r3, sp, #4
 8008dc6:	466a      	mov	r2, sp
 8008dc8:	f7ff ffc8 	bl	8008d5c <__swhatbuf_r>
 8008dcc:	9f00      	ldr	r7, [sp, #0]
 8008dce:	4605      	mov	r5, r0
 8008dd0:	4639      	mov	r1, r7
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7fe fed4 	bl	8007b80 <_malloc_r>
 8008dd8:	b948      	cbnz	r0, 8008dee <__smakebuf_r+0x46>
 8008dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dde:	059a      	lsls	r2, r3, #22
 8008de0:	d4ee      	bmi.n	8008dc0 <__smakebuf_r+0x18>
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	f043 0302 	orr.w	r3, r3, #2
 8008dea:	81a3      	strh	r3, [r4, #12]
 8008dec:	e7e2      	b.n	8008db4 <__smakebuf_r+0xc>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	6020      	str	r0, [r4, #0]
 8008df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008dfe:	b15b      	cbz	r3, 8008e18 <__smakebuf_r+0x70>
 8008e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e04:	4630      	mov	r0, r6
 8008e06:	f000 f81d 	bl	8008e44 <_isatty_r>
 8008e0a:	b128      	cbz	r0, 8008e18 <__smakebuf_r+0x70>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	f043 0301 	orr.w	r3, r3, #1
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	431d      	orrs	r5, r3
 8008e1c:	81a5      	strh	r5, [r4, #12]
 8008e1e:	e7cf      	b.n	8008dc0 <__smakebuf_r+0x18>

08008e20 <_fstat_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d07      	ldr	r5, [pc, #28]	@ (8008e40 <_fstat_r+0x20>)
 8008e24:	2300      	movs	r3, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	602b      	str	r3, [r5, #0]
 8008e2e:	f7f9 f9c4 	bl	80021ba <_fstat>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	d102      	bne.n	8008e3c <_fstat_r+0x1c>
 8008e36:	682b      	ldr	r3, [r5, #0]
 8008e38:	b103      	cbz	r3, 8008e3c <_fstat_r+0x1c>
 8008e3a:	6023      	str	r3, [r4, #0]
 8008e3c:	bd38      	pop	{r3, r4, r5, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000c28 	.word	0x20000c28

08008e44 <_isatty_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d06      	ldr	r5, [pc, #24]	@ (8008e60 <_isatty_r+0x1c>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	602b      	str	r3, [r5, #0]
 8008e50:	f7f9 f9c3 	bl	80021da <_isatty>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_isatty_r+0x1a>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_isatty_r+0x1a>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	20000c28 	.word	0x20000c28

08008e64 <_init>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	bf00      	nop
 8008e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6a:	bc08      	pop	{r3}
 8008e6c:	469e      	mov	lr, r3
 8008e6e:	4770      	bx	lr

08008e70 <_fini>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	bf00      	nop
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr
