
STM32H756ZG_Nucleo_sandbox_FCDEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000103c  0800b108  0800b108  0000c108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c144  0800c144  0000e314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c144  0800c144  0000d144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c14c  0800c14c  0000e314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c14c  0800c14c  0000d14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c150  0800c150  0000d150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c154  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  0800c328  0000e1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  0800c3c8  0000e274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b70  20000318  0800c468  0000e318  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000e88  0800c468  0000ee88  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000e314  2**0
                  CONTENTS, READONLY
 14 .debug_info   000174b4  00000000  00000000  0000e344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c0d  00000000  00000000  000257f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001330  00000000  00000000  00028408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ee9  00000000  00000000  00029738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000287bf  00000000  00000000  0002a621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a8f  00000000  00000000  00052de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5e60  00000000  00000000  0006986f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015f6cf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000065ac  00000000  00000000  0015f714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  00165cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000318 	.word	0x20000318
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b0ec 	.word	0x0800b0ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000031c 	.word	0x2000031c
 800020c:	0800b0ec 	.word	0x0800b0ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <a_bmp390_iic_spi_read>:
 *             - 0 success
 *             - 1 iic spi read failed
 * @note       none
 */
static uint8_t a_bmp390_iic_spi_read(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	72fb      	strb	r3, [r7, #11]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                      /* iic interface */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10f      	bne.n	8000ff2 <a_bmp390_iic_spi_read+0x3e>
    {
        if (handle->iic_read(handle->iic_addr, reg, buf, len) != 0)                   /* iic read */
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	7818      	ldrb	r0, [r3, #0]
 8000fdc:	893b      	ldrh	r3, [r7, #8]
 8000fde:	7af9      	ldrb	r1, [r7, #11]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	47a0      	blx	r4
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <a_bmp390_iic_spi_read+0x3a>
        {
            return 1;                                                                 /* return error */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e029      	b.n	8001042 <a_bmp390_iic_spi_read+0x8e>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e027      	b.n	8001042 <a_bmp390_iic_spi_read+0x8e>
        }
    }
    else                                                                              /* spi interface */
    {
        reg |= 1 << 7;                                                                /* set read mode */
 8000ff2:	7afb      	ldrb	r3, [r7, #11]
 8000ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ff8:	72fb      	strb	r3, [r7, #11]
        if (handle->spi_read(reg, handle->buf, 
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	1c51      	adds	r1, r2, #1
 8001004:	893a      	ldrh	r2, [r7, #8]
 8001006:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800100a:	bf28      	it	cs
 800100c:	f44f 7200 	movcs.w	r2, #512	@ 0x200
 8001010:	b292      	uxth	r2, r2
 8001012:	3201      	adds	r2, #1
 8001014:	b292      	uxth	r2, r2
 8001016:	7af8      	ldrb	r0, [r7, #11]
 8001018:	4798      	blx	r3
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <a_bmp390_iic_spi_read+0x70>
                             len > 512 ? (512 + 1) : (len + 1)) != 0)                 /* spi read */
        {
            return 1;                                                                 /* return error */
 8001020:	2301      	movs	r3, #1
 8001022:	e00e      	b.n	8001042 <a_bmp390_iic_spi_read+0x8e>
        }
        memcpy(buf, handle->buf+1, (len > 512) ? 512 : len);                          /* copy data */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	1c59      	adds	r1, r3, #1
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001030:	bf28      	it	cs
 8001032:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f007 fc3f 	bl	80088be <memcpy>
        
        return 0;                                                                     /* success return 0 */
 8001040:	2300      	movs	r3, #0
    }
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}

0800104a <a_bmp390_iic_spi_write>:
 *            - 0 success
 *            - 1 iic spi write failed
 * @note      none
 */
static uint8_t a_bmp390_iic_spi_write(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 800104a:	b590      	push	{r4, r7, lr}
 800104c:	b087      	sub	sp, #28
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	461a      	mov	r2, r3
 8001056:	460b      	mov	r3, r1
 8001058:	72fb      	strb	r3, [r7, #11]
 800105a:	4613      	mov	r3, r2
 800105c:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                             /* iic interface */
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8001064:	2b00      	cmp	r3, #0
 8001066:	d11f      	bne.n	80010a8 <a_bmp390_iic_spi_write+0x5e>
    {
        uint16_t i;
        
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001068:	2300      	movs	r3, #0
 800106a:	82fb      	strh	r3, [r7, #22]
 800106c:	e016      	b.n	800109c <a_bmp390_iic_spi_write+0x52>
        {
            if (handle->iic_write(handle->iic_addr, 
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f8d3 4210 	ldr.w	r4, [r3, #528]	@ 0x210
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	7818      	ldrb	r0, [r3, #0]
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	4413      	add	r3, r2
 8001080:	b2d9      	uxtb	r1, r3
 8001082:	8afb      	ldrh	r3, [r7, #22]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	441a      	add	r2, r3
 8001088:	2301      	movs	r3, #1
 800108a:	47a0      	blx	r4
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <a_bmp390_iic_spi_write+0x4c>
                                  (uint8_t)(reg + i), buf + i, 1) != 0)      /* iic write */
            {
                return 1;                                                    /* return error */
 8001092:	2301      	movs	r3, #1
 8001094:	e029      	b.n	80010ea <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001096:	8afb      	ldrh	r3, [r7, #22]
 8001098:	3301      	adds	r3, #1
 800109a:	82fb      	strh	r3, [r7, #22]
 800109c:	8afa      	ldrh	r2, [r7, #22]
 800109e:	893b      	ldrh	r3, [r7, #8]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3e4      	bcc.n	800106e <a_bmp390_iic_spi_write+0x24>
            }
        }
        
        return 0;                                                            /* success return 0 */
 80010a4:	2300      	movs	r3, #0
 80010a6:	e020      	b.n	80010ea <a_bmp390_iic_spi_write+0xa0>
    }
    else
    {
        uint16_t i;
        
        reg &= ~(1 << 7);                                                    /* write mode */
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010ae:	72fb      	strb	r3, [r7, #11]
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 80010b0:	2300      	movs	r3, #0
 80010b2:	82bb      	strh	r3, [r7, #20]
 80010b4:	e014      	b.n	80010e0 <a_bmp390_iic_spi_write+0x96>
        {
            if (handle->spi_write((uint8_t)(reg + i), buf + i, 1) != 0)      /* spi write */
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80010bc:	8aba      	ldrh	r2, [r7, #20]
 80010be:	b2d1      	uxtb	r1, r2
 80010c0:	7afa      	ldrb	r2, [r7, #11]
 80010c2:	440a      	add	r2, r1
 80010c4:	b2d0      	uxtb	r0, r2
 80010c6:	8aba      	ldrh	r2, [r7, #20]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4411      	add	r1, r2
 80010cc:	2201      	movs	r2, #1
 80010ce:	4798      	blx	r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <a_bmp390_iic_spi_write+0x90>
            {
                return 1;                                                    /* return error */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e007      	b.n	80010ea <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 80010da:	8abb      	ldrh	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	82bb      	strh	r3, [r7, #20]
 80010e0:	8aba      	ldrh	r2, [r7, #20]
 80010e2:	893b      	ldrh	r3, [r7, #8]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3e6      	bcc.n	80010b6 <a_bmp390_iic_spi_write+0x6c>
            }
        }
        
        return 0;                                                            /* success return 0 */
 80010e8:	2300      	movs	r3, #0
    }
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}
	...

080010f4 <a_bmp390_get_calibration_data>:
 *            - 0 success
 *            - 1 get calibration data failed
 * @note      none
 */
static uint8_t a_bmp390_get_calibration_data(bmp390_handle_t *handle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    uint8_t buf[2];
    
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T1_L, (uint8_t *)buf, 2) != 0)  /* read t1 */
 80010fc:	f107 020c 	add.w	r2, r7, #12
 8001100:	2302      	movs	r3, #2
 8001102:	2131      	movs	r1, #49	@ 0x31
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff55 	bl	8000fb4 <a_bmp390_iic_spi_read>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <a_bmp390_get_calibration_data+0x2a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001116:	48a8      	ldr	r0, [pc, #672]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 8001118:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 800111a:	2301      	movs	r3, #1
 800111c:	e154      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t1 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t1 */
 800111e:	7b7b      	ldrb	r3, [r7, #13]
 8001120:	b21b      	sxth	r3, r3
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	7b3b      	ldrb	r3, [r7, #12]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21b      	sxth	r3, r3
 800112e:	b29a      	uxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8a3 2232 	strh.w	r2, [r3, #562]	@ 0x232
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T2_L, (uint8_t *)buf, 2) != 0)  /* read t2 */
 8001136:	f107 020c 	add.w	r2, r7, #12
 800113a:	2302      	movs	r3, #2
 800113c:	2133      	movs	r1, #51	@ 0x33
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ff38 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <a_bmp390_get_calibration_data+0x64>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001150:	4899      	ldr	r0, [pc, #612]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 8001152:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001154:	2301      	movs	r3, #1
 8001156:	e137      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t2 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t2 */
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	b21b      	sxth	r3, r3
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	7b3b      	ldrb	r3, [r7, #12]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21b      	sxth	r3, r3
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f8a3 2234 	strh.w	r2, [r3, #564]	@ 0x234
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T3, (uint8_t *)buf, 1) != 0)    /* read t3 */
 8001170:	f107 020c 	add.w	r2, r7, #12
 8001174:	2301      	movs	r3, #1
 8001176:	2135      	movs	r1, #53	@ 0x35
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff1b 	bl	8000fb4 <a_bmp390_iic_spi_read>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d006      	beq.n	8001192 <a_bmp390_get_calibration_data+0x9e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800118a:	488b      	ldr	r0, [pc, #556]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 800118c:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 800118e:	2301      	movs	r3, #1
 8001190:	e11a      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t3 = (int8_t)(buf[0]);                                                       /* set t3 */
 8001192:	7b3b      	ldrb	r3, [r7, #12]
 8001194:	b25a      	sxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P1_L, (uint8_t *)buf, 2) != 0)  /* read p1 */
 800119c:	f107 020c 	add.w	r2, r7, #12
 80011a0:	2302      	movs	r3, #2
 80011a2:	2136      	movs	r1, #54	@ 0x36
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff05 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <a_bmp390_get_calibration_data+0xca>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80011b6:	4880      	ldr	r0, [pc, #512]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 80011b8:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e104      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p1 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p1 */
 80011be:	7b7b      	ldrb	r3, [r7, #13]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7b3b      	ldrb	r3, [r7, #12]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P2_L, (uint8_t *)buf, 2) != 0)  /* read p2 */
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	2302      	movs	r3, #2
 80011da:	2138      	movs	r1, #56	@ 0x38
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff fee9 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <a_bmp390_get_calibration_data+0x102>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80011ee:	4872      	ldr	r0, [pc, #456]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 80011f0:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e0e8      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p2 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p2 */
 80011f6:	7b7b      	ldrb	r3, [r7, #13]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	7b3b      	ldrb	r3, [r7, #12]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21a      	sxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8a3 223a 	strh.w	r2, [r3, #570]	@ 0x23a
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P3, (uint8_t *)buf, 1) != 0)    /* read p3 */
 800120c:	f107 020c 	add.w	r2, r7, #12
 8001210:	2301      	movs	r3, #1
 8001212:	213a      	movs	r1, #58	@ 0x3a
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fecd 	bl	8000fb4 <a_bmp390_iic_spi_read>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <a_bmp390_get_calibration_data+0x13a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001226:	4864      	ldr	r0, [pc, #400]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 8001228:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 800122a:	2301      	movs	r3, #1
 800122c:	e0cc      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p3 = (int8_t)(buf[0]);                                                       /* set p3 */
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	b25a      	sxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P4, (uint8_t *)buf, 1) != 0)    /* read p4 */
 8001238:	f107 020c 	add.w	r2, r7, #12
 800123c:	2301      	movs	r3, #1
 800123e:	213b      	movs	r1, #59	@ 0x3b
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff feb7 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <a_bmp390_get_calibration_data+0x166>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001252:	4859      	ldr	r0, [pc, #356]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 8001254:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001256:	2301      	movs	r3, #1
 8001258:	e0b6      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p4 = (int8_t)(buf[0]);                                                       /* set p4 */
 800125a:	7b3b      	ldrb	r3, [r7, #12]
 800125c:	b25a      	sxtb	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P5_L, (uint8_t *)buf, 2) != 0)  /* read p5 */
 8001264:	f107 020c 	add.w	r2, r7, #12
 8001268:	2302      	movs	r3, #2
 800126a:	213c      	movs	r1, #60	@ 0x3c
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fea1 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <a_bmp390_get_calibration_data+0x192>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800127e:	484e      	ldr	r0, [pc, #312]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 8001280:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001282:	2301      	movs	r3, #1
 8001284:	e0a0      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p5 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p5 */
 8001286:	7b7b      	ldrb	r3, [r7, #13]
 8001288:	b21b      	sxth	r3, r3
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7b3b      	ldrb	r3, [r7, #12]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f8a3 223e 	strh.w	r2, [r3, #574]	@ 0x23e
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P6_L, (uint8_t *)buf, 2) != 0)  /* read p6l */
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	2302      	movs	r3, #2
 80012a4:	213e      	movs	r1, #62	@ 0x3e
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fe84 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <a_bmp390_get_calibration_data+0x1cc>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80012b8:	483f      	ldr	r0, [pc, #252]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 80012ba:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80012bc:	2301      	movs	r3, #1
 80012be:	e083      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p6 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p6 */
 80012c0:	7b7b      	ldrb	r3, [r7, #13]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	7b3b      	ldrb	r3, [r7, #12]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P7, (uint8_t *)buf, 1) != 0)    /* read p7 */
 80012d8:	f107 020c 	add.w	r2, r7, #12
 80012dc:	2301      	movs	r3, #1
 80012de:	2140      	movs	r1, #64	@ 0x40
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fe67 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <a_bmp390_get_calibration_data+0x206>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80012f2:	4831      	ldr	r0, [pc, #196]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 80012f4:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e066      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p7 = (int8_t)(buf[0]);                                                       /* set p7 */
 80012fa:	7b3b      	ldrb	r3, [r7, #12]
 80012fc:	b25a      	sxtb	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P8, (uint8_t *)buf, 1) != 0)    /* read p8 */
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	2301      	movs	r3, #1
 800130a:	2141      	movs	r1, #65	@ 0x41
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fe51 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <a_bmp390_get_calibration_data+0x232>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800131e:	4826      	ldr	r0, [pc, #152]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 8001320:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001322:	2301      	movs	r3, #1
 8001324:	e050      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p8 = (int8_t)(buf[0]);                                                       /* set p8 */
 8001326:	7b3b      	ldrb	r3, [r7, #12]
 8001328:	b25a      	sxtb	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P9_L, (uint8_t *)buf, 2) != 0)  /* read p9l */
 8001330:	f107 020c 	add.w	r2, r7, #12
 8001334:	2302      	movs	r3, #2
 8001336:	2142      	movs	r1, #66	@ 0x42
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fe3b 	bl	8000fb4 <a_bmp390_iic_spi_read>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <a_bmp390_get_calibration_data+0x25e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800134a:	481b      	ldr	r0, [pc, #108]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 800134c:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 800134e:	2301      	movs	r3, #1
 8001350:	e03a      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p9 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p9 */
 8001352:	7b7b      	ldrb	r3, [r7, #13]
 8001354:	b21b      	sxth	r3, r3
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7b3b      	ldrb	r3, [r7, #12]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21a      	sxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P10, (uint8_t *)buf, 1) != 0)   /* read p10 */
 8001368:	f107 020c 	add.w	r2, r7, #12
 800136c:	2301      	movs	r3, #1
 800136e:	2144      	movs	r1, #68	@ 0x44
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fe1f 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <a_bmp390_get_calibration_data+0x296>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001382:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 8001384:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001386:	2301      	movs	r3, #1
 8001388:	e01e      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p10 = (int8_t)(buf[0]);                                                      /* set p10 */
 800138a:	7b3b      	ldrb	r3, [r7, #12]
 800138c:	b25a      	sxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f883 2246 	strb.w	r2, [r3, #582]	@ 0x246
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P11, (uint8_t *)buf, 1) != 0)   /* read p11 */
 8001394:	f107 020c 	add.w	r2, r7, #12
 8001398:	2301      	movs	r3, #1
 800139a:	2145      	movs	r1, #69	@ 0x45
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff fe09 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <a_bmp390_get_calibration_data+0x2c8>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80013ae:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <a_bmp390_get_calibration_data+0x2c4>)
 80013b0:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e008      	b.n	80013c8 <a_bmp390_get_calibration_data+0x2d4>
 80013b6:	bf00      	nop
 80013b8:	0800b108 	.word	0x0800b108
    }
    handle->p11 = (int8_t)(buf[0]);                                                      /* set p11 */
 80013bc:	7b3b      	ldrb	r3, [r7, #12]
 80013be:	b25a      	sxtb	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247

    return 0;                                                                            /* success return 0 */
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <a_bmp390_compensate_temperature>:
 * @param[in] data raw temperature
 * @return    compensated temperature
 * @note      none
 */
static int64_t a_bmp390_compensate_temperature(bmp390_handle_t *handle, uint32_t data)
{ 
 80013d0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80013d4:	b0a5      	sub	sp, #148	@ 0x94
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6578      	str	r0, [r7, #84]	@ 0x54
 80013da:	6539      	str	r1, [r7, #80]	@ 0x50
    int64_t partial_data5;
    int64_t partial_data6;
    int64_t comp_temp;

    /* calculate compensate temperature */
    partial_data1 = (uint64_t)(data - (256 * (uint64_t)(handle->t1)));
 80013dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013de:	2200      	movs	r2, #0
 80013e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80013e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013e6:	f8b3 3232 	ldrh.w	r3, [r3, #562]	@ 0x232
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2200      	movs	r2, #0
 80013ee:	461c      	mov	r4, r3
 80013f0:	4615      	mov	r5, r2
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	022b      	lsls	r3, r5, #8
 80013fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001400:	0222      	lsls	r2, r4, #8
 8001402:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001406:	4621      	mov	r1, r4
 8001408:	1a89      	subs	r1, r1, r2
 800140a:	61b9      	str	r1, [r7, #24]
 800140c:	4629      	mov	r1, r5
 800140e:	eb61 0303 	sbc.w	r3, r1, r3
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001418:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    partial_data2 = (uint64_t)(handle->t2 * partial_data1);
 800141c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800141e:	f8b3 3234 	ldrh.w	r3, [r3, #564]	@ 0x234
 8001422:	b29b      	uxth	r3, r3
 8001424:	2200      	movs	r2, #0
 8001426:	633b      	str	r3, [r7, #48]	@ 0x30
 8001428:	637a      	str	r2, [r7, #52]	@ 0x34
 800142a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800142e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001432:	4622      	mov	r2, r4
 8001434:	fb02 f203 	mul.w	r2, r2, r3
 8001438:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800143c:	4629      	mov	r1, r5
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	441a      	add	r2, r3
 8001444:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001448:	4621      	mov	r1, r4
 800144a:	fba3 ab01 	umull	sl, fp, r3, r1
 800144e:	eb02 030b 	add.w	r3, r2, fp
 8001452:	469b      	mov	fp, r3
 8001454:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
 8001458:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
    partial_data3 = (uint64_t)(partial_data1 * partial_data1);
 800145c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001464:	fb03 f102 	mul.w	r1, r3, r2
 8001468:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800146c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	18ca      	adds	r2, r1, r3
 8001476:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800147a:	fba3 1303 	umull	r1, r3, r3, r3
 800147e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001480:	460b      	mov	r3, r1
 8001482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001486:	18d3      	adds	r3, r2, r3
 8001488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800148a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800148e:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8001492:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    partial_data4 = (int64_t)(((int64_t)partial_data3) * ((int64_t)handle->t3));
 8001496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001498:	f993 3236 	ldrsb.w	r3, [r3, #566]	@ 0x236
 800149c:	b25b      	sxtb	r3, r3
 800149e:	17da      	asrs	r2, r3, #31
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014a4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80014a8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80014ac:	4629      	mov	r1, r5
 80014ae:	fb02 f001 	mul.w	r0, r2, r1
 80014b2:	4621      	mov	r1, r4
 80014b4:	fb01 f103 	mul.w	r1, r1, r3
 80014b8:	4401      	add	r1, r0
 80014ba:	4620      	mov	r0, r4
 80014bc:	fba0 2302 	umull	r2, r3, r0, r2
 80014c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80014c2:	4613      	mov	r3, r2
 80014c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80014c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014c8:	18cb      	adds	r3, r1, r3
 80014ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80014cc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80014d0:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 80014d4:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    partial_data5 = ((int64_t)(((int64_t)partial_data2) * 262144) + (int64_t)partial_data4);
 80014d8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	048b      	lsls	r3, r1, #18
 80014e6:	ea43 3390 	orr.w	r3, r3, r0, lsr #14
 80014ea:	0482      	lsls	r2, r0, #18
 80014ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80014f0:	1884      	adds	r4, r0, r2
 80014f2:	613c      	str	r4, [r7, #16]
 80014f4:	eb41 0303 	adc.w	r3, r1, r3
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80014fe:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    partial_data6 = (int64_t)(((int64_t)partial_data5) / 4294967296U);
 8001502:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	000a      	movs	r2, r1
 8001510:	2300      	movs	r3, #0
 8001512:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    handle->t_fine = partial_data6;
 8001516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001518:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800151c:	e9c1 2392 	strd	r2, r3, [r1, #584]	@ 0x248
    comp_temp = (int64_t)((partial_data6 * 25)  / 16384);
 8001520:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	1894      	adds	r4, r2, r2
 800152a:	60bc      	str	r4, [r7, #8]
 800152c:	415b      	adcs	r3, r3
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001534:	eb12 0800 	adds.w	r8, r2, r0
 8001538:	eb43 0901 	adc.w	r9, r3, r1
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001548:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800154c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001550:	4690      	mov	r8, r2
 8001552:	4699      	mov	r9, r3
 8001554:	eb18 0300 	adds.w	r3, r8, r0
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	eb49 0301 	adc.w	r3, r9, r1
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001560:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001564:	2b00      	cmp	r3, #0
 8001566:	da08      	bge.n	800157a <a_bmp390_compensate_temperature+0x1aa>
 8001568:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 800156c:	1851      	adds	r1, r2, r1
 800156e:	6039      	str	r1, [r7, #0]
 8001570:	f143 0300 	adc.w	r3, r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800157a:	f04f 0000 	mov.w	r0, #0
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	0b90      	lsrs	r0, r2, #14
 8001584:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
 8001588:	1399      	asrs	r1, r3, #14
 800158a:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
    
    return comp_temp;
 800158e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	3794      	adds	r7, #148	@ 0x94
 8001598:	46bd      	mov	sp, r7
 800159a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800159e:	4770      	bx	lr

080015a0 <a_bmp390_compensate_pressure>:
 * @param[in] data raw pressure
 * @return    compensated pressure
 * @note      none
 */
static int64_t a_bmp390_compensate_pressure(bmp390_handle_t *handle, uint32_t data)
{
 80015a0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80015a4:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
 80015ae:	f8c7 11b8 	str.w	r1, [r7, #440]	@ 0x1b8
    int64_t offset;
    int64_t sensitivity;
    uint64_t comp_press;

    /* calculate compensate pressure */
    partial_data1 = handle->t_fine * handle->t_fine;
 80015b2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80015b6:	e9d3 0192 	ldrd	r0, r1, [r3, #584]	@ 0x248
 80015ba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80015be:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 80015c2:	fb02 f501 	mul.w	r5, r2, r1
 80015c6:	fb00 f403 	mul.w	r4, r0, r3
 80015ca:	442c      	add	r4, r5
 80015cc:	fba0 8902 	umull	r8, r9, r0, r2
 80015d0:	eb04 0309 	add.w	r3, r4, r9
 80015d4:	4699      	mov	r9, r3
 80015d6:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
 80015da:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
    partial_data2 = partial_data1 / 64;
 80015de:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da07      	bge.n	80015f6 <a_bmp390_compensate_pressure+0x56>
 80015e6:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 80015ea:	67b9      	str	r1, [r7, #120]	@ 0x78
 80015ec:	f143 0300 	adc.w	r3, r3, #0
 80015f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	0990      	lsrs	r0, r2, #6
 8001600:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8001604:	1199      	asrs	r1, r3, #6
 8001606:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * handle->t_fine) / 256;
 800160a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800160e:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8001612:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8001616:	fb03 f001 	mul.w	r0, r3, r1
 800161a:	f8d7 11fc 	ldr.w	r1, [r7, #508]	@ 0x1fc
 800161e:	fb02 f101 	mul.w	r1, r2, r1
 8001622:	4408      	add	r0, r1
 8001624:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8001628:	fba1 ab02 	umull	sl, fp, r1, r2
 800162c:	eb00 030b 	add.w	r3, r0, fp
 8001630:	469b      	mov	fp, r3
 8001632:	4652      	mov	r2, sl
 8001634:	465b      	mov	r3, fp
 8001636:	2b00      	cmp	r3, #0
 8001638:	da07      	bge.n	800164a <a_bmp390_compensate_pressure+0xaa>
 800163a:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 800163e:	6739      	str	r1, [r7, #112]	@ 0x70
 8001640:	f143 0300 	adc.w	r3, r3, #0
 8001644:	677b      	str	r3, [r7, #116]	@ 0x74
 8001646:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	0a10      	lsrs	r0, r2, #8
 8001654:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001658:	1219      	asrs	r1, r3, #8
 800165a:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (handle->p8 * partial_data3) / 32;
 800165e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001662:	f993 3243 	ldrsb.w	r3, [r3, #579]	@ 0x243
 8001666:	b25b      	sxtb	r3, r3
 8001668:	17da      	asrs	r2, r3, #31
 800166a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800166e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001672:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001676:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 800167a:	462a      	mov	r2, r5
 800167c:	fb02 f203 	mul.w	r2, r2, r3
 8001680:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001684:	4621      	mov	r1, r4
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	441a      	add	r2, r3
 800168c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001690:	4621      	mov	r1, r4
 8001692:	fba3 1301 	umull	r1, r3, r3, r1
 8001696:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800169a:	460b      	mov	r3, r1
 800169c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80016a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80016a4:	18d3      	adds	r3, r2, r3
 80016a6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80016aa:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da07      	bge.n	80016c2 <a_bmp390_compensate_pressure+0x122>
 80016b2:	f112 011f 	adds.w	r1, r2, #31
 80016b6:	66b9      	str	r1, [r7, #104]	@ 0x68
 80016b8:	f143 0300 	adc.w	r3, r3, #0
 80016bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	0950      	lsrs	r0, r2, #5
 80016cc:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 80016d0:	1159      	asrs	r1, r3, #5
 80016d2:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (handle->p7 * partial_data1) * 16;
 80016d6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80016da:	f993 3242 	ldrsb.w	r3, [r3, #578]	@ 0x242
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	17da      	asrs	r2, r3, #31
 80016e2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80016e6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80016ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016ee:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 80016f2:	462a      	mov	r2, r5
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80016fc:	4621      	mov	r1, r4
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	441a      	add	r2, r3
 8001704:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001708:	4621      	mov	r1, r4
 800170a:	fba3 1301 	umull	r1, r3, r3, r1
 800170e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001712:	460b      	mov	r3, r1
 8001714:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001718:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800171c:	18d3      	adds	r3, r2, r3
 800171e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800172e:	4629      	mov	r1, r5
 8001730:	010b      	lsls	r3, r1, #4
 8001732:	4621      	mov	r1, r4
 8001734:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8001738:	4621      	mov	r1, r4
 800173a:	010a      	lsls	r2, r1, #4
 800173c:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    partial_data6 = (handle->p6 * handle->t_fine) * 4194304;
 8001740:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001744:	f8b3 3240 	ldrh.w	r3, [r3, #576]	@ 0x240
 8001748:	b29b      	uxth	r3, r3
 800174a:	2200      	movs	r2, #0
 800174c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001750:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001754:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001758:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800175c:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8001760:	4629      	mov	r1, r5
 8001762:	fb02 f001 	mul.w	r0, r2, r1
 8001766:	4621      	mov	r1, r4
 8001768:	fb01 f103 	mul.w	r1, r1, r3
 800176c:	4401      	add	r1, r0
 800176e:	4620      	mov	r0, r4
 8001770:	fba0 2302 	umull	r2, r3, r0, r2
 8001774:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001778:	4613      	mov	r3, r2
 800177a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800177e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001782:	18cb      	adds	r3, r1, r3
 8001784:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8001794:	4629      	mov	r1, r5
 8001796:	058b      	lsls	r3, r1, #22
 8001798:	4621      	mov	r1, r4
 800179a:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 800179e:	4621      	mov	r1, r4
 80017a0:	058a      	lsls	r2, r1, #22
 80017a2:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    offset = (int64_t)((int64_t)(handle->p5) * (int64_t)140737488355328U) + partial_data4 + partial_data5 + partial_data6;
 80017a6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80017aa:	f8b3 323e 	ldrh.w	r3, [r3, #574]	@ 0x23e
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2200      	movs	r2, #0
 80017b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80017b6:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80017c6:	03d9      	lsls	r1, r3, #15
 80017c8:	2000      	movs	r0, #0
 80017ca:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80017ce:	1884      	adds	r4, r0, r2
 80017d0:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 80017d4:	eb41 0303 	adc.w	r3, r1, r3
 80017d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80017dc:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80017e0:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 80017e4:	4621      	mov	r1, r4
 80017e6:	1889      	adds	r1, r1, r2
 80017e8:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 80017ec:	4629      	mov	r1, r5
 80017ee:	eb43 0101 	adc.w	r1, r3, r1
 80017f2:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 80017f6:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 80017fa:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 80017fe:	4621      	mov	r1, r4
 8001800:	1851      	adds	r1, r2, r1
 8001802:	6639      	str	r1, [r7, #96]	@ 0x60
 8001804:	4629      	mov	r1, r5
 8001806:	eb43 0101 	adc.w	r1, r3, r1
 800180a:	6679      	str	r1, [r7, #100]	@ 0x64
 800180c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8001810:	e9c7 3474 	strd	r3, r4, [r7, #464]	@ 0x1d0
    partial_data2 = (((int64_t)handle->p4) * partial_data3) / 32;
 8001814:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001818:	f993 323d 	ldrsb.w	r3, [r3, #573]	@ 0x23d
 800181c:	b25b      	sxtb	r3, r3
 800181e:	17da      	asrs	r2, r3, #31
 8001820:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001824:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001828:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800182c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001830:	462a      	mov	r2, r5
 8001832:	fb02 f203 	mul.w	r2, r2, r3
 8001836:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800183a:	4621      	mov	r1, r4
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	441a      	add	r2, r3
 8001842:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001846:	4621      	mov	r1, r4
 8001848:	fba3 1301 	umull	r1, r3, r3, r1
 800184c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001850:	460b      	mov	r3, r1
 8001852:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001856:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800185a:	18d3      	adds	r3, r2, r3
 800185c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001860:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001864:	2b00      	cmp	r3, #0
 8001866:	da07      	bge.n	8001878 <a_bmp390_compensate_pressure+0x2d8>
 8001868:	f112 011f 	adds.w	r1, r2, #31
 800186c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800186e:	f143 0300 	adc.w	r3, r3, #0
 8001872:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001874:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001878:	f04f 0000 	mov.w	r0, #0
 800187c:	f04f 0100 	mov.w	r1, #0
 8001880:	0950      	lsrs	r0, r2, #5
 8001882:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8001886:	1159      	asrs	r1, r3, #5
 8001888:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data4 = (handle->p3 * partial_data1) * 4;
 800188c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001890:	f993 323c 	ldrsb.w	r3, [r3, #572]	@ 0x23c
 8001894:	b25b      	sxtb	r3, r3
 8001896:	17da      	asrs	r2, r3, #31
 8001898:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800189c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80018a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018a4:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 80018a8:	462a      	mov	r2, r5
 80018aa:	fb02 f203 	mul.w	r2, r2, r3
 80018ae:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80018b2:	4621      	mov	r1, r4
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	441a      	add	r2, r3
 80018ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018be:	4621      	mov	r1, r4
 80018c0:	fba3 1301 	umull	r1, r3, r3, r1
 80018c4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80018c8:	460b      	mov	r3, r1
 80018ca:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80018ce:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80018d2:	18d3      	adds	r3, r2, r3
 80018d4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 80018e4:	4629      	mov	r1, r5
 80018e6:	008b      	lsls	r3, r1, #2
 80018e8:	4621      	mov	r1, r4
 80018ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ee:	4621      	mov	r1, r4
 80018f0:	008a      	lsls	r2, r1, #2
 80018f2:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
    partial_data5 = ((int64_t)(handle->p2) - 16384) * ((int64_t)handle->t_fine) * 2097152;
 80018f6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80018fa:	f9b3 323a 	ldrsh.w	r3, [r3, #570]	@ 0x23a
 80018fe:	b21b      	sxth	r3, r3
 8001900:	17da      	asrs	r2, r3, #31
 8001902:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001906:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800190a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800190e:	460b      	mov	r3, r1
 8001910:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 8001914:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001918:	4613      	mov	r3, r2
 800191a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800191e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001922:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001926:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800192a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800192e:	4629      	mov	r1, r5
 8001930:	fb02 f001 	mul.w	r0, r2, r1
 8001934:	4621      	mov	r1, r4
 8001936:	fb01 f103 	mul.w	r1, r1, r3
 800193a:	4401      	add	r1, r0
 800193c:	4620      	mov	r0, r4
 800193e:	fba0 2302 	umull	r2, r3, r0, r2
 8001942:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001946:	4613      	mov	r3, r2
 8001948:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800194c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001950:	18cb      	adds	r3, r1, r3
 8001952:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 8001962:	4629      	mov	r1, r5
 8001964:	054b      	lsls	r3, r1, #21
 8001966:	4621      	mov	r1, r4
 8001968:	ea43 23d1 	orr.w	r3, r3, r1, lsr #11
 800196c:	4621      	mov	r1, r4
 800196e:	054a      	lsls	r2, r1, #21
 8001970:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    sensitivity = (((int64_t)(handle->p1) - 16384) * (int64_t)70368744177664U) + partial_data2 + partial_data4 + partial_data5;
 8001974:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001978:	f9b3 3238 	ldrsh.w	r3, [r3, #568]	@ 0x238
 800197c:	b21b      	sxth	r3, r3
 800197e:	17da      	asrs	r2, r3, #31
 8001980:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001984:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001988:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800198c:	460b      	mov	r3, r1
 800198e:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 8001992:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001996:	4613      	mov	r3, r2
 8001998:	f143 33ff 	adc.w	r3, r3, #4294967295
 800199c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80019a0:	f04f 0000 	mov.w	r0, #0
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80019ac:	0399      	lsls	r1, r3, #14
 80019ae:	2000      	movs	r0, #0
 80019b0:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80019b4:	1884      	adds	r4, r0, r2
 80019b6:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 80019ba:	eb41 0303 	adc.w	r3, r1, r3
 80019be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80019c2:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80019c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80019ca:	4621      	mov	r1, r4
 80019cc:	1889      	adds	r1, r1, r2
 80019ce:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 80019d2:	4629      	mov	r1, r5
 80019d4:	eb43 0101 	adc.w	r1, r3, r1
 80019d8:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80019dc:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80019e0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019e4:	4621      	mov	r1, r4
 80019e6:	1851      	adds	r1, r2, r1
 80019e8:	6539      	str	r1, [r7, #80]	@ 0x50
 80019ea:	4629      	mov	r1, r5
 80019ec:	eb43 0101 	adc.w	r1, r3, r1
 80019f0:	6579      	str	r1, [r7, #84]	@ 0x54
 80019f2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80019f6:	e9c7 3472 	strd	r3, r4, [r7, #456]	@ 0x1c8
    partial_data1 = (sensitivity / 16777216) * data;
 80019fa:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da08      	bge.n	8001a14 <a_bmp390_compensate_pressure+0x474>
 8001a02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8001a06:	1851      	adds	r1, r2, r1
 8001a08:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001a0a:	f143 0300 	adc.w	r3, r3, #0
 8001a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	0e10      	lsrs	r0, r2, #24
 8001a1e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001a22:	1619      	asrs	r1, r3, #24
 8001a24:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a32:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001a36:	4623      	mov	r3, r4
 8001a38:	fb03 f201 	mul.w	r2, r3, r1
 8001a3c:	462b      	mov	r3, r5
 8001a3e:	fb00 f303 	mul.w	r3, r0, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	4622      	mov	r2, r4
 8001a46:	fba0 1202 	umull	r1, r2, r0, r2
 8001a4a:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001a4e:	460a      	mov	r2, r1
 8001a50:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001a54:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001a58:	4413      	add	r3, r2
 8001a5a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001a5e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8001a62:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
 8001a66:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
    partial_data2 = (int64_t)(handle->p10) * (int64_t)(handle->t_fine);
 8001a6a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001a6e:	f993 3246 	ldrsb.w	r3, [r3, #582]	@ 0x246
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	17da      	asrs	r2, r3, #31
 8001a76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001a7a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a7e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001a82:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8001a86:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	fb02 f001 	mul.w	r0, r2, r1
 8001a90:	4621      	mov	r1, r4
 8001a92:	fb01 f103 	mul.w	r1, r1, r3
 8001a96:	4401      	add	r1, r0
 8001a98:	4620      	mov	r0, r4
 8001a9a:	fba0 2302 	umull	r2, r3, r0, r2
 8001a9e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001aa8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001aac:	18cb      	adds	r3, r1, r3
 8001aae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ab2:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8001ab6:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
 8001aba:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
    partial_data3 = partial_data2 + (65536 * (int64_t)(handle->p9));
 8001abe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001ac2:	f9b3 3244 	ldrsh.w	r3, [r3, #580]	@ 0x244
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	17da      	asrs	r2, r3, #31
 8001aca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ace:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001ad2:	f04f 0000 	mov.w	r0, #0
 8001ad6:	f04f 0100 	mov.w	r1, #0
 8001ada:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001ade:	462b      	mov	r3, r5
 8001ae0:	0419      	lsls	r1, r3, #16
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001ae8:	4623      	mov	r3, r4
 8001aea:	0418      	lsls	r0, r3, #16
 8001aec:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8001af0:	1814      	adds	r4, r2, r0
 8001af2:	643c      	str	r4, [r7, #64]	@ 0x40
 8001af4:	414b      	adcs	r3, r1
 8001af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001af8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001afc:	e9c7 347c 	strd	r3, r4, [r7, #496]	@ 0x1f0
    partial_data4 = (partial_data3 * data) / 8192;
 8001b00:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001b04:	2200      	movs	r2, #0
 8001b06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001b0a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001b0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b12:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8001b16:	462a      	mov	r2, r5
 8001b18:	fb02 f203 	mul.w	r2, r2, r3
 8001b1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001b20:	4621      	mov	r1, r4
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	441a      	add	r2, r3
 8001b28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	fba3 1301 	umull	r1, r3, r3, r1
 8001b32:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b36:	460b      	mov	r3, r1
 8001b38:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b3c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001b40:	18d3      	adds	r3, r2, r3
 8001b42:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b46:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da08      	bge.n	8001b60 <a_bmp390_compensate_pressure+0x5c0>
 8001b4e:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001b52:	1851      	adds	r1, r2, r1
 8001b54:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b56:	f143 0300 	adc.w	r3, r3, #0
 8001b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b60:	f04f 0000 	mov.w	r0, #0
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	0b50      	lsrs	r0, r2, #13
 8001b6a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b6e:	1359      	asrs	r1, r3, #13
 8001b70:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (partial_data4 * data) / 512;
 8001b74:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b7e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001b82:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b86:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001b8a:	462a      	mov	r2, r5
 8001b8c:	fb02 f203 	mul.w	r2, r2, r3
 8001b90:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001b94:	4621      	mov	r1, r4
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	441a      	add	r2, r3
 8001b9c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	fba3 1301 	umull	r1, r3, r3, r1
 8001ba6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001baa:	460b      	mov	r3, r1
 8001bac:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001bb0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001bb4:	18d3      	adds	r3, r2, r3
 8001bb6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001bba:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	da08      	bge.n	8001bd4 <a_bmp390_compensate_pressure+0x634>
 8001bc2:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001bc6:	1851      	adds	r1, r2, r1
 8001bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8001bca:	f143 0300 	adc.w	r3, r3, #0
 8001bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	0a50      	lsrs	r0, r2, #9
 8001bde:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8001be2:	1259      	asrs	r1, r3, #9
 8001be4:	e9c7 0178 	strd	r0, r1, [r7, #480]	@ 0x1e0
    partial_data6 = (int64_t)((uint64_t)data * (uint64_t)data);
 8001be8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001bec:	2200      	movs	r2, #0
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001bf2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001bf6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001c00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001c04:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001c08:	462b      	mov	r3, r5
 8001c0a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001c0e:	4642      	mov	r2, r8
 8001c10:	fb02 f203 	mul.w	r2, r2, r3
 8001c14:	464b      	mov	r3, r9
 8001c16:	4621      	mov	r1, r4
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4622      	mov	r2, r4
 8001c20:	4641      	mov	r1, r8
 8001c22:	fba2 1201 	umull	r1, r2, r2, r1
 8001c26:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	f8c7 2170 	str.w	r2, [r7, #368]	@ 0x170
 8001c30:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001c34:	4413      	add	r3, r2
 8001c36:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001c3a:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 8001c3e:	e9c7 3476 	strd	r3, r4, [r7, #472]	@ 0x1d8
    partial_data2 = ((int64_t)(handle->p11) * (int64_t)(partial_data6)) / 65536;
 8001c42:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001c46:	f993 3247 	ldrsb.w	r3, [r3, #583]	@ 0x247
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	17da      	asrs	r2, r3, #31
 8001c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001c56:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001c5a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8001c5e:	462a      	mov	r2, r5
 8001c60:	fb02 f203 	mul.w	r2, r2, r3
 8001c64:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8001c68:	4621      	mov	r1, r4
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	441a      	add	r2, r3
 8001c70:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001c74:	4621      	mov	r1, r4
 8001c76:	fba3 1301 	umull	r1, r3, r3, r1
 8001c7a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001c7e:	460b      	mov	r3, r1
 8001c80:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001c84:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c88:	18d3      	adds	r3, r2, r3
 8001c8a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001c8e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	da08      	bge.n	8001ca8 <a_bmp390_compensate_pressure+0x708>
 8001c96:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001c9a:	1851      	adds	r1, r2, r1
 8001c9c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c9e:	f143 0300 	adc.w	r3, r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ca8:	f04f 0000 	mov.w	r0, #0
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	0c10      	lsrs	r0, r2, #16
 8001cb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001cb6:	1419      	asrs	r1, r3, #16
 8001cb8:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * data) / 128;
 8001cbc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001cc6:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001cca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001cd2:	462a      	mov	r2, r5
 8001cd4:	fb02 f203 	mul.w	r2, r2, r3
 8001cd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cdc:	4621      	mov	r1, r4
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	441a      	add	r2, r3
 8001ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ce8:	4621      	mov	r1, r4
 8001cea:	fba3 1301 	umull	r1, r3, r3, r1
 8001cee:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001cf8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001cfc:	18d3      	adds	r3, r2, r3
 8001cfe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001d02:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da07      	bge.n	8001d1a <a_bmp390_compensate_pressure+0x77a>
 8001d0a:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8001d0e:	6239      	str	r1, [r7, #32]
 8001d10:	f143 0300 	adc.w	r3, r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d1a:	f04f 0000 	mov.w	r0, #0
 8001d1e:	f04f 0100 	mov.w	r1, #0
 8001d22:	09d0      	lsrs	r0, r2, #7
 8001d24:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001d28:	11d9      	asrs	r1, r3, #7
 8001d2a:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (offset / 4) + partial_data1 + partial_data5 + partial_data3;
 8001d2e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da06      	bge.n	8001d44 <a_bmp390_compensate_pressure+0x7a4>
 8001d36:	1cd1      	adds	r1, r2, #3
 8001d38:	61b9      	str	r1, [r7, #24]
 8001d3a:	f143 0300 	adc.w	r3, r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	0890      	lsrs	r0, r2, #2
 8001d4e:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8001d52:	1099      	asrs	r1, r3, #2
 8001d54:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8001d58:	1884      	adds	r4, r0, r2
 8001d5a:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001d5e:	eb41 0303 	adc.w	r3, r1, r3
 8001d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d66:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d6e:	4621      	mov	r1, r4
 8001d70:	1889      	adds	r1, r1, r2
 8001d72:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001d76:	4629      	mov	r1, r5
 8001d78:	eb43 0101 	adc.w	r1, r3, r1
 8001d7c:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001d80:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8001d84:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001d88:	4621      	mov	r1, r4
 8001d8a:	1851      	adds	r1, r2, r1
 8001d8c:	6139      	str	r1, [r7, #16]
 8001d8e:	4629      	mov	r1, r5
 8001d90:	eb43 0101 	adc.w	r1, r3, r1
 8001d94:	6179      	str	r1, [r7, #20]
 8001d96:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d9a:	e9c7 347a 	strd	r3, r4, [r7, #488]	@ 0x1e8
    comp_press = (((uint64_t)partial_data4 * 25) / (uint64_t)1099511627776U);
 8001d9e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	1894      	adds	r4, r2, r2
 8001da8:	60bc      	str	r4, [r7, #8]
 8001daa:	415b      	adcs	r3, r3
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001db2:	1814      	adds	r4, r2, r0
 8001db4:	603c      	str	r4, [r7, #0]
 8001db6:	414b      	adcs	r3, r1
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001dc6:	464c      	mov	r4, r9
 8001dc8:	00e3      	lsls	r3, r4, #3
 8001dca:	4644      	mov	r4, r8
 8001dcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd0:	4644      	mov	r4, r8
 8001dd2:	00e2      	lsls	r2, r4, #3
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	4623      	mov	r3, r4
 8001dda:	181b      	adds	r3, r3, r0
 8001ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001de0:	462b      	mov	r3, r5
 8001de2:	eb41 0303 	adc.w	r3, r1, r3
 8001de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001df6:	0a0a      	lsrs	r2, r1, #8
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    
    return comp_press;
 8001dfe:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
}
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001e10:	4770      	bx	lr
	...

08001e14 <bmp390_set_pressure>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <bmp390_set_pressure+0x16>
    {
        return 2;                                                                         /* return error */
 8001e26:	2302      	movs	r3, #2
 8001e28:	e037      	b.n	8001e9a <bmp390_set_pressure+0x86>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d001      	beq.n	8001e38 <bmp390_set_pressure+0x24>
    {
        return 3;                                                                         /* return error */
 8001e34:	2303      	movs	r3, #3
 8001e36:	e030      	b.n	8001e9a <bmp390_set_pressure+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8001e38:	f107 020e 	add.w	r2, r7, #14
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	211b      	movs	r1, #27
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff f8b7 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8001e46:	4603      	mov	r3, r0
 8001e48:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <bmp390_set_pressure+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001e56:	4813      	ldr	r0, [pc, #76]	@ (8001ea4 <bmp390_set_pressure+0x90>)
 8001e58:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e01d      	b.n	8001e9a <bmp390_set_pressure+0x86>
    }
    prev &= ~(1 << 0);                                                                    /* clear config */
 8001e5e:	7bbb      	ldrb	r3, [r7, #14]
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 0;                                                                  /* set config */
 8001e68:	7bba      	ldrb	r2, [r7, #14]
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8001e72:	f107 020e 	add.w	r2, r7, #14
 8001e76:	2301      	movs	r3, #1
 8001e78:	211b      	movs	r1, #27
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff f8e5 	bl	800104a <a_bmp390_iic_spi_write>
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <bmp390_set_pressure+0x84>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001e90:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <bmp390_set_pressure+0x94>)
 8001e92:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <bmp390_set_pressure+0x86>
    }
    
    return 0;                                                                             /* success return 0 */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	0800b44c 	.word	0x0800b44c
 8001ea8:	0800b474 	.word	0x0800b474

08001eac <bmp390_set_temperature>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <bmp390_set_temperature+0x16>
    {
        return 2;                                                                         /* return error */
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e03c      	b.n	8001f3c <bmp390_set_temperature+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d001      	beq.n	8001ed0 <bmp390_set_temperature+0x24>
    {
        return 3;                                                                         /* return error */
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e035      	b.n	8001f3c <bmp390_set_temperature+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8001ed0:	f107 020e 	add.w	r2, r7, #14
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	211b      	movs	r1, #27
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff f86b 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <bmp390_set_temperature+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001eee:	4815      	ldr	r0, [pc, #84]	@ (8001f44 <bmp390_set_temperature+0x98>)
 8001ef0:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e022      	b.n	8001f3c <bmp390_set_temperature+0x90>
    }
    prev &= ~(1 << 1);                                                                    /* clear config */
 8001ef6:	7bbb      	ldrb	r3, [r7, #14]
 8001ef8:	f023 0302 	bic.w	r3, r3, #2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                  /* set config */
 8001f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	b25a      	sxtb	r2, r3
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8001f14:	f107 020e 	add.w	r2, r7, #14
 8001f18:	2301      	movs	r3, #1
 8001f1a:	211b      	movs	r1, #27
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff f894 	bl	800104a <a_bmp390_iic_spi_write>
 8001f22:	4603      	mov	r3, r0
 8001f24:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <bmp390_set_temperature+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001f32:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <bmp390_set_temperature+0x9c>)
 8001f34:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <bmp390_set_temperature+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0800b44c 	.word	0x0800b44c
 8001f48:	0800b474 	.word	0x0800b474

08001f4c <bmp390_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_mode(bmp390_handle_t *handle, bmp390_mode_t mode)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <bmp390_set_mode+0x16>
    {
        return 2;                                                                         /* return error */
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e03c      	b.n	8001fdc <bmp390_set_mode+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d001      	beq.n	8001f70 <bmp390_set_mode+0x24>
    {
        return 3;                                                                         /* return error */
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e035      	b.n	8001fdc <bmp390_set_mode+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8001f70:	f107 020e 	add.w	r2, r7, #14
 8001f74:	2301      	movs	r3, #1
 8001f76:	211b      	movs	r1, #27
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff f81b 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <bmp390_set_mode+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001f8e:	4815      	ldr	r0, [pc, #84]	@ (8001fe4 <bmp390_set_mode+0x98>)
 8001f90:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e022      	b.n	8001fdc <bmp390_set_mode+0x90>
    }
    prev &= ~(3 << 4);                                                                    /* clear config */
 8001f96:	7bbb      	ldrb	r3, [r7, #14]
 8001f98:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 4;                                                                    /* set config */
 8001fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	b25a      	sxtb	r2, r3
 8001fa8:	7bbb      	ldrb	r3, [r7, #14]
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8001fb4:	f107 020e 	add.w	r2, r7, #14
 8001fb8:	2301      	movs	r3, #1
 8001fba:	211b      	movs	r1, #27
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff f844 	bl	800104a <a_bmp390_iic_spi_write>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <bmp390_set_mode+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <bmp390_set_mode+0x9c>)
 8001fd4:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <bmp390_set_mode+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	0800b44c 	.word	0x0800b44c
 8001fe8:	0800b474 	.word	0x0800b474

08001fec <bmp390_set_pressure_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <bmp390_set_pressure_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 8001ffe:	2302      	movs	r3, #2
 8002000:	e037      	b.n	8002072 <bmp390_set_pressure_oversampling+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002008:	2b01      	cmp	r3, #1
 800200a:	d001      	beq.n	8002010 <bmp390_set_pressure_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 800200c:	2303      	movs	r3, #3
 800200e:	e030      	b.n	8002072 <bmp390_set_pressure_oversampling+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 8002010:	f107 020e 	add.w	r2, r7, #14
 8002014:	2301      	movs	r3, #1
 8002016:	211c      	movs	r1, #28
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe ffcb 	bl	8000fb4 <a_bmp390_iic_spi_read>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <bmp390_set_pressure_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800202e:	4813      	ldr	r0, [pc, #76]	@ (800207c <bmp390_set_pressure_oversampling+0x90>)
 8002030:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002032:	2301      	movs	r3, #1
 8002034:	e01d      	b.n	8002072 <bmp390_set_pressure_oversampling+0x86>
    }
    prev &= ~(7 << 0);                                                               /* clear config */
 8002036:	7bbb      	ldrb	r3, [r7, #14]
 8002038:	f023 0307 	bic.w	r3, r3, #7
 800203c:	b2db      	uxtb	r3, r3
 800203e:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 0;                                                       /* set config */
 8002040:	7bba      	ldrb	r2, [r7, #14]
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	4313      	orrs	r3, r2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 800204a:	f107 020e 	add.w	r2, r7, #14
 800204e:	2301      	movs	r3, #1
 8002050:	211c      	movs	r1, #28
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fff9 	bl	800104a <a_bmp390_iic_spi_write>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <bmp390_set_pressure_oversampling+0x84>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002068:	4805      	ldr	r0, [pc, #20]	@ (8002080 <bmp390_set_pressure_oversampling+0x94>)
 800206a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <bmp390_set_pressure_oversampling+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	0800b49c 	.word	0x0800b49c
 8002080:	0800b4c0 	.word	0x0800b4c0

08002084 <bmp390_set_temperature_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <bmp390_set_temperature_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 8002096:	2302      	movs	r3, #2
 8002098:	e03c      	b.n	8002114 <bmp390_set_temperature_oversampling+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d001      	beq.n	80020a8 <bmp390_set_temperature_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 80020a4:	2303      	movs	r3, #3
 80020a6:	e035      	b.n	8002114 <bmp390_set_temperature_oversampling+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 80020a8:	f107 020e 	add.w	r2, r7, #14
 80020ac:	2301      	movs	r3, #1
 80020ae:	211c      	movs	r1, #28
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7fe ff7f 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <bmp390_set_temperature_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80020c6:	4815      	ldr	r0, [pc, #84]	@ (800211c <bmp390_set_temperature_oversampling+0x98>)
 80020c8:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e022      	b.n	8002114 <bmp390_set_temperature_oversampling+0x90>
    }
    prev &= ~(7 << 3);                                                               /* clear config */
 80020ce:	7bbb      	ldrb	r3, [r7, #14]
 80020d0:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 3;                                                       /* set config */
 80020d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	7bbb      	ldrb	r3, [r7, #14]
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 80020ec:	f107 020e 	add.w	r2, r7, #14
 80020f0:	2301      	movs	r3, #1
 80020f2:	211c      	movs	r1, #28
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7fe ffa8 	bl	800104a <a_bmp390_iic_spi_write>
 80020fa:	4603      	mov	r3, r0
 80020fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <bmp390_set_temperature_oversampling+0x8e>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800210a:	4805      	ldr	r0, [pc, #20]	@ (8002120 <bmp390_set_temperature_oversampling+0x9c>)
 800210c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <bmp390_set_temperature_oversampling+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	0800b49c 	.word	0x0800b49c
 8002120:	0800b4c0 	.word	0x0800b4c0

08002124 <bmp390_set_odr>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_odr(bmp390_handle_t *handle, bmp390_odr_t odr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <bmp390_set_odr+0x16>
    {
        return 2;                                                                    /* return error */
 8002136:	2302      	movs	r3, #2
 8002138:	e037      	b.n	80021aa <bmp390_set_odr+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002140:	2b01      	cmp	r3, #1
 8002142:	d001      	beq.n	8002148 <bmp390_set_odr+0x24>
    {
        return 3;                                                                    /* return error */
 8002144:	2303      	movs	r3, #3
 8002146:	e030      	b.n	80021aa <bmp390_set_odr+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);        /* read config */
 8002148:	f107 020e 	add.w	r2, r7, #14
 800214c:	2301      	movs	r3, #1
 800214e:	211d      	movs	r1, #29
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7fe ff2f 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8002156:	4603      	mov	r3, r0
 8002158:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <bmp390_set_odr+0x4a>
    {
        handle->debug_print("bmp390: get odr register failed.\n");                   /* get odr register failed */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002166:	4813      	ldr	r0, [pc, #76]	@ (80021b4 <bmp390_set_odr+0x90>)
 8002168:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800216a:	2301      	movs	r3, #1
 800216c:	e01d      	b.n	80021aa <bmp390_set_odr+0x86>
    }
    
    prev &= ~(31 << 0);                                                              /* clear config */
 800216e:	7bbb      	ldrb	r3, [r7, #14]
 8002170:	f023 031f 	bic.w	r3, r3, #31
 8002174:	b2db      	uxtb	r3, r3
 8002176:	73bb      	strb	r3, [r7, #14]
    prev |= odr << 0;                                                                /* set config */
 8002178:	7bba      	ldrb	r2, [r7, #14]
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	4313      	orrs	r3, r2
 800217e:	b2db      	uxtb	r3, r3
 8002180:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);       /* write config */
 8002182:	f107 020e 	add.w	r2, r7, #14
 8002186:	2301      	movs	r3, #1
 8002188:	211d      	movs	r1, #29
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe ff5d 	bl	800104a <a_bmp390_iic_spi_write>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <bmp390_set_odr+0x84>
    {
        handle->debug_print("bmp390: set odr register failed.\n");                   /* set odr register failed */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80021a0:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <bmp390_set_odr+0x94>)
 80021a2:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <bmp390_set_odr+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	0800b4e4 	.word	0x0800b4e4
 80021b8:	0800b508 	.word	0x0800b508

080021bc <a_bmp390_close>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
static uint8_t a_bmp390_close(bmp390_handle_t *handle)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                        /* if iic interface */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10f      	bne.n	80021ee <a_bmp390_close+0x32>
    {
        if (handle->iic_deinit() != 0)                                  /* close iic */
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80021d4:	4798      	blx	r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <a_bmp390_close+0x2e>
        {
            handle->debug_print("bmp390: iic deinit failed.\n");        /* iic deinit failed */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80021e2:	480c      	ldr	r0, [pc, #48]	@ (8002214 <a_bmp390_close+0x58>)
 80021e4:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e010      	b.n	800220c <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 80021ea:	2300      	movs	r3, #0
 80021ec:	e00e      	b.n	800220c <a_bmp390_close+0x50>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                                  /* close spi */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80021f4:	4798      	blx	r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <a_bmp390_close+0x4e>
        {
            handle->debug_print("bmp390: spi deinit failed.\n");        /* spi deinit failed */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002202:	4805      	ldr	r0, [pc, #20]	@ (8002218 <a_bmp390_close+0x5c>)
 8002204:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 800220a:	2300      	movs	r3, #0
        }
    }
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	0800b5a0 	.word	0x0800b5a0
 8002218:	0800b5bc 	.word	0x0800b5bc

0800221c <bmp390_init>:
 *            - 5 reset failed
 *            - 6 get calibration failed
 * @note      none
 */
uint8_t bmp390_init(bmp390_handle_t *handle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
    uint8_t id;
    uint8_t reg;
  
    if (handle == NULL)                                                              /* check handle */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <bmp390_init+0x12>
    {
        return 2;                                                                    /* return error */
 800222a:	2302      	movs	r3, #2
 800222c:	e107      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->debug_print == NULL)                                                 /* check debug_print */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <bmp390_init+0x20>
    {
        return 3;                                                                    /* return error */
 8002238:	2303      	movs	r3, #3
 800223a:	e100      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->iic_init == NULL)                                                    /* check iic_init */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <bmp390_init+0x38>
    {
        handle->debug_print("bmp390: iic_init is null.\n");                          /* iic_init is null */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800224c:	487e      	ldr	r0, [pc, #504]	@ (8002448 <bmp390_init+0x22c>)
 800224e:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002250:	2303      	movs	r3, #3
 8002252:	e0f4      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->iic_deinit == NULL)                                                  /* check iic_init */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <bmp390_init+0x50>
    {
        handle->debug_print("bmp390: iic_deinit is null.\n");                        /* iic_deinit is null */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002264:	4879      	ldr	r0, [pc, #484]	@ (800244c <bmp390_init+0x230>)
 8002266:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002268:	2303      	movs	r3, #3
 800226a:	e0e8      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->iic_read == NULL)                                                    /* check iic_read */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <bmp390_init+0x68>
    {
        handle->debug_print("bmp390: iic_read is null.\n");                          /* iic_read is null */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800227c:	4874      	ldr	r0, [pc, #464]	@ (8002450 <bmp390_init+0x234>)
 800227e:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002280:	2303      	movs	r3, #3
 8002282:	e0dc      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->iic_write == NULL)                                                   /* check iic_write */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <bmp390_init+0x80>
    {
        handle->debug_print("bmp390: iic_write is null.\n");                         /* iic_write is null */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002294:	486f      	ldr	r0, [pc, #444]	@ (8002454 <bmp390_init+0x238>)
 8002296:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002298:	2303      	movs	r3, #3
 800229a:	e0d0      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->spi_init == NULL)                                                    /* check spi_init */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <bmp390_init+0x98>
    {
        handle->debug_print("bmp390: spi_init is null.\n");                          /* spi_init is null */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80022ac:	486a      	ldr	r0, [pc, #424]	@ (8002458 <bmp390_init+0x23c>)
 80022ae:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0c4      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->spi_deinit == NULL)                                                  /* check spi_deinit */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <bmp390_init+0xb0>
    {
        handle->debug_print("bmp390: spi_deinit is null.\n");                        /* spi_deinit is null */
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80022c4:	4865      	ldr	r0, [pc, #404]	@ (800245c <bmp390_init+0x240>)
 80022c6:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0b8      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->spi_read == NULL)                                                    /* check spi_read */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <bmp390_init+0xc8>
    {
        handle->debug_print("bmp390: spi_read is null.\n");                          /* spi_read is null */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80022dc:	4860      	ldr	r0, [pc, #384]	@ (8002460 <bmp390_init+0x244>)
 80022de:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0ac      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->spi_write == NULL)                                                   /* check spi_write */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <bmp390_init+0xe0>
    {
        handle->debug_print("bmp390: spi_write is null.\n");                         /* spi_write is null */
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80022f4:	485b      	ldr	r0, [pc, #364]	@ (8002464 <bmp390_init+0x248>)
 80022f6:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0a0      	b.n	800243e <bmp390_init+0x222>
    }
    if (handle->delay_ms == NULL)                                                    /* check delay_ms */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <bmp390_init+0xf8>
    {
        handle->debug_print("bmp390: delay_ms is null.\n");                          /* delay_ms is null */
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800230c:	4856      	ldr	r0, [pc, #344]	@ (8002468 <bmp390_init+0x24c>)
 800230e:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002310:	2303      	movs	r3, #3
 8002312:	e094      	b.n	800243e <bmp390_init+0x222>
    }
    
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                     /* if iic interface */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <bmp390_init+0x11e>
    {
        if (handle->iic_init() != 0)                                                 /* initialize iic bus */
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002324:	4798      	blx	r3
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d014      	beq.n	8002356 <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: iic init failed.\n");                       /* iic init failed */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002332:	484e      	ldr	r0, [pc, #312]	@ (800246c <bmp390_init+0x250>)
 8002334:	4798      	blx	r3
            
            return 1;                                                                /* return error */
 8002336:	2301      	movs	r3, #1
 8002338:	e081      	b.n	800243e <bmp390_init+0x222>
        }
    }
    else
    {
        if (handle->spi_init() != 0)                                                 /* initialize spi bus */
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002340:	4798      	blx	r3
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: spi init failed.\n");                       /* spi init failed */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800234e:	4848      	ldr	r0, [pc, #288]	@ (8002470 <bmp390_init+0x254>)
 8002350:	4798      	blx	r3
           
            return 1;                                                                /* return error */
 8002352:	2301      	movs	r3, #1
 8002354:	e073      	b.n	800243e <bmp390_init+0x222>
        }
    }
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_CHIP_ID, (uint8_t *)&id, 1) != 0)   /* read chip id */
 8002356:	f107 020f 	add.w	r2, r7, #15
 800235a:	2301      	movs	r3, #1
 800235c:	2100      	movs	r1, #0
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fe28 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <bmp390_init+0x162>
    {
        handle->debug_print("bmp390: read chip id failed.\n");                       /* read chip id failed */
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002370:	4840      	ldr	r0, [pc, #256]	@ (8002474 <bmp390_init+0x258>)
 8002372:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff21 	bl	80021bc <a_bmp390_close>
        
        return 4;                                                                    /* return error */
 800237a:	2304      	movs	r3, #4
 800237c:	e05f      	b.n	800243e <bmp390_init+0x222>
    }
    if (id != 0x60)                                                                  /* check chip id */
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	2b60      	cmp	r3, #96	@ 0x60
 8002382:	d009      	beq.n	8002398 <bmp390_init+0x17c>
    {
        handle->debug_print("bmp390: id is invalid.\n");                             /* id is invalid */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800238a:	483b      	ldr	r0, [pc, #236]	@ (8002478 <bmp390_init+0x25c>)
 800238c:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ff14 	bl	80021bc <a_bmp390_close>
        
        return 4;         
 8002394:	2304      	movs	r3, #4
 8002396:	e052      	b.n	800243e <bmp390_init+0x222>
    }                                                                                /* return error */
    reg = 0xB6;                                                                      /* set command */
 8002398:	23b6      	movs	r3, #182	@ 0xb6
 800239a:	73bb      	strb	r3, [r7, #14]
    if (a_bmp390_iic_spi_write(handle, BMP390_REG_CMD, (uint8_t *)&reg, 1) != 0)     /* write command */
 800239c:	f107 020e 	add.w	r2, r7, #14
 80023a0:	2301      	movs	r3, #1
 80023a2:	217e      	movs	r1, #126	@ 0x7e
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7fe fe50 	bl	800104a <a_bmp390_iic_spi_write>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <bmp390_init+0x1a8>
    {
        handle->debug_print("bmp390: soft rest failed.\n");                          /* soft rest failed */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80023b6:	4831      	ldr	r0, [pc, #196]	@ (800247c <bmp390_init+0x260>)
 80023b8:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fefe 	bl	80021bc <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 80023c0:	2305      	movs	r3, #5
 80023c2:	e03c      	b.n	800243e <bmp390_init+0x222>
    }
    handle->delay_ms(10);                                                            /* delay 10 ms */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80023ca:	200a      	movs	r0, #10
 80023cc:	4798      	blx	r3
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_ERR_REG, (uint8_t *)&reg, 1) != 0)  /* read reg */
 80023ce:	f107 020e 	add.w	r2, r7, #14
 80023d2:	2301      	movs	r3, #1
 80023d4:	2102      	movs	r1, #2
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fdec 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <bmp390_init+0x1da>
    {
        handle->debug_print("bmp390: get err reg failed.\n");                        /* return error */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80023e8:	4825      	ldr	r0, [pc, #148]	@ (8002480 <bmp390_init+0x264>)
 80023ea:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff fee5 	bl	80021bc <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 80023f2:	2305      	movs	r3, #5
 80023f4:	e023      	b.n	800243e <bmp390_init+0x222>
    }
    if ((reg & 0x07) != 0)                                                           /* check running status */
 80023f6:	7bbb      	ldrb	r3, [r7, #14]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d009      	beq.n	8002414 <bmp390_init+0x1f8>
    {
        handle->debug_print("bmp390: find running error.\n");                        /* find running error */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002406:	481f      	ldr	r0, [pc, #124]	@ (8002484 <bmp390_init+0x268>)
 8002408:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fed6 	bl	80021bc <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8002410:	2305      	movs	r3, #5
 8002412:	e014      	b.n	800243e <bmp390_init+0x222>
    }
    if (a_bmp390_get_calibration_data(handle) != 0)                                  /* get calibration data */
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7fe fe6d 	bl	80010f4 <a_bmp390_get_calibration_data>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d009      	beq.n	8002434 <bmp390_init+0x218>
    {
        handle->debug_print("bmp390: get calibration data error.\n");                /* get calibration data error */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002426:	4818      	ldr	r0, [pc, #96]	@ (8002488 <bmp390_init+0x26c>)
 8002428:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fec6 	bl	80021bc <a_bmp390_close>
        
        return 6;                                                                    /* return error */
 8002430:	2306      	movs	r3, #6
 8002432:	e004      	b.n	800243e <bmp390_init+0x222>
    }
    handle->inited = 1;                                                              /* flag finish initialization */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
     
    return 0;                                                                        /* success return 0 */
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	0800b5d8 	.word	0x0800b5d8
 800244c:	0800b5f4 	.word	0x0800b5f4
 8002450:	0800b614 	.word	0x0800b614
 8002454:	0800b630 	.word	0x0800b630
 8002458:	0800b64c 	.word	0x0800b64c
 800245c:	0800b668 	.word	0x0800b668
 8002460:	0800b688 	.word	0x0800b688
 8002464:	0800b6a4 	.word	0x0800b6a4
 8002468:	0800b6c0 	.word	0x0800b6c0
 800246c:	0800b6dc 	.word	0x0800b6dc
 8002470:	0800b6f8 	.word	0x0800b6f8
 8002474:	0800b714 	.word	0x0800b714
 8002478:	0800b734 	.word	0x0800b734
 800247c:	0800b74c 	.word	0x0800b74c
 8002480:	0800b768 	.word	0x0800b768
 8002484:	0800b788 	.word	0x0800b788
 8002488:	0800b7a8 	.word	0x0800b7a8

0800248c <bmp390_read_temperature_pressure>:
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t bmp390_read_temperature_pressure(bmp390_handle_t *handle, uint32_t *temperature_raw, float *temperature_c, 
                                         uint32_t *pressure_raw, float *pressure_pa)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b090      	sub	sp, #64	@ 0x40
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t buf[3];
    
    if (handle == NULL)                                                                       /* check handle */
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <bmp390_read_temperature_pressure+0x18>
    {
        return 2;                                                                             /* return error */
 80024a0:	2302      	movs	r3, #2
 80024a2:	e1fa      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
    }
    if (handle->inited != 1)                                                                  /* check handle initialization */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <bmp390_read_temperature_pressure+0x26>
    {
        return 3;                                                                             /* return error */
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1f3      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_FIFO_CONFIG_1, (uint8_t *)&prev, 1);       /* read config */
 80024b2:	f107 0217 	add.w	r2, r7, #23
 80024b6:	2301      	movs	r3, #1
 80024b8:	2117      	movs	r1, #23
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7fe fd7a 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 80024c6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <bmp390_read_temperature_pressure+0x50>
    {
        handle->debug_print("bmp390: get fifo config 1 register failed.\n");                  /* get fifo config 1 register failed */
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80024d4:	48b1      	ldr	r0, [pc, #708]	@ (800279c <bmp390_read_temperature_pressure+0x310>)
 80024d6:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 80024d8:	2301      	movs	r3, #1
 80024da:	e1de      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
    }
    if ((prev & 0x01) != 0)                                                                   /* check fifo mode */
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <bmp390_read_temperature_pressure+0x68>
    {
        handle->debug_print("bmp390: fifo mode can't use this function.\n");                  /* fifo mode can't use this function */
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80024ec:	48ac      	ldr	r0, [pc, #688]	@ (80027a0 <bmp390_read_temperature_pressure+0x314>)
 80024ee:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 80024f0:	2301      	movs	r3, #1
 80024f2:	e1d2      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
    }
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);            /* read config */
 80024f4:	f107 0217 	add.w	r2, r7, #23
 80024f8:	2301      	movs	r3, #1
 80024fa:	211b      	movs	r1, #27
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7fe fd59 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8002502:	4603      	mov	r3, r0
 8002504:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 8002508:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <bmp390_read_temperature_pressure+0x92>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                       /* get pwr ctrl register failed */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002516:	48a3      	ldr	r0, [pc, #652]	@ (80027a4 <bmp390_read_temperature_pressure+0x318>)
 8002518:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 800251a:	2301      	movs	r3, #1
 800251c:	e1bd      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
    }
    if (((prev >> 4) & 0x03) == 0x03)                                                         /* normal mode */
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b03      	cmp	r3, #3
 800252a:	f040 80a0 	bne.w	800266e <bmp390_read_temperature_pressure+0x1e2>
    {
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);          /* read config */
 800252e:	f107 0217 	add.w	r2, r7, #23
 8002532:	2301      	movs	r3, #1
 8002534:	2103      	movs	r1, #3
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7fe fd3c 	bl	8000fb4 <a_bmp390_iic_spi_read>
 800253c:	4603      	mov	r3, r0
 800253e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 8002542:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <bmp390_read_temperature_pressure+0xcc>
        {
            handle->debug_print("bmp390: get status register failed.\n");                     /* get status register failed */
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002550:	4895      	ldr	r0, [pc, #596]	@ (80027a8 <bmp390_read_temperature_pressure+0x31c>)
 8002552:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8002554:	2301      	movs	r3, #1
 8002556:	e1a0      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
        }
        if ((prev & (1 << 6)) != 0)                                                           /* data is ready */
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03d      	beq.n	80025de <bmp390_read_temperature_pressure+0x152>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);        /* read raw data */
 8002562:	f107 0214 	add.w	r2, r7, #20
 8002566:	2303      	movs	r3, #3
 8002568:	2107      	movs	r1, #7
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f7fe fd22 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8002570:	4603      	mov	r3, r0
 8002572:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8002576:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <bmp390_read_temperature_pressure+0x100>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002584:	4889      	ldr	r0, [pc, #548]	@ (80027ac <bmp390_read_temperature_pressure+0x320>)
 8002586:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002588:	2301      	movs	r3, #1
 800258a:	e186      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
            }
            *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];       /* get data */
 800258c:	7dbb      	ldrb	r3, [r7, #22]
 800258e:	041a      	lsls	r2, r3, #16
 8002590:	7d7b      	ldrb	r3, [r7, #21]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	4313      	orrs	r3, r2
 8002596:	7d3a      	ldrb	r2, [r7, #20]
 8002598:	431a      	orrs	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_temperature(handle, *temperature_raw);               /* compensate temperature */
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7fe ff13 	bl	80013d0 <a_bmp390_compensate_temperature>
 80025aa:	e9c7 0108 	strd	r0, r1, [r7, #32]
            *temperature_c = (float)((double)output / 100.0);                                 /* get converted temperature */
 80025ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025b2:	f7fe f813 	bl	80005dc <__aeabi_l2d>
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	4b7d      	ldr	r3, [pc, #500]	@ (80027b0 <bmp390_read_temperature_pressure+0x324>)
 80025bc:	f7fe f966 	bl	800088c <__aeabi_ddiv>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe fb0e 	bl	8000be8 <__aeabi_d2f>
 80025cc:	4602      	mov	r2, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	601a      	str	r2, [r3, #0]
        {
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
           
            return 1;                                                                         /* return error */
        }
        if ((prev & (1 << 5)) != 0)                                                           /* data is ready */
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d041      	beq.n	8002660 <bmp390_read_temperature_pressure+0x1d4>
 80025dc:	e006      	b.n	80025ec <bmp390_read_temperature_pressure+0x160>
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80025e4:	4873      	ldr	r0, [pc, #460]	@ (80027b4 <bmp390_read_temperature_pressure+0x328>)
 80025e6:	4798      	blx	r3
            return 1;                                                                         /* return error */
 80025e8:	2301      	movs	r3, #1
 80025ea:	e156      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);        /* read data */
 80025ec:	f107 0214 	add.w	r2, r7, #20
 80025f0:	2303      	movs	r3, #3
 80025f2:	2104      	movs	r1, #4
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7fe fcdd 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8002600:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <bmp390_read_temperature_pressure+0x18a>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800260e:	4867      	ldr	r0, [pc, #412]	@ (80027ac <bmp390_read_temperature_pressure+0x320>)
 8002610:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002612:	2301      	movs	r3, #1
 8002614:	e141      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
            }
            *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];          /* get data */
 8002616:	7dbb      	ldrb	r3, [r7, #22]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	7d7b      	ldrb	r3, [r7, #21]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	4313      	orrs	r3, r2
 8002620:	7d3a      	ldrb	r2, [r7, #20]
 8002622:	431a      	orrs	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_pressure(handle, *pressure_raw);                     /* compensate pressure */
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7fe ffb6 	bl	80015a0 <a_bmp390_compensate_pressure>
 8002634:	e9c7 0106 	strd	r0, r1, [r7, #24]
            *pressure_pa = (float)((double)output / 100.0);                                   /* get converted pressure */
 8002638:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800263c:	f7fd ffce 	bl	80005dc <__aeabi_l2d>
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b5a      	ldr	r3, [pc, #360]	@ (80027b0 <bmp390_read_temperature_pressure+0x324>)
 8002646:	f7fe f921 	bl	800088c <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f7fe fac9 	bl	8000be8 <__aeabi_d2f>
 8002656:	4602      	mov	r2, r0
 8002658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800265a:	601a      	str	r2, [r3, #0]
            
            return 0;                                                                         /* success return 0 */
 800265c:	2300      	movs	r3, #0
 800265e:	e11c      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
        }
        else
        {
            handle->debug_print("bmp390: pressure data is not ready.\n");                     /* pressure data is not ready */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002666:	4854      	ldr	r0, [pc, #336]	@ (80027b8 <bmp390_read_temperature_pressure+0x32c>)
 8002668:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 800266a:	2301      	movs	r3, #1
 800266c:	e115      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
        }
    }
    else if (((prev >> 4) & 0x03) == 0x00)                                                    /* force mode */
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b00      	cmp	r3, #0
 800267a:	f040 8108 	bne.w	800288e <bmp390_read_temperature_pressure+0x402>
    {
        uint16_t cnt = 5000;
 800267e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002682:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002684:	f107 0217 	add.w	r2, r7, #23
 8002688:	2301      	movs	r3, #1
 800268a:	211b      	movs	r1, #27
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7fe fc91 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 8002698:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <bmp390_read_temperature_pressure+0x222>
        {
            handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80026a6:	483f      	ldr	r0, [pc, #252]	@ (80027a4 <bmp390_read_temperature_pressure+0x318>)
 80026a8:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0f5      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
        }
        prev &= ~(0x03 << 4);                                                                 /* clear 4-5 bits */
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	75fb      	strb	r3, [r7, #23]
        prev |= 0x01 << 4;                                                                    /* set bit 4 */
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	f043 0310 	orr.w	r3, r3, #16
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	75fb      	strb	r3, [r7, #23]
        res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80026c2:	f107 0217 	add.w	r2, r7, #23
 80026c6:	2301      	movs	r3, #1
 80026c8:	211b      	movs	r1, #27
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7fe fcbd 	bl	800104a <a_bmp390_iic_spi_write>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 80026d6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <bmp390_read_temperature_pressure+0x260>
        {
            handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80026e4:	4835      	ldr	r0, [pc, #212]	@ (80027bc <bmp390_read_temperature_pressure+0x330>)
 80026e6:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0d6      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
        }
        
        while (1)                                                                             /* loop */
        {
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 80026ec:	f107 0217 	add.w	r2, r7, #23
 80026f0:	2301      	movs	r3, #1
 80026f2:	2103      	movs	r1, #3
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7fe fc5d 	bl	8000fb4 <a_bmp390_iic_spi_read>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8002700:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <bmp390_read_temperature_pressure+0x28a>
            {
                handle->debug_print("bmp390: get status register failed.\n");                 /* get status register failed */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800270e:	4826      	ldr	r0, [pc, #152]	@ (80027a8 <bmp390_read_temperature_pressure+0x31c>)
 8002710:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002712:	2301      	movs	r3, #1
 8002714:	e0c1      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
            }
            if ((prev & (1 << 6)) != 0)                                                       /* data is ready */
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d04f      	beq.n	80027c0 <bmp390_read_temperature_pressure+0x334>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);    /* read raw data */
 8002720:	f107 0214 	add.w	r2, r7, #20
 8002724:	2303      	movs	r3, #3
 8002726:	2107      	movs	r1, #7
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7fe fc43 	bl	8000fb4 <a_bmp390_iic_spi_read>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 8002734:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002738:	2b00      	cmp	r3, #0
 800273a:	d006      	beq.n	800274a <bmp390_read_temperature_pressure+0x2be>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002742:	481a      	ldr	r0, [pc, #104]	@ (80027ac <bmp390_read_temperature_pressure+0x320>)
 8002744:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 8002746:	2301      	movs	r3, #1
 8002748:	e0a7      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
                }
                *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];   /* get data */
 800274a:	7dbb      	ldrb	r3, [r7, #22]
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	7d7b      	ldrb	r3, [r7, #21]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	4313      	orrs	r3, r2
 8002754:	7d3a      	ldrb	r2, [r7, #20]
 8002756:	431a      	orrs	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_temperature(handle, *temperature_raw);           /* compensate temperature */
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7fe fe34 	bl	80013d0 <a_bmp390_compensate_temperature>
 8002768:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                *temperature_c = (float)((double)output / 100.0);                             /* get converted temperature */
 800276c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002770:	f7fd ff34 	bl	80005dc <__aeabi_l2d>
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <bmp390_read_temperature_pressure+0x324>)
 800277a:	f7fe f887 	bl	800088c <__aeabi_ddiv>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	f7fe fa2f 	bl	8000be8 <__aeabi_d2f>
 800278a:	4602      	mov	r2, r0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	601a      	str	r2, [r3, #0]
                
                break;                                                                        /* break */
 8002790:	bf00      	nop
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
               
                return 1;                                                                     /* return error */
            }
        }
        cnt = 5000;                                                                           /* set cnt */
 8002792:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002796:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002798:	e026      	b.n	80027e8 <bmp390_read_temperature_pressure+0x35c>
 800279a:	bf00      	nop
 800279c:	0800b2dc 	.word	0x0800b2dc
 80027a0:	0800b7d0 	.word	0x0800b7d0
 80027a4:	0800b44c 	.word	0x0800b44c
 80027a8:	0800b180 	.word	0x0800b180
 80027ac:	0800b7fc 	.word	0x0800b7fc
 80027b0:	40590000 	.word	0x40590000
 80027b4:	0800b820 	.word	0x0800b820
 80027b8:	0800b864 	.word	0x0800b864
 80027bc:	0800b474 	.word	0x0800b474
                if (cnt != 0)                                                                 /* check cnt */
 80027c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <bmp390_read_temperature_pressure+0x34c>
                    cnt--;                                                                    /* cnt-- */
 80027c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80027c8:	3b01      	subs	r3, #1
 80027ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80027d2:	2001      	movs	r0, #1
 80027d4:	4798      	blx	r3
                    continue;                                                                 /* continue */
 80027d6:	e006      	b.n	80027e6 <bmp390_read_temperature_pressure+0x35a>
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80027de:	4831      	ldr	r0, [pc, #196]	@ (80028a4 <bmp390_read_temperature_pressure+0x418>)
 80027e0:	4798      	blx	r3
                return 1;                                                                     /* return error */
 80027e2:	2301      	movs	r3, #1
 80027e4:	e059      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 80027e6:	e781      	b.n	80026ec <bmp390_read_temperature_pressure+0x260>
        
        while (1)                                                                             /* loop */
        {
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d039      	beq.n	8002866 <bmp390_read_temperature_pressure+0x3da>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);    /* read raw data */
 80027f2:	f107 0214 	add.w	r2, r7, #20
 80027f6:	2303      	movs	r3, #3
 80027f8:	2104      	movs	r1, #4
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7fe fbda 	bl	8000fb4 <a_bmp390_iic_spi_read>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 8002806:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <bmp390_read_temperature_pressure+0x390>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002814:	4824      	ldr	r0, [pc, #144]	@ (80028a8 <bmp390_read_temperature_pressure+0x41c>)
 8002816:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 8002818:	2301      	movs	r3, #1
 800281a:	e03e      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
                }
                *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];      /* get data */
 800281c:	7dbb      	ldrb	r3, [r7, #22]
 800281e:	041a      	lsls	r2, r3, #16
 8002820:	7d7b      	ldrb	r3, [r7, #21]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	4313      	orrs	r3, r2
 8002826:	7d3a      	ldrb	r2, [r7, #20]
 8002828:	431a      	orrs	r2, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_pressure(handle, *pressure_raw);                 /* compensate pressure */
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7fe feb3 	bl	80015a0 <a_bmp390_compensate_pressure>
 800283a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                *pressure_pa = (float)((double)output / 100.0);                               /* get converted pressure */
 800283e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002842:	f7fd fecb 	bl	80005dc <__aeabi_l2d>
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <bmp390_read_temperature_pressure+0x420>)
 800284c:	f7fe f81e 	bl	800088c <__aeabi_ddiv>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fe f9c6 	bl	8000be8 <__aeabi_d2f>
 800285c:	4602      	mov	r2, r0
 800285e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002860:	601a      	str	r2, [r3, #0]
                
                return 0;                                                                     /* success return 0 */
 8002862:	2300      	movs	r3, #0
 8002864:	e019      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
            }
            else
            {
                if (cnt != 0)                                                                 /* check cnt */
 8002866:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <bmp390_read_temperature_pressure+0x3f2>
                {
                    cnt--;                                                                    /* cnt-- */
 800286c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800286e:	3b01      	subs	r3, #1
 8002870:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8002878:	2001      	movs	r0, #1
 800287a:	4798      	blx	r3
                    
                    continue;                                                                 /* continue */
 800287c:	e006      	b.n	800288c <bmp390_read_temperature_pressure+0x400>
                }
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002884:	4807      	ldr	r0, [pc, #28]	@ (80028a4 <bmp390_read_temperature_pressure+0x418>)
 8002886:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002888:	2301      	movs	r3, #1
 800288a:	e006      	b.n	800289a <bmp390_read_temperature_pressure+0x40e>
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 800288c:	e7ac      	b.n	80027e8 <bmp390_read_temperature_pressure+0x35c>
            }
        }
    }
    else
    {
        handle->debug_print("bmp390: mode is invalid.\n");                                    /* mode is invalid */
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002894:	4806      	ldr	r0, [pc, #24]	@ (80028b0 <bmp390_read_temperature_pressure+0x424>)
 8002896:	4798      	blx	r3
           
        return 1;                                                                             /* return error */
 8002898:	2301      	movs	r3, #1
    }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3740      	adds	r7, #64	@ 0x40
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	0800b820 	.word	0x0800b820
 80028a8:	0800b7fc 	.word	0x0800b7fc
 80028ac:	40590000 	.word	0x40590000
 80028b0:	0800b848 	.word	0x0800b848

080028b4 <bmp390_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_addr_pin(bmp390_handle_t *handle, bmp390_address_t addr_pin)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <bmp390_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 80028c6:	2302      	movs	r3, #2
 80028c8:	e003      	b.n	80028d2 <bmp390_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set iic address */
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <bmp390_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_interface(bmp390_handle_t *handle, bmp390_interface_t interface) 
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                        /* check handle */
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <bmp390_set_interface+0x16>
    {
        return 2;                              /* return error */
 80028f0:	2302      	movs	r3, #2
 80028f2:	e004      	b.n	80028fe <bmp390_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;      /* set interface */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
    
    return 0;                                  /* success return 0 */
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <bmp390_i2c_interface_init>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */

// Wrapper functions for BMP390 driver
uint8_t bmp390_i2c_interface_init(void) {
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  // MX_I2C1_Init() is called before this, so I2C hardware is already initialized.
  // This function can be a no-op or ensure I2C1 is ready.
  return 0; // Success
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <bmp390_i2c_interface_deinit>:

uint8_t bmp390_i2c_interface_deinit(void) {
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  // Optional: HAL_I2C_DeInit(&hi2c1); if necessary for power down
  return 0; // Success
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <bmp390_i2c_read>:

uint8_t bmp390_i2c_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af04      	add	r7, sp, #16
 8002932:	603a      	str	r2, [r7, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
 800293a:	460b      	mov	r3, r1
 800293c:	71bb      	strb	r3, [r7, #6]
 800293e:	4613      	mov	r3, r2
 8002940:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_read calls this with addr = handle->iic_addr
    if (HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	b299      	uxth	r1, r3
 8002946:	79bb      	ldrb	r3, [r7, #6]
 8002948:	b29a      	uxth	r2, r3
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	88bb      	ldrh	r3, [r7, #4]
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	4806      	ldr	r0, [pc, #24]	@ (8002974 <bmp390_i2c_read+0x48>)
 800295c:	f002 f9fc 	bl	8004d58 <HAL_I2C_Mem_Read>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <bmp390_i2c_read+0x3e>
        return 0; // Success
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <bmp390_i2c_read+0x40>
    }
    return 1; // Failure
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	2000041c 	.word	0x2000041c

08002978 <bmp390_i2c_write>:

uint8_t bmp390_i2c_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af04      	add	r7, sp, #16
 800297e:	603a      	str	r2, [r7, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
 8002986:	460b      	mov	r3, r1
 8002988:	71bb      	strb	r3, [r7, #6]
 800298a:	4613      	mov	r3, r2
 800298c:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_write calls this in a loop with len=1 for multi-byte writes.
    // So, this function will effectively be called to write one byte at a time.
    if (HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	b299      	uxth	r1, r3
 8002992:	79bb      	ldrb	r3, [r7, #6]
 8002994:	b29a      	uxth	r2, r3
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	9302      	str	r3, [sp, #8]
 800299c:	88bb      	ldrh	r3, [r7, #4]
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2301      	movs	r3, #1
 80029a6:	4806      	ldr	r0, [pc, #24]	@ (80029c0 <bmp390_i2c_write+0x48>)
 80029a8:	f002 f8c2 	bl	8004b30 <HAL_I2C_Mem_Write>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <bmp390_i2c_write+0x3e>
        return 0; // Success
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <bmp390_i2c_write+0x40>
    }
    return 1; // Failure
 80029b6:	2301      	movs	r3, #1
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	2000041c 	.word	0x2000041c

080029c4 <bmp390_delay_ms>:

void bmp390_delay_ms(uint32_t ms) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f001 f9db 	bl	8003d88 <HAL_Delay>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <bmp390_spi_interface_init>:

// Dummy SPI functions to satisfy driver checks when using I2C
uint8_t bmp390_spi_interface_init(void) {
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <bmp390_spi_interface_deinit>:

uint8_t bmp390_spi_interface_deinit(void) {
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <bmp390_spi_read>:

uint8_t bmp390_spi_read(uint8_t reg, uint8_t *buf, uint16_t len) {
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	6039      	str	r1, [r7, #0]
 8002a04:	71fb      	strb	r3, [r7, #7]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8002a0a:	2301      	movs	r3, #1
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <bmp390_spi_write>:

uint8_t bmp390_spi_write(uint8_t reg, uint8_t *buf, uint16_t len) {
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
 8002a24:	4613      	mov	r3, r2
 8002a26:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8002a28:	2301      	movs	r3, #1
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <bmp390_debug_print>:

void bmp390_debug_print(const char *const fmt, ...) {
 8002a38:	b40f      	push	{r0, r1, r2, r3}
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b0a2      	sub	sp, #136	@ 0x88
 8002a3e:	af00      	add	r7, sp, #0
    char dbg_buffer[128]; // Buffer for debug messages
    va_list args;
    va_start(args, fmt);
 8002a40:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002a44:	607b      	str	r3, [r7, #4]
    vsnprintf(dbg_buffer, sizeof(dbg_buffer), fmt, args);
 8002a46:	f107 0008 	add.w	r0, r7, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002a50:	2180      	movs	r1, #128	@ 0x80
 8002a52:	f005 fea7 	bl	80087a4 <vsniprintf>
    va_end(args);
    // Prepend "BMP390_DBG: " to distinguish driver debug messages
    // snprintf(uart_buffer, sizeof(uart_buffer), "BMP390_DBG: %s", dbg_buffer); // This might truncate
    // HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
    // Direct transmit is simpler if buffer is managed carefully
    HAL_UART_Transmit(&huart3, (uint8_t*)"BMP390_DBG: ", 12, HAL_MAX_DELAY);
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	490c      	ldr	r1, [pc, #48]	@ (8002a90 <bmp390_debug_print+0x58>)
 8002a5e:	480d      	ldr	r0, [pc, #52]	@ (8002a94 <bmp390_debug_print+0x5c>)
 8002a60:	f004 f946 	bl	8006cf0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buffer, strlen(dbg_buffer), HAL_MAX_DELAY);
 8002a64:	f107 0308 	add.w	r3, r7, #8
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fc21 	bl	80002b0 <strlen>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	f107 0108 	add.w	r1, r7, #8
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	4806      	ldr	r0, [pc, #24]	@ (8002a94 <bmp390_debug_print+0x5c>)
 8002a7c:	f004 f938 	bl	8006cf0 <HAL_UART_Transmit>
}
 8002a80:	bf00      	nop
 8002a82:	3788      	adds	r7, #136	@ 0x88
 8002a84:	46bd      	mov	sp, r7
 8002a86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a8a:	b004      	add	sp, #16
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	0800b94c 	.word	0x0800b94c
 8002a94:	20000470 	.word	0x20000470

08002a98 <calibrate_sea_level_pressure_hpa>:


// Altitude calculation functions
// pressure_hpa: current measured pressure in hPa
// known_altitude_meters: current known altitude in meters
void calibrate_sea_level_pressure_hpa(float current_pressure_hpa, float known_altitude_meters) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002aa2:	edc7 0a00 	vstr	s1, [r7]
  sea_level_pressure_hpa = current_pressure_hpa / powf((1.0f - (known_altitude_meters * 0.0000225577f)), 5.255877f);
 8002aa6:	edd7 7a00 	vldr	s15, [r7]
 8002aaa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002ae0 <calibrate_sea_level_pressure_hpa+0x48>
 8002aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aba:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8002ae4 <calibrate_sea_level_pressure_hpa+0x4c>
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	f007 ff4b 	bl	800a95c <powf>
 8002ac6:	eef0 6a40 	vmov.f32	s13, s0
 8002aca:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <calibrate_sea_level_pressure_hpa+0x50>)
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	37bd3a4b 	.word	0x37bd3a4b
 8002ae4:	40a83025 	.word	0x40a83025
 8002ae8:	20000d28 	.word	0x20000d28

08002aec <calculate_altitude_hpa>:

// pressure_hpa: current measured pressure in hPa
// returns altitude in meters
float calculate_altitude_hpa(float pressure_hpa) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	ed87 0a01 	vstr	s0, [r7, #4]
  if (sea_level_pressure_hpa <= 0) return 0.0f; // Avoid division by zero or log of non-positive
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <calculate_altitude_hpa+0x58>)
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b04:	d802      	bhi.n	8002b0c <calculate_altitude_hpa+0x20>
 8002b06:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8002b48 <calculate_altitude_hpa+0x5c>
 8002b0a:	e016      	b.n	8002b3a <calculate_altitude_hpa+0x4e>
  return 44330.0f * (1.0f - powf(pressure_hpa / sea_level_pressure_hpa, 0.1903f));
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <calculate_altitude_hpa+0x58>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b1a:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8002b4c <calculate_altitude_hpa+0x60>
 8002b1e:	eeb0 0a66 	vmov.f32	s0, s13
 8002b22:	f007 ff1b 	bl	800a95c <powf>
 8002b26:	eef0 7a40 	vmov.f32	s15, s0
 8002b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b32:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002b50 <calculate_altitude_hpa+0x64>
 8002b36:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000d28 	.word	0x20000d28
 8002b48:	00000000 	.word	0x00000000
 8002b4c:	3e42de01 	.word	0x3e42de01
 8002b50:	472d2a00 	.word	0x472d2a00

08002b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b58:	b099      	sub	sp, #100	@ 0x64
 8002b5a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b5c:	f001 f8b7 	bl	8003cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b60:	f000 fb72 	bl	8003248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b64:	f000 fcc4 	bl	80034f0 <MX_GPIO_Init>
  MX_ETH_Init();
 8002b68:	f000 fbd6 	bl	8003318 <MX_ETH_Init>
  MX_I2C1_Init();
 8002b6c:	f000 fc22 	bl	80033b4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002b70:	f000 fc60 	bl	8003434 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002b74:	f000 fc8e 	bl	8003494 <MX_USB_OTG_FS_PCD_Init>
  // Initialize I2C (already called by HAL_Init system, but good to ensure)
  // MX_I2C1_Init(); // Called above in peripheral init sequence

  // char uart_buffer[100]; // Moved global and resized
  
  sprintf(uart_buffer, "System Initialized. UART OK.\r\n");
 8002b78:	497c      	ldr	r1, [pc, #496]	@ (8002d6c <main+0x218>)
 8002b7a:	487d      	ldr	r0, [pc, #500]	@ (8002d70 <main+0x21c>)
 8002b7c:	f005 fd7e 	bl	800867c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002b80:	487b      	ldr	r0, [pc, #492]	@ (8002d70 <main+0x21c>)
 8002b82:	f7fd fb95 	bl	80002b0 <strlen>
 8002b86:	4603      	mov	r3, r0
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	4978      	ldr	r1, [pc, #480]	@ (8002d70 <main+0x21c>)
 8002b90:	4878      	ldr	r0, [pc, #480]	@ (8002d74 <main+0x220>)
 8002b92:	f004 f8ad 	bl	8006cf0 <HAL_UART_Transmit>
  
  // Scan the I2C bus first to see what devices are present
  sprintf(uart_buffer, "Scanning I2C bus for devices...\r\n");
 8002b96:	4978      	ldr	r1, [pc, #480]	@ (8002d78 <main+0x224>)
 8002b98:	4875      	ldr	r0, [pc, #468]	@ (8002d70 <main+0x21c>)
 8002b9a:	f005 fd6f 	bl	800867c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002b9e:	4874      	ldr	r0, [pc, #464]	@ (8002d70 <main+0x21c>)
 8002ba0:	f7fd fb86 	bl	80002b0 <strlen>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bac:	4970      	ldr	r1, [pc, #448]	@ (8002d70 <main+0x21c>)
 8002bae:	4871      	ldr	r0, [pc, #452]	@ (8002d74 <main+0x220>)
 8002bb0:	f004 f89e 	bl	8006cf0 <HAL_UART_Transmit>
  
  uint8_t i2c_devices_found = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  for (uint8_t i = 1; i < 128; i++) {
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002bc0:	e04d      	b.n	8002c5e <main+0x10a>
    if (i < 0x08 || i > 0x77) continue;
 8002bc2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002bc6:	2b07      	cmp	r3, #7
 8002bc8:	d943      	bls.n	8002c52 <main+0xfe>
 8002bca:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002bce:	2b77      	cmp	r3, #119	@ 0x77
 8002bd0:	d83f      	bhi.n	8002c52 <main+0xfe>

    HAL_StatusTypeDef i2c_result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 2, 10); // Use 2 trials, 10ms timeout
 8002bd2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	b299      	uxth	r1, r3
 8002bdc:	230a      	movs	r3, #10
 8002bde:	2202      	movs	r2, #2
 8002be0:	4866      	ldr	r0, [pc, #408]	@ (8002d7c <main+0x228>)
 8002be2:	f002 f9d3 	bl	8004f8c <HAL_I2C_IsDeviceReady>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    
    if (i2c_result == HAL_OK) {
 8002bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d12f      	bne.n	8002c54 <main+0x100>
      i2c_devices_found++;
 8002bf4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      sprintf(uart_buffer, "Found I2C device at address: 0x%02X\r\n", i);
 8002bfe:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002c02:	461a      	mov	r2, r3
 8002c04:	495e      	ldr	r1, [pc, #376]	@ (8002d80 <main+0x22c>)
 8002c06:	485a      	ldr	r0, [pc, #360]	@ (8002d70 <main+0x21c>)
 8002c08:	f005 fd38 	bl	800867c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002c0c:	4858      	ldr	r0, [pc, #352]	@ (8002d70 <main+0x21c>)
 8002c0e:	f7fd fb4f 	bl	80002b0 <strlen>
 8002c12:	4603      	mov	r3, r0
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1a:	4955      	ldr	r1, [pc, #340]	@ (8002d70 <main+0x21c>)
 8002c1c:	4855      	ldr	r0, [pc, #340]	@ (8002d74 <main+0x220>)
 8002c1e:	f004 f867 	bl	8006cf0 <HAL_UART_Transmit>
      
      if (i == (BMP390_I2C_ADDRESS_LOW >> 1) || i == (BMP390_I2C_ADDRESS_HIGH >> 1)) {
 8002c22:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002c26:	2b76      	cmp	r3, #118	@ 0x76
 8002c28:	d003      	beq.n	8002c32 <main+0xde>
 8002c2a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002c2e:	2b77      	cmp	r3, #119	@ 0x77
 8002c30:	d110      	bne.n	8002c54 <main+0x100>
        sprintf(uart_buffer, "  --> This could be a BMP390 sensor!\r\n");
 8002c32:	4954      	ldr	r1, [pc, #336]	@ (8002d84 <main+0x230>)
 8002c34:	484e      	ldr	r0, [pc, #312]	@ (8002d70 <main+0x21c>)
 8002c36:	f005 fd21 	bl	800867c <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002c3a:	484d      	ldr	r0, [pc, #308]	@ (8002d70 <main+0x21c>)
 8002c3c:	f7fd fb38 	bl	80002b0 <strlen>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	4949      	ldr	r1, [pc, #292]	@ (8002d70 <main+0x21c>)
 8002c4a:	484a      	ldr	r0, [pc, #296]	@ (8002d74 <main+0x220>)
 8002c4c:	f004 f850 	bl	8006cf0 <HAL_UART_Transmit>
 8002c50:	e000      	b.n	8002c54 <main+0x100>
    if (i < 0x08 || i > 0x77) continue;
 8002c52:	bf00      	nop
  for (uint8_t i = 1; i < 128; i++) {
 8002c54:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002c5e:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	daad      	bge.n	8002bc2 <main+0x6e>
      }
    }
  }
  
  if (i2c_devices_found == 0) {
 8002c66:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <main+0x13a>
    sprintf(uart_buffer, "No I2C devices found! Check wiring/pull-ups.\r\n");
 8002c6e:	4946      	ldr	r1, [pc, #280]	@ (8002d88 <main+0x234>)
 8002c70:	483f      	ldr	r0, [pc, #252]	@ (8002d70 <main+0x21c>)
 8002c72:	f005 fd03 	bl	800867c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002c76:	483e      	ldr	r0, [pc, #248]	@ (8002d70 <main+0x21c>)
 8002c78:	f7fd fb1a 	bl	80002b0 <strlen>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
 8002c84:	493a      	ldr	r1, [pc, #232]	@ (8002d70 <main+0x21c>)
 8002c86:	483b      	ldr	r0, [pc, #236]	@ (8002d74 <main+0x220>)
 8002c88:	f004 f832 	bl	8006cf0 <HAL_UART_Transmit>
 8002c8c:	e011      	b.n	8002cb2 <main+0x15e>
  } else {
    sprintf(uart_buffer, "Found %d I2C devices in total.\r\n", i2c_devices_found);
 8002c8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c92:	461a      	mov	r2, r3
 8002c94:	493d      	ldr	r1, [pc, #244]	@ (8002d8c <main+0x238>)
 8002c96:	4836      	ldr	r0, [pc, #216]	@ (8002d70 <main+0x21c>)
 8002c98:	f005 fcf0 	bl	800867c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002c9c:	4834      	ldr	r0, [pc, #208]	@ (8002d70 <main+0x21c>)
 8002c9e:	f7fd fb07 	bl	80002b0 <strlen>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	4931      	ldr	r1, [pc, #196]	@ (8002d70 <main+0x21c>)
 8002cac:	4831      	ldr	r0, [pc, #196]	@ (8002d74 <main+0x220>)
 8002cae:	f004 f81f 	bl	8006cf0 <HAL_UART_Transmit>
  }

  // Initialize BMP390 using the new driver
  DRIVER_BMP390_LINK_INIT(&bmp390_handle, bmp390_handle_t);
 8002cb2:	f44f 7214 	mov.w	r2, #592	@ 0x250
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4835      	ldr	r0, [pc, #212]	@ (8002d90 <main+0x23c>)
 8002cba:	f005 fd81 	bl	80087c0 <memset>
  DRIVER_BMP390_LINK_IIC_INIT(&bmp390_handle, bmp390_i2c_interface_init);
 8002cbe:	4b34      	ldr	r3, [pc, #208]	@ (8002d90 <main+0x23c>)
 8002cc0:	4a34      	ldr	r2, [pc, #208]	@ (8002d94 <main+0x240>)
 8002cc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  DRIVER_BMP390_LINK_IIC_DEINIT(&bmp390_handle, bmp390_i2c_interface_deinit);
 8002cc6:	4b32      	ldr	r3, [pc, #200]	@ (8002d90 <main+0x23c>)
 8002cc8:	4a33      	ldr	r2, [pc, #204]	@ (8002d98 <main+0x244>)
 8002cca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  DRIVER_BMP390_LINK_IIC_READ(&bmp390_handle, bmp390_i2c_read);
 8002cce:	4b30      	ldr	r3, [pc, #192]	@ (8002d90 <main+0x23c>)
 8002cd0:	4a32      	ldr	r2, [pc, #200]	@ (8002d9c <main+0x248>)
 8002cd2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  DRIVER_BMP390_LINK_IIC_WRITE(&bmp390_handle, bmp390_i2c_write);
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002d90 <main+0x23c>)
 8002cd8:	4a31      	ldr	r2, [pc, #196]	@ (8002da0 <main+0x24c>)
 8002cda:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  DRIVER_BMP390_LINK_DELAY_MS(&bmp390_handle, bmp390_delay_ms);
 8002cde:	4b2c      	ldr	r3, [pc, #176]	@ (8002d90 <main+0x23c>)
 8002ce0:	4a30      	ldr	r2, [pc, #192]	@ (8002da4 <main+0x250>)
 8002ce2:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
  DRIVER_BMP390_LINK_DEBUG_PRINT(&bmp390_handle, bmp390_debug_print);
 8002ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d90 <main+0x23c>)
 8002ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8002da8 <main+0x254>)
 8002cea:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c

  // Link dummy SPI functions as well, even if not used, to satisfy driver checks
  DRIVER_BMP390_LINK_SPI_INIT(&bmp390_handle, bmp390_spi_interface_init);
 8002cee:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <main+0x23c>)
 8002cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8002dac <main+0x258>)
 8002cf2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  DRIVER_BMP390_LINK_SPI_DEINIT(&bmp390_handle, bmp390_spi_interface_deinit);
 8002cf6:	4b26      	ldr	r3, [pc, #152]	@ (8002d90 <main+0x23c>)
 8002cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8002db0 <main+0x25c>)
 8002cfa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  DRIVER_BMP390_LINK_SPI_READ(&bmp390_handle, bmp390_spi_read);
 8002cfe:	4b24      	ldr	r3, [pc, #144]	@ (8002d90 <main+0x23c>)
 8002d00:	4a2c      	ldr	r2, [pc, #176]	@ (8002db4 <main+0x260>)
 8002d02:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
  DRIVER_BMP390_LINK_SPI_WRITE(&bmp390_handle, bmp390_spi_write);
 8002d06:	4b22      	ldr	r3, [pc, #136]	@ (8002d90 <main+0x23c>)
 8002d08:	4a2b      	ldr	r2, [pc, #172]	@ (8002db8 <main+0x264>)
 8002d0a:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

  bmp390_set_interface(&bmp390_handle, BMP390_INTERFACE_IIC);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	481f      	ldr	r0, [pc, #124]	@ (8002d90 <main+0x23c>)
 8002d12:	f7ff fde4 	bl	80028de <bmp390_set_interface>
  // IMPORTANT: Set the correct I2C address based on your SDO/AD0 pin connection
  bmp390_set_addr_pin(&bmp390_handle, BMP390_ADDRESS_ADO_HIGH); // Corrected: Use 0x77 as detected by scan
 8002d16:	21ee      	movs	r1, #238	@ 0xee
 8002d18:	481d      	ldr	r0, [pc, #116]	@ (8002d90 <main+0x23c>)
 8002d1a:	f7ff fdcb 	bl	80028b4 <bmp390_set_addr_pin>

  sprintf(uart_buffer, "Initializing BMP390 (new driver)...\r\n");
 8002d1e:	4927      	ldr	r1, [pc, #156]	@ (8002dbc <main+0x268>)
 8002d20:	4813      	ldr	r0, [pc, #76]	@ (8002d70 <main+0x21c>)
 8002d22:	f005 fcab 	bl	800867c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002d26:	4812      	ldr	r0, [pc, #72]	@ (8002d70 <main+0x21c>)
 8002d28:	f7fd fac2 	bl	80002b0 <strlen>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
 8002d34:	490e      	ldr	r1, [pc, #56]	@ (8002d70 <main+0x21c>)
 8002d36:	480f      	ldr	r0, [pc, #60]	@ (8002d74 <main+0x220>)
 8002d38:	f003 ffda 	bl	8006cf0 <HAL_UART_Transmit>

  if (bmp390_init(&bmp390_handle) != 0) {
 8002d3c:	4814      	ldr	r0, [pc, #80]	@ (8002d90 <main+0x23c>)
 8002d3e:	f7ff fa6d 	bl	800221c <bmp390_init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d03d      	beq.n	8002dc4 <main+0x270>
      sprintf(uart_buffer, "BMP390 new driver initialization FAILED!\r\n");
 8002d48:	491d      	ldr	r1, [pc, #116]	@ (8002dc0 <main+0x26c>)
 8002d4a:	4809      	ldr	r0, [pc, #36]	@ (8002d70 <main+0x21c>)
 8002d4c:	f005 fc96 	bl	800867c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002d50:	4807      	ldr	r0, [pc, #28]	@ (8002d70 <main+0x21c>)
 8002d52:	f7fd faad 	bl	80002b0 <strlen>
 8002d56:	4603      	mov	r3, r0
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	4904      	ldr	r1, [pc, #16]	@ (8002d70 <main+0x21c>)
 8002d60:	4804      	ldr	r0, [pc, #16]	@ (8002d74 <main+0x220>)
 8002d62:	f003 ffc5 	bl	8006cf0 <HAL_UART_Transmit>
      Error_Handler();
 8002d66:	f000 fc65 	bl	8003634 <Error_Handler>
 8002d6a:	e0e9      	b.n	8002f40 <main+0x3ec>
 8002d6c:	0800b95c 	.word	0x0800b95c
 8002d70:	20000c28 	.word	0x20000c28
 8002d74:	20000470 	.word	0x20000470
 8002d78:	0800b97c 	.word	0x0800b97c
 8002d7c:	2000041c 	.word	0x2000041c
 8002d80:	0800b9a0 	.word	0x0800b9a0
 8002d84:	0800b9c8 	.word	0x0800b9c8
 8002d88:	0800b9f0 	.word	0x0800b9f0
 8002d8c:	0800ba20 	.word	0x0800ba20
 8002d90:	200009d8 	.word	0x200009d8
 8002d94:	0800290b 	.word	0x0800290b
 8002d98:	0800291b 	.word	0x0800291b
 8002d9c:	0800292d 	.word	0x0800292d
 8002da0:	08002979 	.word	0x08002979
 8002da4:	080029c5 	.word	0x080029c5
 8002da8:	08002a39 	.word	0x08002a39
 8002dac:	080029db 	.word	0x080029db
 8002db0:	080029eb 	.word	0x080029eb
 8002db4:	080029fb 	.word	0x080029fb
 8002db8:	08002a19 	.word	0x08002a19
 8002dbc:	0800ba44 	.word	0x0800ba44
 8002dc0:	0800ba6c 	.word	0x0800ba6c
  } else {
      sprintf(uart_buffer, "BMP390 new driver initialized successfully!\r\n");
 8002dc4:	4990      	ldr	r1, [pc, #576]	@ (8003008 <main+0x4b4>)
 8002dc6:	4891      	ldr	r0, [pc, #580]	@ (800300c <main+0x4b8>)
 8002dc8:	f005 fc58 	bl	800867c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002dcc:	488f      	ldr	r0, [pc, #572]	@ (800300c <main+0x4b8>)
 8002dce:	f7fd fa6f 	bl	80002b0 <strlen>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	498c      	ldr	r1, [pc, #560]	@ (800300c <main+0x4b8>)
 8002ddc:	488c      	ldr	r0, [pc, #560]	@ (8003010 <main+0x4bc>)
 8002dde:	f003 ff87 	bl	8006cf0 <HAL_UART_Transmit>

      // Configure sensor settings
      sprintf(uart_buffer, "Configuring BMP390...\r\n");
 8002de2:	498c      	ldr	r1, [pc, #560]	@ (8003014 <main+0x4c0>)
 8002de4:	4889      	ldr	r0, [pc, #548]	@ (800300c <main+0x4b8>)
 8002de6:	f005 fc49 	bl	800867c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002dea:	4888      	ldr	r0, [pc, #544]	@ (800300c <main+0x4b8>)
 8002dec:	f7fd fa60 	bl	80002b0 <strlen>
 8002df0:	4603      	mov	r3, r0
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	4984      	ldr	r1, [pc, #528]	@ (800300c <main+0x4b8>)
 8002dfa:	4885      	ldr	r0, [pc, #532]	@ (8003010 <main+0x4bc>)
 8002dfc:	f003 ff78 	bl	8006cf0 <HAL_UART_Transmit>

      if (bmp390_set_pressure_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x8) != 0) {
 8002e00:	2103      	movs	r1, #3
 8002e02:	4885      	ldr	r0, [pc, #532]	@ (8003018 <main+0x4c4>)
 8002e04:	f7ff f8f2 	bl	8001fec <bmp390_set_pressure_oversampling>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <main+0x2dc>
          sprintf(uart_buffer, "BMP390: Failed to set pressure oversampling\r\n");
 8002e0e:	4983      	ldr	r1, [pc, #524]	@ (800301c <main+0x4c8>)
 8002e10:	487e      	ldr	r0, [pc, #504]	@ (800300c <main+0x4b8>)
 8002e12:	f005 fc33 	bl	800867c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8002e16:	487d      	ldr	r0, [pc, #500]	@ (800300c <main+0x4b8>)
 8002e18:	f7fd fa4a 	bl	80002b0 <strlen>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	4979      	ldr	r1, [pc, #484]	@ (800300c <main+0x4b8>)
 8002e26:	487a      	ldr	r0, [pc, #488]	@ (8003010 <main+0x4bc>)
 8002e28:	f003 ff62 	bl	8006cf0 <HAL_UART_Transmit>
 8002e2c:	f000 fc02 	bl	8003634 <Error_Handler>
      }
      if (bmp390_set_temperature_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x1) != 0) {
 8002e30:	2100      	movs	r1, #0
 8002e32:	4879      	ldr	r0, [pc, #484]	@ (8003018 <main+0x4c4>)
 8002e34:	f7ff f926 	bl	8002084 <bmp390_set_temperature_oversampling>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <main+0x30c>
          sprintf(uart_buffer, "BMP390: Failed to set temperature oversampling\r\n");
 8002e3e:	4978      	ldr	r1, [pc, #480]	@ (8003020 <main+0x4cc>)
 8002e40:	4872      	ldr	r0, [pc, #456]	@ (800300c <main+0x4b8>)
 8002e42:	f005 fc1b 	bl	800867c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8002e46:	4871      	ldr	r0, [pc, #452]	@ (800300c <main+0x4b8>)
 8002e48:	f7fd fa32 	bl	80002b0 <strlen>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
 8002e54:	496d      	ldr	r1, [pc, #436]	@ (800300c <main+0x4b8>)
 8002e56:	486e      	ldr	r0, [pc, #440]	@ (8003010 <main+0x4bc>)
 8002e58:	f003 ff4a 	bl	8006cf0 <HAL_UART_Transmit>
 8002e5c:	f000 fbea 	bl	8003634 <Error_Handler>
      }
      if (bmp390_set_odr(&bmp390_handle, BMP390_ODR_25_HZ) != 0) { // 25 Hz ODR
 8002e60:	2103      	movs	r1, #3
 8002e62:	486d      	ldr	r0, [pc, #436]	@ (8003018 <main+0x4c4>)
 8002e64:	f7ff f95e 	bl	8002124 <bmp390_set_odr>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <main+0x33c>
          sprintf(uart_buffer, "BMP390: Failed to set ODR\r\n");
 8002e6e:	496d      	ldr	r1, [pc, #436]	@ (8003024 <main+0x4d0>)
 8002e70:	4866      	ldr	r0, [pc, #408]	@ (800300c <main+0x4b8>)
 8002e72:	f005 fc03 	bl	800867c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8002e76:	4865      	ldr	r0, [pc, #404]	@ (800300c <main+0x4b8>)
 8002e78:	f7fd fa1a 	bl	80002b0 <strlen>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	4961      	ldr	r1, [pc, #388]	@ (800300c <main+0x4b8>)
 8002e86:	4862      	ldr	r0, [pc, #392]	@ (8003010 <main+0x4bc>)
 8002e88:	f003 ff32 	bl	8006cf0 <HAL_UART_Transmit>
 8002e8c:	f000 fbd2 	bl	8003634 <Error_Handler>
      }
      if (bmp390_set_pressure(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable pressure
 8002e90:	2101      	movs	r1, #1
 8002e92:	4861      	ldr	r0, [pc, #388]	@ (8003018 <main+0x4c4>)
 8002e94:	f7fe ffbe 	bl	8001e14 <bmp390_set_pressure>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <main+0x36c>
          sprintf(uart_buffer, "BMP390: Failed to enable pressure measurement\r\n");
 8002e9e:	4962      	ldr	r1, [pc, #392]	@ (8003028 <main+0x4d4>)
 8002ea0:	485a      	ldr	r0, [pc, #360]	@ (800300c <main+0x4b8>)
 8002ea2:	f005 fbeb 	bl	800867c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8002ea6:	4859      	ldr	r0, [pc, #356]	@ (800300c <main+0x4b8>)
 8002ea8:	f7fd fa02 	bl	80002b0 <strlen>
 8002eac:	4603      	mov	r3, r0
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb4:	4955      	ldr	r1, [pc, #340]	@ (800300c <main+0x4b8>)
 8002eb6:	4856      	ldr	r0, [pc, #344]	@ (8003010 <main+0x4bc>)
 8002eb8:	f003 ff1a 	bl	8006cf0 <HAL_UART_Transmit>
 8002ebc:	f000 fbba 	bl	8003634 <Error_Handler>
      }
      if (bmp390_set_temperature(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable temperature
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4855      	ldr	r0, [pc, #340]	@ (8003018 <main+0x4c4>)
 8002ec4:	f7fe fff2 	bl	8001eac <bmp390_set_temperature>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <main+0x39c>
          sprintf(uart_buffer, "BMP390: Failed to enable temperature measurement\r\n");
 8002ece:	4957      	ldr	r1, [pc, #348]	@ (800302c <main+0x4d8>)
 8002ed0:	484e      	ldr	r0, [pc, #312]	@ (800300c <main+0x4b8>)
 8002ed2:	f005 fbd3 	bl	800867c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8002ed6:	484d      	ldr	r0, [pc, #308]	@ (800300c <main+0x4b8>)
 8002ed8:	f7fd f9ea 	bl	80002b0 <strlen>
 8002edc:	4603      	mov	r3, r0
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee4:	4949      	ldr	r1, [pc, #292]	@ (800300c <main+0x4b8>)
 8002ee6:	484a      	ldr	r0, [pc, #296]	@ (8003010 <main+0x4bc>)
 8002ee8:	f003 ff02 	bl	8006cf0 <HAL_UART_Transmit>
 8002eec:	f000 fba2 	bl	8003634 <Error_Handler>
      }
      if (bmp390_set_mode(&bmp390_handle, BMP390_MODE_NORMAL_MODE) != 0) {
 8002ef0:	2103      	movs	r1, #3
 8002ef2:	4849      	ldr	r0, [pc, #292]	@ (8003018 <main+0x4c4>)
 8002ef4:	f7ff f82a 	bl	8001f4c <bmp390_set_mode>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <main+0x3ce>
          sprintf(uart_buffer, "BMP390: Failed to set normal mode!\r\n");
 8002efe:	494c      	ldr	r1, [pc, #304]	@ (8003030 <main+0x4dc>)
 8002f00:	4842      	ldr	r0, [pc, #264]	@ (800300c <main+0x4b8>)
 8002f02:	f005 fbbb 	bl	800867c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8002f06:	4841      	ldr	r0, [pc, #260]	@ (800300c <main+0x4b8>)
 8002f08:	f7fd f9d2 	bl	80002b0 <strlen>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	493d      	ldr	r1, [pc, #244]	@ (800300c <main+0x4b8>)
 8002f16:	483e      	ldr	r0, [pc, #248]	@ (8003010 <main+0x4bc>)
 8002f18:	f003 feea 	bl	8006cf0 <HAL_UART_Transmit>
 8002f1c:	f000 fb8a 	bl	8003634 <Error_Handler>
 8002f20:	e00e      	b.n	8002f40 <main+0x3ec>
      } else {
          sprintf(uart_buffer, "BMP390 configured for Normal Mode (P_OSR_x8, T_OSR_x1, ODR_25Hz).\r\n");
 8002f22:	4944      	ldr	r1, [pc, #272]	@ (8003034 <main+0x4e0>)
 8002f24:	4839      	ldr	r0, [pc, #228]	@ (800300c <main+0x4b8>)
 8002f26:	f005 fba9 	bl	800867c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002f2a:	4838      	ldr	r0, [pc, #224]	@ (800300c <main+0x4b8>)
 8002f2c:	f7fd f9c0 	bl	80002b0 <strlen>
 8002f30:	4603      	mov	r3, r0
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	4934      	ldr	r1, [pc, #208]	@ (800300c <main+0x4b8>)
 8002f3a:	4835      	ldr	r0, [pc, #212]	@ (8003010 <main+0x4bc>)
 8002f3c:	f003 fed8 	bl	8006cf0 <HAL_UART_Transmit>
      }
  }

  HAL_Delay(200); // Wait for sensor to stabilize and take first readings after mode set
 8002f40:	20c8      	movs	r0, #200	@ 0xc8
 8002f42:	f000 ff21 	bl	8003d88 <HAL_Delay>

  float initial_pressure_pa_sum = 0;
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  float initial_temperature_c_sum = 0;
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	647b      	str	r3, [r7, #68]	@ 0x44
  int valid_calibration_readings = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t cal_raw_p, cal_raw_t;
  float cal_p_pa, cal_t_c; // Pressure in Pa, Temp in Celsius

  sprintf(uart_buffer, "Calibrating BMP390 for altitude (takes a few readings)...\r\n");
 8002f56:	4938      	ldr	r1, [pc, #224]	@ (8003038 <main+0x4e4>)
 8002f58:	482c      	ldr	r0, [pc, #176]	@ (800300c <main+0x4b8>)
 8002f5a:	f005 fb8f 	bl	800867c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002f5e:	482b      	ldr	r0, [pc, #172]	@ (800300c <main+0x4b8>)
 8002f60:	f7fd f9a6 	bl	80002b0 <strlen>
 8002f64:	4603      	mov	r3, r0
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6c:	4927      	ldr	r1, [pc, #156]	@ (800300c <main+0x4b8>)
 8002f6e:	4828      	ldr	r0, [pc, #160]	@ (8003010 <main+0x4bc>)
 8002f70:	f003 febe 	bl	8006cf0 <HAL_UART_Transmit>

  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 8002f74:	2300      	movs	r3, #0
 8002f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f78:	e07a      	b.n	8003070 <main+0x51c>
      if (bmp390_read_temperature_pressure(&bmp390_handle, &cal_raw_t, &cal_t_c, &cal_raw_p, &cal_p_pa) == 0) {
 8002f7a:	f107 0020 	add.w	r0, r7, #32
 8002f7e:	f107 0214 	add.w	r2, r7, #20
 8002f82:	f107 011c 	add.w	r1, r7, #28
 8002f86:	f107 0318 	add.w	r3, r7, #24
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4822      	ldr	r0, [pc, #136]	@ (8003018 <main+0x4c4>)
 8002f90:	f7ff fa7c 	bl	800248c <bmp390_read_temperature_pressure>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d152      	bne.n	8003040 <main+0x4ec>
          initial_pressure_pa_sum += cal_p_pa;
 8002f9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f9e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
          initial_temperature_c_sum += cal_t_c;
 8002faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fae:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
          valid_calibration_readings++;
 8002fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	643b      	str	r3, [r7, #64]	@ 0x40
          sprintf(uart_buffer, "Calib reading %d: P=%.2f Pa, T=%.2f C\r\n", i + 1, cal_p_pa, cal_t_c);
 8002fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc2:	1c5e      	adds	r6, r3, #1
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fade 	bl	8000588 <__aeabi_f2d>
 8002fcc:	4604      	mov	r4, r0
 8002fce:	460d      	mov	r5, r1
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fad8 	bl	8000588 <__aeabi_f2d>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002fe0:	e9cd 4500 	strd	r4, r5, [sp]
 8002fe4:	4632      	mov	r2, r6
 8002fe6:	4915      	ldr	r1, [pc, #84]	@ (800303c <main+0x4e8>)
 8002fe8:	4808      	ldr	r0, [pc, #32]	@ (800300c <main+0x4b8>)
 8002fea:	f005 fb47 	bl	800867c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002fee:	4807      	ldr	r0, [pc, #28]	@ (800300c <main+0x4b8>)
 8002ff0:	f7fd f95e 	bl	80002b0 <strlen>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	4903      	ldr	r1, [pc, #12]	@ (800300c <main+0x4b8>)
 8002ffe:	4804      	ldr	r0, [pc, #16]	@ (8003010 <main+0x4bc>)
 8003000:	f003 fe76 	bl	8006cf0 <HAL_UART_Transmit>
 8003004:	e02e      	b.n	8003064 <main+0x510>
 8003006:	bf00      	nop
 8003008:	0800ba98 	.word	0x0800ba98
 800300c:	20000c28 	.word	0x20000c28
 8003010:	20000470 	.word	0x20000470
 8003014:	0800bac8 	.word	0x0800bac8
 8003018:	200009d8 	.word	0x200009d8
 800301c:	0800bae0 	.word	0x0800bae0
 8003020:	0800bb10 	.word	0x0800bb10
 8003024:	0800bb44 	.word	0x0800bb44
 8003028:	0800bb60 	.word	0x0800bb60
 800302c:	0800bb90 	.word	0x0800bb90
 8003030:	0800bbc4 	.word	0x0800bbc4
 8003034:	0800bbec 	.word	0x0800bbec
 8003038:	0800bc30 	.word	0x0800bc30
 800303c:	0800bc6c 	.word	0x0800bc6c
      } else {
          sprintf(uart_buffer, "Calibration reading %d failed.\r\n", i + 1);
 8003040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003042:	3301      	adds	r3, #1
 8003044:	461a      	mov	r2, r3
 8003046:	4974      	ldr	r1, [pc, #464]	@ (8003218 <main+0x6c4>)
 8003048:	4874      	ldr	r0, [pc, #464]	@ (800321c <main+0x6c8>)
 800304a:	f005 fb17 	bl	800867c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800304e:	4873      	ldr	r0, [pc, #460]	@ (800321c <main+0x6c8>)
 8003050:	f7fd f92e 	bl	80002b0 <strlen>
 8003054:	4603      	mov	r3, r0
 8003056:	b29a      	uxth	r2, r3
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
 800305c:	496f      	ldr	r1, [pc, #444]	@ (800321c <main+0x6c8>)
 800305e:	4870      	ldr	r0, [pc, #448]	@ (8003220 <main+0x6cc>)
 8003060:	f003 fe46 	bl	8006cf0 <HAL_UART_Transmit>
      }
      HAL_Delay(100); // Delay between readings (adjust based on ODR if necessary)
 8003064:	2064      	movs	r0, #100	@ 0x64
 8003066:	f000 fe8f 	bl	8003d88 <HAL_Delay>
  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 800306a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306c:	3301      	adds	r3, #1
 800306e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003072:	2b04      	cmp	r3, #4
 8003074:	dd81      	ble.n	8002f7a <main+0x426>
  }

  if (valid_calibration_readings > 0) {
 8003076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	dd4b      	ble.n	8003114 <main+0x5c0>
      float avg_initial_pressure_pa = initial_pressure_pa_sum / valid_calibration_readings;
 800307c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003086:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800308a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800308e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      float avg_initial_temperature_c = initial_temperature_c_sum / valid_calibration_readings;
 8003092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800309c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80030a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      float known_initial_altitude_m = 0.0f; // Assume starting at 0m altitude for calibration
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	633b      	str	r3, [r7, #48]	@ 0x30

      calibrate_sea_level_pressure_hpa(avg_initial_pressure_pa / 100.0f, known_initial_altitude_m); // Convert Pa to hPa
 80030ae:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80030b2:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8003224 <main+0x6d0>
 80030b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030ba:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 80030be:	eeb0 0a47 	vmov.f32	s0, s14
 80030c2:	f7ff fce9 	bl	8002a98 <calibrate_sea_level_pressure_hpa>

      sprintf(uart_buffer, "BMP390 Calibrated. Avg P: %.2f Pa, Avg T: %.2f C. Sea Level P: %.2f hPa\r\n",
 80030c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80030c8:	f7fd fa5e 	bl	8000588 <__aeabi_f2d>
 80030cc:	4680      	mov	r8, r0
 80030ce:	4689      	mov	r9, r1
 80030d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80030d2:	f7fd fa59 	bl	8000588 <__aeabi_f2d>
 80030d6:	4604      	mov	r4, r0
 80030d8:	460d      	mov	r5, r1
 80030da:	4b53      	ldr	r3, [pc, #332]	@ (8003228 <main+0x6d4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fa52 	bl	8000588 <__aeabi_f2d>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030ec:	e9cd 4500 	strd	r4, r5, [sp]
 80030f0:	4642      	mov	r2, r8
 80030f2:	464b      	mov	r3, r9
 80030f4:	494d      	ldr	r1, [pc, #308]	@ (800322c <main+0x6d8>)
 80030f6:	4849      	ldr	r0, [pc, #292]	@ (800321c <main+0x6c8>)
 80030f8:	f005 fac0 	bl	800867c <siprintf>
              avg_initial_pressure_pa, avg_initial_temperature_c, sea_level_pressure_hpa);
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80030fc:	4847      	ldr	r0, [pc, #284]	@ (800321c <main+0x6c8>)
 80030fe:	f7fd f8d7 	bl	80002b0 <strlen>
 8003102:	4603      	mov	r3, r0
 8003104:	b29a      	uxth	r2, r3
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	4944      	ldr	r1, [pc, #272]	@ (800321c <main+0x6c8>)
 800310c:	4844      	ldr	r0, [pc, #272]	@ (8003220 <main+0x6cc>)
 800310e:	f003 fdef 	bl	8006cf0 <HAL_UART_Transmit>
 8003112:	e011      	b.n	8003138 <main+0x5e4>
  } else {
      sprintf(uart_buffer, "BMP390 Calibration failed. Using default sea level pressure (1013.25 hPa).\r\n");
 8003114:	4946      	ldr	r1, [pc, #280]	@ (8003230 <main+0x6dc>)
 8003116:	4841      	ldr	r0, [pc, #260]	@ (800321c <main+0x6c8>)
 8003118:	f005 fab0 	bl	800867c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800311c:	483f      	ldr	r0, [pc, #252]	@ (800321c <main+0x6c8>)
 800311e:	f7fd f8c7 	bl	80002b0 <strlen>
 8003122:	4603      	mov	r3, r0
 8003124:	b29a      	uxth	r2, r3
 8003126:	f04f 33ff 	mov.w	r3, #4294967295
 800312a:	493c      	ldr	r1, [pc, #240]	@ (800321c <main+0x6c8>)
 800312c:	483c      	ldr	r0, [pc, #240]	@ (8003220 <main+0x6cc>)
 800312e:	f003 fddf 	bl	8006cf0 <HAL_UART_Transmit>
      sea_level_pressure_hpa = 1013.25f; // Default
 8003132:	4b3d      	ldr	r3, [pc, #244]	@ (8003228 <main+0x6d4>)
 8003134:	4a3f      	ldr	r2, [pc, #252]	@ (8003234 <main+0x6e0>)
 8003136:	601a      	str	r2, [r3, #0]
  }
  
  // Turn on LED to indicate ready state
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET); // LD2 is usually green or yellow.
 8003138:	2201      	movs	r2, #1
 800313a:	2180      	movs	r1, #128	@ 0x80
 800313c:	483e      	ldr	r0, [pc, #248]	@ (8003238 <main+0x6e4>)
 800313e:	f001 fc27 	bl	8004990 <HAL_GPIO_WritePin>
  {
    uint32_t raw_pressure, raw_temperature;
    float pressure_pa, temperature_c;
    float altitude_m;

    if (bmp390_read_temperature_pressure(&bmp390_handle, &raw_temperature, &temperature_c, &raw_pressure, &pressure_pa) == 0) {
 8003142:	f107 0010 	add.w	r0, r7, #16
 8003146:	1d3a      	adds	r2, r7, #4
 8003148:	f107 010c 	add.w	r1, r7, #12
 800314c:	f107 0308 	add.w	r3, r7, #8
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	4603      	mov	r3, r0
 8003154:	4839      	ldr	r0, [pc, #228]	@ (800323c <main+0x6e8>)
 8003156:	f7ff f999 	bl	800248c <bmp390_read_temperature_pressure>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d138      	bne.n	80031d2 <main+0x67e>
        float current_pressure_hpa = pressure_pa / 100.0f;
 8003160:	ed97 7a02 	vldr	s14, [r7, #8]
 8003164:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8003224 <main+0x6d0>
 8003168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800316c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        altitude_m = calculate_altitude_hpa(current_pressure_hpa);
 8003170:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003174:	f7ff fcba 	bl	8002aec <calculate_altitude_hpa>
 8003178:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

        sprintf(uart_buffer, "T: %.2f C, P: %.2f Pa, Alt: %.2f m\r\n",
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd fa02 	bl	8000588 <__aeabi_f2d>
 8003184:	4680      	mov	r8, r0
 8003186:	4689      	mov	r9, r1
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd f9fc 	bl	8000588 <__aeabi_f2d>
 8003190:	4604      	mov	r4, r0
 8003192:	460d      	mov	r5, r1
 8003194:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003196:	f7fd f9f7 	bl	8000588 <__aeabi_f2d>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80031a2:	e9cd 4500 	strd	r4, r5, [sp]
 80031a6:	4642      	mov	r2, r8
 80031a8:	464b      	mov	r3, r9
 80031aa:	4925      	ldr	r1, [pc, #148]	@ (8003240 <main+0x6ec>)
 80031ac:	481b      	ldr	r0, [pc, #108]	@ (800321c <main+0x6c8>)
 80031ae:	f005 fa65 	bl	800867c <siprintf>
                temperature_c, pressure_pa, altitude_m);
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80031b2:	481a      	ldr	r0, [pc, #104]	@ (800321c <main+0x6c8>)
 80031b4:	f7fd f87c 	bl	80002b0 <strlen>
 80031b8:	4603      	mov	r3, r0
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295
 80031c0:	4916      	ldr	r1, [pc, #88]	@ (800321c <main+0x6c8>)
 80031c2:	4817      	ldr	r0, [pc, #92]	@ (8003220 <main+0x6cc>)
 80031c4:	f003 fd94 	bl	8006cf0 <HAL_UART_Transmit>
        
        HAL_GPIO_TogglePin(GPIOB, LD1_Pin); // Toggle LD1 (usually green) to show activity
 80031c8:	2101      	movs	r1, #1
 80031ca:	481b      	ldr	r0, [pc, #108]	@ (8003238 <main+0x6e4>)
 80031cc:	f001 fbf9 	bl	80049c2 <HAL_GPIO_TogglePin>
 80031d0:	e01d      	b.n	800320e <main+0x6ba>
    } else {
        sprintf(uart_buffer, "Error reading BMP390 (new driver)\r\n");
 80031d2:	491c      	ldr	r1, [pc, #112]	@ (8003244 <main+0x6f0>)
 80031d4:	4811      	ldr	r0, [pc, #68]	@ (800321c <main+0x6c8>)
 80031d6:	f005 fa51 	bl	800867c <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80031da:	4810      	ldr	r0, [pc, #64]	@ (800321c <main+0x6c8>)
 80031dc:	f7fd f868 	bl	80002b0 <strlen>
 80031e0:	4603      	mov	r3, r0
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	f04f 33ff 	mov.w	r3, #4294967295
 80031e8:	490c      	ldr	r1, [pc, #48]	@ (800321c <main+0x6c8>)
 80031ea:	480d      	ldr	r0, [pc, #52]	@ (8003220 <main+0x6cc>)
 80031ec:	f003 fd80 	bl	8006cf0 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET); // Turn on LD3 (usually red) for error
 80031f0:	2201      	movs	r2, #1
 80031f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031f6:	4810      	ldr	r0, [pc, #64]	@ (8003238 <main+0x6e4>)
 80031f8:	f001 fbca 	bl	8004990 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80031fc:	2064      	movs	r0, #100	@ 0x64
 80031fe:	f000 fdc3 	bl	8003d88 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8003202:	2200      	movs	r2, #0
 8003204:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003208:	480b      	ldr	r0, [pc, #44]	@ (8003238 <main+0x6e4>)
 800320a:	f001 fbc1 	bl	8004990 <HAL_GPIO_WritePin>
    }
    
    /* LSM6DSO code commented out as sensor is removed */
    
    HAL_Delay(40); // Corresponds to 25Hz ODR. (1000ms / 25Hz = 40ms)
 800320e:	2028      	movs	r0, #40	@ 0x28
 8003210:	f000 fdba 	bl	8003d88 <HAL_Delay>
  {
 8003214:	e795      	b.n	8003142 <main+0x5ee>
 8003216:	bf00      	nop
 8003218:	0800bc94 	.word	0x0800bc94
 800321c:	20000c28 	.word	0x20000c28
 8003220:	20000470 	.word	0x20000470
 8003224:	42c80000 	.word	0x42c80000
 8003228:	20000d28 	.word	0x20000d28
 800322c:	0800bcb8 	.word	0x0800bcb8
 8003230:	0800bd04 	.word	0x0800bd04
 8003234:	447d5000 	.word	0x447d5000
 8003238:	40020400 	.word	0x40020400
 800323c:	200009d8 	.word	0x200009d8
 8003240:	0800bd54 	.word	0x0800bd54
 8003244:	0800bd7c 	.word	0x0800bd7c

08003248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b094      	sub	sp, #80	@ 0x50
 800324c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800324e:	f107 0320 	add.w	r3, r7, #32
 8003252:	2230      	movs	r2, #48	@ 0x30
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f005 fab2 	bl	80087c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800325c:	f107 030c 	add.w	r3, r7, #12
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800326c:	f002 fc28 	bl	8005ac0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b27      	ldr	r3, [pc, #156]	@ (8003310 <SystemClock_Config+0xc8>)
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	4a26      	ldr	r2, [pc, #152]	@ (8003310 <SystemClock_Config+0xc8>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327a:	6413      	str	r3, [r2, #64]	@ 0x40
 800327c:	4b24      	ldr	r3, [pc, #144]	@ (8003310 <SystemClock_Config+0xc8>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003288:	4b22      	ldr	r3, [pc, #136]	@ (8003314 <SystemClock_Config+0xcc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003290:	4a20      	ldr	r2, [pc, #128]	@ (8003314 <SystemClock_Config+0xcc>)
 8003292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b1e      	ldr	r3, [pc, #120]	@ (8003314 <SystemClock_Config+0xcc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80032a8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032ae:	2302      	movs	r3, #2
 80032b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80032b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80032b8:	2304      	movs	r3, #4
 80032ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80032bc:	2348      	movs	r3, #72	@ 0x48
 80032be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032c0:	2302      	movs	r3, #2
 80032c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80032c4:	2303      	movs	r3, #3
 80032c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032c8:	f107 0320 	add.w	r3, r7, #32
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 fc07 	bl	8005ae0 <HAL_RCC_OscConfig>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80032d8:	f000 f9ac 	bl	8003634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032dc:	230f      	movs	r3, #15
 80032de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032e0:	2302      	movs	r3, #2
 80032e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032f2:	f107 030c 	add.w	r3, r7, #12
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fe95 	bl	8006028 <HAL_RCC_ClockConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003304:	f000 f996 	bl	8003634 <Error_Handler>
  }
}
 8003308:	bf00      	nop
 800330a:	3750      	adds	r7, #80	@ 0x50
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	40007000 	.word	0x40007000

08003318 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800331c:	4b1f      	ldr	r3, [pc, #124]	@ (800339c <MX_ETH_Init+0x84>)
 800331e:	4a20      	ldr	r2, [pc, #128]	@ (80033a0 <MX_ETH_Init+0x88>)
 8003320:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <MX_ETH_Init+0x8c>)
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003328:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <MX_ETH_Init+0x8c>)
 800332a:	2280      	movs	r2, #128	@ 0x80
 800332c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800332e:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <MX_ETH_Init+0x8c>)
 8003330:	22e1      	movs	r2, #225	@ 0xe1
 8003332:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003334:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <MX_ETH_Init+0x8c>)
 8003336:	2200      	movs	r2, #0
 8003338:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800333a:	4b1a      	ldr	r3, [pc, #104]	@ (80033a4 <MX_ETH_Init+0x8c>)
 800333c:	2200      	movs	r2, #0
 800333e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003340:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <MX_ETH_Init+0x8c>)
 8003342:	2200      	movs	r2, #0
 8003344:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <MX_ETH_Init+0x84>)
 8003348:	4a16      	ldr	r2, [pc, #88]	@ (80033a4 <MX_ETH_Init+0x8c>)
 800334a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800334c:	4b13      	ldr	r3, [pc, #76]	@ (800339c <MX_ETH_Init+0x84>)
 800334e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003352:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003354:	4b11      	ldr	r3, [pc, #68]	@ (800339c <MX_ETH_Init+0x84>)
 8003356:	4a14      	ldr	r2, [pc, #80]	@ (80033a8 <MX_ETH_Init+0x90>)
 8003358:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800335a:	4b10      	ldr	r3, [pc, #64]	@ (800339c <MX_ETH_Init+0x84>)
 800335c:	4a13      	ldr	r2, [pc, #76]	@ (80033ac <MX_ETH_Init+0x94>)
 800335e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003360:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <MX_ETH_Init+0x84>)
 8003362:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003366:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003368:	480c      	ldr	r0, [pc, #48]	@ (800339c <MX_ETH_Init+0x84>)
 800336a:	f000 fe17 	bl	8003f9c <HAL_ETH_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8003374:	f000 f95e 	bl	8003634 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003378:	2238      	movs	r2, #56	@ 0x38
 800337a:	2100      	movs	r1, #0
 800337c:	480c      	ldr	r0, [pc, #48]	@ (80033b0 <MX_ETH_Init+0x98>)
 800337e:	f005 fa1f 	bl	80087c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003382:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <MX_ETH_Init+0x98>)
 8003384:	2221      	movs	r2, #33	@ 0x21
 8003386:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003388:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <MX_ETH_Init+0x98>)
 800338a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800338e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003390:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <MX_ETH_Init+0x98>)
 8003392:	2200      	movs	r2, #0
 8003394:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	2000036c 	.word	0x2000036c
 80033a0:	40028000 	.word	0x40028000
 80033a4:	20000d2c 	.word	0x20000d2c
 80033a8:	20000274 	.word	0x20000274
 80033ac:	200001d4 	.word	0x200001d4
 80033b0:	20000334 	.word	0x20000334

080033b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033ba:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <MX_I2C1_Init+0x78>)
 80033bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80033be:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003430 <MX_I2C1_Init+0x7c>)
 80033c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033c4:	4b18      	ldr	r3, [pc, #96]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ca:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033d0:	4b15      	ldr	r3, [pc, #84]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033d8:	2200      	movs	r2, #0
 80033da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033dc:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033de:	2200      	movs	r2, #0
 80033e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033ee:	480e      	ldr	r0, [pc, #56]	@ (8003428 <MX_I2C1_Init+0x74>)
 80033f0:	f001 fb02 	bl	80049f8 <HAL_I2C_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033fa:	f000 f91b 	bl	8003634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033fe:	2100      	movs	r1, #0
 8003400:	4809      	ldr	r0, [pc, #36]	@ (8003428 <MX_I2C1_Init+0x74>)
 8003402:	f002 f98b 	bl	800571c <HAL_I2CEx_ConfigAnalogFilter>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800340c:	f000 f912 	bl	8003634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003410:	2100      	movs	r1, #0
 8003412:	4805      	ldr	r0, [pc, #20]	@ (8003428 <MX_I2C1_Init+0x74>)
 8003414:	f002 f9cd 	bl	80057b2 <HAL_I2CEx_ConfigDigitalFilter>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800341e:	f000 f909 	bl	8003634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	2000041c 	.word	0x2000041c
 800342c:	40005400 	.word	0x40005400
 8003430:	00808cd2 	.word	0x00808cd2

08003434 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003438:	4b14      	ldr	r3, [pc, #80]	@ (800348c <MX_USART3_UART_Init+0x58>)
 800343a:	4a15      	ldr	r2, [pc, #84]	@ (8003490 <MX_USART3_UART_Init+0x5c>)
 800343c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800343e:	4b13      	ldr	r3, [pc, #76]	@ (800348c <MX_USART3_UART_Init+0x58>)
 8003440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003446:	4b11      	ldr	r3, [pc, #68]	@ (800348c <MX_USART3_UART_Init+0x58>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800344c:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <MX_USART3_UART_Init+0x58>)
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003452:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <MX_USART3_UART_Init+0x58>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003458:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <MX_USART3_UART_Init+0x58>)
 800345a:	220c      	movs	r2, #12
 800345c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800345e:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <MX_USART3_UART_Init+0x58>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003464:	4b09      	ldr	r3, [pc, #36]	@ (800348c <MX_USART3_UART_Init+0x58>)
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800346a:	4b08      	ldr	r3, [pc, #32]	@ (800348c <MX_USART3_UART_Init+0x58>)
 800346c:	2200      	movs	r2, #0
 800346e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <MX_USART3_UART_Init+0x58>)
 8003472:	2200      	movs	r2, #0
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003476:	4805      	ldr	r0, [pc, #20]	@ (800348c <MX_USART3_UART_Init+0x58>)
 8003478:	f003 fbec 	bl	8006c54 <HAL_UART_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003482:	f000 f8d7 	bl	8003634 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000470 	.word	0x20000470
 8003490:	40004800 	.word	0x40004800

08003494 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003498:	4b14      	ldr	r3, [pc, #80]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800349a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800349e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80034a0:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034a2:	2206      	movs	r2, #6
 80034a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80034a6:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034a8:	2202      	movs	r2, #2
 80034aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80034ac:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034b4:	2202      	movs	r2, #2
 80034b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80034be:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80034ca:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80034d0:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80034d6:	4805      	ldr	r0, [pc, #20]	@ (80034ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034d8:	f002 f9b7 	bl	800584a <HAL_PCD_Init>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80034e2:	f000 f8a7 	bl	8003634 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200004f8 	.word	0x200004f8

080034f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08c      	sub	sp, #48	@ 0x30
 80034f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003506:	4b47      	ldr	r3, [pc, #284]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	4a46      	ldr	r2, [pc, #280]	@ (8003624 <MX_GPIO_Init+0x134>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	6313      	str	r3, [r2, #48]	@ 0x30
 8003512:	4b44      	ldr	r3, [pc, #272]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800351e:	4b41      	ldr	r3, [pc, #260]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	4a40      	ldr	r2, [pc, #256]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003528:	6313      	str	r3, [r2, #48]	@ 0x30
 800352a:	4b3e      	ldr	r3, [pc, #248]	@ (8003624 <MX_GPIO_Init+0x134>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003536:	4b3b      	ldr	r3, [pc, #236]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	4a3a      	ldr	r2, [pc, #232]	@ (8003624 <MX_GPIO_Init+0x134>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6313      	str	r3, [r2, #48]	@ 0x30
 8003542:	4b38      	ldr	r3, [pc, #224]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800354e:	4b35      	ldr	r3, [pc, #212]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	4a34      	ldr	r2, [pc, #208]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	6313      	str	r3, [r2, #48]	@ 0x30
 800355a:	4b32      	ldr	r3, [pc, #200]	@ (8003624 <MX_GPIO_Init+0x134>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003566:	4b2f      	ldr	r3, [pc, #188]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	4a2e      	ldr	r2, [pc, #184]	@ (8003624 <MX_GPIO_Init+0x134>)
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	6313      	str	r3, [r2, #48]	@ 0x30
 8003572:	4b2c      	ldr	r3, [pc, #176]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800357e:	4b29      	ldr	r3, [pc, #164]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	4a28      	ldr	r2, [pc, #160]	@ (8003624 <MX_GPIO_Init+0x134>)
 8003584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003588:	6313      	str	r3, [r2, #48]	@ 0x30
 800358a:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <MX_GPIO_Init+0x134>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003596:	2200      	movs	r2, #0
 8003598:	f244 0181 	movw	r1, #16513	@ 0x4081
 800359c:	4822      	ldr	r0, [pc, #136]	@ (8003628 <MX_GPIO_Init+0x138>)
 800359e:	f001 f9f7 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2140      	movs	r1, #64	@ 0x40
 80035a6:	4821      	ldr	r0, [pc, #132]	@ (800362c <MX_GPIO_Init+0x13c>)
 80035a8:	f001 f9f2 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80035ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80035bc:	f107 031c 	add.w	r3, r7, #28
 80035c0:	4619      	mov	r1, r3
 80035c2:	481b      	ldr	r0, [pc, #108]	@ (8003630 <MX_GPIO_Init+0x140>)
 80035c4:	f001 f838 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80035c8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80035cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ce:	2301      	movs	r3, #1
 80035d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035da:	f107 031c 	add.w	r3, r7, #28
 80035de:	4619      	mov	r1, r3
 80035e0:	4811      	ldr	r0, [pc, #68]	@ (8003628 <MX_GPIO_Init+0x138>)
 80035e2:	f001 f829 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80035e6:	2340      	movs	r3, #64	@ 0x40
 80035e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ea:	2301      	movs	r3, #1
 80035ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035f6:	f107 031c 	add.w	r3, r7, #28
 80035fa:	4619      	mov	r1, r3
 80035fc:	480b      	ldr	r0, [pc, #44]	@ (800362c <MX_GPIO_Init+0x13c>)
 80035fe:	f001 f81b 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003602:	2380      	movs	r3, #128	@ 0x80
 8003604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800360e:	f107 031c 	add.w	r3, r7, #28
 8003612:	4619      	mov	r1, r3
 8003614:	4805      	ldr	r0, [pc, #20]	@ (800362c <MX_GPIO_Init+0x13c>)
 8003616:	f001 f80f 	bl	8004638 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800361a:	bf00      	nop
 800361c:	3730      	adds	r7, #48	@ 0x30
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	40020400 	.word	0x40020400
 800362c:	40021800 	.word	0x40021800
 8003630:	40020800 	.word	0x40020800

08003634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003638:	b672      	cpsid	i
}
 800363a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <Error_Handler+0x8>

08003640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <HAL_MspInit+0x44>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	4a0e      	ldr	r2, [pc, #56]	@ (8003684 <HAL_MspInit+0x44>)
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003650:	6413      	str	r3, [r2, #64]	@ 0x40
 8003652:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <HAL_MspInit+0x44>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365e:	4b09      	ldr	r3, [pc, #36]	@ (8003684 <HAL_MspInit+0x44>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003662:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <HAL_MspInit+0x44>)
 8003664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003668:	6453      	str	r3, [r2, #68]	@ 0x44
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_MspInit+0x44>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08e      	sub	sp, #56	@ 0x38
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a4e      	ldr	r2, [pc, #312]	@ (80037e0 <HAL_ETH_MspInit+0x158>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f040 8096 	bne.w	80037d8 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80036ac:	4b4d      	ldr	r3, [pc, #308]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	4a4c      	ldr	r2, [pc, #304]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b8:	4b4a      	ldr	r3, [pc, #296]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	4b47      	ldr	r3, [pc, #284]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	4a46      	ldr	r2, [pc, #280]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80036d0:	4b44      	ldr	r3, [pc, #272]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4b41      	ldr	r3, [pc, #260]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	4a40      	ldr	r2, [pc, #256]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e8:	4b3e      	ldr	r3, [pc, #248]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f4:	4b3b      	ldr	r3, [pc, #236]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	4a3a      	ldr	r2, [pc, #232]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003700:	4b38      	ldr	r3, [pc, #224]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370c:	4b35      	ldr	r3, [pc, #212]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	4a34      	ldr	r2, [pc, #208]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6313      	str	r3, [r2, #48]	@ 0x30
 8003718:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003724:	4b2f      	ldr	r3, [pc, #188]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003728:	4a2e      	ldr	r2, [pc, #184]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003730:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800373c:	4b29      	ldr	r3, [pc, #164]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003740:	4a28      	ldr	r2, [pc, #160]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 8003742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003746:	6313      	str	r3, [r2, #48]	@ 0x30
 8003748:	4b26      	ldr	r3, [pc, #152]	@ (80037e4 <HAL_ETH_MspInit+0x15c>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003754:	2332      	movs	r3, #50	@ 0x32
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003760:	2303      	movs	r3, #3
 8003762:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003764:	230b      	movs	r3, #11
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800376c:	4619      	mov	r1, r3
 800376e:	481e      	ldr	r0, [pc, #120]	@ (80037e8 <HAL_ETH_MspInit+0x160>)
 8003770:	f000 ff62 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003774:	2386      	movs	r3, #134	@ 0x86
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003778:	2302      	movs	r3, #2
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003780:	2303      	movs	r3, #3
 8003782:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003784:	230b      	movs	r3, #11
 8003786:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800378c:	4619      	mov	r1, r3
 800378e:	4817      	ldr	r0, [pc, #92]	@ (80037ec <HAL_ETH_MspInit+0x164>)
 8003790:	f000 ff52 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379a:	2302      	movs	r3, #2
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a2:	2303      	movs	r3, #3
 80037a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037a6:	230b      	movs	r3, #11
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80037aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ae:	4619      	mov	r1, r3
 80037b0:	480f      	ldr	r0, [pc, #60]	@ (80037f0 <HAL_ETH_MspInit+0x168>)
 80037b2:	f000 ff41 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80037b6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c4:	2303      	movs	r3, #3
 80037c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037c8:	230b      	movs	r3, #11
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037d0:	4619      	mov	r1, r3
 80037d2:	4808      	ldr	r0, [pc, #32]	@ (80037f4 <HAL_ETH_MspInit+0x16c>)
 80037d4:	f000 ff30 	bl	8004638 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80037d8:	bf00      	nop
 80037da:	3738      	adds	r7, #56	@ 0x38
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40028000 	.word	0x40028000
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020800 	.word	0x40020800
 80037ec:	40020000 	.word	0x40020000
 80037f0:	40020400 	.word	0x40020400
 80037f4:	40021800 	.word	0x40021800

080037f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b0aa      	sub	sp, #168	@ 0xa8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	2284      	movs	r2, #132	@ 0x84
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f004 ffd1 	bl	80087c0 <memset>
  if(hi2c->Instance==I2C1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a22      	ldr	r2, [pc, #136]	@ (80038ac <HAL_I2C_MspInit+0xb4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d13c      	bne.n	80038a2 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003828:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800382c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800382e:	2300      	movs	r3, #0
 8003830:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	4618      	mov	r0, r3
 8003838:	f002 fe1c 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003842:	f7ff fef7 	bl	8003634 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003846:	4b1a      	ldr	r3, [pc, #104]	@ (80038b0 <HAL_I2C_MspInit+0xb8>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	4a19      	ldr	r2, [pc, #100]	@ (80038b0 <HAL_I2C_MspInit+0xb8>)
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	6313      	str	r3, [r2, #48]	@ 0x30
 8003852:	4b17      	ldr	r3, [pc, #92]	@ (80038b0 <HAL_I2C_MspInit+0xb8>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800385e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003866:	2312      	movs	r3, #18
 8003868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003872:	2303      	movs	r3, #3
 8003874:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003878:	2304      	movs	r3, #4
 800387a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003882:	4619      	mov	r1, r3
 8003884:	480b      	ldr	r0, [pc, #44]	@ (80038b4 <HAL_I2C_MspInit+0xbc>)
 8003886:	f000 fed7 	bl	8004638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800388a:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <HAL_I2C_MspInit+0xb8>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	4a08      	ldr	r2, [pc, #32]	@ (80038b0 <HAL_I2C_MspInit+0xb8>)
 8003890:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003894:	6413      	str	r3, [r2, #64]	@ 0x40
 8003896:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <HAL_I2C_MspInit+0xb8>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80038a2:	bf00      	nop
 80038a4:	37a8      	adds	r7, #168	@ 0xa8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40005400 	.word	0x40005400
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40020400 	.word	0x40020400

080038b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0aa      	sub	sp, #168	@ 0xa8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	2284      	movs	r2, #132	@ 0x84
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f004 ff71 	bl	80087c0 <memset>
  if(huart->Instance==USART3)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a22      	ldr	r2, [pc, #136]	@ (800396c <HAL_UART_MspInit+0xb4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d13c      	bne.n	8003962 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80038e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80038ee:	2300      	movs	r3, #0
 80038f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038f2:	f107 0310 	add.w	r3, r7, #16
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 fdbc 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003902:	f7ff fe97 	bl	8003634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003906:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	4a19      	ldr	r2, [pc, #100]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003910:	6413      	str	r3, [r2, #64]	@ 0x40
 8003912:	4b17      	ldr	r3, [pc, #92]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800391e:	4b14      	ldr	r3, [pc, #80]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	6313      	str	r3, [r2, #48]	@ 0x30
 800392a:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003936:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800393a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	2302      	movs	r3, #2
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394a:	2303      	movs	r3, #3
 800394c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003950:	2307      	movs	r3, #7
 8003952:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003956:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800395a:	4619      	mov	r1, r3
 800395c:	4805      	ldr	r0, [pc, #20]	@ (8003974 <HAL_UART_MspInit+0xbc>)
 800395e:	f000 fe6b 	bl	8004638 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8003962:	bf00      	nop
 8003964:	37a8      	adds	r7, #168	@ 0xa8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40004800 	.word	0x40004800
 8003970:	40023800 	.word	0x40023800
 8003974:	40020c00 	.word	0x40020c00

08003978 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b0ac      	sub	sp, #176	@ 0xb0
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003990:	f107 0318 	add.w	r3, r7, #24
 8003994:	2284      	movs	r2, #132	@ 0x84
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f004 ff11 	bl	80087c0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039a6:	d159      	bne.n	8003a5c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80039a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80039ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039b4:	f107 0318 	add.w	r3, r7, #24
 80039b8:	4618      	mov	r0, r3
 80039ba:	f002 fd5b 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80039c4:	f7ff fe36 	bl	8003634 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c8:	4b26      	ldr	r3, [pc, #152]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	4a25      	ldr	r2, [pc, #148]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d4:	4b23      	ldr	r3, [pc, #140]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80039e0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80039e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039fa:	230a      	movs	r3, #10
 80039fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a04:	4619      	mov	r1, r3
 8003a06:	4818      	ldr	r0, [pc, #96]	@ (8003a68 <HAL_PCD_MspInit+0xf0>)
 8003a08:	f000 fe16 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a24:	4619      	mov	r1, r3
 8003a26:	4810      	ldr	r0, [pc, #64]	@ (8003a68 <HAL_PCD_MspInit+0xf0>)
 8003a28:	f000 fe06 	bl	8004638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a36:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a38:	4b0a      	ldr	r3, [pc, #40]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4b07      	ldr	r3, [pc, #28]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a48:	4a06      	ldr	r2, [pc, #24]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003a5c:	bf00      	nop
 8003a5e:	37b0      	adds	r7, #176	@ 0xb0
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40020000 	.word	0x40020000

08003a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a70:	bf00      	nop
 8003a72:	e7fd      	b.n	8003a70 <NMI_Handler+0x4>

08003a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a78:	bf00      	nop
 8003a7a:	e7fd      	b.n	8003a78 <HardFault_Handler+0x4>

08003a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <MemManage_Handler+0x4>

08003a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <BusFault_Handler+0x4>

08003a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a90:	bf00      	nop
 8003a92:	e7fd      	b.n	8003a90 <UsageFault_Handler+0x4>

08003a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ac2:	f000 f941 	bl	8003d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  return 1;
 8003ace:	2301      	movs	r3, #1
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <_kill>:

int _kill(int pid, int sig)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ae4:	f004 febe 	bl	8008864 <__errno>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2216      	movs	r2, #22
 8003aec:	601a      	str	r2, [r3, #0]
  return -1;
 8003aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_exit>:

void _exit (int status)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b02:	f04f 31ff 	mov.w	r1, #4294967295
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ffe7 	bl	8003ada <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <_exit+0x12>

08003b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e00a      	b.n	8003b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b22:	f3af 8000 	nop.w
 8003b26:	4601      	mov	r1, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	60ba      	str	r2, [r7, #8]
 8003b2e:	b2ca      	uxtb	r2, r1
 8003b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3301      	adds	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dbf0      	blt.n	8003b22 <_read+0x12>
  }

  return len;
 8003b40:	687b      	ldr	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e009      	b.n	8003b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	60ba      	str	r2, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	dbf1      	blt.n	8003b5c <_write+0x12>
  }
  return len;
 8003b78:	687b      	ldr	r3, [r7, #4]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <_close>:

int _close(int file)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003baa:	605a      	str	r2, [r3, #4]
  return 0;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <_isatty>:

int _isatty(int file)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf4:	4a14      	ldr	r2, [pc, #80]	@ (8003c48 <_sbrk+0x5c>)
 8003bf6:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <_sbrk+0x60>)
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c00:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <_sbrk+0x64>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c08:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <_sbrk+0x64>)
 8003c0a:	4a12      	ldr	r2, [pc, #72]	@ (8003c54 <_sbrk+0x68>)
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <_sbrk+0x64>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d207      	bcs.n	8003c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c1c:	f004 fe22 	bl	8008864 <__errno>
 8003c20:	4603      	mov	r3, r0
 8003c22:	220c      	movs	r2, #12
 8003c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2a:	e009      	b.n	8003c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c2c:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <_sbrk+0x64>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c32:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <_sbrk+0x64>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	4a05      	ldr	r2, [pc, #20]	@ (8003c50 <_sbrk+0x64>)
 8003c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20050000 	.word	0x20050000
 8003c4c:	00000400 	.word	0x00000400
 8003c50:	20000d34 	.word	0x20000d34
 8003c54:	20000e88 	.word	0x20000e88

08003c58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c5c:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <SystemInit+0x20>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	4a05      	ldr	r2, [pc, #20]	@ (8003c78 <SystemInit+0x20>)
 8003c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003cb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c80:	f7ff ffea 	bl	8003c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c84:	480c      	ldr	r0, [pc, #48]	@ (8003cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c86:	490d      	ldr	r1, [pc, #52]	@ (8003cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c88:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c8c:	e002      	b.n	8003c94 <LoopCopyDataInit>

08003c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c92:	3304      	adds	r3, #4

08003c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c98:	d3f9      	bcc.n	8003c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8003cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ca0:	e001      	b.n	8003ca6 <LoopFillZerobss>

08003ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ca4:	3204      	adds	r2, #4

08003ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ca8:	d3fb      	bcc.n	8003ca2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003caa:	f004 fde1 	bl	8008870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cae:	f7fe ff51 	bl	8002b54 <main>
  bx  lr    
 8003cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003cb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cbc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003cc0:	0800c154 	.word	0x0800c154
  ldr r2, =_sbss
 8003cc4:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8003cc8:	20000e88 	.word	0x20000e88

08003ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ccc:	e7fe      	b.n	8003ccc <ADC_IRQHandler>

08003cce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cd2:	2003      	movs	r0, #3
 8003cd4:	f000 f92e 	bl	8003f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f000 f805 	bl	8003ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cde:	f7ff fcaf 	bl	8003640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cf0:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <HAL_InitTick+0x54>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b12      	ldr	r3, [pc, #72]	@ (8003d40 <HAL_InitTick+0x58>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f93b 	bl	8003f82 <HAL_SYSTICK_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00e      	b.n	8003d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b0f      	cmp	r3, #15
 8003d1a:	d80a      	bhi.n	8003d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	f000 f911 	bl	8003f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d28:	4a06      	ldr	r2, [pc, #24]	@ (8003d44 <HAL_InitTick+0x5c>)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e000      	b.n	8003d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	20000008 	.word	0x20000008
 8003d44:	20000004 	.word	0x20000004

08003d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d4c:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <HAL_IncTick+0x20>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b06      	ldr	r3, [pc, #24]	@ (8003d6c <HAL_IncTick+0x24>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	4a04      	ldr	r2, [pc, #16]	@ (8003d6c <HAL_IncTick+0x24>)
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000008 	.word	0x20000008
 8003d6c:	20000d38 	.word	0x20000d38

08003d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return uwTick;
 8003d74:	4b03      	ldr	r3, [pc, #12]	@ (8003d84 <HAL_GetTick+0x14>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000d38 	.word	0x20000d38

08003d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d90:	f7ff ffee 	bl	8003d70 <HAL_GetTick>
 8003d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d005      	beq.n	8003dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003da2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <HAL_Delay+0x44>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dae:	bf00      	nop
 8003db0:	f7ff ffde 	bl	8003d70 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d8f7      	bhi.n	8003db0 <HAL_Delay+0x28>
  {
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000008 	.word	0x20000008

08003dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <__NVIC_SetPriorityGrouping+0x40>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dec:	4013      	ands	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003df8:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <__NVIC_SetPriorityGrouping+0x44>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dfe:	4a04      	ldr	r2, [pc, #16]	@ (8003e10 <__NVIC_SetPriorityGrouping+0x40>)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	60d3      	str	r3, [r2, #12]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000ed00 	.word	0xe000ed00
 8003e14:	05fa0000 	.word	0x05fa0000

08003e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e1c:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <__NVIC_GetPriorityGrouping+0x18>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	f003 0307 	and.w	r3, r3, #7
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	db0a      	blt.n	8003e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	490c      	ldr	r1, [pc, #48]	@ (8003e80 <__NVIC_SetPriority+0x4c>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	0112      	lsls	r2, r2, #4
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	440b      	add	r3, r1
 8003e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e5c:	e00a      	b.n	8003e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4908      	ldr	r1, [pc, #32]	@ (8003e84 <__NVIC_SetPriority+0x50>)
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	0112      	lsls	r2, r2, #4
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	440b      	add	r3, r1
 8003e72:	761a      	strb	r2, [r3, #24]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000e100 	.word	0xe000e100
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	@ 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	bf28      	it	cs
 8003ea6:	2304      	movcs	r3, #4
 8003ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d902      	bls.n	8003eb8 <NVIC_EncodePriority+0x30>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3b03      	subs	r3, #3
 8003eb6:	e000      	b.n	8003eba <NVIC_EncodePriority+0x32>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	401a      	ands	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eda:	43d9      	mvns	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	4313      	orrs	r3, r2
         );
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3724      	adds	r7, #36	@ 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f00:	d301      	bcc.n	8003f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f02:	2301      	movs	r3, #1
 8003f04:	e00f      	b.n	8003f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f06:	4a0a      	ldr	r2, [pc, #40]	@ (8003f30 <SysTick_Config+0x40>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f0e:	210f      	movs	r1, #15
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	f7ff ff8e 	bl	8003e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f18:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <SysTick_Config+0x40>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f1e:	4b04      	ldr	r3, [pc, #16]	@ (8003f30 <SysTick_Config+0x40>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000e010 	.word	0xe000e010

08003f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff47 	bl	8003dd0 <__NVIC_SetPriorityGrouping>
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	4603      	mov	r3, r0
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f5c:	f7ff ff5c 	bl	8003e18 <__NVIC_GetPriorityGrouping>
 8003f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff8e 	bl	8003e88 <NVIC_EncodePriority>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff5d 	bl	8003e34 <__NVIC_SetPriority>
}
 8003f7a:	bf00      	nop
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ffb0 	bl	8003ef0 <SysTick_Config>
 8003f90:	4603      	mov	r3, r0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e086      	b.n	80040bc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fb61 	bl	8003688 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80040c4 <HAL_ETH_Init+0x128>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	4a3e      	ldr	r2, [pc, #248]	@ (80040c4 <HAL_ETH_Init+0x128>)
 8003fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80040c4 <HAL_ETH_Init+0x128>)
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003fde:	4b3a      	ldr	r3, [pc, #232]	@ (80040c8 <HAL_ETH_Init+0x12c>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4a39      	ldr	r2, [pc, #228]	@ (80040c8 <HAL_ETH_Init+0x12c>)
 8003fe4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003fe8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003fea:	4b37      	ldr	r3, [pc, #220]	@ (80040c8 <HAL_ETH_Init+0x12c>)
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4935      	ldr	r1, [pc, #212]	@ (80040c8 <HAL_ETH_Init+0x12c>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003ff8:	4b33      	ldr	r3, [pc, #204]	@ (80040c8 <HAL_ETH_Init+0x12c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004012:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004014:	f7ff feac 	bl	8003d70 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800401a:	e011      	b.n	8004040 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800401c:	f7ff fea8 	bl	8003d70 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800402a:	d909      	bls.n	8004040 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2204      	movs	r2, #4
 8004030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	22e0      	movs	r2, #224	@ 0xe0
 8004038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e03d      	b.n	80040bc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e4      	bne.n	800401c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f97a 	bl	800434c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fa25 	bl	80044a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fa7b 	bl	800455a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	461a      	mov	r2, r3
 800406a:	2100      	movs	r1, #0
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f9e3 	bl	8004438 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004080:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <HAL_ETH_Init+0x130>)
 8004090:	430b      	orrs	r3, r1
 8004092:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80040a6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2210      	movs	r2, #16
 80040b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40013800 	.word	0x40013800
 80040cc:	00020060 	.word	0x00020060

080040d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4b53      	ldr	r3, [pc, #332]	@ (8004234 <ETH_SetMACConfig+0x164>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	7b9b      	ldrb	r3, [r3, #14]
 80040ee:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	7c12      	ldrb	r2, [r2, #16]
 80040f4:	2a00      	cmp	r2, #0
 80040f6:	d102      	bne.n	80040fe <ETH_SetMACConfig+0x2e>
 80040f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80040fc:	e000      	b.n	8004100 <ETH_SetMACConfig+0x30>
 80040fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004100:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	7c52      	ldrb	r2, [r2, #17]
 8004106:	2a00      	cmp	r2, #0
 8004108:	d102      	bne.n	8004110 <ETH_SetMACConfig+0x40>
 800410a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800410e:	e000      	b.n	8004112 <ETH_SetMACConfig+0x42>
 8004110:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004112:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004118:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	7fdb      	ldrb	r3, [r3, #31]
 800411e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004120:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004126:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	7f92      	ldrb	r2, [r2, #30]
 800412c:	2a00      	cmp	r2, #0
 800412e:	d102      	bne.n	8004136 <ETH_SetMACConfig+0x66>
 8004130:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004134:	e000      	b.n	8004138 <ETH_SetMACConfig+0x68>
 8004136:	2200      	movs	r2, #0
                        macconf->Speed |
 8004138:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	7f1b      	ldrb	r3, [r3, #28]
 800413e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004140:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004146:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	791b      	ldrb	r3, [r3, #4]
 800414c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800414e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004156:	2a00      	cmp	r2, #0
 8004158:	d102      	bne.n	8004160 <ETH_SetMACConfig+0x90>
 800415a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800415e:	e000      	b.n	8004162 <ETH_SetMACConfig+0x92>
 8004160:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004162:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	7bdb      	ldrb	r3, [r3, #15]
 8004168:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800416a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004170:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004178:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800417a:	4313      	orrs	r3, r2
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004192:	2001      	movs	r0, #1
 8004194:	f7ff fdf8 	bl	8003d88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80041ae:	4013      	ands	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80041be:	2a00      	cmp	r2, #0
 80041c0:	d101      	bne.n	80041c6 <ETH_SetMACConfig+0xf6>
 80041c2:	2280      	movs	r2, #128	@ 0x80
 80041c4:	e000      	b.n	80041c8 <ETH_SetMACConfig+0xf8>
 80041c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80041c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80041ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80041d6:	2a01      	cmp	r2, #1
 80041d8:	d101      	bne.n	80041de <ETH_SetMACConfig+0x10e>
 80041da:	2208      	movs	r2, #8
 80041dc:	e000      	b.n	80041e0 <ETH_SetMACConfig+0x110>
 80041de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80041e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80041e8:	2a01      	cmp	r2, #1
 80041ea:	d101      	bne.n	80041f0 <ETH_SetMACConfig+0x120>
 80041ec:	2204      	movs	r2, #4
 80041ee:	e000      	b.n	80041f2 <ETH_SetMACConfig+0x122>
 80041f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80041f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80041fa:	2a01      	cmp	r2, #1
 80041fc:	d101      	bne.n	8004202 <ETH_SetMACConfig+0x132>
 80041fe:	2202      	movs	r2, #2
 8004200:	e000      	b.n	8004204 <ETH_SetMACConfig+0x134>
 8004202:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004204:	4313      	orrs	r3, r2
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800421c:	2001      	movs	r0, #1
 800421e:	f7ff fdb3 	bl	8003d88 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	619a      	str	r2, [r3, #24]
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	fd20810f 	.word	0xfd20810f

08004238 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4b3d      	ldr	r3, [pc, #244]	@ (8004348 <ETH_SetDMAConfig+0x110>)
 8004252:	4013      	ands	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	7b1b      	ldrb	r3, [r3, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <ETH_SetDMAConfig+0x2c>
 800425e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004262:	e000      	b.n	8004266 <ETH_SetDMAConfig+0x2e>
 8004264:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	7b5b      	ldrb	r3, [r3, #13]
 800426a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800426c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	7f52      	ldrb	r2, [r2, #29]
 8004272:	2a00      	cmp	r2, #0
 8004274:	d102      	bne.n	800427c <ETH_SetDMAConfig+0x44>
 8004276:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800427a:	e000      	b.n	800427e <ETH_SetDMAConfig+0x46>
 800427c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800427e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	7b9b      	ldrb	r3, [r3, #14]
 8004284:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004286:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800428c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	7f1b      	ldrb	r3, [r3, #28]
 8004292:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004294:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	7f9b      	ldrb	r3, [r3, #30]
 800429a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800429c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80042a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042ac:	4313      	orrs	r3, r2
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042bc:	461a      	mov	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042ce:	2001      	movs	r0, #1
 80042d0:	f7ff fd5a 	bl	8003d88 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042dc:	461a      	mov	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	791b      	ldrb	r3, [r3, #4]
 80042e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80042f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80042f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004300:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004302:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800430a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004310:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800431a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800431e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800432c:	2001      	movs	r0, #1
 800432e:	f7ff fd2b 	bl	8003d88 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6013      	str	r3, [r2, #0]
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	f8de3f23 	.word	0xf8de3f23

0800434c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b0a6      	sub	sp, #152	@ 0x98
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004360:	2300      	movs	r3, #0
 8004362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004364:	2300      	movs	r3, #0
 8004366:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004370:	2300      	movs	r3, #0
 8004372:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004382:	2300      	movs	r3, #0
 8004384:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004388:	2300      	movs	r3, #0
 800438a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800438e:	2300      	movs	r3, #0
 8004390:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004398:	2300      	movs	r3, #0
 800439a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80043b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80043ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80043c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff fe7f 	bl	80040d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80043d2:	2301      	movs	r3, #1
 80043d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80043d6:	2301      	movs	r3, #1
 80043d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80043fe:	2301      	movs	r3, #1
 8004400:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004402:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004406:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004408:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800440c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800440e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004412:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800441a:	2300      	movs	r3, #0
 800441c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004422:	f107 0308 	add.w	r3, r7, #8
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ff05 	bl	8004238 <ETH_SetDMAConfig>
}
 800442e:	bf00      	nop
 8004430:	3798      	adds	r7, #152	@ 0x98
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3305      	adds	r3, #5
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	3204      	adds	r2, #4
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	4b11      	ldr	r3, [pc, #68]	@ (80044a0 <ETH_MACAddressConfig+0x68>)
 800445a:	4413      	add	r3, r2
 800445c:	461a      	mov	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3303      	adds	r3, #3
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	061a      	lsls	r2, r3, #24
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3302      	adds	r3, #2
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3301      	adds	r3, #1
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	4313      	orrs	r3, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	7812      	ldrb	r2, [r2, #0]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <ETH_MACAddressConfig+0x6c>)
 800448a:	4413      	add	r3, r2
 800448c:	461a      	mov	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6013      	str	r3, [r2, #0]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40028040 	.word	0x40028040
 80044a4:	40028044 	.word	0x40028044

080044a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e03e      	b.n	8004534 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68d9      	ldr	r1, [r3, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	440b      	add	r3, r1
 80044c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2200      	movs	r2, #0
 80044d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2200      	movs	r2, #0
 80044d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2200      	movs	r2, #0
 80044de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	3206      	adds	r2, #6
 80044e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d80c      	bhi.n	8004518 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68d9      	ldr	r1, [r3, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	440b      	add	r3, r1
 8004510:	461a      	mov	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	e004      	b.n	8004522 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3301      	adds	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b03      	cmp	r3, #3
 8004538:	d9bd      	bls.n	80044b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800454c:	611a      	str	r2, [r3, #16]
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	e048      	b.n	80045fa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6919      	ldr	r1, [r3, #16]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2200      	movs	r2, #0
 8004584:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2200      	movs	r2, #0
 800458a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2200      	movs	r2, #0
 8004590:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2200      	movs	r2, #0
 800459c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80045a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	3212      	adds	r2, #18
 80045c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d80c      	bhi.n	80045ea <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6919      	ldr	r1, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	440b      	add	r3, r1
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	60da      	str	r2, [r3, #12]
 80045e8:	e004      	b.n	80045f4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d9b3      	bls.n	8004568 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800462a:	60da      	str	r2, [r3, #12]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	@ 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800464e:	2300      	movs	r3, #0
 8004650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e175      	b.n	8004944 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004658:	2201      	movs	r2, #1
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	429a      	cmp	r2, r3
 8004672:	f040 8164 	bne.w	800493e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d005      	beq.n	800468e <HAL_GPIO_Init+0x56>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d130      	bne.n	80046f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	2203      	movs	r2, #3
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c4:	2201      	movs	r2, #1
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 0201 	and.w	r2, r3, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d017      	beq.n	800472c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2203      	movs	r2, #3
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d123      	bne.n	8004780 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	08da      	lsrs	r2, r3, #3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3208      	adds	r2, #8
 8004740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	08da      	lsrs	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3208      	adds	r2, #8
 800477a:	69b9      	ldr	r1, [r7, #24]
 800477c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0203 	and.w	r2, r3, #3
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80be 	beq.w	800493e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c2:	4b66      	ldr	r3, [pc, #408]	@ (800495c <HAL_GPIO_Init+0x324>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c6:	4a65      	ldr	r2, [pc, #404]	@ (800495c <HAL_GPIO_Init+0x324>)
 80047c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ce:	4b63      	ldr	r3, [pc, #396]	@ (800495c <HAL_GPIO_Init+0x324>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047da:	4a61      	ldr	r2, [pc, #388]	@ (8004960 <HAL_GPIO_Init+0x328>)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	3302      	adds	r3, #2
 80047e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	220f      	movs	r2, #15
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a58      	ldr	r2, [pc, #352]	@ (8004964 <HAL_GPIO_Init+0x32c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d037      	beq.n	8004876 <HAL_GPIO_Init+0x23e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a57      	ldr	r2, [pc, #348]	@ (8004968 <HAL_GPIO_Init+0x330>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d031      	beq.n	8004872 <HAL_GPIO_Init+0x23a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a56      	ldr	r2, [pc, #344]	@ (800496c <HAL_GPIO_Init+0x334>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02b      	beq.n	800486e <HAL_GPIO_Init+0x236>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a55      	ldr	r2, [pc, #340]	@ (8004970 <HAL_GPIO_Init+0x338>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d025      	beq.n	800486a <HAL_GPIO_Init+0x232>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a54      	ldr	r2, [pc, #336]	@ (8004974 <HAL_GPIO_Init+0x33c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01f      	beq.n	8004866 <HAL_GPIO_Init+0x22e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a53      	ldr	r2, [pc, #332]	@ (8004978 <HAL_GPIO_Init+0x340>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d019      	beq.n	8004862 <HAL_GPIO_Init+0x22a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a52      	ldr	r2, [pc, #328]	@ (800497c <HAL_GPIO_Init+0x344>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_GPIO_Init+0x226>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a51      	ldr	r2, [pc, #324]	@ (8004980 <HAL_GPIO_Init+0x348>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00d      	beq.n	800485a <HAL_GPIO_Init+0x222>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a50      	ldr	r2, [pc, #320]	@ (8004984 <HAL_GPIO_Init+0x34c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <HAL_GPIO_Init+0x21e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a4f      	ldr	r2, [pc, #316]	@ (8004988 <HAL_GPIO_Init+0x350>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <HAL_GPIO_Init+0x21a>
 800484e:	2309      	movs	r3, #9
 8004850:	e012      	b.n	8004878 <HAL_GPIO_Init+0x240>
 8004852:	230a      	movs	r3, #10
 8004854:	e010      	b.n	8004878 <HAL_GPIO_Init+0x240>
 8004856:	2308      	movs	r3, #8
 8004858:	e00e      	b.n	8004878 <HAL_GPIO_Init+0x240>
 800485a:	2307      	movs	r3, #7
 800485c:	e00c      	b.n	8004878 <HAL_GPIO_Init+0x240>
 800485e:	2306      	movs	r3, #6
 8004860:	e00a      	b.n	8004878 <HAL_GPIO_Init+0x240>
 8004862:	2305      	movs	r3, #5
 8004864:	e008      	b.n	8004878 <HAL_GPIO_Init+0x240>
 8004866:	2304      	movs	r3, #4
 8004868:	e006      	b.n	8004878 <HAL_GPIO_Init+0x240>
 800486a:	2303      	movs	r3, #3
 800486c:	e004      	b.n	8004878 <HAL_GPIO_Init+0x240>
 800486e:	2302      	movs	r3, #2
 8004870:	e002      	b.n	8004878 <HAL_GPIO_Init+0x240>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_GPIO_Init+0x240>
 8004876:	2300      	movs	r3, #0
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	f002 0203 	and.w	r2, r2, #3
 800487e:	0092      	lsls	r2, r2, #2
 8004880:	4093      	lsls	r3, r2
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004888:	4935      	ldr	r1, [pc, #212]	@ (8004960 <HAL_GPIO_Init+0x328>)
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	3302      	adds	r3, #2
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004896:	4b3d      	ldr	r3, [pc, #244]	@ (800498c <HAL_GPIO_Init+0x354>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	43db      	mvns	r3, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4013      	ands	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ba:	4a34      	ldr	r2, [pc, #208]	@ (800498c <HAL_GPIO_Init+0x354>)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048c0:	4b32      	ldr	r3, [pc, #200]	@ (800498c <HAL_GPIO_Init+0x354>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048e4:	4a29      	ldr	r2, [pc, #164]	@ (800498c <HAL_GPIO_Init+0x354>)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048ea:	4b28      	ldr	r3, [pc, #160]	@ (800498c <HAL_GPIO_Init+0x354>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800490e:	4a1f      	ldr	r2, [pc, #124]	@ (800498c <HAL_GPIO_Init+0x354>)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004914:	4b1d      	ldr	r3, [pc, #116]	@ (800498c <HAL_GPIO_Init+0x354>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004938:	4a14      	ldr	r2, [pc, #80]	@ (800498c <HAL_GPIO_Init+0x354>)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3301      	adds	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b0f      	cmp	r3, #15
 8004948:	f67f ae86 	bls.w	8004658 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	3724      	adds	r7, #36	@ 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	40013800 	.word	0x40013800
 8004964:	40020000 	.word	0x40020000
 8004968:	40020400 	.word	0x40020400
 800496c:	40020800 	.word	0x40020800
 8004970:	40020c00 	.word	0x40020c00
 8004974:	40021000 	.word	0x40021000
 8004978:	40021400 	.word	0x40021400
 800497c:	40021800 	.word	0x40021800
 8004980:	40021c00 	.word	0x40021c00
 8004984:	40022000 	.word	0x40022000
 8004988:	40022400 	.word	0x40022400
 800498c:	40013c00 	.word	0x40013c00

08004990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
 800499c:	4613      	mov	r3, r2
 800499e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049a0:	787b      	ldrb	r3, [r7, #1]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80049ac:	e003      	b.n	80049b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	041a      	lsls	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	619a      	str	r2, [r3, #24]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049d4:	887a      	ldrh	r2, [r7, #2]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4013      	ands	r3, r2
 80049da:	041a      	lsls	r2, r3, #16
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	43d9      	mvns	r1, r3
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	400b      	ands	r3, r1
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e08b      	b.n	8004b22 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fe feea 	bl	80037f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2224      	movs	r2, #36	@ 0x24
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d107      	bne.n	8004a72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	e006      	b.n	8004a80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004a7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d108      	bne.n	8004a9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a96:	605a      	str	r2, [r3, #4]
 8004a98:	e007      	b.n	8004aaa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aa8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b2c <HAL_I2C_Init+0x134>)
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ac8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69d9      	ldr	r1, [r3, #28]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	02008000 	.word	0x02008000

08004b30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	817b      	strh	r3, [r7, #10]
 8004b42:	460b      	mov	r3, r1
 8004b44:	813b      	strh	r3, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	f040 80f9 	bne.w	8004d4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_I2C_Mem_Write+0x34>
 8004b5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d105      	bne.n	8004b70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0ed      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_I2C_Mem_Write+0x4e>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e0e6      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b86:	f7ff f8f3 	bl	8003d70 <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2319      	movs	r3, #25
 8004b92:	2201      	movs	r2, #1
 8004b94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fbc9 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0d1      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2221      	movs	r2, #33	@ 0x21
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2240      	movs	r2, #64	@ 0x40
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a3a      	ldr	r2, [r7, #32]
 8004bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bd0:	88f8      	ldrh	r0, [r7, #6]
 8004bd2:	893a      	ldrh	r2, [r7, #8]
 8004bd4:	8979      	ldrh	r1, [r7, #10]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4603      	mov	r3, r0
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fad9 	bl	8005198 <I2C_RequestMemoryWrite>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0a9      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2bff      	cmp	r3, #255	@ 0xff
 8004c00:	d90e      	bls.n	8004c20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	22ff      	movs	r2, #255	@ 0xff
 8004c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	8979      	ldrh	r1, [r7, #10]
 8004c10:	2300      	movs	r3, #0
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fd4d 	bl	80056b8 <I2C_TransferConfig>
 8004c1e:	e00f      	b.n	8004c40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	8979      	ldrh	r1, [r7, #10]
 8004c32:	2300      	movs	r3, #0
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fd3c 	bl	80056b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fbcc 	bl	80053e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e07b      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d034      	beq.n	8004cf8 <HAL_I2C_Mem_Write+0x1c8>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d130      	bne.n	8004cf8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2180      	movs	r1, #128	@ 0x80
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fb45 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e04d      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2bff      	cmp	r3, #255	@ 0xff
 8004cb8:	d90e      	bls.n	8004cd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	22ff      	movs	r2, #255	@ 0xff
 8004cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	8979      	ldrh	r1, [r7, #10]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fcf1 	bl	80056b8 <I2C_TransferConfig>
 8004cd6:	e00f      	b.n	8004cf8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	8979      	ldrh	r1, [r7, #10]
 8004cea:	2300      	movs	r3, #0
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fce0 	bl	80056b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d19e      	bne.n	8004c40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fbb2 	bl	8005470 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e01a      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b0a      	ldr	r3, [pc, #40]	@ (8004d54 <HAL_I2C_Mem_Write+0x224>)
 8004d2a:	400b      	ands	r3, r1
 8004d2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e000      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
  }
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	fe00e800 	.word	0xfe00e800

08004d58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	4608      	mov	r0, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	817b      	strh	r3, [r7, #10]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	813b      	strh	r3, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	f040 80fd 	bne.w	8004f7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_I2C_Mem_Read+0x34>
 8004d86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0f1      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_I2C_Mem_Read+0x4e>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e0ea      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dae:	f7fe ffdf 	bl	8003d70 <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2319      	movs	r3, #25
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fab5 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0d5      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2222      	movs	r2, #34	@ 0x22
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2240      	movs	r2, #64	@ 0x40
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a3a      	ldr	r2, [r7, #32]
 8004dea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004df8:	88f8      	ldrh	r0, [r7, #6]
 8004dfa:	893a      	ldrh	r2, [r7, #8]
 8004dfc:	8979      	ldrh	r1, [r7, #10]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	4603      	mov	r3, r0
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fa19 	bl	8005240 <I2C_RequestMemoryRead>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0ad      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2bff      	cmp	r3, #255	@ 0xff
 8004e28:	d90e      	bls.n	8004e48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	8979      	ldrh	r1, [r7, #10]
 8004e38:	4b52      	ldr	r3, [pc, #328]	@ (8004f84 <HAL_I2C_Mem_Read+0x22c>)
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fc39 	bl	80056b8 <I2C_TransferConfig>
 8004e46:	e00f      	b.n	8004e68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	8979      	ldrh	r1, [r7, #10]
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <HAL_I2C_Mem_Read+0x22c>)
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fc28 	bl	80056b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2104      	movs	r1, #4
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 fa5c 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e07c      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d034      	beq.n	8004f28 <HAL_I2C_Mem_Read+0x1d0>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d130      	bne.n	8004f28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2180      	movs	r1, #128	@ 0x80
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fa2d 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e04d      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2bff      	cmp	r3, #255	@ 0xff
 8004ee8:	d90e      	bls.n	8004f08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	8979      	ldrh	r1, [r7, #10]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fbd9 	bl	80056b8 <I2C_TransferConfig>
 8004f06:	e00f      	b.n	8004f28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	8979      	ldrh	r1, [r7, #10]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fbc8 	bl	80056b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d19a      	bne.n	8004e68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fa9a 	bl	8005470 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e01a      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <HAL_I2C_Mem_Read+0x230>)
 8004f5a:	400b      	ands	r3, r1
 8004f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	80002400 	.word	0x80002400
 8004f88:	fe00e800 	.word	0xfe00e800

08004f8c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	@ 0x28
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	f040 80e9 	bne.w	8005184 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e0df      	b.n	8005186 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_I2C_IsDeviceReady+0x48>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e0d8      	b.n	8005186 <HAL_I2C_IsDeviceReady+0x1fa>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2224      	movs	r2, #36	@ 0x24
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d105      	bne.n	8004ffe <HAL_I2C_IsDeviceReady+0x72>
 8004ff2:	897b      	ldrh	r3, [r7, #10]
 8004ff4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ff8:	4b65      	ldr	r3, [pc, #404]	@ (8005190 <HAL_I2C_IsDeviceReady+0x204>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	e004      	b.n	8005008 <HAL_I2C_IsDeviceReady+0x7c>
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005004:	4b63      	ldr	r3, [pc, #396]	@ (8005194 <HAL_I2C_IsDeviceReady+0x208>)
 8005006:	4313      	orrs	r3, r2
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800500e:	f7fe feaf 	bl	8003d70 <HAL_GetTick>
 8005012:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b20      	cmp	r3, #32
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b10      	cmp	r3, #16
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005040:	e034      	b.n	80050ac <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d01a      	beq.n	8005080 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800504a:	f7fe fe91 	bl	8003d70 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <HAL_I2C_IsDeviceReady+0xd4>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10f      	bne.n	8005080 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e082      	b.n	8005186 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b20      	cmp	r3, #32
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80050ac:	7fbb      	ldrb	r3, [r7, #30]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <HAL_I2C_IsDeviceReady+0x12c>
 80050b2:	7f7b      	ldrb	r3, [r7, #29]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0c4      	beq.n	8005042 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d027      	beq.n	8005116 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	2120      	movs	r1, #32
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f92d 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d107      	bne.n	80050f4 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2220      	movs	r2, #32
 80050ea:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80050f2:	e026      	b.n	8005142 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e023      	b.n	8005142 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2220      	movs	r2, #32
 8005100:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e037      	b.n	8005186 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2210      	movs	r2, #16
 800511c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2200      	movs	r2, #0
 8005126:	2120      	movs	r1, #32
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f901 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e003      	b.n	8005142 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2220      	movs	r2, #32
 8005140:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3301      	adds	r3, #1
 8005146:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d904      	bls.n	800515a <HAL_I2C_IsDeviceReady+0x1ce>
 8005150:	7ffb      	ldrb	r3, [r7, #31]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	429a      	cmp	r2, r3
 8005160:	f63f af43 	bhi.w	8004fea <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005170:	f043 0220 	orr.w	r2, r3, #32
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8005184:	2302      	movs	r3, #2
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	02002000 	.word	0x02002000
 8005194:	02002800 	.word	0x02002800

08005198 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	4608      	mov	r0, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	461a      	mov	r2, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	817b      	strh	r3, [r7, #10]
 80051aa:	460b      	mov	r3, r1
 80051ac:	813b      	strh	r3, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	8979      	ldrh	r1, [r7, #10]
 80051b8:	4b20      	ldr	r3, [pc, #128]	@ (800523c <I2C_RequestMemoryWrite+0xa4>)
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fa79 	bl	80056b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	69b9      	ldr	r1, [r7, #24]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f909 	bl	80053e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e02c      	b.n	8005234 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d105      	bne.n	80051ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051e0:	893b      	ldrh	r3, [r7, #8]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80051ea:	e015      	b.n	8005218 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051ec:	893b      	ldrh	r3, [r7, #8]
 80051ee:	0a1b      	lsrs	r3, r3, #8
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	69b9      	ldr	r1, [r7, #24]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f8ef 	bl	80053e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e012      	b.n	8005234 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800520e:	893b      	ldrh	r3, [r7, #8]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2200      	movs	r2, #0
 8005220:	2180      	movs	r1, #128	@ 0x80
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f884 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	80002000 	.word	0x80002000

08005240 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	4608      	mov	r0, r1
 800524a:	4611      	mov	r1, r2
 800524c:	461a      	mov	r2, r3
 800524e:	4603      	mov	r3, r0
 8005250:	817b      	strh	r3, [r7, #10]
 8005252:	460b      	mov	r3, r1
 8005254:	813b      	strh	r3, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	8979      	ldrh	r1, [r7, #10]
 8005260:	4b20      	ldr	r3, [pc, #128]	@ (80052e4 <I2C_RequestMemoryRead+0xa4>)
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	2300      	movs	r3, #0
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fa26 	bl	80056b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	69b9      	ldr	r1, [r7, #24]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f8b6 	bl	80053e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e02c      	b.n	80052da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d105      	bne.n	8005292 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005286:	893b      	ldrh	r3, [r7, #8]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005290:	e015      	b.n	80052be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005292:	893b      	ldrh	r3, [r7, #8]
 8005294:	0a1b      	lsrs	r3, r3, #8
 8005296:	b29b      	uxth	r3, r3
 8005298:	b2da      	uxtb	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	69b9      	ldr	r1, [r7, #24]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f89c 	bl	80053e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e012      	b.n	80052da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052b4:	893b      	ldrh	r3, [r7, #8]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2200      	movs	r2, #0
 80052c6:	2140      	movs	r1, #64	@ 0x40
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f831 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	80002000 	.word	0x80002000

080052e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d103      	bne.n	8005306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b01      	cmp	r3, #1
 8005312:	d007      	beq.n	8005324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	619a      	str	r2, [r3, #24]
  }
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005340:	e03b      	b.n	80053ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f8d6 	bl	80054f8 <I2C_IsErrorOccurred>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e041      	b.n	80053da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d02d      	beq.n	80053ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535e:	f7fe fd07 	bl	8003d70 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <I2C_WaitOnFlagUntilTimeout+0x44>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d122      	bne.n	80053ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4013      	ands	r3, r2
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	429a      	cmp	r2, r3
 8005382:	bf0c      	ite	eq
 8005384:	2301      	moveq	r3, #1
 8005386:	2300      	movne	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	429a      	cmp	r2, r3
 8005390:	d113      	bne.n	80053ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e00f      	b.n	80053da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4013      	ands	r3, r2
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	bf0c      	ite	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	2300      	movne	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d0b4      	beq.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053ee:	e033      	b.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f87f 	bl	80054f8 <I2C_IsErrorOccurred>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e031      	b.n	8005468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d025      	beq.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540c:	f7fe fcb0 	bl	8003d70 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	429a      	cmp	r2, r3
 800541a:	d302      	bcc.n	8005422 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d11a      	bne.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b02      	cmp	r3, #2
 800542e:	d013      	beq.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e007      	b.n	8005468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b02      	cmp	r3, #2
 8005464:	d1c4      	bne.n	80053f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800547c:	e02f      	b.n	80054de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f838 	bl	80054f8 <I2C_IsErrorOccurred>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e02d      	b.n	80054ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005492:	f7fe fc6d 	bl	8003d70 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d302      	bcc.n	80054a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d11a      	bne.n	80054de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d013      	beq.n	80054de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	f043 0220 	orr.w	r2, r3, #32
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e007      	b.n	80054ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d1c8      	bne.n	800547e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	@ 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d068      	beq.n	80055f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2210      	movs	r2, #16
 800552a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800552c:	e049      	b.n	80055c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d045      	beq.n	80055c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005536:	f7fe fc1b 	bl	8003d70 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	429a      	cmp	r2, r3
 8005544:	d302      	bcc.n	800554c <I2C_IsErrorOccurred+0x54>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d13a      	bne.n	80055c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005556:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800555e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800556a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800556e:	d121      	bne.n	80055b4 <I2C_IsErrorOccurred+0xbc>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005576:	d01d      	beq.n	80055b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005578:	7cfb      	ldrb	r3, [r7, #19]
 800557a:	2b20      	cmp	r3, #32
 800557c:	d01a      	beq.n	80055b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800558c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800558e:	f7fe fbef 	bl	8003d70 <HAL_GetTick>
 8005592:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005594:	e00e      	b.n	80055b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005596:	f7fe fbeb 	bl	8003d70 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b19      	cmp	r3, #25
 80055a2:	d907      	bls.n	80055b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	f043 0320 	orr.w	r3, r3, #32
 80055aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80055b2:	e006      	b.n	80055c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d1e9      	bne.n	8005596 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d003      	beq.n	80055d8 <I2C_IsErrorOccurred+0xe0>
 80055d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0aa      	beq.n	800552e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80055d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2220      	movs	r2, #32
 80055e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	f043 0304 	orr.w	r3, r3, #4
 80055ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005618:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f043 0308 	orr.w	r3, r3, #8
 8005630:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800563a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	f043 0302 	orr.w	r3, r3, #2
 8005652:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800565c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01c      	beq.n	80056a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fe3b 	bl	80052e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <I2C_IsErrorOccurred+0x1bc>)
 800567e:	400b      	ands	r3, r1
 8005680:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	431a      	orrs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80056a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3728      	adds	r7, #40	@ 0x28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	fe00e800 	.word	0xfe00e800

080056b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	607b      	str	r3, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	817b      	strh	r3, [r7, #10]
 80056c6:	4613      	mov	r3, r2
 80056c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056ca:	897b      	ldrh	r3, [r7, #10]
 80056cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056d0:	7a7b      	ldrb	r3, [r7, #9]
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056d8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056e6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	0d5b      	lsrs	r3, r3, #21
 80056f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80056f6:	4b08      	ldr	r3, [pc, #32]	@ (8005718 <I2C_TransferConfig+0x60>)
 80056f8:	430b      	orrs	r3, r1
 80056fa:	43db      	mvns	r3, r3
 80056fc:	ea02 0103 	and.w	r1, r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	03ff63ff 	.word	0x03ff63ff

0800571c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b20      	cmp	r3, #32
 8005730:	d138      	bne.n	80057a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800573c:	2302      	movs	r3, #2
 800573e:	e032      	b.n	80057a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2224      	movs	r2, #36	@ 0x24
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800576e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6819      	ldr	r1, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e000      	b.n	80057a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d139      	bne.n	800583c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e033      	b.n	800583e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2224      	movs	r2, #36	@ 0x24
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	e000      	b.n	800583e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800583c:	2302      	movs	r3, #2
  }
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af02      	add	r7, sp, #8
 8005850:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e108      	b.n	8005a6e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fe f87e 	bl	8003978 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2203      	movs	r2, #3
 8005880:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800588a:	d102      	bne.n	8005892 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f001 ff3c 	bl	8007714 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	7c1a      	ldrb	r2, [r3, #16]
 80058a4:	f88d 2000 	strb.w	r2, [sp]
 80058a8:	3304      	adds	r3, #4
 80058aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ac:	f001 fed8 	bl	8007660 <USB_CoreInit>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e0d5      	b.n	8005a6e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 ff34 	bl	8007736 <USB_SetCurrentMode>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0c6      	b.n	8005a6e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]
 80058e4:	e04a      	b.n	800597c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058e6:	7bfa      	ldrb	r2, [r7, #15]
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	4613      	mov	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	440b      	add	r3, r1
 80058f4:	3315      	adds	r3, #21
 80058f6:	2201      	movs	r2, #1
 80058f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058fa:	7bfa      	ldrb	r2, [r7, #15]
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	3314      	adds	r3, #20
 800590a:	7bfa      	ldrb	r2, [r7, #15]
 800590c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800590e:	7bfa      	ldrb	r2, [r7, #15]
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	b298      	uxth	r0, r3
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	332e      	adds	r3, #46	@ 0x2e
 8005922:	4602      	mov	r2, r0
 8005924:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005926:	7bfa      	ldrb	r2, [r7, #15]
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	3318      	adds	r3, #24
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800593a:	7bfa      	ldrb	r2, [r7, #15]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	331c      	adds	r3, #28
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800594e:	7bfa      	ldrb	r2, [r7, #15]
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	3320      	adds	r3, #32
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005962:	7bfa      	ldrb	r2, [r7, #15]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3324      	adds	r3, #36	@ 0x24
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	3301      	adds	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	791b      	ldrb	r3, [r3, #4]
 8005980:	7bfa      	ldrb	r2, [r7, #15]
 8005982:	429a      	cmp	r2, r3
 8005984:	d3af      	bcc.n	80058e6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	e044      	b.n	8005a16 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800598c:	7bfa      	ldrb	r2, [r7, #15]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059a2:	7bfa      	ldrb	r2, [r7, #15]
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80059b4:	7bfa      	ldrb	r2, [r7, #15]
 80059b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059b8:	7bfa      	ldrb	r2, [r7, #15]
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059ce:	7bfa      	ldrb	r2, [r7, #15]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059e4:	7bfa      	ldrb	r2, [r7, #15]
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059fa:	7bfa      	ldrb	r2, [r7, #15]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	3301      	adds	r3, #1
 8005a14:	73fb      	strb	r3, [r7, #15]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	7bfa      	ldrb	r2, [r7, #15]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d3b5      	bcc.n	800598c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7c1a      	ldrb	r2, [r3, #16]
 8005a28:	f88d 2000 	strb.w	r2, [sp]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a30:	f001 fece 	bl	80077d0 <USB_DevInit>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e013      	b.n	8005a6e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7b1b      	ldrb	r3, [r3, #12]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d102      	bne.n	8005a62 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f80b 	bl	8005a78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f002 f889 	bl	8007b7e <USB_DevDisconnect>

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005aa6:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <HAL_PCDEx_ActivateLPM+0x44>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	10000003 	.word	0x10000003

08005ac0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a04      	ldr	r2, [pc, #16]	@ (8005adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ace:	6013      	str	r3, [r2, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40007000 	.word	0x40007000

08005ae0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e291      	b.n	800601a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8087 	beq.w	8005c12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b04:	4b96      	ldr	r3, [pc, #600]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d00c      	beq.n	8005b2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b10:	4b93      	ldr	r3, [pc, #588]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d112      	bne.n	8005b42 <HAL_RCC_OscConfig+0x62>
 8005b1c:	4b90      	ldr	r3, [pc, #576]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b28:	d10b      	bne.n	8005b42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d06c      	beq.n	8005c10 <HAL_RCC_OscConfig+0x130>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d168      	bne.n	8005c10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e26b      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b4a:	d106      	bne.n	8005b5a <HAL_RCC_OscConfig+0x7a>
 8005b4c:	4b84      	ldr	r3, [pc, #528]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a83      	ldr	r2, [pc, #524]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	e02e      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x9c>
 8005b62:	4b7f      	ldr	r3, [pc, #508]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a7e      	ldr	r2, [pc, #504]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a7b      	ldr	r2, [pc, #492]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e01d      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0xc0>
 8005b86:	4b76      	ldr	r3, [pc, #472]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a75      	ldr	r2, [pc, #468]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4b73      	ldr	r3, [pc, #460]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a72      	ldr	r2, [pc, #456]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd8>
 8005ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b6c      	ldr	r3, [pc, #432]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d013      	beq.n	8005be8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fe f8d6 	bl	8003d70 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bc8:	f7fe f8d2 	bl	8003d70 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	@ 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e21f      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bda:	4b61      	ldr	r3, [pc, #388]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0xe8>
 8005be6:	e014      	b.n	8005c12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fe f8c2 	bl	8003d70 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7fe f8be 	bl	8003d70 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	@ 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e20b      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c02:	4b57      	ldr	r3, [pc, #348]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x110>
 8005c0e:	e000      	b.n	8005c12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d069      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c1e:	4b50      	ldr	r3, [pc, #320]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d11c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x190>
 8005c36:	4b4a      	ldr	r3, [pc, #296]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d116      	bne.n	8005c70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c42:	4b47      	ldr	r3, [pc, #284]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_RCC_OscConfig+0x17a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d001      	beq.n	8005c5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e1df      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5a:	4b41      	ldr	r3, [pc, #260]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	493d      	ldr	r1, [pc, #244]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6e:	e040      	b.n	8005cf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d023      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c78:	4b39      	ldr	r3, [pc, #228]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a38      	ldr	r2, [pc, #224]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7fe f874 	bl	8003d70 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c8c:	f7fe f870 	bl	8003d70 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e1bd      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9e:	4b30      	ldr	r3, [pc, #192]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005caa:	4b2d      	ldr	r3, [pc, #180]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4929      	ldr	r1, [pc, #164]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]
 8005cbe:	e018      	b.n	8005cf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc0:	4b27      	ldr	r3, [pc, #156]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a26      	ldr	r2, [pc, #152]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7fe f850 	bl	8003d70 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cd4:	f7fe f84c 	bl	8003d70 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e199      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d038      	beq.n	8005d70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d019      	beq.n	8005d3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d06:	4b16      	ldr	r3, [pc, #88]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d0a:	4a15      	ldr	r2, [pc, #84]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d12:	f7fe f82d 	bl	8003d70 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d1a:	f7fe f829 	bl	8003d70 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e176      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x23a>
 8005d38:	e01a      	b.n	8005d70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d3a:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3e:	4a08      	ldr	r2, [pc, #32]	@ (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d46:	f7fe f813 	bl	8003d70 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d4c:	e00a      	b.n	8005d64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d4e:	f7fe f80f 	bl	8003d70 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d903      	bls.n	8005d64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e15c      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
 8005d60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d64:	4b91      	ldr	r3, [pc, #580]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ee      	bne.n	8005d4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80a4 	beq.w	8005ec6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7e:	4b8b      	ldr	r3, [pc, #556]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8a:	4b88      	ldr	r3, [pc, #544]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	4a87      	ldr	r2, [pc, #540]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d96:	4b85      	ldr	r3, [pc, #532]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da6:	4b82      	ldr	r3, [pc, #520]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d118      	bne.n	8005de4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005db2:	4b7f      	ldr	r3, [pc, #508]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a7e      	ldr	r2, [pc, #504]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dbe:	f7fd ffd7 	bl	8003d70 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc6:	f7fd ffd3 	bl	8003d70 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b64      	cmp	r3, #100	@ 0x64
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e120      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd8:	4b75      	ldr	r3, [pc, #468]	@ (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d106      	bne.n	8005dfa <HAL_RCC_OscConfig+0x31a>
 8005dec:	4b6f      	ldr	r3, [pc, #444]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df0:	4a6e      	ldr	r2, [pc, #440]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005df8:	e02d      	b.n	8005e56 <HAL_RCC_OscConfig+0x376>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x33c>
 8005e02:	4b6a      	ldr	r3, [pc, #424]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e06:	4a69      	ldr	r2, [pc, #420]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0e:	4b67      	ldr	r3, [pc, #412]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e12:	4a66      	ldr	r2, [pc, #408]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e14:	f023 0304 	bic.w	r3, r3, #4
 8005e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e1a:	e01c      	b.n	8005e56 <HAL_RCC_OscConfig+0x376>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b05      	cmp	r3, #5
 8005e22:	d10c      	bne.n	8005e3e <HAL_RCC_OscConfig+0x35e>
 8005e24:	4b61      	ldr	r3, [pc, #388]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e28:	4a60      	ldr	r2, [pc, #384]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e2a:	f043 0304 	orr.w	r3, r3, #4
 8005e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e30:	4b5e      	ldr	r3, [pc, #376]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e34:	4a5d      	ldr	r2, [pc, #372]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e3c:	e00b      	b.n	8005e56 <HAL_RCC_OscConfig+0x376>
 8005e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e42:	4a5a      	ldr	r2, [pc, #360]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e4a:	4b58      	ldr	r3, [pc, #352]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4e:	4a57      	ldr	r2, [pc, #348]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e50:	f023 0304 	bic.w	r3, r3, #4
 8005e54:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d015      	beq.n	8005e8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5e:	f7fd ff87 	bl	8003d70 <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e64:	e00a      	b.n	8005e7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e66:	f7fd ff83 	bl	8003d70 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e0ce      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0ee      	beq.n	8005e66 <HAL_RCC_OscConfig+0x386>
 8005e88:	e014      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8a:	f7fd ff71 	bl	8003d70 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e90:	e00a      	b.n	8005ea8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7fd ff6d 	bl	8003d70 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e0b8      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea8:	4b40      	ldr	r3, [pc, #256]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1ee      	bne.n	8005e92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eba:	4b3c      	ldr	r3, [pc, #240]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80a4 	beq.w	8006018 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ed0:	4b36      	ldr	r3, [pc, #216]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d06b      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d149      	bne.n	8005f78 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee4:	4b31      	ldr	r3, [pc, #196]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a30      	ldr	r2, [pc, #192]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef0:	f7fd ff3e 	bl	8003d70 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fd ff3a 	bl	8003d70 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e087      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0a:	4b28      	ldr	r3, [pc, #160]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69da      	ldr	r2, [r3, #28]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	019b      	lsls	r3, r3, #6
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f38:	061b      	lsls	r3, r3, #24
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f42:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f44:	4b19      	ldr	r3, [pc, #100]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a18      	ldr	r2, [pc, #96]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fd ff0e 	bl	8003d70 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fd ff0a 	bl	8003d70 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e057      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6a:	4b10      	ldr	r3, [pc, #64]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCC_OscConfig+0x478>
 8005f76:	e04f      	b.n	8006018 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f78:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f84:	f7fd fef4 	bl	8003d70 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fd fef0 	bl	8003d70 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e03d      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9e:	4b03      	ldr	r3, [pc, #12]	@ (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0x4ac>
 8005faa:	e035      	b.n	8006018 <HAL_RCC_OscConfig+0x538>
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006024 <HAL_RCC_OscConfig+0x544>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d028      	beq.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d121      	bne.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d11a      	bne.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d111      	bne.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006000:	429a      	cmp	r2, r3
 8006002:	d107      	bne.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40023800 	.word	0x40023800

08006028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0d0      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006040:	4b6a      	ldr	r3, [pc, #424]	@ (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d910      	bls.n	8006070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604e:	4b67      	ldr	r3, [pc, #412]	@ (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f023 020f 	bic.w	r2, r3, #15
 8006056:	4965      	ldr	r1, [pc, #404]	@ (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	4313      	orrs	r3, r2
 800605c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605e:	4b63      	ldr	r3, [pc, #396]	@ (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0b8      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d020      	beq.n	80060be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006088:	4b59      	ldr	r3, [pc, #356]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4a58      	ldr	r2, [pc, #352]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800608e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060a0:	4b53      	ldr	r3, [pc, #332]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a52      	ldr	r2, [pc, #328]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ac:	4b50      	ldr	r3, [pc, #320]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	494d      	ldr	r1, [pc, #308]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d040      	beq.n	800614c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d107      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d2:	4b47      	ldr	r3, [pc, #284]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d115      	bne.n	800610a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e07f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d107      	bne.n	80060fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ea:	4b41      	ldr	r3, [pc, #260]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e073      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fa:	4b3d      	ldr	r3, [pc, #244]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e06b      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800610a:	4b39      	ldr	r3, [pc, #228]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f023 0203 	bic.w	r2, r3, #3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4936      	ldr	r1, [pc, #216]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 8006118:	4313      	orrs	r3, r2
 800611a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800611c:	f7fd fe28 	bl	8003d70 <HAL_GetTick>
 8006120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006122:	e00a      	b.n	800613a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006124:	f7fd fe24 	bl	8003d70 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e053      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613a:	4b2d      	ldr	r3, [pc, #180]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 020c 	and.w	r2, r3, #12
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	429a      	cmp	r2, r3
 800614a:	d1eb      	bne.n	8006124 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800614c:	4b27      	ldr	r3, [pc, #156]	@ (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d210      	bcs.n	800617c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b24      	ldr	r3, [pc, #144]	@ (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f023 020f 	bic.w	r2, r3, #15
 8006162:	4922      	ldr	r1, [pc, #136]	@ (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b20      	ldr	r3, [pc, #128]	@ (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e032      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006188:	4b19      	ldr	r3, [pc, #100]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4916      	ldr	r1, [pc, #88]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 8006196:	4313      	orrs	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061a6:	4b12      	ldr	r3, [pc, #72]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	490e      	ldr	r1, [pc, #56]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ba:	f000 f821 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 80061be:	4602      	mov	r2, r0
 80061c0:	4b0b      	ldr	r3, [pc, #44]	@ (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	490a      	ldr	r1, [pc, #40]	@ (80061f4 <HAL_RCC_ClockConfig+0x1cc>)
 80061cc:	5ccb      	ldrb	r3, [r1, r3]
 80061ce:	fa22 f303 	lsr.w	r3, r2, r3
 80061d2:	4a09      	ldr	r2, [pc, #36]	@ (80061f8 <HAL_RCC_ClockConfig+0x1d0>)
 80061d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061d6:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_RCC_ClockConfig+0x1d4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fd fd84 	bl	8003ce8 <HAL_InitTick>

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40023c00 	.word	0x40023c00
 80061f0:	40023800 	.word	0x40023800
 80061f4:	0800bda0 	.word	0x0800bda0
 80061f8:	20000000 	.word	0x20000000
 80061fc:	20000004 	.word	0x20000004

08006200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006204:	b094      	sub	sp, #80	@ 0x50
 8006206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	647b      	str	r3, [r7, #68]	@ 0x44
 800620c:	2300      	movs	r3, #0
 800620e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006210:	2300      	movs	r3, #0
 8006212:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006218:	4b79      	ldr	r3, [pc, #484]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b08      	cmp	r3, #8
 8006222:	d00d      	beq.n	8006240 <HAL_RCC_GetSysClockFreq+0x40>
 8006224:	2b08      	cmp	r3, #8
 8006226:	f200 80e1 	bhi.w	80063ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0x34>
 800622e:	2b04      	cmp	r3, #4
 8006230:	d003      	beq.n	800623a <HAL_RCC_GetSysClockFreq+0x3a>
 8006232:	e0db      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006234:	4b73      	ldr	r3, [pc, #460]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x204>)
 8006236:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006238:	e0db      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800623a:	4b73      	ldr	r3, [pc, #460]	@ (8006408 <HAL_RCC_GetSysClockFreq+0x208>)
 800623c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800623e:	e0d8      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006240:	4b6f      	ldr	r3, [pc, #444]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006248:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800624a:	4b6d      	ldr	r3, [pc, #436]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d063      	beq.n	800631e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006256:	4b6a      	ldr	r3, [pc, #424]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	099b      	lsrs	r3, r3, #6
 800625c:	2200      	movs	r2, #0
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006260:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006268:	633b      	str	r3, [r7, #48]	@ 0x30
 800626a:	2300      	movs	r3, #0
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006272:	4622      	mov	r2, r4
 8006274:	462b      	mov	r3, r5
 8006276:	f04f 0000 	mov.w	r0, #0
 800627a:	f04f 0100 	mov.w	r1, #0
 800627e:	0159      	lsls	r1, r3, #5
 8006280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006284:	0150      	lsls	r0, r2, #5
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4621      	mov	r1, r4
 800628c:	1a51      	subs	r1, r2, r1
 800628e:	6139      	str	r1, [r7, #16]
 8006290:	4629      	mov	r1, r5
 8006292:	eb63 0301 	sbc.w	r3, r3, r1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062a4:	4659      	mov	r1, fp
 80062a6:	018b      	lsls	r3, r1, #6
 80062a8:	4651      	mov	r1, sl
 80062aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062ae:	4651      	mov	r1, sl
 80062b0:	018a      	lsls	r2, r1, #6
 80062b2:	4651      	mov	r1, sl
 80062b4:	ebb2 0801 	subs.w	r8, r2, r1
 80062b8:	4659      	mov	r1, fp
 80062ba:	eb63 0901 	sbc.w	r9, r3, r1
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062d2:	4690      	mov	r8, r2
 80062d4:	4699      	mov	r9, r3
 80062d6:	4623      	mov	r3, r4
 80062d8:	eb18 0303 	adds.w	r3, r8, r3
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	462b      	mov	r3, r5
 80062e0:	eb49 0303 	adc.w	r3, r9, r3
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062f2:	4629      	mov	r1, r5
 80062f4:	024b      	lsls	r3, r1, #9
 80062f6:	4621      	mov	r1, r4
 80062f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062fc:	4621      	mov	r1, r4
 80062fe:	024a      	lsls	r2, r1, #9
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006306:	2200      	movs	r2, #0
 8006308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800630a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800630c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006310:	f7fa fcba 	bl	8000c88 <__aeabi_uldivmod>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4613      	mov	r3, r2
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800631c:	e058      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631e:	4b38      	ldr	r3, [pc, #224]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	099b      	lsrs	r3, r3, #6
 8006324:	2200      	movs	r2, #0
 8006326:	4618      	mov	r0, r3
 8006328:	4611      	mov	r1, r2
 800632a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	2300      	movs	r3, #0
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
 8006334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006338:	4642      	mov	r2, r8
 800633a:	464b      	mov	r3, r9
 800633c:	f04f 0000 	mov.w	r0, #0
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	0159      	lsls	r1, r3, #5
 8006346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800634a:	0150      	lsls	r0, r2, #5
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4641      	mov	r1, r8
 8006352:	ebb2 0a01 	subs.w	sl, r2, r1
 8006356:	4649      	mov	r1, r9
 8006358:	eb63 0b01 	sbc.w	fp, r3, r1
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800636c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006370:	ebb2 040a 	subs.w	r4, r2, sl
 8006374:	eb63 050b 	sbc.w	r5, r3, fp
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	00eb      	lsls	r3, r5, #3
 8006382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006386:	00e2      	lsls	r2, r4, #3
 8006388:	4614      	mov	r4, r2
 800638a:	461d      	mov	r5, r3
 800638c:	4643      	mov	r3, r8
 800638e:	18e3      	adds	r3, r4, r3
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	464b      	mov	r3, r9
 8006394:	eb45 0303 	adc.w	r3, r5, r3
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063a6:	4629      	mov	r1, r5
 80063a8:	028b      	lsls	r3, r1, #10
 80063aa:	4621      	mov	r1, r4
 80063ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063b0:	4621      	mov	r1, r4
 80063b2:	028a      	lsls	r2, r1, #10
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ba:	2200      	movs	r2, #0
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	61fa      	str	r2, [r7, #28]
 80063c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c4:	f7fa fc60 	bl	8000c88 <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4613      	mov	r3, r2
 80063ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80063d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80063e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063ea:	e002      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063ec:	4b05      	ldr	r3, [pc, #20]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x204>)
 80063ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3750      	adds	r7, #80	@ 0x50
 80063f8:	46bd      	mov	sp, r7
 80063fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063fe:	bf00      	nop
 8006400:	40023800 	.word	0x40023800
 8006404:	00f42400 	.word	0x00f42400
 8006408:	007a1200 	.word	0x007a1200

0800640c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006410:	4b03      	ldr	r3, [pc, #12]	@ (8006420 <HAL_RCC_GetHCLKFreq+0x14>)
 8006412:	681b      	ldr	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000000 	.word	0x20000000

08006424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006428:	f7ff fff0 	bl	800640c <HAL_RCC_GetHCLKFreq>
 800642c:	4602      	mov	r2, r0
 800642e:	4b05      	ldr	r3, [pc, #20]	@ (8006444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	0a9b      	lsrs	r3, r3, #10
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	4903      	ldr	r1, [pc, #12]	@ (8006448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800643a:	5ccb      	ldrb	r3, [r1, r3]
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40023800 	.word	0x40023800
 8006448:	0800bdb0 	.word	0x0800bdb0

0800644c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006450:	f7ff ffdc 	bl	800640c <HAL_RCC_GetHCLKFreq>
 8006454:	4602      	mov	r2, r0
 8006456:	4b05      	ldr	r3, [pc, #20]	@ (800646c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	0b5b      	lsrs	r3, r3, #13
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	4903      	ldr	r1, [pc, #12]	@ (8006470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006462:	5ccb      	ldrb	r3, [r1, r3]
 8006464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006468:	4618      	mov	r0, r3
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40023800 	.word	0x40023800
 8006470:	0800bdb0 	.word	0x0800bdb0

08006474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d012      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800649c:	4b69      	ldr	r3, [pc, #420]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4a68      	ldr	r2, [pc, #416]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80064a6:	6093      	str	r3, [r2, #8]
 80064a8:	4b66      	ldr	r3, [pc, #408]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b0:	4964      	ldr	r1, [pc, #400]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80064be:	2301      	movs	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d017      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064dc:	4959      	ldr	r1, [pc, #356]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ec:	d101      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80064ee:	2301      	movs	r3, #1
 80064f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80064fa:	2301      	movs	r3, #1
 80064fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d017      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800650a:	4b4e      	ldr	r3, [pc, #312]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006510:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	494a      	ldr	r1, [pc, #296]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006528:	d101      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800652a:	2301      	movs	r3, #1
 800652c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006536:	2301      	movs	r3, #1
 8006538:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006546:	2301      	movs	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 808b 	beq.w	800666e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006558:	4b3a      	ldr	r3, [pc, #232]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655c:	4a39      	ldr	r2, [pc, #228]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006562:	6413      	str	r3, [r2, #64]	@ 0x40
 8006564:	4b37      	ldr	r3, [pc, #220]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006570:	4b35      	ldr	r3, [pc, #212]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a34      	ldr	r2, [pc, #208]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800657a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657c:	f7fd fbf8 	bl	8003d70 <HAL_GetTick>
 8006580:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006584:	f7fd fbf4 	bl	8003d70 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	@ 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e357      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006596:	4b2c      	ldr	r3, [pc, #176]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065a2:	4b28      	ldr	r3, [pc, #160]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d035      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d02e      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065c0:	4b20      	ldr	r3, [pc, #128]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065da:	4a1a      	ldr	r2, [pc, #104]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80065e2:	4a18      	ldr	r2, [pc, #96]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065e8:	4b16      	ldr	r3, [pc, #88]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d114      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fd fbbc 	bl	8003d70 <HAL_GetTick>
 80065f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065fa:	e00a      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065fc:	f7fd fbb8 	bl	8003d70 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e319      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006612:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0ee      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800662a:	d111      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800662c:	4b05      	ldr	r3, [pc, #20]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006638:	4b04      	ldr	r3, [pc, #16]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800663a:	400b      	ands	r3, r1
 800663c:	4901      	ldr	r1, [pc, #4]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
 8006642:	e00b      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006644:	40023800 	.word	0x40023800
 8006648:	40007000 	.word	0x40007000
 800664c:	0ffffcff 	.word	0x0ffffcff
 8006650:	4baa      	ldr	r3, [pc, #680]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4aa9      	ldr	r2, [pc, #676]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006656:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800665a:	6093      	str	r3, [r2, #8]
 800665c:	4ba7      	ldr	r3, [pc, #668]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800665e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006668:	49a4      	ldr	r1, [pc, #656]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800666a:	4313      	orrs	r3, r2
 800666c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b00      	cmp	r3, #0
 8006678:	d010      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800667a:	4ba0      	ldr	r3, [pc, #640]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800667c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006680:	4a9e      	ldr	r2, [pc, #632]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006686:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800668a:	4b9c      	ldr	r3, [pc, #624]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800668c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	4999      	ldr	r1, [pc, #612]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066a8:	4b94      	ldr	r3, [pc, #592]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b6:	4991      	ldr	r1, [pc, #580]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066ca:	4b8c      	ldr	r3, [pc, #560]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066d8:	4988      	ldr	r1, [pc, #544]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066ec:	4b83      	ldr	r3, [pc, #524]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066fa:	4980      	ldr	r1, [pc, #512]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800670e:	4b7b      	ldr	r3, [pc, #492]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006714:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671c:	4977      	ldr	r1, [pc, #476]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800671e:	4313      	orrs	r3, r2
 8006720:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006730:	4b72      	ldr	r3, [pc, #456]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006736:	f023 0203 	bic.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673e:	496f      	ldr	r1, [pc, #444]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006740:	4313      	orrs	r3, r2
 8006742:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006752:	4b6a      	ldr	r3, [pc, #424]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006758:	f023 020c 	bic.w	r2, r3, #12
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006760:	4966      	ldr	r1, [pc, #408]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006774:	4b61      	ldr	r3, [pc, #388]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006782:	495e      	ldr	r1, [pc, #376]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006796:	4b59      	ldr	r3, [pc, #356]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a4:	4955      	ldr	r1, [pc, #340]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067b8:	4b50      	ldr	r3, [pc, #320]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c6:	494d      	ldr	r1, [pc, #308]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80067da:	4b48      	ldr	r3, [pc, #288]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e8:	4944      	ldr	r1, [pc, #272]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80067fc:	4b3f      	ldr	r3, [pc, #252]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006802:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800680a:	493c      	ldr	r1, [pc, #240]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800681e:	4b37      	ldr	r3, [pc, #220]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006824:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800682c:	4933      	ldr	r1, [pc, #204]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006840:	4b2e      	ldr	r3, [pc, #184]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006846:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800684e:	492b      	ldr	r1, [pc, #172]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d011      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006862:	4b26      	ldr	r3, [pc, #152]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006868:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006870:	4922      	ldr	r1, [pc, #136]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800687c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006880:	d101      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006882:	2301      	movs	r3, #1
 8006884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006892:	2301      	movs	r3, #1
 8006894:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068a2:	4b16      	ldr	r3, [pc, #88]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b0:	4912      	ldr	r1, [pc, #72]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068c4:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068d4:	4909      	ldr	r1, [pc, #36]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d006      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 80d9 	beq.w	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068f0:	4b02      	ldr	r3, [pc, #8]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a01      	ldr	r2, [pc, #4]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068fa:	e001      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80068fc:	40023800 	.word	0x40023800
 8006900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006902:	f7fd fa35 	bl	8003d70 <HAL_GetTick>
 8006906:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006908:	e008      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800690a:	f7fd fa31 	bl	8003d70 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b64      	cmp	r3, #100	@ 0x64
 8006916:	d901      	bls.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e194      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800691c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f0      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d021      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11d      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800693c:	4b64      	ldr	r3, [pc, #400]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800693e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006942:	0c1b      	lsrs	r3, r3, #16
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800694a:	4b61      	ldr	r3, [pc, #388]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800694c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006950:	0e1b      	lsrs	r3, r3, #24
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	019a      	lsls	r2, r3, #6
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	431a      	orrs	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	061b      	lsls	r3, r3, #24
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	071b      	lsls	r3, r3, #28
 8006970:	4957      	ldr	r1, [pc, #348]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006988:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800698c:	d00a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006996:	2b00      	cmp	r3, #0
 8006998:	d02e      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069a2:	d129      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069a4:	4b4a      	ldr	r3, [pc, #296]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069aa:	0c1b      	lsrs	r3, r3, #16
 80069ac:	f003 0303 	and.w	r3, r3, #3
 80069b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069b2:	4b47      	ldr	r3, [pc, #284]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b8:	0f1b      	lsrs	r3, r3, #28
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	019a      	lsls	r2, r3, #6
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	431a      	orrs	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	071b      	lsls	r3, r3, #28
 80069d8:	493d      	ldr	r1, [pc, #244]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069e0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069e6:	f023 021f 	bic.w	r2, r3, #31
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	3b01      	subs	r3, #1
 80069f0:	4937      	ldr	r1, [pc, #220]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01d      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a04:	4b32      	ldr	r3, [pc, #200]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0a:	0e1b      	lsrs	r3, r3, #24
 8006a0c:	f003 030f 	and.w	r3, r3, #15
 8006a10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a12:	4b2f      	ldr	r3, [pc, #188]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a18:	0f1b      	lsrs	r3, r3, #28
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	019a      	lsls	r2, r3, #6
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	431a      	orrs	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	071b      	lsls	r3, r3, #28
 8006a38:	4925      	ldr	r1, [pc, #148]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d011      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	019a      	lsls	r2, r3, #6
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	061b      	lsls	r3, r3, #24
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	071b      	lsls	r3, r3, #28
 8006a68:	4919      	ldr	r1, [pc, #100]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a70:	4b17      	ldr	r3, [pc, #92]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a16      	ldr	r2, [pc, #88]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7c:	f7fd f978 	bl	8003d70 <HAL_GetTick>
 8006a80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a84:	f7fd f974 	bl	8003d70 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b64      	cmp	r3, #100	@ 0x64
 8006a90:	d901      	bls.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e0d7      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a96:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	f040 80cd 	bne.w	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006aaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a08      	ldr	r2, [pc, #32]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab6:	f7fd f95b 	bl	8003d70 <HAL_GetTick>
 8006aba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006abc:	e00a      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006abe:	f7fd f957 	bl	8003d70 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b64      	cmp	r3, #100	@ 0x64
 8006aca:	d903      	bls.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e0ba      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006ad0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ae0:	d0ed      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d009      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d02e      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d12a      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b0a:	4b51      	ldr	r3, [pc, #324]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b10:	0c1b      	lsrs	r3, r3, #16
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b18:	4b4d      	ldr	r3, [pc, #308]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	0f1b      	lsrs	r3, r3, #28
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	019a      	lsls	r2, r3, #6
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	061b      	lsls	r3, r3, #24
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	071b      	lsls	r3, r3, #28
 8006b3e:	4944      	ldr	r1, [pc, #272]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b46:	4b42      	ldr	r3, [pc, #264]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b4c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b54:	3b01      	subs	r3, #1
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	493d      	ldr	r1, [pc, #244]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d022      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b74:	d11d      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b76:	4b36      	ldr	r3, [pc, #216]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7c:	0e1b      	lsrs	r3, r3, #24
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b84:	4b32      	ldr	r3, [pc, #200]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b8a:	0f1b      	lsrs	r3, r3, #28
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	019a      	lsls	r2, r3, #6
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	041b      	lsls	r3, r3, #16
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	061b      	lsls	r3, r3, #24
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	071b      	lsls	r3, r3, #28
 8006baa:	4929      	ldr	r1, [pc, #164]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d028      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bbe:	4b24      	ldr	r3, [pc, #144]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc4:	0e1b      	lsrs	r3, r3, #24
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006bcc:	4b20      	ldr	r3, [pc, #128]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd2:	0c1b      	lsrs	r3, r3, #16
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	019a      	lsls	r2, r3, #6
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	431a      	orrs	r2, r3
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	061b      	lsls	r3, r3, #24
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	071b      	lsls	r3, r3, #28
 8006bf2:	4917      	ldr	r1, [pc, #92]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006bfa:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	4911      	ldr	r1, [pc, #68]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c10:	4b0f      	ldr	r3, [pc, #60]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a0e      	ldr	r2, [pc, #56]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c1c:	f7fd f8a8 	bl	8003d70 <HAL_GetTick>
 8006c20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c24:	f7fd f8a4 	bl	8003d70 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b64      	cmp	r3, #100	@ 0x64
 8006c30:	d901      	bls.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e007      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c36:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c42:	d1ef      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	40023800 	.word	0x40023800

08006c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e040      	b.n	8006ce8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fc fe1e 	bl	80038b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2224      	movs	r2, #36	@ 0x24
 8006c80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0201 	bic.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fb16 	bl	80072cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8af 	bl	8006e04 <UART_SetConfig>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e01b      	b.n	8006ce8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fb95 	bl	8007410 <UART_CheckIdleState>
 8006ce6:	4603      	mov	r3, r0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08a      	sub	sp, #40	@ 0x28
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	d177      	bne.n	8006df8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_UART_Transmit+0x24>
 8006d0e:	88fb      	ldrh	r3, [r7, #6]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e070      	b.n	8006dfa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2221      	movs	r2, #33	@ 0x21
 8006d24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d26:	f7fd f823 	bl	8003d70 <HAL_GetTick>
 8006d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	88fa      	ldrh	r2, [r7, #6]
 8006d38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d44:	d108      	bne.n	8006d58 <HAL_UART_Transmit+0x68>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e003      	b.n	8006d60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d60:	e02f      	b.n	8006dc2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2180      	movs	r1, #128	@ 0x80
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fba6 	bl	80074be <UART_WaitOnFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e03b      	b.n	8006dfa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10b      	bne.n	8006da0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	3302      	adds	r3, #2
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	e007      	b.n	8006db0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	781a      	ldrb	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	3301      	adds	r3, #1
 8006dae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1c9      	bne.n	8006d62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2140      	movs	r1, #64	@ 0x40
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 fb70 	bl	80074be <UART_WaitOnFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e005      	b.n	8006dfa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2220      	movs	r2, #32
 8006df2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3720      	adds	r7, #32
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4ba6      	ldr	r3, [pc, #664]	@ (80070c8 <UART_SetConfig+0x2c4>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	6979      	ldr	r1, [r7, #20]
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a94      	ldr	r2, [pc, #592]	@ (80070cc <UART_SetConfig+0x2c8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d120      	bne.n	8006ec2 <UART_SetConfig+0xbe>
 8006e80:	4b93      	ldr	r3, [pc, #588]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8006e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d816      	bhi.n	8006ebc <UART_SetConfig+0xb8>
 8006e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e94 <UART_SetConfig+0x90>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006eb1 	.word	0x08006eb1
 8006e9c:	08006eab 	.word	0x08006eab
 8006ea0:	08006eb7 	.word	0x08006eb7
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	e150      	b.n	800714c <UART_SetConfig+0x348>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	77fb      	strb	r3, [r7, #31]
 8006eae:	e14d      	b.n	800714c <UART_SetConfig+0x348>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	e14a      	b.n	800714c <UART_SetConfig+0x348>
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	77fb      	strb	r3, [r7, #31]
 8006eba:	e147      	b.n	800714c <UART_SetConfig+0x348>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	e144      	b.n	800714c <UART_SetConfig+0x348>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a83      	ldr	r2, [pc, #524]	@ (80070d4 <UART_SetConfig+0x2d0>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d132      	bne.n	8006f32 <UART_SetConfig+0x12e>
 8006ecc:	4b80      	ldr	r3, [pc, #512]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	2b0c      	cmp	r3, #12
 8006ed8:	d828      	bhi.n	8006f2c <UART_SetConfig+0x128>
 8006eda:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee0 <UART_SetConfig+0xdc>)
 8006edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee0:	08006f15 	.word	0x08006f15
 8006ee4:	08006f2d 	.word	0x08006f2d
 8006ee8:	08006f2d 	.word	0x08006f2d
 8006eec:	08006f2d 	.word	0x08006f2d
 8006ef0:	08006f21 	.word	0x08006f21
 8006ef4:	08006f2d 	.word	0x08006f2d
 8006ef8:	08006f2d 	.word	0x08006f2d
 8006efc:	08006f2d 	.word	0x08006f2d
 8006f00:	08006f1b 	.word	0x08006f1b
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f2d 	.word	0x08006f2d
 8006f10:	08006f27 	.word	0x08006f27
 8006f14:	2300      	movs	r3, #0
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e118      	b.n	800714c <UART_SetConfig+0x348>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	e115      	b.n	800714c <UART_SetConfig+0x348>
 8006f20:	2304      	movs	r3, #4
 8006f22:	77fb      	strb	r3, [r7, #31]
 8006f24:	e112      	b.n	800714c <UART_SetConfig+0x348>
 8006f26:	2308      	movs	r3, #8
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	e10f      	b.n	800714c <UART_SetConfig+0x348>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	77fb      	strb	r3, [r7, #31]
 8006f30:	e10c      	b.n	800714c <UART_SetConfig+0x348>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a68      	ldr	r2, [pc, #416]	@ (80070d8 <UART_SetConfig+0x2d4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d120      	bne.n	8006f7e <UART_SetConfig+0x17a>
 8006f3c:	4b64      	ldr	r3, [pc, #400]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8006f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f42:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f46:	2b30      	cmp	r3, #48	@ 0x30
 8006f48:	d013      	beq.n	8006f72 <UART_SetConfig+0x16e>
 8006f4a:	2b30      	cmp	r3, #48	@ 0x30
 8006f4c:	d814      	bhi.n	8006f78 <UART_SetConfig+0x174>
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d009      	beq.n	8006f66 <UART_SetConfig+0x162>
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d810      	bhi.n	8006f78 <UART_SetConfig+0x174>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <UART_SetConfig+0x15c>
 8006f5a:	2b10      	cmp	r3, #16
 8006f5c:	d006      	beq.n	8006f6c <UART_SetConfig+0x168>
 8006f5e:	e00b      	b.n	8006f78 <UART_SetConfig+0x174>
 8006f60:	2300      	movs	r3, #0
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e0f2      	b.n	800714c <UART_SetConfig+0x348>
 8006f66:	2302      	movs	r3, #2
 8006f68:	77fb      	strb	r3, [r7, #31]
 8006f6a:	e0ef      	b.n	800714c <UART_SetConfig+0x348>
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	77fb      	strb	r3, [r7, #31]
 8006f70:	e0ec      	b.n	800714c <UART_SetConfig+0x348>
 8006f72:	2308      	movs	r3, #8
 8006f74:	77fb      	strb	r3, [r7, #31]
 8006f76:	e0e9      	b.n	800714c <UART_SetConfig+0x348>
 8006f78:	2310      	movs	r3, #16
 8006f7a:	77fb      	strb	r3, [r7, #31]
 8006f7c:	e0e6      	b.n	800714c <UART_SetConfig+0x348>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a56      	ldr	r2, [pc, #344]	@ (80070dc <UART_SetConfig+0x2d8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d120      	bne.n	8006fca <UART_SetConfig+0x1c6>
 8006f88:	4b51      	ldr	r3, [pc, #324]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f92:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f94:	d013      	beq.n	8006fbe <UART_SetConfig+0x1ba>
 8006f96:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f98:	d814      	bhi.n	8006fc4 <UART_SetConfig+0x1c0>
 8006f9a:	2b80      	cmp	r3, #128	@ 0x80
 8006f9c:	d009      	beq.n	8006fb2 <UART_SetConfig+0x1ae>
 8006f9e:	2b80      	cmp	r3, #128	@ 0x80
 8006fa0:	d810      	bhi.n	8006fc4 <UART_SetConfig+0x1c0>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <UART_SetConfig+0x1a8>
 8006fa6:	2b40      	cmp	r3, #64	@ 0x40
 8006fa8:	d006      	beq.n	8006fb8 <UART_SetConfig+0x1b4>
 8006faa:	e00b      	b.n	8006fc4 <UART_SetConfig+0x1c0>
 8006fac:	2300      	movs	r3, #0
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e0cc      	b.n	800714c <UART_SetConfig+0x348>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	77fb      	strb	r3, [r7, #31]
 8006fb6:	e0c9      	b.n	800714c <UART_SetConfig+0x348>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	77fb      	strb	r3, [r7, #31]
 8006fbc:	e0c6      	b.n	800714c <UART_SetConfig+0x348>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	77fb      	strb	r3, [r7, #31]
 8006fc2:	e0c3      	b.n	800714c <UART_SetConfig+0x348>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	77fb      	strb	r3, [r7, #31]
 8006fc8:	e0c0      	b.n	800714c <UART_SetConfig+0x348>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a44      	ldr	r2, [pc, #272]	@ (80070e0 <UART_SetConfig+0x2dc>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d125      	bne.n	8007020 <UART_SetConfig+0x21c>
 8006fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8006fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fe2:	d017      	beq.n	8007014 <UART_SetConfig+0x210>
 8006fe4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fe8:	d817      	bhi.n	800701a <UART_SetConfig+0x216>
 8006fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fee:	d00b      	beq.n	8007008 <UART_SetConfig+0x204>
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ff4:	d811      	bhi.n	800701a <UART_SetConfig+0x216>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <UART_SetConfig+0x1fe>
 8006ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ffe:	d006      	beq.n	800700e <UART_SetConfig+0x20a>
 8007000:	e00b      	b.n	800701a <UART_SetConfig+0x216>
 8007002:	2300      	movs	r3, #0
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	e0a1      	b.n	800714c <UART_SetConfig+0x348>
 8007008:	2302      	movs	r3, #2
 800700a:	77fb      	strb	r3, [r7, #31]
 800700c:	e09e      	b.n	800714c <UART_SetConfig+0x348>
 800700e:	2304      	movs	r3, #4
 8007010:	77fb      	strb	r3, [r7, #31]
 8007012:	e09b      	b.n	800714c <UART_SetConfig+0x348>
 8007014:	2308      	movs	r3, #8
 8007016:	77fb      	strb	r3, [r7, #31]
 8007018:	e098      	b.n	800714c <UART_SetConfig+0x348>
 800701a:	2310      	movs	r3, #16
 800701c:	77fb      	strb	r3, [r7, #31]
 800701e:	e095      	b.n	800714c <UART_SetConfig+0x348>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a2f      	ldr	r2, [pc, #188]	@ (80070e4 <UART_SetConfig+0x2e0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d125      	bne.n	8007076 <UART_SetConfig+0x272>
 800702a:	4b29      	ldr	r3, [pc, #164]	@ (80070d0 <UART_SetConfig+0x2cc>)
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007030:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007038:	d017      	beq.n	800706a <UART_SetConfig+0x266>
 800703a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800703e:	d817      	bhi.n	8007070 <UART_SetConfig+0x26c>
 8007040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007044:	d00b      	beq.n	800705e <UART_SetConfig+0x25a>
 8007046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800704a:	d811      	bhi.n	8007070 <UART_SetConfig+0x26c>
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <UART_SetConfig+0x254>
 8007050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007054:	d006      	beq.n	8007064 <UART_SetConfig+0x260>
 8007056:	e00b      	b.n	8007070 <UART_SetConfig+0x26c>
 8007058:	2301      	movs	r3, #1
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e076      	b.n	800714c <UART_SetConfig+0x348>
 800705e:	2302      	movs	r3, #2
 8007060:	77fb      	strb	r3, [r7, #31]
 8007062:	e073      	b.n	800714c <UART_SetConfig+0x348>
 8007064:	2304      	movs	r3, #4
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	e070      	b.n	800714c <UART_SetConfig+0x348>
 800706a:	2308      	movs	r3, #8
 800706c:	77fb      	strb	r3, [r7, #31]
 800706e:	e06d      	b.n	800714c <UART_SetConfig+0x348>
 8007070:	2310      	movs	r3, #16
 8007072:	77fb      	strb	r3, [r7, #31]
 8007074:	e06a      	b.n	800714c <UART_SetConfig+0x348>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1b      	ldr	r2, [pc, #108]	@ (80070e8 <UART_SetConfig+0x2e4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d138      	bne.n	80070f2 <UART_SetConfig+0x2ee>
 8007080:	4b13      	ldr	r3, [pc, #76]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8007082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007086:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800708a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800708e:	d017      	beq.n	80070c0 <UART_SetConfig+0x2bc>
 8007090:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007094:	d82a      	bhi.n	80070ec <UART_SetConfig+0x2e8>
 8007096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800709a:	d00b      	beq.n	80070b4 <UART_SetConfig+0x2b0>
 800709c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a0:	d824      	bhi.n	80070ec <UART_SetConfig+0x2e8>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <UART_SetConfig+0x2aa>
 80070a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070aa:	d006      	beq.n	80070ba <UART_SetConfig+0x2b6>
 80070ac:	e01e      	b.n	80070ec <UART_SetConfig+0x2e8>
 80070ae:	2300      	movs	r3, #0
 80070b0:	77fb      	strb	r3, [r7, #31]
 80070b2:	e04b      	b.n	800714c <UART_SetConfig+0x348>
 80070b4:	2302      	movs	r3, #2
 80070b6:	77fb      	strb	r3, [r7, #31]
 80070b8:	e048      	b.n	800714c <UART_SetConfig+0x348>
 80070ba:	2304      	movs	r3, #4
 80070bc:	77fb      	strb	r3, [r7, #31]
 80070be:	e045      	b.n	800714c <UART_SetConfig+0x348>
 80070c0:	2308      	movs	r3, #8
 80070c2:	77fb      	strb	r3, [r7, #31]
 80070c4:	e042      	b.n	800714c <UART_SetConfig+0x348>
 80070c6:	bf00      	nop
 80070c8:	efff69f3 	.word	0xefff69f3
 80070cc:	40011000 	.word	0x40011000
 80070d0:	40023800 	.word	0x40023800
 80070d4:	40004400 	.word	0x40004400
 80070d8:	40004800 	.word	0x40004800
 80070dc:	40004c00 	.word	0x40004c00
 80070e0:	40005000 	.word	0x40005000
 80070e4:	40011400 	.word	0x40011400
 80070e8:	40007800 	.word	0x40007800
 80070ec:	2310      	movs	r3, #16
 80070ee:	77fb      	strb	r3, [r7, #31]
 80070f0:	e02c      	b.n	800714c <UART_SetConfig+0x348>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a72      	ldr	r2, [pc, #456]	@ (80072c0 <UART_SetConfig+0x4bc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d125      	bne.n	8007148 <UART_SetConfig+0x344>
 80070fc:	4b71      	ldr	r3, [pc, #452]	@ (80072c4 <UART_SetConfig+0x4c0>)
 80070fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007102:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007106:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800710a:	d017      	beq.n	800713c <UART_SetConfig+0x338>
 800710c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007110:	d817      	bhi.n	8007142 <UART_SetConfig+0x33e>
 8007112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007116:	d00b      	beq.n	8007130 <UART_SetConfig+0x32c>
 8007118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800711c:	d811      	bhi.n	8007142 <UART_SetConfig+0x33e>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <UART_SetConfig+0x326>
 8007122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007126:	d006      	beq.n	8007136 <UART_SetConfig+0x332>
 8007128:	e00b      	b.n	8007142 <UART_SetConfig+0x33e>
 800712a:	2300      	movs	r3, #0
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e00d      	b.n	800714c <UART_SetConfig+0x348>
 8007130:	2302      	movs	r3, #2
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e00a      	b.n	800714c <UART_SetConfig+0x348>
 8007136:	2304      	movs	r3, #4
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e007      	b.n	800714c <UART_SetConfig+0x348>
 800713c:	2308      	movs	r3, #8
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	e004      	b.n	800714c <UART_SetConfig+0x348>
 8007142:	2310      	movs	r3, #16
 8007144:	77fb      	strb	r3, [r7, #31]
 8007146:	e001      	b.n	800714c <UART_SetConfig+0x348>
 8007148:	2310      	movs	r3, #16
 800714a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007154:	d15b      	bne.n	800720e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007156:	7ffb      	ldrb	r3, [r7, #31]
 8007158:	2b08      	cmp	r3, #8
 800715a:	d828      	bhi.n	80071ae <UART_SetConfig+0x3aa>
 800715c:	a201      	add	r2, pc, #4	@ (adr r2, 8007164 <UART_SetConfig+0x360>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	08007189 	.word	0x08007189
 8007168:	08007191 	.word	0x08007191
 800716c:	08007199 	.word	0x08007199
 8007170:	080071af 	.word	0x080071af
 8007174:	0800719f 	.word	0x0800719f
 8007178:	080071af 	.word	0x080071af
 800717c:	080071af 	.word	0x080071af
 8007180:	080071af 	.word	0x080071af
 8007184:	080071a7 	.word	0x080071a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007188:	f7ff f94c 	bl	8006424 <HAL_RCC_GetPCLK1Freq>
 800718c:	61b8      	str	r0, [r7, #24]
        break;
 800718e:	e013      	b.n	80071b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007190:	f7ff f95c 	bl	800644c <HAL_RCC_GetPCLK2Freq>
 8007194:	61b8      	str	r0, [r7, #24]
        break;
 8007196:	e00f      	b.n	80071b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007198:	4b4b      	ldr	r3, [pc, #300]	@ (80072c8 <UART_SetConfig+0x4c4>)
 800719a:	61bb      	str	r3, [r7, #24]
        break;
 800719c:	e00c      	b.n	80071b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800719e:	f7ff f82f 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 80071a2:	61b8      	str	r0, [r7, #24]
        break;
 80071a4:	e008      	b.n	80071b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071aa:	61bb      	str	r3, [r7, #24]
        break;
 80071ac:	e004      	b.n	80071b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	77bb      	strb	r3, [r7, #30]
        break;
 80071b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d074      	beq.n	80072a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	005a      	lsls	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b0f      	cmp	r3, #15
 80071d8:	d916      	bls.n	8007208 <UART_SetConfig+0x404>
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071e0:	d212      	bcs.n	8007208 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f023 030f 	bic.w	r3, r3, #15
 80071ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	89fb      	ldrh	r3, [r7, #14]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	89fa      	ldrh	r2, [r7, #14]
 8007204:	60da      	str	r2, [r3, #12]
 8007206:	e04f      	b.n	80072a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	77bb      	strb	r3, [r7, #30]
 800720c:	e04c      	b.n	80072a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800720e:	7ffb      	ldrb	r3, [r7, #31]
 8007210:	2b08      	cmp	r3, #8
 8007212:	d828      	bhi.n	8007266 <UART_SetConfig+0x462>
 8007214:	a201      	add	r2, pc, #4	@ (adr r2, 800721c <UART_SetConfig+0x418>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007241 	.word	0x08007241
 8007220:	08007249 	.word	0x08007249
 8007224:	08007251 	.word	0x08007251
 8007228:	08007267 	.word	0x08007267
 800722c:	08007257 	.word	0x08007257
 8007230:	08007267 	.word	0x08007267
 8007234:	08007267 	.word	0x08007267
 8007238:	08007267 	.word	0x08007267
 800723c:	0800725f 	.word	0x0800725f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007240:	f7ff f8f0 	bl	8006424 <HAL_RCC_GetPCLK1Freq>
 8007244:	61b8      	str	r0, [r7, #24]
        break;
 8007246:	e013      	b.n	8007270 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007248:	f7ff f900 	bl	800644c <HAL_RCC_GetPCLK2Freq>
 800724c:	61b8      	str	r0, [r7, #24]
        break;
 800724e:	e00f      	b.n	8007270 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007250:	4b1d      	ldr	r3, [pc, #116]	@ (80072c8 <UART_SetConfig+0x4c4>)
 8007252:	61bb      	str	r3, [r7, #24]
        break;
 8007254:	e00c      	b.n	8007270 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007256:	f7fe ffd3 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 800725a:	61b8      	str	r0, [r7, #24]
        break;
 800725c:	e008      	b.n	8007270 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800725e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007262:	61bb      	str	r3, [r7, #24]
        break;
 8007264:	e004      	b.n	8007270 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	77bb      	strb	r3, [r7, #30]
        break;
 800726e:	bf00      	nop
    }

    if (pclk != 0U)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d018      	beq.n	80072a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	085a      	lsrs	r2, r3, #1
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	441a      	add	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	fbb2 f3f3 	udiv	r3, r2, r3
 8007288:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b0f      	cmp	r3, #15
 800728e:	d909      	bls.n	80072a4 <UART_SetConfig+0x4a0>
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007296:	d205      	bcs.n	80072a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60da      	str	r2, [r3, #12]
 80072a2:	e001      	b.n	80072a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3720      	adds	r7, #32
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	40007c00 	.word	0x40007c00
 80072c4:	40023800 	.word	0x40023800
 80072c8:	00f42400 	.word	0x00f42400

080072cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01a      	beq.n	80073e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ca:	d10a      	bne.n	80073e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	605a      	str	r2, [r3, #4]
  }
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08c      	sub	sp, #48	@ 0x30
 8007414:	af02      	add	r7, sp, #8
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007420:	f7fc fca6 	bl	8003d70 <HAL_GetTick>
 8007424:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b08      	cmp	r3, #8
 8007432:	d12e      	bne.n	8007492 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	2200      	movs	r2, #0
 800743e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f83b 	bl	80074be <UART_WaitOnFlagUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d021      	beq.n	8007492 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	60fb      	str	r3, [r7, #12]
   return(result);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007462:	623b      	str	r3, [r7, #32]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	69b9      	ldr	r1, [r7, #24]
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	617b      	str	r3, [r7, #20]
   return(result);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e6      	bne.n	800744e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e011      	b.n	80074b6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3728      	adds	r7, #40	@ 0x28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	4613      	mov	r3, r2
 80074cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ce:	e04f      	b.n	8007570 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d6:	d04b      	beq.n	8007570 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d8:	f7fc fc4a 	bl	8003d70 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d302      	bcc.n	80074ee <UART_WaitOnFlagUntilTimeout+0x30>
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e04e      	b.n	8007590 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d037      	beq.n	8007570 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b80      	cmp	r3, #128	@ 0x80
 8007504:	d034      	beq.n	8007570 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b40      	cmp	r3, #64	@ 0x40
 800750a:	d031      	beq.n	8007570 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b08      	cmp	r3, #8
 8007518:	d110      	bne.n	800753c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2208      	movs	r2, #8
 8007520:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 f838 	bl	8007598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2208      	movs	r2, #8
 800752c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e029      	b.n	8007590 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800754a:	d111      	bne.n	8007570 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007554:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f81e 	bl	8007598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2220      	movs	r2, #32
 8007560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e00f      	b.n	8007590 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69da      	ldr	r2, [r3, #28]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4013      	ands	r3, r2
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	429a      	cmp	r2, r3
 800757e:	bf0c      	ite	eq
 8007580:	2301      	moveq	r3, #1
 8007582:	2300      	movne	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	429a      	cmp	r2, r3
 800758c:	d0a0      	beq.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b095      	sub	sp, #84	@ 0x54
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075be:	643b      	str	r3, [r7, #64]	@ 0x40
 80075c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e6      	bne.n	80075a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3308      	adds	r3, #8
 80075d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3308      	adds	r3, #8
 80075f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e5      	bne.n	80075d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760a:	2b01      	cmp	r3, #1
 800760c:	d118      	bne.n	8007640 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	60bb      	str	r3, [r7, #8]
   return(result);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f023 0310 	bic.w	r3, r3, #16
 8007622:	647b      	str	r3, [r7, #68]	@ 0x44
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6979      	ldr	r1, [r7, #20]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	613b      	str	r3, [r7, #16]
   return(result);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e6      	bne.n	800760e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007654:	bf00      	nop
 8007656:	3754      	adds	r7, #84	@ 0x54
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007660:	b084      	sub	sp, #16
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	f107 001c 	add.w	r0, r7, #28
 800766e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007672:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007676:	2b01      	cmp	r3, #1
 8007678:	d121      	bne.n	80076be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	4b21      	ldr	r3, [pc, #132]	@ (8007710 <USB_CoreInit+0xb0>)
 800768c:	4013      	ands	r3, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800769e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d105      	bne.n	80076b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa92 	bl	8007bdc <USB_CoreReset>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]
 80076bc:	e010      	b.n	80076e0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa86 	bl	8007bdc <USB_CoreReset>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80076e0:	7fbb      	ldrb	r3, [r7, #30]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d10b      	bne.n	80076fe <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f043 0206 	orr.w	r2, r3, #6
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f043 0220 	orr.w	r2, r3, #32
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800770a:	b004      	add	sp, #16
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	ffbdffbf 	.word	0xffbdffbf

08007714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f023 0201 	bic.w	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d115      	bne.n	8007784 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007764:	200a      	movs	r0, #10
 8007766:	f7fc fb0f 	bl	8003d88 <HAL_Delay>
      ms += 10U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	330a      	adds	r3, #10
 800776e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa25 	bl	8007bc0 <USB_GetMode>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d01e      	beq.n	80077ba <USB_SetCurrentMode+0x84>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007780:	d9f0      	bls.n	8007764 <USB_SetCurrentMode+0x2e>
 8007782:	e01a      	b.n	80077ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d115      	bne.n	80077b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007796:	200a      	movs	r0, #10
 8007798:	f7fc faf6 	bl	8003d88 <HAL_Delay>
      ms += 10U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	330a      	adds	r3, #10
 80077a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa0c 	bl	8007bc0 <USB_GetMode>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d005      	beq.n	80077ba <USB_SetCurrentMode+0x84>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80077b2:	d9f0      	bls.n	8007796 <USB_SetCurrentMode+0x60>
 80077b4:	e001      	b.n	80077ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e005      	b.n	80077c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80077be:	d101      	bne.n	80077c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d0:	b084      	sub	sp, #16
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077ea:	2300      	movs	r3, #0
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	e009      	b.n	8007804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	3340      	adds	r3, #64	@ 0x40
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3301      	adds	r3, #1
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b0e      	cmp	r3, #14
 8007808:	d9f2      	bls.n	80077f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800780a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800780e:	2b00      	cmp	r3, #0
 8007810:	d11c      	bne.n	800784c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007820:	f043 0302 	orr.w	r3, r3, #2
 8007824:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	e005      	b.n	8007858 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007850:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800785e:	461a      	mov	r2, r3
 8007860:	2300      	movs	r3, #0
 8007862:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007864:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007868:	2b01      	cmp	r3, #1
 800786a:	d10d      	bne.n	8007888 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800786c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f968 	bl	8007b4c <USB_SetDevSpeed>
 800787c:	e008      	b.n	8007890 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f963 	bl	8007b4c <USB_SetDevSpeed>
 8007886:	e003      	b.n	8007890 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007888:	2103      	movs	r1, #3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f95e 	bl	8007b4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007890:	2110      	movs	r1, #16
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f8fa 	bl	8007a8c <USB_FlushTxFifo>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f924 	bl	8007af0 <USB_FlushRxFifo>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b8:	461a      	mov	r2, r3
 80078ba:	2300      	movs	r3, #0
 80078bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c4:	461a      	mov	r2, r3
 80078c6:	2300      	movs	r3, #0
 80078c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d0:	461a      	mov	r2, r3
 80078d2:	2300      	movs	r3, #0
 80078d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	e043      	b.n	8007964 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078f2:	d118      	bne.n	8007926 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007906:	461a      	mov	r2, r3
 8007908:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	e013      	b.n	8007938 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791c:	461a      	mov	r2, r3
 800791e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	e008      	b.n	8007938 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007932:	461a      	mov	r2, r3
 8007934:	2300      	movs	r3, #0
 8007936:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007944:	461a      	mov	r2, r3
 8007946:	2300      	movs	r3, #0
 8007948:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007956:	461a      	mov	r2, r3
 8007958:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800795c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3301      	adds	r3, #1
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007968:	461a      	mov	r2, r3
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	4293      	cmp	r3, r2
 800796e:	d3b5      	bcc.n	80078dc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007970:	2300      	movs	r3, #0
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	e043      	b.n	80079fe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007988:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800798c:	d118      	bne.n	80079c0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a0:	461a      	mov	r2, r3
 80079a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	e013      	b.n	80079d2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b6:	461a      	mov	r2, r3
 80079b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	e008      	b.n	80079d2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079cc:	461a      	mov	r2, r3
 80079ce:	2300      	movs	r3, #0
 80079d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079de:	461a      	mov	r2, r3
 80079e0:	2300      	movs	r3, #0
 80079e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f0:	461a      	mov	r2, r3
 80079f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	3301      	adds	r3, #1
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a02:	461a      	mov	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d3b5      	bcc.n	8007976 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d105      	bne.n	8007a40 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f043 0210 	orr.w	r2, r3, #16
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699a      	ldr	r2, [r3, #24]
 8007a44:	4b0f      	ldr	r3, [pc, #60]	@ (8007a84 <USB_DevInit+0x2b4>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	f043 0208 	orr.w	r2, r3, #8
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d105      	bne.n	8007a74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699a      	ldr	r2, [r3, #24]
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <USB_DevInit+0x2b8>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a80:	b004      	add	sp, #16
 8007a82:	4770      	bx	lr
 8007a84:	803c3800 	.word	0x803c3800
 8007a88:	40000004 	.word	0x40000004

08007a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aa6:	d901      	bls.n	8007aac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e01b      	b.n	8007ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	daf2      	bge.n	8007a9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	019b      	lsls	r3, r3, #6
 8007abc:	f043 0220 	orr.w	r2, r3, #32
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ad0:	d901      	bls.n	8007ad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e006      	b.n	8007ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	d0f0      	beq.n	8007ac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b08:	d901      	bls.n	8007b0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e018      	b.n	8007b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	daf2      	bge.n	8007afc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2210      	movs	r2, #16
 8007b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3301      	adds	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b2c:	d901      	bls.n	8007b32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e006      	b.n	8007b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0310 	and.w	r3, r3, #16
 8007b3a:	2b10      	cmp	r3, #16
 8007b3c:	d0f0      	beq.n	8007b20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b98:	f023 0303 	bic.w	r3, r3, #3
 8007b9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bac:	f043 0302 	orr.w	r3, r3, #2
 8007bb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bf4:	d901      	bls.n	8007bfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e022      	b.n	8007c40 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	daf2      	bge.n	8007be8 <USB_CoreReset+0xc>

  count = 10U;
 8007c02:	230a      	movs	r3, #10
 8007c04:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007c06:	e002      	b.n	8007c0e <USB_CoreReset+0x32>
  {
    count--;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1f9      	bne.n	8007c08 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	f043 0201 	orr.w	r2, r3, #1
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c2c:	d901      	bls.n	8007c32 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e006      	b.n	8007c40 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d0f0      	beq.n	8007c20 <USB_CoreReset+0x44>

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <__cvt>:
 8007c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c50:	ec57 6b10 	vmov	r6, r7, d0
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	460c      	mov	r4, r1
 8007c58:	4619      	mov	r1, r3
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	bfbb      	ittet	lt
 8007c5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c62:	461f      	movlt	r7, r3
 8007c64:	2300      	movge	r3, #0
 8007c66:	232d      	movlt	r3, #45	@ 0x2d
 8007c68:	700b      	strb	r3, [r1, #0]
 8007c6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c70:	4691      	mov	r9, r2
 8007c72:	f023 0820 	bic.w	r8, r3, #32
 8007c76:	bfbc      	itt	lt
 8007c78:	4632      	movlt	r2, r6
 8007c7a:	4616      	movlt	r6, r2
 8007c7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c80:	d005      	beq.n	8007c8e <__cvt+0x42>
 8007c82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c86:	d100      	bne.n	8007c8a <__cvt+0x3e>
 8007c88:	3401      	adds	r4, #1
 8007c8a:	2102      	movs	r1, #2
 8007c8c:	e000      	b.n	8007c90 <__cvt+0x44>
 8007c8e:	2103      	movs	r1, #3
 8007c90:	ab03      	add	r3, sp, #12
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	ab02      	add	r3, sp, #8
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	ec47 6b10 	vmov	d0, r6, r7
 8007c9c:	4653      	mov	r3, sl
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	f000 fea6 	bl	80089f0 <_dtoa_r>
 8007ca4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ca8:	4605      	mov	r5, r0
 8007caa:	d119      	bne.n	8007ce0 <__cvt+0x94>
 8007cac:	f019 0f01 	tst.w	r9, #1
 8007cb0:	d00e      	beq.n	8007cd0 <__cvt+0x84>
 8007cb2:	eb00 0904 	add.w	r9, r0, r4
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4630      	mov	r0, r6
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	f7f8 ff23 	bl	8000b08 <__aeabi_dcmpeq>
 8007cc2:	b108      	cbz	r0, 8007cc8 <__cvt+0x7c>
 8007cc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cc8:	2230      	movs	r2, #48	@ 0x30
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	454b      	cmp	r3, r9
 8007cce:	d31e      	bcc.n	8007d0e <__cvt+0xc2>
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cd4:	1b5b      	subs	r3, r3, r5
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	b004      	add	sp, #16
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ce4:	eb00 0904 	add.w	r9, r0, r4
 8007ce8:	d1e5      	bne.n	8007cb6 <__cvt+0x6a>
 8007cea:	7803      	ldrb	r3, [r0, #0]
 8007cec:	2b30      	cmp	r3, #48	@ 0x30
 8007cee:	d10a      	bne.n	8007d06 <__cvt+0xba>
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	f7f8 ff06 	bl	8000b08 <__aeabi_dcmpeq>
 8007cfc:	b918      	cbnz	r0, 8007d06 <__cvt+0xba>
 8007cfe:	f1c4 0401 	rsb	r4, r4, #1
 8007d02:	f8ca 4000 	str.w	r4, [sl]
 8007d06:	f8da 3000 	ldr.w	r3, [sl]
 8007d0a:	4499      	add	r9, r3
 8007d0c:	e7d3      	b.n	8007cb6 <__cvt+0x6a>
 8007d0e:	1c59      	adds	r1, r3, #1
 8007d10:	9103      	str	r1, [sp, #12]
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e7d9      	b.n	8007cca <__cvt+0x7e>

08007d16 <__exponent>:
 8007d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	bfba      	itte	lt
 8007d1c:	4249      	neglt	r1, r1
 8007d1e:	232d      	movlt	r3, #45	@ 0x2d
 8007d20:	232b      	movge	r3, #43	@ 0x2b
 8007d22:	2909      	cmp	r1, #9
 8007d24:	7002      	strb	r2, [r0, #0]
 8007d26:	7043      	strb	r3, [r0, #1]
 8007d28:	dd29      	ble.n	8007d7e <__exponent+0x68>
 8007d2a:	f10d 0307 	add.w	r3, sp, #7
 8007d2e:	461d      	mov	r5, r3
 8007d30:	270a      	movs	r7, #10
 8007d32:	461a      	mov	r2, r3
 8007d34:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d38:	fb07 1416 	mls	r4, r7, r6, r1
 8007d3c:	3430      	adds	r4, #48	@ 0x30
 8007d3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d42:	460c      	mov	r4, r1
 8007d44:	2c63      	cmp	r4, #99	@ 0x63
 8007d46:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	dcf1      	bgt.n	8007d32 <__exponent+0x1c>
 8007d4e:	3130      	adds	r1, #48	@ 0x30
 8007d50:	1e94      	subs	r4, r2, #2
 8007d52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d56:	1c41      	adds	r1, r0, #1
 8007d58:	4623      	mov	r3, r4
 8007d5a:	42ab      	cmp	r3, r5
 8007d5c:	d30a      	bcc.n	8007d74 <__exponent+0x5e>
 8007d5e:	f10d 0309 	add.w	r3, sp, #9
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	42ac      	cmp	r4, r5
 8007d66:	bf88      	it	hi
 8007d68:	2300      	movhi	r3, #0
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	4403      	add	r3, r0
 8007d6e:	1a18      	subs	r0, r3, r0
 8007d70:	b003      	add	sp, #12
 8007d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d7c:	e7ed      	b.n	8007d5a <__exponent+0x44>
 8007d7e:	2330      	movs	r3, #48	@ 0x30
 8007d80:	3130      	adds	r1, #48	@ 0x30
 8007d82:	7083      	strb	r3, [r0, #2]
 8007d84:	70c1      	strb	r1, [r0, #3]
 8007d86:	1d03      	adds	r3, r0, #4
 8007d88:	e7f1      	b.n	8007d6e <__exponent+0x58>
	...

08007d8c <_printf_float>:
 8007d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d90:	b08d      	sub	sp, #52	@ 0x34
 8007d92:	460c      	mov	r4, r1
 8007d94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d98:	4616      	mov	r6, r2
 8007d9a:	461f      	mov	r7, r3
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	f000 fd17 	bl	80087d0 <_localeconv_r>
 8007da2:	6803      	ldr	r3, [r0, #0]
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7f8 fa82 	bl	80002b0 <strlen>
 8007dac:	2300      	movs	r3, #0
 8007dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007db0:	f8d8 3000 	ldr.w	r3, [r8]
 8007db4:	9005      	str	r0, [sp, #20]
 8007db6:	3307      	adds	r3, #7
 8007db8:	f023 0307 	bic.w	r3, r3, #7
 8007dbc:	f103 0208 	add.w	r2, r3, #8
 8007dc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007dc4:	f8d4 b000 	ldr.w	fp, [r4]
 8007dc8:	f8c8 2000 	str.w	r2, [r8]
 8007dcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007dd4:	9307      	str	r3, [sp, #28]
 8007dd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de2:	4b9c      	ldr	r3, [pc, #624]	@ (8008054 <_printf_float+0x2c8>)
 8007de4:	f04f 32ff 	mov.w	r2, #4294967295
 8007de8:	f7f8 fec0 	bl	8000b6c <__aeabi_dcmpun>
 8007dec:	bb70      	cbnz	r0, 8007e4c <_printf_float+0xc0>
 8007dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007df2:	4b98      	ldr	r3, [pc, #608]	@ (8008054 <_printf_float+0x2c8>)
 8007df4:	f04f 32ff 	mov.w	r2, #4294967295
 8007df8:	f7f8 fe9a 	bl	8000b30 <__aeabi_dcmple>
 8007dfc:	bb30      	cbnz	r0, 8007e4c <_printf_float+0xc0>
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2300      	movs	r3, #0
 8007e02:	4640      	mov	r0, r8
 8007e04:	4649      	mov	r1, r9
 8007e06:	f7f8 fe89 	bl	8000b1c <__aeabi_dcmplt>
 8007e0a:	b110      	cbz	r0, 8007e12 <_printf_float+0x86>
 8007e0c:	232d      	movs	r3, #45	@ 0x2d
 8007e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e12:	4a91      	ldr	r2, [pc, #580]	@ (8008058 <_printf_float+0x2cc>)
 8007e14:	4b91      	ldr	r3, [pc, #580]	@ (800805c <_printf_float+0x2d0>)
 8007e16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e1a:	bf8c      	ite	hi
 8007e1c:	4690      	movhi	r8, r2
 8007e1e:	4698      	movls	r8, r3
 8007e20:	2303      	movs	r3, #3
 8007e22:	6123      	str	r3, [r4, #16]
 8007e24:	f02b 0304 	bic.w	r3, fp, #4
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	f04f 0900 	mov.w	r9, #0
 8007e2e:	9700      	str	r7, [sp, #0]
 8007e30:	4633      	mov	r3, r6
 8007e32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e34:	4621      	mov	r1, r4
 8007e36:	4628      	mov	r0, r5
 8007e38:	f000 f9d2 	bl	80081e0 <_printf_common>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f040 808d 	bne.w	8007f5c <_printf_float+0x1d0>
 8007e42:	f04f 30ff 	mov.w	r0, #4294967295
 8007e46:	b00d      	add	sp, #52	@ 0x34
 8007e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	464b      	mov	r3, r9
 8007e50:	4640      	mov	r0, r8
 8007e52:	4649      	mov	r1, r9
 8007e54:	f7f8 fe8a 	bl	8000b6c <__aeabi_dcmpun>
 8007e58:	b140      	cbz	r0, 8007e6c <_printf_float+0xe0>
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bfbc      	itt	lt
 8007e60:	232d      	movlt	r3, #45	@ 0x2d
 8007e62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e66:	4a7e      	ldr	r2, [pc, #504]	@ (8008060 <_printf_float+0x2d4>)
 8007e68:	4b7e      	ldr	r3, [pc, #504]	@ (8008064 <_printf_float+0x2d8>)
 8007e6a:	e7d4      	b.n	8007e16 <_printf_float+0x8a>
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e72:	9206      	str	r2, [sp, #24]
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	d13b      	bne.n	8007ef0 <_printf_float+0x164>
 8007e78:	2306      	movs	r3, #6
 8007e7a:	6063      	str	r3, [r4, #4]
 8007e7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e80:	2300      	movs	r3, #0
 8007e82:	6022      	str	r2, [r4, #0]
 8007e84:	9303      	str	r3, [sp, #12]
 8007e86:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e8c:	ab09      	add	r3, sp, #36	@ 0x24
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	6861      	ldr	r1, [r4, #4]
 8007e92:	ec49 8b10 	vmov	d0, r8, r9
 8007e96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f7ff fed6 	bl	8007c4c <__cvt>
 8007ea0:	9b06      	ldr	r3, [sp, #24]
 8007ea2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ea4:	2b47      	cmp	r3, #71	@ 0x47
 8007ea6:	4680      	mov	r8, r0
 8007ea8:	d129      	bne.n	8007efe <_printf_float+0x172>
 8007eaa:	1cc8      	adds	r0, r1, #3
 8007eac:	db02      	blt.n	8007eb4 <_printf_float+0x128>
 8007eae:	6863      	ldr	r3, [r4, #4]
 8007eb0:	4299      	cmp	r1, r3
 8007eb2:	dd41      	ble.n	8007f38 <_printf_float+0x1ac>
 8007eb4:	f1aa 0a02 	sub.w	sl, sl, #2
 8007eb8:	fa5f fa8a 	uxtb.w	sl, sl
 8007ebc:	3901      	subs	r1, #1
 8007ebe:	4652      	mov	r2, sl
 8007ec0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ec4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ec6:	f7ff ff26 	bl	8007d16 <__exponent>
 8007eca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ecc:	1813      	adds	r3, r2, r0
 8007ece:	2a01      	cmp	r2, #1
 8007ed0:	4681      	mov	r9, r0
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	dc02      	bgt.n	8007edc <_printf_float+0x150>
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	07d2      	lsls	r2, r2, #31
 8007eda:	d501      	bpl.n	8007ee0 <_printf_float+0x154>
 8007edc:	3301      	adds	r3, #1
 8007ede:	6123      	str	r3, [r4, #16]
 8007ee0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d0a2      	beq.n	8007e2e <_printf_float+0xa2>
 8007ee8:	232d      	movs	r3, #45	@ 0x2d
 8007eea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eee:	e79e      	b.n	8007e2e <_printf_float+0xa2>
 8007ef0:	9a06      	ldr	r2, [sp, #24]
 8007ef2:	2a47      	cmp	r2, #71	@ 0x47
 8007ef4:	d1c2      	bne.n	8007e7c <_printf_float+0xf0>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1c0      	bne.n	8007e7c <_printf_float+0xf0>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e7bd      	b.n	8007e7a <_printf_float+0xee>
 8007efe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f02:	d9db      	bls.n	8007ebc <_printf_float+0x130>
 8007f04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007f08:	d118      	bne.n	8007f3c <_printf_float+0x1b0>
 8007f0a:	2900      	cmp	r1, #0
 8007f0c:	6863      	ldr	r3, [r4, #4]
 8007f0e:	dd0b      	ble.n	8007f28 <_printf_float+0x19c>
 8007f10:	6121      	str	r1, [r4, #16]
 8007f12:	b913      	cbnz	r3, 8007f1a <_printf_float+0x18e>
 8007f14:	6822      	ldr	r2, [r4, #0]
 8007f16:	07d0      	lsls	r0, r2, #31
 8007f18:	d502      	bpl.n	8007f20 <_printf_float+0x194>
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	440b      	add	r3, r1
 8007f1e:	6123      	str	r3, [r4, #16]
 8007f20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f22:	f04f 0900 	mov.w	r9, #0
 8007f26:	e7db      	b.n	8007ee0 <_printf_float+0x154>
 8007f28:	b913      	cbnz	r3, 8007f30 <_printf_float+0x1a4>
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	07d2      	lsls	r2, r2, #31
 8007f2e:	d501      	bpl.n	8007f34 <_printf_float+0x1a8>
 8007f30:	3302      	adds	r3, #2
 8007f32:	e7f4      	b.n	8007f1e <_printf_float+0x192>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e7f2      	b.n	8007f1e <_printf_float+0x192>
 8007f38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f3e:	4299      	cmp	r1, r3
 8007f40:	db05      	blt.n	8007f4e <_printf_float+0x1c2>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	6121      	str	r1, [r4, #16]
 8007f46:	07d8      	lsls	r0, r3, #31
 8007f48:	d5ea      	bpl.n	8007f20 <_printf_float+0x194>
 8007f4a:	1c4b      	adds	r3, r1, #1
 8007f4c:	e7e7      	b.n	8007f1e <_printf_float+0x192>
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	bfd4      	ite	le
 8007f52:	f1c1 0202 	rsble	r2, r1, #2
 8007f56:	2201      	movgt	r2, #1
 8007f58:	4413      	add	r3, r2
 8007f5a:	e7e0      	b.n	8007f1e <_printf_float+0x192>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	055a      	lsls	r2, r3, #21
 8007f60:	d407      	bmi.n	8007f72 <_printf_float+0x1e6>
 8007f62:	6923      	ldr	r3, [r4, #16]
 8007f64:	4642      	mov	r2, r8
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d12b      	bne.n	8007fc8 <_printf_float+0x23c>
 8007f70:	e767      	b.n	8007e42 <_printf_float+0xb6>
 8007f72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f76:	f240 80dd 	bls.w	8008134 <_printf_float+0x3a8>
 8007f7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2300      	movs	r3, #0
 8007f82:	f7f8 fdc1 	bl	8000b08 <__aeabi_dcmpeq>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d033      	beq.n	8007ff2 <_printf_float+0x266>
 8007f8a:	4a37      	ldr	r2, [pc, #220]	@ (8008068 <_printf_float+0x2dc>)
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b8      	blx	r7
 8007f94:	3001      	adds	r0, #1
 8007f96:	f43f af54 	beq.w	8007e42 <_printf_float+0xb6>
 8007f9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f9e:	4543      	cmp	r3, r8
 8007fa0:	db02      	blt.n	8007fa8 <_printf_float+0x21c>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	07d8      	lsls	r0, r3, #31
 8007fa6:	d50f      	bpl.n	8007fc8 <_printf_float+0x23c>
 8007fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f af45 	beq.w	8007e42 <_printf_float+0xb6>
 8007fb8:	f04f 0900 	mov.w	r9, #0
 8007fbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fc0:	f104 0a1a 	add.w	sl, r4, #26
 8007fc4:	45c8      	cmp	r8, r9
 8007fc6:	dc09      	bgt.n	8007fdc <_printf_float+0x250>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	079b      	lsls	r3, r3, #30
 8007fcc:	f100 8103 	bmi.w	80081d6 <_printf_float+0x44a>
 8007fd0:	68e0      	ldr	r0, [r4, #12]
 8007fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fd4:	4298      	cmp	r0, r3
 8007fd6:	bfb8      	it	lt
 8007fd8:	4618      	movlt	r0, r3
 8007fda:	e734      	b.n	8007e46 <_printf_float+0xba>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4652      	mov	r2, sl
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af2b 	beq.w	8007e42 <_printf_float+0xb6>
 8007fec:	f109 0901 	add.w	r9, r9, #1
 8007ff0:	e7e8      	b.n	8007fc4 <_printf_float+0x238>
 8007ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dc39      	bgt.n	800806c <_printf_float+0x2e0>
 8007ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8008068 <_printf_float+0x2dc>)
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	f43f af1d 	beq.w	8007e42 <_printf_float+0xb6>
 8008008:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800800c:	ea59 0303 	orrs.w	r3, r9, r3
 8008010:	d102      	bne.n	8008018 <_printf_float+0x28c>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	07d9      	lsls	r1, r3, #31
 8008016:	d5d7      	bpl.n	8007fc8 <_printf_float+0x23c>
 8008018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	f43f af0d 	beq.w	8007e42 <_printf_float+0xb6>
 8008028:	f04f 0a00 	mov.w	sl, #0
 800802c:	f104 0b1a 	add.w	fp, r4, #26
 8008030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008032:	425b      	negs	r3, r3
 8008034:	4553      	cmp	r3, sl
 8008036:	dc01      	bgt.n	800803c <_printf_float+0x2b0>
 8008038:	464b      	mov	r3, r9
 800803a:	e793      	b.n	8007f64 <_printf_float+0x1d8>
 800803c:	2301      	movs	r3, #1
 800803e:	465a      	mov	r2, fp
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	f43f aefb 	beq.w	8007e42 <_printf_float+0xb6>
 800804c:	f10a 0a01 	add.w	sl, sl, #1
 8008050:	e7ee      	b.n	8008030 <_printf_float+0x2a4>
 8008052:	bf00      	nop
 8008054:	7fefffff 	.word	0x7fefffff
 8008058:	0800bdbc 	.word	0x0800bdbc
 800805c:	0800bdb8 	.word	0x0800bdb8
 8008060:	0800bdc4 	.word	0x0800bdc4
 8008064:	0800bdc0 	.word	0x0800bdc0
 8008068:	0800bdc8 	.word	0x0800bdc8
 800806c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800806e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008072:	4553      	cmp	r3, sl
 8008074:	bfa8      	it	ge
 8008076:	4653      	movge	r3, sl
 8008078:	2b00      	cmp	r3, #0
 800807a:	4699      	mov	r9, r3
 800807c:	dc36      	bgt.n	80080ec <_printf_float+0x360>
 800807e:	f04f 0b00 	mov.w	fp, #0
 8008082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008086:	f104 021a 	add.w	r2, r4, #26
 800808a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800808c:	9306      	str	r3, [sp, #24]
 800808e:	eba3 0309 	sub.w	r3, r3, r9
 8008092:	455b      	cmp	r3, fp
 8008094:	dc31      	bgt.n	80080fa <_printf_float+0x36e>
 8008096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008098:	459a      	cmp	sl, r3
 800809a:	dc3a      	bgt.n	8008112 <_printf_float+0x386>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	07da      	lsls	r2, r3, #31
 80080a0:	d437      	bmi.n	8008112 <_printf_float+0x386>
 80080a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a4:	ebaa 0903 	sub.w	r9, sl, r3
 80080a8:	9b06      	ldr	r3, [sp, #24]
 80080aa:	ebaa 0303 	sub.w	r3, sl, r3
 80080ae:	4599      	cmp	r9, r3
 80080b0:	bfa8      	it	ge
 80080b2:	4699      	movge	r9, r3
 80080b4:	f1b9 0f00 	cmp.w	r9, #0
 80080b8:	dc33      	bgt.n	8008122 <_printf_float+0x396>
 80080ba:	f04f 0800 	mov.w	r8, #0
 80080be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c2:	f104 0b1a 	add.w	fp, r4, #26
 80080c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c8:	ebaa 0303 	sub.w	r3, sl, r3
 80080cc:	eba3 0309 	sub.w	r3, r3, r9
 80080d0:	4543      	cmp	r3, r8
 80080d2:	f77f af79 	ble.w	8007fc8 <_printf_float+0x23c>
 80080d6:	2301      	movs	r3, #1
 80080d8:	465a      	mov	r2, fp
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	f43f aeae 	beq.w	8007e42 <_printf_float+0xb6>
 80080e6:	f108 0801 	add.w	r8, r8, #1
 80080ea:	e7ec      	b.n	80080c6 <_printf_float+0x33a>
 80080ec:	4642      	mov	r2, r8
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d1c2      	bne.n	800807e <_printf_float+0x2f2>
 80080f8:	e6a3      	b.n	8007e42 <_printf_float+0xb6>
 80080fa:	2301      	movs	r3, #1
 80080fc:	4631      	mov	r1, r6
 80080fe:	4628      	mov	r0, r5
 8008100:	9206      	str	r2, [sp, #24]
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	f43f ae9c 	beq.w	8007e42 <_printf_float+0xb6>
 800810a:	9a06      	ldr	r2, [sp, #24]
 800810c:	f10b 0b01 	add.w	fp, fp, #1
 8008110:	e7bb      	b.n	800808a <_printf_float+0x2fe>
 8008112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	d1c0      	bne.n	80080a2 <_printf_float+0x316>
 8008120:	e68f      	b.n	8007e42 <_printf_float+0xb6>
 8008122:	9a06      	ldr	r2, [sp, #24]
 8008124:	464b      	mov	r3, r9
 8008126:	4442      	add	r2, r8
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	d1c3      	bne.n	80080ba <_printf_float+0x32e>
 8008132:	e686      	b.n	8007e42 <_printf_float+0xb6>
 8008134:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008138:	f1ba 0f01 	cmp.w	sl, #1
 800813c:	dc01      	bgt.n	8008142 <_printf_float+0x3b6>
 800813e:	07db      	lsls	r3, r3, #31
 8008140:	d536      	bpl.n	80081b0 <_printf_float+0x424>
 8008142:	2301      	movs	r3, #1
 8008144:	4642      	mov	r2, r8
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f ae78 	beq.w	8007e42 <_printf_float+0xb6>
 8008152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008156:	4631      	mov	r1, r6
 8008158:	4628      	mov	r0, r5
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	f43f ae70 	beq.w	8007e42 <_printf_float+0xb6>
 8008162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008166:	2200      	movs	r2, #0
 8008168:	2300      	movs	r3, #0
 800816a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800816e:	f7f8 fccb 	bl	8000b08 <__aeabi_dcmpeq>
 8008172:	b9c0      	cbnz	r0, 80081a6 <_printf_float+0x41a>
 8008174:	4653      	mov	r3, sl
 8008176:	f108 0201 	add.w	r2, r8, #1
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	d10c      	bne.n	800819e <_printf_float+0x412>
 8008184:	e65d      	b.n	8007e42 <_printf_float+0xb6>
 8008186:	2301      	movs	r3, #1
 8008188:	465a      	mov	r2, fp
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	f43f ae56 	beq.w	8007e42 <_printf_float+0xb6>
 8008196:	f108 0801 	add.w	r8, r8, #1
 800819a:	45d0      	cmp	r8, sl
 800819c:	dbf3      	blt.n	8008186 <_printf_float+0x3fa>
 800819e:	464b      	mov	r3, r9
 80081a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80081a4:	e6df      	b.n	8007f66 <_printf_float+0x1da>
 80081a6:	f04f 0800 	mov.w	r8, #0
 80081aa:	f104 0b1a 	add.w	fp, r4, #26
 80081ae:	e7f4      	b.n	800819a <_printf_float+0x40e>
 80081b0:	2301      	movs	r3, #1
 80081b2:	4642      	mov	r2, r8
 80081b4:	e7e1      	b.n	800817a <_printf_float+0x3ee>
 80081b6:	2301      	movs	r3, #1
 80081b8:	464a      	mov	r2, r9
 80081ba:	4631      	mov	r1, r6
 80081bc:	4628      	mov	r0, r5
 80081be:	47b8      	blx	r7
 80081c0:	3001      	adds	r0, #1
 80081c2:	f43f ae3e 	beq.w	8007e42 <_printf_float+0xb6>
 80081c6:	f108 0801 	add.w	r8, r8, #1
 80081ca:	68e3      	ldr	r3, [r4, #12]
 80081cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081ce:	1a5b      	subs	r3, r3, r1
 80081d0:	4543      	cmp	r3, r8
 80081d2:	dcf0      	bgt.n	80081b6 <_printf_float+0x42a>
 80081d4:	e6fc      	b.n	8007fd0 <_printf_float+0x244>
 80081d6:	f04f 0800 	mov.w	r8, #0
 80081da:	f104 0919 	add.w	r9, r4, #25
 80081de:	e7f4      	b.n	80081ca <_printf_float+0x43e>

080081e0 <_printf_common>:
 80081e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	4616      	mov	r6, r2
 80081e6:	4698      	mov	r8, r3
 80081e8:	688a      	ldr	r2, [r1, #8]
 80081ea:	690b      	ldr	r3, [r1, #16]
 80081ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081f0:	4293      	cmp	r3, r2
 80081f2:	bfb8      	it	lt
 80081f4:	4613      	movlt	r3, r2
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081fc:	4607      	mov	r7, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	b10a      	cbz	r2, 8008206 <_printf_common+0x26>
 8008202:	3301      	adds	r3, #1
 8008204:	6033      	str	r3, [r6, #0]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	0699      	lsls	r1, r3, #26
 800820a:	bf42      	ittt	mi
 800820c:	6833      	ldrmi	r3, [r6, #0]
 800820e:	3302      	addmi	r3, #2
 8008210:	6033      	strmi	r3, [r6, #0]
 8008212:	6825      	ldr	r5, [r4, #0]
 8008214:	f015 0506 	ands.w	r5, r5, #6
 8008218:	d106      	bne.n	8008228 <_printf_common+0x48>
 800821a:	f104 0a19 	add.w	sl, r4, #25
 800821e:	68e3      	ldr	r3, [r4, #12]
 8008220:	6832      	ldr	r2, [r6, #0]
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	42ab      	cmp	r3, r5
 8008226:	dc26      	bgt.n	8008276 <_printf_common+0x96>
 8008228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800822c:	6822      	ldr	r2, [r4, #0]
 800822e:	3b00      	subs	r3, #0
 8008230:	bf18      	it	ne
 8008232:	2301      	movne	r3, #1
 8008234:	0692      	lsls	r2, r2, #26
 8008236:	d42b      	bmi.n	8008290 <_printf_common+0xb0>
 8008238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800823c:	4641      	mov	r1, r8
 800823e:	4638      	mov	r0, r7
 8008240:	47c8      	blx	r9
 8008242:	3001      	adds	r0, #1
 8008244:	d01e      	beq.n	8008284 <_printf_common+0xa4>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	6922      	ldr	r2, [r4, #16]
 800824a:	f003 0306 	and.w	r3, r3, #6
 800824e:	2b04      	cmp	r3, #4
 8008250:	bf02      	ittt	eq
 8008252:	68e5      	ldreq	r5, [r4, #12]
 8008254:	6833      	ldreq	r3, [r6, #0]
 8008256:	1aed      	subeq	r5, r5, r3
 8008258:	68a3      	ldr	r3, [r4, #8]
 800825a:	bf0c      	ite	eq
 800825c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008260:	2500      	movne	r5, #0
 8008262:	4293      	cmp	r3, r2
 8008264:	bfc4      	itt	gt
 8008266:	1a9b      	subgt	r3, r3, r2
 8008268:	18ed      	addgt	r5, r5, r3
 800826a:	2600      	movs	r6, #0
 800826c:	341a      	adds	r4, #26
 800826e:	42b5      	cmp	r5, r6
 8008270:	d11a      	bne.n	80082a8 <_printf_common+0xc8>
 8008272:	2000      	movs	r0, #0
 8008274:	e008      	b.n	8008288 <_printf_common+0xa8>
 8008276:	2301      	movs	r3, #1
 8008278:	4652      	mov	r2, sl
 800827a:	4641      	mov	r1, r8
 800827c:	4638      	mov	r0, r7
 800827e:	47c8      	blx	r9
 8008280:	3001      	adds	r0, #1
 8008282:	d103      	bne.n	800828c <_printf_common+0xac>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828c:	3501      	adds	r5, #1
 800828e:	e7c6      	b.n	800821e <_printf_common+0x3e>
 8008290:	18e1      	adds	r1, r4, r3
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	2030      	movs	r0, #48	@ 0x30
 8008296:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800829a:	4422      	add	r2, r4
 800829c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082a4:	3302      	adds	r3, #2
 80082a6:	e7c7      	b.n	8008238 <_printf_common+0x58>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4622      	mov	r2, r4
 80082ac:	4641      	mov	r1, r8
 80082ae:	4638      	mov	r0, r7
 80082b0:	47c8      	blx	r9
 80082b2:	3001      	adds	r0, #1
 80082b4:	d0e6      	beq.n	8008284 <_printf_common+0xa4>
 80082b6:	3601      	adds	r6, #1
 80082b8:	e7d9      	b.n	800826e <_printf_common+0x8e>
	...

080082bc <_printf_i>:
 80082bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	7e0f      	ldrb	r7, [r1, #24]
 80082c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082c4:	2f78      	cmp	r7, #120	@ 0x78
 80082c6:	4691      	mov	r9, r2
 80082c8:	4680      	mov	r8, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	469a      	mov	sl, r3
 80082ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082d2:	d807      	bhi.n	80082e4 <_printf_i+0x28>
 80082d4:	2f62      	cmp	r7, #98	@ 0x62
 80082d6:	d80a      	bhi.n	80082ee <_printf_i+0x32>
 80082d8:	2f00      	cmp	r7, #0
 80082da:	f000 80d1 	beq.w	8008480 <_printf_i+0x1c4>
 80082de:	2f58      	cmp	r7, #88	@ 0x58
 80082e0:	f000 80b8 	beq.w	8008454 <_printf_i+0x198>
 80082e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082ec:	e03a      	b.n	8008364 <_printf_i+0xa8>
 80082ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082f2:	2b15      	cmp	r3, #21
 80082f4:	d8f6      	bhi.n	80082e4 <_printf_i+0x28>
 80082f6:	a101      	add	r1, pc, #4	@ (adr r1, 80082fc <_printf_i+0x40>)
 80082f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082fc:	08008355 	.word	0x08008355
 8008300:	08008369 	.word	0x08008369
 8008304:	080082e5 	.word	0x080082e5
 8008308:	080082e5 	.word	0x080082e5
 800830c:	080082e5 	.word	0x080082e5
 8008310:	080082e5 	.word	0x080082e5
 8008314:	08008369 	.word	0x08008369
 8008318:	080082e5 	.word	0x080082e5
 800831c:	080082e5 	.word	0x080082e5
 8008320:	080082e5 	.word	0x080082e5
 8008324:	080082e5 	.word	0x080082e5
 8008328:	08008467 	.word	0x08008467
 800832c:	08008393 	.word	0x08008393
 8008330:	08008421 	.word	0x08008421
 8008334:	080082e5 	.word	0x080082e5
 8008338:	080082e5 	.word	0x080082e5
 800833c:	08008489 	.word	0x08008489
 8008340:	080082e5 	.word	0x080082e5
 8008344:	08008393 	.word	0x08008393
 8008348:	080082e5 	.word	0x080082e5
 800834c:	080082e5 	.word	0x080082e5
 8008350:	08008429 	.word	0x08008429
 8008354:	6833      	ldr	r3, [r6, #0]
 8008356:	1d1a      	adds	r2, r3, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6032      	str	r2, [r6, #0]
 800835c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008364:	2301      	movs	r3, #1
 8008366:	e09c      	b.n	80084a2 <_printf_i+0x1e6>
 8008368:	6833      	ldr	r3, [r6, #0]
 800836a:	6820      	ldr	r0, [r4, #0]
 800836c:	1d19      	adds	r1, r3, #4
 800836e:	6031      	str	r1, [r6, #0]
 8008370:	0606      	lsls	r6, r0, #24
 8008372:	d501      	bpl.n	8008378 <_printf_i+0xbc>
 8008374:	681d      	ldr	r5, [r3, #0]
 8008376:	e003      	b.n	8008380 <_printf_i+0xc4>
 8008378:	0645      	lsls	r5, r0, #25
 800837a:	d5fb      	bpl.n	8008374 <_printf_i+0xb8>
 800837c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008380:	2d00      	cmp	r5, #0
 8008382:	da03      	bge.n	800838c <_printf_i+0xd0>
 8008384:	232d      	movs	r3, #45	@ 0x2d
 8008386:	426d      	negs	r5, r5
 8008388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800838c:	4858      	ldr	r0, [pc, #352]	@ (80084f0 <_printf_i+0x234>)
 800838e:	230a      	movs	r3, #10
 8008390:	e011      	b.n	80083b6 <_printf_i+0xfa>
 8008392:	6821      	ldr	r1, [r4, #0]
 8008394:	6833      	ldr	r3, [r6, #0]
 8008396:	0608      	lsls	r0, r1, #24
 8008398:	f853 5b04 	ldr.w	r5, [r3], #4
 800839c:	d402      	bmi.n	80083a4 <_printf_i+0xe8>
 800839e:	0649      	lsls	r1, r1, #25
 80083a0:	bf48      	it	mi
 80083a2:	b2ad      	uxthmi	r5, r5
 80083a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80083a6:	4852      	ldr	r0, [pc, #328]	@ (80084f0 <_printf_i+0x234>)
 80083a8:	6033      	str	r3, [r6, #0]
 80083aa:	bf14      	ite	ne
 80083ac:	230a      	movne	r3, #10
 80083ae:	2308      	moveq	r3, #8
 80083b0:	2100      	movs	r1, #0
 80083b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083b6:	6866      	ldr	r6, [r4, #4]
 80083b8:	60a6      	str	r6, [r4, #8]
 80083ba:	2e00      	cmp	r6, #0
 80083bc:	db05      	blt.n	80083ca <_printf_i+0x10e>
 80083be:	6821      	ldr	r1, [r4, #0]
 80083c0:	432e      	orrs	r6, r5
 80083c2:	f021 0104 	bic.w	r1, r1, #4
 80083c6:	6021      	str	r1, [r4, #0]
 80083c8:	d04b      	beq.n	8008462 <_printf_i+0x1a6>
 80083ca:	4616      	mov	r6, r2
 80083cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80083d0:	fb03 5711 	mls	r7, r3, r1, r5
 80083d4:	5dc7      	ldrb	r7, [r0, r7]
 80083d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083da:	462f      	mov	r7, r5
 80083dc:	42bb      	cmp	r3, r7
 80083de:	460d      	mov	r5, r1
 80083e0:	d9f4      	bls.n	80083cc <_printf_i+0x110>
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d10b      	bne.n	80083fe <_printf_i+0x142>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	07df      	lsls	r7, r3, #31
 80083ea:	d508      	bpl.n	80083fe <_printf_i+0x142>
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	6861      	ldr	r1, [r4, #4]
 80083f0:	4299      	cmp	r1, r3
 80083f2:	bfde      	ittt	le
 80083f4:	2330      	movle	r3, #48	@ 0x30
 80083f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083fe:	1b92      	subs	r2, r2, r6
 8008400:	6122      	str	r2, [r4, #16]
 8008402:	f8cd a000 	str.w	sl, [sp]
 8008406:	464b      	mov	r3, r9
 8008408:	aa03      	add	r2, sp, #12
 800840a:	4621      	mov	r1, r4
 800840c:	4640      	mov	r0, r8
 800840e:	f7ff fee7 	bl	80081e0 <_printf_common>
 8008412:	3001      	adds	r0, #1
 8008414:	d14a      	bne.n	80084ac <_printf_i+0x1f0>
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	b004      	add	sp, #16
 800841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	f043 0320 	orr.w	r3, r3, #32
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	4832      	ldr	r0, [pc, #200]	@ (80084f4 <_printf_i+0x238>)
 800842a:	2778      	movs	r7, #120	@ 0x78
 800842c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	6831      	ldr	r1, [r6, #0]
 8008434:	061f      	lsls	r7, r3, #24
 8008436:	f851 5b04 	ldr.w	r5, [r1], #4
 800843a:	d402      	bmi.n	8008442 <_printf_i+0x186>
 800843c:	065f      	lsls	r7, r3, #25
 800843e:	bf48      	it	mi
 8008440:	b2ad      	uxthmi	r5, r5
 8008442:	6031      	str	r1, [r6, #0]
 8008444:	07d9      	lsls	r1, r3, #31
 8008446:	bf44      	itt	mi
 8008448:	f043 0320 	orrmi.w	r3, r3, #32
 800844c:	6023      	strmi	r3, [r4, #0]
 800844e:	b11d      	cbz	r5, 8008458 <_printf_i+0x19c>
 8008450:	2310      	movs	r3, #16
 8008452:	e7ad      	b.n	80083b0 <_printf_i+0xf4>
 8008454:	4826      	ldr	r0, [pc, #152]	@ (80084f0 <_printf_i+0x234>)
 8008456:	e7e9      	b.n	800842c <_printf_i+0x170>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	f023 0320 	bic.w	r3, r3, #32
 800845e:	6023      	str	r3, [r4, #0]
 8008460:	e7f6      	b.n	8008450 <_printf_i+0x194>
 8008462:	4616      	mov	r6, r2
 8008464:	e7bd      	b.n	80083e2 <_printf_i+0x126>
 8008466:	6833      	ldr	r3, [r6, #0]
 8008468:	6825      	ldr	r5, [r4, #0]
 800846a:	6961      	ldr	r1, [r4, #20]
 800846c:	1d18      	adds	r0, r3, #4
 800846e:	6030      	str	r0, [r6, #0]
 8008470:	062e      	lsls	r6, r5, #24
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	d501      	bpl.n	800847a <_printf_i+0x1be>
 8008476:	6019      	str	r1, [r3, #0]
 8008478:	e002      	b.n	8008480 <_printf_i+0x1c4>
 800847a:	0668      	lsls	r0, r5, #25
 800847c:	d5fb      	bpl.n	8008476 <_printf_i+0x1ba>
 800847e:	8019      	strh	r1, [r3, #0]
 8008480:	2300      	movs	r3, #0
 8008482:	6123      	str	r3, [r4, #16]
 8008484:	4616      	mov	r6, r2
 8008486:	e7bc      	b.n	8008402 <_printf_i+0x146>
 8008488:	6833      	ldr	r3, [r6, #0]
 800848a:	1d1a      	adds	r2, r3, #4
 800848c:	6032      	str	r2, [r6, #0]
 800848e:	681e      	ldr	r6, [r3, #0]
 8008490:	6862      	ldr	r2, [r4, #4]
 8008492:	2100      	movs	r1, #0
 8008494:	4630      	mov	r0, r6
 8008496:	f7f7 febb 	bl	8000210 <memchr>
 800849a:	b108      	cbz	r0, 80084a0 <_printf_i+0x1e4>
 800849c:	1b80      	subs	r0, r0, r6
 800849e:	6060      	str	r0, [r4, #4]
 80084a0:	6863      	ldr	r3, [r4, #4]
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	2300      	movs	r3, #0
 80084a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084aa:	e7aa      	b.n	8008402 <_printf_i+0x146>
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	4632      	mov	r2, r6
 80084b0:	4649      	mov	r1, r9
 80084b2:	4640      	mov	r0, r8
 80084b4:	47d0      	blx	sl
 80084b6:	3001      	adds	r0, #1
 80084b8:	d0ad      	beq.n	8008416 <_printf_i+0x15a>
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	079b      	lsls	r3, r3, #30
 80084be:	d413      	bmi.n	80084e8 <_printf_i+0x22c>
 80084c0:	68e0      	ldr	r0, [r4, #12]
 80084c2:	9b03      	ldr	r3, [sp, #12]
 80084c4:	4298      	cmp	r0, r3
 80084c6:	bfb8      	it	lt
 80084c8:	4618      	movlt	r0, r3
 80084ca:	e7a6      	b.n	800841a <_printf_i+0x15e>
 80084cc:	2301      	movs	r3, #1
 80084ce:	4632      	mov	r2, r6
 80084d0:	4649      	mov	r1, r9
 80084d2:	4640      	mov	r0, r8
 80084d4:	47d0      	blx	sl
 80084d6:	3001      	adds	r0, #1
 80084d8:	d09d      	beq.n	8008416 <_printf_i+0x15a>
 80084da:	3501      	adds	r5, #1
 80084dc:	68e3      	ldr	r3, [r4, #12]
 80084de:	9903      	ldr	r1, [sp, #12]
 80084e0:	1a5b      	subs	r3, r3, r1
 80084e2:	42ab      	cmp	r3, r5
 80084e4:	dcf2      	bgt.n	80084cc <_printf_i+0x210>
 80084e6:	e7eb      	b.n	80084c0 <_printf_i+0x204>
 80084e8:	2500      	movs	r5, #0
 80084ea:	f104 0619 	add.w	r6, r4, #25
 80084ee:	e7f5      	b.n	80084dc <_printf_i+0x220>
 80084f0:	0800bdca 	.word	0x0800bdca
 80084f4:	0800bddb 	.word	0x0800bddb

080084f8 <std>:
 80084f8:	2300      	movs	r3, #0
 80084fa:	b510      	push	{r4, lr}
 80084fc:	4604      	mov	r4, r0
 80084fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008506:	6083      	str	r3, [r0, #8]
 8008508:	8181      	strh	r1, [r0, #12]
 800850a:	6643      	str	r3, [r0, #100]	@ 0x64
 800850c:	81c2      	strh	r2, [r0, #14]
 800850e:	6183      	str	r3, [r0, #24]
 8008510:	4619      	mov	r1, r3
 8008512:	2208      	movs	r2, #8
 8008514:	305c      	adds	r0, #92	@ 0x5c
 8008516:	f000 f953 	bl	80087c0 <memset>
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <std+0x58>)
 800851c:	6263      	str	r3, [r4, #36]	@ 0x24
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <std+0x5c>)
 8008520:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008522:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <std+0x60>)
 8008524:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008526:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <std+0x64>)
 8008528:	6323      	str	r3, [r4, #48]	@ 0x30
 800852a:	4b0d      	ldr	r3, [pc, #52]	@ (8008560 <std+0x68>)
 800852c:	6224      	str	r4, [r4, #32]
 800852e:	429c      	cmp	r4, r3
 8008530:	d006      	beq.n	8008540 <std+0x48>
 8008532:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008536:	4294      	cmp	r4, r2
 8008538:	d002      	beq.n	8008540 <std+0x48>
 800853a:	33d0      	adds	r3, #208	@ 0xd0
 800853c:	429c      	cmp	r4, r3
 800853e:	d105      	bne.n	800854c <std+0x54>
 8008540:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008548:	f000 b9b6 	b.w	80088b8 <__retarget_lock_init_recursive>
 800854c:	bd10      	pop	{r4, pc}
 800854e:	bf00      	nop
 8008550:	080086c1 	.word	0x080086c1
 8008554:	080086e3 	.word	0x080086e3
 8008558:	0800871b 	.word	0x0800871b
 800855c:	0800873f 	.word	0x0800873f
 8008560:	20000d3c 	.word	0x20000d3c

08008564 <stdio_exit_handler>:
 8008564:	4a02      	ldr	r2, [pc, #8]	@ (8008570 <stdio_exit_handler+0xc>)
 8008566:	4903      	ldr	r1, [pc, #12]	@ (8008574 <stdio_exit_handler+0x10>)
 8008568:	4803      	ldr	r0, [pc, #12]	@ (8008578 <stdio_exit_handler+0x14>)
 800856a:	f000 b869 	b.w	8008640 <_fwalk_sglue>
 800856e:	bf00      	nop
 8008570:	2000000c 	.word	0x2000000c
 8008574:	0800a23d 	.word	0x0800a23d
 8008578:	2000001c 	.word	0x2000001c

0800857c <cleanup_stdio>:
 800857c:	6841      	ldr	r1, [r0, #4]
 800857e:	4b0c      	ldr	r3, [pc, #48]	@ (80085b0 <cleanup_stdio+0x34>)
 8008580:	4299      	cmp	r1, r3
 8008582:	b510      	push	{r4, lr}
 8008584:	4604      	mov	r4, r0
 8008586:	d001      	beq.n	800858c <cleanup_stdio+0x10>
 8008588:	f001 fe58 	bl	800a23c <_fflush_r>
 800858c:	68a1      	ldr	r1, [r4, #8]
 800858e:	4b09      	ldr	r3, [pc, #36]	@ (80085b4 <cleanup_stdio+0x38>)
 8008590:	4299      	cmp	r1, r3
 8008592:	d002      	beq.n	800859a <cleanup_stdio+0x1e>
 8008594:	4620      	mov	r0, r4
 8008596:	f001 fe51 	bl	800a23c <_fflush_r>
 800859a:	68e1      	ldr	r1, [r4, #12]
 800859c:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <cleanup_stdio+0x3c>)
 800859e:	4299      	cmp	r1, r3
 80085a0:	d004      	beq.n	80085ac <cleanup_stdio+0x30>
 80085a2:	4620      	mov	r0, r4
 80085a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a8:	f001 be48 	b.w	800a23c <_fflush_r>
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	bf00      	nop
 80085b0:	20000d3c 	.word	0x20000d3c
 80085b4:	20000da4 	.word	0x20000da4
 80085b8:	20000e0c 	.word	0x20000e0c

080085bc <global_stdio_init.part.0>:
 80085bc:	b510      	push	{r4, lr}
 80085be:	4b0b      	ldr	r3, [pc, #44]	@ (80085ec <global_stdio_init.part.0+0x30>)
 80085c0:	4c0b      	ldr	r4, [pc, #44]	@ (80085f0 <global_stdio_init.part.0+0x34>)
 80085c2:	4a0c      	ldr	r2, [pc, #48]	@ (80085f4 <global_stdio_init.part.0+0x38>)
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	4620      	mov	r0, r4
 80085c8:	2200      	movs	r2, #0
 80085ca:	2104      	movs	r1, #4
 80085cc:	f7ff ff94 	bl	80084f8 <std>
 80085d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085d4:	2201      	movs	r2, #1
 80085d6:	2109      	movs	r1, #9
 80085d8:	f7ff ff8e 	bl	80084f8 <std>
 80085dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085e0:	2202      	movs	r2, #2
 80085e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085e6:	2112      	movs	r1, #18
 80085e8:	f7ff bf86 	b.w	80084f8 <std>
 80085ec:	20000e74 	.word	0x20000e74
 80085f0:	20000d3c 	.word	0x20000d3c
 80085f4:	08008565 	.word	0x08008565

080085f8 <__sfp_lock_acquire>:
 80085f8:	4801      	ldr	r0, [pc, #4]	@ (8008600 <__sfp_lock_acquire+0x8>)
 80085fa:	f000 b95e 	b.w	80088ba <__retarget_lock_acquire_recursive>
 80085fe:	bf00      	nop
 8008600:	20000e7d 	.word	0x20000e7d

08008604 <__sfp_lock_release>:
 8008604:	4801      	ldr	r0, [pc, #4]	@ (800860c <__sfp_lock_release+0x8>)
 8008606:	f000 b959 	b.w	80088bc <__retarget_lock_release_recursive>
 800860a:	bf00      	nop
 800860c:	20000e7d 	.word	0x20000e7d

08008610 <__sinit>:
 8008610:	b510      	push	{r4, lr}
 8008612:	4604      	mov	r4, r0
 8008614:	f7ff fff0 	bl	80085f8 <__sfp_lock_acquire>
 8008618:	6a23      	ldr	r3, [r4, #32]
 800861a:	b11b      	cbz	r3, 8008624 <__sinit+0x14>
 800861c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008620:	f7ff bff0 	b.w	8008604 <__sfp_lock_release>
 8008624:	4b04      	ldr	r3, [pc, #16]	@ (8008638 <__sinit+0x28>)
 8008626:	6223      	str	r3, [r4, #32]
 8008628:	4b04      	ldr	r3, [pc, #16]	@ (800863c <__sinit+0x2c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1f5      	bne.n	800861c <__sinit+0xc>
 8008630:	f7ff ffc4 	bl	80085bc <global_stdio_init.part.0>
 8008634:	e7f2      	b.n	800861c <__sinit+0xc>
 8008636:	bf00      	nop
 8008638:	0800857d 	.word	0x0800857d
 800863c:	20000e74 	.word	0x20000e74

08008640 <_fwalk_sglue>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	4607      	mov	r7, r0
 8008646:	4688      	mov	r8, r1
 8008648:	4614      	mov	r4, r2
 800864a:	2600      	movs	r6, #0
 800864c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008650:	f1b9 0901 	subs.w	r9, r9, #1
 8008654:	d505      	bpl.n	8008662 <_fwalk_sglue+0x22>
 8008656:	6824      	ldr	r4, [r4, #0]
 8008658:	2c00      	cmp	r4, #0
 800865a:	d1f7      	bne.n	800864c <_fwalk_sglue+0xc>
 800865c:	4630      	mov	r0, r6
 800865e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008662:	89ab      	ldrh	r3, [r5, #12]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d907      	bls.n	8008678 <_fwalk_sglue+0x38>
 8008668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800866c:	3301      	adds	r3, #1
 800866e:	d003      	beq.n	8008678 <_fwalk_sglue+0x38>
 8008670:	4629      	mov	r1, r5
 8008672:	4638      	mov	r0, r7
 8008674:	47c0      	blx	r8
 8008676:	4306      	orrs	r6, r0
 8008678:	3568      	adds	r5, #104	@ 0x68
 800867a:	e7e9      	b.n	8008650 <_fwalk_sglue+0x10>

0800867c <siprintf>:
 800867c:	b40e      	push	{r1, r2, r3}
 800867e:	b510      	push	{r4, lr}
 8008680:	b09d      	sub	sp, #116	@ 0x74
 8008682:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008684:	9002      	str	r0, [sp, #8]
 8008686:	9006      	str	r0, [sp, #24]
 8008688:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800868c:	480a      	ldr	r0, [pc, #40]	@ (80086b8 <siprintf+0x3c>)
 800868e:	9107      	str	r1, [sp, #28]
 8008690:	9104      	str	r1, [sp, #16]
 8008692:	490a      	ldr	r1, [pc, #40]	@ (80086bc <siprintf+0x40>)
 8008694:	f853 2b04 	ldr.w	r2, [r3], #4
 8008698:	9105      	str	r1, [sp, #20]
 800869a:	2400      	movs	r4, #0
 800869c:	a902      	add	r1, sp, #8
 800869e:	6800      	ldr	r0, [r0, #0]
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80086a4:	f001 fc4a 	bl	8009f3c <_svfiprintf_r>
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	701c      	strb	r4, [r3, #0]
 80086ac:	b01d      	add	sp, #116	@ 0x74
 80086ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b2:	b003      	add	sp, #12
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20000018 	.word	0x20000018
 80086bc:	ffff0208 	.word	0xffff0208

080086c0 <__sread>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	460c      	mov	r4, r1
 80086c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c8:	f000 f8a8 	bl	800881c <_read_r>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	bfab      	itete	ge
 80086d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086d2:	89a3      	ldrhlt	r3, [r4, #12]
 80086d4:	181b      	addge	r3, r3, r0
 80086d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086da:	bfac      	ite	ge
 80086dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086de:	81a3      	strhlt	r3, [r4, #12]
 80086e0:	bd10      	pop	{r4, pc}

080086e2 <__swrite>:
 80086e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	461f      	mov	r7, r3
 80086e8:	898b      	ldrh	r3, [r1, #12]
 80086ea:	05db      	lsls	r3, r3, #23
 80086ec:	4605      	mov	r5, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	4616      	mov	r6, r2
 80086f2:	d505      	bpl.n	8008700 <__swrite+0x1e>
 80086f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f8:	2302      	movs	r3, #2
 80086fa:	2200      	movs	r2, #0
 80086fc:	f000 f87c 	bl	80087f8 <_lseek_r>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800870a:	81a3      	strh	r3, [r4, #12]
 800870c:	4632      	mov	r2, r6
 800870e:	463b      	mov	r3, r7
 8008710:	4628      	mov	r0, r5
 8008712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008716:	f000 b893 	b.w	8008840 <_write_r>

0800871a <__sseek>:
 800871a:	b510      	push	{r4, lr}
 800871c:	460c      	mov	r4, r1
 800871e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008722:	f000 f869 	bl	80087f8 <_lseek_r>
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	bf15      	itete	ne
 800872c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800872e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008732:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008736:	81a3      	strheq	r3, [r4, #12]
 8008738:	bf18      	it	ne
 800873a:	81a3      	strhne	r3, [r4, #12]
 800873c:	bd10      	pop	{r4, pc}

0800873e <__sclose>:
 800873e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008742:	f000 b849 	b.w	80087d8 <_close_r>

08008746 <_vsniprintf_r>:
 8008746:	b530      	push	{r4, r5, lr}
 8008748:	4614      	mov	r4, r2
 800874a:	2c00      	cmp	r4, #0
 800874c:	b09b      	sub	sp, #108	@ 0x6c
 800874e:	4605      	mov	r5, r0
 8008750:	461a      	mov	r2, r3
 8008752:	da05      	bge.n	8008760 <_vsniprintf_r+0x1a>
 8008754:	238b      	movs	r3, #139	@ 0x8b
 8008756:	6003      	str	r3, [r0, #0]
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	b01b      	add	sp, #108	@ 0x6c
 800875e:	bd30      	pop	{r4, r5, pc}
 8008760:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008764:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008768:	f04f 0300 	mov.w	r3, #0
 800876c:	9319      	str	r3, [sp, #100]	@ 0x64
 800876e:	bf14      	ite	ne
 8008770:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008774:	4623      	moveq	r3, r4
 8008776:	9302      	str	r3, [sp, #8]
 8008778:	9305      	str	r3, [sp, #20]
 800877a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800877e:	9100      	str	r1, [sp, #0]
 8008780:	9104      	str	r1, [sp, #16]
 8008782:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008786:	4669      	mov	r1, sp
 8008788:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800878a:	f001 fbd7 	bl	8009f3c <_svfiprintf_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	bfbc      	itt	lt
 8008792:	238b      	movlt	r3, #139	@ 0x8b
 8008794:	602b      	strlt	r3, [r5, #0]
 8008796:	2c00      	cmp	r4, #0
 8008798:	d0e0      	beq.n	800875c <_vsniprintf_r+0x16>
 800879a:	9b00      	ldr	r3, [sp, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]
 80087a0:	e7dc      	b.n	800875c <_vsniprintf_r+0x16>
	...

080087a4 <vsniprintf>:
 80087a4:	b507      	push	{r0, r1, r2, lr}
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	4613      	mov	r3, r2
 80087aa:	460a      	mov	r2, r1
 80087ac:	4601      	mov	r1, r0
 80087ae:	4803      	ldr	r0, [pc, #12]	@ (80087bc <vsniprintf+0x18>)
 80087b0:	6800      	ldr	r0, [r0, #0]
 80087b2:	f7ff ffc8 	bl	8008746 <_vsniprintf_r>
 80087b6:	b003      	add	sp, #12
 80087b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80087bc:	20000018 	.word	0x20000018

080087c0 <memset>:
 80087c0:	4402      	add	r2, r0
 80087c2:	4603      	mov	r3, r0
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d100      	bne.n	80087ca <memset+0xa>
 80087c8:	4770      	bx	lr
 80087ca:	f803 1b01 	strb.w	r1, [r3], #1
 80087ce:	e7f9      	b.n	80087c4 <memset+0x4>

080087d0 <_localeconv_r>:
 80087d0:	4800      	ldr	r0, [pc, #0]	@ (80087d4 <_localeconv_r+0x4>)
 80087d2:	4770      	bx	lr
 80087d4:	20000158 	.word	0x20000158

080087d8 <_close_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d06      	ldr	r5, [pc, #24]	@ (80087f4 <_close_r+0x1c>)
 80087dc:	2300      	movs	r3, #0
 80087de:	4604      	mov	r4, r0
 80087e0:	4608      	mov	r0, r1
 80087e2:	602b      	str	r3, [r5, #0]
 80087e4:	f7fb f9cd 	bl	8003b82 <_close>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_close_r+0x1a>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_close_r+0x1a>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20000e78 	.word	0x20000e78

080087f8 <_lseek_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d07      	ldr	r5, [pc, #28]	@ (8008818 <_lseek_r+0x20>)
 80087fc:	4604      	mov	r4, r0
 80087fe:	4608      	mov	r0, r1
 8008800:	4611      	mov	r1, r2
 8008802:	2200      	movs	r2, #0
 8008804:	602a      	str	r2, [r5, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	f7fb f9e2 	bl	8003bd0 <_lseek>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_lseek_r+0x1e>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_lseek_r+0x1e>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20000e78 	.word	0x20000e78

0800881c <_read_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4d07      	ldr	r5, [pc, #28]	@ (800883c <_read_r+0x20>)
 8008820:	4604      	mov	r4, r0
 8008822:	4608      	mov	r0, r1
 8008824:	4611      	mov	r1, r2
 8008826:	2200      	movs	r2, #0
 8008828:	602a      	str	r2, [r5, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	f7fb f970 	bl	8003b10 <_read>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_read_r+0x1e>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_read_r+0x1e>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	20000e78 	.word	0x20000e78

08008840 <_write_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4d07      	ldr	r5, [pc, #28]	@ (8008860 <_write_r+0x20>)
 8008844:	4604      	mov	r4, r0
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	2200      	movs	r2, #0
 800884c:	602a      	str	r2, [r5, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f7fb f97b 	bl	8003b4a <_write>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_write_r+0x1e>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_write_r+0x1e>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20000e78 	.word	0x20000e78

08008864 <__errno>:
 8008864:	4b01      	ldr	r3, [pc, #4]	@ (800886c <__errno+0x8>)
 8008866:	6818      	ldr	r0, [r3, #0]
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	20000018 	.word	0x20000018

08008870 <__libc_init_array>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	4d0d      	ldr	r5, [pc, #52]	@ (80088a8 <__libc_init_array+0x38>)
 8008874:	4c0d      	ldr	r4, [pc, #52]	@ (80088ac <__libc_init_array+0x3c>)
 8008876:	1b64      	subs	r4, r4, r5
 8008878:	10a4      	asrs	r4, r4, #2
 800887a:	2600      	movs	r6, #0
 800887c:	42a6      	cmp	r6, r4
 800887e:	d109      	bne.n	8008894 <__libc_init_array+0x24>
 8008880:	4d0b      	ldr	r5, [pc, #44]	@ (80088b0 <__libc_init_array+0x40>)
 8008882:	4c0c      	ldr	r4, [pc, #48]	@ (80088b4 <__libc_init_array+0x44>)
 8008884:	f002 fc32 	bl	800b0ec <_init>
 8008888:	1b64      	subs	r4, r4, r5
 800888a:	10a4      	asrs	r4, r4, #2
 800888c:	2600      	movs	r6, #0
 800888e:	42a6      	cmp	r6, r4
 8008890:	d105      	bne.n	800889e <__libc_init_array+0x2e>
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	f855 3b04 	ldr.w	r3, [r5], #4
 8008898:	4798      	blx	r3
 800889a:	3601      	adds	r6, #1
 800889c:	e7ee      	b.n	800887c <__libc_init_array+0xc>
 800889e:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a2:	4798      	blx	r3
 80088a4:	3601      	adds	r6, #1
 80088a6:	e7f2      	b.n	800888e <__libc_init_array+0x1e>
 80088a8:	0800c14c 	.word	0x0800c14c
 80088ac:	0800c14c 	.word	0x0800c14c
 80088b0:	0800c14c 	.word	0x0800c14c
 80088b4:	0800c150 	.word	0x0800c150

080088b8 <__retarget_lock_init_recursive>:
 80088b8:	4770      	bx	lr

080088ba <__retarget_lock_acquire_recursive>:
 80088ba:	4770      	bx	lr

080088bc <__retarget_lock_release_recursive>:
 80088bc:	4770      	bx	lr

080088be <memcpy>:
 80088be:	440a      	add	r2, r1
 80088c0:	4291      	cmp	r1, r2
 80088c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80088c6:	d100      	bne.n	80088ca <memcpy+0xc>
 80088c8:	4770      	bx	lr
 80088ca:	b510      	push	{r4, lr}
 80088cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088d4:	4291      	cmp	r1, r2
 80088d6:	d1f9      	bne.n	80088cc <memcpy+0xe>
 80088d8:	bd10      	pop	{r4, pc}

080088da <quorem>:
 80088da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088de:	6903      	ldr	r3, [r0, #16]
 80088e0:	690c      	ldr	r4, [r1, #16]
 80088e2:	42a3      	cmp	r3, r4
 80088e4:	4607      	mov	r7, r0
 80088e6:	db7e      	blt.n	80089e6 <quorem+0x10c>
 80088e8:	3c01      	subs	r4, #1
 80088ea:	f101 0814 	add.w	r8, r1, #20
 80088ee:	00a3      	lsls	r3, r4, #2
 80088f0:	f100 0514 	add.w	r5, r0, #20
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008904:	3301      	adds	r3, #1
 8008906:	429a      	cmp	r2, r3
 8008908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800890c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008910:	d32e      	bcc.n	8008970 <quorem+0x96>
 8008912:	f04f 0a00 	mov.w	sl, #0
 8008916:	46c4      	mov	ip, r8
 8008918:	46ae      	mov	lr, r5
 800891a:	46d3      	mov	fp, sl
 800891c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008920:	b298      	uxth	r0, r3
 8008922:	fb06 a000 	mla	r0, r6, r0, sl
 8008926:	0c02      	lsrs	r2, r0, #16
 8008928:	0c1b      	lsrs	r3, r3, #16
 800892a:	fb06 2303 	mla	r3, r6, r3, r2
 800892e:	f8de 2000 	ldr.w	r2, [lr]
 8008932:	b280      	uxth	r0, r0
 8008934:	b292      	uxth	r2, r2
 8008936:	1a12      	subs	r2, r2, r0
 8008938:	445a      	add	r2, fp
 800893a:	f8de 0000 	ldr.w	r0, [lr]
 800893e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008942:	b29b      	uxth	r3, r3
 8008944:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008948:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800894c:	b292      	uxth	r2, r2
 800894e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008952:	45e1      	cmp	r9, ip
 8008954:	f84e 2b04 	str.w	r2, [lr], #4
 8008958:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800895c:	d2de      	bcs.n	800891c <quorem+0x42>
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	58eb      	ldr	r3, [r5, r3]
 8008962:	b92b      	cbnz	r3, 8008970 <quorem+0x96>
 8008964:	9b01      	ldr	r3, [sp, #4]
 8008966:	3b04      	subs	r3, #4
 8008968:	429d      	cmp	r5, r3
 800896a:	461a      	mov	r2, r3
 800896c:	d32f      	bcc.n	80089ce <quorem+0xf4>
 800896e:	613c      	str	r4, [r7, #16]
 8008970:	4638      	mov	r0, r7
 8008972:	f001 f97f 	bl	8009c74 <__mcmp>
 8008976:	2800      	cmp	r0, #0
 8008978:	db25      	blt.n	80089c6 <quorem+0xec>
 800897a:	4629      	mov	r1, r5
 800897c:	2000      	movs	r0, #0
 800897e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008982:	f8d1 c000 	ldr.w	ip, [r1]
 8008986:	fa1f fe82 	uxth.w	lr, r2
 800898a:	fa1f f38c 	uxth.w	r3, ip
 800898e:	eba3 030e 	sub.w	r3, r3, lr
 8008992:	4403      	add	r3, r0
 8008994:	0c12      	lsrs	r2, r2, #16
 8008996:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800899a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800899e:	b29b      	uxth	r3, r3
 80089a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089a4:	45c1      	cmp	r9, r8
 80089a6:	f841 3b04 	str.w	r3, [r1], #4
 80089aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80089ae:	d2e6      	bcs.n	800897e <quorem+0xa4>
 80089b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089b8:	b922      	cbnz	r2, 80089c4 <quorem+0xea>
 80089ba:	3b04      	subs	r3, #4
 80089bc:	429d      	cmp	r5, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	d30b      	bcc.n	80089da <quorem+0x100>
 80089c2:	613c      	str	r4, [r7, #16]
 80089c4:	3601      	adds	r6, #1
 80089c6:	4630      	mov	r0, r6
 80089c8:	b003      	add	sp, #12
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	2a00      	cmp	r2, #0
 80089d4:	d1cb      	bne.n	800896e <quorem+0x94>
 80089d6:	3c01      	subs	r4, #1
 80089d8:	e7c6      	b.n	8008968 <quorem+0x8e>
 80089da:	6812      	ldr	r2, [r2, #0]
 80089dc:	3b04      	subs	r3, #4
 80089de:	2a00      	cmp	r2, #0
 80089e0:	d1ef      	bne.n	80089c2 <quorem+0xe8>
 80089e2:	3c01      	subs	r4, #1
 80089e4:	e7ea      	b.n	80089bc <quorem+0xe2>
 80089e6:	2000      	movs	r0, #0
 80089e8:	e7ee      	b.n	80089c8 <quorem+0xee>
 80089ea:	0000      	movs	r0, r0
 80089ec:	0000      	movs	r0, r0
	...

080089f0 <_dtoa_r>:
 80089f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	69c7      	ldr	r7, [r0, #28]
 80089f6:	b097      	sub	sp, #92	@ 0x5c
 80089f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80089fc:	ec55 4b10 	vmov	r4, r5, d0
 8008a00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008a02:	9107      	str	r1, [sp, #28]
 8008a04:	4681      	mov	r9, r0
 8008a06:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a08:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a0a:	b97f      	cbnz	r7, 8008a2c <_dtoa_r+0x3c>
 8008a0c:	2010      	movs	r0, #16
 8008a0e:	f000 fe09 	bl	8009624 <malloc>
 8008a12:	4602      	mov	r2, r0
 8008a14:	f8c9 001c 	str.w	r0, [r9, #28]
 8008a18:	b920      	cbnz	r0, 8008a24 <_dtoa_r+0x34>
 8008a1a:	4ba9      	ldr	r3, [pc, #676]	@ (8008cc0 <_dtoa_r+0x2d0>)
 8008a1c:	21ef      	movs	r1, #239	@ 0xef
 8008a1e:	48a9      	ldr	r0, [pc, #676]	@ (8008cc4 <_dtoa_r+0x2d4>)
 8008a20:	f001 fc5e 	bl	800a2e0 <__assert_func>
 8008a24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008a28:	6007      	str	r7, [r0, #0]
 8008a2a:	60c7      	str	r7, [r0, #12]
 8008a2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a30:	6819      	ldr	r1, [r3, #0]
 8008a32:	b159      	cbz	r1, 8008a4c <_dtoa_r+0x5c>
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	604a      	str	r2, [r1, #4]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4093      	lsls	r3, r2
 8008a3c:	608b      	str	r3, [r1, #8]
 8008a3e:	4648      	mov	r0, r9
 8008a40:	f000 fee6 	bl	8009810 <_Bfree>
 8008a44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	1e2b      	subs	r3, r5, #0
 8008a4e:	bfb9      	ittee	lt
 8008a50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a54:	9305      	strlt	r3, [sp, #20]
 8008a56:	2300      	movge	r3, #0
 8008a58:	6033      	strge	r3, [r6, #0]
 8008a5a:	9f05      	ldr	r7, [sp, #20]
 8008a5c:	4b9a      	ldr	r3, [pc, #616]	@ (8008cc8 <_dtoa_r+0x2d8>)
 8008a5e:	bfbc      	itt	lt
 8008a60:	2201      	movlt	r2, #1
 8008a62:	6032      	strlt	r2, [r6, #0]
 8008a64:	43bb      	bics	r3, r7
 8008a66:	d112      	bne.n	8008a8e <_dtoa_r+0x9e>
 8008a68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a6e:	6013      	str	r3, [r2, #0]
 8008a70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a74:	4323      	orrs	r3, r4
 8008a76:	f000 855a 	beq.w	800952e <_dtoa_r+0xb3e>
 8008a7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a7c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008cdc <_dtoa_r+0x2ec>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 855c 	beq.w	800953e <_dtoa_r+0xb4e>
 8008a86:	f10a 0303 	add.w	r3, sl, #3
 8008a8a:	f000 bd56 	b.w	800953a <_dtoa_r+0xb4a>
 8008a8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008a92:	2200      	movs	r2, #0
 8008a94:	ec51 0b17 	vmov	r0, r1, d7
 8008a98:	2300      	movs	r3, #0
 8008a9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008a9e:	f7f8 f833 	bl	8000b08 <__aeabi_dcmpeq>
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	b158      	cbz	r0, 8008abe <_dtoa_r+0xce>
 8008aa6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008aae:	b113      	cbz	r3, 8008ab6 <_dtoa_r+0xc6>
 8008ab0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ab2:	4b86      	ldr	r3, [pc, #536]	@ (8008ccc <_dtoa_r+0x2dc>)
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008ce0 <_dtoa_r+0x2f0>
 8008aba:	f000 bd40 	b.w	800953e <_dtoa_r+0xb4e>
 8008abe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008ac2:	aa14      	add	r2, sp, #80	@ 0x50
 8008ac4:	a915      	add	r1, sp, #84	@ 0x54
 8008ac6:	4648      	mov	r0, r9
 8008ac8:	f001 f984 	bl	8009dd4 <__d2b>
 8008acc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ad0:	9002      	str	r0, [sp, #8]
 8008ad2:	2e00      	cmp	r6, #0
 8008ad4:	d078      	beq.n	8008bc8 <_dtoa_r+0x1d8>
 8008ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ad8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ae4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ae8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008aec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008af0:	4619      	mov	r1, r3
 8008af2:	2200      	movs	r2, #0
 8008af4:	4b76      	ldr	r3, [pc, #472]	@ (8008cd0 <_dtoa_r+0x2e0>)
 8008af6:	f7f7 fbe7 	bl	80002c8 <__aeabi_dsub>
 8008afa:	a36b      	add	r3, pc, #428	@ (adr r3, 8008ca8 <_dtoa_r+0x2b8>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f7f7 fd9a 	bl	8000638 <__aeabi_dmul>
 8008b04:	a36a      	add	r3, pc, #424	@ (adr r3, 8008cb0 <_dtoa_r+0x2c0>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fbdf 	bl	80002cc <__adddf3>
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4630      	mov	r0, r6
 8008b12:	460d      	mov	r5, r1
 8008b14:	f7f7 fd26 	bl	8000564 <__aeabi_i2d>
 8008b18:	a367      	add	r3, pc, #412	@ (adr r3, 8008cb8 <_dtoa_r+0x2c8>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fd8b 	bl	8000638 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 fbcf 	bl	80002cc <__adddf3>
 8008b2e:	4604      	mov	r4, r0
 8008b30:	460d      	mov	r5, r1
 8008b32:	f7f8 f831 	bl	8000b98 <__aeabi_d2iz>
 8008b36:	2200      	movs	r2, #0
 8008b38:	4607      	mov	r7, r0
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 ffec 	bl	8000b1c <__aeabi_dcmplt>
 8008b44:	b140      	cbz	r0, 8008b58 <_dtoa_r+0x168>
 8008b46:	4638      	mov	r0, r7
 8008b48:	f7f7 fd0c 	bl	8000564 <__aeabi_i2d>
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	462b      	mov	r3, r5
 8008b50:	f7f7 ffda 	bl	8000b08 <__aeabi_dcmpeq>
 8008b54:	b900      	cbnz	r0, 8008b58 <_dtoa_r+0x168>
 8008b56:	3f01      	subs	r7, #1
 8008b58:	2f16      	cmp	r7, #22
 8008b5a:	d852      	bhi.n	8008c02 <_dtoa_r+0x212>
 8008b5c:	4b5d      	ldr	r3, [pc, #372]	@ (8008cd4 <_dtoa_r+0x2e4>)
 8008b5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b6a:	f7f7 ffd7 	bl	8000b1c <__aeabi_dcmplt>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d049      	beq.n	8008c06 <_dtoa_r+0x216>
 8008b72:	3f01      	subs	r7, #1
 8008b74:	2300      	movs	r3, #0
 8008b76:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b7a:	1b9b      	subs	r3, r3, r6
 8008b7c:	1e5a      	subs	r2, r3, #1
 8008b7e:	bf45      	ittet	mi
 8008b80:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b84:	9300      	strmi	r3, [sp, #0]
 8008b86:	2300      	movpl	r3, #0
 8008b88:	2300      	movmi	r3, #0
 8008b8a:	9206      	str	r2, [sp, #24]
 8008b8c:	bf54      	ite	pl
 8008b8e:	9300      	strpl	r3, [sp, #0]
 8008b90:	9306      	strmi	r3, [sp, #24]
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	db39      	blt.n	8008c0a <_dtoa_r+0x21a>
 8008b96:	9b06      	ldr	r3, [sp, #24]
 8008b98:	970d      	str	r7, [sp, #52]	@ 0x34
 8008b9a:	443b      	add	r3, r7
 8008b9c:	9306      	str	r3, [sp, #24]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	9308      	str	r3, [sp, #32]
 8008ba2:	9b07      	ldr	r3, [sp, #28]
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	d863      	bhi.n	8008c70 <_dtoa_r+0x280>
 8008ba8:	2b05      	cmp	r3, #5
 8008baa:	bfc4      	itt	gt
 8008bac:	3b04      	subgt	r3, #4
 8008bae:	9307      	strgt	r3, [sp, #28]
 8008bb0:	9b07      	ldr	r3, [sp, #28]
 8008bb2:	f1a3 0302 	sub.w	r3, r3, #2
 8008bb6:	bfcc      	ite	gt
 8008bb8:	2400      	movgt	r4, #0
 8008bba:	2401      	movle	r4, #1
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d863      	bhi.n	8008c88 <_dtoa_r+0x298>
 8008bc0:	e8df f003 	tbb	[pc, r3]
 8008bc4:	2b375452 	.word	0x2b375452
 8008bc8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008bcc:	441e      	add	r6, r3
 8008bce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	bfc1      	itttt	gt
 8008bd6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008bda:	409f      	lslgt	r7, r3
 8008bdc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008be0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008be4:	bfd6      	itet	le
 8008be6:	f1c3 0320 	rsble	r3, r3, #32
 8008bea:	ea47 0003 	orrgt.w	r0, r7, r3
 8008bee:	fa04 f003 	lslle.w	r0, r4, r3
 8008bf2:	f7f7 fca7 	bl	8000544 <__aeabi_ui2d>
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008bfc:	3e01      	subs	r6, #1
 8008bfe:	9212      	str	r2, [sp, #72]	@ 0x48
 8008c00:	e776      	b.n	8008af0 <_dtoa_r+0x100>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e7b7      	b.n	8008b76 <_dtoa_r+0x186>
 8008c06:	9010      	str	r0, [sp, #64]	@ 0x40
 8008c08:	e7b6      	b.n	8008b78 <_dtoa_r+0x188>
 8008c0a:	9b00      	ldr	r3, [sp, #0]
 8008c0c:	1bdb      	subs	r3, r3, r7
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	427b      	negs	r3, r7
 8008c12:	9308      	str	r3, [sp, #32]
 8008c14:	2300      	movs	r3, #0
 8008c16:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c18:	e7c3      	b.n	8008ba2 <_dtoa_r+0x1b2>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c20:	eb07 0b03 	add.w	fp, r7, r3
 8008c24:	f10b 0301 	add.w	r3, fp, #1
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	9303      	str	r3, [sp, #12]
 8008c2c:	bfb8      	it	lt
 8008c2e:	2301      	movlt	r3, #1
 8008c30:	e006      	b.n	8008c40 <_dtoa_r+0x250>
 8008c32:	2301      	movs	r3, #1
 8008c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dd28      	ble.n	8008c8e <_dtoa_r+0x29e>
 8008c3c:	469b      	mov	fp, r3
 8008c3e:	9303      	str	r3, [sp, #12]
 8008c40:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008c44:	2100      	movs	r1, #0
 8008c46:	2204      	movs	r2, #4
 8008c48:	f102 0514 	add.w	r5, r2, #20
 8008c4c:	429d      	cmp	r5, r3
 8008c4e:	d926      	bls.n	8008c9e <_dtoa_r+0x2ae>
 8008c50:	6041      	str	r1, [r0, #4]
 8008c52:	4648      	mov	r0, r9
 8008c54:	f000 fd9c 	bl	8009790 <_Balloc>
 8008c58:	4682      	mov	sl, r0
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d142      	bne.n	8008ce4 <_dtoa_r+0x2f4>
 8008c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cd8 <_dtoa_r+0x2e8>)
 8008c60:	4602      	mov	r2, r0
 8008c62:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c66:	e6da      	b.n	8008a1e <_dtoa_r+0x2e>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e7e3      	b.n	8008c34 <_dtoa_r+0x244>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e7d5      	b.n	8008c1c <_dtoa_r+0x22c>
 8008c70:	2401      	movs	r4, #1
 8008c72:	2300      	movs	r3, #0
 8008c74:	9307      	str	r3, [sp, #28]
 8008c76:	9409      	str	r4, [sp, #36]	@ 0x24
 8008c78:	f04f 3bff 	mov.w	fp, #4294967295
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c82:	2312      	movs	r3, #18
 8008c84:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c86:	e7db      	b.n	8008c40 <_dtoa_r+0x250>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c8c:	e7f4      	b.n	8008c78 <_dtoa_r+0x288>
 8008c8e:	f04f 0b01 	mov.w	fp, #1
 8008c92:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c96:	465b      	mov	r3, fp
 8008c98:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008c9c:	e7d0      	b.n	8008c40 <_dtoa_r+0x250>
 8008c9e:	3101      	adds	r1, #1
 8008ca0:	0052      	lsls	r2, r2, #1
 8008ca2:	e7d1      	b.n	8008c48 <_dtoa_r+0x258>
 8008ca4:	f3af 8000 	nop.w
 8008ca8:	636f4361 	.word	0x636f4361
 8008cac:	3fd287a7 	.word	0x3fd287a7
 8008cb0:	8b60c8b3 	.word	0x8b60c8b3
 8008cb4:	3fc68a28 	.word	0x3fc68a28
 8008cb8:	509f79fb 	.word	0x509f79fb
 8008cbc:	3fd34413 	.word	0x3fd34413
 8008cc0:	0800bdf9 	.word	0x0800bdf9
 8008cc4:	0800be10 	.word	0x0800be10
 8008cc8:	7ff00000 	.word	0x7ff00000
 8008ccc:	0800bdc9 	.word	0x0800bdc9
 8008cd0:	3ff80000 	.word	0x3ff80000
 8008cd4:	0800bf60 	.word	0x0800bf60
 8008cd8:	0800be68 	.word	0x0800be68
 8008cdc:	0800bdf5 	.word	0x0800bdf5
 8008ce0:	0800bdc8 	.word	0x0800bdc8
 8008ce4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ce8:	6018      	str	r0, [r3, #0]
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	2b0e      	cmp	r3, #14
 8008cee:	f200 80a1 	bhi.w	8008e34 <_dtoa_r+0x444>
 8008cf2:	2c00      	cmp	r4, #0
 8008cf4:	f000 809e 	beq.w	8008e34 <_dtoa_r+0x444>
 8008cf8:	2f00      	cmp	r7, #0
 8008cfa:	dd33      	ble.n	8008d64 <_dtoa_r+0x374>
 8008cfc:	4b9c      	ldr	r3, [pc, #624]	@ (8008f70 <_dtoa_r+0x580>)
 8008cfe:	f007 020f 	and.w	r2, r7, #15
 8008d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d06:	ed93 7b00 	vldr	d7, [r3]
 8008d0a:	05f8      	lsls	r0, r7, #23
 8008d0c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008d10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008d14:	d516      	bpl.n	8008d44 <_dtoa_r+0x354>
 8008d16:	4b97      	ldr	r3, [pc, #604]	@ (8008f74 <_dtoa_r+0x584>)
 8008d18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d20:	f7f7 fdb4 	bl	800088c <__aeabi_ddiv>
 8008d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d28:	f004 040f 	and.w	r4, r4, #15
 8008d2c:	2603      	movs	r6, #3
 8008d2e:	4d91      	ldr	r5, [pc, #580]	@ (8008f74 <_dtoa_r+0x584>)
 8008d30:	b954      	cbnz	r4, 8008d48 <_dtoa_r+0x358>
 8008d32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d3a:	f7f7 fda7 	bl	800088c <__aeabi_ddiv>
 8008d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d42:	e028      	b.n	8008d96 <_dtoa_r+0x3a6>
 8008d44:	2602      	movs	r6, #2
 8008d46:	e7f2      	b.n	8008d2e <_dtoa_r+0x33e>
 8008d48:	07e1      	lsls	r1, r4, #31
 8008d4a:	d508      	bpl.n	8008d5e <_dtoa_r+0x36e>
 8008d4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008d50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d54:	f7f7 fc70 	bl	8000638 <__aeabi_dmul>
 8008d58:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008d5c:	3601      	adds	r6, #1
 8008d5e:	1064      	asrs	r4, r4, #1
 8008d60:	3508      	adds	r5, #8
 8008d62:	e7e5      	b.n	8008d30 <_dtoa_r+0x340>
 8008d64:	f000 80af 	beq.w	8008ec6 <_dtoa_r+0x4d6>
 8008d68:	427c      	negs	r4, r7
 8008d6a:	4b81      	ldr	r3, [pc, #516]	@ (8008f70 <_dtoa_r+0x580>)
 8008d6c:	4d81      	ldr	r5, [pc, #516]	@ (8008f74 <_dtoa_r+0x584>)
 8008d6e:	f004 020f 	and.w	r2, r4, #15
 8008d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d7e:	f7f7 fc5b 	bl	8000638 <__aeabi_dmul>
 8008d82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d86:	1124      	asrs	r4, r4, #4
 8008d88:	2300      	movs	r3, #0
 8008d8a:	2602      	movs	r6, #2
 8008d8c:	2c00      	cmp	r4, #0
 8008d8e:	f040 808f 	bne.w	8008eb0 <_dtoa_r+0x4c0>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1d3      	bne.n	8008d3e <_dtoa_r+0x34e>
 8008d96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d98:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8094 	beq.w	8008eca <_dtoa_r+0x4da>
 8008da2:	4b75      	ldr	r3, [pc, #468]	@ (8008f78 <_dtoa_r+0x588>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	4620      	mov	r0, r4
 8008da8:	4629      	mov	r1, r5
 8008daa:	f7f7 feb7 	bl	8000b1c <__aeabi_dcmplt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	f000 808b 	beq.w	8008eca <_dtoa_r+0x4da>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 8087 	beq.w	8008eca <_dtoa_r+0x4da>
 8008dbc:	f1bb 0f00 	cmp.w	fp, #0
 8008dc0:	dd34      	ble.n	8008e2c <_dtoa_r+0x43c>
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4b6d      	ldr	r3, [pc, #436]	@ (8008f7c <_dtoa_r+0x58c>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7f7 fc35 	bl	8000638 <__aeabi_dmul>
 8008dce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dd2:	f107 38ff 	add.w	r8, r7, #4294967295
 8008dd6:	3601      	adds	r6, #1
 8008dd8:	465c      	mov	r4, fp
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7f7 fbc2 	bl	8000564 <__aeabi_i2d>
 8008de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008de4:	f7f7 fc28 	bl	8000638 <__aeabi_dmul>
 8008de8:	4b65      	ldr	r3, [pc, #404]	@ (8008f80 <_dtoa_r+0x590>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	f7f7 fa6e 	bl	80002cc <__adddf3>
 8008df0:	4605      	mov	r5, r0
 8008df2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008df6:	2c00      	cmp	r4, #0
 8008df8:	d16a      	bne.n	8008ed0 <_dtoa_r+0x4e0>
 8008dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dfe:	4b61      	ldr	r3, [pc, #388]	@ (8008f84 <_dtoa_r+0x594>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	f7f7 fa61 	bl	80002c8 <__aeabi_dsub>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4633      	mov	r3, r6
 8008e12:	f7f7 fea1 	bl	8000b58 <__aeabi_dcmpgt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f040 8298 	bne.w	800934c <_dtoa_r+0x95c>
 8008e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e20:	462a      	mov	r2, r5
 8008e22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008e26:	f7f7 fe79 	bl	8000b1c <__aeabi_dcmplt>
 8008e2a:	bb38      	cbnz	r0, 8008e7c <_dtoa_r+0x48c>
 8008e2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008e30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008e34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f2c0 8157 	blt.w	80090ea <_dtoa_r+0x6fa>
 8008e3c:	2f0e      	cmp	r7, #14
 8008e3e:	f300 8154 	bgt.w	80090ea <_dtoa_r+0x6fa>
 8008e42:	4b4b      	ldr	r3, [pc, #300]	@ (8008f70 <_dtoa_r+0x580>)
 8008e44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e48:	ed93 7b00 	vldr	d7, [r3]
 8008e4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	ed8d 7b00 	vstr	d7, [sp]
 8008e54:	f280 80e5 	bge.w	8009022 <_dtoa_r+0x632>
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f300 80e1 	bgt.w	8009022 <_dtoa_r+0x632>
 8008e60:	d10c      	bne.n	8008e7c <_dtoa_r+0x48c>
 8008e62:	4b48      	ldr	r3, [pc, #288]	@ (8008f84 <_dtoa_r+0x594>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	ec51 0b17 	vmov	r0, r1, d7
 8008e6a:	f7f7 fbe5 	bl	8000638 <__aeabi_dmul>
 8008e6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e72:	f7f7 fe67 	bl	8000b44 <__aeabi_dcmpge>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f000 8266 	beq.w	8009348 <_dtoa_r+0x958>
 8008e7c:	2400      	movs	r4, #0
 8008e7e:	4625      	mov	r5, r4
 8008e80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e82:	4656      	mov	r6, sl
 8008e84:	ea6f 0803 	mvn.w	r8, r3
 8008e88:	2700      	movs	r7, #0
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4648      	mov	r0, r9
 8008e8e:	f000 fcbf 	bl	8009810 <_Bfree>
 8008e92:	2d00      	cmp	r5, #0
 8008e94:	f000 80bd 	beq.w	8009012 <_dtoa_r+0x622>
 8008e98:	b12f      	cbz	r7, 8008ea6 <_dtoa_r+0x4b6>
 8008e9a:	42af      	cmp	r7, r5
 8008e9c:	d003      	beq.n	8008ea6 <_dtoa_r+0x4b6>
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	4648      	mov	r0, r9
 8008ea2:	f000 fcb5 	bl	8009810 <_Bfree>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4648      	mov	r0, r9
 8008eaa:	f000 fcb1 	bl	8009810 <_Bfree>
 8008eae:	e0b0      	b.n	8009012 <_dtoa_r+0x622>
 8008eb0:	07e2      	lsls	r2, r4, #31
 8008eb2:	d505      	bpl.n	8008ec0 <_dtoa_r+0x4d0>
 8008eb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008eb8:	f7f7 fbbe 	bl	8000638 <__aeabi_dmul>
 8008ebc:	3601      	adds	r6, #1
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	1064      	asrs	r4, r4, #1
 8008ec2:	3508      	adds	r5, #8
 8008ec4:	e762      	b.n	8008d8c <_dtoa_r+0x39c>
 8008ec6:	2602      	movs	r6, #2
 8008ec8:	e765      	b.n	8008d96 <_dtoa_r+0x3a6>
 8008eca:	9c03      	ldr	r4, [sp, #12]
 8008ecc:	46b8      	mov	r8, r7
 8008ece:	e784      	b.n	8008dda <_dtoa_r+0x3ea>
 8008ed0:	4b27      	ldr	r3, [pc, #156]	@ (8008f70 <_dtoa_r+0x580>)
 8008ed2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ed4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ed8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008edc:	4454      	add	r4, sl
 8008ede:	2900      	cmp	r1, #0
 8008ee0:	d054      	beq.n	8008f8c <_dtoa_r+0x59c>
 8008ee2:	4929      	ldr	r1, [pc, #164]	@ (8008f88 <_dtoa_r+0x598>)
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f7f7 fcd1 	bl	800088c <__aeabi_ddiv>
 8008eea:	4633      	mov	r3, r6
 8008eec:	462a      	mov	r2, r5
 8008eee:	f7f7 f9eb 	bl	80002c8 <__aeabi_dsub>
 8008ef2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ef6:	4656      	mov	r6, sl
 8008ef8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008efc:	f7f7 fe4c 	bl	8000b98 <__aeabi_d2iz>
 8008f00:	4605      	mov	r5, r0
 8008f02:	f7f7 fb2f 	bl	8000564 <__aeabi_i2d>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f0e:	f7f7 f9db 	bl	80002c8 <__aeabi_dsub>
 8008f12:	3530      	adds	r5, #48	@ 0x30
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f1c:	f806 5b01 	strb.w	r5, [r6], #1
 8008f20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f24:	f7f7 fdfa 	bl	8000b1c <__aeabi_dcmplt>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d172      	bne.n	8009012 <_dtoa_r+0x622>
 8008f2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f30:	4911      	ldr	r1, [pc, #68]	@ (8008f78 <_dtoa_r+0x588>)
 8008f32:	2000      	movs	r0, #0
 8008f34:	f7f7 f9c8 	bl	80002c8 <__aeabi_dsub>
 8008f38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f3c:	f7f7 fdee 	bl	8000b1c <__aeabi_dcmplt>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	f040 80b4 	bne.w	80090ae <_dtoa_r+0x6be>
 8008f46:	42a6      	cmp	r6, r4
 8008f48:	f43f af70 	beq.w	8008e2c <_dtoa_r+0x43c>
 8008f4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f50:	4b0a      	ldr	r3, [pc, #40]	@ (8008f7c <_dtoa_r+0x58c>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	f7f7 fb70 	bl	8000638 <__aeabi_dmul>
 8008f58:	4b08      	ldr	r3, [pc, #32]	@ (8008f7c <_dtoa_r+0x58c>)
 8008f5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f5e:	2200      	movs	r2, #0
 8008f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f64:	f7f7 fb68 	bl	8000638 <__aeabi_dmul>
 8008f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f6c:	e7c4      	b.n	8008ef8 <_dtoa_r+0x508>
 8008f6e:	bf00      	nop
 8008f70:	0800bf60 	.word	0x0800bf60
 8008f74:	0800bf38 	.word	0x0800bf38
 8008f78:	3ff00000 	.word	0x3ff00000
 8008f7c:	40240000 	.word	0x40240000
 8008f80:	401c0000 	.word	0x401c0000
 8008f84:	40140000 	.word	0x40140000
 8008f88:	3fe00000 	.word	0x3fe00000
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f7f7 fb52 	bl	8000638 <__aeabi_dmul>
 8008f94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f98:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f9a:	4656      	mov	r6, sl
 8008f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fa0:	f7f7 fdfa 	bl	8000b98 <__aeabi_d2iz>
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	f7f7 fadd 	bl	8000564 <__aeabi_i2d>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fb2:	f7f7 f989 	bl	80002c8 <__aeabi_dsub>
 8008fb6:	3530      	adds	r5, #48	@ 0x30
 8008fb8:	f806 5b01 	strb.w	r5, [r6], #1
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	42a6      	cmp	r6, r4
 8008fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	d124      	bne.n	8009016 <_dtoa_r+0x626>
 8008fcc:	4baf      	ldr	r3, [pc, #700]	@ (800928c <_dtoa_r+0x89c>)
 8008fce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008fd2:	f7f7 f97b 	bl	80002cc <__adddf3>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fde:	f7f7 fdbb 	bl	8000b58 <__aeabi_dcmpgt>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d163      	bne.n	80090ae <_dtoa_r+0x6be>
 8008fe6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fea:	49a8      	ldr	r1, [pc, #672]	@ (800928c <_dtoa_r+0x89c>)
 8008fec:	2000      	movs	r0, #0
 8008fee:	f7f7 f96b 	bl	80002c8 <__aeabi_dsub>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ffa:	f7f7 fd8f 	bl	8000b1c <__aeabi_dcmplt>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f43f af14 	beq.w	8008e2c <_dtoa_r+0x43c>
 8009004:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009006:	1e73      	subs	r3, r6, #1
 8009008:	9313      	str	r3, [sp, #76]	@ 0x4c
 800900a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800900e:	2b30      	cmp	r3, #48	@ 0x30
 8009010:	d0f8      	beq.n	8009004 <_dtoa_r+0x614>
 8009012:	4647      	mov	r7, r8
 8009014:	e03b      	b.n	800908e <_dtoa_r+0x69e>
 8009016:	4b9e      	ldr	r3, [pc, #632]	@ (8009290 <_dtoa_r+0x8a0>)
 8009018:	f7f7 fb0e 	bl	8000638 <__aeabi_dmul>
 800901c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009020:	e7bc      	b.n	8008f9c <_dtoa_r+0x5ac>
 8009022:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009026:	4656      	mov	r6, sl
 8009028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800902c:	4620      	mov	r0, r4
 800902e:	4629      	mov	r1, r5
 8009030:	f7f7 fc2c 	bl	800088c <__aeabi_ddiv>
 8009034:	f7f7 fdb0 	bl	8000b98 <__aeabi_d2iz>
 8009038:	4680      	mov	r8, r0
 800903a:	f7f7 fa93 	bl	8000564 <__aeabi_i2d>
 800903e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009042:	f7f7 faf9 	bl	8000638 <__aeabi_dmul>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4620      	mov	r0, r4
 800904c:	4629      	mov	r1, r5
 800904e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009052:	f7f7 f939 	bl	80002c8 <__aeabi_dsub>
 8009056:	f806 4b01 	strb.w	r4, [r6], #1
 800905a:	9d03      	ldr	r5, [sp, #12]
 800905c:	eba6 040a 	sub.w	r4, r6, sl
 8009060:	42a5      	cmp	r5, r4
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	d133      	bne.n	80090d0 <_dtoa_r+0x6e0>
 8009068:	f7f7 f930 	bl	80002cc <__adddf3>
 800906c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009070:	4604      	mov	r4, r0
 8009072:	460d      	mov	r5, r1
 8009074:	f7f7 fd70 	bl	8000b58 <__aeabi_dcmpgt>
 8009078:	b9c0      	cbnz	r0, 80090ac <_dtoa_r+0x6bc>
 800907a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800907e:	4620      	mov	r0, r4
 8009080:	4629      	mov	r1, r5
 8009082:	f7f7 fd41 	bl	8000b08 <__aeabi_dcmpeq>
 8009086:	b110      	cbz	r0, 800908e <_dtoa_r+0x69e>
 8009088:	f018 0f01 	tst.w	r8, #1
 800908c:	d10e      	bne.n	80090ac <_dtoa_r+0x6bc>
 800908e:	9902      	ldr	r1, [sp, #8]
 8009090:	4648      	mov	r0, r9
 8009092:	f000 fbbd 	bl	8009810 <_Bfree>
 8009096:	2300      	movs	r3, #0
 8009098:	7033      	strb	r3, [r6, #0]
 800909a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800909c:	3701      	adds	r7, #1
 800909e:	601f      	str	r7, [r3, #0]
 80090a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 824b 	beq.w	800953e <_dtoa_r+0xb4e>
 80090a8:	601e      	str	r6, [r3, #0]
 80090aa:	e248      	b.n	800953e <_dtoa_r+0xb4e>
 80090ac:	46b8      	mov	r8, r7
 80090ae:	4633      	mov	r3, r6
 80090b0:	461e      	mov	r6, r3
 80090b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090b6:	2a39      	cmp	r2, #57	@ 0x39
 80090b8:	d106      	bne.n	80090c8 <_dtoa_r+0x6d8>
 80090ba:	459a      	cmp	sl, r3
 80090bc:	d1f8      	bne.n	80090b0 <_dtoa_r+0x6c0>
 80090be:	2230      	movs	r2, #48	@ 0x30
 80090c0:	f108 0801 	add.w	r8, r8, #1
 80090c4:	f88a 2000 	strb.w	r2, [sl]
 80090c8:	781a      	ldrb	r2, [r3, #0]
 80090ca:	3201      	adds	r2, #1
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e7a0      	b.n	8009012 <_dtoa_r+0x622>
 80090d0:	4b6f      	ldr	r3, [pc, #444]	@ (8009290 <_dtoa_r+0x8a0>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	f7f7 fab0 	bl	8000638 <__aeabi_dmul>
 80090d8:	2200      	movs	r2, #0
 80090da:	2300      	movs	r3, #0
 80090dc:	4604      	mov	r4, r0
 80090de:	460d      	mov	r5, r1
 80090e0:	f7f7 fd12 	bl	8000b08 <__aeabi_dcmpeq>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d09f      	beq.n	8009028 <_dtoa_r+0x638>
 80090e8:	e7d1      	b.n	800908e <_dtoa_r+0x69e>
 80090ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090ec:	2a00      	cmp	r2, #0
 80090ee:	f000 80ea 	beq.w	80092c6 <_dtoa_r+0x8d6>
 80090f2:	9a07      	ldr	r2, [sp, #28]
 80090f4:	2a01      	cmp	r2, #1
 80090f6:	f300 80cd 	bgt.w	8009294 <_dtoa_r+0x8a4>
 80090fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	f000 80c1 	beq.w	8009284 <_dtoa_r+0x894>
 8009102:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009106:	9c08      	ldr	r4, [sp, #32]
 8009108:	9e00      	ldr	r6, [sp, #0]
 800910a:	9a00      	ldr	r2, [sp, #0]
 800910c:	441a      	add	r2, r3
 800910e:	9200      	str	r2, [sp, #0]
 8009110:	9a06      	ldr	r2, [sp, #24]
 8009112:	2101      	movs	r1, #1
 8009114:	441a      	add	r2, r3
 8009116:	4648      	mov	r0, r9
 8009118:	9206      	str	r2, [sp, #24]
 800911a:	f000 fc2d 	bl	8009978 <__i2b>
 800911e:	4605      	mov	r5, r0
 8009120:	b166      	cbz	r6, 800913c <_dtoa_r+0x74c>
 8009122:	9b06      	ldr	r3, [sp, #24]
 8009124:	2b00      	cmp	r3, #0
 8009126:	dd09      	ble.n	800913c <_dtoa_r+0x74c>
 8009128:	42b3      	cmp	r3, r6
 800912a:	9a00      	ldr	r2, [sp, #0]
 800912c:	bfa8      	it	ge
 800912e:	4633      	movge	r3, r6
 8009130:	1ad2      	subs	r2, r2, r3
 8009132:	9200      	str	r2, [sp, #0]
 8009134:	9a06      	ldr	r2, [sp, #24]
 8009136:	1af6      	subs	r6, r6, r3
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	9306      	str	r3, [sp, #24]
 800913c:	9b08      	ldr	r3, [sp, #32]
 800913e:	b30b      	cbz	r3, 8009184 <_dtoa_r+0x794>
 8009140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 80c6 	beq.w	80092d4 <_dtoa_r+0x8e4>
 8009148:	2c00      	cmp	r4, #0
 800914a:	f000 80c0 	beq.w	80092ce <_dtoa_r+0x8de>
 800914e:	4629      	mov	r1, r5
 8009150:	4622      	mov	r2, r4
 8009152:	4648      	mov	r0, r9
 8009154:	f000 fcc8 	bl	8009ae8 <__pow5mult>
 8009158:	9a02      	ldr	r2, [sp, #8]
 800915a:	4601      	mov	r1, r0
 800915c:	4605      	mov	r5, r0
 800915e:	4648      	mov	r0, r9
 8009160:	f000 fc20 	bl	80099a4 <__multiply>
 8009164:	9902      	ldr	r1, [sp, #8]
 8009166:	4680      	mov	r8, r0
 8009168:	4648      	mov	r0, r9
 800916a:	f000 fb51 	bl	8009810 <_Bfree>
 800916e:	9b08      	ldr	r3, [sp, #32]
 8009170:	1b1b      	subs	r3, r3, r4
 8009172:	9308      	str	r3, [sp, #32]
 8009174:	f000 80b1 	beq.w	80092da <_dtoa_r+0x8ea>
 8009178:	9a08      	ldr	r2, [sp, #32]
 800917a:	4641      	mov	r1, r8
 800917c:	4648      	mov	r0, r9
 800917e:	f000 fcb3 	bl	8009ae8 <__pow5mult>
 8009182:	9002      	str	r0, [sp, #8]
 8009184:	2101      	movs	r1, #1
 8009186:	4648      	mov	r0, r9
 8009188:	f000 fbf6 	bl	8009978 <__i2b>
 800918c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800918e:	4604      	mov	r4, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 81d8 	beq.w	8009546 <_dtoa_r+0xb56>
 8009196:	461a      	mov	r2, r3
 8009198:	4601      	mov	r1, r0
 800919a:	4648      	mov	r0, r9
 800919c:	f000 fca4 	bl	8009ae8 <__pow5mult>
 80091a0:	9b07      	ldr	r3, [sp, #28]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	4604      	mov	r4, r0
 80091a6:	f300 809f 	bgt.w	80092e8 <_dtoa_r+0x8f8>
 80091aa:	9b04      	ldr	r3, [sp, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f040 8097 	bne.w	80092e0 <_dtoa_r+0x8f0>
 80091b2:	9b05      	ldr	r3, [sp, #20]
 80091b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f040 8093 	bne.w	80092e4 <_dtoa_r+0x8f4>
 80091be:	9b05      	ldr	r3, [sp, #20]
 80091c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091c4:	0d1b      	lsrs	r3, r3, #20
 80091c6:	051b      	lsls	r3, r3, #20
 80091c8:	b133      	cbz	r3, 80091d8 <_dtoa_r+0x7e8>
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	3301      	adds	r3, #1
 80091d4:	9306      	str	r3, [sp, #24]
 80091d6:	2301      	movs	r3, #1
 80091d8:	9308      	str	r3, [sp, #32]
 80091da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 81b8 	beq.w	8009552 <_dtoa_r+0xb62>
 80091e2:	6923      	ldr	r3, [r4, #16]
 80091e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091e8:	6918      	ldr	r0, [r3, #16]
 80091ea:	f000 fb79 	bl	80098e0 <__hi0bits>
 80091ee:	f1c0 0020 	rsb	r0, r0, #32
 80091f2:	9b06      	ldr	r3, [sp, #24]
 80091f4:	4418      	add	r0, r3
 80091f6:	f010 001f 	ands.w	r0, r0, #31
 80091fa:	f000 8082 	beq.w	8009302 <_dtoa_r+0x912>
 80091fe:	f1c0 0320 	rsb	r3, r0, #32
 8009202:	2b04      	cmp	r3, #4
 8009204:	dd73      	ble.n	80092ee <_dtoa_r+0x8fe>
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	f1c0 001c 	rsb	r0, r0, #28
 800920c:	4403      	add	r3, r0
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	9b06      	ldr	r3, [sp, #24]
 8009212:	4403      	add	r3, r0
 8009214:	4406      	add	r6, r0
 8009216:	9306      	str	r3, [sp, #24]
 8009218:	9b00      	ldr	r3, [sp, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd05      	ble.n	800922a <_dtoa_r+0x83a>
 800921e:	9902      	ldr	r1, [sp, #8]
 8009220:	461a      	mov	r2, r3
 8009222:	4648      	mov	r0, r9
 8009224:	f000 fcba 	bl	8009b9c <__lshift>
 8009228:	9002      	str	r0, [sp, #8]
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd05      	ble.n	800923c <_dtoa_r+0x84c>
 8009230:	4621      	mov	r1, r4
 8009232:	461a      	mov	r2, r3
 8009234:	4648      	mov	r0, r9
 8009236:	f000 fcb1 	bl	8009b9c <__lshift>
 800923a:	4604      	mov	r4, r0
 800923c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800923e:	2b00      	cmp	r3, #0
 8009240:	d061      	beq.n	8009306 <_dtoa_r+0x916>
 8009242:	9802      	ldr	r0, [sp, #8]
 8009244:	4621      	mov	r1, r4
 8009246:	f000 fd15 	bl	8009c74 <__mcmp>
 800924a:	2800      	cmp	r0, #0
 800924c:	da5b      	bge.n	8009306 <_dtoa_r+0x916>
 800924e:	2300      	movs	r3, #0
 8009250:	9902      	ldr	r1, [sp, #8]
 8009252:	220a      	movs	r2, #10
 8009254:	4648      	mov	r0, r9
 8009256:	f000 fafd 	bl	8009854 <__multadd>
 800925a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925c:	9002      	str	r0, [sp, #8]
 800925e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 8177 	beq.w	8009556 <_dtoa_r+0xb66>
 8009268:	4629      	mov	r1, r5
 800926a:	2300      	movs	r3, #0
 800926c:	220a      	movs	r2, #10
 800926e:	4648      	mov	r0, r9
 8009270:	f000 faf0 	bl	8009854 <__multadd>
 8009274:	f1bb 0f00 	cmp.w	fp, #0
 8009278:	4605      	mov	r5, r0
 800927a:	dc6f      	bgt.n	800935c <_dtoa_r+0x96c>
 800927c:	9b07      	ldr	r3, [sp, #28]
 800927e:	2b02      	cmp	r3, #2
 8009280:	dc49      	bgt.n	8009316 <_dtoa_r+0x926>
 8009282:	e06b      	b.n	800935c <_dtoa_r+0x96c>
 8009284:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009286:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800928a:	e73c      	b.n	8009106 <_dtoa_r+0x716>
 800928c:	3fe00000 	.word	0x3fe00000
 8009290:	40240000 	.word	0x40240000
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	1e5c      	subs	r4, r3, #1
 8009298:	9b08      	ldr	r3, [sp, #32]
 800929a:	42a3      	cmp	r3, r4
 800929c:	db09      	blt.n	80092b2 <_dtoa_r+0x8c2>
 800929e:	1b1c      	subs	r4, r3, r4
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f6bf af30 	bge.w	8009108 <_dtoa_r+0x718>
 80092a8:	9b00      	ldr	r3, [sp, #0]
 80092aa:	9a03      	ldr	r2, [sp, #12]
 80092ac:	1a9e      	subs	r6, r3, r2
 80092ae:	2300      	movs	r3, #0
 80092b0:	e72b      	b.n	800910a <_dtoa_r+0x71a>
 80092b2:	9b08      	ldr	r3, [sp, #32]
 80092b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092b6:	9408      	str	r4, [sp, #32]
 80092b8:	1ae3      	subs	r3, r4, r3
 80092ba:	441a      	add	r2, r3
 80092bc:	9e00      	ldr	r6, [sp, #0]
 80092be:	9b03      	ldr	r3, [sp, #12]
 80092c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80092c2:	2400      	movs	r4, #0
 80092c4:	e721      	b.n	800910a <_dtoa_r+0x71a>
 80092c6:	9c08      	ldr	r4, [sp, #32]
 80092c8:	9e00      	ldr	r6, [sp, #0]
 80092ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80092cc:	e728      	b.n	8009120 <_dtoa_r+0x730>
 80092ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80092d2:	e751      	b.n	8009178 <_dtoa_r+0x788>
 80092d4:	9a08      	ldr	r2, [sp, #32]
 80092d6:	9902      	ldr	r1, [sp, #8]
 80092d8:	e750      	b.n	800917c <_dtoa_r+0x78c>
 80092da:	f8cd 8008 	str.w	r8, [sp, #8]
 80092de:	e751      	b.n	8009184 <_dtoa_r+0x794>
 80092e0:	2300      	movs	r3, #0
 80092e2:	e779      	b.n	80091d8 <_dtoa_r+0x7e8>
 80092e4:	9b04      	ldr	r3, [sp, #16]
 80092e6:	e777      	b.n	80091d8 <_dtoa_r+0x7e8>
 80092e8:	2300      	movs	r3, #0
 80092ea:	9308      	str	r3, [sp, #32]
 80092ec:	e779      	b.n	80091e2 <_dtoa_r+0x7f2>
 80092ee:	d093      	beq.n	8009218 <_dtoa_r+0x828>
 80092f0:	9a00      	ldr	r2, [sp, #0]
 80092f2:	331c      	adds	r3, #28
 80092f4:	441a      	add	r2, r3
 80092f6:	9200      	str	r2, [sp, #0]
 80092f8:	9a06      	ldr	r2, [sp, #24]
 80092fa:	441a      	add	r2, r3
 80092fc:	441e      	add	r6, r3
 80092fe:	9206      	str	r2, [sp, #24]
 8009300:	e78a      	b.n	8009218 <_dtoa_r+0x828>
 8009302:	4603      	mov	r3, r0
 8009304:	e7f4      	b.n	80092f0 <_dtoa_r+0x900>
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	46b8      	mov	r8, r7
 800930c:	dc20      	bgt.n	8009350 <_dtoa_r+0x960>
 800930e:	469b      	mov	fp, r3
 8009310:	9b07      	ldr	r3, [sp, #28]
 8009312:	2b02      	cmp	r3, #2
 8009314:	dd1e      	ble.n	8009354 <_dtoa_r+0x964>
 8009316:	f1bb 0f00 	cmp.w	fp, #0
 800931a:	f47f adb1 	bne.w	8008e80 <_dtoa_r+0x490>
 800931e:	4621      	mov	r1, r4
 8009320:	465b      	mov	r3, fp
 8009322:	2205      	movs	r2, #5
 8009324:	4648      	mov	r0, r9
 8009326:	f000 fa95 	bl	8009854 <__multadd>
 800932a:	4601      	mov	r1, r0
 800932c:	4604      	mov	r4, r0
 800932e:	9802      	ldr	r0, [sp, #8]
 8009330:	f000 fca0 	bl	8009c74 <__mcmp>
 8009334:	2800      	cmp	r0, #0
 8009336:	f77f ada3 	ble.w	8008e80 <_dtoa_r+0x490>
 800933a:	4656      	mov	r6, sl
 800933c:	2331      	movs	r3, #49	@ 0x31
 800933e:	f806 3b01 	strb.w	r3, [r6], #1
 8009342:	f108 0801 	add.w	r8, r8, #1
 8009346:	e59f      	b.n	8008e88 <_dtoa_r+0x498>
 8009348:	9c03      	ldr	r4, [sp, #12]
 800934a:	46b8      	mov	r8, r7
 800934c:	4625      	mov	r5, r4
 800934e:	e7f4      	b.n	800933a <_dtoa_r+0x94a>
 8009350:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 8101 	beq.w	800955e <_dtoa_r+0xb6e>
 800935c:	2e00      	cmp	r6, #0
 800935e:	dd05      	ble.n	800936c <_dtoa_r+0x97c>
 8009360:	4629      	mov	r1, r5
 8009362:	4632      	mov	r2, r6
 8009364:	4648      	mov	r0, r9
 8009366:	f000 fc19 	bl	8009b9c <__lshift>
 800936a:	4605      	mov	r5, r0
 800936c:	9b08      	ldr	r3, [sp, #32]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d05c      	beq.n	800942c <_dtoa_r+0xa3c>
 8009372:	6869      	ldr	r1, [r5, #4]
 8009374:	4648      	mov	r0, r9
 8009376:	f000 fa0b 	bl	8009790 <_Balloc>
 800937a:	4606      	mov	r6, r0
 800937c:	b928      	cbnz	r0, 800938a <_dtoa_r+0x99a>
 800937e:	4b82      	ldr	r3, [pc, #520]	@ (8009588 <_dtoa_r+0xb98>)
 8009380:	4602      	mov	r2, r0
 8009382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009386:	f7ff bb4a 	b.w	8008a1e <_dtoa_r+0x2e>
 800938a:	692a      	ldr	r2, [r5, #16]
 800938c:	3202      	adds	r2, #2
 800938e:	0092      	lsls	r2, r2, #2
 8009390:	f105 010c 	add.w	r1, r5, #12
 8009394:	300c      	adds	r0, #12
 8009396:	f7ff fa92 	bl	80088be <memcpy>
 800939a:	2201      	movs	r2, #1
 800939c:	4631      	mov	r1, r6
 800939e:	4648      	mov	r0, r9
 80093a0:	f000 fbfc 	bl	8009b9c <__lshift>
 80093a4:	f10a 0301 	add.w	r3, sl, #1
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	eb0a 030b 	add.w	r3, sl, fp
 80093ae:	9308      	str	r3, [sp, #32]
 80093b0:	9b04      	ldr	r3, [sp, #16]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	462f      	mov	r7, r5
 80093b8:	9306      	str	r3, [sp, #24]
 80093ba:	4605      	mov	r5, r0
 80093bc:	9b00      	ldr	r3, [sp, #0]
 80093be:	9802      	ldr	r0, [sp, #8]
 80093c0:	4621      	mov	r1, r4
 80093c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80093c6:	f7ff fa88 	bl	80088da <quorem>
 80093ca:	4603      	mov	r3, r0
 80093cc:	3330      	adds	r3, #48	@ 0x30
 80093ce:	9003      	str	r0, [sp, #12]
 80093d0:	4639      	mov	r1, r7
 80093d2:	9802      	ldr	r0, [sp, #8]
 80093d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093d6:	f000 fc4d 	bl	8009c74 <__mcmp>
 80093da:	462a      	mov	r2, r5
 80093dc:	9004      	str	r0, [sp, #16]
 80093de:	4621      	mov	r1, r4
 80093e0:	4648      	mov	r0, r9
 80093e2:	f000 fc63 	bl	8009cac <__mdiff>
 80093e6:	68c2      	ldr	r2, [r0, #12]
 80093e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ea:	4606      	mov	r6, r0
 80093ec:	bb02      	cbnz	r2, 8009430 <_dtoa_r+0xa40>
 80093ee:	4601      	mov	r1, r0
 80093f0:	9802      	ldr	r0, [sp, #8]
 80093f2:	f000 fc3f 	bl	8009c74 <__mcmp>
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	4602      	mov	r2, r0
 80093fa:	4631      	mov	r1, r6
 80093fc:	4648      	mov	r0, r9
 80093fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8009400:	9309      	str	r3, [sp, #36]	@ 0x24
 8009402:	f000 fa05 	bl	8009810 <_Bfree>
 8009406:	9b07      	ldr	r3, [sp, #28]
 8009408:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800940a:	9e00      	ldr	r6, [sp, #0]
 800940c:	ea42 0103 	orr.w	r1, r2, r3
 8009410:	9b06      	ldr	r3, [sp, #24]
 8009412:	4319      	orrs	r1, r3
 8009414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009416:	d10d      	bne.n	8009434 <_dtoa_r+0xa44>
 8009418:	2b39      	cmp	r3, #57	@ 0x39
 800941a:	d027      	beq.n	800946c <_dtoa_r+0xa7c>
 800941c:	9a04      	ldr	r2, [sp, #16]
 800941e:	2a00      	cmp	r2, #0
 8009420:	dd01      	ble.n	8009426 <_dtoa_r+0xa36>
 8009422:	9b03      	ldr	r3, [sp, #12]
 8009424:	3331      	adds	r3, #49	@ 0x31
 8009426:	f88b 3000 	strb.w	r3, [fp]
 800942a:	e52e      	b.n	8008e8a <_dtoa_r+0x49a>
 800942c:	4628      	mov	r0, r5
 800942e:	e7b9      	b.n	80093a4 <_dtoa_r+0x9b4>
 8009430:	2201      	movs	r2, #1
 8009432:	e7e2      	b.n	80093fa <_dtoa_r+0xa0a>
 8009434:	9904      	ldr	r1, [sp, #16]
 8009436:	2900      	cmp	r1, #0
 8009438:	db04      	blt.n	8009444 <_dtoa_r+0xa54>
 800943a:	9807      	ldr	r0, [sp, #28]
 800943c:	4301      	orrs	r1, r0
 800943e:	9806      	ldr	r0, [sp, #24]
 8009440:	4301      	orrs	r1, r0
 8009442:	d120      	bne.n	8009486 <_dtoa_r+0xa96>
 8009444:	2a00      	cmp	r2, #0
 8009446:	ddee      	ble.n	8009426 <_dtoa_r+0xa36>
 8009448:	9902      	ldr	r1, [sp, #8]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	2201      	movs	r2, #1
 800944e:	4648      	mov	r0, r9
 8009450:	f000 fba4 	bl	8009b9c <__lshift>
 8009454:	4621      	mov	r1, r4
 8009456:	9002      	str	r0, [sp, #8]
 8009458:	f000 fc0c 	bl	8009c74 <__mcmp>
 800945c:	2800      	cmp	r0, #0
 800945e:	9b00      	ldr	r3, [sp, #0]
 8009460:	dc02      	bgt.n	8009468 <_dtoa_r+0xa78>
 8009462:	d1e0      	bne.n	8009426 <_dtoa_r+0xa36>
 8009464:	07da      	lsls	r2, r3, #31
 8009466:	d5de      	bpl.n	8009426 <_dtoa_r+0xa36>
 8009468:	2b39      	cmp	r3, #57	@ 0x39
 800946a:	d1da      	bne.n	8009422 <_dtoa_r+0xa32>
 800946c:	2339      	movs	r3, #57	@ 0x39
 800946e:	f88b 3000 	strb.w	r3, [fp]
 8009472:	4633      	mov	r3, r6
 8009474:	461e      	mov	r6, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800947c:	2a39      	cmp	r2, #57	@ 0x39
 800947e:	d04e      	beq.n	800951e <_dtoa_r+0xb2e>
 8009480:	3201      	adds	r2, #1
 8009482:	701a      	strb	r2, [r3, #0]
 8009484:	e501      	b.n	8008e8a <_dtoa_r+0x49a>
 8009486:	2a00      	cmp	r2, #0
 8009488:	dd03      	ble.n	8009492 <_dtoa_r+0xaa2>
 800948a:	2b39      	cmp	r3, #57	@ 0x39
 800948c:	d0ee      	beq.n	800946c <_dtoa_r+0xa7c>
 800948e:	3301      	adds	r3, #1
 8009490:	e7c9      	b.n	8009426 <_dtoa_r+0xa36>
 8009492:	9a00      	ldr	r2, [sp, #0]
 8009494:	9908      	ldr	r1, [sp, #32]
 8009496:	f802 3c01 	strb.w	r3, [r2, #-1]
 800949a:	428a      	cmp	r2, r1
 800949c:	d028      	beq.n	80094f0 <_dtoa_r+0xb00>
 800949e:	9902      	ldr	r1, [sp, #8]
 80094a0:	2300      	movs	r3, #0
 80094a2:	220a      	movs	r2, #10
 80094a4:	4648      	mov	r0, r9
 80094a6:	f000 f9d5 	bl	8009854 <__multadd>
 80094aa:	42af      	cmp	r7, r5
 80094ac:	9002      	str	r0, [sp, #8]
 80094ae:	f04f 0300 	mov.w	r3, #0
 80094b2:	f04f 020a 	mov.w	r2, #10
 80094b6:	4639      	mov	r1, r7
 80094b8:	4648      	mov	r0, r9
 80094ba:	d107      	bne.n	80094cc <_dtoa_r+0xadc>
 80094bc:	f000 f9ca 	bl	8009854 <__multadd>
 80094c0:	4607      	mov	r7, r0
 80094c2:	4605      	mov	r5, r0
 80094c4:	9b00      	ldr	r3, [sp, #0]
 80094c6:	3301      	adds	r3, #1
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	e777      	b.n	80093bc <_dtoa_r+0x9cc>
 80094cc:	f000 f9c2 	bl	8009854 <__multadd>
 80094d0:	4629      	mov	r1, r5
 80094d2:	4607      	mov	r7, r0
 80094d4:	2300      	movs	r3, #0
 80094d6:	220a      	movs	r2, #10
 80094d8:	4648      	mov	r0, r9
 80094da:	f000 f9bb 	bl	8009854 <__multadd>
 80094de:	4605      	mov	r5, r0
 80094e0:	e7f0      	b.n	80094c4 <_dtoa_r+0xad4>
 80094e2:	f1bb 0f00 	cmp.w	fp, #0
 80094e6:	bfcc      	ite	gt
 80094e8:	465e      	movgt	r6, fp
 80094ea:	2601      	movle	r6, #1
 80094ec:	4456      	add	r6, sl
 80094ee:	2700      	movs	r7, #0
 80094f0:	9902      	ldr	r1, [sp, #8]
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	2201      	movs	r2, #1
 80094f6:	4648      	mov	r0, r9
 80094f8:	f000 fb50 	bl	8009b9c <__lshift>
 80094fc:	4621      	mov	r1, r4
 80094fe:	9002      	str	r0, [sp, #8]
 8009500:	f000 fbb8 	bl	8009c74 <__mcmp>
 8009504:	2800      	cmp	r0, #0
 8009506:	dcb4      	bgt.n	8009472 <_dtoa_r+0xa82>
 8009508:	d102      	bne.n	8009510 <_dtoa_r+0xb20>
 800950a:	9b00      	ldr	r3, [sp, #0]
 800950c:	07db      	lsls	r3, r3, #31
 800950e:	d4b0      	bmi.n	8009472 <_dtoa_r+0xa82>
 8009510:	4633      	mov	r3, r6
 8009512:	461e      	mov	r6, r3
 8009514:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009518:	2a30      	cmp	r2, #48	@ 0x30
 800951a:	d0fa      	beq.n	8009512 <_dtoa_r+0xb22>
 800951c:	e4b5      	b.n	8008e8a <_dtoa_r+0x49a>
 800951e:	459a      	cmp	sl, r3
 8009520:	d1a8      	bne.n	8009474 <_dtoa_r+0xa84>
 8009522:	2331      	movs	r3, #49	@ 0x31
 8009524:	f108 0801 	add.w	r8, r8, #1
 8009528:	f88a 3000 	strb.w	r3, [sl]
 800952c:	e4ad      	b.n	8008e8a <_dtoa_r+0x49a>
 800952e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009530:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800958c <_dtoa_r+0xb9c>
 8009534:	b11b      	cbz	r3, 800953e <_dtoa_r+0xb4e>
 8009536:	f10a 0308 	add.w	r3, sl, #8
 800953a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	4650      	mov	r0, sl
 8009540:	b017      	add	sp, #92	@ 0x5c
 8009542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009546:	9b07      	ldr	r3, [sp, #28]
 8009548:	2b01      	cmp	r3, #1
 800954a:	f77f ae2e 	ble.w	80091aa <_dtoa_r+0x7ba>
 800954e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009550:	9308      	str	r3, [sp, #32]
 8009552:	2001      	movs	r0, #1
 8009554:	e64d      	b.n	80091f2 <_dtoa_r+0x802>
 8009556:	f1bb 0f00 	cmp.w	fp, #0
 800955a:	f77f aed9 	ble.w	8009310 <_dtoa_r+0x920>
 800955e:	4656      	mov	r6, sl
 8009560:	9802      	ldr	r0, [sp, #8]
 8009562:	4621      	mov	r1, r4
 8009564:	f7ff f9b9 	bl	80088da <quorem>
 8009568:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800956c:	f806 3b01 	strb.w	r3, [r6], #1
 8009570:	eba6 020a 	sub.w	r2, r6, sl
 8009574:	4593      	cmp	fp, r2
 8009576:	ddb4      	ble.n	80094e2 <_dtoa_r+0xaf2>
 8009578:	9902      	ldr	r1, [sp, #8]
 800957a:	2300      	movs	r3, #0
 800957c:	220a      	movs	r2, #10
 800957e:	4648      	mov	r0, r9
 8009580:	f000 f968 	bl	8009854 <__multadd>
 8009584:	9002      	str	r0, [sp, #8]
 8009586:	e7eb      	b.n	8009560 <_dtoa_r+0xb70>
 8009588:	0800be68 	.word	0x0800be68
 800958c:	0800bdec 	.word	0x0800bdec

08009590 <_free_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4605      	mov	r5, r0
 8009594:	2900      	cmp	r1, #0
 8009596:	d041      	beq.n	800961c <_free_r+0x8c>
 8009598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800959c:	1f0c      	subs	r4, r1, #4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	bfb8      	it	lt
 80095a2:	18e4      	addlt	r4, r4, r3
 80095a4:	f000 f8e8 	bl	8009778 <__malloc_lock>
 80095a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009620 <_free_r+0x90>)
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	b933      	cbnz	r3, 80095bc <_free_r+0x2c>
 80095ae:	6063      	str	r3, [r4, #4]
 80095b0:	6014      	str	r4, [r2, #0]
 80095b2:	4628      	mov	r0, r5
 80095b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b8:	f000 b8e4 	b.w	8009784 <__malloc_unlock>
 80095bc:	42a3      	cmp	r3, r4
 80095be:	d908      	bls.n	80095d2 <_free_r+0x42>
 80095c0:	6820      	ldr	r0, [r4, #0]
 80095c2:	1821      	adds	r1, r4, r0
 80095c4:	428b      	cmp	r3, r1
 80095c6:	bf01      	itttt	eq
 80095c8:	6819      	ldreq	r1, [r3, #0]
 80095ca:	685b      	ldreq	r3, [r3, #4]
 80095cc:	1809      	addeq	r1, r1, r0
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	e7ed      	b.n	80095ae <_free_r+0x1e>
 80095d2:	461a      	mov	r2, r3
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	b10b      	cbz	r3, 80095dc <_free_r+0x4c>
 80095d8:	42a3      	cmp	r3, r4
 80095da:	d9fa      	bls.n	80095d2 <_free_r+0x42>
 80095dc:	6811      	ldr	r1, [r2, #0]
 80095de:	1850      	adds	r0, r2, r1
 80095e0:	42a0      	cmp	r0, r4
 80095e2:	d10b      	bne.n	80095fc <_free_r+0x6c>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	4401      	add	r1, r0
 80095e8:	1850      	adds	r0, r2, r1
 80095ea:	4283      	cmp	r3, r0
 80095ec:	6011      	str	r1, [r2, #0]
 80095ee:	d1e0      	bne.n	80095b2 <_free_r+0x22>
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	6053      	str	r3, [r2, #4]
 80095f6:	4408      	add	r0, r1
 80095f8:	6010      	str	r0, [r2, #0]
 80095fa:	e7da      	b.n	80095b2 <_free_r+0x22>
 80095fc:	d902      	bls.n	8009604 <_free_r+0x74>
 80095fe:	230c      	movs	r3, #12
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	e7d6      	b.n	80095b2 <_free_r+0x22>
 8009604:	6820      	ldr	r0, [r4, #0]
 8009606:	1821      	adds	r1, r4, r0
 8009608:	428b      	cmp	r3, r1
 800960a:	bf04      	itt	eq
 800960c:	6819      	ldreq	r1, [r3, #0]
 800960e:	685b      	ldreq	r3, [r3, #4]
 8009610:	6063      	str	r3, [r4, #4]
 8009612:	bf04      	itt	eq
 8009614:	1809      	addeq	r1, r1, r0
 8009616:	6021      	streq	r1, [r4, #0]
 8009618:	6054      	str	r4, [r2, #4]
 800961a:	e7ca      	b.n	80095b2 <_free_r+0x22>
 800961c:	bd38      	pop	{r3, r4, r5, pc}
 800961e:	bf00      	nop
 8009620:	20000e84 	.word	0x20000e84

08009624 <malloc>:
 8009624:	4b02      	ldr	r3, [pc, #8]	@ (8009630 <malloc+0xc>)
 8009626:	4601      	mov	r1, r0
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	f000 b825 	b.w	8009678 <_malloc_r>
 800962e:	bf00      	nop
 8009630:	20000018 	.word	0x20000018

08009634 <sbrk_aligned>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	4e0f      	ldr	r6, [pc, #60]	@ (8009674 <sbrk_aligned+0x40>)
 8009638:	460c      	mov	r4, r1
 800963a:	6831      	ldr	r1, [r6, #0]
 800963c:	4605      	mov	r5, r0
 800963e:	b911      	cbnz	r1, 8009646 <sbrk_aligned+0x12>
 8009640:	f000 fe3e 	bl	800a2c0 <_sbrk_r>
 8009644:	6030      	str	r0, [r6, #0]
 8009646:	4621      	mov	r1, r4
 8009648:	4628      	mov	r0, r5
 800964a:	f000 fe39 	bl	800a2c0 <_sbrk_r>
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	d103      	bne.n	800965a <sbrk_aligned+0x26>
 8009652:	f04f 34ff 	mov.w	r4, #4294967295
 8009656:	4620      	mov	r0, r4
 8009658:	bd70      	pop	{r4, r5, r6, pc}
 800965a:	1cc4      	adds	r4, r0, #3
 800965c:	f024 0403 	bic.w	r4, r4, #3
 8009660:	42a0      	cmp	r0, r4
 8009662:	d0f8      	beq.n	8009656 <sbrk_aligned+0x22>
 8009664:	1a21      	subs	r1, r4, r0
 8009666:	4628      	mov	r0, r5
 8009668:	f000 fe2a 	bl	800a2c0 <_sbrk_r>
 800966c:	3001      	adds	r0, #1
 800966e:	d1f2      	bne.n	8009656 <sbrk_aligned+0x22>
 8009670:	e7ef      	b.n	8009652 <sbrk_aligned+0x1e>
 8009672:	bf00      	nop
 8009674:	20000e80 	.word	0x20000e80

08009678 <_malloc_r>:
 8009678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800967c:	1ccd      	adds	r5, r1, #3
 800967e:	f025 0503 	bic.w	r5, r5, #3
 8009682:	3508      	adds	r5, #8
 8009684:	2d0c      	cmp	r5, #12
 8009686:	bf38      	it	cc
 8009688:	250c      	movcc	r5, #12
 800968a:	2d00      	cmp	r5, #0
 800968c:	4606      	mov	r6, r0
 800968e:	db01      	blt.n	8009694 <_malloc_r+0x1c>
 8009690:	42a9      	cmp	r1, r5
 8009692:	d904      	bls.n	800969e <_malloc_r+0x26>
 8009694:	230c      	movs	r3, #12
 8009696:	6033      	str	r3, [r6, #0]
 8009698:	2000      	movs	r0, #0
 800969a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009774 <_malloc_r+0xfc>
 80096a2:	f000 f869 	bl	8009778 <__malloc_lock>
 80096a6:	f8d8 3000 	ldr.w	r3, [r8]
 80096aa:	461c      	mov	r4, r3
 80096ac:	bb44      	cbnz	r4, 8009700 <_malloc_r+0x88>
 80096ae:	4629      	mov	r1, r5
 80096b0:	4630      	mov	r0, r6
 80096b2:	f7ff ffbf 	bl	8009634 <sbrk_aligned>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	4604      	mov	r4, r0
 80096ba:	d158      	bne.n	800976e <_malloc_r+0xf6>
 80096bc:	f8d8 4000 	ldr.w	r4, [r8]
 80096c0:	4627      	mov	r7, r4
 80096c2:	2f00      	cmp	r7, #0
 80096c4:	d143      	bne.n	800974e <_malloc_r+0xd6>
 80096c6:	2c00      	cmp	r4, #0
 80096c8:	d04b      	beq.n	8009762 <_malloc_r+0xea>
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	4639      	mov	r1, r7
 80096ce:	4630      	mov	r0, r6
 80096d0:	eb04 0903 	add.w	r9, r4, r3
 80096d4:	f000 fdf4 	bl	800a2c0 <_sbrk_r>
 80096d8:	4581      	cmp	r9, r0
 80096da:	d142      	bne.n	8009762 <_malloc_r+0xea>
 80096dc:	6821      	ldr	r1, [r4, #0]
 80096de:	1a6d      	subs	r5, r5, r1
 80096e0:	4629      	mov	r1, r5
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7ff ffa6 	bl	8009634 <sbrk_aligned>
 80096e8:	3001      	adds	r0, #1
 80096ea:	d03a      	beq.n	8009762 <_malloc_r+0xea>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	442b      	add	r3, r5
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	f8d8 3000 	ldr.w	r3, [r8]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	bb62      	cbnz	r2, 8009754 <_malloc_r+0xdc>
 80096fa:	f8c8 7000 	str.w	r7, [r8]
 80096fe:	e00f      	b.n	8009720 <_malloc_r+0xa8>
 8009700:	6822      	ldr	r2, [r4, #0]
 8009702:	1b52      	subs	r2, r2, r5
 8009704:	d420      	bmi.n	8009748 <_malloc_r+0xd0>
 8009706:	2a0b      	cmp	r2, #11
 8009708:	d917      	bls.n	800973a <_malloc_r+0xc2>
 800970a:	1961      	adds	r1, r4, r5
 800970c:	42a3      	cmp	r3, r4
 800970e:	6025      	str	r5, [r4, #0]
 8009710:	bf18      	it	ne
 8009712:	6059      	strne	r1, [r3, #4]
 8009714:	6863      	ldr	r3, [r4, #4]
 8009716:	bf08      	it	eq
 8009718:	f8c8 1000 	streq.w	r1, [r8]
 800971c:	5162      	str	r2, [r4, r5]
 800971e:	604b      	str	r3, [r1, #4]
 8009720:	4630      	mov	r0, r6
 8009722:	f000 f82f 	bl	8009784 <__malloc_unlock>
 8009726:	f104 000b 	add.w	r0, r4, #11
 800972a:	1d23      	adds	r3, r4, #4
 800972c:	f020 0007 	bic.w	r0, r0, #7
 8009730:	1ac2      	subs	r2, r0, r3
 8009732:	bf1c      	itt	ne
 8009734:	1a1b      	subne	r3, r3, r0
 8009736:	50a3      	strne	r3, [r4, r2]
 8009738:	e7af      	b.n	800969a <_malloc_r+0x22>
 800973a:	6862      	ldr	r2, [r4, #4]
 800973c:	42a3      	cmp	r3, r4
 800973e:	bf0c      	ite	eq
 8009740:	f8c8 2000 	streq.w	r2, [r8]
 8009744:	605a      	strne	r2, [r3, #4]
 8009746:	e7eb      	b.n	8009720 <_malloc_r+0xa8>
 8009748:	4623      	mov	r3, r4
 800974a:	6864      	ldr	r4, [r4, #4]
 800974c:	e7ae      	b.n	80096ac <_malloc_r+0x34>
 800974e:	463c      	mov	r4, r7
 8009750:	687f      	ldr	r7, [r7, #4]
 8009752:	e7b6      	b.n	80096c2 <_malloc_r+0x4a>
 8009754:	461a      	mov	r2, r3
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	42a3      	cmp	r3, r4
 800975a:	d1fb      	bne.n	8009754 <_malloc_r+0xdc>
 800975c:	2300      	movs	r3, #0
 800975e:	6053      	str	r3, [r2, #4]
 8009760:	e7de      	b.n	8009720 <_malloc_r+0xa8>
 8009762:	230c      	movs	r3, #12
 8009764:	6033      	str	r3, [r6, #0]
 8009766:	4630      	mov	r0, r6
 8009768:	f000 f80c 	bl	8009784 <__malloc_unlock>
 800976c:	e794      	b.n	8009698 <_malloc_r+0x20>
 800976e:	6005      	str	r5, [r0, #0]
 8009770:	e7d6      	b.n	8009720 <_malloc_r+0xa8>
 8009772:	bf00      	nop
 8009774:	20000e84 	.word	0x20000e84

08009778 <__malloc_lock>:
 8009778:	4801      	ldr	r0, [pc, #4]	@ (8009780 <__malloc_lock+0x8>)
 800977a:	f7ff b89e 	b.w	80088ba <__retarget_lock_acquire_recursive>
 800977e:	bf00      	nop
 8009780:	20000e7c 	.word	0x20000e7c

08009784 <__malloc_unlock>:
 8009784:	4801      	ldr	r0, [pc, #4]	@ (800978c <__malloc_unlock+0x8>)
 8009786:	f7ff b899 	b.w	80088bc <__retarget_lock_release_recursive>
 800978a:	bf00      	nop
 800978c:	20000e7c 	.word	0x20000e7c

08009790 <_Balloc>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	69c6      	ldr	r6, [r0, #28]
 8009794:	4604      	mov	r4, r0
 8009796:	460d      	mov	r5, r1
 8009798:	b976      	cbnz	r6, 80097b8 <_Balloc+0x28>
 800979a:	2010      	movs	r0, #16
 800979c:	f7ff ff42 	bl	8009624 <malloc>
 80097a0:	4602      	mov	r2, r0
 80097a2:	61e0      	str	r0, [r4, #28]
 80097a4:	b920      	cbnz	r0, 80097b0 <_Balloc+0x20>
 80097a6:	4b18      	ldr	r3, [pc, #96]	@ (8009808 <_Balloc+0x78>)
 80097a8:	4818      	ldr	r0, [pc, #96]	@ (800980c <_Balloc+0x7c>)
 80097aa:	216b      	movs	r1, #107	@ 0x6b
 80097ac:	f000 fd98 	bl	800a2e0 <__assert_func>
 80097b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097b4:	6006      	str	r6, [r0, #0]
 80097b6:	60c6      	str	r6, [r0, #12]
 80097b8:	69e6      	ldr	r6, [r4, #28]
 80097ba:	68f3      	ldr	r3, [r6, #12]
 80097bc:	b183      	cbz	r3, 80097e0 <_Balloc+0x50>
 80097be:	69e3      	ldr	r3, [r4, #28]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097c6:	b9b8      	cbnz	r0, 80097f8 <_Balloc+0x68>
 80097c8:	2101      	movs	r1, #1
 80097ca:	fa01 f605 	lsl.w	r6, r1, r5
 80097ce:	1d72      	adds	r2, r6, #5
 80097d0:	0092      	lsls	r2, r2, #2
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 fda2 	bl	800a31c <_calloc_r>
 80097d8:	b160      	cbz	r0, 80097f4 <_Balloc+0x64>
 80097da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097de:	e00e      	b.n	80097fe <_Balloc+0x6e>
 80097e0:	2221      	movs	r2, #33	@ 0x21
 80097e2:	2104      	movs	r1, #4
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fd99 	bl	800a31c <_calloc_r>
 80097ea:	69e3      	ldr	r3, [r4, #28]
 80097ec:	60f0      	str	r0, [r6, #12]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e4      	bne.n	80097be <_Balloc+0x2e>
 80097f4:	2000      	movs	r0, #0
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
 80097f8:	6802      	ldr	r2, [r0, #0]
 80097fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097fe:	2300      	movs	r3, #0
 8009800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009804:	e7f7      	b.n	80097f6 <_Balloc+0x66>
 8009806:	bf00      	nop
 8009808:	0800bdf9 	.word	0x0800bdf9
 800980c:	0800be79 	.word	0x0800be79

08009810 <_Bfree>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	69c6      	ldr	r6, [r0, #28]
 8009814:	4605      	mov	r5, r0
 8009816:	460c      	mov	r4, r1
 8009818:	b976      	cbnz	r6, 8009838 <_Bfree+0x28>
 800981a:	2010      	movs	r0, #16
 800981c:	f7ff ff02 	bl	8009624 <malloc>
 8009820:	4602      	mov	r2, r0
 8009822:	61e8      	str	r0, [r5, #28]
 8009824:	b920      	cbnz	r0, 8009830 <_Bfree+0x20>
 8009826:	4b09      	ldr	r3, [pc, #36]	@ (800984c <_Bfree+0x3c>)
 8009828:	4809      	ldr	r0, [pc, #36]	@ (8009850 <_Bfree+0x40>)
 800982a:	218f      	movs	r1, #143	@ 0x8f
 800982c:	f000 fd58 	bl	800a2e0 <__assert_func>
 8009830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009834:	6006      	str	r6, [r0, #0]
 8009836:	60c6      	str	r6, [r0, #12]
 8009838:	b13c      	cbz	r4, 800984a <_Bfree+0x3a>
 800983a:	69eb      	ldr	r3, [r5, #28]
 800983c:	6862      	ldr	r2, [r4, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009844:	6021      	str	r1, [r4, #0]
 8009846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	0800bdf9 	.word	0x0800bdf9
 8009850:	0800be79 	.word	0x0800be79

08009854 <__multadd>:
 8009854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009858:	690d      	ldr	r5, [r1, #16]
 800985a:	4607      	mov	r7, r0
 800985c:	460c      	mov	r4, r1
 800985e:	461e      	mov	r6, r3
 8009860:	f101 0c14 	add.w	ip, r1, #20
 8009864:	2000      	movs	r0, #0
 8009866:	f8dc 3000 	ldr.w	r3, [ip]
 800986a:	b299      	uxth	r1, r3
 800986c:	fb02 6101 	mla	r1, r2, r1, r6
 8009870:	0c1e      	lsrs	r6, r3, #16
 8009872:	0c0b      	lsrs	r3, r1, #16
 8009874:	fb02 3306 	mla	r3, r2, r6, r3
 8009878:	b289      	uxth	r1, r1
 800987a:	3001      	adds	r0, #1
 800987c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009880:	4285      	cmp	r5, r0
 8009882:	f84c 1b04 	str.w	r1, [ip], #4
 8009886:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800988a:	dcec      	bgt.n	8009866 <__multadd+0x12>
 800988c:	b30e      	cbz	r6, 80098d2 <__multadd+0x7e>
 800988e:	68a3      	ldr	r3, [r4, #8]
 8009890:	42ab      	cmp	r3, r5
 8009892:	dc19      	bgt.n	80098c8 <__multadd+0x74>
 8009894:	6861      	ldr	r1, [r4, #4]
 8009896:	4638      	mov	r0, r7
 8009898:	3101      	adds	r1, #1
 800989a:	f7ff ff79 	bl	8009790 <_Balloc>
 800989e:	4680      	mov	r8, r0
 80098a0:	b928      	cbnz	r0, 80098ae <__multadd+0x5a>
 80098a2:	4602      	mov	r2, r0
 80098a4:	4b0c      	ldr	r3, [pc, #48]	@ (80098d8 <__multadd+0x84>)
 80098a6:	480d      	ldr	r0, [pc, #52]	@ (80098dc <__multadd+0x88>)
 80098a8:	21ba      	movs	r1, #186	@ 0xba
 80098aa:	f000 fd19 	bl	800a2e0 <__assert_func>
 80098ae:	6922      	ldr	r2, [r4, #16]
 80098b0:	3202      	adds	r2, #2
 80098b2:	f104 010c 	add.w	r1, r4, #12
 80098b6:	0092      	lsls	r2, r2, #2
 80098b8:	300c      	adds	r0, #12
 80098ba:	f7ff f800 	bl	80088be <memcpy>
 80098be:	4621      	mov	r1, r4
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7ff ffa5 	bl	8009810 <_Bfree>
 80098c6:	4644      	mov	r4, r8
 80098c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098cc:	3501      	adds	r5, #1
 80098ce:	615e      	str	r6, [r3, #20]
 80098d0:	6125      	str	r5, [r4, #16]
 80098d2:	4620      	mov	r0, r4
 80098d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d8:	0800be68 	.word	0x0800be68
 80098dc:	0800be79 	.word	0x0800be79

080098e0 <__hi0bits>:
 80098e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80098e4:	4603      	mov	r3, r0
 80098e6:	bf36      	itet	cc
 80098e8:	0403      	lslcc	r3, r0, #16
 80098ea:	2000      	movcs	r0, #0
 80098ec:	2010      	movcc	r0, #16
 80098ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098f2:	bf3c      	itt	cc
 80098f4:	021b      	lslcc	r3, r3, #8
 80098f6:	3008      	addcc	r0, #8
 80098f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098fc:	bf3c      	itt	cc
 80098fe:	011b      	lslcc	r3, r3, #4
 8009900:	3004      	addcc	r0, #4
 8009902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009906:	bf3c      	itt	cc
 8009908:	009b      	lslcc	r3, r3, #2
 800990a:	3002      	addcc	r0, #2
 800990c:	2b00      	cmp	r3, #0
 800990e:	db05      	blt.n	800991c <__hi0bits+0x3c>
 8009910:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009914:	f100 0001 	add.w	r0, r0, #1
 8009918:	bf08      	it	eq
 800991a:	2020      	moveq	r0, #32
 800991c:	4770      	bx	lr

0800991e <__lo0bits>:
 800991e:	6803      	ldr	r3, [r0, #0]
 8009920:	4602      	mov	r2, r0
 8009922:	f013 0007 	ands.w	r0, r3, #7
 8009926:	d00b      	beq.n	8009940 <__lo0bits+0x22>
 8009928:	07d9      	lsls	r1, r3, #31
 800992a:	d421      	bmi.n	8009970 <__lo0bits+0x52>
 800992c:	0798      	lsls	r0, r3, #30
 800992e:	bf49      	itett	mi
 8009930:	085b      	lsrmi	r3, r3, #1
 8009932:	089b      	lsrpl	r3, r3, #2
 8009934:	2001      	movmi	r0, #1
 8009936:	6013      	strmi	r3, [r2, #0]
 8009938:	bf5c      	itt	pl
 800993a:	6013      	strpl	r3, [r2, #0]
 800993c:	2002      	movpl	r0, #2
 800993e:	4770      	bx	lr
 8009940:	b299      	uxth	r1, r3
 8009942:	b909      	cbnz	r1, 8009948 <__lo0bits+0x2a>
 8009944:	0c1b      	lsrs	r3, r3, #16
 8009946:	2010      	movs	r0, #16
 8009948:	b2d9      	uxtb	r1, r3
 800994a:	b909      	cbnz	r1, 8009950 <__lo0bits+0x32>
 800994c:	3008      	adds	r0, #8
 800994e:	0a1b      	lsrs	r3, r3, #8
 8009950:	0719      	lsls	r1, r3, #28
 8009952:	bf04      	itt	eq
 8009954:	091b      	lsreq	r3, r3, #4
 8009956:	3004      	addeq	r0, #4
 8009958:	0799      	lsls	r1, r3, #30
 800995a:	bf04      	itt	eq
 800995c:	089b      	lsreq	r3, r3, #2
 800995e:	3002      	addeq	r0, #2
 8009960:	07d9      	lsls	r1, r3, #31
 8009962:	d403      	bmi.n	800996c <__lo0bits+0x4e>
 8009964:	085b      	lsrs	r3, r3, #1
 8009966:	f100 0001 	add.w	r0, r0, #1
 800996a:	d003      	beq.n	8009974 <__lo0bits+0x56>
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	4770      	bx	lr
 8009970:	2000      	movs	r0, #0
 8009972:	4770      	bx	lr
 8009974:	2020      	movs	r0, #32
 8009976:	4770      	bx	lr

08009978 <__i2b>:
 8009978:	b510      	push	{r4, lr}
 800997a:	460c      	mov	r4, r1
 800997c:	2101      	movs	r1, #1
 800997e:	f7ff ff07 	bl	8009790 <_Balloc>
 8009982:	4602      	mov	r2, r0
 8009984:	b928      	cbnz	r0, 8009992 <__i2b+0x1a>
 8009986:	4b05      	ldr	r3, [pc, #20]	@ (800999c <__i2b+0x24>)
 8009988:	4805      	ldr	r0, [pc, #20]	@ (80099a0 <__i2b+0x28>)
 800998a:	f240 1145 	movw	r1, #325	@ 0x145
 800998e:	f000 fca7 	bl	800a2e0 <__assert_func>
 8009992:	2301      	movs	r3, #1
 8009994:	6144      	str	r4, [r0, #20]
 8009996:	6103      	str	r3, [r0, #16]
 8009998:	bd10      	pop	{r4, pc}
 800999a:	bf00      	nop
 800999c:	0800be68 	.word	0x0800be68
 80099a0:	0800be79 	.word	0x0800be79

080099a4 <__multiply>:
 80099a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a8:	4617      	mov	r7, r2
 80099aa:	690a      	ldr	r2, [r1, #16]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	bfa8      	it	ge
 80099b2:	463b      	movge	r3, r7
 80099b4:	4689      	mov	r9, r1
 80099b6:	bfa4      	itt	ge
 80099b8:	460f      	movge	r7, r1
 80099ba:	4699      	movge	r9, r3
 80099bc:	693d      	ldr	r5, [r7, #16]
 80099be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	eb05 060a 	add.w	r6, r5, sl
 80099ca:	42b3      	cmp	r3, r6
 80099cc:	b085      	sub	sp, #20
 80099ce:	bfb8      	it	lt
 80099d0:	3101      	addlt	r1, #1
 80099d2:	f7ff fedd 	bl	8009790 <_Balloc>
 80099d6:	b930      	cbnz	r0, 80099e6 <__multiply+0x42>
 80099d8:	4602      	mov	r2, r0
 80099da:	4b41      	ldr	r3, [pc, #260]	@ (8009ae0 <__multiply+0x13c>)
 80099dc:	4841      	ldr	r0, [pc, #260]	@ (8009ae4 <__multiply+0x140>)
 80099de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80099e2:	f000 fc7d 	bl	800a2e0 <__assert_func>
 80099e6:	f100 0414 	add.w	r4, r0, #20
 80099ea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80099ee:	4623      	mov	r3, r4
 80099f0:	2200      	movs	r2, #0
 80099f2:	4573      	cmp	r3, lr
 80099f4:	d320      	bcc.n	8009a38 <__multiply+0x94>
 80099f6:	f107 0814 	add.w	r8, r7, #20
 80099fa:	f109 0114 	add.w	r1, r9, #20
 80099fe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009a02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009a06:	9302      	str	r3, [sp, #8]
 8009a08:	1beb      	subs	r3, r5, r7
 8009a0a:	3b15      	subs	r3, #21
 8009a0c:	f023 0303 	bic.w	r3, r3, #3
 8009a10:	3304      	adds	r3, #4
 8009a12:	3715      	adds	r7, #21
 8009a14:	42bd      	cmp	r5, r7
 8009a16:	bf38      	it	cc
 8009a18:	2304      	movcc	r3, #4
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	9b02      	ldr	r3, [sp, #8]
 8009a1e:	9103      	str	r1, [sp, #12]
 8009a20:	428b      	cmp	r3, r1
 8009a22:	d80c      	bhi.n	8009a3e <__multiply+0x9a>
 8009a24:	2e00      	cmp	r6, #0
 8009a26:	dd03      	ble.n	8009a30 <__multiply+0x8c>
 8009a28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d055      	beq.n	8009adc <__multiply+0x138>
 8009a30:	6106      	str	r6, [r0, #16]
 8009a32:	b005      	add	sp, #20
 8009a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	f843 2b04 	str.w	r2, [r3], #4
 8009a3c:	e7d9      	b.n	80099f2 <__multiply+0x4e>
 8009a3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009a42:	f1ba 0f00 	cmp.w	sl, #0
 8009a46:	d01f      	beq.n	8009a88 <__multiply+0xe4>
 8009a48:	46c4      	mov	ip, r8
 8009a4a:	46a1      	mov	r9, r4
 8009a4c:	2700      	movs	r7, #0
 8009a4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a52:	f8d9 3000 	ldr.w	r3, [r9]
 8009a56:	fa1f fb82 	uxth.w	fp, r2
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009a60:	443b      	add	r3, r7
 8009a62:	f8d9 7000 	ldr.w	r7, [r9]
 8009a66:	0c12      	lsrs	r2, r2, #16
 8009a68:	0c3f      	lsrs	r7, r7, #16
 8009a6a:	fb0a 7202 	mla	r2, sl, r2, r7
 8009a6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a78:	4565      	cmp	r5, ip
 8009a7a:	f849 3b04 	str.w	r3, [r9], #4
 8009a7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009a82:	d8e4      	bhi.n	8009a4e <__multiply+0xaa>
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	50e7      	str	r7, [r4, r3]
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009a8e:	3104      	adds	r1, #4
 8009a90:	f1b9 0f00 	cmp.w	r9, #0
 8009a94:	d020      	beq.n	8009ad8 <__multiply+0x134>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	4647      	mov	r7, r8
 8009a9a:	46a4      	mov	ip, r4
 8009a9c:	f04f 0a00 	mov.w	sl, #0
 8009aa0:	f8b7 b000 	ldrh.w	fp, [r7]
 8009aa4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009aa8:	fb09 220b 	mla	r2, r9, fp, r2
 8009aac:	4452      	add	r2, sl
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ab4:	f84c 3b04 	str.w	r3, [ip], #4
 8009ab8:	f857 3b04 	ldr.w	r3, [r7], #4
 8009abc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ac0:	f8bc 3000 	ldrh.w	r3, [ip]
 8009ac4:	fb09 330a 	mla	r3, r9, sl, r3
 8009ac8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009acc:	42bd      	cmp	r5, r7
 8009ace:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ad2:	d8e5      	bhi.n	8009aa0 <__multiply+0xfc>
 8009ad4:	9a01      	ldr	r2, [sp, #4]
 8009ad6:	50a3      	str	r3, [r4, r2]
 8009ad8:	3404      	adds	r4, #4
 8009ada:	e79f      	b.n	8009a1c <__multiply+0x78>
 8009adc:	3e01      	subs	r6, #1
 8009ade:	e7a1      	b.n	8009a24 <__multiply+0x80>
 8009ae0:	0800be68 	.word	0x0800be68
 8009ae4:	0800be79 	.word	0x0800be79

08009ae8 <__pow5mult>:
 8009ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aec:	4615      	mov	r5, r2
 8009aee:	f012 0203 	ands.w	r2, r2, #3
 8009af2:	4607      	mov	r7, r0
 8009af4:	460e      	mov	r6, r1
 8009af6:	d007      	beq.n	8009b08 <__pow5mult+0x20>
 8009af8:	4c25      	ldr	r4, [pc, #148]	@ (8009b90 <__pow5mult+0xa8>)
 8009afa:	3a01      	subs	r2, #1
 8009afc:	2300      	movs	r3, #0
 8009afe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b02:	f7ff fea7 	bl	8009854 <__multadd>
 8009b06:	4606      	mov	r6, r0
 8009b08:	10ad      	asrs	r5, r5, #2
 8009b0a:	d03d      	beq.n	8009b88 <__pow5mult+0xa0>
 8009b0c:	69fc      	ldr	r4, [r7, #28]
 8009b0e:	b97c      	cbnz	r4, 8009b30 <__pow5mult+0x48>
 8009b10:	2010      	movs	r0, #16
 8009b12:	f7ff fd87 	bl	8009624 <malloc>
 8009b16:	4602      	mov	r2, r0
 8009b18:	61f8      	str	r0, [r7, #28]
 8009b1a:	b928      	cbnz	r0, 8009b28 <__pow5mult+0x40>
 8009b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009b94 <__pow5mult+0xac>)
 8009b1e:	481e      	ldr	r0, [pc, #120]	@ (8009b98 <__pow5mult+0xb0>)
 8009b20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b24:	f000 fbdc 	bl	800a2e0 <__assert_func>
 8009b28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b2c:	6004      	str	r4, [r0, #0]
 8009b2e:	60c4      	str	r4, [r0, #12]
 8009b30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009b34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b38:	b94c      	cbnz	r4, 8009b4e <__pow5mult+0x66>
 8009b3a:	f240 2171 	movw	r1, #625	@ 0x271
 8009b3e:	4638      	mov	r0, r7
 8009b40:	f7ff ff1a 	bl	8009978 <__i2b>
 8009b44:	2300      	movs	r3, #0
 8009b46:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	f04f 0900 	mov.w	r9, #0
 8009b52:	07eb      	lsls	r3, r5, #31
 8009b54:	d50a      	bpl.n	8009b6c <__pow5mult+0x84>
 8009b56:	4631      	mov	r1, r6
 8009b58:	4622      	mov	r2, r4
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	f7ff ff22 	bl	80099a4 <__multiply>
 8009b60:	4631      	mov	r1, r6
 8009b62:	4680      	mov	r8, r0
 8009b64:	4638      	mov	r0, r7
 8009b66:	f7ff fe53 	bl	8009810 <_Bfree>
 8009b6a:	4646      	mov	r6, r8
 8009b6c:	106d      	asrs	r5, r5, #1
 8009b6e:	d00b      	beq.n	8009b88 <__pow5mult+0xa0>
 8009b70:	6820      	ldr	r0, [r4, #0]
 8009b72:	b938      	cbnz	r0, 8009b84 <__pow5mult+0x9c>
 8009b74:	4622      	mov	r2, r4
 8009b76:	4621      	mov	r1, r4
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f7ff ff13 	bl	80099a4 <__multiply>
 8009b7e:	6020      	str	r0, [r4, #0]
 8009b80:	f8c0 9000 	str.w	r9, [r0]
 8009b84:	4604      	mov	r4, r0
 8009b86:	e7e4      	b.n	8009b52 <__pow5mult+0x6a>
 8009b88:	4630      	mov	r0, r6
 8009b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8e:	bf00      	nop
 8009b90:	0800bf2c 	.word	0x0800bf2c
 8009b94:	0800bdf9 	.word	0x0800bdf9
 8009b98:	0800be79 	.word	0x0800be79

08009b9c <__lshift>:
 8009b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	6849      	ldr	r1, [r1, #4]
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	4607      	mov	r7, r0
 8009bae:	4691      	mov	r9, r2
 8009bb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bb4:	f108 0601 	add.w	r6, r8, #1
 8009bb8:	42b3      	cmp	r3, r6
 8009bba:	db0b      	blt.n	8009bd4 <__lshift+0x38>
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f7ff fde7 	bl	8009790 <_Balloc>
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	b948      	cbnz	r0, 8009bda <__lshift+0x3e>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	4b28      	ldr	r3, [pc, #160]	@ (8009c6c <__lshift+0xd0>)
 8009bca:	4829      	ldr	r0, [pc, #164]	@ (8009c70 <__lshift+0xd4>)
 8009bcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009bd0:	f000 fb86 	bl	800a2e0 <__assert_func>
 8009bd4:	3101      	adds	r1, #1
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	e7ee      	b.n	8009bb8 <__lshift+0x1c>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f100 0114 	add.w	r1, r0, #20
 8009be0:	f100 0210 	add.w	r2, r0, #16
 8009be4:	4618      	mov	r0, r3
 8009be6:	4553      	cmp	r3, sl
 8009be8:	db33      	blt.n	8009c52 <__lshift+0xb6>
 8009bea:	6920      	ldr	r0, [r4, #16]
 8009bec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bf0:	f104 0314 	add.w	r3, r4, #20
 8009bf4:	f019 091f 	ands.w	r9, r9, #31
 8009bf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c00:	d02b      	beq.n	8009c5a <__lshift+0xbe>
 8009c02:	f1c9 0e20 	rsb	lr, r9, #32
 8009c06:	468a      	mov	sl, r1
 8009c08:	2200      	movs	r2, #0
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	fa00 f009 	lsl.w	r0, r0, r9
 8009c10:	4310      	orrs	r0, r2
 8009c12:	f84a 0b04 	str.w	r0, [sl], #4
 8009c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c1a:	459c      	cmp	ip, r3
 8009c1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c20:	d8f3      	bhi.n	8009c0a <__lshift+0x6e>
 8009c22:	ebac 0304 	sub.w	r3, ip, r4
 8009c26:	3b15      	subs	r3, #21
 8009c28:	f023 0303 	bic.w	r3, r3, #3
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	f104 0015 	add.w	r0, r4, #21
 8009c32:	4560      	cmp	r0, ip
 8009c34:	bf88      	it	hi
 8009c36:	2304      	movhi	r3, #4
 8009c38:	50ca      	str	r2, [r1, r3]
 8009c3a:	b10a      	cbz	r2, 8009c40 <__lshift+0xa4>
 8009c3c:	f108 0602 	add.w	r6, r8, #2
 8009c40:	3e01      	subs	r6, #1
 8009c42:	4638      	mov	r0, r7
 8009c44:	612e      	str	r6, [r5, #16]
 8009c46:	4621      	mov	r1, r4
 8009c48:	f7ff fde2 	bl	8009810 <_Bfree>
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c52:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c56:	3301      	adds	r3, #1
 8009c58:	e7c5      	b.n	8009be6 <__lshift+0x4a>
 8009c5a:	3904      	subs	r1, #4
 8009c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c60:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c64:	459c      	cmp	ip, r3
 8009c66:	d8f9      	bhi.n	8009c5c <__lshift+0xc0>
 8009c68:	e7ea      	b.n	8009c40 <__lshift+0xa4>
 8009c6a:	bf00      	nop
 8009c6c:	0800be68 	.word	0x0800be68
 8009c70:	0800be79 	.word	0x0800be79

08009c74 <__mcmp>:
 8009c74:	690a      	ldr	r2, [r1, #16]
 8009c76:	4603      	mov	r3, r0
 8009c78:	6900      	ldr	r0, [r0, #16]
 8009c7a:	1a80      	subs	r0, r0, r2
 8009c7c:	b530      	push	{r4, r5, lr}
 8009c7e:	d10e      	bne.n	8009c9e <__mcmp+0x2a>
 8009c80:	3314      	adds	r3, #20
 8009c82:	3114      	adds	r1, #20
 8009c84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c94:	4295      	cmp	r5, r2
 8009c96:	d003      	beq.n	8009ca0 <__mcmp+0x2c>
 8009c98:	d205      	bcs.n	8009ca6 <__mcmp+0x32>
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9e:	bd30      	pop	{r4, r5, pc}
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	d3f3      	bcc.n	8009c8c <__mcmp+0x18>
 8009ca4:	e7fb      	b.n	8009c9e <__mcmp+0x2a>
 8009ca6:	2001      	movs	r0, #1
 8009ca8:	e7f9      	b.n	8009c9e <__mcmp+0x2a>
	...

08009cac <__mdiff>:
 8009cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	4689      	mov	r9, r1
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4648      	mov	r0, r9
 8009cb8:	4614      	mov	r4, r2
 8009cba:	f7ff ffdb 	bl	8009c74 <__mcmp>
 8009cbe:	1e05      	subs	r5, r0, #0
 8009cc0:	d112      	bne.n	8009ce8 <__mdiff+0x3c>
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f7ff fd63 	bl	8009790 <_Balloc>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	b928      	cbnz	r0, 8009cda <__mdiff+0x2e>
 8009cce:	4b3f      	ldr	r3, [pc, #252]	@ (8009dcc <__mdiff+0x120>)
 8009cd0:	f240 2137 	movw	r1, #567	@ 0x237
 8009cd4:	483e      	ldr	r0, [pc, #248]	@ (8009dd0 <__mdiff+0x124>)
 8009cd6:	f000 fb03 	bl	800a2e0 <__assert_func>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	b003      	add	sp, #12
 8009ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce8:	bfbc      	itt	lt
 8009cea:	464b      	movlt	r3, r9
 8009cec:	46a1      	movlt	r9, r4
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009cf4:	bfba      	itte	lt
 8009cf6:	461c      	movlt	r4, r3
 8009cf8:	2501      	movlt	r5, #1
 8009cfa:	2500      	movge	r5, #0
 8009cfc:	f7ff fd48 	bl	8009790 <_Balloc>
 8009d00:	4602      	mov	r2, r0
 8009d02:	b918      	cbnz	r0, 8009d0c <__mdiff+0x60>
 8009d04:	4b31      	ldr	r3, [pc, #196]	@ (8009dcc <__mdiff+0x120>)
 8009d06:	f240 2145 	movw	r1, #581	@ 0x245
 8009d0a:	e7e3      	b.n	8009cd4 <__mdiff+0x28>
 8009d0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d10:	6926      	ldr	r6, [r4, #16]
 8009d12:	60c5      	str	r5, [r0, #12]
 8009d14:	f109 0310 	add.w	r3, r9, #16
 8009d18:	f109 0514 	add.w	r5, r9, #20
 8009d1c:	f104 0e14 	add.w	lr, r4, #20
 8009d20:	f100 0b14 	add.w	fp, r0, #20
 8009d24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	46d9      	mov	r9, fp
 8009d30:	f04f 0c00 	mov.w	ip, #0
 8009d34:	9b01      	ldr	r3, [sp, #4]
 8009d36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009d3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009d3e:	9301      	str	r3, [sp, #4]
 8009d40:	fa1f f38a 	uxth.w	r3, sl
 8009d44:	4619      	mov	r1, r3
 8009d46:	b283      	uxth	r3, r0
 8009d48:	1acb      	subs	r3, r1, r3
 8009d4a:	0c00      	lsrs	r0, r0, #16
 8009d4c:	4463      	add	r3, ip
 8009d4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009d52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009d5c:	4576      	cmp	r6, lr
 8009d5e:	f849 3b04 	str.w	r3, [r9], #4
 8009d62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d66:	d8e5      	bhi.n	8009d34 <__mdiff+0x88>
 8009d68:	1b33      	subs	r3, r6, r4
 8009d6a:	3b15      	subs	r3, #21
 8009d6c:	f023 0303 	bic.w	r3, r3, #3
 8009d70:	3415      	adds	r4, #21
 8009d72:	3304      	adds	r3, #4
 8009d74:	42a6      	cmp	r6, r4
 8009d76:	bf38      	it	cc
 8009d78:	2304      	movcc	r3, #4
 8009d7a:	441d      	add	r5, r3
 8009d7c:	445b      	add	r3, fp
 8009d7e:	461e      	mov	r6, r3
 8009d80:	462c      	mov	r4, r5
 8009d82:	4544      	cmp	r4, r8
 8009d84:	d30e      	bcc.n	8009da4 <__mdiff+0xf8>
 8009d86:	f108 0103 	add.w	r1, r8, #3
 8009d8a:	1b49      	subs	r1, r1, r5
 8009d8c:	f021 0103 	bic.w	r1, r1, #3
 8009d90:	3d03      	subs	r5, #3
 8009d92:	45a8      	cmp	r8, r5
 8009d94:	bf38      	it	cc
 8009d96:	2100      	movcc	r1, #0
 8009d98:	440b      	add	r3, r1
 8009d9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d9e:	b191      	cbz	r1, 8009dc6 <__mdiff+0x11a>
 8009da0:	6117      	str	r7, [r2, #16]
 8009da2:	e79d      	b.n	8009ce0 <__mdiff+0x34>
 8009da4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009da8:	46e6      	mov	lr, ip
 8009daa:	0c08      	lsrs	r0, r1, #16
 8009dac:	fa1c fc81 	uxtah	ip, ip, r1
 8009db0:	4471      	add	r1, lr
 8009db2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009db6:	b289      	uxth	r1, r1
 8009db8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009dbc:	f846 1b04 	str.w	r1, [r6], #4
 8009dc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dc4:	e7dd      	b.n	8009d82 <__mdiff+0xd6>
 8009dc6:	3f01      	subs	r7, #1
 8009dc8:	e7e7      	b.n	8009d9a <__mdiff+0xee>
 8009dca:	bf00      	nop
 8009dcc:	0800be68 	.word	0x0800be68
 8009dd0:	0800be79 	.word	0x0800be79

08009dd4 <__d2b>:
 8009dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dd8:	460f      	mov	r7, r1
 8009dda:	2101      	movs	r1, #1
 8009ddc:	ec59 8b10 	vmov	r8, r9, d0
 8009de0:	4616      	mov	r6, r2
 8009de2:	f7ff fcd5 	bl	8009790 <_Balloc>
 8009de6:	4604      	mov	r4, r0
 8009de8:	b930      	cbnz	r0, 8009df8 <__d2b+0x24>
 8009dea:	4602      	mov	r2, r0
 8009dec:	4b23      	ldr	r3, [pc, #140]	@ (8009e7c <__d2b+0xa8>)
 8009dee:	4824      	ldr	r0, [pc, #144]	@ (8009e80 <__d2b+0xac>)
 8009df0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009df4:	f000 fa74 	bl	800a2e0 <__assert_func>
 8009df8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e00:	b10d      	cbz	r5, 8009e06 <__d2b+0x32>
 8009e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	f1b8 0300 	subs.w	r3, r8, #0
 8009e0c:	d023      	beq.n	8009e56 <__d2b+0x82>
 8009e0e:	4668      	mov	r0, sp
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	f7ff fd84 	bl	800991e <__lo0bits>
 8009e16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e1a:	b1d0      	cbz	r0, 8009e52 <__d2b+0x7e>
 8009e1c:	f1c0 0320 	rsb	r3, r0, #32
 8009e20:	fa02 f303 	lsl.w	r3, r2, r3
 8009e24:	430b      	orrs	r3, r1
 8009e26:	40c2      	lsrs	r2, r0
 8009e28:	6163      	str	r3, [r4, #20]
 8009e2a:	9201      	str	r2, [sp, #4]
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	61a3      	str	r3, [r4, #24]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	bf0c      	ite	eq
 8009e34:	2201      	moveq	r2, #1
 8009e36:	2202      	movne	r2, #2
 8009e38:	6122      	str	r2, [r4, #16]
 8009e3a:	b1a5      	cbz	r5, 8009e66 <__d2b+0x92>
 8009e3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009e40:	4405      	add	r5, r0
 8009e42:	603d      	str	r5, [r7, #0]
 8009e44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009e48:	6030      	str	r0, [r6, #0]
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	b003      	add	sp, #12
 8009e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e52:	6161      	str	r1, [r4, #20]
 8009e54:	e7ea      	b.n	8009e2c <__d2b+0x58>
 8009e56:	a801      	add	r0, sp, #4
 8009e58:	f7ff fd61 	bl	800991e <__lo0bits>
 8009e5c:	9b01      	ldr	r3, [sp, #4]
 8009e5e:	6163      	str	r3, [r4, #20]
 8009e60:	3020      	adds	r0, #32
 8009e62:	2201      	movs	r2, #1
 8009e64:	e7e8      	b.n	8009e38 <__d2b+0x64>
 8009e66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e6e:	6038      	str	r0, [r7, #0]
 8009e70:	6918      	ldr	r0, [r3, #16]
 8009e72:	f7ff fd35 	bl	80098e0 <__hi0bits>
 8009e76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e7a:	e7e5      	b.n	8009e48 <__d2b+0x74>
 8009e7c:	0800be68 	.word	0x0800be68
 8009e80:	0800be79 	.word	0x0800be79

08009e84 <__ssputs_r>:
 8009e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	688e      	ldr	r6, [r1, #8]
 8009e8a:	461f      	mov	r7, r3
 8009e8c:	42be      	cmp	r6, r7
 8009e8e:	680b      	ldr	r3, [r1, #0]
 8009e90:	4682      	mov	sl, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	4690      	mov	r8, r2
 8009e96:	d82d      	bhi.n	8009ef4 <__ssputs_r+0x70>
 8009e98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ea0:	d026      	beq.n	8009ef0 <__ssputs_r+0x6c>
 8009ea2:	6965      	ldr	r5, [r4, #20]
 8009ea4:	6909      	ldr	r1, [r1, #16]
 8009ea6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009eaa:	eba3 0901 	sub.w	r9, r3, r1
 8009eae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eb2:	1c7b      	adds	r3, r7, #1
 8009eb4:	444b      	add	r3, r9
 8009eb6:	106d      	asrs	r5, r5, #1
 8009eb8:	429d      	cmp	r5, r3
 8009eba:	bf38      	it	cc
 8009ebc:	461d      	movcc	r5, r3
 8009ebe:	0553      	lsls	r3, r2, #21
 8009ec0:	d527      	bpl.n	8009f12 <__ssputs_r+0x8e>
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7ff fbd8 	bl	8009678 <_malloc_r>
 8009ec8:	4606      	mov	r6, r0
 8009eca:	b360      	cbz	r0, 8009f26 <__ssputs_r+0xa2>
 8009ecc:	6921      	ldr	r1, [r4, #16]
 8009ece:	464a      	mov	r2, r9
 8009ed0:	f7fe fcf5 	bl	80088be <memcpy>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	6126      	str	r6, [r4, #16]
 8009ee2:	6165      	str	r5, [r4, #20]
 8009ee4:	444e      	add	r6, r9
 8009ee6:	eba5 0509 	sub.w	r5, r5, r9
 8009eea:	6026      	str	r6, [r4, #0]
 8009eec:	60a5      	str	r5, [r4, #8]
 8009eee:	463e      	mov	r6, r7
 8009ef0:	42be      	cmp	r6, r7
 8009ef2:	d900      	bls.n	8009ef6 <__ssputs_r+0x72>
 8009ef4:	463e      	mov	r6, r7
 8009ef6:	6820      	ldr	r0, [r4, #0]
 8009ef8:	4632      	mov	r2, r6
 8009efa:	4641      	mov	r1, r8
 8009efc:	f000 f9c6 	bl	800a28c <memmove>
 8009f00:	68a3      	ldr	r3, [r4, #8]
 8009f02:	1b9b      	subs	r3, r3, r6
 8009f04:	60a3      	str	r3, [r4, #8]
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	4433      	add	r3, r6
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f12:	462a      	mov	r2, r5
 8009f14:	f000 fa28 	bl	800a368 <_realloc_r>
 8009f18:	4606      	mov	r6, r0
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d1e0      	bne.n	8009ee0 <__ssputs_r+0x5c>
 8009f1e:	6921      	ldr	r1, [r4, #16]
 8009f20:	4650      	mov	r0, sl
 8009f22:	f7ff fb35 	bl	8009590 <_free_r>
 8009f26:	230c      	movs	r3, #12
 8009f28:	f8ca 3000 	str.w	r3, [sl]
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	e7e9      	b.n	8009f0e <__ssputs_r+0x8a>
	...

08009f3c <_svfiprintf_r>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	4698      	mov	r8, r3
 8009f42:	898b      	ldrh	r3, [r1, #12]
 8009f44:	061b      	lsls	r3, r3, #24
 8009f46:	b09d      	sub	sp, #116	@ 0x74
 8009f48:	4607      	mov	r7, r0
 8009f4a:	460d      	mov	r5, r1
 8009f4c:	4614      	mov	r4, r2
 8009f4e:	d510      	bpl.n	8009f72 <_svfiprintf_r+0x36>
 8009f50:	690b      	ldr	r3, [r1, #16]
 8009f52:	b973      	cbnz	r3, 8009f72 <_svfiprintf_r+0x36>
 8009f54:	2140      	movs	r1, #64	@ 0x40
 8009f56:	f7ff fb8f 	bl	8009678 <_malloc_r>
 8009f5a:	6028      	str	r0, [r5, #0]
 8009f5c:	6128      	str	r0, [r5, #16]
 8009f5e:	b930      	cbnz	r0, 8009f6e <_svfiprintf_r+0x32>
 8009f60:	230c      	movs	r3, #12
 8009f62:	603b      	str	r3, [r7, #0]
 8009f64:	f04f 30ff 	mov.w	r0, #4294967295
 8009f68:	b01d      	add	sp, #116	@ 0x74
 8009f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6e:	2340      	movs	r3, #64	@ 0x40
 8009f70:	616b      	str	r3, [r5, #20]
 8009f72:	2300      	movs	r3, #0
 8009f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f76:	2320      	movs	r3, #32
 8009f78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f80:	2330      	movs	r3, #48	@ 0x30
 8009f82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a120 <_svfiprintf_r+0x1e4>
 8009f86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f8a:	f04f 0901 	mov.w	r9, #1
 8009f8e:	4623      	mov	r3, r4
 8009f90:	469a      	mov	sl, r3
 8009f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f96:	b10a      	cbz	r2, 8009f9c <_svfiprintf_r+0x60>
 8009f98:	2a25      	cmp	r2, #37	@ 0x25
 8009f9a:	d1f9      	bne.n	8009f90 <_svfiprintf_r+0x54>
 8009f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009fa0:	d00b      	beq.n	8009fba <_svfiprintf_r+0x7e>
 8009fa2:	465b      	mov	r3, fp
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f7ff ff6b 	bl	8009e84 <__ssputs_r>
 8009fae:	3001      	adds	r0, #1
 8009fb0:	f000 80a7 	beq.w	800a102 <_svfiprintf_r+0x1c6>
 8009fb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fb6:	445a      	add	r2, fp
 8009fb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fba:	f89a 3000 	ldrb.w	r3, [sl]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 809f 	beq.w	800a102 <_svfiprintf_r+0x1c6>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fce:	f10a 0a01 	add.w	sl, sl, #1
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	9307      	str	r3, [sp, #28]
 8009fd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fda:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fdc:	4654      	mov	r4, sl
 8009fde:	2205      	movs	r2, #5
 8009fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe4:	484e      	ldr	r0, [pc, #312]	@ (800a120 <_svfiprintf_r+0x1e4>)
 8009fe6:	f7f6 f913 	bl	8000210 <memchr>
 8009fea:	9a04      	ldr	r2, [sp, #16]
 8009fec:	b9d8      	cbnz	r0, 800a026 <_svfiprintf_r+0xea>
 8009fee:	06d0      	lsls	r0, r2, #27
 8009ff0:	bf44      	itt	mi
 8009ff2:	2320      	movmi	r3, #32
 8009ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ff8:	0711      	lsls	r1, r2, #28
 8009ffa:	bf44      	itt	mi
 8009ffc:	232b      	movmi	r3, #43	@ 0x2b
 8009ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a002:	f89a 3000 	ldrb.w	r3, [sl]
 800a006:	2b2a      	cmp	r3, #42	@ 0x2a
 800a008:	d015      	beq.n	800a036 <_svfiprintf_r+0xfa>
 800a00a:	9a07      	ldr	r2, [sp, #28]
 800a00c:	4654      	mov	r4, sl
 800a00e:	2000      	movs	r0, #0
 800a010:	f04f 0c0a 	mov.w	ip, #10
 800a014:	4621      	mov	r1, r4
 800a016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a01a:	3b30      	subs	r3, #48	@ 0x30
 800a01c:	2b09      	cmp	r3, #9
 800a01e:	d94b      	bls.n	800a0b8 <_svfiprintf_r+0x17c>
 800a020:	b1b0      	cbz	r0, 800a050 <_svfiprintf_r+0x114>
 800a022:	9207      	str	r2, [sp, #28]
 800a024:	e014      	b.n	800a050 <_svfiprintf_r+0x114>
 800a026:	eba0 0308 	sub.w	r3, r0, r8
 800a02a:	fa09 f303 	lsl.w	r3, r9, r3
 800a02e:	4313      	orrs	r3, r2
 800a030:	9304      	str	r3, [sp, #16]
 800a032:	46a2      	mov	sl, r4
 800a034:	e7d2      	b.n	8009fdc <_svfiprintf_r+0xa0>
 800a036:	9b03      	ldr	r3, [sp, #12]
 800a038:	1d19      	adds	r1, r3, #4
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	9103      	str	r1, [sp, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bfbb      	ittet	lt
 800a042:	425b      	neglt	r3, r3
 800a044:	f042 0202 	orrlt.w	r2, r2, #2
 800a048:	9307      	strge	r3, [sp, #28]
 800a04a:	9307      	strlt	r3, [sp, #28]
 800a04c:	bfb8      	it	lt
 800a04e:	9204      	strlt	r2, [sp, #16]
 800a050:	7823      	ldrb	r3, [r4, #0]
 800a052:	2b2e      	cmp	r3, #46	@ 0x2e
 800a054:	d10a      	bne.n	800a06c <_svfiprintf_r+0x130>
 800a056:	7863      	ldrb	r3, [r4, #1]
 800a058:	2b2a      	cmp	r3, #42	@ 0x2a
 800a05a:	d132      	bne.n	800a0c2 <_svfiprintf_r+0x186>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	1d1a      	adds	r2, r3, #4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	9203      	str	r2, [sp, #12]
 800a064:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a068:	3402      	adds	r4, #2
 800a06a:	9305      	str	r3, [sp, #20]
 800a06c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a130 <_svfiprintf_r+0x1f4>
 800a070:	7821      	ldrb	r1, [r4, #0]
 800a072:	2203      	movs	r2, #3
 800a074:	4650      	mov	r0, sl
 800a076:	f7f6 f8cb 	bl	8000210 <memchr>
 800a07a:	b138      	cbz	r0, 800a08c <_svfiprintf_r+0x150>
 800a07c:	9b04      	ldr	r3, [sp, #16]
 800a07e:	eba0 000a 	sub.w	r0, r0, sl
 800a082:	2240      	movs	r2, #64	@ 0x40
 800a084:	4082      	lsls	r2, r0
 800a086:	4313      	orrs	r3, r2
 800a088:	3401      	adds	r4, #1
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a090:	4824      	ldr	r0, [pc, #144]	@ (800a124 <_svfiprintf_r+0x1e8>)
 800a092:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a096:	2206      	movs	r2, #6
 800a098:	f7f6 f8ba 	bl	8000210 <memchr>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d036      	beq.n	800a10e <_svfiprintf_r+0x1d2>
 800a0a0:	4b21      	ldr	r3, [pc, #132]	@ (800a128 <_svfiprintf_r+0x1ec>)
 800a0a2:	bb1b      	cbnz	r3, 800a0ec <_svfiprintf_r+0x1b0>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	3307      	adds	r3, #7
 800a0a8:	f023 0307 	bic.w	r3, r3, #7
 800a0ac:	3308      	adds	r3, #8
 800a0ae:	9303      	str	r3, [sp, #12]
 800a0b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b2:	4433      	add	r3, r6
 800a0b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0b6:	e76a      	b.n	8009f8e <_svfiprintf_r+0x52>
 800a0b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0bc:	460c      	mov	r4, r1
 800a0be:	2001      	movs	r0, #1
 800a0c0:	e7a8      	b.n	800a014 <_svfiprintf_r+0xd8>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	3401      	adds	r4, #1
 800a0c6:	9305      	str	r3, [sp, #20]
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	f04f 0c0a 	mov.w	ip, #10
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0d4:	3a30      	subs	r2, #48	@ 0x30
 800a0d6:	2a09      	cmp	r2, #9
 800a0d8:	d903      	bls.n	800a0e2 <_svfiprintf_r+0x1a6>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0c6      	beq.n	800a06c <_svfiprintf_r+0x130>
 800a0de:	9105      	str	r1, [sp, #20]
 800a0e0:	e7c4      	b.n	800a06c <_svfiprintf_r+0x130>
 800a0e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e7f0      	b.n	800a0ce <_svfiprintf_r+0x192>
 800a0ec:	ab03      	add	r3, sp, #12
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a12c <_svfiprintf_r+0x1f0>)
 800a0f4:	a904      	add	r1, sp, #16
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f7fd fe48 	bl	8007d8c <_printf_float>
 800a0fc:	1c42      	adds	r2, r0, #1
 800a0fe:	4606      	mov	r6, r0
 800a100:	d1d6      	bne.n	800a0b0 <_svfiprintf_r+0x174>
 800a102:	89ab      	ldrh	r3, [r5, #12]
 800a104:	065b      	lsls	r3, r3, #25
 800a106:	f53f af2d 	bmi.w	8009f64 <_svfiprintf_r+0x28>
 800a10a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a10c:	e72c      	b.n	8009f68 <_svfiprintf_r+0x2c>
 800a10e:	ab03      	add	r3, sp, #12
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	462a      	mov	r2, r5
 800a114:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <_svfiprintf_r+0x1f0>)
 800a116:	a904      	add	r1, sp, #16
 800a118:	4638      	mov	r0, r7
 800a11a:	f7fe f8cf 	bl	80082bc <_printf_i>
 800a11e:	e7ed      	b.n	800a0fc <_svfiprintf_r+0x1c0>
 800a120:	0800bed2 	.word	0x0800bed2
 800a124:	0800bedc 	.word	0x0800bedc
 800a128:	08007d8d 	.word	0x08007d8d
 800a12c:	08009e85 	.word	0x08009e85
 800a130:	0800bed8 	.word	0x0800bed8

0800a134 <__sflush_r>:
 800a134:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a13c:	0716      	lsls	r6, r2, #28
 800a13e:	4605      	mov	r5, r0
 800a140:	460c      	mov	r4, r1
 800a142:	d454      	bmi.n	800a1ee <__sflush_r+0xba>
 800a144:	684b      	ldr	r3, [r1, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	dc02      	bgt.n	800a150 <__sflush_r+0x1c>
 800a14a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dd48      	ble.n	800a1e2 <__sflush_r+0xae>
 800a150:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a152:	2e00      	cmp	r6, #0
 800a154:	d045      	beq.n	800a1e2 <__sflush_r+0xae>
 800a156:	2300      	movs	r3, #0
 800a158:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a15c:	682f      	ldr	r7, [r5, #0]
 800a15e:	6a21      	ldr	r1, [r4, #32]
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	d030      	beq.n	800a1c6 <__sflush_r+0x92>
 800a164:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a166:	89a3      	ldrh	r3, [r4, #12]
 800a168:	0759      	lsls	r1, r3, #29
 800a16a:	d505      	bpl.n	800a178 <__sflush_r+0x44>
 800a16c:	6863      	ldr	r3, [r4, #4]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a172:	b10b      	cbz	r3, 800a178 <__sflush_r+0x44>
 800a174:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a176:	1ad2      	subs	r2, r2, r3
 800a178:	2300      	movs	r3, #0
 800a17a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a17c:	6a21      	ldr	r1, [r4, #32]
 800a17e:	4628      	mov	r0, r5
 800a180:	47b0      	blx	r6
 800a182:	1c43      	adds	r3, r0, #1
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	d106      	bne.n	800a196 <__sflush_r+0x62>
 800a188:	6829      	ldr	r1, [r5, #0]
 800a18a:	291d      	cmp	r1, #29
 800a18c:	d82b      	bhi.n	800a1e6 <__sflush_r+0xb2>
 800a18e:	4a2a      	ldr	r2, [pc, #168]	@ (800a238 <__sflush_r+0x104>)
 800a190:	40ca      	lsrs	r2, r1
 800a192:	07d6      	lsls	r6, r2, #31
 800a194:	d527      	bpl.n	800a1e6 <__sflush_r+0xb2>
 800a196:	2200      	movs	r2, #0
 800a198:	6062      	str	r2, [r4, #4]
 800a19a:	04d9      	lsls	r1, r3, #19
 800a19c:	6922      	ldr	r2, [r4, #16]
 800a19e:	6022      	str	r2, [r4, #0]
 800a1a0:	d504      	bpl.n	800a1ac <__sflush_r+0x78>
 800a1a2:	1c42      	adds	r2, r0, #1
 800a1a4:	d101      	bne.n	800a1aa <__sflush_r+0x76>
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	b903      	cbnz	r3, 800a1ac <__sflush_r+0x78>
 800a1aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1ae:	602f      	str	r7, [r5, #0]
 800a1b0:	b1b9      	cbz	r1, 800a1e2 <__sflush_r+0xae>
 800a1b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1b6:	4299      	cmp	r1, r3
 800a1b8:	d002      	beq.n	800a1c0 <__sflush_r+0x8c>
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f7ff f9e8 	bl	8009590 <_free_r>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1c4:	e00d      	b.n	800a1e2 <__sflush_r+0xae>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	47b0      	blx	r6
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	1c50      	adds	r0, r2, #1
 800a1d0:	d1c9      	bne.n	800a166 <__sflush_r+0x32>
 800a1d2:	682b      	ldr	r3, [r5, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0c6      	beq.n	800a166 <__sflush_r+0x32>
 800a1d8:	2b1d      	cmp	r3, #29
 800a1da:	d001      	beq.n	800a1e0 <__sflush_r+0xac>
 800a1dc:	2b16      	cmp	r3, #22
 800a1de:	d11e      	bne.n	800a21e <__sflush_r+0xea>
 800a1e0:	602f      	str	r7, [r5, #0]
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	e022      	b.n	800a22c <__sflush_r+0xf8>
 800a1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ea:	b21b      	sxth	r3, r3
 800a1ec:	e01b      	b.n	800a226 <__sflush_r+0xf2>
 800a1ee:	690f      	ldr	r7, [r1, #16]
 800a1f0:	2f00      	cmp	r7, #0
 800a1f2:	d0f6      	beq.n	800a1e2 <__sflush_r+0xae>
 800a1f4:	0793      	lsls	r3, r2, #30
 800a1f6:	680e      	ldr	r6, [r1, #0]
 800a1f8:	bf08      	it	eq
 800a1fa:	694b      	ldreq	r3, [r1, #20]
 800a1fc:	600f      	str	r7, [r1, #0]
 800a1fe:	bf18      	it	ne
 800a200:	2300      	movne	r3, #0
 800a202:	eba6 0807 	sub.w	r8, r6, r7
 800a206:	608b      	str	r3, [r1, #8]
 800a208:	f1b8 0f00 	cmp.w	r8, #0
 800a20c:	dde9      	ble.n	800a1e2 <__sflush_r+0xae>
 800a20e:	6a21      	ldr	r1, [r4, #32]
 800a210:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a212:	4643      	mov	r3, r8
 800a214:	463a      	mov	r2, r7
 800a216:	4628      	mov	r0, r5
 800a218:	47b0      	blx	r6
 800a21a:	2800      	cmp	r0, #0
 800a21c:	dc08      	bgt.n	800a230 <__sflush_r+0xfc>
 800a21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a230:	4407      	add	r7, r0
 800a232:	eba8 0800 	sub.w	r8, r8, r0
 800a236:	e7e7      	b.n	800a208 <__sflush_r+0xd4>
 800a238:	20400001 	.word	0x20400001

0800a23c <_fflush_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	690b      	ldr	r3, [r1, #16]
 800a240:	4605      	mov	r5, r0
 800a242:	460c      	mov	r4, r1
 800a244:	b913      	cbnz	r3, 800a24c <_fflush_r+0x10>
 800a246:	2500      	movs	r5, #0
 800a248:	4628      	mov	r0, r5
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	b118      	cbz	r0, 800a256 <_fflush_r+0x1a>
 800a24e:	6a03      	ldr	r3, [r0, #32]
 800a250:	b90b      	cbnz	r3, 800a256 <_fflush_r+0x1a>
 800a252:	f7fe f9dd 	bl	8008610 <__sinit>
 800a256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0f3      	beq.n	800a246 <_fflush_r+0xa>
 800a25e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a260:	07d0      	lsls	r0, r2, #31
 800a262:	d404      	bmi.n	800a26e <_fflush_r+0x32>
 800a264:	0599      	lsls	r1, r3, #22
 800a266:	d402      	bmi.n	800a26e <_fflush_r+0x32>
 800a268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a26a:	f7fe fb26 	bl	80088ba <__retarget_lock_acquire_recursive>
 800a26e:	4628      	mov	r0, r5
 800a270:	4621      	mov	r1, r4
 800a272:	f7ff ff5f 	bl	800a134 <__sflush_r>
 800a276:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a278:	07da      	lsls	r2, r3, #31
 800a27a:	4605      	mov	r5, r0
 800a27c:	d4e4      	bmi.n	800a248 <_fflush_r+0xc>
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	059b      	lsls	r3, r3, #22
 800a282:	d4e1      	bmi.n	800a248 <_fflush_r+0xc>
 800a284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a286:	f7fe fb19 	bl	80088bc <__retarget_lock_release_recursive>
 800a28a:	e7dd      	b.n	800a248 <_fflush_r+0xc>

0800a28c <memmove>:
 800a28c:	4288      	cmp	r0, r1
 800a28e:	b510      	push	{r4, lr}
 800a290:	eb01 0402 	add.w	r4, r1, r2
 800a294:	d902      	bls.n	800a29c <memmove+0x10>
 800a296:	4284      	cmp	r4, r0
 800a298:	4623      	mov	r3, r4
 800a29a:	d807      	bhi.n	800a2ac <memmove+0x20>
 800a29c:	1e43      	subs	r3, r0, #1
 800a29e:	42a1      	cmp	r1, r4
 800a2a0:	d008      	beq.n	800a2b4 <memmove+0x28>
 800a2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2aa:	e7f8      	b.n	800a29e <memmove+0x12>
 800a2ac:	4402      	add	r2, r0
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	428a      	cmp	r2, r1
 800a2b2:	d100      	bne.n	800a2b6 <memmove+0x2a>
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2be:	e7f7      	b.n	800a2b0 <memmove+0x24>

0800a2c0 <_sbrk_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d06      	ldr	r5, [pc, #24]	@ (800a2dc <_sbrk_r+0x1c>)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	602b      	str	r3, [r5, #0]
 800a2cc:	f7f9 fc8e 	bl	8003bec <_sbrk>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d102      	bne.n	800a2da <_sbrk_r+0x1a>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	b103      	cbz	r3, 800a2da <_sbrk_r+0x1a>
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	20000e78 	.word	0x20000e78

0800a2e0 <__assert_func>:
 800a2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2e2:	4614      	mov	r4, r2
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4b09      	ldr	r3, [pc, #36]	@ (800a30c <__assert_func+0x2c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	68d8      	ldr	r0, [r3, #12]
 800a2ee:	b14c      	cbz	r4, 800a304 <__assert_func+0x24>
 800a2f0:	4b07      	ldr	r3, [pc, #28]	@ (800a310 <__assert_func+0x30>)
 800a2f2:	9100      	str	r1, [sp, #0]
 800a2f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2f8:	4906      	ldr	r1, [pc, #24]	@ (800a314 <__assert_func+0x34>)
 800a2fa:	462b      	mov	r3, r5
 800a2fc:	f000 f870 	bl	800a3e0 <fiprintf>
 800a300:	f000 f880 	bl	800a404 <abort>
 800a304:	4b04      	ldr	r3, [pc, #16]	@ (800a318 <__assert_func+0x38>)
 800a306:	461c      	mov	r4, r3
 800a308:	e7f3      	b.n	800a2f2 <__assert_func+0x12>
 800a30a:	bf00      	nop
 800a30c:	20000018 	.word	0x20000018
 800a310:	0800beed 	.word	0x0800beed
 800a314:	0800befa 	.word	0x0800befa
 800a318:	0800bf28 	.word	0x0800bf28

0800a31c <_calloc_r>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	fba1 5402 	umull	r5, r4, r1, r2
 800a322:	b934      	cbnz	r4, 800a332 <_calloc_r+0x16>
 800a324:	4629      	mov	r1, r5
 800a326:	f7ff f9a7 	bl	8009678 <_malloc_r>
 800a32a:	4606      	mov	r6, r0
 800a32c:	b928      	cbnz	r0, 800a33a <_calloc_r+0x1e>
 800a32e:	4630      	mov	r0, r6
 800a330:	bd70      	pop	{r4, r5, r6, pc}
 800a332:	220c      	movs	r2, #12
 800a334:	6002      	str	r2, [r0, #0]
 800a336:	2600      	movs	r6, #0
 800a338:	e7f9      	b.n	800a32e <_calloc_r+0x12>
 800a33a:	462a      	mov	r2, r5
 800a33c:	4621      	mov	r1, r4
 800a33e:	f7fe fa3f 	bl	80087c0 <memset>
 800a342:	e7f4      	b.n	800a32e <_calloc_r+0x12>

0800a344 <__ascii_mbtowc>:
 800a344:	b082      	sub	sp, #8
 800a346:	b901      	cbnz	r1, 800a34a <__ascii_mbtowc+0x6>
 800a348:	a901      	add	r1, sp, #4
 800a34a:	b142      	cbz	r2, 800a35e <__ascii_mbtowc+0x1a>
 800a34c:	b14b      	cbz	r3, 800a362 <__ascii_mbtowc+0x1e>
 800a34e:	7813      	ldrb	r3, [r2, #0]
 800a350:	600b      	str	r3, [r1, #0]
 800a352:	7812      	ldrb	r2, [r2, #0]
 800a354:	1e10      	subs	r0, r2, #0
 800a356:	bf18      	it	ne
 800a358:	2001      	movne	r0, #1
 800a35a:	b002      	add	sp, #8
 800a35c:	4770      	bx	lr
 800a35e:	4610      	mov	r0, r2
 800a360:	e7fb      	b.n	800a35a <__ascii_mbtowc+0x16>
 800a362:	f06f 0001 	mvn.w	r0, #1
 800a366:	e7f8      	b.n	800a35a <__ascii_mbtowc+0x16>

0800a368 <_realloc_r>:
 800a368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36c:	4607      	mov	r7, r0
 800a36e:	4614      	mov	r4, r2
 800a370:	460d      	mov	r5, r1
 800a372:	b921      	cbnz	r1, 800a37e <_realloc_r+0x16>
 800a374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a378:	4611      	mov	r1, r2
 800a37a:	f7ff b97d 	b.w	8009678 <_malloc_r>
 800a37e:	b92a      	cbnz	r2, 800a38c <_realloc_r+0x24>
 800a380:	f7ff f906 	bl	8009590 <_free_r>
 800a384:	4625      	mov	r5, r4
 800a386:	4628      	mov	r0, r5
 800a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a38c:	f000 f841 	bl	800a412 <_malloc_usable_size_r>
 800a390:	4284      	cmp	r4, r0
 800a392:	4606      	mov	r6, r0
 800a394:	d802      	bhi.n	800a39c <_realloc_r+0x34>
 800a396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a39a:	d8f4      	bhi.n	800a386 <_realloc_r+0x1e>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4638      	mov	r0, r7
 800a3a0:	f7ff f96a 	bl	8009678 <_malloc_r>
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	b908      	cbnz	r0, 800a3ac <_realloc_r+0x44>
 800a3a8:	4645      	mov	r5, r8
 800a3aa:	e7ec      	b.n	800a386 <_realloc_r+0x1e>
 800a3ac:	42b4      	cmp	r4, r6
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	bf28      	it	cs
 800a3b4:	4632      	movcs	r2, r6
 800a3b6:	f7fe fa82 	bl	80088be <memcpy>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f7ff f8e7 	bl	8009590 <_free_r>
 800a3c2:	e7f1      	b.n	800a3a8 <_realloc_r+0x40>

0800a3c4 <__ascii_wctomb>:
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	b141      	cbz	r1, 800a3dc <__ascii_wctomb+0x18>
 800a3ca:	2aff      	cmp	r2, #255	@ 0xff
 800a3cc:	d904      	bls.n	800a3d8 <__ascii_wctomb+0x14>
 800a3ce:	228a      	movs	r2, #138	@ 0x8a
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d6:	4770      	bx	lr
 800a3d8:	700a      	strb	r2, [r1, #0]
 800a3da:	2001      	movs	r0, #1
 800a3dc:	4770      	bx	lr
	...

0800a3e0 <fiprintf>:
 800a3e0:	b40e      	push	{r1, r2, r3}
 800a3e2:	b503      	push	{r0, r1, lr}
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	ab03      	add	r3, sp, #12
 800a3e8:	4805      	ldr	r0, [pc, #20]	@ (800a400 <fiprintf+0x20>)
 800a3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ee:	6800      	ldr	r0, [r0, #0]
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	f000 f83f 	bl	800a474 <_vfiprintf_r>
 800a3f6:	b002      	add	sp, #8
 800a3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3fc:	b003      	add	sp, #12
 800a3fe:	4770      	bx	lr
 800a400:	20000018 	.word	0x20000018

0800a404 <abort>:
 800a404:	b508      	push	{r3, lr}
 800a406:	2006      	movs	r0, #6
 800a408:	f000 fa08 	bl	800a81c <raise>
 800a40c:	2001      	movs	r0, #1
 800a40e:	f7f9 fb74 	bl	8003afa <_exit>

0800a412 <_malloc_usable_size_r>:
 800a412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a416:	1f18      	subs	r0, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bfbc      	itt	lt
 800a41c:	580b      	ldrlt	r3, [r1, r0]
 800a41e:	18c0      	addlt	r0, r0, r3
 800a420:	4770      	bx	lr

0800a422 <__sfputc_r>:
 800a422:	6893      	ldr	r3, [r2, #8]
 800a424:	3b01      	subs	r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	b410      	push	{r4}
 800a42a:	6093      	str	r3, [r2, #8]
 800a42c:	da08      	bge.n	800a440 <__sfputc_r+0x1e>
 800a42e:	6994      	ldr	r4, [r2, #24]
 800a430:	42a3      	cmp	r3, r4
 800a432:	db01      	blt.n	800a438 <__sfputc_r+0x16>
 800a434:	290a      	cmp	r1, #10
 800a436:	d103      	bne.n	800a440 <__sfputc_r+0x1e>
 800a438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a43c:	f000 b932 	b.w	800a6a4 <__swbuf_r>
 800a440:	6813      	ldr	r3, [r2, #0]
 800a442:	1c58      	adds	r0, r3, #1
 800a444:	6010      	str	r0, [r2, #0]
 800a446:	7019      	strb	r1, [r3, #0]
 800a448:	4608      	mov	r0, r1
 800a44a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <__sfputs_r>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	4606      	mov	r6, r0
 800a454:	460f      	mov	r7, r1
 800a456:	4614      	mov	r4, r2
 800a458:	18d5      	adds	r5, r2, r3
 800a45a:	42ac      	cmp	r4, r5
 800a45c:	d101      	bne.n	800a462 <__sfputs_r+0x12>
 800a45e:	2000      	movs	r0, #0
 800a460:	e007      	b.n	800a472 <__sfputs_r+0x22>
 800a462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a466:	463a      	mov	r2, r7
 800a468:	4630      	mov	r0, r6
 800a46a:	f7ff ffda 	bl	800a422 <__sfputc_r>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	d1f3      	bne.n	800a45a <__sfputs_r+0xa>
 800a472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a474 <_vfiprintf_r>:
 800a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a478:	460d      	mov	r5, r1
 800a47a:	b09d      	sub	sp, #116	@ 0x74
 800a47c:	4614      	mov	r4, r2
 800a47e:	4698      	mov	r8, r3
 800a480:	4606      	mov	r6, r0
 800a482:	b118      	cbz	r0, 800a48c <_vfiprintf_r+0x18>
 800a484:	6a03      	ldr	r3, [r0, #32]
 800a486:	b90b      	cbnz	r3, 800a48c <_vfiprintf_r+0x18>
 800a488:	f7fe f8c2 	bl	8008610 <__sinit>
 800a48c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a48e:	07d9      	lsls	r1, r3, #31
 800a490:	d405      	bmi.n	800a49e <_vfiprintf_r+0x2a>
 800a492:	89ab      	ldrh	r3, [r5, #12]
 800a494:	059a      	lsls	r2, r3, #22
 800a496:	d402      	bmi.n	800a49e <_vfiprintf_r+0x2a>
 800a498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a49a:	f7fe fa0e 	bl	80088ba <__retarget_lock_acquire_recursive>
 800a49e:	89ab      	ldrh	r3, [r5, #12]
 800a4a0:	071b      	lsls	r3, r3, #28
 800a4a2:	d501      	bpl.n	800a4a8 <_vfiprintf_r+0x34>
 800a4a4:	692b      	ldr	r3, [r5, #16]
 800a4a6:	b99b      	cbnz	r3, 800a4d0 <_vfiprintf_r+0x5c>
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f000 f938 	bl	800a720 <__swsetup_r>
 800a4b0:	b170      	cbz	r0, 800a4d0 <_vfiprintf_r+0x5c>
 800a4b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4b4:	07dc      	lsls	r4, r3, #31
 800a4b6:	d504      	bpl.n	800a4c2 <_vfiprintf_r+0x4e>
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4bc:	b01d      	add	sp, #116	@ 0x74
 800a4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c2:	89ab      	ldrh	r3, [r5, #12]
 800a4c4:	0598      	lsls	r0, r3, #22
 800a4c6:	d4f7      	bmi.n	800a4b8 <_vfiprintf_r+0x44>
 800a4c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4ca:	f7fe f9f7 	bl	80088bc <__retarget_lock_release_recursive>
 800a4ce:	e7f3      	b.n	800a4b8 <_vfiprintf_r+0x44>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4d4:	2320      	movs	r3, #32
 800a4d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4de:	2330      	movs	r3, #48	@ 0x30
 800a4e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a690 <_vfiprintf_r+0x21c>
 800a4e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4e8:	f04f 0901 	mov.w	r9, #1
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	469a      	mov	sl, r3
 800a4f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4f4:	b10a      	cbz	r2, 800a4fa <_vfiprintf_r+0x86>
 800a4f6:	2a25      	cmp	r2, #37	@ 0x25
 800a4f8:	d1f9      	bne.n	800a4ee <_vfiprintf_r+0x7a>
 800a4fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a4fe:	d00b      	beq.n	800a518 <_vfiprintf_r+0xa4>
 800a500:	465b      	mov	r3, fp
 800a502:	4622      	mov	r2, r4
 800a504:	4629      	mov	r1, r5
 800a506:	4630      	mov	r0, r6
 800a508:	f7ff ffa2 	bl	800a450 <__sfputs_r>
 800a50c:	3001      	adds	r0, #1
 800a50e:	f000 80a7 	beq.w	800a660 <_vfiprintf_r+0x1ec>
 800a512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a514:	445a      	add	r2, fp
 800a516:	9209      	str	r2, [sp, #36]	@ 0x24
 800a518:	f89a 3000 	ldrb.w	r3, [sl]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 809f 	beq.w	800a660 <_vfiprintf_r+0x1ec>
 800a522:	2300      	movs	r3, #0
 800a524:	f04f 32ff 	mov.w	r2, #4294967295
 800a528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a52c:	f10a 0a01 	add.w	sl, sl, #1
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	9307      	str	r3, [sp, #28]
 800a534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a538:	931a      	str	r3, [sp, #104]	@ 0x68
 800a53a:	4654      	mov	r4, sl
 800a53c:	2205      	movs	r2, #5
 800a53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a542:	4853      	ldr	r0, [pc, #332]	@ (800a690 <_vfiprintf_r+0x21c>)
 800a544:	f7f5 fe64 	bl	8000210 <memchr>
 800a548:	9a04      	ldr	r2, [sp, #16]
 800a54a:	b9d8      	cbnz	r0, 800a584 <_vfiprintf_r+0x110>
 800a54c:	06d1      	lsls	r1, r2, #27
 800a54e:	bf44      	itt	mi
 800a550:	2320      	movmi	r3, #32
 800a552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a556:	0713      	lsls	r3, r2, #28
 800a558:	bf44      	itt	mi
 800a55a:	232b      	movmi	r3, #43	@ 0x2b
 800a55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a560:	f89a 3000 	ldrb.w	r3, [sl]
 800a564:	2b2a      	cmp	r3, #42	@ 0x2a
 800a566:	d015      	beq.n	800a594 <_vfiprintf_r+0x120>
 800a568:	9a07      	ldr	r2, [sp, #28]
 800a56a:	4654      	mov	r4, sl
 800a56c:	2000      	movs	r0, #0
 800a56e:	f04f 0c0a 	mov.w	ip, #10
 800a572:	4621      	mov	r1, r4
 800a574:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a578:	3b30      	subs	r3, #48	@ 0x30
 800a57a:	2b09      	cmp	r3, #9
 800a57c:	d94b      	bls.n	800a616 <_vfiprintf_r+0x1a2>
 800a57e:	b1b0      	cbz	r0, 800a5ae <_vfiprintf_r+0x13a>
 800a580:	9207      	str	r2, [sp, #28]
 800a582:	e014      	b.n	800a5ae <_vfiprintf_r+0x13a>
 800a584:	eba0 0308 	sub.w	r3, r0, r8
 800a588:	fa09 f303 	lsl.w	r3, r9, r3
 800a58c:	4313      	orrs	r3, r2
 800a58e:	9304      	str	r3, [sp, #16]
 800a590:	46a2      	mov	sl, r4
 800a592:	e7d2      	b.n	800a53a <_vfiprintf_r+0xc6>
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	1d19      	adds	r1, r3, #4
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	9103      	str	r1, [sp, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	bfbb      	ittet	lt
 800a5a0:	425b      	neglt	r3, r3
 800a5a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a5a6:	9307      	strge	r3, [sp, #28]
 800a5a8:	9307      	strlt	r3, [sp, #28]
 800a5aa:	bfb8      	it	lt
 800a5ac:	9204      	strlt	r2, [sp, #16]
 800a5ae:	7823      	ldrb	r3, [r4, #0]
 800a5b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5b2:	d10a      	bne.n	800a5ca <_vfiprintf_r+0x156>
 800a5b4:	7863      	ldrb	r3, [r4, #1]
 800a5b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5b8:	d132      	bne.n	800a620 <_vfiprintf_r+0x1ac>
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	1d1a      	adds	r2, r3, #4
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	9203      	str	r2, [sp, #12]
 800a5c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5c6:	3402      	adds	r4, #2
 800a5c8:	9305      	str	r3, [sp, #20]
 800a5ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6a0 <_vfiprintf_r+0x22c>
 800a5ce:	7821      	ldrb	r1, [r4, #0]
 800a5d0:	2203      	movs	r2, #3
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	f7f5 fe1c 	bl	8000210 <memchr>
 800a5d8:	b138      	cbz	r0, 800a5ea <_vfiprintf_r+0x176>
 800a5da:	9b04      	ldr	r3, [sp, #16]
 800a5dc:	eba0 000a 	sub.w	r0, r0, sl
 800a5e0:	2240      	movs	r2, #64	@ 0x40
 800a5e2:	4082      	lsls	r2, r0
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	3401      	adds	r4, #1
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ee:	4829      	ldr	r0, [pc, #164]	@ (800a694 <_vfiprintf_r+0x220>)
 800a5f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5f4:	2206      	movs	r2, #6
 800a5f6:	f7f5 fe0b 	bl	8000210 <memchr>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d03f      	beq.n	800a67e <_vfiprintf_r+0x20a>
 800a5fe:	4b26      	ldr	r3, [pc, #152]	@ (800a698 <_vfiprintf_r+0x224>)
 800a600:	bb1b      	cbnz	r3, 800a64a <_vfiprintf_r+0x1d6>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	3307      	adds	r3, #7
 800a606:	f023 0307 	bic.w	r3, r3, #7
 800a60a:	3308      	adds	r3, #8
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a610:	443b      	add	r3, r7
 800a612:	9309      	str	r3, [sp, #36]	@ 0x24
 800a614:	e76a      	b.n	800a4ec <_vfiprintf_r+0x78>
 800a616:	fb0c 3202 	mla	r2, ip, r2, r3
 800a61a:	460c      	mov	r4, r1
 800a61c:	2001      	movs	r0, #1
 800a61e:	e7a8      	b.n	800a572 <_vfiprintf_r+0xfe>
 800a620:	2300      	movs	r3, #0
 800a622:	3401      	adds	r4, #1
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	4619      	mov	r1, r3
 800a628:	f04f 0c0a 	mov.w	ip, #10
 800a62c:	4620      	mov	r0, r4
 800a62e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a632:	3a30      	subs	r2, #48	@ 0x30
 800a634:	2a09      	cmp	r2, #9
 800a636:	d903      	bls.n	800a640 <_vfiprintf_r+0x1cc>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d0c6      	beq.n	800a5ca <_vfiprintf_r+0x156>
 800a63c:	9105      	str	r1, [sp, #20]
 800a63e:	e7c4      	b.n	800a5ca <_vfiprintf_r+0x156>
 800a640:	fb0c 2101 	mla	r1, ip, r1, r2
 800a644:	4604      	mov	r4, r0
 800a646:	2301      	movs	r3, #1
 800a648:	e7f0      	b.n	800a62c <_vfiprintf_r+0x1b8>
 800a64a:	ab03      	add	r3, sp, #12
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	462a      	mov	r2, r5
 800a650:	4b12      	ldr	r3, [pc, #72]	@ (800a69c <_vfiprintf_r+0x228>)
 800a652:	a904      	add	r1, sp, #16
 800a654:	4630      	mov	r0, r6
 800a656:	f7fd fb99 	bl	8007d8c <_printf_float>
 800a65a:	4607      	mov	r7, r0
 800a65c:	1c78      	adds	r0, r7, #1
 800a65e:	d1d6      	bne.n	800a60e <_vfiprintf_r+0x19a>
 800a660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a662:	07d9      	lsls	r1, r3, #31
 800a664:	d405      	bmi.n	800a672 <_vfiprintf_r+0x1fe>
 800a666:	89ab      	ldrh	r3, [r5, #12]
 800a668:	059a      	lsls	r2, r3, #22
 800a66a:	d402      	bmi.n	800a672 <_vfiprintf_r+0x1fe>
 800a66c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a66e:	f7fe f925 	bl	80088bc <__retarget_lock_release_recursive>
 800a672:	89ab      	ldrh	r3, [r5, #12]
 800a674:	065b      	lsls	r3, r3, #25
 800a676:	f53f af1f 	bmi.w	800a4b8 <_vfiprintf_r+0x44>
 800a67a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a67c:	e71e      	b.n	800a4bc <_vfiprintf_r+0x48>
 800a67e:	ab03      	add	r3, sp, #12
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	462a      	mov	r2, r5
 800a684:	4b05      	ldr	r3, [pc, #20]	@ (800a69c <_vfiprintf_r+0x228>)
 800a686:	a904      	add	r1, sp, #16
 800a688:	4630      	mov	r0, r6
 800a68a:	f7fd fe17 	bl	80082bc <_printf_i>
 800a68e:	e7e4      	b.n	800a65a <_vfiprintf_r+0x1e6>
 800a690:	0800bed2 	.word	0x0800bed2
 800a694:	0800bedc 	.word	0x0800bedc
 800a698:	08007d8d 	.word	0x08007d8d
 800a69c:	0800a451 	.word	0x0800a451
 800a6a0:	0800bed8 	.word	0x0800bed8

0800a6a4 <__swbuf_r>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	460e      	mov	r6, r1
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	b118      	cbz	r0, 800a6b6 <__swbuf_r+0x12>
 800a6ae:	6a03      	ldr	r3, [r0, #32]
 800a6b0:	b90b      	cbnz	r3, 800a6b6 <__swbuf_r+0x12>
 800a6b2:	f7fd ffad 	bl	8008610 <__sinit>
 800a6b6:	69a3      	ldr	r3, [r4, #24]
 800a6b8:	60a3      	str	r3, [r4, #8]
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	071a      	lsls	r2, r3, #28
 800a6be:	d501      	bpl.n	800a6c4 <__swbuf_r+0x20>
 800a6c0:	6923      	ldr	r3, [r4, #16]
 800a6c2:	b943      	cbnz	r3, 800a6d6 <__swbuf_r+0x32>
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f000 f82a 	bl	800a720 <__swsetup_r>
 800a6cc:	b118      	cbz	r0, 800a6d6 <__swbuf_r+0x32>
 800a6ce:	f04f 37ff 	mov.w	r7, #4294967295
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	6922      	ldr	r2, [r4, #16]
 800a6da:	1a98      	subs	r0, r3, r2
 800a6dc:	6963      	ldr	r3, [r4, #20]
 800a6de:	b2f6      	uxtb	r6, r6
 800a6e0:	4283      	cmp	r3, r0
 800a6e2:	4637      	mov	r7, r6
 800a6e4:	dc05      	bgt.n	800a6f2 <__swbuf_r+0x4e>
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	f7ff fda7 	bl	800a23c <_fflush_r>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d1ed      	bne.n	800a6ce <__swbuf_r+0x2a>
 800a6f2:	68a3      	ldr	r3, [r4, #8]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	60a3      	str	r3, [r4, #8]
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	6022      	str	r2, [r4, #0]
 800a6fe:	701e      	strb	r6, [r3, #0]
 800a700:	6962      	ldr	r2, [r4, #20]
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	429a      	cmp	r2, r3
 800a706:	d004      	beq.n	800a712 <__swbuf_r+0x6e>
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	07db      	lsls	r3, r3, #31
 800a70c:	d5e1      	bpl.n	800a6d2 <__swbuf_r+0x2e>
 800a70e:	2e0a      	cmp	r6, #10
 800a710:	d1df      	bne.n	800a6d2 <__swbuf_r+0x2e>
 800a712:	4621      	mov	r1, r4
 800a714:	4628      	mov	r0, r5
 800a716:	f7ff fd91 	bl	800a23c <_fflush_r>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d0d9      	beq.n	800a6d2 <__swbuf_r+0x2e>
 800a71e:	e7d6      	b.n	800a6ce <__swbuf_r+0x2a>

0800a720 <__swsetup_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4b29      	ldr	r3, [pc, #164]	@ (800a7c8 <__swsetup_r+0xa8>)
 800a724:	4605      	mov	r5, r0
 800a726:	6818      	ldr	r0, [r3, #0]
 800a728:	460c      	mov	r4, r1
 800a72a:	b118      	cbz	r0, 800a734 <__swsetup_r+0x14>
 800a72c:	6a03      	ldr	r3, [r0, #32]
 800a72e:	b90b      	cbnz	r3, 800a734 <__swsetup_r+0x14>
 800a730:	f7fd ff6e 	bl	8008610 <__sinit>
 800a734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a738:	0719      	lsls	r1, r3, #28
 800a73a:	d422      	bmi.n	800a782 <__swsetup_r+0x62>
 800a73c:	06da      	lsls	r2, r3, #27
 800a73e:	d407      	bmi.n	800a750 <__swsetup_r+0x30>
 800a740:	2209      	movs	r2, #9
 800a742:	602a      	str	r2, [r5, #0]
 800a744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a748:	81a3      	strh	r3, [r4, #12]
 800a74a:	f04f 30ff 	mov.w	r0, #4294967295
 800a74e:	e033      	b.n	800a7b8 <__swsetup_r+0x98>
 800a750:	0758      	lsls	r0, r3, #29
 800a752:	d512      	bpl.n	800a77a <__swsetup_r+0x5a>
 800a754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a756:	b141      	cbz	r1, 800a76a <__swsetup_r+0x4a>
 800a758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a75c:	4299      	cmp	r1, r3
 800a75e:	d002      	beq.n	800a766 <__swsetup_r+0x46>
 800a760:	4628      	mov	r0, r5
 800a762:	f7fe ff15 	bl	8009590 <_free_r>
 800a766:	2300      	movs	r3, #0
 800a768:	6363      	str	r3, [r4, #52]	@ 0x34
 800a76a:	89a3      	ldrh	r3, [r4, #12]
 800a76c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a770:	81a3      	strh	r3, [r4, #12]
 800a772:	2300      	movs	r3, #0
 800a774:	6063      	str	r3, [r4, #4]
 800a776:	6923      	ldr	r3, [r4, #16]
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	f043 0308 	orr.w	r3, r3, #8
 800a780:	81a3      	strh	r3, [r4, #12]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	b94b      	cbnz	r3, 800a79a <__swsetup_r+0x7a>
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a78c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a790:	d003      	beq.n	800a79a <__swsetup_r+0x7a>
 800a792:	4621      	mov	r1, r4
 800a794:	4628      	mov	r0, r5
 800a796:	f000 f883 	bl	800a8a0 <__smakebuf_r>
 800a79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a79e:	f013 0201 	ands.w	r2, r3, #1
 800a7a2:	d00a      	beq.n	800a7ba <__swsetup_r+0x9a>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	60a2      	str	r2, [r4, #8]
 800a7a8:	6962      	ldr	r2, [r4, #20]
 800a7aa:	4252      	negs	r2, r2
 800a7ac:	61a2      	str	r2, [r4, #24]
 800a7ae:	6922      	ldr	r2, [r4, #16]
 800a7b0:	b942      	cbnz	r2, 800a7c4 <__swsetup_r+0xa4>
 800a7b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7b6:	d1c5      	bne.n	800a744 <__swsetup_r+0x24>
 800a7b8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ba:	0799      	lsls	r1, r3, #30
 800a7bc:	bf58      	it	pl
 800a7be:	6962      	ldrpl	r2, [r4, #20]
 800a7c0:	60a2      	str	r2, [r4, #8]
 800a7c2:	e7f4      	b.n	800a7ae <__swsetup_r+0x8e>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e7f7      	b.n	800a7b8 <__swsetup_r+0x98>
 800a7c8:	20000018 	.word	0x20000018

0800a7cc <_raise_r>:
 800a7cc:	291f      	cmp	r1, #31
 800a7ce:	b538      	push	{r3, r4, r5, lr}
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	d904      	bls.n	800a7e0 <_raise_r+0x14>
 800a7d6:	2316      	movs	r3, #22
 800a7d8:	6003      	str	r3, [r0, #0]
 800a7da:	f04f 30ff 	mov.w	r0, #4294967295
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a7e2:	b112      	cbz	r2, 800a7ea <_raise_r+0x1e>
 800a7e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7e8:	b94b      	cbnz	r3, 800a7fe <_raise_r+0x32>
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f000 f830 	bl	800a850 <_getpid_r>
 800a7f0:	4622      	mov	r2, r4
 800a7f2:	4601      	mov	r1, r0
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7fa:	f000 b817 	b.w	800a82c <_kill_r>
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d00a      	beq.n	800a818 <_raise_r+0x4c>
 800a802:	1c59      	adds	r1, r3, #1
 800a804:	d103      	bne.n	800a80e <_raise_r+0x42>
 800a806:	2316      	movs	r3, #22
 800a808:	6003      	str	r3, [r0, #0]
 800a80a:	2001      	movs	r0, #1
 800a80c:	e7e7      	b.n	800a7de <_raise_r+0x12>
 800a80e:	2100      	movs	r1, #0
 800a810:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a814:	4620      	mov	r0, r4
 800a816:	4798      	blx	r3
 800a818:	2000      	movs	r0, #0
 800a81a:	e7e0      	b.n	800a7de <_raise_r+0x12>

0800a81c <raise>:
 800a81c:	4b02      	ldr	r3, [pc, #8]	@ (800a828 <raise+0xc>)
 800a81e:	4601      	mov	r1, r0
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	f7ff bfd3 	b.w	800a7cc <_raise_r>
 800a826:	bf00      	nop
 800a828:	20000018 	.word	0x20000018

0800a82c <_kill_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d07      	ldr	r5, [pc, #28]	@ (800a84c <_kill_r+0x20>)
 800a830:	2300      	movs	r3, #0
 800a832:	4604      	mov	r4, r0
 800a834:	4608      	mov	r0, r1
 800a836:	4611      	mov	r1, r2
 800a838:	602b      	str	r3, [r5, #0]
 800a83a:	f7f9 f94e 	bl	8003ada <_kill>
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	d102      	bne.n	800a848 <_kill_r+0x1c>
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	b103      	cbz	r3, 800a848 <_kill_r+0x1c>
 800a846:	6023      	str	r3, [r4, #0]
 800a848:	bd38      	pop	{r3, r4, r5, pc}
 800a84a:	bf00      	nop
 800a84c:	20000e78 	.word	0x20000e78

0800a850 <_getpid_r>:
 800a850:	f7f9 b93b 	b.w	8003aca <_getpid>

0800a854 <__swhatbuf_r>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	460c      	mov	r4, r1
 800a858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a85c:	2900      	cmp	r1, #0
 800a85e:	b096      	sub	sp, #88	@ 0x58
 800a860:	4615      	mov	r5, r2
 800a862:	461e      	mov	r6, r3
 800a864:	da0d      	bge.n	800a882 <__swhatbuf_r+0x2e>
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a86c:	f04f 0100 	mov.w	r1, #0
 800a870:	bf14      	ite	ne
 800a872:	2340      	movne	r3, #64	@ 0x40
 800a874:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a878:	2000      	movs	r0, #0
 800a87a:	6031      	str	r1, [r6, #0]
 800a87c:	602b      	str	r3, [r5, #0]
 800a87e:	b016      	add	sp, #88	@ 0x58
 800a880:	bd70      	pop	{r4, r5, r6, pc}
 800a882:	466a      	mov	r2, sp
 800a884:	f000 f848 	bl	800a918 <_fstat_r>
 800a888:	2800      	cmp	r0, #0
 800a88a:	dbec      	blt.n	800a866 <__swhatbuf_r+0x12>
 800a88c:	9901      	ldr	r1, [sp, #4]
 800a88e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a892:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a896:	4259      	negs	r1, r3
 800a898:	4159      	adcs	r1, r3
 800a89a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a89e:	e7eb      	b.n	800a878 <__swhatbuf_r+0x24>

0800a8a0 <__smakebuf_r>:
 800a8a0:	898b      	ldrh	r3, [r1, #12]
 800a8a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8a4:	079d      	lsls	r5, r3, #30
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	d507      	bpl.n	800a8bc <__smakebuf_r+0x1c>
 800a8ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	6123      	str	r3, [r4, #16]
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	6163      	str	r3, [r4, #20]
 800a8b8:	b003      	add	sp, #12
 800a8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8bc:	ab01      	add	r3, sp, #4
 800a8be:	466a      	mov	r2, sp
 800a8c0:	f7ff ffc8 	bl	800a854 <__swhatbuf_r>
 800a8c4:	9f00      	ldr	r7, [sp, #0]
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	f7fe fed4 	bl	8009678 <_malloc_r>
 800a8d0:	b948      	cbnz	r0, 800a8e6 <__smakebuf_r+0x46>
 800a8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d6:	059a      	lsls	r2, r3, #22
 800a8d8:	d4ee      	bmi.n	800a8b8 <__smakebuf_r+0x18>
 800a8da:	f023 0303 	bic.w	r3, r3, #3
 800a8de:	f043 0302 	orr.w	r3, r3, #2
 800a8e2:	81a3      	strh	r3, [r4, #12]
 800a8e4:	e7e2      	b.n	800a8ac <__smakebuf_r+0xc>
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	6020      	str	r0, [r4, #0]
 800a8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ee:	81a3      	strh	r3, [r4, #12]
 800a8f0:	9b01      	ldr	r3, [sp, #4]
 800a8f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8f6:	b15b      	cbz	r3, 800a910 <__smakebuf_r+0x70>
 800a8f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f000 f81d 	bl	800a93c <_isatty_r>
 800a902:	b128      	cbz	r0, 800a910 <__smakebuf_r+0x70>
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f023 0303 	bic.w	r3, r3, #3
 800a90a:	f043 0301 	orr.w	r3, r3, #1
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	431d      	orrs	r5, r3
 800a914:	81a5      	strh	r5, [r4, #12]
 800a916:	e7cf      	b.n	800a8b8 <__smakebuf_r+0x18>

0800a918 <_fstat_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d07      	ldr	r5, [pc, #28]	@ (800a938 <_fstat_r+0x20>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	4611      	mov	r1, r2
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	f7f9 f938 	bl	8003b9a <_fstat>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	d102      	bne.n	800a934 <_fstat_r+0x1c>
 800a92e:	682b      	ldr	r3, [r5, #0]
 800a930:	b103      	cbz	r3, 800a934 <_fstat_r+0x1c>
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	bd38      	pop	{r3, r4, r5, pc}
 800a936:	bf00      	nop
 800a938:	20000e78 	.word	0x20000e78

0800a93c <_isatty_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4d06      	ldr	r5, [pc, #24]	@ (800a958 <_isatty_r+0x1c>)
 800a940:	2300      	movs	r3, #0
 800a942:	4604      	mov	r4, r0
 800a944:	4608      	mov	r0, r1
 800a946:	602b      	str	r3, [r5, #0]
 800a948:	f7f9 f937 	bl	8003bba <_isatty>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d102      	bne.n	800a956 <_isatty_r+0x1a>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	b103      	cbz	r3, 800a956 <_isatty_r+0x1a>
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	20000e78 	.word	0x20000e78

0800a95c <powf>:
 800a95c:	b508      	push	{r3, lr}
 800a95e:	ed2d 8b04 	vpush	{d8-d9}
 800a962:	eeb0 8a60 	vmov.f32	s16, s1
 800a966:	eeb0 9a40 	vmov.f32	s18, s0
 800a96a:	f000 f859 	bl	800aa20 <__ieee754_powf>
 800a96e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a976:	eef0 8a40 	vmov.f32	s17, s0
 800a97a:	d63e      	bvs.n	800a9fa <powf+0x9e>
 800a97c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a984:	d112      	bne.n	800a9ac <powf+0x50>
 800a986:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a98e:	d039      	beq.n	800aa04 <powf+0xa8>
 800a990:	eeb0 0a48 	vmov.f32	s0, s16
 800a994:	f000 f839 	bl	800aa0a <finitef>
 800a998:	b378      	cbz	r0, 800a9fa <powf+0x9e>
 800a99a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a2:	d52a      	bpl.n	800a9fa <powf+0x9e>
 800a9a4:	f7fd ff5e 	bl	8008864 <__errno>
 800a9a8:	2322      	movs	r3, #34	@ 0x22
 800a9aa:	e014      	b.n	800a9d6 <powf+0x7a>
 800a9ac:	f000 f82d 	bl	800aa0a <finitef>
 800a9b0:	b998      	cbnz	r0, 800a9da <powf+0x7e>
 800a9b2:	eeb0 0a49 	vmov.f32	s0, s18
 800a9b6:	f000 f828 	bl	800aa0a <finitef>
 800a9ba:	b170      	cbz	r0, 800a9da <powf+0x7e>
 800a9bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a9c0:	f000 f823 	bl	800aa0a <finitef>
 800a9c4:	b148      	cbz	r0, 800a9da <powf+0x7e>
 800a9c6:	eef4 8a68 	vcmp.f32	s17, s17
 800a9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ce:	d7e9      	bvc.n	800a9a4 <powf+0x48>
 800a9d0:	f7fd ff48 	bl	8008864 <__errno>
 800a9d4:	2321      	movs	r3, #33	@ 0x21
 800a9d6:	6003      	str	r3, [r0, #0]
 800a9d8:	e00f      	b.n	800a9fa <powf+0x9e>
 800a9da:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e2:	d10a      	bne.n	800a9fa <powf+0x9e>
 800a9e4:	eeb0 0a49 	vmov.f32	s0, s18
 800a9e8:	f000 f80f 	bl	800aa0a <finitef>
 800a9ec:	b128      	cbz	r0, 800a9fa <powf+0x9e>
 800a9ee:	eeb0 0a48 	vmov.f32	s0, s16
 800a9f2:	f000 f80a 	bl	800aa0a <finitef>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d1d4      	bne.n	800a9a4 <powf+0x48>
 800a9fa:	eeb0 0a68 	vmov.f32	s0, s17
 800a9fe:	ecbd 8b04 	vpop	{d8-d9}
 800aa02:	bd08      	pop	{r3, pc}
 800aa04:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800aa08:	e7f7      	b.n	800a9fa <powf+0x9e>

0800aa0a <finitef>:
 800aa0a:	ee10 3a10 	vmov	r3, s0
 800aa0e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800aa12:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800aa16:	bfac      	ite	ge
 800aa18:	2000      	movge	r0, #0
 800aa1a:	2001      	movlt	r0, #1
 800aa1c:	4770      	bx	lr
	...

0800aa20 <__ieee754_powf>:
 800aa20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa24:	ee10 4a90 	vmov	r4, s1
 800aa28:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800aa2c:	ed2d 8b02 	vpush	{d8}
 800aa30:	ee10 6a10 	vmov	r6, s0
 800aa34:	eeb0 8a40 	vmov.f32	s16, s0
 800aa38:	eef0 8a60 	vmov.f32	s17, s1
 800aa3c:	d10c      	bne.n	800aa58 <__ieee754_powf+0x38>
 800aa3e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800aa42:	0076      	lsls	r6, r6, #1
 800aa44:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800aa48:	f240 8274 	bls.w	800af34 <__ieee754_powf+0x514>
 800aa4c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800aa50:	ecbd 8b02 	vpop	{d8}
 800aa54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa58:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800aa5c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800aa60:	d802      	bhi.n	800aa68 <__ieee754_powf+0x48>
 800aa62:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800aa66:	d908      	bls.n	800aa7a <__ieee754_powf+0x5a>
 800aa68:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800aa6c:	d1ee      	bne.n	800aa4c <__ieee754_powf+0x2c>
 800aa6e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800aa72:	0064      	lsls	r4, r4, #1
 800aa74:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800aa78:	e7e6      	b.n	800aa48 <__ieee754_powf+0x28>
 800aa7a:	2e00      	cmp	r6, #0
 800aa7c:	da1f      	bge.n	800aabe <__ieee754_powf+0x9e>
 800aa7e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800aa82:	f080 8260 	bcs.w	800af46 <__ieee754_powf+0x526>
 800aa86:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800aa8a:	d32f      	bcc.n	800aaec <__ieee754_powf+0xcc>
 800aa8c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800aa90:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800aa94:	fa49 f503 	asr.w	r5, r9, r3
 800aa98:	fa05 f303 	lsl.w	r3, r5, r3
 800aa9c:	454b      	cmp	r3, r9
 800aa9e:	d123      	bne.n	800aae8 <__ieee754_powf+0xc8>
 800aaa0:	f005 0501 	and.w	r5, r5, #1
 800aaa4:	f1c5 0502 	rsb	r5, r5, #2
 800aaa8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800aaac:	d11f      	bne.n	800aaee <__ieee754_powf+0xce>
 800aaae:	2c00      	cmp	r4, #0
 800aab0:	f280 8246 	bge.w	800af40 <__ieee754_powf+0x520>
 800aab4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800aab8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800aabc:	e7c8      	b.n	800aa50 <__ieee754_powf+0x30>
 800aabe:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800aac2:	d111      	bne.n	800aae8 <__ieee754_powf+0xc8>
 800aac4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800aac8:	f000 8234 	beq.w	800af34 <__ieee754_powf+0x514>
 800aacc:	d906      	bls.n	800aadc <__ieee754_powf+0xbc>
 800aace:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800ade4 <__ieee754_powf+0x3c4>
 800aad2:	2c00      	cmp	r4, #0
 800aad4:	bfa8      	it	ge
 800aad6:	eeb0 0a68 	vmovge.f32	s0, s17
 800aada:	e7b9      	b.n	800aa50 <__ieee754_powf+0x30>
 800aadc:	2c00      	cmp	r4, #0
 800aade:	f280 822c 	bge.w	800af3a <__ieee754_powf+0x51a>
 800aae2:	eeb1 0a68 	vneg.f32	s0, s17
 800aae6:	e7b3      	b.n	800aa50 <__ieee754_powf+0x30>
 800aae8:	2500      	movs	r5, #0
 800aaea:	e7dd      	b.n	800aaa8 <__ieee754_powf+0x88>
 800aaec:	2500      	movs	r5, #0
 800aaee:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800aaf2:	d102      	bne.n	800aafa <__ieee754_powf+0xda>
 800aaf4:	ee28 0a08 	vmul.f32	s0, s16, s16
 800aaf8:	e7aa      	b.n	800aa50 <__ieee754_powf+0x30>
 800aafa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800aafe:	f040 8227 	bne.w	800af50 <__ieee754_powf+0x530>
 800ab02:	2e00      	cmp	r6, #0
 800ab04:	f2c0 8224 	blt.w	800af50 <__ieee754_powf+0x530>
 800ab08:	eeb0 0a48 	vmov.f32	s0, s16
 800ab0c:	ecbd 8b02 	vpop	{d8}
 800ab10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab14:	f000 bae6 	b.w	800b0e4 <__ieee754_sqrtf>
 800ab18:	2d01      	cmp	r5, #1
 800ab1a:	d199      	bne.n	800aa50 <__ieee754_powf+0x30>
 800ab1c:	eeb1 0a40 	vneg.f32	s0, s0
 800ab20:	e796      	b.n	800aa50 <__ieee754_powf+0x30>
 800ab22:	0ff0      	lsrs	r0, r6, #31
 800ab24:	3801      	subs	r0, #1
 800ab26:	ea55 0300 	orrs.w	r3, r5, r0
 800ab2a:	d104      	bne.n	800ab36 <__ieee754_powf+0x116>
 800ab2c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ab30:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ab34:	e78c      	b.n	800aa50 <__ieee754_powf+0x30>
 800ab36:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800ab3a:	d96d      	bls.n	800ac18 <__ieee754_powf+0x1f8>
 800ab3c:	4baa      	ldr	r3, [pc, #680]	@ (800ade8 <__ieee754_powf+0x3c8>)
 800ab3e:	4598      	cmp	r8, r3
 800ab40:	d808      	bhi.n	800ab54 <__ieee754_powf+0x134>
 800ab42:	2c00      	cmp	r4, #0
 800ab44:	da0b      	bge.n	800ab5e <__ieee754_powf+0x13e>
 800ab46:	2000      	movs	r0, #0
 800ab48:	ecbd 8b02 	vpop	{d8}
 800ab4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab50:	f000 bac2 	b.w	800b0d8 <__math_oflowf>
 800ab54:	4ba5      	ldr	r3, [pc, #660]	@ (800adec <__ieee754_powf+0x3cc>)
 800ab56:	4598      	cmp	r8, r3
 800ab58:	d908      	bls.n	800ab6c <__ieee754_powf+0x14c>
 800ab5a:	2c00      	cmp	r4, #0
 800ab5c:	dcf3      	bgt.n	800ab46 <__ieee754_powf+0x126>
 800ab5e:	2000      	movs	r0, #0
 800ab60:	ecbd 8b02 	vpop	{d8}
 800ab64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab68:	f000 bab0 	b.w	800b0cc <__math_uflowf>
 800ab6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ab70:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab74:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800adf0 <__ieee754_powf+0x3d0>
 800ab78:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800ab7c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ab80:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ab84:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ab88:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ab8c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800adf4 <__ieee754_powf+0x3d4>
 800ab90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab94:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800adf8 <__ieee754_powf+0x3d8>
 800ab98:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ab9c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800adfc <__ieee754_powf+0x3dc>
 800aba0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aba4:	eeb0 7a67 	vmov.f32	s14, s15
 800aba8:	eea0 7a26 	vfma.f32	s14, s0, s13
 800abac:	ee17 3a10 	vmov	r3, s14
 800abb0:	f36f 030b 	bfc	r3, #0, #12
 800abb4:	ee07 3a10 	vmov	s14, r3
 800abb8:	eeb0 6a47 	vmov.f32	s12, s14
 800abbc:	eea0 6a66 	vfms.f32	s12, s0, s13
 800abc0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800abc4:	3d01      	subs	r5, #1
 800abc6:	4305      	orrs	r5, r0
 800abc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abcc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800abd0:	f36f 040b 	bfc	r4, #0, #12
 800abd4:	bf18      	it	ne
 800abd6:	eeb0 8a66 	vmovne.f32	s16, s13
 800abda:	ee06 4a90 	vmov	s13, r4
 800abde:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800abe2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800abe6:	ee67 7a26 	vmul.f32	s15, s14, s13
 800abea:	eee6 0a07 	vfma.f32	s1, s12, s14
 800abee:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800abf2:	ee17 1a10 	vmov	r1, s14
 800abf6:	2900      	cmp	r1, #0
 800abf8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800abfc:	f340 80dd 	ble.w	800adba <__ieee754_powf+0x39a>
 800ac00:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ac04:	f240 80ca 	bls.w	800ad9c <__ieee754_powf+0x37c>
 800ac08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ac0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac10:	bf4c      	ite	mi
 800ac12:	2001      	movmi	r0, #1
 800ac14:	2000      	movpl	r0, #0
 800ac16:	e797      	b.n	800ab48 <__ieee754_powf+0x128>
 800ac18:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ac1c:	bf01      	itttt	eq
 800ac1e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800ae00 <__ieee754_powf+0x3e0>
 800ac22:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ac26:	f06f 0317 	mvneq.w	r3, #23
 800ac2a:	ee17 7a90 	vmoveq	r7, s15
 800ac2e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800ac32:	bf18      	it	ne
 800ac34:	2300      	movne	r3, #0
 800ac36:	3a7f      	subs	r2, #127	@ 0x7f
 800ac38:	441a      	add	r2, r3
 800ac3a:	4b72      	ldr	r3, [pc, #456]	@ (800ae04 <__ieee754_powf+0x3e4>)
 800ac3c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800ac40:	429f      	cmp	r7, r3
 800ac42:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800ac46:	dd06      	ble.n	800ac56 <__ieee754_powf+0x236>
 800ac48:	4b6f      	ldr	r3, [pc, #444]	@ (800ae08 <__ieee754_powf+0x3e8>)
 800ac4a:	429f      	cmp	r7, r3
 800ac4c:	f340 80a4 	ble.w	800ad98 <__ieee754_powf+0x378>
 800ac50:	3201      	adds	r2, #1
 800ac52:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800ac56:	2600      	movs	r6, #0
 800ac58:	4b6c      	ldr	r3, [pc, #432]	@ (800ae0c <__ieee754_powf+0x3ec>)
 800ac5a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ac5e:	ee07 1a10 	vmov	s14, r1
 800ac62:	edd3 5a00 	vldr	s11, [r3]
 800ac66:	4b6a      	ldr	r3, [pc, #424]	@ (800ae10 <__ieee754_powf+0x3f0>)
 800ac68:	ee75 7a87 	vadd.f32	s15, s11, s14
 800ac6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac70:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800ac74:	1049      	asrs	r1, r1, #1
 800ac76:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800ac7a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800ac7e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800ac82:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ac86:	ee07 1a90 	vmov	s15, r1
 800ac8a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ac8e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800ac92:	ee15 7a10 	vmov	r7, s10
 800ac96:	401f      	ands	r7, r3
 800ac98:	ee06 7a90 	vmov	s13, r7
 800ac9c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800aca0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800aca4:	ee65 7a05 	vmul.f32	s15, s10, s10
 800aca8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800acac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ae14 <__ieee754_powf+0x3f4>
 800acb0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800ae18 <__ieee754_powf+0x3f8>
 800acb4:	eee7 5a87 	vfma.f32	s11, s15, s14
 800acb8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ae1c <__ieee754_powf+0x3fc>
 800acbc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800acc0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800adf0 <__ieee754_powf+0x3d0>
 800acc4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800acc8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ae20 <__ieee754_powf+0x400>
 800accc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800acd0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800ae24 <__ieee754_powf+0x404>
 800acd4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800acd8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800acdc:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ace0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ace4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ace8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800acec:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800acf0:	eef0 5a67 	vmov.f32	s11, s15
 800acf4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800acf8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800acfc:	ee15 1a90 	vmov	r1, s11
 800ad00:	4019      	ands	r1, r3
 800ad02:	ee05 1a90 	vmov	s11, r1
 800ad06:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ad0a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ad0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad12:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ad16:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ad1a:	eeb0 6a67 	vmov.f32	s12, s15
 800ad1e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ad22:	ee16 1a10 	vmov	r1, s12
 800ad26:	4019      	ands	r1, r3
 800ad28:	ee06 1a10 	vmov	s12, r1
 800ad2c:	eeb0 7a46 	vmov.f32	s14, s12
 800ad30:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800ad34:	493c      	ldr	r1, [pc, #240]	@ (800ae28 <__ieee754_powf+0x408>)
 800ad36:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800ad3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad3e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800ae2c <__ieee754_powf+0x40c>
 800ad42:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800ae30 <__ieee754_powf+0x410>
 800ad46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad4a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ae34 <__ieee754_powf+0x414>
 800ad4e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ad52:	ed91 7a00 	vldr	s14, [r1]
 800ad56:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad5a:	ee07 2a10 	vmov	s14, r2
 800ad5e:	4a36      	ldr	r2, [pc, #216]	@ (800ae38 <__ieee754_powf+0x418>)
 800ad60:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800ad64:	eeb0 7a67 	vmov.f32	s14, s15
 800ad68:	eea6 7a25 	vfma.f32	s14, s12, s11
 800ad6c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800ad70:	ed92 5a00 	vldr	s10, [r2]
 800ad74:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ad78:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ad7c:	ee17 2a10 	vmov	r2, s14
 800ad80:	401a      	ands	r2, r3
 800ad82:	ee07 2a10 	vmov	s14, r2
 800ad86:	ee77 6a66 	vsub.f32	s13, s14, s13
 800ad8a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800ad8e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800ad92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad96:	e715      	b.n	800abc4 <__ieee754_powf+0x1a4>
 800ad98:	2601      	movs	r6, #1
 800ad9a:	e75d      	b.n	800ac58 <__ieee754_powf+0x238>
 800ad9c:	d152      	bne.n	800ae44 <__ieee754_powf+0x424>
 800ad9e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ae3c <__ieee754_powf+0x41c>
 800ada2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ada6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800adaa:	eef4 6ac7 	vcmpe.f32	s13, s14
 800adae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb2:	f73f af29 	bgt.w	800ac08 <__ieee754_powf+0x1e8>
 800adb6:	2386      	movs	r3, #134	@ 0x86
 800adb8:	e048      	b.n	800ae4c <__ieee754_powf+0x42c>
 800adba:	4a21      	ldr	r2, [pc, #132]	@ (800ae40 <__ieee754_powf+0x420>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d907      	bls.n	800add0 <__ieee754_powf+0x3b0>
 800adc0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800adc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc8:	bf4c      	ite	mi
 800adca:	2001      	movmi	r0, #1
 800adcc:	2000      	movpl	r0, #0
 800adce:	e6c7      	b.n	800ab60 <__ieee754_powf+0x140>
 800add0:	d138      	bne.n	800ae44 <__ieee754_powf+0x424>
 800add2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800add6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800adda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adde:	dbea      	blt.n	800adb6 <__ieee754_powf+0x396>
 800ade0:	e7ee      	b.n	800adc0 <__ieee754_powf+0x3a0>
 800ade2:	bf00      	nop
 800ade4:	00000000 	.word	0x00000000
 800ade8:	3f7ffff3 	.word	0x3f7ffff3
 800adec:	3f800007 	.word	0x3f800007
 800adf0:	3eaaaaab 	.word	0x3eaaaaab
 800adf4:	3fb8aa00 	.word	0x3fb8aa00
 800adf8:	3fb8aa3b 	.word	0x3fb8aa3b
 800adfc:	36eca570 	.word	0x36eca570
 800ae00:	4b800000 	.word	0x4b800000
 800ae04:	001cc471 	.word	0x001cc471
 800ae08:	005db3d6 	.word	0x005db3d6
 800ae0c:	0800c13c 	.word	0x0800c13c
 800ae10:	fffff000 	.word	0xfffff000
 800ae14:	3e6c3255 	.word	0x3e6c3255
 800ae18:	3e53f142 	.word	0x3e53f142
 800ae1c:	3e8ba305 	.word	0x3e8ba305
 800ae20:	3edb6db7 	.word	0x3edb6db7
 800ae24:	3f19999a 	.word	0x3f19999a
 800ae28:	0800c12c 	.word	0x0800c12c
 800ae2c:	3f76384f 	.word	0x3f76384f
 800ae30:	3f763800 	.word	0x3f763800
 800ae34:	369dc3a0 	.word	0x369dc3a0
 800ae38:	0800c134 	.word	0x0800c134
 800ae3c:	3338aa3c 	.word	0x3338aa3c
 800ae40:	43160000 	.word	0x43160000
 800ae44:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800ae48:	d96f      	bls.n	800af2a <__ieee754_powf+0x50a>
 800ae4a:	15db      	asrs	r3, r3, #23
 800ae4c:	3b7e      	subs	r3, #126	@ 0x7e
 800ae4e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800ae52:	4118      	asrs	r0, r3
 800ae54:	4408      	add	r0, r1
 800ae56:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ae5a:	4a4e      	ldr	r2, [pc, #312]	@ (800af94 <__ieee754_powf+0x574>)
 800ae5c:	3b7f      	subs	r3, #127	@ 0x7f
 800ae5e:	411a      	asrs	r2, r3
 800ae60:	4002      	ands	r2, r0
 800ae62:	ee07 2a10 	vmov	s14, r2
 800ae66:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ae6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800ae6e:	f1c3 0317 	rsb	r3, r3, #23
 800ae72:	4118      	asrs	r0, r3
 800ae74:	2900      	cmp	r1, #0
 800ae76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae7a:	bfb8      	it	lt
 800ae7c:	4240      	neglt	r0, r0
 800ae7e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800ae82:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800af98 <__ieee754_powf+0x578>
 800ae86:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800af9c <__ieee754_powf+0x57c>
 800ae8a:	ee16 3a90 	vmov	r3, s13
 800ae8e:	f36f 030b 	bfc	r3, #0, #12
 800ae92:	ee06 3a90 	vmov	s13, r3
 800ae96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ae9a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ae9e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800aea2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800afa0 <__ieee754_powf+0x580>
 800aea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aeaa:	eee0 7a87 	vfma.f32	s15, s1, s14
 800aeae:	eeb0 7a67 	vmov.f32	s14, s15
 800aeb2:	eea6 7a86 	vfma.f32	s14, s13, s12
 800aeb6:	eef0 5a47 	vmov.f32	s11, s14
 800aeba:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800aebe:	ee67 6a07 	vmul.f32	s13, s14, s14
 800aec2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800aec6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800afa4 <__ieee754_powf+0x584>
 800aeca:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800afa8 <__ieee754_powf+0x588>
 800aece:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800aed2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800afac <__ieee754_powf+0x58c>
 800aed6:	eee6 5a26 	vfma.f32	s11, s12, s13
 800aeda:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800afb0 <__ieee754_powf+0x590>
 800aede:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800aee2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800afb4 <__ieee754_powf+0x594>
 800aee6:	eee6 5a26 	vfma.f32	s11, s12, s13
 800aeea:	eeb0 6a47 	vmov.f32	s12, s14
 800aeee:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800aef2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800aef6:	ee67 5a06 	vmul.f32	s11, s14, s12
 800aefa:	ee36 6a66 	vsub.f32	s12, s12, s13
 800aefe:	eee7 7a27 	vfma.f32	s15, s14, s15
 800af02:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800af06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800af12:	ee10 3a10 	vmov	r3, s0
 800af16:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800af1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800af1e:	da06      	bge.n	800af2e <__ieee754_powf+0x50e>
 800af20:	f000 f854 	bl	800afcc <scalbnf>
 800af24:	ee20 0a08 	vmul.f32	s0, s0, s16
 800af28:	e592      	b.n	800aa50 <__ieee754_powf+0x30>
 800af2a:	2000      	movs	r0, #0
 800af2c:	e7a7      	b.n	800ae7e <__ieee754_powf+0x45e>
 800af2e:	ee00 3a10 	vmov	s0, r3
 800af32:	e7f7      	b.n	800af24 <__ieee754_powf+0x504>
 800af34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800af38:	e58a      	b.n	800aa50 <__ieee754_powf+0x30>
 800af3a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800afb8 <__ieee754_powf+0x598>
 800af3e:	e587      	b.n	800aa50 <__ieee754_powf+0x30>
 800af40:	eeb0 0a48 	vmov.f32	s0, s16
 800af44:	e584      	b.n	800aa50 <__ieee754_powf+0x30>
 800af46:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800af4a:	f43f adbb 	beq.w	800aac4 <__ieee754_powf+0xa4>
 800af4e:	2502      	movs	r5, #2
 800af50:	eeb0 0a48 	vmov.f32	s0, s16
 800af54:	f000 f832 	bl	800afbc <fabsf>
 800af58:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800af5c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800af60:	4647      	mov	r7, r8
 800af62:	d003      	beq.n	800af6c <__ieee754_powf+0x54c>
 800af64:	f1b8 0f00 	cmp.w	r8, #0
 800af68:	f47f addb 	bne.w	800ab22 <__ieee754_powf+0x102>
 800af6c:	2c00      	cmp	r4, #0
 800af6e:	bfbc      	itt	lt
 800af70:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800af74:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800af78:	2e00      	cmp	r6, #0
 800af7a:	f6bf ad69 	bge.w	800aa50 <__ieee754_powf+0x30>
 800af7e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800af82:	ea58 0805 	orrs.w	r8, r8, r5
 800af86:	f47f adc7 	bne.w	800ab18 <__ieee754_powf+0xf8>
 800af8a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800af8e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800af92:	e55d      	b.n	800aa50 <__ieee754_powf+0x30>
 800af94:	ff800000 	.word	0xff800000
 800af98:	3f317218 	.word	0x3f317218
 800af9c:	3f317200 	.word	0x3f317200
 800afa0:	35bfbe8c 	.word	0x35bfbe8c
 800afa4:	b5ddea0e 	.word	0xb5ddea0e
 800afa8:	3331bb4c 	.word	0x3331bb4c
 800afac:	388ab355 	.word	0x388ab355
 800afb0:	bb360b61 	.word	0xbb360b61
 800afb4:	3e2aaaab 	.word	0x3e2aaaab
 800afb8:	00000000 	.word	0x00000000

0800afbc <fabsf>:
 800afbc:	ee10 3a10 	vmov	r3, s0
 800afc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afc4:	ee00 3a10 	vmov	s0, r3
 800afc8:	4770      	bx	lr
	...

0800afcc <scalbnf>:
 800afcc:	ee10 3a10 	vmov	r3, s0
 800afd0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800afd4:	d02b      	beq.n	800b02e <scalbnf+0x62>
 800afd6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800afda:	d302      	bcc.n	800afe2 <scalbnf+0x16>
 800afdc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800afe0:	4770      	bx	lr
 800afe2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800afe6:	d123      	bne.n	800b030 <scalbnf+0x64>
 800afe8:	4b24      	ldr	r3, [pc, #144]	@ (800b07c <scalbnf+0xb0>)
 800afea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b080 <scalbnf+0xb4>
 800afee:	4298      	cmp	r0, r3
 800aff0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aff4:	db17      	blt.n	800b026 <scalbnf+0x5a>
 800aff6:	ee10 3a10 	vmov	r3, s0
 800affa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800affe:	3a19      	subs	r2, #25
 800b000:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b004:	4288      	cmp	r0, r1
 800b006:	dd15      	ble.n	800b034 <scalbnf+0x68>
 800b008:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b084 <scalbnf+0xb8>
 800b00c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b088 <scalbnf+0xbc>
 800b010:	ee10 3a10 	vmov	r3, s0
 800b014:	eeb0 7a67 	vmov.f32	s14, s15
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bfb8      	it	lt
 800b01c:	eef0 7a66 	vmovlt.f32	s15, s13
 800b020:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b024:	4770      	bx	lr
 800b026:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b08c <scalbnf+0xc0>
 800b02a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b02e:	4770      	bx	lr
 800b030:	0dd2      	lsrs	r2, r2, #23
 800b032:	e7e5      	b.n	800b000 <scalbnf+0x34>
 800b034:	4410      	add	r0, r2
 800b036:	28fe      	cmp	r0, #254	@ 0xfe
 800b038:	dce6      	bgt.n	800b008 <scalbnf+0x3c>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	dd06      	ble.n	800b04c <scalbnf+0x80>
 800b03e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b042:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b046:	ee00 3a10 	vmov	s0, r3
 800b04a:	4770      	bx	lr
 800b04c:	f110 0f16 	cmn.w	r0, #22
 800b050:	da09      	bge.n	800b066 <scalbnf+0x9a>
 800b052:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b08c <scalbnf+0xc0>
 800b056:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b090 <scalbnf+0xc4>
 800b05a:	ee10 3a10 	vmov	r3, s0
 800b05e:	eeb0 7a67 	vmov.f32	s14, s15
 800b062:	2b00      	cmp	r3, #0
 800b064:	e7d9      	b.n	800b01a <scalbnf+0x4e>
 800b066:	3019      	adds	r0, #25
 800b068:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b06c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b070:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b094 <scalbnf+0xc8>
 800b074:	ee07 3a90 	vmov	s15, r3
 800b078:	e7d7      	b.n	800b02a <scalbnf+0x5e>
 800b07a:	bf00      	nop
 800b07c:	ffff3cb0 	.word	0xffff3cb0
 800b080:	4c000000 	.word	0x4c000000
 800b084:	7149f2ca 	.word	0x7149f2ca
 800b088:	f149f2ca 	.word	0xf149f2ca
 800b08c:	0da24260 	.word	0x0da24260
 800b090:	8da24260 	.word	0x8da24260
 800b094:	33000000 	.word	0x33000000

0800b098 <with_errnof>:
 800b098:	b510      	push	{r4, lr}
 800b09a:	ed2d 8b02 	vpush	{d8}
 800b09e:	eeb0 8a40 	vmov.f32	s16, s0
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	f7fd fbde 	bl	8008864 <__errno>
 800b0a8:	eeb0 0a48 	vmov.f32	s0, s16
 800b0ac:	ecbd 8b02 	vpop	{d8}
 800b0b0:	6004      	str	r4, [r0, #0]
 800b0b2:	bd10      	pop	{r4, pc}

0800b0b4 <xflowf>:
 800b0b4:	b130      	cbz	r0, 800b0c4 <xflowf+0x10>
 800b0b6:	eef1 7a40 	vneg.f32	s15, s0
 800b0ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b0be:	2022      	movs	r0, #34	@ 0x22
 800b0c0:	f7ff bfea 	b.w	800b098 <with_errnof>
 800b0c4:	eef0 7a40 	vmov.f32	s15, s0
 800b0c8:	e7f7      	b.n	800b0ba <xflowf+0x6>
	...

0800b0cc <__math_uflowf>:
 800b0cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b0d4 <__math_uflowf+0x8>
 800b0d0:	f7ff bff0 	b.w	800b0b4 <xflowf>
 800b0d4:	10000000 	.word	0x10000000

0800b0d8 <__math_oflowf>:
 800b0d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b0e0 <__math_oflowf+0x8>
 800b0dc:	f7ff bfea 	b.w	800b0b4 <xflowf>
 800b0e0:	70000000 	.word	0x70000000

0800b0e4 <__ieee754_sqrtf>:
 800b0e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b0e8:	4770      	bx	lr
	...

0800b0ec <_init>:
 800b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ee:	bf00      	nop
 800b0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f2:	bc08      	pop	{r3}
 800b0f4:	469e      	mov	lr, r3
 800b0f6:	4770      	bx	lr

0800b0f8 <_fini>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	bf00      	nop
 800b0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0fe:	bc08      	pop	{r3}
 800b100:	469e      	mov	lr, r3
 800b102:	4770      	bx	lr
