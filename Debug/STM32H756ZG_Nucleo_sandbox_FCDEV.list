
STM32H756ZG_Nucleo_sandbox_FCDEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fa4  08011bc0  08011bc0  00012bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b64  08013b64  00015334  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013b64  08013b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b6c  08013b6c  00015334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b6c  08013b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013b70  08013b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08013b74  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f4  08013d68  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000294  08013e08  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000ec0  20000338  08013ea8  00015338  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  200011f8  08013ea8  000161f8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00015334  2**0
                  CONTENTS, READONLY
 14 .debug_info   000296ec  00000000  00000000  00015364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f92  00000000  00000000  0003ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002238  00000000  00000000  000429e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a76  00000000  00000000  00044c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b42f  00000000  00000000  00046696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024e25  00000000  00000000  00071ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00102145  00000000  00000000  000968ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00198a2f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ab24  00000000  00000000  00198a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  001a3598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000338 	.word	0x20000338
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011ba4 	.word	0x08011ba4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000033c 	.word	0x2000033c
 800020c:	08011ba4 	.word	0x08011ba4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b09c      	sub	sp, #112	@ 0x70
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a05 	vstr	s0, [r7, #20]
 800106a:	edc7 0a04 	vstr	s1, [r7, #16]
 800106e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001072:	edc7 1a02 	vstr	s3, [r7, #8]
 8001076:	ed87 2a01 	vstr	s4, [r7, #4]
 800107a:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800107e:	4bec      	ldr	r3, [pc, #944]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eeb1 7a67 	vneg.f32	s14, s15
 8001088:	edd7 7a05 	vldr	s15, [r7, #20]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	4be8      	ldr	r3, [pc, #928]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001092:	edd3 6a00 	vldr	s13, [r3]
 8001096:	edd7 7a04 	vldr	s15, [r7, #16]
 800109a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a2:	4be5      	ldr	r3, [pc, #916]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80010a4:	edd3 6a00 	vldr	s13, [r3]
 80010a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010bc:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80010c0:	4bde      	ldr	r3, [pc, #888]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ce:	4bd9      	ldr	r3, [pc, #868]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80010d0:	edd3 6a00 	vldr	s13, [r3]
 80010d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e0:	4bd5      	ldr	r3, [pc, #852]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80010e2:	edd3 6a00 	vldr	s13, [r3]
 80010e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80010fe:	4bcf      	ldr	r3, [pc, #828]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 8001100:	ed93 7a00 	vldr	s14, [r3]
 8001104:	edd7 7a04 	vldr	s15, [r7, #16]
 8001108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110c:	4bc8      	ldr	r3, [pc, #800]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800110e:	edd3 6a00 	vldr	s13, [r3]
 8001112:	edd7 7a03 	vldr	s15, [r7, #12]
 8001116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800111e:	4bc6      	ldr	r3, [pc, #792]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 8001120:	edd3 6a00 	vldr	s13, [r3]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001130:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001138:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800113c:	4bbf      	ldr	r3, [pc, #764]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	edd7 7a03 	vldr	s15, [r7, #12]
 8001146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114a:	4bb9      	ldr	r3, [pc, #740]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800114c:	edd3 6a00 	vldr	s13, [r3]
 8001150:	edd7 7a04 	vldr	s15, [r7, #16]
 8001154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800115c:	4bb5      	ldr	r3, [pc, #724]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 800115e:	edd3 6a00 	vldr	s13, [r3]
 8001162:	edd7 7a05 	vldr	s15, [r7, #20]
 8001166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001176:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800117a:	edd7 7a02 	vldr	s15, [r7, #8]
 800117e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d10e      	bne.n	80011a6 <MadgwickAHRSupdateIMU+0x146>
 8001188:	edd7 7a01 	vldr	s15, [r7, #4]
 800118c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d107      	bne.n	80011a6 <MadgwickAHRSupdateIMU+0x146>
 8001196:	edd7 7a00 	vldr	s15, [r7]
 800119a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	f000 81e5 	beq.w	8001570 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80011a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80011ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ba:	edd7 7a00 	vldr	s15, [r7]
 80011be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	f000 fa6d 	bl	80016a8 <invSqrt>
 80011ce:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		ax *= recipNorm;
 80011d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011d6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80011e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80011e6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 80011f2:	ed97 7a00 	vldr	s14, [r7]
 80011f6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fe:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001202:	4b8e      	ldr	r3, [pc, #568]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800120c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q1 = 2.0f * q1;
 8001210:	4b87      	ldr	r3, [pc, #540]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800121a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_2q2 = 2.0f * q2;
 800121e:	4b85      	ldr	r3, [pc, #532]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001228:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_2q3 = 2.0f * q3;
 800122c:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001236:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q0 = 4.0f * q0;
 800123a:	4b80      	ldr	r3, [pc, #512]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_4q1 = 4.0f * q1;
 800124c:	4b78      	ldr	r3, [pc, #480]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_4q2 = 4.0f * q2;
 800125e:	4b75      	ldr	r3, [pc, #468]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		_8q1 = 8.0f * q1;
 8001270:	4b6f      	ldr	r3, [pc, #444]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800127a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		_8q2 = 8.0f * q2;
 8001282:	4b6c      	ldr	r3, [pc, #432]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800128c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001290:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q0q0 = q0 * q0;
 8001294:	4b69      	ldr	r3, [pc, #420]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 8001296:	ed93 7a00 	vldr	s14, [r3]
 800129a:	4b68      	ldr	r3, [pc, #416]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q1q1 = q1 * q1;
 80012a8:	4b61      	ldr	r3, [pc, #388]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 80012aa:	ed93 7a00 	vldr	s14, [r3]
 80012ae:	4b60      	ldr	r3, [pc, #384]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		q2q2 = q2 * q2;
 80012bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80012be:	ed93 7a00 	vldr	s14, [r3]
 80012c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		q3q3 = q3 * q3;
 80012d0:	4b59      	ldr	r3, [pc, #356]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80012d2:	ed93 7a00 	vldr	s14, [r3]
 80012d6:	4b58      	ldr	r3, [pc, #352]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80012e4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80012e8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f0:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80012f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001300:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001304:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001310:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001314:	edd7 7a01 	vldr	s15, [r7, #4]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001320:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001324:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001328:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800132c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001330:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001334:	edd7 7a02 	vldr	s15, [r7, #8]
 8001338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001340:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001344:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001348:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800134c:	4b38      	ldr	r3, [pc, #224]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135a:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee37 7a67 	vsub.f32	s14, s14, s15
 800136a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800136e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001372:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001376:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800137a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001382:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001386:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800138a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001392:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001396:	edd7 7a00 	vldr	s15, [r7]
 800139a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80013a6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80013aa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80013ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013bc:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80013c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013cc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80013d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013dc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80013e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ec:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f4:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80013f8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001404:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001408:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800140c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001414:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001418:	edd7 7a00 	vldr	s15, [r7]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001428:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800142c:	e008      	b.n	8001440 <MadgwickAHRSupdateIMU+0x3e0>
 800142e:	bf00      	nop
 8001430:	20000354 	.word	0x20000354
 8001434:	20000358 	.word	0x20000358
 8001438:	2000035c 	.word	0x2000035c
 800143c:	20000004 	.word	0x20000004
 8001440:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001444:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001448:	4b91      	ldr	r3, [pc, #580]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001452:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001456:	edd7 7a02 	vldr	s15, [r7, #8]
 800145a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001462:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001466:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800146a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800146e:	4b88      	ldr	r3, [pc, #544]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001480:	edd7 7a01 	vldr	s15, [r7, #4]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001490:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001494:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001498:	edd7 7a08 	vldr	s15, [r7, #32]
 800149c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	f000 f8f2 	bl	80016a8 <invSqrt>
 80014c4:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		s0 *= recipNorm;
 80014c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014cc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 *= recipNorm;
 80014d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80014dc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80014e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ec:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80014f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80014fc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8001508:	4b62      	ldr	r3, [pc, #392]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 800150a:	ed93 7a00 	vldr	s14, [r3]
 800150e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800151a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot2 -= beta * s1;
 8001522:	4b5c      	ldr	r3, [pc, #368]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 8001524:	ed93 7a00 	vldr	s14, [r3]
 8001528:	edd7 7a08 	vldr	s15, [r7, #32]
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		qDot3 -= beta * s2;
 800153c:	4b55      	ldr	r3, [pc, #340]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	edd7 7a07 	vldr	s15, [r7, #28]
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		qDot4 -= beta * s3;
 8001556:	4b4f      	ldr	r3, [pc, #316]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 8001558:	ed93 7a00 	vldr	s14, [r3]
 800155c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001570:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001574:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 8001578:	ee27 7a87 	vmul.f32	s14, s15, s14
 800157c:	4b47      	ldr	r3, [pc, #284]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001586:	4b45      	ldr	r3, [pc, #276]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 8001588:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800158c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001590:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 8001594:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001598:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a2:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80015a8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80015ac:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 80015b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015b4:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 80015c0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80015c4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80015c8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 80015cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80015e0:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 80015f2:	edd3 6a00 	vldr	s13, [r3]
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001604:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 8001606:	edd3 6a00 	vldr	s13, [r3]
 800160a:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 800161a:	edd3 6a00 	vldr	s13, [r3]
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f000 f83a 	bl	80016a8 <invSqrt>
 8001634:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
	q0 *= recipNorm;
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 8001648:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 800165c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001660:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 8001670:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001682:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
}
 8001688:	bf00      	nop
 800168a:	3770      	adds	r7, #112	@ 0x70
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000035c 	.word	0x2000035c
 8001694:	20000000 	.word	0x20000000
 8001698:	3c23d70a 	.word	0x3c23d70a
 800169c:	20000004 	.word	0x20000004
 80016a0:	20000354 	.word	0x20000354
 80016a4:	20000358 	.word	0x20000358

080016a8 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0a01 	vstr	s0, [r7, #4]
	if (instability_fix == 0)
 80016b2:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <invSqrt+0xdc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d12d      	bne.n	8001716 <invSqrt+0x6e>
	{
		/* original code */
		float halfx = 0.5f * x;
 80016ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80016be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c6:	edc7 7a06 	vstr	s15, [r7, #24]
		float y = x;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	617b      	str	r3, [r7, #20]
		long i = *(long*)&y;
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
		i = 0x5f3759df - (i>>1);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	105a      	asrs	r2, r3, #1
 80016da:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <invSqrt+0xe0>)
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	613b      	str	r3, [r7, #16]
		y = *(float*)&i;
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	617b      	str	r3, [r7, #20]
		y = y * (1.5f - (halfx * y * y));
 80016e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80016ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001704:	edd7 7a05 	vldr	s15, [r7, #20]
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	edc7 7a05 	vstr	s15, [r7, #20]
		return y;
 8001710:	edd7 7a05 	vldr	s15, [r7, #20]
 8001714:	e030      	b.n	8001778 <invSqrt+0xd0>
	}
	else if (instability_fix == 1)
 8001716:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <invSqrt+0xdc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d120      	bne.n	8001760 <invSqrt+0xb8>
	{
		/* close-to-optimal  method with low cost from http://pizer.wordpress.com/2008/10/12/fast-inverse-square-root */
		unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	085a      	lsrs	r2, r3, #1
 8001724:	4b19      	ldr	r3, [pc, #100]	@ (800178c <invSqrt+0xe4>)
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
		float tmp = *(float*)&i;
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61fb      	str	r3, [r7, #28]
		return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
 8001732:	edd7 7a01 	vldr	s15, [r7, #4]
 8001736:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001790 <invSqrt+0xe8>
 800173a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001746:	edd7 7a07 	vldr	s15, [r7, #28]
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001794 <invSqrt+0xec>
 8001752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001756:	edd7 7a07 	vldr	s15, [r7, #28]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	e00b      	b.n	8001778 <invSqrt+0xd0>
	}
	else
	{
		/* optimal but expensive method: */
		return 1.0f / sqrtf(x);
 8001760:	edd7 7a01 	vldr	s15, [r7, #4]
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	f00f fe90 	bl	801148c <sqrtf>
 800176c:	eeb0 7a40 	vmov.f32	s14, s0
 8001770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001774:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}
}
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	5f3759df 	.word	0x5f3759df
 800178c:	5f1f1412 	.word	0x5f1f1412
 8001790:	3f36d312 	.word	0x3f36d312
 8001794:	3fd851ff 	.word	0x3fd851ff

08001798 <SD_CS_Assert>:
extern UART_HandleTypeDef huart3; // Assuming huart3 is used for debug prints

static SD_CardInfo_t sd_card_info;

// --- Private Helper Functions ---
static void SD_CS_Assert(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017a2:	4802      	ldr	r0, [pc, #8]	@ (80017ac <SD_CS_Assert+0x14>)
 80017a4:	f007 fab4 	bl	8008d10 <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40020400 	.word	0x40020400

080017b0 <SD_CS_Deassert>:

static void SD_CS_Deassert(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ba:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <SD_CS_Deassert+0x14>)
 80017bc:	f007 faa8 	bl	8008d10 <HAL_GPIO_WritePin>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40020400 	.word	0x40020400

080017c8 <SD_SPI_TransmitReceive>:

// Transmit a byte and receive a byte
static uint8_t SD_SPI_TransmitReceive(uint8_t data_out) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
    uint8_t data_in = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
    if (sd_card_info.hspi != NULL) {
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <SD_SPI_TransmitReceive+0x38>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00a      	beq.n	80017f4 <SD_SPI_TransmitReceive+0x2c>
        HAL_SPI_TransmitReceive(sd_card_info.hspi, &data_out, &data_in, 1, HAL_MAX_DELAY);
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <SD_SPI_TransmitReceive+0x38>)
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	f107 020f 	add.w	r2, r7, #15
 80017e6:	1df9      	adds	r1, r7, #7
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2301      	movs	r3, #1
 80017f0:	f009 fdb3 	bl	800b35a <HAL_SPI_TransmitReceive>
    }
    return data_in;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000360 	.word	0x20000360

08001804 <SD_SendCommand>:

// Send a command to the SD card
// Returns the R1 response byte (or the first byte of a multi-byte response)
static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc, uint8_t* response_buffer, uint16_t response_len) {
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b089      	sub	sp, #36	@ 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	4613      	mov	r3, r2
 8001814:	73bb      	strb	r3, [r7, #14]
    uint8_t r1_response = 0xFF;
 8001816:	23ff      	movs	r3, #255	@ 0xff
 8001818:	76bb      	strb	r3, [r7, #26]
    uint8_t cmd_packet[6];
    int i;

    SD_CS_Assert();
 800181a:	f7ff ffbd 	bl	8001798 <SD_CS_Assert>

    // Send 0xFF for a few clocks before sending command
    SD_SPI_TransmitReceive(0xFF);
 800181e:	20ff      	movs	r0, #255	@ 0xff
 8001820:	f7ff ffd2 	bl	80017c8 <SD_SPI_TransmitReceive>

    cmd_packet[0] = 0x40 | cmd;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800182a:	b2db      	uxtb	r3, r3
 800182c:	753b      	strb	r3, [r7, #20]
    cmd_packet[1] = (uint8_t)(arg >> 24);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0e1b      	lsrs	r3, r3, #24
 8001832:	b2db      	uxtb	r3, r3
 8001834:	757b      	strb	r3, [r7, #21]
    cmd_packet[2] = (uint8_t)(arg >> 16);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	b2db      	uxtb	r3, r3
 800183c:	75bb      	strb	r3, [r7, #22]
    cmd_packet[3] = (uint8_t)(arg >> 8);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	b2db      	uxtb	r3, r3
 8001844:	75fb      	strb	r3, [r7, #23]
    cmd_packet[4] = (uint8_t)(arg);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	763b      	strb	r3, [r7, #24]
    cmd_packet[5] = crc;
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	767b      	strb	r3, [r7, #25]

    for (i = 0; i < 6; i++) {
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	e00a      	b.n	800186c <SD_SendCommand+0x68>
        SD_SPI_TransmitReceive(cmd_packet[i]);
 8001856:	f107 0214 	add.w	r2, r7, #20
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	4413      	add	r3, r2
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ffb1 	bl	80017c8 <SD_SPI_TransmitReceive>
    for (i = 0; i < 6; i++) {
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b05      	cmp	r3, #5
 8001870:	ddf1      	ble.n	8001856 <SD_SendCommand+0x52>
    }

    // Wait for a valid response (not 0xFF). Max 10 tries (Ncr timeout).
    uint8_t n = 10;
 8001872:	230a      	movs	r3, #10
 8001874:	76fb      	strb	r3, [r7, #27]
    do {
        r1_response = SD_SPI_TransmitReceive(0xFF);
 8001876:	20ff      	movs	r0, #255	@ 0xff
 8001878:	f7ff ffa6 	bl	80017c8 <SD_SPI_TransmitReceive>
 800187c:	4603      	mov	r3, r0
 800187e:	76bb      	strb	r3, [r7, #26]
        n--;
 8001880:	7efb      	ldrb	r3, [r7, #27]
 8001882:	3b01      	subs	r3, #1
 8001884:	76fb      	strb	r3, [r7, #27]
    } while ((r1_response == 0xFF) && (n > 0));
 8001886:	7ebb      	ldrb	r3, [r7, #26]
 8001888:	2bff      	cmp	r3, #255	@ 0xff
 800188a:	d102      	bne.n	8001892 <SD_SendCommand+0x8e>
 800188c:	7efb      	ldrb	r3, [r7, #27]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f1      	bne.n	8001876 <SD_SendCommand+0x72>

    if (r1_response != 0xFF && response_buffer && response_len > 0) { // Check if R1 is valid before reading more
 8001892:	7ebb      	ldrb	r3, [r7, #26]
 8001894:	2bff      	cmp	r3, #255	@ 0xff
 8001896:	d017      	beq.n	80018c8 <SD_SendCommand+0xc4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d014      	beq.n	80018c8 <SD_SendCommand+0xc4>
 800189e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d011      	beq.n	80018c8 <SD_SendCommand+0xc4>
        // response_buffer[0] = r1_response; // DO NOT store R1 in the payload buffer
        for (i = 0; i < response_len; i++) { // Read response_len bytes into the buffer starting at index 0
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e00a      	b.n	80018c0 <SD_SendCommand+0xbc>
            response_buffer[i] = SD_SPI_TransmitReceive(0xFF);
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	18d4      	adds	r4, r2, r3
 80018b0:	20ff      	movs	r0, #255	@ 0xff
 80018b2:	f7ff ff89 	bl	80017c8 <SD_SPI_TransmitReceive>
 80018b6:	4603      	mov	r3, r0
 80018b8:	7023      	strb	r3, [r4, #0]
        for (i = 0; i < response_len; i++) { // Read response_len bytes into the buffer starting at index 0
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3301      	adds	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dbf0      	blt.n	80018aa <SD_SendCommand+0xa6>
    
    // For commands like CMD0, no CS de-assert here yet, or for CMD58 etc.
    // For simple R1 commands, we might de-assert, but init sequence needs CS low for some part.
    // SD_CS_Deassert(); // De-assert typically after command completion unless in a sequence

    return r1_response;
 80018c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	@ 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
	...

080018d4 <SD_SPI_Init>:

// Forward declaration for internal use
static void SD_Log_Write_CSV_Header(void);

// --- Public API Functions ---
void SD_SPI_Init(SPI_HandleTypeDef *hspi_instance) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    sd_card_info.hspi = hspi_instance;
 80018dc:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <SD_SPI_Init+0x28>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
    sd_card_info.initialized = false;
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <SD_SPI_Init+0x28>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	715a      	strb	r2, [r3, #5]
    sd_card_info.card_type = 0;
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <SD_SPI_Init+0x28>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	711a      	strb	r2, [r3, #4]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000360 	.word	0x20000360

08001900 <SD_Init>:

uint8_t SD_Init(void) {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b097      	sub	sp, #92	@ 0x5c
 8001904:	af02      	add	r7, sp, #8
    uint8_t r1, response_buf[4];
    uint16_t retry_count = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    char dbg_buf[64];

    if (!sd_card_info.hspi) {
 800190c:	4bb7      	ldr	r3, [pc, #732]	@ (8001bec <SD_Init+0x2ec>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d111      	bne.n	8001938 <SD_Init+0x38>
        sprintf(dbg_buf, "SD_Init: SPI handle not set!\r\n");
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	49b6      	ldr	r1, [pc, #728]	@ (8001bf0 <SD_Init+0x2f0>)
 8001918:	4618      	mov	r0, r3
 800191a:	f00c f8e1 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fcc5 	bl	80002b0 <strlen>
 8001926:	4603      	mov	r3, r0
 8001928:	b29a      	uxth	r2, r3
 800192a:	1d39      	adds	r1, r7, #4
 800192c:	2364      	movs	r3, #100	@ 0x64
 800192e:	48b1      	ldr	r0, [pc, #708]	@ (8001bf4 <SD_Init+0x2f4>)
 8001930:	f00a f908 	bl	800bb44 <HAL_UART_Transmit>
        return 1; // Error
 8001934:	2301      	movs	r3, #1
 8001936:	e24c      	b.n	8001dd2 <SD_Init+0x4d2>
    }

    sd_card_info.initialized = false;
 8001938:	4bac      	ldr	r3, [pc, #688]	@ (8001bec <SD_Init+0x2ec>)
 800193a:	2200      	movs	r2, #0
 800193c:	715a      	strb	r2, [r3, #5]
    SD_CS_Deassert();
 800193e:	f7ff ff37 	bl	80017b0 <SD_CS_Deassert>

    // Send 80 dummy clocks (10 bytes of 0xFF)
    for (int i = 0; i < 10; i++) {
 8001942:	2300      	movs	r3, #0
 8001944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001946:	e005      	b.n	8001954 <SD_Init+0x54>
        SD_SPI_TransmitReceive(0xFF);
 8001948:	20ff      	movs	r0, #255	@ 0xff
 800194a:	f7ff ff3d 	bl	80017c8 <SD_SPI_TransmitReceive>
    for (int i = 0; i < 10; i++) {
 800194e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001950:	3301      	adds	r3, #1
 8001952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001956:	2b09      	cmp	r3, #9
 8001958:	ddf6      	ble.n	8001948 <SD_Init+0x48>
    }

    // CMD0: GO_IDLE_STATE
    sprintf(dbg_buf, "SD_Init: Sending CMD0\r\n"); HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	49a6      	ldr	r1, [pc, #664]	@ (8001bf8 <SD_Init+0x2f8>)
 800195e:	4618      	mov	r0, r3
 8001960:	f00c f8be 	bl	800dae0 <siprintf>
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fca2 	bl	80002b0 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	1d39      	adds	r1, r7, #4
 8001972:	2364      	movs	r3, #100	@ 0x64
 8001974:	489f      	ldr	r0, [pc, #636]	@ (8001bf4 <SD_Init+0x2f4>)
 8001976:	f00a f8e5 	bl	800bb44 <HAL_UART_Transmit>
    r1 = SD_SendCommand(CMD0, 0, 0x95, NULL, 0);
 800197a:	2300      	movs	r3, #0
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	2295      	movs	r2, #149	@ 0x95
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff ff3d 	bl	8001804 <SD_SendCommand>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    SD_CS_Deassert(); // CMD0 needs CS to go high after
 8001990:	f7ff ff0e 	bl	80017b0 <SD_CS_Deassert>
    if (r1 != R1_IDLE_STATE) {
 8001994:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001998:	2b01      	cmp	r3, #1
 800199a:	d019      	beq.n	80019d0 <SD_Init+0xd0>
        sprintf(dbg_buf, "SD_Init: CMD0 failed, response: 0x%02X\r\n", r1);
 800199c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4996      	ldr	r1, [pc, #600]	@ (8001bfc <SD_Init+0x2fc>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00c f89b 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fc7f 	bl	80002b0 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	1d39      	adds	r1, r7, #4
 80019b8:	2364      	movs	r3, #100	@ 0x64
 80019ba:	488e      	ldr	r0, [pc, #568]	@ (8001bf4 <SD_Init+0x2f4>)
 80019bc:	f00a f8c2 	bl	800bb44 <HAL_UART_Transmit>
        return r1 == 0xFF ? 2 : 3; // Timeout or other error
 80019c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019c4:	2bff      	cmp	r3, #255	@ 0xff
 80019c6:	d101      	bne.n	80019cc <SD_Init+0xcc>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e202      	b.n	8001dd2 <SD_Init+0x4d2>
 80019cc:	2303      	movs	r3, #3
 80019ce:	e200      	b.n	8001dd2 <SD_Init+0x4d2>
    }
    sprintf(dbg_buf, "SD_Init: CMD0 OK\r\n"); HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	498b      	ldr	r1, [pc, #556]	@ (8001c00 <SD_Init+0x300>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00c f883 	bl	800dae0 <siprintf>
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fc67 	bl	80002b0 <strlen>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	1d39      	adds	r1, r7, #4
 80019e8:	2364      	movs	r3, #100	@ 0x64
 80019ea:	4882      	ldr	r0, [pc, #520]	@ (8001bf4 <SD_Init+0x2f4>)
 80019ec:	f00a f8aa 	bl	800bb44 <HAL_UART_Transmit>

    // CMD8: SEND_IF_COND (for SDv2 cards)
    sprintf(dbg_buf, "SD_Init: Sending CMD8\r\n"); HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4984      	ldr	r1, [pc, #528]	@ (8001c04 <SD_Init+0x304>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00c f873 	bl	800dae0 <siprintf>
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fc57 	bl	80002b0 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	1d39      	adds	r1, r7, #4
 8001a08:	2364      	movs	r3, #100	@ 0x64
 8001a0a:	487a      	ldr	r0, [pc, #488]	@ (8001bf4 <SD_Init+0x2f4>)
 8001a0c:	f00a f89a 	bl	800bb44 <HAL_UART_Transmit>
    r1 = SD_SendCommand(CMD8, 0x000001AA, 0x87, response_buf, 4); // Argument: VHS=2.7-3.6V, Check Pattern=0xAA
 8001a10:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a14:	2204      	movs	r2, #4
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	2287      	movs	r2, #135	@ 0x87
 8001a1a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001a1e:	2008      	movs	r0, #8
 8001a20:	f7ff fef0 	bl	8001804 <SD_SendCommand>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    // SD_CS_Deassert(); // CMD8 response is on data lines, keep CS low for response
    if (r1 == R1_IDLE_STATE) { // If CMD8 is accepted
 8001a2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	f040 80f6 	bne.w	8001c20 <SD_Init+0x320>
        sprintf(dbg_buf, "SD_Init: CMD8 Response: 0x%02X 0x%02X 0x%02X 0x%02X\r\n", response_buf[0], response_buf[1], response_buf[2], response_buf[3]);
 8001a34:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001a3e:	461c      	mov	r4, r3
 8001a40:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001a44:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001a48:	1d38      	adds	r0, r7, #4
 8001a4a:	9201      	str	r2, [sp, #4]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	4623      	mov	r3, r4
 8001a50:	460a      	mov	r2, r1
 8001a52:	496d      	ldr	r1, [pc, #436]	@ (8001c08 <SD_Init+0x308>)
 8001a54:	f00c f844 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fc28 	bl	80002b0 <strlen>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	1d39      	adds	r1, r7, #4
 8001a66:	2364      	movs	r3, #100	@ 0x64
 8001a68:	4862      	ldr	r0, [pc, #392]	@ (8001bf4 <SD_Init+0x2f4>)
 8001a6a:	f00a f86b 	bl	800bb44 <HAL_UART_Transmit>
        if (response_buf[2] == 0x01 && response_buf[3] == 0xAA) { // Check pattern and VHS match
 8001a6e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	f040 80a5 	bne.w	8001bc2 <SD_Init+0x2c2>
 8001a78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001a7c:	2baa      	cmp	r3, #170	@ 0xaa
 8001a7e:	f040 80a0 	bne.w	8001bc2 <SD_Init+0x2c2>
            sd_card_info.card_type = SD_CARD_TYPE_SD2; // SDv2 card
 8001a82:	4b5a      	ldr	r3, [pc, #360]	@ (8001bec <SD_Init+0x2ec>)
 8001a84:	2202      	movs	r2, #2
 8001a86:	711a      	strb	r2, [r3, #4]
            sprintf(dbg_buf, "SD_Init: SDv2 card detected\r\n"); HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	4960      	ldr	r1, [pc, #384]	@ (8001c0c <SD_Init+0x30c>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00c f827 	bl	800dae0 <siprintf>
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fc0b 	bl	80002b0 <strlen>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	1d39      	adds	r1, r7, #4
 8001aa0:	2364      	movs	r3, #100	@ 0x64
 8001aa2:	4854      	ldr	r0, [pc, #336]	@ (8001bf4 <SD_Init+0x2f4>)
 8001aa4:	f00a f84e 	bl	800bb44 <HAL_UART_Transmit>
            // Try to initialize SDHC/SDXC (CMD55 + ACMD41 with HCS bit)
            retry_count = 0xFFFF; // Generous timeout for initialization
 8001aa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aac:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
            do {
                r1 = SD_SendCommand(CMD55, 0, 0xFF, NULL, 0); // APP_CMD
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	22ff      	movs	r2, #255	@ 0xff
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2037      	movs	r0, #55	@ 0x37
 8001abc:	f7ff fea2 	bl	8001804 <SD_SendCommand>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                SD_CS_Deassert(); // CMD55 needs CS toggle
 8001ac6:	f7ff fe73 	bl	80017b0 <SD_CS_Deassert>
                if (r1 > 1) break; // Error on CMD55
 8001aca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d81e      	bhi.n	8001b10 <SD_Init+0x210>
                
                r1 = SD_SendCommand(ACMD41, 0x40000000, 0xFF, NULL, 0); // HCS=1 (Host Capacity Support)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	22ff      	movs	r2, #255	@ 0xff
 8001ada:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ade:	2029      	movs	r0, #41	@ 0x29
 8001ae0:	f7ff fe90 	bl	8001804 <SD_SendCommand>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                SD_CS_Deassert(); // ACMD41 needs CS toggle
 8001aea:	f7ff fe61 	bl	80017b0 <SD_CS_Deassert>
                retry_count--;
 8001aee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
                HAL_Delay(1); // Small delay
 8001af8:	2001      	movs	r0, #1
 8001afa:	f006 faed 	bl	80080d8 <HAL_Delay>
            } while ((r1 != 0x00) && (retry_count > 0));
 8001afe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <SD_Init+0x212>
 8001b06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1d0      	bne.n	8001ab0 <SD_Init+0x1b0>
 8001b0e:	e000      	b.n	8001b12 <SD_Init+0x212>
                if (r1 > 1) break; // Error on CMD55
 8001b10:	bf00      	nop

            if (r1 == 0x00) { // Card is initialized
 8001b12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d13d      	bne.n	8001b96 <SD_Init+0x296>
                // Check OCR for CCS (Card Capacity Status) bit for SDHC/SDXC
                r1 = SD_SendCommand(CMD58, 0, 0xFF, response_buf, 4);
 8001b1a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b1e:	2204      	movs	r2, #4
 8001b20:	9200      	str	r2, [sp, #0]
 8001b22:	22ff      	movs	r2, #255	@ 0xff
 8001b24:	2100      	movs	r1, #0
 8001b26:	203a      	movs	r0, #58	@ 0x3a
 8001b28:	f7ff fe6c 	bl	8001804 <SD_SendCommand>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                SD_CS_Deassert();
 8001b32:	f7ff fe3d 	bl	80017b0 <SD_CS_Deassert>
                if (r1 == 0x00) {
 8001b36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80ed 	bne.w	8001d1a <SD_Init+0x41a>
                    if (response_buf[0] & 0x40) { // CCS bit is set
 8001b40:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <SD_Init+0x274>
                         sd_card_info.card_type = SD_CARD_TYPE_SDHC;
 8001b4c:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <SD_Init+0x2ec>)
 8001b4e:	2203      	movs	r2, #3
 8001b50:	711a      	strb	r2, [r3, #4]
                         sprintf(dbg_buf, "SD_Init: SDHC/SDXC card detected (CCS=1)\r\n"); HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	492e      	ldr	r1, [pc, #184]	@ (8001c10 <SD_Init+0x310>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00b ffc2 	bl	800dae0 <siprintf>
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fba6 	bl	80002b0 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	1d39      	adds	r1, r7, #4
 8001b6a:	2364      	movs	r3, #100	@ 0x64
 8001b6c:	4821      	ldr	r0, [pc, #132]	@ (8001bf4 <SD_Init+0x2f4>)
 8001b6e:	f009 ffe9 	bl	800bb44 <HAL_UART_Transmit>
            if (r1 == 0x00) { // Card is initialized
 8001b72:	e0d2      	b.n	8001d1a <SD_Init+0x41a>
                    } else {
                         sprintf(dbg_buf, "SD_Init: SDv2 (standard capacity) card (CCS=0)\r\n"); HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4927      	ldr	r1, [pc, #156]	@ (8001c14 <SD_Init+0x314>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00b ffb1 	bl	800dae0 <siprintf>
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fb95 	bl	80002b0 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	1d39      	adds	r1, r7, #4
 8001b8c:	2364      	movs	r3, #100	@ 0x64
 8001b8e:	4819      	ldr	r0, [pc, #100]	@ (8001bf4 <SD_Init+0x2f4>)
 8001b90:	f009 ffd8 	bl	800bb44 <HAL_UART_Transmit>
            if (r1 == 0x00) { // Card is initialized
 8001b94:	e0c1      	b.n	8001d1a <SD_Init+0x41a>
                         // Standard capacity SDv2 cards still need CMD16 to set block size to 512 if not default
                    }
                }
            } else {
                sprintf(dbg_buf, "SD_Init: ACMD41(HCS) failed, response: 0x%02X\r\n", r1);
 8001b96:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	491e      	ldr	r1, [pc, #120]	@ (8001c18 <SD_Init+0x318>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00b ff9e 	bl	800dae0 <siprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fb82 	bl	80002b0 <strlen>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	1d39      	adds	r1, r7, #4
 8001bb2:	2364      	movs	r3, #100	@ 0x64
 8001bb4:	480f      	ldr	r0, [pc, #60]	@ (8001bf4 <SD_Init+0x2f4>)
 8001bb6:	f009 ffc5 	bl	800bb44 <HAL_UART_Transmit>
                SD_CS_Deassert(); return 4; // Initialization error
 8001bba:	f7ff fdf9 	bl	80017b0 <SD_CS_Deassert>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	e107      	b.n	8001dd2 <SD_Init+0x4d2>
            }
        } else {
             sprintf(dbg_buf, "SD_Init: CMD8 pattern mismatch or VHS error\r\n"); HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4915      	ldr	r1, [pc, #84]	@ (8001c1c <SD_Init+0x31c>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f00b ff8a 	bl	800dae0 <siprintf>
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fb6e 	bl	80002b0 <strlen>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	1d39      	adds	r1, r7, #4
 8001bda:	2364      	movs	r3, #100	@ 0x64
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <SD_Init+0x2f4>)
 8001bde:	f009 ffb1 	bl	800bb44 <HAL_UART_Transmit>
            SD_CS_Deassert(); return 5; // CMD8 pattern mismatch
 8001be2:	f7ff fde5 	bl	80017b0 <SD_CS_Deassert>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e0f3      	b.n	8001dd2 <SD_Init+0x4d2>
 8001bea:	bf00      	nop
 8001bec:	20000360 	.word	0x20000360
 8001bf0:	08011bc0 	.word	0x08011bc0
 8001bf4:	2000071c 	.word	0x2000071c
 8001bf8:	08011be0 	.word	0x08011be0
 8001bfc:	08011bf8 	.word	0x08011bf8
 8001c00:	08011c24 	.word	0x08011c24
 8001c04:	08011c38 	.word	0x08011c38
 8001c08:	08011c50 	.word	0x08011c50
 8001c0c:	08011c88 	.word	0x08011c88
 8001c10:	08011ca8 	.word	0x08011ca8
 8001c14:	08011cd4 	.word	0x08011cd4
 8001c18:	08011d08 	.word	0x08011d08
 8001c1c:	08011d38 	.word	0x08011d38
        }
    } else if (r1 & R1_ILLEGAL_COMMAND) { // CMD8 not supported (SDv1 card)
 8001c20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d060      	beq.n	8001cee <SD_Init+0x3ee>
        sd_card_info.card_type = SD_CARD_TYPE_SD1;
 8001c2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001ddc <SD_Init+0x4dc>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	711a      	strb	r2, [r3, #4]
        sprintf(dbg_buf, "SD_Init: SDv1 card detected (CMD8 illegal)\r\n"); HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	496a      	ldr	r1, [pc, #424]	@ (8001de0 <SD_Init+0x4e0>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00b ff52 	bl	800dae0 <siprintf>
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fb36 	bl	80002b0 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	1d39      	adds	r1, r7, #4
 8001c4a:	2364      	movs	r3, #100	@ 0x64
 8001c4c:	4865      	ldr	r0, [pc, #404]	@ (8001de4 <SD_Init+0x4e4>)
 8001c4e:	f009 ff79 	bl	800bb44 <HAL_UART_Transmit>
        SD_CS_Deassert(); // CMD8 failed, de-assert CS
 8001c52:	f7ff fdad 	bl	80017b0 <SD_CS_Deassert>
        // Initialize SDv1 (CMD55 + ACMD41 without HCS bit)
        retry_count = 0xFFFF;
 8001c56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c5a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        do {
            r1 = SD_SendCommand(CMD55, 0, 0xFF, NULL, 0);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2300      	movs	r3, #0
 8001c64:	22ff      	movs	r2, #255	@ 0xff
 8001c66:	2100      	movs	r1, #0
 8001c68:	2037      	movs	r0, #55	@ 0x37
 8001c6a:	f7ff fdcb 	bl	8001804 <SD_SendCommand>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            SD_CS_Deassert();
 8001c74:	f7ff fd9c 	bl	80017b0 <SD_CS_Deassert>
            if (r1 > 1) break;
 8001c78:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d81d      	bhi.n	8001cbc <SD_Init+0x3bc>
            r1 = SD_SendCommand(ACMD41, 0x00000000, 0xFF, NULL, 0); // HCS=0
 8001c80:	2300      	movs	r3, #0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	22ff      	movs	r2, #255	@ 0xff
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2029      	movs	r0, #41	@ 0x29
 8001c8c:	f7ff fdba 	bl	8001804 <SD_SendCommand>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            SD_CS_Deassert();
 8001c96:	f7ff fd8b 	bl	80017b0 <SD_CS_Deassert>
            retry_count--;
 8001c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
            HAL_Delay(1);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f006 fa17 	bl	80080d8 <HAL_Delay>
        } while ((r1 != 0x00) && (retry_count > 0));
 8001caa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <SD_Init+0x3be>
 8001cb2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1d1      	bne.n	8001c5e <SD_Init+0x35e>
 8001cba:	e000      	b.n	8001cbe <SD_Init+0x3be>
            if (r1 > 1) break;
 8001cbc:	bf00      	nop
        if (r1 != 0x00) {
 8001cbe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d02a      	beq.n	8001d1c <SD_Init+0x41c>
            sprintf(dbg_buf, "SD_Init: ACMD41(SDv1) failed, response: 0x%02X\r\n", r1);
 8001cc6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	4946      	ldr	r1, [pc, #280]	@ (8001de8 <SD_Init+0x4e8>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f00b ff06 	bl	800dae0 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe faea 	bl	80002b0 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	1d39      	adds	r1, r7, #4
 8001ce2:	2364      	movs	r3, #100	@ 0x64
 8001ce4:	483f      	ldr	r0, [pc, #252]	@ (8001de4 <SD_Init+0x4e4>)
 8001ce6:	f009 ff2d 	bl	800bb44 <HAL_UART_Transmit>
            return 6; // Initialization error
 8001cea:	2306      	movs	r3, #6
 8001cec:	e071      	b.n	8001dd2 <SD_Init+0x4d2>
        }
    } else { // CMD8 failed for other reasons
        sprintf(dbg_buf, "SD_Init: CMD8 failed, response: 0x%02X\r\n", r1);
 8001cee:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	493d      	ldr	r1, [pc, #244]	@ (8001dec <SD_Init+0x4ec>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f00b fef2 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fad6 	bl	80002b0 <strlen>
 8001d04:	4603      	mov	r3, r0
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	1d39      	adds	r1, r7, #4
 8001d0a:	2364      	movs	r3, #100	@ 0x64
 8001d0c:	4835      	ldr	r0, [pc, #212]	@ (8001de4 <SD_Init+0x4e4>)
 8001d0e:	f009 ff19 	bl	800bb44 <HAL_UART_Transmit>
        SD_CS_Deassert();
 8001d12:	f7ff fd4d 	bl	80017b0 <SD_CS_Deassert>
        return 7; // CMD8 failed
 8001d16:	2307      	movs	r3, #7
 8001d18:	e05b      	b.n	8001dd2 <SD_Init+0x4d2>
            if (r1 == 0x00) { // Card is initialized
 8001d1a:	bf00      	nop
    }

    SD_CS_Deassert();
 8001d1c:	f7ff fd48 	bl	80017b0 <SD_CS_Deassert>
    if (r1 != 0x00) {
 8001d20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <SD_Init+0x450>
        sprintf(dbg_buf, "SD_Init: Card initialization failed. Last R1: 0x%02X\r\n", r1);
 8001d28:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4930      	ldr	r1, [pc, #192]	@ (8001df0 <SD_Init+0x4f0>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f00b fed5 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fab9 	bl	80002b0 <strlen>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	1d39      	adds	r1, r7, #4
 8001d44:	2364      	movs	r3, #100	@ 0x64
 8001d46:	4827      	ldr	r0, [pc, #156]	@ (8001de4 <SD_Init+0x4e4>)
 8001d48:	f009 fefc 	bl	800bb44 <HAL_UART_Transmit>
        return 8; // Final initialization check fail
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	e040      	b.n	8001dd2 <SD_Init+0x4d2>
    }

    // For non-SDHC cards (SDv1, SDv2 standard capacity), explicitly set block size to 512 bytes if needed.
    // SDHC cards always use 512-byte blocks and CMD16 is ignored.
    if (sd_card_info.card_type != SD_CARD_TYPE_SDHC) {
 8001d50:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <SD_Init+0x4dc>)
 8001d52:	791b      	ldrb	r3, [r3, #4]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d025      	beq.n	8001da4 <SD_Init+0x4a4>
        r1 = SD_SendCommand(CMD16, 512, 0xFF, NULL, 0);
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	22ff      	movs	r2, #255	@ 0xff
 8001d60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d64:	2010      	movs	r0, #16
 8001d66:	f7ff fd4d 	bl	8001804 <SD_SendCommand>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        SD_CS_Deassert();
 8001d70:	f7ff fd1e 	bl	80017b0 <SD_CS_Deassert>
        if (r1 != 0x00) {
 8001d74:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <SD_Init+0x4a4>
            sprintf(dbg_buf, "SD_Init: CMD16 (Set Blocklen) failed, response: 0x%02X\r\n", r1);
 8001d7c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	491c      	ldr	r1, [pc, #112]	@ (8001df4 <SD_Init+0x4f4>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f00b feab 	bl	800dae0 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fa8f 	bl	80002b0 <strlen>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	1d39      	adds	r1, r7, #4
 8001d98:	2364      	movs	r3, #100	@ 0x64
 8001d9a:	4812      	ldr	r0, [pc, #72]	@ (8001de4 <SD_Init+0x4e4>)
 8001d9c:	f009 fed2 	bl	800bb44 <HAL_UART_Transmit>
            return 9;
 8001da0:	2309      	movs	r3, #9
 8001da2:	e016      	b.n	8001dd2 <SD_Init+0x4d2>
        }
    }

    sd_card_info.initialized = true;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <SD_Init+0x4dc>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	715a      	strb	r2, [r3, #5]
    sprintf(dbg_buf, "SD_Init: Card Initialized Successfully. Type: %d\r\n", sd_card_info.card_type);
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <SD_Init+0x4dc>)
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	461a      	mov	r2, r3
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	4911      	ldr	r1, [pc, #68]	@ (8001df8 <SD_Init+0x4f8>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00b fe93 	bl	800dae0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fa77 	bl	80002b0 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	1d39      	adds	r1, r7, #4
 8001dc8:	2364      	movs	r3, #100	@ 0x64
 8001dca:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <SD_Init+0x4e4>)
 8001dcc:	f009 feba 	bl	800bb44 <HAL_UART_Transmit>
    return 0; // Success
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3754      	adds	r7, #84	@ 0x54
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000360 	.word	0x20000360
 8001de0:	08011d68 	.word	0x08011d68
 8001de4:	2000071c 	.word	0x2000071c
 8001de8:	08011d98 	.word	0x08011d98
 8001dec:	08011dcc 	.word	0x08011dcc
 8001df0:	08011df8 	.word	0x08011df8
 8001df4:	08011e30 	.word	0x08011e30
 8001df8:	08011e6c 	.word	0x08011e6c

08001dfc <SD_Write_Block>:

// Write a 512-byte block to the SD card
uint8_t SD_Write_Block(uint32_t block_addr, const uint8_t *data_buffer) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b098      	sub	sp, #96	@ 0x60
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    uint8_t r1, token;
    char dbg_buf[64];

    if (!sd_card_info.initialized) {
 8001e06:	4b69      	ldr	r3, [pc, #420]	@ (8001fac <SD_Write_Block+0x1b0>)
 8001e08:	795b      	ldrb	r3, [r3, #5]
 8001e0a:	f083 0301 	eor.w	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d014      	beq.n	8001e3e <SD_Write_Block+0x42>
        sprintf(dbg_buf, "SD_Write_Block: Card not initialized!\r\n");
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4965      	ldr	r1, [pc, #404]	@ (8001fb0 <SD_Write_Block+0x1b4>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00b fe60 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fa43 	bl	80002b0 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	f107 0108 	add.w	r1, r7, #8
 8001e32:	2364      	movs	r3, #100	@ 0x64
 8001e34:	485f      	ldr	r0, [pc, #380]	@ (8001fb4 <SD_Write_Block+0x1b8>)
 8001e36:	f009 fe85 	bl	800bb44 <HAL_UART_Transmit>
        return 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0b1      	b.n	8001fa2 <SD_Write_Block+0x1a6>
    }

    // For SDSC cards, address is byte address. For SDHC/XC, address is block address.
    // This simplified version assumes block_addr is already correct for the card type.
    // For SDHC, block_addr is used directly. For SDSC, it would be block_addr * 512.
    uint32_t send_arg = (sd_card_info.card_type == SD_CARD_TYPE_SDHC) ? block_addr : (block_addr * 512);
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fac <SD_Write_Block+0x1b0>)
 8001e40:	791b      	ldrb	r3, [r3, #4]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d002      	beq.n	8001e4c <SD_Write_Block+0x50>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	025b      	lsls	r3, r3, #9
 8001e4a:	e000      	b.n	8001e4e <SD_Write_Block+0x52>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    r1 = SD_SendCommand(CMD24, send_arg, 0xFF, NULL, 0);
 8001e50:	2300      	movs	r3, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2300      	movs	r3, #0
 8001e56:	22ff      	movs	r2, #255	@ 0xff
 8001e58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001e5a:	2018      	movs	r0, #24
 8001e5c:	f7ff fcd2 	bl	8001804 <SD_SendCommand>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (r1 != 0x00) {
 8001e66:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d018      	beq.n	8001ea0 <SD_Write_Block+0xa4>
        SD_CS_Deassert();
 8001e6e:	f7ff fc9f 	bl	80017b0 <SD_CS_Deassert>
        sprintf(dbg_buf, "SD_Write_Block: CMD24 failed, response: 0x%02X\r\n", r1);
 8001e72:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	494f      	ldr	r1, [pc, #316]	@ (8001fb8 <SD_Write_Block+0x1bc>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00b fe2f 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fa12 	bl	80002b0 <strlen>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f107 0108 	add.w	r1, r7, #8
 8001e94:	2364      	movs	r3, #100	@ 0x64
 8001e96:	4847      	ldr	r0, [pc, #284]	@ (8001fb4 <SD_Write_Block+0x1b8>)
 8001e98:	f009 fe54 	bl	800bb44 <HAL_UART_Transmit>
        return 2;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e080      	b.n	8001fa2 <SD_Write_Block+0x1a6>
    }

    // Send start token (0xFE for single block write)
    SD_SPI_TransmitReceive(0xFF); // Dummy byte
 8001ea0:	20ff      	movs	r0, #255	@ 0xff
 8001ea2:	f7ff fc91 	bl	80017c8 <SD_SPI_TransmitReceive>
    SD_SPI_TransmitReceive(0xFE);
 8001ea6:	20fe      	movs	r0, #254	@ 0xfe
 8001ea8:	f7ff fc8e 	bl	80017c8 <SD_SPI_TransmitReceive>

    // Send data block (512 bytes)
    for (int i = 0; i < 512; i++) {
 8001eac:	2300      	movs	r3, #0
 8001eae:	657b      	str	r3, [r7, #84]	@ 0x54
 8001eb0:	e009      	b.n	8001ec6 <SD_Write_Block+0xca>
        SD_SPI_TransmitReceive(data_buffer[i]);
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fc84 	bl	80017c8 <SD_SPI_TransmitReceive>
    for (int i = 0; i < 512; i++) {
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ecc:	dbf1      	blt.n	8001eb2 <SD_Write_Block+0xb6>
    }

    // Send dummy CRC (2 bytes)
    SD_SPI_TransmitReceive(0xFF);
 8001ece:	20ff      	movs	r0, #255	@ 0xff
 8001ed0:	f7ff fc7a 	bl	80017c8 <SD_SPI_TransmitReceive>
    SD_SPI_TransmitReceive(0xFF);
 8001ed4:	20ff      	movs	r0, #255	@ 0xff
 8001ed6:	f7ff fc77 	bl	80017c8 <SD_SPI_TransmitReceive>

    // Read data response token
    token = SD_SPI_TransmitReceive(0xFF);
 8001eda:	20ff      	movs	r0, #255	@ 0xff
 8001edc:	f7ff fc74 	bl	80017c8 <SD_SPI_TransmitReceive>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    if ((token & 0x1F) != 0x05) { // Check if data accepted (0b00101)
 8001ee6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d018      	beq.n	8001f24 <SD_Write_Block+0x128>
        SD_CS_Deassert();
 8001ef2:	f7ff fc5d 	bl	80017b0 <SD_CS_Deassert>
        sprintf(dbg_buf, "SD_Write_Block: Data not accepted, token: 0x%02X\r\n", token);
 8001ef6:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	492f      	ldr	r1, [pc, #188]	@ (8001fbc <SD_Write_Block+0x1c0>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00b fded 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe f9d0 	bl	80002b0 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	f107 0108 	add.w	r1, r7, #8
 8001f18:	2364      	movs	r3, #100	@ 0x64
 8001f1a:	4826      	ldr	r0, [pc, #152]	@ (8001fb4 <SD_Write_Block+0x1b8>)
 8001f1c:	f009 fe12 	bl	800bb44 <HAL_UART_Transmit>
        return 3;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e03e      	b.n	8001fa2 <SD_Write_Block+0x1a6>
    }

    // Wait for card to finish busy (sends 0x00 when not busy, 0xFF while busy)
    uint32_t timeout = 0xFFFFFF; // Generous timeout
 8001f24:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8001f28:	653b      	str	r3, [r7, #80]	@ 0x50
    while (SD_SPI_TransmitReceive(0xFF) == 0x00 && timeout > 0) {
 8001f2a:	e002      	b.n	8001f32 <SD_Write_Block+0x136>
        timeout--;
 8001f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	653b      	str	r3, [r7, #80]	@ 0x50
    while (SD_SPI_TransmitReceive(0xFF) == 0x00 && timeout > 0) {
 8001f32:	20ff      	movs	r0, #255	@ 0xff
 8001f34:	f7ff fc48 	bl	80017c8 <SD_SPI_TransmitReceive>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <SD_Write_Block+0x148>
 8001f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f3      	bne.n	8001f2c <SD_Write_Block+0x130>
    }
    SD_CS_Deassert();
 8001f44:	f7ff fc34 	bl	80017b0 <SD_CS_Deassert>
    if(timeout == 0){
 8001f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d114      	bne.n	8001f78 <SD_Write_Block+0x17c>
        sprintf(dbg_buf, "SD_Write_Block: Timeout waiting for card to become not busy\r\n");
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	491b      	ldr	r1, [pc, #108]	@ (8001fc0 <SD_Write_Block+0x1c4>)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00b fdc3 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe f9a6 	bl	80002b0 <strlen>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	f107 0108 	add.w	r1, r7, #8
 8001f6c:	2364      	movs	r3, #100	@ 0x64
 8001f6e:	4811      	ldr	r0, [pc, #68]	@ (8001fb4 <SD_Write_Block+0x1b8>)
 8001f70:	f009 fde8 	bl	800bb44 <HAL_UART_Transmit>
        return 4; // Busy timeout
 8001f74:	2304      	movs	r3, #4
 8001f76:	e014      	b.n	8001fa2 <SD_Write_Block+0x1a6>
    }

    sprintf(dbg_buf, "SD_Write_Block: Block %lu written successfully.\r\n", block_addr);
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4911      	ldr	r1, [pc, #68]	@ (8001fc4 <SD_Write_Block+0x1c8>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00b fdad 	bl	800dae0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe f990 	bl	80002b0 <strlen>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	f107 0108 	add.w	r1, r7, #8
 8001f98:	2364      	movs	r3, #100	@ 0x64
 8001f9a:	4806      	ldr	r0, [pc, #24]	@ (8001fb4 <SD_Write_Block+0x1b8>)
 8001f9c:	f009 fdd2 	bl	800bb44 <HAL_UART_Transmit>
    return 0; // Success
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3758      	adds	r7, #88	@ 0x58
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000360 	.word	0x20000360
 8001fb0:	08011ea0 	.word	0x08011ea0
 8001fb4:	2000071c 	.word	0x2000071c
 8001fb8:	08011ec8 	.word	0x08011ec8
 8001fbc:	08011efc 	.word	0x08011efc
 8001fc0:	08011f30 	.word	0x08011f30
 8001fc4:	08011f70 	.word	0x08011f70

08001fc8 <SD_Log_Start>:
    return 0; // Success
}

// --- Data Logging Functions ---

void SD_Log_Start(uint32_t start_block_address) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0a2      	sub	sp, #136	@ 0x88
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
    char dbg_buf[128]; // Increased buffer for longer messages
    if (!sd_card_info.initialized) {
 8001fd0:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <SD_Log_Start+0x98>)
 8001fd2:	795b      	ldrb	r3, [r3, #5]
 8001fd4:	f083 0301 	eor.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <SD_Log_Start+0x44>
        sprintf(dbg_buf, "SD_Log_Start: Card not initialized! Cannot start CSV logging.\r\n");
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4920      	ldr	r1, [pc, #128]	@ (8002064 <SD_Log_Start+0x9c>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f00b fd7b 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe f95e 	bl	80002b0 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	f107 0108 	add.w	r1, r7, #8
 8001ffc:	2364      	movs	r3, #100	@ 0x64
 8001ffe:	481a      	ldr	r0, [pc, #104]	@ (8002068 <SD_Log_Start+0xa0>)
 8002000:	f009 fda0 	bl	800bb44 <HAL_UART_Transmit>
        logging_active = false;
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <SD_Log_Start+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e025      	b.n	8002058 <SD_Log_Start+0x90>
        return;
    }
    sd_current_log_block = start_block_address;
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <SD_Log_Start+0xa8>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
    sd_log_csv_buffer_char_count = 0;
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <SD_Log_Start+0xac>)
 8002014:	2200      	movs	r2, #0
 8002016:	801a      	strh	r2, [r3, #0]
    memset(sd_log_csv_buffer, 0, SD_BLOCK_SIZE); // Clear CSV buffer initially
 8002018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800201c:	2100      	movs	r1, #0
 800201e:	4816      	ldr	r0, [pc, #88]	@ (8002078 <SD_Log_Start+0xb0>)
 8002020:	f00b fe00 	bl	800dc24 <memset>
    logging_active = true;
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <SD_Log_Start+0xa4>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    sprintf(dbg_buf, "SD_Log_Start: CSV Logging will start at block %lu\r\n", sd_current_log_block);
 800202a:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <SD_Log_Start+0xa8>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	4912      	ldr	r1, [pc, #72]	@ (800207c <SD_Log_Start+0xb4>)
 8002034:	4618      	mov	r0, r3
 8002036:	f00b fd53 	bl	800dae0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f936 	bl	80002b0 <strlen>
 8002044:	4603      	mov	r3, r0
 8002046:	b29a      	uxth	r2, r3
 8002048:	f107 0108 	add.w	r1, r7, #8
 800204c:	2364      	movs	r3, #100	@ 0x64
 800204e:	4806      	ldr	r0, [pc, #24]	@ (8002068 <SD_Log_Start+0xa0>)
 8002050:	f009 fd78 	bl	800bb44 <HAL_UART_Transmit>

    // Write the CSV header as the first thing
    SD_Log_Write_CSV_Header();
 8002054:	f000 f814 	bl	8002080 <SD_Log_Write_CSV_Header>
}
 8002058:	3788      	adds	r7, #136	@ 0x88
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000360 	.word	0x20000360
 8002064:	08012058 	.word	0x08012058
 8002068:	2000071c 	.word	0x2000071c
 800206c:	20000570 	.word	0x20000570
 8002070:	2000056c 	.word	0x2000056c
 8002074:	20000568 	.word	0x20000568
 8002078:	20000368 	.word	0x20000368
 800207c:	08012098 	.word	0x08012098

08002080 <SD_Log_Write_CSV_Header>:

static void SD_Log_Write_CSV_Header(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b0ec      	sub	sp, #432	@ 0x1b0
 8002084:	af00      	add	r7, sp, #0
    char header_str[300]; // Ensure this is large enough for your header
    int header_len;

    if (!logging_active || !sd_card_info.initialized) return;
 8002086:	4b3c      	ldr	r3, [pc, #240]	@ (8002178 <SD_Log_Write_CSV_Header+0xf8>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	f083 0301 	eor.w	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d16c      	bne.n	800216e <SD_Log_Write_CSV_Header+0xee>
 8002094:	4b39      	ldr	r3, [pc, #228]	@ (800217c <SD_Log_Write_CSV_Header+0xfc>)
 8002096:	795b      	ldrb	r3, [r3, #5]
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d165      	bne.n	800216e <SD_Log_Write_CSV_Header+0xee>

    // Define your CSV header string here
    header_len = snprintf(header_str, sizeof(header_str),
 80020a2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80020a6:	4a36      	ldr	r2, [pc, #216]	@ (8002180 <SD_Log_Write_CSV_Header+0x100>)
 80020a8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00b fce1 	bl	800da74 <sniprintf>
 80020b2:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
                          "Timestamp_ms,LSM_Acc_X_mg,LSM_Acc_Y_mg,LSM_Acc_Z_mg,LSM_Gyro_X_mdps,LSM_Gyro_Y_mdps,LSM_Gyro_Z_mdps,BMP_Pres_Pa,BMP_Alt_m,ADXL_Acc_X_g,ADXL_Acc_Y_g,ADXL_Acc_Z_g,Q0,Q1,Q2,Q3,KF_Alt_m,KF_Vel_mps,Loop_Exec_ms,Flight_Phase\r\n");

    if (header_len > 0 && (size_t)header_len < sizeof(header_str)) {
 80020b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	dd44      	ble.n	8002148 <SD_Log_Write_CSV_Header+0xc8>
 80020be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80020c2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80020c6:	d23f      	bcs.n	8002148 <SD_Log_Write_CSV_Header+0xc8>
        if (sd_log_csv_buffer_char_count + header_len > SD_BLOCK_SIZE) {
 80020c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002184 <SD_Log_Write_CSV_Header+0x104>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80020d2:	4413      	add	r3, r2
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d8:	dd01      	ble.n	80020de <SD_Log_Write_CSV_Header+0x5e>
            SD_Log_FlushBuffer(); // Flush if header won't fit current buffer (should be empty here ideally)
 80020da:	f000 fa07 	bl	80024ec <SD_Log_FlushBuffer>
        }
        // Check again if buffer is clear for new data
        if (sd_log_csv_buffer_char_count + header_len <= SD_BLOCK_SIZE) {
 80020de:	4b29      	ldr	r3, [pc, #164]	@ (8002184 <SD_Log_Write_CSV_Header+0x104>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80020e8:	4413      	add	r3, r2
 80020ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ee:	dc17      	bgt.n	8002120 <SD_Log_Write_CSV_Header+0xa0>
            memcpy(&sd_log_csv_buffer[sd_log_csv_buffer_char_count], header_str, header_len);
 80020f0:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <SD_Log_Write_CSV_Header+0x104>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b24      	ldr	r3, [pc, #144]	@ (8002188 <SD_Log_Write_CSV_Header+0x108>)
 80020f8:	4413      	add	r3, r2
 80020fa:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80020fe:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002102:	4618      	mov	r0, r3
 8002104:	f00b fe0d 	bl	800dd22 <memcpy>
            sd_log_csv_buffer_char_count += header_len;
 8002108:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <SD_Log_Write_CSV_Header+0x104>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	4413      	add	r3, r2
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <SD_Log_Write_CSV_Header+0x104>)
 8002118:	801a      	strh	r2, [r3, #0]
            SD_Log_FlushBuffer(); // Flush header immediately to start clean file on SD
 800211a:	f000 f9e7 	bl	80024ec <SD_Log_FlushBuffer>
        if (sd_log_csv_buffer_char_count + header_len <= SD_BLOCK_SIZE) {
 800211e:	e027      	b.n	8002170 <SD_Log_Write_CSV_Header+0xf0>
        } else {
            char dbg_buf[128];
            sprintf(dbg_buf, "SD_Log_Write_CSV_Header: CSV Header (len %d) too large for block size (%d). Not written.\r\n", header_len, SD_BLOCK_SIZE);
 8002120:	4638      	mov	r0, r7
 8002122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002126:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800212a:	4918      	ldr	r1, [pc, #96]	@ (800218c <SD_Log_Write_CSV_Header+0x10c>)
 800212c:	f00b fcd8 	bl	800dae0 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8002130:	463b      	mov	r3, r7
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f8bc 	bl	80002b0 <strlen>
 8002138:	4603      	mov	r3, r0
 800213a:	b29a      	uxth	r2, r3
 800213c:	4639      	mov	r1, r7
 800213e:	2364      	movs	r3, #100	@ 0x64
 8002140:	4813      	ldr	r0, [pc, #76]	@ (8002190 <SD_Log_Write_CSV_Header+0x110>)
 8002142:	f009 fcff 	bl	800bb44 <HAL_UART_Transmit>
        if (sd_log_csv_buffer_char_count + header_len <= SD_BLOCK_SIZE) {
 8002146:	e013      	b.n	8002170 <SD_Log_Write_CSV_Header+0xf0>
        }
    } else {
        char dbg_buf[128];
        sprintf(dbg_buf, "SD_Log_Write_CSV_Header: snprintf failed or header too long (reported len: %d). Header not written.\r\n", header_len);
 8002148:	463b      	mov	r3, r7
 800214a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800214e:	4911      	ldr	r1, [pc, #68]	@ (8002194 <SD_Log_Write_CSV_Header+0x114>)
 8002150:	4618      	mov	r0, r3
 8002152:	f00b fcc5 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8002156:	463b      	mov	r3, r7
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f8a9 	bl	80002b0 <strlen>
 800215e:	4603      	mov	r3, r0
 8002160:	b29a      	uxth	r2, r3
 8002162:	4639      	mov	r1, r7
 8002164:	2364      	movs	r3, #100	@ 0x64
 8002166:	480a      	ldr	r0, [pc, #40]	@ (8002190 <SD_Log_Write_CSV_Header+0x110>)
 8002168:	f009 fcec 	bl	800bb44 <HAL_UART_Transmit>
 800216c:	e000      	b.n	8002170 <SD_Log_Write_CSV_Header+0xf0>
    if (!logging_active || !sd_card_info.initialized) return;
 800216e:	bf00      	nop
    }
}
 8002170:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000570 	.word	0x20000570
 800217c:	20000360 	.word	0x20000360
 8002180:	080120cc 	.word	0x080120cc
 8002184:	20000568 	.word	0x20000568
 8002188:	20000368 	.word	0x20000368
 800218c:	080121ac 	.word	0x080121ac
 8002190:	2000071c 	.word	0x2000071c
 8002194:	08012208 	.word	0x08012208

08002198 <SD_Log_Data>:

void SD_Log_Data(const FlightData_LogEntry_t *log_entry) {
 8002198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800219c:	f5ad 7d3b 	sub.w	sp, sp, #748	@ 0x2ec
 80021a0:	af24      	add	r7, sp, #144	@ 0x90
 80021a2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80021a6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80021aa:	6018      	str	r0, [r3, #0]
    char csv_line_str[350]; // Temporary buffer for a single CSV line, ensure it's large enough!
    int line_len;
    char dbg_buf[128];

    if (!logging_active || !sd_card_info.initialized) {
 80021ac:	4bb7      	ldr	r3, [pc, #732]	@ (800248c <SD_Log_Data+0x2f4>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	f083 0301 	eor.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 818d 	bne.w	80024d6 <SD_Log_Data+0x33e>
 80021bc:	4bb4      	ldr	r3, [pc, #720]	@ (8002490 <SD_Log_Data+0x2f8>)
 80021be:	795b      	ldrb	r3, [r3, #5]
 80021c0:	f083 0301 	eor.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 8185 	bne.w	80024d6 <SD_Log_Data+0x33e>
    }

    // Format the log_entry into a CSV string
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
                        "%lu,%.2f,%.2f,%.2f,%.1f,%.1f,%.1f,%.0f,%.1f,%.2f,%.2f,%.2f,%.4f,%.4f,%.4f,%.4f,%.2f,%.2f,%lu,%u\r\n",
                        log_entry->timestamp_ms,
 80021cc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80021d0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	66bb      	str	r3, [r7, #104]	@ 0x68
                        log_entry->lsm_acc_x_mg, log_entry->lsm_acc_y_mg, log_entry->lsm_acc_z_mg,
 80021da:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80021de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9ce 	bl	8000588 <__aeabi_f2d>
 80021ec:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
                        log_entry->lsm_acc_x_mg, log_entry->lsm_acc_y_mg, log_entry->lsm_acc_z_mg,
 80021f0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80021f4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f9c3 	bl	8000588 <__aeabi_f2d>
 8002202:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
                        log_entry->lsm_acc_x_mg, log_entry->lsm_acc_y_mg, log_entry->lsm_acc_z_mg,
 8002206:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800220a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f9b8 	bl	8000588 <__aeabi_f2d>
 8002218:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
                        log_entry->lsm_gyro_x_mdps, log_entry->lsm_gyro_y_mdps, log_entry->lsm_gyro_z_mdps,
 800221c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002220:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f9ad 	bl	8000588 <__aeabi_f2d>
 800222e:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
                        log_entry->lsm_gyro_x_mdps, log_entry->lsm_gyro_y_mdps, log_entry->lsm_gyro_z_mdps,
 8002232:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002236:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f9a2 	bl	8000588 <__aeabi_f2d>
 8002244:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
                        log_entry->lsm_gyro_x_mdps, log_entry->lsm_gyro_y_mdps, log_entry->lsm_gyro_z_mdps,
 8002248:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800224c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f997 	bl	8000588 <__aeabi_f2d>
 800225a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
                        log_entry->bmp_pres_pa, log_entry->bmp_alt_m,
 800225e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002262:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f98c 	bl	8000588 <__aeabi_f2d>
 8002270:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                        log_entry->bmp_pres_pa, log_entry->bmp_alt_m,
 8002274:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002278:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a1b      	ldr	r3, [r3, #32]
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f981 	bl	8000588 <__aeabi_f2d>
 8002286:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                        log_entry->adxl_hi_g_x, log_entry->adxl_hi_g_y, log_entry->adxl_hi_g_z,
 800228a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800228e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f976 	bl	8000588 <__aeabi_f2d>
 800229c:	e9c7 0108 	strd	r0, r1, [r7, #32]
                        log_entry->adxl_hi_g_x, log_entry->adxl_hi_g_y, log_entry->adxl_hi_g_z,
 80022a0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80022a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f96b 	bl	8000588 <__aeabi_f2d>
 80022b2:	e9c7 0106 	strd	r0, r1, [r7, #24]
                        log_entry->adxl_hi_g_x, log_entry->adxl_hi_g_y, log_entry->adxl_hi_g_z,
 80022b6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80022ba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f960 	bl	8000588 <__aeabi_f2d>
 80022c8:	e9c7 0104 	strd	r0, r1, [r7, #16]
                        log_entry->q0, log_entry->q1, log_entry->q2, log_entry->q3,
 80022cc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80022d0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe f955 	bl	8000588 <__aeabi_f2d>
 80022de:	e9c7 0102 	strd	r0, r1, [r7, #8]
                        log_entry->q0, log_entry->q1, log_entry->q2, log_entry->q3,
 80022e2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80022e6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f94a 	bl	8000588 <__aeabi_f2d>
 80022f4:	e9c7 0100 	strd	r0, r1, [r7]
                        log_entry->q0, log_entry->q1, log_entry->q2, log_entry->q3,
 80022f8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80022fc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f93f 	bl	8000588 <__aeabi_f2d>
 800230a:	4682      	mov	sl, r0
 800230c:	468b      	mov	fp, r1
                        log_entry->q0, log_entry->q1, log_entry->q2, log_entry->q3,
 800230e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002312:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f934 	bl	8000588 <__aeabi_f2d>
 8002320:	4680      	mov	r8, r0
 8002322:	4689      	mov	r9, r1
                        log_entry->kf_altitude_m, log_entry->kf_velocity_mps,
 8002324:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002328:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f929 	bl	8000588 <__aeabi_f2d>
 8002336:	4604      	mov	r4, r0
 8002338:	460d      	mov	r5, r1
                        log_entry->kf_altitude_m, log_entry->kf_velocity_mps,
 800233a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800233e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f91e 	bl	8000588 <__aeabi_f2d>
                        log_entry->loop_exec_time_ms, log_entry->flight_phase);
 800234c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002350:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002358:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800235c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
    line_len = snprintf(csv_line_str, sizeof(csv_line_str),
 8002366:	f107 06f4 	add.w	r6, r7, #244	@ 0xf4
 800236a:	9323      	str	r3, [sp, #140]	@ 0x8c
 800236c:	9222      	str	r2, [sp, #136]	@ 0x88
 800236e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8002372:	e9cd 451e 	strd	r4, r5, [sp, #120]	@ 0x78
 8002376:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
 800237a:	e9cd ab1a 	strd	sl, fp, [sp, #104]	@ 0x68
 800237e:	ed97 7b00 	vldr	d7, [r7]
 8002382:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 8002386:	ed97 7b02 	vldr	d7, [r7, #8]
 800238a:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 800238e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002392:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8002396:	ed97 7b06 	vldr	d7, [r7, #24]
 800239a:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 800239e:	ed97 7b08 	vldr	d7, [r7, #32]
 80023a2:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80023a6:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80023aa:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80023ae:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80023b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80023b6:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80023ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80023be:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80023c2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80023c6:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80023ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80023ce:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80023d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80023d6:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80023da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80023de:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80023e2:	ed8d 7b00 	vstr	d7, [sp]
 80023e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002494 <SD_Log_Data+0x2fc>)
 80023ea:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80023ee:	4630      	mov	r0, r6
 80023f0:	f00b fb40 	bl	800da74 <sniprintf>
 80023f4:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254

    if (line_len <= 0 || (size_t)line_len >= sizeof(csv_line_str)) {
 80023f8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	dd04      	ble.n	800240a <SD_Log_Data+0x272>
 8002400:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8002404:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8002408:	d315      	bcc.n	8002436 <SD_Log_Data+0x29e>
        // snprintf failed or truncated, handle error
        sprintf(dbg_buf, "SD_Log_Data: snprintf failed or CSV line too long (reported len: %d). Data not logged.\r\n", line_len);
 800240a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800240e:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8002412:	4921      	ldr	r1, [pc, #132]	@ (8002498 <SD_Log_Data+0x300>)
 8002414:	4618      	mov	r0, r3
 8002416:	f00b fb63 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 800241a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800241e:	4618      	mov	r0, r3
 8002420:	f7fd ff46 	bl	80002b0 <strlen>
 8002424:	4603      	mov	r3, r0
 8002426:	b29a      	uxth	r2, r3
 8002428:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800242c:	2364      	movs	r3, #100	@ 0x64
 800242e:	481b      	ldr	r0, [pc, #108]	@ (800249c <SD_Log_Data+0x304>)
 8002430:	f009 fb88 	bl	800bb44 <HAL_UART_Transmit>
        return;
 8002434:	e050      	b.n	80024d8 <SD_Log_Data+0x340>
    }

    // Check if the new line fits into the current CSV buffer
    if (sd_log_csv_buffer_char_count + line_len > SD_BLOCK_SIZE) {
 8002436:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <SD_Log_Data+0x308>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8002440:	4413      	add	r3, r2
 8002442:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002446:	dd01      	ble.n	800244c <SD_Log_Data+0x2b4>
        SD_Log_FlushBuffer(); // Buffer is full, flush it
 8002448:	f000 f850 	bl	80024ec <SD_Log_FlushBuffer>
    }

    // Check again: if after flush, the line still doesn't fit, it's too big for a block.
    if (sd_log_csv_buffer_char_count + line_len <= SD_BLOCK_SIZE) {
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <SD_Log_Data+0x308>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8002456:	4413      	add	r3, r2
 8002458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800245c:	dc24      	bgt.n	80024a8 <SD_Log_Data+0x310>
        memcpy(&sd_log_csv_buffer[sd_log_csv_buffer_char_count], csv_line_str, line_len);
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <SD_Log_Data+0x308>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <SD_Log_Data+0x30c>)
 8002466:	4413      	add	r3, r2
 8002468:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800246c:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8002470:	4618      	mov	r0, r3
 8002472:	f00b fc56 	bl	800dd22 <memcpy>
        sd_log_csv_buffer_char_count += line_len;
 8002476:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800247a:	b29a      	uxth	r2, r3
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <SD_Log_Data+0x308>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	4413      	add	r3, r2
 8002482:	b29a      	uxth	r2, r3
 8002484:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <SD_Log_Data+0x308>)
 8002486:	801a      	strh	r2, [r3, #0]
 8002488:	e026      	b.n	80024d8 <SD_Log_Data+0x340>
 800248a:	bf00      	nop
 800248c:	20000570 	.word	0x20000570
 8002490:	20000360 	.word	0x20000360
 8002494:	08012270 	.word	0x08012270
 8002498:	080122d4 	.word	0x080122d4
 800249c:	2000071c 	.word	0x2000071c
 80024a0:	20000568 	.word	0x20000568
 80024a4:	20000368 	.word	0x20000368
    } else {
        // This implies a single CSV line is longer than SD_BLOCK_SIZE
        sprintf(dbg_buf, "SD_Log_Data: Single CSV line (len %d) too large for block size (%d). Data not logged.\r\n", line_len, SD_BLOCK_SIZE);
 80024a8:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80024ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024b0:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80024b4:	490b      	ldr	r1, [pc, #44]	@ (80024e4 <SD_Log_Data+0x34c>)
 80024b6:	f00b fb13 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 80024ba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fef6 	bl	80002b0 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80024cc:	2364      	movs	r3, #100	@ 0x64
 80024ce:	4806      	ldr	r0, [pc, #24]	@ (80024e8 <SD_Log_Data+0x350>)
 80024d0:	f009 fb38 	bl	800bb44 <HAL_UART_Transmit>
 80024d4:	e000      	b.n	80024d8 <SD_Log_Data+0x340>
        return;
 80024d6:	bf00      	nop
    }
}
 80024d8:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 80024dc:	46bd      	mov	sp, r7
 80024de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e2:	bf00      	nop
 80024e4:	08012330 	.word	0x08012330
 80024e8:	2000071c 	.word	0x2000071c

080024ec <SD_Log_FlushBuffer>:

void SD_Log_FlushBuffer(void) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0a0      	sub	sp, #128	@ 0x80
 80024f0:	af00      	add	r7, sp, #0
    char dbg_buf[128];
    if (!logging_active || !sd_card_info.initialized) {
 80024f2:	4b22      	ldr	r3, [pc, #136]	@ (800257c <SD_Log_FlushBuffer+0x90>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	f083 0301 	eor.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d138      	bne.n	8002572 <SD_Log_FlushBuffer+0x86>
 8002500:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <SD_Log_FlushBuffer+0x94>)
 8002502:	795b      	ldrb	r3, [r3, #5]
 8002504:	f083 0301 	eor.w	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d131      	bne.n	8002572 <SD_Log_FlushBuffer+0x86>
        return;
    }

    if (sd_log_csv_buffer_char_count > 0) { // Only write if there's data in the buffer
 800250e:	4b1d      	ldr	r3, [pc, #116]	@ (8002584 <SD_Log_FlushBuffer+0x98>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d02e      	beq.n	8002574 <SD_Log_FlushBuffer+0x88>

        // Ensure remaining part of the buffer is null if not full, SD_Write_Block writes 512 bytes.
        // memset after current data ensures padding with zeros.
        // This is already handled as sd_log_csv_buffer is memset to 0 after each successful flush.

        if (SD_Write_Block(sd_current_log_block, (uint8_t*)sd_log_csv_buffer) == 0) {
 8002516:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <SD_Log_FlushBuffer+0x9c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	491c      	ldr	r1, [pc, #112]	@ (800258c <SD_Log_FlushBuffer+0xa0>)
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fc6d 	bl	8001dfc <SD_Write_Block>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <SD_Log_FlushBuffer+0x48>
            // Optional: sprintf(dbg_buf, "SD_Log_FlushBuffer: Successfully wrote to block %lu\r\n", sd_current_log_block);
            // HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
            sd_current_log_block++;
 8002528:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <SD_Log_FlushBuffer+0x9c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	4a16      	ldr	r2, [pc, #88]	@ (8002588 <SD_Log_FlushBuffer+0x9c>)
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e014      	b.n	800255e <SD_Log_FlushBuffer+0x72>
        } else {
            sprintf(dbg_buf, "SD_Log_FlushBuffer: FAILED to write to block %lu\r\n", sd_current_log_block);
 8002534:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <SD_Log_FlushBuffer+0x9c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	463b      	mov	r3, r7
 800253a:	4915      	ldr	r1, [pc, #84]	@ (8002590 <SD_Log_FlushBuffer+0xa4>)
 800253c:	4618      	mov	r0, r3
 800253e:	f00b facf 	bl	800dae0 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 8002542:	463b      	mov	r3, r7
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd feb3 	bl	80002b0 <strlen>
 800254a:	4603      	mov	r3, r0
 800254c:	b29a      	uxth	r2, r3
 800254e:	4639      	mov	r1, r7
 8002550:	2364      	movs	r3, #100	@ 0x64
 8002552:	4810      	ldr	r0, [pc, #64]	@ (8002594 <SD_Log_FlushBuffer+0xa8>)
 8002554:	f009 faf6 	bl	800bb44 <HAL_UART_Transmit>
            logging_active = false; // Stop logging on write failure
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <SD_Log_FlushBuffer+0x90>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
        }
        // Clear the buffer for the next set of CSV lines
        memset(sd_log_csv_buffer, 0, SD_BLOCK_SIZE);
 800255e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002562:	2100      	movs	r1, #0
 8002564:	4809      	ldr	r0, [pc, #36]	@ (800258c <SD_Log_FlushBuffer+0xa0>)
 8002566:	f00b fb5d 	bl	800dc24 <memset>
        sd_log_csv_buffer_char_count = 0;
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <SD_Log_FlushBuffer+0x98>)
 800256c:	2200      	movs	r2, #0
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	e000      	b.n	8002574 <SD_Log_FlushBuffer+0x88>
        return;
 8002572:	bf00      	nop
    }
}
 8002574:	3780      	adds	r7, #128	@ 0x80
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000570 	.word	0x20000570
 8002580:	20000360 	.word	0x20000360
 8002584:	20000568 	.word	0x20000568
 8002588:	2000056c 	.word	0x2000056c
 800258c:	20000368 	.word	0x20000368
 8002590:	08012388 	.word	0x08012388
 8002594:	2000071c 	.word	0x2000071c

08002598 <SD_Log_Stop>:

void SD_Log_Stop(void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b090      	sub	sp, #64	@ 0x40
 800259c:	af00      	add	r7, sp, #0
    char dbg_buf[64];
    sprintf(dbg_buf, "SD_Log_Stop: Stopping logging.\r\n");
 800259e:	463b      	mov	r3, r7
 80025a0:	490f      	ldr	r1, [pc, #60]	@ (80025e0 <SD_Log_Stop+0x48>)
 80025a2:	4618      	mov	r0, r3
 80025a4:	f00b fa9c 	bl	800dae0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buf, strlen(dbg_buf), 100);
 80025a8:	463b      	mov	r3, r7
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd fe80 	bl	80002b0 <strlen>
 80025b0:	4603      	mov	r3, r0
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4639      	mov	r1, r7
 80025b6:	2364      	movs	r3, #100	@ 0x64
 80025b8:	480a      	ldr	r0, [pc, #40]	@ (80025e4 <SD_Log_Stop+0x4c>)
 80025ba:	f009 fac3 	bl	800bb44 <HAL_UART_Transmit>

    if (logging_active && sd_card_info.initialized) {
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <SD_Log_Stop+0x50>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <SD_Log_Stop+0x3a>
 80025c6:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <SD_Log_Stop+0x54>)
 80025c8:	795b      	ldrb	r3, [r3, #5]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <SD_Log_Stop+0x3a>
        SD_Log_FlushBuffer(); // Ensure any remaining data is written
 80025ce:	f7ff ff8d 	bl	80024ec <SD_Log_FlushBuffer>
    }
    logging_active = false;
 80025d2:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <SD_Log_Stop+0x50>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
    // No need to de-init SD card here unless power saving is critical
    // and re-init is acceptable on next start.
}
 80025d8:	bf00      	nop
 80025da:	3740      	adds	r7, #64	@ 0x40
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	080123bc 	.word	0x080123bc
 80025e4:	2000071c 	.word	0x2000071c
 80025e8:	20000570 	.word	0x20000570
 80025ec:	20000360 	.word	0x20000360

080025f0 <adxl375_write>:

// Optional: for serial debug display
char x_char[6], y_char[6], z_char[6];

void adxl375_write(uint8_t reg, uint8_t value)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	4603      	mov	r3, r0
 80025f8:	460a      	mov	r2, r1
 80025fa:	71fb      	strb	r3, [r7, #7]
 80025fc:	4613      	mov	r3, r2
 80025fe:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = reg;
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8002604:	79bb      	ldrb	r3, [r7, #6]
 8002606:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, ADXL375_ADDRESS, data, 2, HAL_MAX_DELAY);
 8002608:	f107 020c 	add.w	r2, r7, #12
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2302      	movs	r3, #2
 8002614:	21a6      	movs	r1, #166	@ 0xa6
 8002616:	4803      	ldr	r0, [pc, #12]	@ (8002624 <adxl375_write+0x34>)
 8002618:	f006 fc4a 	bl	8008eb0 <HAL_I2C_Master_Transmit>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000664 	.word	0x20000664

08002628 <adxl375_read>:

uint8_t adxl375_read(uint8_t reg)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af04      	add	r7, sp, #16
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	b29a      	uxth	r2, r3
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	2301      	movs	r3, #1
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	f107 030f 	add.w	r3, r7, #15
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2301      	movs	r3, #1
 800264c:	21a6      	movs	r1, #166	@ 0xa6
 800264e:	4804      	ldr	r0, [pc, #16]	@ (8002660 <adxl375_read+0x38>)
 8002650:	f006 fe5a 	bl	8009308 <HAL_I2C_Mem_Read>
    return value;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000664 	.word	0x20000664

08002664 <adxl375_read_xyz>:

void adxl375_read_xyz(int16_t *x, int16_t *y, int16_t *z)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af04      	add	r7, sp, #16
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, ADXL375_REG_DATAX0, I2C_MEMADD_SIZE_8BIT, data_rec, 6, HAL_MAX_DELAY);
 8002670:	f04f 33ff 	mov.w	r3, #4294967295
 8002674:	9302      	str	r3, [sp, #8]
 8002676:	2306      	movs	r3, #6
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <adxl375_read_xyz+0x78>)
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2301      	movs	r3, #1
 8002680:	2232      	movs	r2, #50	@ 0x32
 8002682:	21a6      	movs	r1, #166	@ 0xa6
 8002684:	4816      	ldr	r0, [pc, #88]	@ (80026e0 <adxl375_read_xyz+0x7c>)
 8002686:	f006 fe3f 	bl	8009308 <HAL_I2C_Mem_Read>

    *x = (int16_t)((data_rec[1] << 8) | data_rec[0]);
 800268a:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <adxl375_read_xyz+0x78>)
 800268c:	785b      	ldrb	r3, [r3, #1]
 800268e:	b21b      	sxth	r3, r3
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	b21a      	sxth	r2, r3
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <adxl375_read_xyz+0x78>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b21b      	sxth	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b21a      	sxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data_rec[3] << 8) | data_rec[2]);
 80026a2:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <adxl375_read_xyz+0x78>)
 80026a4:	78db      	ldrb	r3, [r3, #3]
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <adxl375_read_xyz+0x78>)
 80026ae:	789b      	ldrb	r3, [r3, #2]
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data_rec[5] << 8) | data_rec[4]);
 80026ba:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <adxl375_read_xyz+0x78>)
 80026bc:	795b      	ldrb	r3, [r3, #5]
 80026be:	b21b      	sxth	r3, r3
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <adxl375_read_xyz+0x78>)
 80026c6:	791b      	ldrb	r3, [r3, #4]
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	801a      	strh	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000574 	.word	0x20000574
 80026e0:	20000664 	.word	0x20000664

080026e4 <adxl375_init>:

void adxl375_init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
    chipid = adxl375_read(ADXL375_REG_DEVID);  // Read device ID (should be 0xE5)
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff ff9d 	bl	8002628 <adxl375_read>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <adxl375_init+0x30>)
 80026f4:	701a      	strb	r2, [r3, #0]

    adxl375_write(ADXL375_REG_DATA_FORMAT, 0x0B); // (0x0B = 00001011)
 80026f6:	210b      	movs	r1, #11
 80026f8:	2031      	movs	r0, #49	@ 0x31
 80026fa:	f7ff ff79 	bl	80025f0 <adxl375_write>
    adxl375_write(ADXL375_REG_BW_RATE, 0x0A);     // Set Output Data Rate to 100 Hz (0x0A = 00001010)
 80026fe:	210a      	movs	r1, #10
 8002700:	202c      	movs	r0, #44	@ 0x2c
 8002702:	f7ff ff75 	bl	80025f0 <adxl375_write>
    adxl375_write(ADXL375_REG_POWER_CTL, 0x08);   // Set Measure bit (00001000)
 8002706:	2108      	movs	r1, #8
 8002708:	202d      	movs	r0, #45	@ 0x2d
 800270a:	f7ff ff71 	bl	80025f0 <adxl375_write>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000057a 	.word	0x2000057a

08002718 <adxl375_write_offsets>:
    }
}

// New functions for offset registers
void adxl375_write_offsets(int8_t ofx, int8_t ofy, int8_t ofz)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	460b      	mov	r3, r1
 8002724:	71bb      	strb	r3, [r7, #6]
 8002726:	4613      	mov	r3, r2
 8002728:	717b      	strb	r3, [r7, #5]
    adxl375_write(ADXL375_REG_OFSX, (uint8_t)ofx);
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4619      	mov	r1, r3
 800272e:	201e      	movs	r0, #30
 8002730:	f7ff ff5e 	bl	80025f0 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSY, (uint8_t)ofy);
 8002734:	79bb      	ldrb	r3, [r7, #6]
 8002736:	4619      	mov	r1, r3
 8002738:	201f      	movs	r0, #31
 800273a:	f7ff ff59 	bl	80025f0 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSZ, (uint8_t)ofz);
 800273e:	797b      	ldrb	r3, [r7, #5]
 8002740:	4619      	mov	r1, r3
 8002742:	2020      	movs	r0, #32
 8002744:	f7ff ff54 	bl	80025f0 <adxl375_write>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <adxl375_read_offsets>:

void adxl375_read_offsets(int8_t *ofx, int8_t *ofy, int8_t *ofz)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
    if (ofx != NULL) {
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <adxl375_read_offsets+0x20>
        *ofx = (int8_t)adxl375_read(ADXL375_REG_OFSX);
 8002762:	201e      	movs	r0, #30
 8002764:	f7ff ff60 	bl	8002628 <adxl375_read>
 8002768:	4603      	mov	r3, r0
 800276a:	b25a      	sxtb	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	701a      	strb	r2, [r3, #0]
    }
    if (ofy != NULL) {
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <adxl375_read_offsets+0x34>
        *ofy = (int8_t)adxl375_read(ADXL375_REG_OFSY);
 8002776:	201f      	movs	r0, #31
 8002778:	f7ff ff56 	bl	8002628 <adxl375_read>
 800277c:	4603      	mov	r3, r0
 800277e:	b25a      	sxtb	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	701a      	strb	r2, [r3, #0]
    }
    if (ofz != NULL) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <adxl375_read_offsets+0x48>
        *ofz = (int8_t)adxl375_read(ADXL375_REG_OFSZ);
 800278a:	2020      	movs	r0, #32
 800278c:	f7ff ff4c 	bl	8002628 <adxl375_read>
 8002790:	4603      	mov	r3, r0
 8002792:	b25a      	sxtb	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	701a      	strb	r2, [r3, #0]
    }
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <adxl375_calibrate>:

void adxl375_calibrate(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08e      	sub	sp, #56	@ 0x38
 80027a4:	af00      	add	r7, sp, #0
    int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80027aa:	2300      	movs	r3, #0
 80027ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80027ae:	2300      	movs	r3, #0
 80027b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int16_t raw_x, raw_y, raw_z;

    for (int i = 0; i < ADXL375_CALIBRATION_SAMPLES; i++) {
 80027b2:	2300      	movs	r3, #0
 80027b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027b6:	e020      	b.n	80027fa <adxl375_calibrate+0x5a>
        adxl375_read_xyz(&raw_x, &raw_y, &raw_z);
 80027b8:	f107 020e 	add.w	r2, r7, #14
 80027bc:	f107 0110 	add.w	r1, r7, #16
 80027c0:	f107 0312 	add.w	r3, r7, #18
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff4d 	bl	8002664 <adxl375_read_xyz>
        sum_x += raw_x;
 80027ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027ce:	461a      	mov	r2, r3
 80027d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d2:	4413      	add	r3, r2
 80027d4:	637b      	str	r3, [r7, #52]	@ 0x34
        sum_y += raw_y;
 80027d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027da:	461a      	mov	r2, r3
 80027dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027de:	4413      	add	r3, r2
 80027e0:	633b      	str	r3, [r7, #48]	@ 0x30
        sum_z += raw_z;
 80027e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027e6:	461a      	mov	r2, r3
 80027e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ea:	4413      	add	r3, r2
 80027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_Delay(10); // Delay between samples, as was in main.c
 80027ee:	200a      	movs	r0, #10
 80027f0:	f005 fc72 	bl	80080d8 <HAL_Delay>
    for (int i = 0; i < ADXL375_CALIBRATION_SAMPLES; i++) {
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	3301      	adds	r3, #1
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fc:	2b31      	cmp	r3, #49	@ 0x31
 80027fe:	dddb      	ble.n	80027b8 <adxl375_calibrate+0x18>
    }

    float avg_x = (float)sum_x / ADXL375_CALIBRATION_SAMPLES;
 8002800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280a:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80028c8 <adxl375_calibrate+0x128>
 800280e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002812:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float avg_y = (float)sum_y / ADXL375_CALIBRATION_SAMPLES;
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002820:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80028c8 <adxl375_calibrate+0x128>
 8002824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002828:	edc7 7a08 	vstr	s15, [r7, #32]
    float avg_z = (float)sum_z / ADXL375_CALIBRATION_SAMPLES;
 800282c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002836:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80028c8 <adxl375_calibrate+0x128>
 800283a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800283e:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate offsets needed to make Z read 1G (approx) and X/Y read 0G
    // The sensitivity 49.0f mg/LSB is from adxl375.h
    float expected_1g_raw = 1000.0f / ADXL375_SENSITIVITY_MG_PER_LSB; 
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <adxl375_calibrate+0x12c>)
 8002844:	61bb      	str	r3, [r7, #24]

    // Using the same offset calculation logic as was in main.c
    // The factor 4.0f was empirically derived or a simplification.
    // ADXL375 datasheet specifies offset register scale factor of 15.6 mg/LSB.
    int8_t offset_x = -(int8_t)(avg_x / 4.0f); 
 8002846:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800284a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800284e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002856:	edc7 7a01 	vstr	s15, [r7, #4]
 800285a:	793b      	ldrb	r3, [r7, #4]
 800285c:	b25b      	sxtb	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	425b      	negs	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	75fb      	strb	r3, [r7, #23]
    int8_t offset_y = -(int8_t)(avg_y / 4.0f);
 8002866:	ed97 7a08 	vldr	s14, [r7, #32]
 800286a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800286e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002876:	edc7 7a01 	vstr	s15, [r7, #4]
 800287a:	793b      	ldrb	r3, [r7, #4]
 800287c:	b25b      	sxtb	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	425b      	negs	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	75bb      	strb	r3, [r7, #22]
    int8_t offset_z = -(int8_t)((avg_z - expected_1g_raw) / 4.0f);
 8002886:	ed97 7a07 	vldr	s14, [r7, #28]
 800288a:	edd7 7a06 	vldr	s15, [r7, #24]
 800288e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002892:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002896:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800289a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800289e:	edc7 7a01 	vstr	s15, [r7, #4]
 80028a2:	793b      	ldrb	r3, [r7, #4]
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	425b      	negs	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	757b      	strb	r3, [r7, #21]
    // However, direct casting from float usually truncates. The (int8_t) cast will take the lower 8 bits.
    // A more robust clamping for int8_t would be:
    // offset_x = (offset_x_float < -128.0f) ? -128 : ((offset_x_float > 127.0f) ? 127 : (int8_t)offset_x_float);
    // For now, sticking to the original simple cast as in main.c

    adxl375_write_offsets(offset_x, offset_y, offset_z);
 80028ae:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80028b2:	f997 1016 	ldrsb.w	r1, [r7, #22]
 80028b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff2c 	bl	8002718 <adxl375_write_offsets>
}
 80028c0:	bf00      	nop
 80028c2:	3738      	adds	r7, #56	@ 0x38
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	42480000 	.word	0x42480000
 80028cc:	41a343eb 	.word	0x41a343eb

080028d0 <a_bmp390_iic_spi_read>:
 *             - 0 success
 *             - 1 iic spi read failed
 * @note       none
 */
static uint8_t a_bmp390_iic_spi_read(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	461a      	mov	r2, r3
 80028dc:	460b      	mov	r3, r1
 80028de:	72fb      	strb	r3, [r7, #11]
 80028e0:	4613      	mov	r3, r2
 80028e2:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                      /* iic interface */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <a_bmp390_iic_spi_read+0x3e>
    {
        if (handle->iic_read(handle->iic_addr, reg, buf, len) != 0)                   /* iic read */
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7818      	ldrb	r0, [r3, #0]
 80028f8:	893b      	ldrh	r3, [r7, #8]
 80028fa:	7af9      	ldrb	r1, [r7, #11]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	47a0      	blx	r4
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <a_bmp390_iic_spi_read+0x3a>
        {
            return 1;                                                                 /* return error */
 8002906:	2301      	movs	r3, #1
 8002908:	e029      	b.n	800295e <a_bmp390_iic_spi_read+0x8e>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 800290a:	2300      	movs	r3, #0
 800290c:	e027      	b.n	800295e <a_bmp390_iic_spi_read+0x8e>
        }
    }
    else                                                                              /* spi interface */
    {
        reg |= 1 << 7;                                                                /* set read mode */
 800290e:	7afb      	ldrb	r3, [r7, #11]
 8002910:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002914:	72fb      	strb	r3, [r7, #11]
        if (handle->spi_read(reg, handle->buf, 
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	1c51      	adds	r1, r2, #1
 8002920:	893a      	ldrh	r2, [r7, #8]
 8002922:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002926:	bf28      	it	cs
 8002928:	f44f 7200 	movcs.w	r2, #512	@ 0x200
 800292c:	b292      	uxth	r2, r2
 800292e:	3201      	adds	r2, #1
 8002930:	b292      	uxth	r2, r2
 8002932:	7af8      	ldrb	r0, [r7, #11]
 8002934:	4798      	blx	r3
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <a_bmp390_iic_spi_read+0x70>
                             len > 512 ? (512 + 1) : (len + 1)) != 0)                 /* spi read */
        {
            return 1;                                                                 /* return error */
 800293c:	2301      	movs	r3, #1
 800293e:	e00e      	b.n	800295e <a_bmp390_iic_spi_read+0x8e>
        }
        memcpy(buf, handle->buf+1, (len > 512) ? 512 : len);                          /* copy data */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3301      	adds	r3, #1
 8002944:	1c59      	adds	r1, r3, #1
 8002946:	893b      	ldrh	r3, [r7, #8]
 8002948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800294c:	bf28      	it	cs
 800294e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f00b f9e3 	bl	800dd22 <memcpy>
        
        return 0;                                                                     /* success return 0 */
 800295c:	2300      	movs	r3, #0
    }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}

08002966 <a_bmp390_iic_spi_write>:
 *            - 0 success
 *            - 1 iic spi write failed
 * @note      none
 */
static uint8_t a_bmp390_iic_spi_write(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8002966:	b590      	push	{r4, r7, lr}
 8002968:	b087      	sub	sp, #28
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	461a      	mov	r2, r3
 8002972:	460b      	mov	r3, r1
 8002974:	72fb      	strb	r3, [r7, #11]
 8002976:	4613      	mov	r3, r2
 8002978:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                             /* iic interface */
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8002980:	2b00      	cmp	r3, #0
 8002982:	d11f      	bne.n	80029c4 <a_bmp390_iic_spi_write+0x5e>
    {
        uint16_t i;
        
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8002984:	2300      	movs	r3, #0
 8002986:	82fb      	strh	r3, [r7, #22]
 8002988:	e016      	b.n	80029b8 <a_bmp390_iic_spi_write+0x52>
        {
            if (handle->iic_write(handle->iic_addr, 
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8d3 4210 	ldr.w	r4, [r3, #528]	@ 0x210
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	7818      	ldrb	r0, [r3, #0]
 8002994:	8afb      	ldrh	r3, [r7, #22]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	7afb      	ldrb	r3, [r7, #11]
 800299a:	4413      	add	r3, r2
 800299c:	b2d9      	uxtb	r1, r3
 800299e:	8afb      	ldrh	r3, [r7, #22]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	441a      	add	r2, r3
 80029a4:	2301      	movs	r3, #1
 80029a6:	47a0      	blx	r4
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <a_bmp390_iic_spi_write+0x4c>
                                  (uint8_t)(reg + i), buf + i, 1) != 0)      /* iic write */
            {
                return 1;                                                    /* return error */
 80029ae:	2301      	movs	r3, #1
 80029b0:	e029      	b.n	8002a06 <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 80029b2:	8afb      	ldrh	r3, [r7, #22]
 80029b4:	3301      	adds	r3, #1
 80029b6:	82fb      	strh	r3, [r7, #22]
 80029b8:	8afa      	ldrh	r2, [r7, #22]
 80029ba:	893b      	ldrh	r3, [r7, #8]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3e4      	bcc.n	800298a <a_bmp390_iic_spi_write+0x24>
            }
        }
        
        return 0;                                                            /* success return 0 */
 80029c0:	2300      	movs	r3, #0
 80029c2:	e020      	b.n	8002a06 <a_bmp390_iic_spi_write+0xa0>
    }
    else
    {
        uint16_t i;
        
        reg &= ~(1 << 7);                                                    /* write mode */
 80029c4:	7afb      	ldrb	r3, [r7, #11]
 80029c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ca:	72fb      	strb	r3, [r7, #11]
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 80029cc:	2300      	movs	r3, #0
 80029ce:	82bb      	strh	r3, [r7, #20]
 80029d0:	e014      	b.n	80029fc <a_bmp390_iic_spi_write+0x96>
        {
            if (handle->spi_write((uint8_t)(reg + i), buf + i, 1) != 0)      /* spi write */
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80029d8:	8aba      	ldrh	r2, [r7, #20]
 80029da:	b2d1      	uxtb	r1, r2
 80029dc:	7afa      	ldrb	r2, [r7, #11]
 80029de:	440a      	add	r2, r1
 80029e0:	b2d0      	uxtb	r0, r2
 80029e2:	8aba      	ldrh	r2, [r7, #20]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4411      	add	r1, r2
 80029e8:	2201      	movs	r2, #1
 80029ea:	4798      	blx	r3
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <a_bmp390_iic_spi_write+0x90>
            {
                return 1;                                                    /* return error */
 80029f2:	2301      	movs	r3, #1
 80029f4:	e007      	b.n	8002a06 <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 80029f6:	8abb      	ldrh	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	82bb      	strh	r3, [r7, #20]
 80029fc:	8aba      	ldrh	r2, [r7, #20]
 80029fe:	893b      	ldrh	r3, [r7, #8]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d3e6      	bcc.n	80029d2 <a_bmp390_iic_spi_write+0x6c>
            }
        }
        
        return 0;                                                            /* success return 0 */
 8002a04:	2300      	movs	r3, #0
    }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}
	...

08002a10 <a_bmp390_get_calibration_data>:
 *            - 0 success
 *            - 1 get calibration data failed
 * @note      none
 */
static uint8_t a_bmp390_get_calibration_data(bmp390_handle_t *handle)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
    uint8_t buf[2];
    
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T1_L, (uint8_t *)buf, 2) != 0)  /* read t1 */
 8002a18:	f107 020c 	add.w	r2, r7, #12
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	2131      	movs	r1, #49	@ 0x31
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff55 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <a_bmp390_get_calibration_data+0x2a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002a32:	48a8      	ldr	r0, [pc, #672]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002a34:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e154      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t1 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t1 */
 8002a3a:	7b7b      	ldrb	r3, [r7, #13]
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	7b3b      	ldrb	r3, [r7, #12]
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8a3 2232 	strh.w	r2, [r3, #562]	@ 0x232
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T2_L, (uint8_t *)buf, 2) != 0)  /* read t2 */
 8002a52:	f107 020c 	add.w	r2, r7, #12
 8002a56:	2302      	movs	r3, #2
 8002a58:	2133      	movs	r1, #51	@ 0x33
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff38 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <a_bmp390_get_calibration_data+0x64>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002a6c:	4899      	ldr	r0, [pc, #612]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002a6e:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002a70:	2301      	movs	r3, #1
 8002a72:	e137      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t2 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t2 */
 8002a74:	7b7b      	ldrb	r3, [r7, #13]
 8002a76:	b21b      	sxth	r3, r3
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	7b3b      	ldrb	r3, [r7, #12]
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	4313      	orrs	r3, r2
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8a3 2234 	strh.w	r2, [r3, #564]	@ 0x234
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T3, (uint8_t *)buf, 1) != 0)    /* read t3 */
 8002a8c:	f107 020c 	add.w	r2, r7, #12
 8002a90:	2301      	movs	r3, #1
 8002a92:	2135      	movs	r1, #53	@ 0x35
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff1b 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <a_bmp390_get_calibration_data+0x9e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002aa6:	488b      	ldr	r0, [pc, #556]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002aa8:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e11a      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t3 = (int8_t)(buf[0]);                                                       /* set t3 */
 8002aae:	7b3b      	ldrb	r3, [r7, #12]
 8002ab0:	b25a      	sxtb	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P1_L, (uint8_t *)buf, 2) != 0)  /* read p1 */
 8002ab8:	f107 020c 	add.w	r2, r7, #12
 8002abc:	2302      	movs	r3, #2
 8002abe:	2136      	movs	r1, #54	@ 0x36
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff05 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <a_bmp390_get_calibration_data+0xca>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002ad2:	4880      	ldr	r0, [pc, #512]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002ad4:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e104      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p1 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p1 */
 8002ada:	7b7b      	ldrb	r3, [r7, #13]
 8002adc:	b21b      	sxth	r3, r3
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	7b3b      	ldrb	r3, [r7, #12]
 8002ae4:	b21b      	sxth	r3, r3
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	b21a      	sxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P2_L, (uint8_t *)buf, 2) != 0)  /* read p2 */
 8002af0:	f107 020c 	add.w	r2, r7, #12
 8002af4:	2302      	movs	r3, #2
 8002af6:	2138      	movs	r1, #56	@ 0x38
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fee9 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <a_bmp390_get_calibration_data+0x102>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b0a:	4872      	ldr	r0, [pc, #456]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002b0c:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0e8      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p2 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p2 */
 8002b12:	7b7b      	ldrb	r3, [r7, #13]
 8002b14:	b21b      	sxth	r3, r3
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	b21a      	sxth	r2, r3
 8002b1a:	7b3b      	ldrb	r3, [r7, #12]
 8002b1c:	b21b      	sxth	r3, r3
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	b21a      	sxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8a3 223a 	strh.w	r2, [r3, #570]	@ 0x23a
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P3, (uint8_t *)buf, 1) != 0)    /* read p3 */
 8002b28:	f107 020c 	add.w	r2, r7, #12
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	213a      	movs	r1, #58	@ 0x3a
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff fecd 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d006      	beq.n	8002b4a <a_bmp390_get_calibration_data+0x13a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b42:	4864      	ldr	r0, [pc, #400]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002b44:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0cc      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p3 = (int8_t)(buf[0]);                                                       /* set p3 */
 8002b4a:	7b3b      	ldrb	r3, [r7, #12]
 8002b4c:	b25a      	sxtb	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P4, (uint8_t *)buf, 1) != 0)    /* read p4 */
 8002b54:	f107 020c 	add.w	r2, r7, #12
 8002b58:	2301      	movs	r3, #1
 8002b5a:	213b      	movs	r1, #59	@ 0x3b
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff feb7 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d006      	beq.n	8002b76 <a_bmp390_get_calibration_data+0x166>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b6e:	4859      	ldr	r0, [pc, #356]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002b70:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0b6      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p4 = (int8_t)(buf[0]);                                                       /* set p4 */
 8002b76:	7b3b      	ldrb	r3, [r7, #12]
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P5_L, (uint8_t *)buf, 2) != 0)  /* read p5 */
 8002b80:	f107 020c 	add.w	r2, r7, #12
 8002b84:	2302      	movs	r3, #2
 8002b86:	213c      	movs	r1, #60	@ 0x3c
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fea1 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <a_bmp390_get_calibration_data+0x192>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b9a:	484e      	ldr	r0, [pc, #312]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002b9c:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0a0      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p5 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p5 */
 8002ba2:	7b7b      	ldrb	r3, [r7, #13]
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	7b3b      	ldrb	r3, [r7, #12]
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8a3 223e 	strh.w	r2, [r3, #574]	@ 0x23e
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P6_L, (uint8_t *)buf, 2) != 0)  /* read p6l */
 8002bba:	f107 020c 	add.w	r2, r7, #12
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	213e      	movs	r1, #62	@ 0x3e
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff fe84 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <a_bmp390_get_calibration_data+0x1cc>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002bd4:	483f      	ldr	r0, [pc, #252]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002bd6:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e083      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p6 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p6 */
 8002bdc:	7b7b      	ldrb	r3, [r7, #13]
 8002bde:	b21b      	sxth	r3, r3
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	b21a      	sxth	r2, r3
 8002be4:	7b3b      	ldrb	r3, [r7, #12]
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P7, (uint8_t *)buf, 1) != 0)    /* read p7 */
 8002bf4:	f107 020c 	add.w	r2, r7, #12
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	2140      	movs	r1, #64	@ 0x40
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff fe67 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <a_bmp390_get_calibration_data+0x206>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c0e:	4831      	ldr	r0, [pc, #196]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002c10:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002c12:	2301      	movs	r3, #1
 8002c14:	e066      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p7 = (int8_t)(buf[0]);                                                       /* set p7 */
 8002c16:	7b3b      	ldrb	r3, [r7, #12]
 8002c18:	b25a      	sxtb	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P8, (uint8_t *)buf, 1) != 0)    /* read p8 */
 8002c20:	f107 020c 	add.w	r2, r7, #12
 8002c24:	2301      	movs	r3, #1
 8002c26:	2141      	movs	r1, #65	@ 0x41
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff fe51 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <a_bmp390_get_calibration_data+0x232>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c3a:	4826      	ldr	r0, [pc, #152]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002c3c:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e050      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p8 = (int8_t)(buf[0]);                                                       /* set p8 */
 8002c42:	7b3b      	ldrb	r3, [r7, #12]
 8002c44:	b25a      	sxtb	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P9_L, (uint8_t *)buf, 2) != 0)  /* read p9l */
 8002c4c:	f107 020c 	add.w	r2, r7, #12
 8002c50:	2302      	movs	r3, #2
 8002c52:	2142      	movs	r1, #66	@ 0x42
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fe3b 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <a_bmp390_get_calibration_data+0x25e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c66:	481b      	ldr	r0, [pc, #108]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002c68:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e03a      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p9 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p9 */
 8002c6e:	7b7b      	ldrb	r3, [r7, #13]
 8002c70:	b21b      	sxth	r3, r3
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	b21a      	sxth	r2, r3
 8002c76:	7b3b      	ldrb	r3, [r7, #12]
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b21a      	sxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P10, (uint8_t *)buf, 1) != 0)   /* read p10 */
 8002c84:	f107 020c 	add.w	r2, r7, #12
 8002c88:	2301      	movs	r3, #1
 8002c8a:	2144      	movs	r1, #68	@ 0x44
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff fe1f 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <a_bmp390_get_calibration_data+0x296>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c9e:	480d      	ldr	r0, [pc, #52]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002ca0:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e01e      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p10 = (int8_t)(buf[0]);                                                      /* set p10 */
 8002ca6:	7b3b      	ldrb	r3, [r7, #12]
 8002ca8:	b25a      	sxtb	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f883 2246 	strb.w	r2, [r3, #582]	@ 0x246
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P11, (uint8_t *)buf, 1) != 0)   /* read p11 */
 8002cb0:	f107 020c 	add.w	r2, r7, #12
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	2145      	movs	r1, #69	@ 0x45
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fe09 	bl	80028d0 <a_bmp390_iic_spi_read>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <a_bmp390_get_calibration_data+0x2c8>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002cca:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <a_bmp390_get_calibration_data+0x2c4>)
 8002ccc:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e008      	b.n	8002ce4 <a_bmp390_get_calibration_data+0x2d4>
 8002cd2:	bf00      	nop
 8002cd4:	080125e0 	.word	0x080125e0
    }
    handle->p11 = (int8_t)(buf[0]);                                                      /* set p11 */
 8002cd8:	7b3b      	ldrb	r3, [r7, #12]
 8002cda:	b25a      	sxtb	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247

    return 0;                                                                            /* success return 0 */
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <a_bmp390_compensate_temperature>:
 * @param[in] data raw temperature
 * @return    compensated temperature
 * @note      none
 */
static int64_t a_bmp390_compensate_temperature(bmp390_handle_t *handle, uint32_t data)
{ 
 8002cec:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002cf0:	b0a5      	sub	sp, #148	@ 0x94
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6578      	str	r0, [r7, #84]	@ 0x54
 8002cf6:	6539      	str	r1, [r7, #80]	@ 0x50
    int64_t partial_data5;
    int64_t partial_data6;
    int64_t comp_temp;

    /* calculate compensate temperature */
    partial_data1 = (uint64_t)(data - (256 * (uint64_t)(handle->t1)));
 8002cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cfe:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d02:	f8b3 3232 	ldrh.w	r3, [r3, #562]	@ 0x232
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2200      	movs	r2, #0
 8002d0a:	461c      	mov	r4, r3
 8002d0c:	4615      	mov	r5, r2
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	022b      	lsls	r3, r5, #8
 8002d18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d1c:	0222      	lsls	r2, r4, #8
 8002d1e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002d22:	4621      	mov	r1, r4
 8002d24:	1a89      	subs	r1, r1, r2
 8002d26:	61b9      	str	r1, [r7, #24]
 8002d28:	4629      	mov	r1, r5
 8002d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002d34:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    partial_data2 = (uint64_t)(handle->t2 * partial_data1);
 8002d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3a:	f8b3 3234 	ldrh.w	r3, [r3, #564]	@ 0x234
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2200      	movs	r2, #0
 8002d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d44:	637a      	str	r2, [r7, #52]	@ 0x34
 8002d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d4e:	4622      	mov	r2, r4
 8002d50:	fb02 f203 	mul.w	r2, r2, r3
 8002d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d58:	4629      	mov	r1, r5
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	441a      	add	r2, r3
 8002d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d64:	4621      	mov	r1, r4
 8002d66:	fba3 ab01 	umull	sl, fp, r3, r1
 8002d6a:	eb02 030b 	add.w	r3, r2, fp
 8002d6e:	469b      	mov	fp, r3
 8002d70:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
 8002d74:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
    partial_data3 = (uint64_t)(partial_data1 * partial_data1);
 8002d78:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d80:	fb03 f102 	mul.w	r1, r3, r2
 8002d84:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	18ca      	adds	r2, r1, r3
 8002d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d96:	fba3 1303 	umull	r1, r3, r3, r3
 8002d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002da2:	18d3      	adds	r3, r2, r3
 8002da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002daa:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8002dae:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    partial_data4 = (int64_t)(((int64_t)partial_data3) * ((int64_t)handle->t3));
 8002db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db4:	f993 3236 	ldrsb.w	r3, [r3, #566]	@ 0x236
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	17da      	asrs	r2, r3, #31
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dc0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002dc4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002dc8:	4629      	mov	r1, r5
 8002dca:	fb02 f001 	mul.w	r0, r2, r1
 8002dce:	4621      	mov	r1, r4
 8002dd0:	fb01 f103 	mul.w	r1, r1, r3
 8002dd4:	4401      	add	r1, r0
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	fba0 2302 	umull	r2, r3, r0, r2
 8002ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dde:	4613      	mov	r3, r2
 8002de0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de4:	18cb      	adds	r3, r1, r3
 8002de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002de8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002dec:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8002df0:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    partial_data5 = ((int64_t)(((int64_t)partial_data2) * 262144) + (int64_t)partial_data4);
 8002df4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	048b      	lsls	r3, r1, #18
 8002e02:	ea43 3390 	orr.w	r3, r3, r0, lsr #14
 8002e06:	0482      	lsls	r2, r0, #18
 8002e08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002e0c:	1884      	adds	r4, r0, r2
 8002e0e:	613c      	str	r4, [r7, #16]
 8002e10:	eb41 0303 	adc.w	r3, r1, r3
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e1a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    partial_data6 = (int64_t)(((int64_t)partial_data5) / 4294967296U);
 8002e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	000a      	movs	r2, r1
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    handle->t_fine = partial_data6;
 8002e32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e34:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002e38:	e9c1 2392 	strd	r2, r3, [r1, #584]	@ 0x248
    comp_temp = (int64_t)((partial_data6 * 25)  / 16384);
 8002e3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	1894      	adds	r4, r2, r2
 8002e46:	60bc      	str	r4, [r7, #8]
 8002e48:	415b      	adcs	r3, r3
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e50:	eb12 0800 	adds.w	r8, r2, r0
 8002e54:	eb43 0901 	adc.w	r9, r3, r1
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e6c:	4690      	mov	r8, r2
 8002e6e:	4699      	mov	r9, r3
 8002e70:	eb18 0300 	adds.w	r3, r8, r0
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	eb49 0301 	adc.w	r3, r9, r1
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da08      	bge.n	8002e96 <a_bmp390_compensate_temperature+0x1aa>
 8002e84:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8002e88:	1851      	adds	r1, r2, r1
 8002e8a:	6039      	str	r1, [r7, #0]
 8002e8c:	f143 0300 	adc.w	r3, r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	0b90      	lsrs	r0, r2, #14
 8002ea0:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
 8002ea4:	1399      	asrs	r1, r3, #14
 8002ea6:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
    
    return comp_temp;
 8002eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	3794      	adds	r7, #148	@ 0x94
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002eba:	4770      	bx	lr

08002ebc <a_bmp390_compensate_pressure>:
 * @param[in] data raw pressure
 * @return    compensated pressure
 * @note      none
 */
static int64_t a_bmp390_compensate_pressure(bmp390_handle_t *handle, uint32_t data)
{
 8002ebc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ec0:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
 8002eca:	f8c7 11b8 	str.w	r1, [r7, #440]	@ 0x1b8
    int64_t offset;
    int64_t sensitivity;
    uint64_t comp_press;

    /* calculate compensate pressure */
    partial_data1 = handle->t_fine * handle->t_fine;
 8002ece:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002ed2:	e9d3 0192 	ldrd	r0, r1, [r3, #584]	@ 0x248
 8002ed6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002eda:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8002ede:	fb02 f501 	mul.w	r5, r2, r1
 8002ee2:	fb00 f403 	mul.w	r4, r0, r3
 8002ee6:	442c      	add	r4, r5
 8002ee8:	fba0 8902 	umull	r8, r9, r0, r2
 8002eec:	eb04 0309 	add.w	r3, r4, r9
 8002ef0:	4699      	mov	r9, r3
 8002ef2:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
 8002ef6:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
    partial_data2 = partial_data1 / 64;
 8002efa:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	da07      	bge.n	8002f12 <a_bmp390_compensate_pressure+0x56>
 8002f02:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 8002f06:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002f08:	f143 0300 	adc.w	r3, r3, #0
 8002f0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f0e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	0990      	lsrs	r0, r2, #6
 8002f1c:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8002f20:	1199      	asrs	r1, r3, #6
 8002f22:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * handle->t_fine) / 256;
 8002f26:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002f2a:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8002f2e:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8002f32:	fb03 f001 	mul.w	r0, r3, r1
 8002f36:	f8d7 11fc 	ldr.w	r1, [r7, #508]	@ 0x1fc
 8002f3a:	fb02 f101 	mul.w	r1, r2, r1
 8002f3e:	4408      	add	r0, r1
 8002f40:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8002f44:	fba1 ab02 	umull	sl, fp, r1, r2
 8002f48:	eb00 030b 	add.w	r3, r0, fp
 8002f4c:	469b      	mov	fp, r3
 8002f4e:	4652      	mov	r2, sl
 8002f50:	465b      	mov	r3, fp
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da07      	bge.n	8002f66 <a_bmp390_compensate_pressure+0xaa>
 8002f56:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8002f5a:	6739      	str	r1, [r7, #112]	@ 0x70
 8002f5c:	f143 0300 	adc.w	r3, r3, #0
 8002f60:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f66:	f04f 0000 	mov.w	r0, #0
 8002f6a:	f04f 0100 	mov.w	r1, #0
 8002f6e:	0a10      	lsrs	r0, r2, #8
 8002f70:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002f74:	1219      	asrs	r1, r3, #8
 8002f76:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (handle->p8 * partial_data3) / 32;
 8002f7a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002f7e:	f993 3243 	ldrsb.w	r3, [r3, #579]	@ 0x243
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	17da      	asrs	r2, r3, #31
 8002f86:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002f8a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002f8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002f92:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8002f96:	462a      	mov	r2, r5
 8002f98:	fb02 f203 	mul.w	r2, r2, r3
 8002f9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	441a      	add	r2, r3
 8002fa8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002fac:	4621      	mov	r1, r4
 8002fae:	fba3 1301 	umull	r1, r3, r3, r1
 8002fb2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002fbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002fc0:	18d3      	adds	r3, r2, r3
 8002fc2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002fc6:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	da07      	bge.n	8002fde <a_bmp390_compensate_pressure+0x122>
 8002fce:	f112 011f 	adds.w	r1, r2, #31
 8002fd2:	66b9      	str	r1, [r7, #104]	@ 0x68
 8002fd4:	f143 0300 	adc.w	r3, r3, #0
 8002fd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fda:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002fde:	f04f 0000 	mov.w	r0, #0
 8002fe2:	f04f 0100 	mov.w	r1, #0
 8002fe6:	0950      	lsrs	r0, r2, #5
 8002fe8:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8002fec:	1159      	asrs	r1, r3, #5
 8002fee:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (handle->p7 * partial_data1) * 16;
 8002ff2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002ff6:	f993 3242 	ldrsb.w	r3, [r3, #578]	@ 0x242
 8002ffa:	b25b      	sxtb	r3, r3
 8002ffc:	17da      	asrs	r2, r3, #31
 8002ffe:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003002:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8003006:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800300a:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 800300e:	462a      	mov	r2, r5
 8003010:	fb02 f203 	mul.w	r2, r2, r3
 8003014:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8003018:	4621      	mov	r1, r4
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	441a      	add	r2, r3
 8003020:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003024:	4621      	mov	r1, r4
 8003026:	fba3 1301 	umull	r1, r3, r3, r1
 800302a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800302e:	460b      	mov	r3, r1
 8003030:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003034:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003038:	18d3      	adds	r3, r2, r3
 800303a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800304a:	4629      	mov	r1, r5
 800304c:	010b      	lsls	r3, r1, #4
 800304e:	4621      	mov	r1, r4
 8003050:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8003054:	4621      	mov	r1, r4
 8003056:	010a      	lsls	r2, r1, #4
 8003058:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    partial_data6 = (handle->p6 * handle->t_fine) * 4194304;
 800305c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003060:	f8b3 3240 	ldrh.w	r3, [r3, #576]	@ 0x240
 8003064:	b29b      	uxth	r3, r3
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800306c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003070:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003074:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8003078:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 800307c:	4629      	mov	r1, r5
 800307e:	fb02 f001 	mul.w	r0, r2, r1
 8003082:	4621      	mov	r1, r4
 8003084:	fb01 f103 	mul.w	r1, r1, r3
 8003088:	4401      	add	r1, r0
 800308a:	4620      	mov	r0, r4
 800308c:	fba0 2302 	umull	r2, r3, r0, r2
 8003090:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003094:	4613      	mov	r3, r2
 8003096:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800309a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800309e:	18cb      	adds	r3, r1, r3
 80030a0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 80030b0:	4629      	mov	r1, r5
 80030b2:	058b      	lsls	r3, r1, #22
 80030b4:	4621      	mov	r1, r4
 80030b6:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 80030ba:	4621      	mov	r1, r4
 80030bc:	058a      	lsls	r2, r1, #22
 80030be:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    offset = (int64_t)((int64_t)(handle->p5) * (int64_t)140737488355328U) + partial_data4 + partial_data5 + partial_data6;
 80030c2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80030c6:	f8b3 323e 	ldrh.w	r3, [r3, #574]	@ 0x23e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80030d2:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80030d6:	f04f 0000 	mov.w	r0, #0
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80030e2:	03d9      	lsls	r1, r3, #15
 80030e4:	2000      	movs	r0, #0
 80030e6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80030ea:	1884      	adds	r4, r0, r2
 80030ec:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 80030f0:	eb41 0303 	adc.w	r3, r1, r3
 80030f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80030f8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80030fc:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8003100:	4621      	mov	r1, r4
 8003102:	1889      	adds	r1, r1, r2
 8003104:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8003108:	4629      	mov	r1, r5
 800310a:	eb43 0101 	adc.w	r1, r3, r1
 800310e:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 8003112:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8003116:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 800311a:	4621      	mov	r1, r4
 800311c:	1851      	adds	r1, r2, r1
 800311e:	6639      	str	r1, [r7, #96]	@ 0x60
 8003120:	4629      	mov	r1, r5
 8003122:	eb43 0101 	adc.w	r1, r3, r1
 8003126:	6679      	str	r1, [r7, #100]	@ 0x64
 8003128:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800312c:	e9c7 3474 	strd	r3, r4, [r7, #464]	@ 0x1d0
    partial_data2 = (((int64_t)handle->p4) * partial_data3) / 32;
 8003130:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003134:	f993 323d 	ldrsb.w	r3, [r3, #573]	@ 0x23d
 8003138:	b25b      	sxtb	r3, r3
 800313a:	17da      	asrs	r2, r3, #31
 800313c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003140:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003144:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003148:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800314c:	462a      	mov	r2, r5
 800314e:	fb02 f203 	mul.w	r2, r2, r3
 8003152:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003156:	4621      	mov	r1, r4
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	441a      	add	r2, r3
 800315e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003162:	4621      	mov	r1, r4
 8003164:	fba3 1301 	umull	r1, r3, r3, r1
 8003168:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800316c:	460b      	mov	r3, r1
 800316e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003172:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003176:	18d3      	adds	r3, r2, r3
 8003178:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800317c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8003180:	2b00      	cmp	r3, #0
 8003182:	da07      	bge.n	8003194 <a_bmp390_compensate_pressure+0x2d8>
 8003184:	f112 011f 	adds.w	r1, r2, #31
 8003188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800318a:	f143 0300 	adc.w	r3, r3, #0
 800318e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003190:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003194:	f04f 0000 	mov.w	r0, #0
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	0950      	lsrs	r0, r2, #5
 800319e:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 80031a2:	1159      	asrs	r1, r3, #5
 80031a4:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data4 = (handle->p3 * partial_data1) * 4;
 80031a8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80031ac:	f993 323c 	ldrsb.w	r3, [r3, #572]	@ 0x23c
 80031b0:	b25b      	sxtb	r3, r3
 80031b2:	17da      	asrs	r2, r3, #31
 80031b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80031b8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80031bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031c0:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 80031c4:	462a      	mov	r2, r5
 80031c6:	fb02 f203 	mul.w	r2, r2, r3
 80031ca:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80031ce:	4621      	mov	r1, r4
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	441a      	add	r2, r3
 80031d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031da:	4621      	mov	r1, r4
 80031dc:	fba3 1301 	umull	r1, r3, r3, r1
 80031e0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80031e4:	460b      	mov	r3, r1
 80031e6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80031ea:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8003200:	4629      	mov	r1, r5
 8003202:	008b      	lsls	r3, r1, #2
 8003204:	4621      	mov	r1, r4
 8003206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800320a:	4621      	mov	r1, r4
 800320c:	008a      	lsls	r2, r1, #2
 800320e:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
    partial_data5 = ((int64_t)(handle->p2) - 16384) * ((int64_t)handle->t_fine) * 2097152;
 8003212:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003216:	f9b3 323a 	ldrsh.w	r3, [r3, #570]	@ 0x23a
 800321a:	b21b      	sxth	r3, r3
 800321c:	17da      	asrs	r2, r3, #31
 800321e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003222:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003226:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800322a:	460b      	mov	r3, r1
 800322c:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 8003230:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003234:	4613      	mov	r3, r2
 8003236:	f143 33ff 	adc.w	r3, r3, #4294967295
 800323a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800323e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003242:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8003246:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800324a:	4629      	mov	r1, r5
 800324c:	fb02 f001 	mul.w	r0, r2, r1
 8003250:	4621      	mov	r1, r4
 8003252:	fb01 f103 	mul.w	r1, r1, r3
 8003256:	4401      	add	r1, r0
 8003258:	4620      	mov	r0, r4
 800325a:	fba0 2302 	umull	r2, r3, r0, r2
 800325e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003262:	4613      	mov	r3, r2
 8003264:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003268:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800326c:	18cb      	adds	r3, r1, r3
 800326e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 800327e:	4629      	mov	r1, r5
 8003280:	054b      	lsls	r3, r1, #21
 8003282:	4621      	mov	r1, r4
 8003284:	ea43 23d1 	orr.w	r3, r3, r1, lsr #11
 8003288:	4621      	mov	r1, r4
 800328a:	054a      	lsls	r2, r1, #21
 800328c:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    sensitivity = (((int64_t)(handle->p1) - 16384) * (int64_t)70368744177664U) + partial_data2 + partial_data4 + partial_data5;
 8003290:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003294:	f9b3 3238 	ldrsh.w	r3, [r3, #568]	@ 0x238
 8003298:	b21b      	sxth	r3, r3
 800329a:	17da      	asrs	r2, r3, #31
 800329c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80032a0:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80032a4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80032a8:	460b      	mov	r3, r1
 80032aa:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 80032ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80032b2:	4613      	mov	r3, r2
 80032b4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80032b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80032c8:	0399      	lsls	r1, r3, #14
 80032ca:	2000      	movs	r0, #0
 80032cc:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80032d0:	1884      	adds	r4, r0, r2
 80032d2:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 80032d6:	eb41 0303 	adc.w	r3, r1, r3
 80032da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80032de:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80032e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032e6:	4621      	mov	r1, r4
 80032e8:	1889      	adds	r1, r1, r2
 80032ea:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 80032ee:	4629      	mov	r1, r5
 80032f0:	eb43 0101 	adc.w	r1, r3, r1
 80032f4:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80032f8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80032fc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003300:	4621      	mov	r1, r4
 8003302:	1851      	adds	r1, r2, r1
 8003304:	6539      	str	r1, [r7, #80]	@ 0x50
 8003306:	4629      	mov	r1, r5
 8003308:	eb43 0101 	adc.w	r1, r3, r1
 800330c:	6579      	str	r1, [r7, #84]	@ 0x54
 800330e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8003312:	e9c7 3472 	strd	r3, r4, [r7, #456]	@ 0x1c8
    partial_data1 = (sensitivity / 16777216) * data;
 8003316:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800331a:	2b00      	cmp	r3, #0
 800331c:	da08      	bge.n	8003330 <a_bmp390_compensate_pressure+0x474>
 800331e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003322:	1851      	adds	r1, r2, r1
 8003324:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003326:	f143 0300 	adc.w	r3, r3, #0
 800332a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800332c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003330:	f04f 0000 	mov.w	r0, #0
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	0e10      	lsrs	r0, r2, #24
 800333a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800333e:	1619      	asrs	r1, r3, #24
 8003340:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003344:	2200      	movs	r2, #0
 8003346:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800334a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800334e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003352:	4623      	mov	r3, r4
 8003354:	fb03 f201 	mul.w	r2, r3, r1
 8003358:	462b      	mov	r3, r5
 800335a:	fb00 f303 	mul.w	r3, r0, r3
 800335e:	4413      	add	r3, r2
 8003360:	4622      	mov	r2, r4
 8003362:	fba0 1202 	umull	r1, r2, r0, r2
 8003366:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 800336a:	460a      	mov	r2, r1
 800336c:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8003370:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8003374:	4413      	add	r3, r2
 8003376:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800337a:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 800337e:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
 8003382:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
    partial_data2 = (int64_t)(handle->p10) * (int64_t)(handle->t_fine);
 8003386:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800338a:	f993 3246 	ldrsb.w	r3, [r3, #582]	@ 0x246
 800338e:	b25b      	sxtb	r3, r3
 8003390:	17da      	asrs	r2, r3, #31
 8003392:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003396:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800339a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800339e:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 80033a2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80033a6:	4629      	mov	r1, r5
 80033a8:	fb02 f001 	mul.w	r0, r2, r1
 80033ac:	4621      	mov	r1, r4
 80033ae:	fb01 f103 	mul.w	r1, r1, r3
 80033b2:	4401      	add	r1, r0
 80033b4:	4620      	mov	r0, r4
 80033b6:	fba0 2302 	umull	r2, r3, r0, r2
 80033ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80033be:	4613      	mov	r3, r2
 80033c0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80033c4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80033c8:	18cb      	adds	r3, r1, r3
 80033ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80033ce:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80033d2:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
 80033d6:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
    partial_data3 = partial_data2 + (65536 * (int64_t)(handle->p9));
 80033da:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80033de:	f9b3 3244 	ldrsh.w	r3, [r3, #580]	@ 0x244
 80033e2:	b21b      	sxth	r3, r3
 80033e4:	17da      	asrs	r2, r3, #31
 80033e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033ea:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80033fa:	462b      	mov	r3, r5
 80033fc:	0419      	lsls	r1, r3, #16
 80033fe:	4623      	mov	r3, r4
 8003400:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8003404:	4623      	mov	r3, r4
 8003406:	0418      	lsls	r0, r3, #16
 8003408:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800340c:	1814      	adds	r4, r2, r0
 800340e:	643c      	str	r4, [r7, #64]	@ 0x40
 8003410:	414b      	adcs	r3, r1
 8003412:	647b      	str	r3, [r7, #68]	@ 0x44
 8003414:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003418:	e9c7 347c 	strd	r3, r4, [r7, #496]	@ 0x1f0
    partial_data4 = (partial_data3 * data) / 8192;
 800341c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003420:	2200      	movs	r2, #0
 8003422:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003426:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800342a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800342e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8003432:	462a      	mov	r2, r5
 8003434:	fb02 f203 	mul.w	r2, r2, r3
 8003438:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800343c:	4621      	mov	r1, r4
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	441a      	add	r2, r3
 8003444:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003448:	4621      	mov	r1, r4
 800344a:	fba3 1301 	umull	r1, r3, r3, r1
 800344e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003452:	460b      	mov	r3, r1
 8003454:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003458:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800345c:	18d3      	adds	r3, r2, r3
 800345e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003462:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8003466:	2b00      	cmp	r3, #0
 8003468:	da08      	bge.n	800347c <a_bmp390_compensate_pressure+0x5c0>
 800346a:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 800346e:	1851      	adds	r1, r2, r1
 8003470:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003472:	f143 0300 	adc.w	r3, r3, #0
 8003476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800347c:	f04f 0000 	mov.w	r0, #0
 8003480:	f04f 0100 	mov.w	r1, #0
 8003484:	0b50      	lsrs	r0, r2, #13
 8003486:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800348a:	1359      	asrs	r1, r3, #13
 800348c:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (partial_data4 * data) / 512;
 8003490:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003494:	2200      	movs	r2, #0
 8003496:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800349a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800349e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80034a2:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80034a6:	462a      	mov	r2, r5
 80034a8:	fb02 f203 	mul.w	r2, r2, r3
 80034ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80034b0:	4621      	mov	r1, r4
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	441a      	add	r2, r3
 80034b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80034bc:	4621      	mov	r1, r4
 80034be:	fba3 1301 	umull	r1, r3, r3, r1
 80034c2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80034c6:	460b      	mov	r3, r1
 80034c8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80034cc:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80034d0:	18d3      	adds	r3, r2, r3
 80034d2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80034d6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da08      	bge.n	80034f0 <a_bmp390_compensate_pressure+0x634>
 80034de:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80034e2:	1851      	adds	r1, r2, r1
 80034e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80034e6:	f143 0300 	adc.w	r3, r3, #0
 80034ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80034f0:	f04f 0000 	mov.w	r0, #0
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	0a50      	lsrs	r0, r2, #9
 80034fa:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80034fe:	1259      	asrs	r1, r3, #9
 8003500:	e9c7 0178 	strd	r0, r1, [r7, #480]	@ 0x1e0
    partial_data6 = (int64_t)((uint64_t)data * (uint64_t)data);
 8003504:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800350e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003512:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003516:	2200      	movs	r2, #0
 8003518:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800351c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003520:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003524:	462b      	mov	r3, r5
 8003526:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800352a:	4642      	mov	r2, r8
 800352c:	fb02 f203 	mul.w	r2, r2, r3
 8003530:	464b      	mov	r3, r9
 8003532:	4621      	mov	r1, r4
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	4622      	mov	r2, r4
 800353c:	4641      	mov	r1, r8
 800353e:	fba2 1201 	umull	r1, r2, r2, r1
 8003542:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003546:	460a      	mov	r2, r1
 8003548:	f8c7 2170 	str.w	r2, [r7, #368]	@ 0x170
 800354c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003550:	4413      	add	r3, r2
 8003552:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8003556:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 800355a:	e9c7 3476 	strd	r3, r4, [r7, #472]	@ 0x1d8
    partial_data2 = ((int64_t)(handle->p11) * (int64_t)(partial_data6)) / 65536;
 800355e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003562:	f993 3247 	ldrsb.w	r3, [r3, #583]	@ 0x247
 8003566:	b25b      	sxtb	r3, r3
 8003568:	17da      	asrs	r2, r3, #31
 800356a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800356e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003572:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003576:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800357a:	462a      	mov	r2, r5
 800357c:	fb02 f203 	mul.w	r2, r2, r3
 8003580:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8003584:	4621      	mov	r1, r4
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	441a      	add	r2, r3
 800358c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003590:	4621      	mov	r1, r4
 8003592:	fba3 1301 	umull	r1, r3, r3, r1
 8003596:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800359a:	460b      	mov	r3, r1
 800359c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80035a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80035aa:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da08      	bge.n	80035c4 <a_bmp390_compensate_pressure+0x708>
 80035b2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80035b6:	1851      	adds	r1, r2, r1
 80035b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035ba:	f143 0300 	adc.w	r3, r3, #0
 80035be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035c4:	f04f 0000 	mov.w	r0, #0
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	0c10      	lsrs	r0, r2, #16
 80035ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80035d2:	1419      	asrs	r1, r3, #16
 80035d4:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * data) / 128;
 80035d8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035e2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035ea:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80035ee:	462a      	mov	r2, r5
 80035f0:	fb02 f203 	mul.w	r2, r2, r3
 80035f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035f8:	4621      	mov	r1, r4
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	441a      	add	r2, r3
 8003600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003604:	4621      	mov	r1, r4
 8003606:	fba3 1301 	umull	r1, r3, r3, r1
 800360a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800360e:	460b      	mov	r3, r1
 8003610:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003614:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003618:	18d3      	adds	r3, r2, r3
 800361a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800361e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8003622:	2b00      	cmp	r3, #0
 8003624:	da07      	bge.n	8003636 <a_bmp390_compensate_pressure+0x77a>
 8003626:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 800362a:	6239      	str	r1, [r7, #32]
 800362c:	f143 0300 	adc.w	r3, r3, #0
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
 8003632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003636:	f04f 0000 	mov.w	r0, #0
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	09d0      	lsrs	r0, r2, #7
 8003640:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8003644:	11d9      	asrs	r1, r3, #7
 8003646:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (offset / 4) + partial_data1 + partial_data5 + partial_data3;
 800364a:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 800364e:	2b00      	cmp	r3, #0
 8003650:	da06      	bge.n	8003660 <a_bmp390_compensate_pressure+0x7a4>
 8003652:	1cd1      	adds	r1, r2, #3
 8003654:	61b9      	str	r1, [r7, #24]
 8003656:	f143 0300 	adc.w	r3, r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003660:	f04f 0000 	mov.w	r0, #0
 8003664:	f04f 0100 	mov.w	r1, #0
 8003668:	0890      	lsrs	r0, r2, #2
 800366a:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800366e:	1099      	asrs	r1, r3, #2
 8003670:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8003674:	1884      	adds	r4, r0, r2
 8003676:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 800367a:	eb41 0303 	adc.w	r3, r1, r3
 800367e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003682:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8003686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800368a:	4621      	mov	r1, r4
 800368c:	1889      	adds	r1, r1, r2
 800368e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8003692:	4629      	mov	r1, r5
 8003694:	eb43 0101 	adc.w	r1, r3, r1
 8003698:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 800369c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80036a0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80036a4:	4621      	mov	r1, r4
 80036a6:	1851      	adds	r1, r2, r1
 80036a8:	6139      	str	r1, [r7, #16]
 80036aa:	4629      	mov	r1, r5
 80036ac:	eb43 0101 	adc.w	r1, r3, r1
 80036b0:	6179      	str	r1, [r7, #20]
 80036b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80036b6:	e9c7 347a 	strd	r3, r4, [r7, #488]	@ 0x1e8
    comp_press = (((uint64_t)partial_data4 * 25) / (uint64_t)1099511627776U);
 80036ba:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	1894      	adds	r4, r2, r2
 80036c4:	60bc      	str	r4, [r7, #8]
 80036c6:	415b      	adcs	r3, r3
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ce:	1814      	adds	r4, r2, r0
 80036d0:	603c      	str	r4, [r7, #0]
 80036d2:	414b      	adcs	r3, r1
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 8900 	ldrd	r8, r9, [r7]
 80036e2:	464c      	mov	r4, r9
 80036e4:	00e3      	lsls	r3, r4, #3
 80036e6:	4644      	mov	r4, r8
 80036e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ec:	4644      	mov	r4, r8
 80036ee:	00e2      	lsls	r2, r4, #3
 80036f0:	4614      	mov	r4, r2
 80036f2:	461d      	mov	r5, r3
 80036f4:	4623      	mov	r3, r4
 80036f6:	181b      	adds	r3, r3, r0
 80036f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036fc:	462b      	mov	r3, r5
 80036fe:	eb41 0303 	adc.w	r3, r1, r3
 8003702:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8003712:	0a0a      	lsrs	r2, r1, #8
 8003714:	2300      	movs	r3, #0
 8003716:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    
    return comp_press;
 800371a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
}
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 8003726:	46bd      	mov	sp, r7
 8003728:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800372c:	4770      	bx	lr
	...

08003730 <bmp390_set_pressure>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <bmp390_set_pressure+0x16>
    {
        return 2;                                                                         /* return error */
 8003742:	2302      	movs	r3, #2
 8003744:	e037      	b.n	80037b6 <bmp390_set_pressure+0x86>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <bmp390_set_pressure+0x24>
    {
        return 3;                                                                         /* return error */
 8003750:	2303      	movs	r3, #3
 8003752:	e030      	b.n	80037b6 <bmp390_set_pressure+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8003754:	f107 020e 	add.w	r2, r7, #14
 8003758:	2301      	movs	r3, #1
 800375a:	211b      	movs	r1, #27
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff f8b7 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <bmp390_set_pressure+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003772:	4813      	ldr	r0, [pc, #76]	@ (80037c0 <bmp390_set_pressure+0x90>)
 8003774:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8003776:	2301      	movs	r3, #1
 8003778:	e01d      	b.n	80037b6 <bmp390_set_pressure+0x86>
    }
    prev &= ~(1 << 0);                                                                    /* clear config */
 800377a:	7bbb      	ldrb	r3, [r7, #14]
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 0;                                                                  /* set config */
 8003784:	7bba      	ldrb	r2, [r7, #14]
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	4313      	orrs	r3, r2
 800378a:	b2db      	uxtb	r3, r3
 800378c:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 800378e:	f107 020e 	add.w	r2, r7, #14
 8003792:	2301      	movs	r3, #1
 8003794:	211b      	movs	r1, #27
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff f8e5 	bl	8002966 <a_bmp390_iic_spi_write>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <bmp390_set_pressure+0x84>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80037ac:	4805      	ldr	r0, [pc, #20]	@ (80037c4 <bmp390_set_pressure+0x94>)
 80037ae:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <bmp390_set_pressure+0x86>
    }
    
    return 0;                                                                             /* success return 0 */
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	08012924 	.word	0x08012924
 80037c4:	0801294c 	.word	0x0801294c

080037c8 <bmp390_set_temperature>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <bmp390_set_temperature+0x16>
    {
        return 2;                                                                         /* return error */
 80037da:	2302      	movs	r3, #2
 80037dc:	e03c      	b.n	8003858 <bmp390_set_temperature+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d001      	beq.n	80037ec <bmp390_set_temperature+0x24>
    {
        return 3;                                                                         /* return error */
 80037e8:	2303      	movs	r3, #3
 80037ea:	e035      	b.n	8003858 <bmp390_set_temperature+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80037ec:	f107 020e 	add.w	r2, r7, #14
 80037f0:	2301      	movs	r3, #1
 80037f2:	211b      	movs	r1, #27
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff f86b 	bl	80028d0 <a_bmp390_iic_spi_read>
 80037fa:	4603      	mov	r3, r0
 80037fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d006      	beq.n	8003812 <bmp390_set_temperature+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800380a:	4815      	ldr	r0, [pc, #84]	@ (8003860 <bmp390_set_temperature+0x98>)
 800380c:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800380e:	2301      	movs	r3, #1
 8003810:	e022      	b.n	8003858 <bmp390_set_temperature+0x90>
    }
    prev &= ~(1 << 1);                                                                    /* clear config */
 8003812:	7bbb      	ldrb	r3, [r7, #14]
 8003814:	f023 0302 	bic.w	r3, r3, #2
 8003818:	b2db      	uxtb	r3, r3
 800381a:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                  /* set config */
 800381c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	b25a      	sxtb	r2, r3
 8003824:	7bbb      	ldrb	r3, [r7, #14]
 8003826:	b25b      	sxtb	r3, r3
 8003828:	4313      	orrs	r3, r2
 800382a:	b25b      	sxtb	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8003830:	f107 020e 	add.w	r2, r7, #14
 8003834:	2301      	movs	r3, #1
 8003836:	211b      	movs	r1, #27
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff f894 	bl	8002966 <a_bmp390_iic_spi_write>
 800383e:	4603      	mov	r3, r0
 8003840:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d006      	beq.n	8003856 <bmp390_set_temperature+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800384e:	4805      	ldr	r0, [pc, #20]	@ (8003864 <bmp390_set_temperature+0x9c>)
 8003850:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <bmp390_set_temperature+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	08012924 	.word	0x08012924
 8003864:	0801294c 	.word	0x0801294c

08003868 <bmp390_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_mode(bmp390_handle_t *handle, bmp390_mode_t mode)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <bmp390_set_mode+0x16>
    {
        return 2;                                                                         /* return error */
 800387a:	2302      	movs	r3, #2
 800387c:	e03c      	b.n	80038f8 <bmp390_set_mode+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8003884:	2b01      	cmp	r3, #1
 8003886:	d001      	beq.n	800388c <bmp390_set_mode+0x24>
    {
        return 3;                                                                         /* return error */
 8003888:	2303      	movs	r3, #3
 800388a:	e035      	b.n	80038f8 <bmp390_set_mode+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 800388c:	f107 020e 	add.w	r2, r7, #14
 8003890:	2301      	movs	r3, #1
 8003892:	211b      	movs	r1, #27
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff f81b 	bl	80028d0 <a_bmp390_iic_spi_read>
 800389a:	4603      	mov	r3, r0
 800389c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d006      	beq.n	80038b2 <bmp390_set_mode+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80038aa:	4815      	ldr	r0, [pc, #84]	@ (8003900 <bmp390_set_mode+0x98>)
 80038ac:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80038ae:	2301      	movs	r3, #1
 80038b0:	e022      	b.n	80038f8 <bmp390_set_mode+0x90>
    }
    prev &= ~(3 << 4);                                                                    /* clear config */
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 4;                                                                    /* set config */
 80038bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	b25a      	sxtb	r2, r3
 80038c4:	7bbb      	ldrb	r3, [r7, #14]
 80038c6:	b25b      	sxtb	r3, r3
 80038c8:	4313      	orrs	r3, r2
 80038ca:	b25b      	sxtb	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80038d0:	f107 020e 	add.w	r2, r7, #14
 80038d4:	2301      	movs	r3, #1
 80038d6:	211b      	movs	r1, #27
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff f844 	bl	8002966 <a_bmp390_iic_spi_write>
 80038de:	4603      	mov	r3, r0
 80038e0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d006      	beq.n	80038f6 <bmp390_set_mode+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80038ee:	4805      	ldr	r0, [pc, #20]	@ (8003904 <bmp390_set_mode+0x9c>)
 80038f0:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <bmp390_set_mode+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	08012924 	.word	0x08012924
 8003904:	0801294c 	.word	0x0801294c

08003908 <bmp390_set_pressure_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <bmp390_set_pressure_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 800391a:	2302      	movs	r3, #2
 800391c:	e037      	b.n	800398e <bmp390_set_pressure_oversampling+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8003924:	2b01      	cmp	r3, #1
 8003926:	d001      	beq.n	800392c <bmp390_set_pressure_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 8003928:	2303      	movs	r3, #3
 800392a:	e030      	b.n	800398e <bmp390_set_pressure_oversampling+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 800392c:	f107 020e 	add.w	r2, r7, #14
 8003930:	2301      	movs	r3, #1
 8003932:	211c      	movs	r1, #28
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fe ffcb 	bl	80028d0 <a_bmp390_iic_spi_read>
 800393a:	4603      	mov	r3, r0
 800393c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <bmp390_set_pressure_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800394a:	4813      	ldr	r0, [pc, #76]	@ (8003998 <bmp390_set_pressure_oversampling+0x90>)
 800394c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800394e:	2301      	movs	r3, #1
 8003950:	e01d      	b.n	800398e <bmp390_set_pressure_oversampling+0x86>
    }
    prev &= ~(7 << 0);                                                               /* clear config */
 8003952:	7bbb      	ldrb	r3, [r7, #14]
 8003954:	f023 0307 	bic.w	r3, r3, #7
 8003958:	b2db      	uxtb	r3, r3
 800395a:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 0;                                                       /* set config */
 800395c:	7bba      	ldrb	r2, [r7, #14]
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	4313      	orrs	r3, r2
 8003962:	b2db      	uxtb	r3, r3
 8003964:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 8003966:	f107 020e 	add.w	r2, r7, #14
 800396a:	2301      	movs	r3, #1
 800396c:	211c      	movs	r1, #28
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fe fff9 	bl	8002966 <a_bmp390_iic_spi_write>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <bmp390_set_pressure_oversampling+0x84>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003984:	4805      	ldr	r0, [pc, #20]	@ (800399c <bmp390_set_pressure_oversampling+0x94>)
 8003986:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <bmp390_set_pressure_oversampling+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	08012974 	.word	0x08012974
 800399c:	08012998 	.word	0x08012998

080039a0 <bmp390_set_temperature_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <bmp390_set_temperature_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 80039b2:	2302      	movs	r3, #2
 80039b4:	e03c      	b.n	8003a30 <bmp390_set_temperature_oversampling+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d001      	beq.n	80039c4 <bmp390_set_temperature_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 80039c0:	2303      	movs	r3, #3
 80039c2:	e035      	b.n	8003a30 <bmp390_set_temperature_oversampling+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 80039c4:	f107 020e 	add.w	r2, r7, #14
 80039c8:	2301      	movs	r3, #1
 80039ca:	211c      	movs	r1, #28
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fe ff7f 	bl	80028d0 <a_bmp390_iic_spi_read>
 80039d2:	4603      	mov	r3, r0
 80039d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <bmp390_set_temperature_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80039e2:	4815      	ldr	r0, [pc, #84]	@ (8003a38 <bmp390_set_temperature_oversampling+0x98>)
 80039e4:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80039e6:	2301      	movs	r3, #1
 80039e8:	e022      	b.n	8003a30 <bmp390_set_temperature_oversampling+0x90>
    }
    prev &= ~(7 << 3);                                                               /* clear config */
 80039ea:	7bbb      	ldrb	r3, [r7, #14]
 80039ec:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 3;                                                       /* set config */
 80039f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	b25a      	sxtb	r2, r3
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	4313      	orrs	r3, r2
 8003a02:	b25b      	sxtb	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 8003a08:	f107 020e 	add.w	r2, r7, #14
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	211c      	movs	r1, #28
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7fe ffa8 	bl	8002966 <a_bmp390_iic_spi_write>
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <bmp390_set_temperature_oversampling+0x8e>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003a26:	4805      	ldr	r0, [pc, #20]	@ (8003a3c <bmp390_set_temperature_oversampling+0x9c>)
 8003a28:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <bmp390_set_temperature_oversampling+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	08012974 	.word	0x08012974
 8003a3c:	08012998 	.word	0x08012998

08003a40 <bmp390_set_odr>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_odr(bmp390_handle_t *handle, bmp390_odr_t odr)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <bmp390_set_odr+0x16>
    {
        return 2;                                                                    /* return error */
 8003a52:	2302      	movs	r3, #2
 8003a54:	e037      	b.n	8003ac6 <bmp390_set_odr+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d001      	beq.n	8003a64 <bmp390_set_odr+0x24>
    {
        return 3;                                                                    /* return error */
 8003a60:	2303      	movs	r3, #3
 8003a62:	e030      	b.n	8003ac6 <bmp390_set_odr+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);        /* read config */
 8003a64:	f107 020e 	add.w	r2, r7, #14
 8003a68:	2301      	movs	r3, #1
 8003a6a:	211d      	movs	r1, #29
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7fe ff2f 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003a72:	4603      	mov	r3, r0
 8003a74:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d006      	beq.n	8003a8a <bmp390_set_odr+0x4a>
    {
        handle->debug_print("bmp390: get odr register failed.\n");                   /* get odr register failed */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003a82:	4813      	ldr	r0, [pc, #76]	@ (8003ad0 <bmp390_set_odr+0x90>)
 8003a84:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8003a86:	2301      	movs	r3, #1
 8003a88:	e01d      	b.n	8003ac6 <bmp390_set_odr+0x86>
    }
    
    prev &= ~(31 << 0);                                                              /* clear config */
 8003a8a:	7bbb      	ldrb	r3, [r7, #14]
 8003a8c:	f023 031f 	bic.w	r3, r3, #31
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	73bb      	strb	r3, [r7, #14]
    prev |= odr << 0;                                                                /* set config */
 8003a94:	7bba      	ldrb	r2, [r7, #14]
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);       /* write config */
 8003a9e:	f107 020e 	add.w	r2, r7, #14
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	211d      	movs	r1, #29
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe ff5d 	bl	8002966 <a_bmp390_iic_spi_write>
 8003aac:	4603      	mov	r3, r0
 8003aae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <bmp390_set_odr+0x84>
    {
        handle->debug_print("bmp390: set odr register failed.\n");                   /* set odr register failed */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003abc:	4805      	ldr	r0, [pc, #20]	@ (8003ad4 <bmp390_set_odr+0x94>)
 8003abe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <bmp390_set_odr+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	080129bc 	.word	0x080129bc
 8003ad4:	080129e0 	.word	0x080129e0

08003ad8 <a_bmp390_close>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
static uint8_t a_bmp390_close(bmp390_handle_t *handle)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                        /* if iic interface */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <a_bmp390_close+0x32>
    {
        if (handle->iic_deinit() != 0)                                  /* close iic */
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8003af0:	4798      	blx	r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d006      	beq.n	8003b06 <a_bmp390_close+0x2e>
        {
            handle->debug_print("bmp390: iic deinit failed.\n");        /* iic deinit failed */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003afe:	480c      	ldr	r0, [pc, #48]	@ (8003b30 <a_bmp390_close+0x58>)
 8003b00:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 8003b02:	2301      	movs	r3, #1
 8003b04:	e010      	b.n	8003b28 <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 8003b06:	2300      	movs	r3, #0
 8003b08:	e00e      	b.n	8003b28 <a_bmp390_close+0x50>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                                  /* close spi */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003b10:	4798      	blx	r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <a_bmp390_close+0x4e>
        {
            handle->debug_print("bmp390: spi deinit failed.\n");        /* spi deinit failed */
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003b1e:	4805      	ldr	r0, [pc, #20]	@ (8003b34 <a_bmp390_close+0x5c>)
 8003b20:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 8003b26:	2300      	movs	r3, #0
        }
    }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	08012a78 	.word	0x08012a78
 8003b34:	08012a94 	.word	0x08012a94

08003b38 <bmp390_init>:
 *            - 5 reset failed
 *            - 6 get calibration failed
 * @note      none
 */
uint8_t bmp390_init(bmp390_handle_t *handle)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
    uint8_t id;
    uint8_t reg;
  
    if (handle == NULL)                                                              /* check handle */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <bmp390_init+0x12>
    {
        return 2;                                                                    /* return error */
 8003b46:	2302      	movs	r3, #2
 8003b48:	e107      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->debug_print == NULL)                                                 /* check debug_print */
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <bmp390_init+0x20>
    {
        return 3;                                                                    /* return error */
 8003b54:	2303      	movs	r3, #3
 8003b56:	e100      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->iic_init == NULL)                                                    /* check iic_init */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <bmp390_init+0x38>
    {
        handle->debug_print("bmp390: iic_init is null.\n");                          /* iic_init is null */
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003b68:	487e      	ldr	r0, [pc, #504]	@ (8003d64 <bmp390_init+0x22c>)
 8003b6a:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e0f4      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->iic_deinit == NULL)                                                  /* check iic_init */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <bmp390_init+0x50>
    {
        handle->debug_print("bmp390: iic_deinit is null.\n");                        /* iic_deinit is null */
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003b80:	4879      	ldr	r0, [pc, #484]	@ (8003d68 <bmp390_init+0x230>)
 8003b82:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0e8      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->iic_read == NULL)                                                    /* check iic_read */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <bmp390_init+0x68>
    {
        handle->debug_print("bmp390: iic_read is null.\n");                          /* iic_read is null */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003b98:	4874      	ldr	r0, [pc, #464]	@ (8003d6c <bmp390_init+0x234>)
 8003b9a:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e0dc      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->iic_write == NULL)                                                   /* check iic_write */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <bmp390_init+0x80>
    {
        handle->debug_print("bmp390: iic_write is null.\n");                         /* iic_write is null */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003bb0:	486f      	ldr	r0, [pc, #444]	@ (8003d70 <bmp390_init+0x238>)
 8003bb2:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0d0      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->spi_init == NULL)                                                    /* check spi_init */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <bmp390_init+0x98>
    {
        handle->debug_print("bmp390: spi_init is null.\n");                          /* spi_init is null */
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003bc8:	486a      	ldr	r0, [pc, #424]	@ (8003d74 <bmp390_init+0x23c>)
 8003bca:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e0c4      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->spi_deinit == NULL)                                                  /* check spi_deinit */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <bmp390_init+0xb0>
    {
        handle->debug_print("bmp390: spi_deinit is null.\n");                        /* spi_deinit is null */
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003be0:	4865      	ldr	r0, [pc, #404]	@ (8003d78 <bmp390_init+0x240>)
 8003be2:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8003be4:	2303      	movs	r3, #3
 8003be6:	e0b8      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->spi_read == NULL)                                                    /* check spi_read */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <bmp390_init+0xc8>
    {
        handle->debug_print("bmp390: spi_read is null.\n");                          /* spi_read is null */
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003bf8:	4860      	ldr	r0, [pc, #384]	@ (8003d7c <bmp390_init+0x244>)
 8003bfa:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e0ac      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->spi_write == NULL)                                                   /* check spi_write */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <bmp390_init+0xe0>
    {
        handle->debug_print("bmp390: spi_write is null.\n");                         /* spi_write is null */
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003c10:	485b      	ldr	r0, [pc, #364]	@ (8003d80 <bmp390_init+0x248>)
 8003c12:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0a0      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (handle->delay_ms == NULL)                                                    /* check delay_ms */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <bmp390_init+0xf8>
    {
        handle->debug_print("bmp390: delay_ms is null.\n");                          /* delay_ms is null */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003c28:	4856      	ldr	r0, [pc, #344]	@ (8003d84 <bmp390_init+0x24c>)
 8003c2a:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e094      	b.n	8003d5a <bmp390_init+0x222>
    }
    
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                     /* if iic interface */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10d      	bne.n	8003c56 <bmp390_init+0x11e>
    {
        if (handle->iic_init() != 0)                                                 /* initialize iic bus */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003c40:	4798      	blx	r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d014      	beq.n	8003c72 <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: iic init failed.\n");                       /* iic init failed */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003c4e:	484e      	ldr	r0, [pc, #312]	@ (8003d88 <bmp390_init+0x250>)
 8003c50:	4798      	blx	r3
            
            return 1;                                                                /* return error */
 8003c52:	2301      	movs	r3, #1
 8003c54:	e081      	b.n	8003d5a <bmp390_init+0x222>
        }
    }
    else
    {
        if (handle->spi_init() != 0)                                                 /* initialize spi bus */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8003c5c:	4798      	blx	r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d006      	beq.n	8003c72 <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: spi init failed.\n");                       /* spi init failed */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003c6a:	4848      	ldr	r0, [pc, #288]	@ (8003d8c <bmp390_init+0x254>)
 8003c6c:	4798      	blx	r3
           
            return 1;                                                                /* return error */
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e073      	b.n	8003d5a <bmp390_init+0x222>
        }
    }
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_CHIP_ID, (uint8_t *)&id, 1) != 0)   /* read chip id */
 8003c72:	f107 020f 	add.w	r2, r7, #15
 8003c76:	2301      	movs	r3, #1
 8003c78:	2100      	movs	r1, #0
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fe fe28 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <bmp390_init+0x162>
    {
        handle->debug_print("bmp390: read chip id failed.\n");                       /* read chip id failed */
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003c8c:	4840      	ldr	r0, [pc, #256]	@ (8003d90 <bmp390_init+0x258>)
 8003c8e:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ff21 	bl	8003ad8 <a_bmp390_close>
        
        return 4;                                                                    /* return error */
 8003c96:	2304      	movs	r3, #4
 8003c98:	e05f      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (id != 0x60)                                                                  /* check chip id */
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b60      	cmp	r3, #96	@ 0x60
 8003c9e:	d009      	beq.n	8003cb4 <bmp390_init+0x17c>
    {
        handle->debug_print("bmp390: id is invalid.\n");                             /* id is invalid */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003ca6:	483b      	ldr	r0, [pc, #236]	@ (8003d94 <bmp390_init+0x25c>)
 8003ca8:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ff14 	bl	8003ad8 <a_bmp390_close>
        
        return 4;         
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	e052      	b.n	8003d5a <bmp390_init+0x222>
    }                                                                                /* return error */
    reg = 0xB6;                                                                      /* set command */
 8003cb4:	23b6      	movs	r3, #182	@ 0xb6
 8003cb6:	73bb      	strb	r3, [r7, #14]
    if (a_bmp390_iic_spi_write(handle, BMP390_REG_CMD, (uint8_t *)&reg, 1) != 0)     /* write command */
 8003cb8:	f107 020e 	add.w	r2, r7, #14
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	217e      	movs	r1, #126	@ 0x7e
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fe fe50 	bl	8002966 <a_bmp390_iic_spi_write>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d009      	beq.n	8003ce0 <bmp390_init+0x1a8>
    {
        handle->debug_print("bmp390: soft rest failed.\n");                          /* soft rest failed */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003cd2:	4831      	ldr	r0, [pc, #196]	@ (8003d98 <bmp390_init+0x260>)
 8003cd4:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fefe 	bl	8003ad8 <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8003cdc:	2305      	movs	r3, #5
 8003cde:	e03c      	b.n	8003d5a <bmp390_init+0x222>
    }
    handle->delay_ms(10);                                                            /* delay 10 ms */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003ce6:	200a      	movs	r0, #10
 8003ce8:	4798      	blx	r3
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_ERR_REG, (uint8_t *)&reg, 1) != 0)  /* read reg */
 8003cea:	f107 020e 	add.w	r2, r7, #14
 8003cee:	2301      	movs	r3, #1
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fe fdec 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <bmp390_init+0x1da>
    {
        handle->debug_print("bmp390: get err reg failed.\n");                        /* return error */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003d04:	4825      	ldr	r0, [pc, #148]	@ (8003d9c <bmp390_init+0x264>)
 8003d06:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fee5 	bl	8003ad8 <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8003d0e:	2305      	movs	r3, #5
 8003d10:	e023      	b.n	8003d5a <bmp390_init+0x222>
    }
    if ((reg & 0x07) != 0)                                                           /* check running status */
 8003d12:	7bbb      	ldrb	r3, [r7, #14]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d009      	beq.n	8003d30 <bmp390_init+0x1f8>
    {
        handle->debug_print("bmp390: find running error.\n");                        /* find running error */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003d22:	481f      	ldr	r0, [pc, #124]	@ (8003da0 <bmp390_init+0x268>)
 8003d24:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fed6 	bl	8003ad8 <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	e014      	b.n	8003d5a <bmp390_init+0x222>
    }
    if (a_bmp390_get_calibration_data(handle) != 0)                                  /* get calibration data */
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fe fe6d 	bl	8002a10 <a_bmp390_get_calibration_data>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <bmp390_init+0x218>
    {
        handle->debug_print("bmp390: get calibration data error.\n");                /* get calibration data error */
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003d42:	4818      	ldr	r0, [pc, #96]	@ (8003da4 <bmp390_init+0x26c>)
 8003d44:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff fec6 	bl	8003ad8 <a_bmp390_close>
        
        return 6;                                                                    /* return error */
 8003d4c:	2306      	movs	r3, #6
 8003d4e:	e004      	b.n	8003d5a <bmp390_init+0x222>
    }
    handle->inited = 1;                                                              /* flag finish initialization */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
     
    return 0;                                                                        /* success return 0 */
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	08012ab0 	.word	0x08012ab0
 8003d68:	08012acc 	.word	0x08012acc
 8003d6c:	08012aec 	.word	0x08012aec
 8003d70:	08012b08 	.word	0x08012b08
 8003d74:	08012b24 	.word	0x08012b24
 8003d78:	08012b40 	.word	0x08012b40
 8003d7c:	08012b60 	.word	0x08012b60
 8003d80:	08012b7c 	.word	0x08012b7c
 8003d84:	08012b98 	.word	0x08012b98
 8003d88:	08012bb4 	.word	0x08012bb4
 8003d8c:	08012bd0 	.word	0x08012bd0
 8003d90:	08012bec 	.word	0x08012bec
 8003d94:	08012c0c 	.word	0x08012c0c
 8003d98:	08012c24 	.word	0x08012c24
 8003d9c:	08012c40 	.word	0x08012c40
 8003da0:	08012c60 	.word	0x08012c60
 8003da4:	08012c80 	.word	0x08012c80

08003da8 <bmp390_read_temperature_pressure>:
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t bmp390_read_temperature_pressure(bmp390_handle_t *handle, uint32_t *temperature_raw, float *temperature_c, 
                                         uint32_t *pressure_raw, float *pressure_pa)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b090      	sub	sp, #64	@ 0x40
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t buf[3];
    
    if (handle == NULL)                                                                       /* check handle */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <bmp390_read_temperature_pressure+0x18>
    {
        return 2;                                                                             /* return error */
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e1fa      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
    }
    if (handle->inited != 1)                                                                  /* check handle initialization */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d001      	beq.n	8003dce <bmp390_read_temperature_pressure+0x26>
    {
        return 3;                                                                             /* return error */
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1f3      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_FIFO_CONFIG_1, (uint8_t *)&prev, 1);       /* read config */
 8003dce:	f107 0217 	add.w	r2, r7, #23
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	2117      	movs	r1, #23
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7fe fd7a 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 8003de2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d006      	beq.n	8003df8 <bmp390_read_temperature_pressure+0x50>
    {
        handle->debug_print("bmp390: get fifo config 1 register failed.\n");                  /* get fifo config 1 register failed */
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003df0:	48b1      	ldr	r0, [pc, #708]	@ (80040b8 <bmp390_read_temperature_pressure+0x310>)
 8003df2:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8003df4:	2301      	movs	r3, #1
 8003df6:	e1de      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
    }
    if ((prev & 0x01) != 0)                                                                   /* check fifo mode */
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d006      	beq.n	8003e10 <bmp390_read_temperature_pressure+0x68>
    {
        handle->debug_print("bmp390: fifo mode can't use this function.\n");                  /* fifo mode can't use this function */
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003e08:	48ac      	ldr	r0, [pc, #688]	@ (80040bc <bmp390_read_temperature_pressure+0x314>)
 8003e0a:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e1d2      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
    }
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);            /* read config */
 8003e10:	f107 0217 	add.w	r2, r7, #23
 8003e14:	2301      	movs	r3, #1
 8003e16:	211b      	movs	r1, #27
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7fe fd59 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 8003e24:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <bmp390_read_temperature_pressure+0x92>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                       /* get pwr ctrl register failed */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003e32:	48a3      	ldr	r0, [pc, #652]	@ (80040c0 <bmp390_read_temperature_pressure+0x318>)
 8003e34:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1bd      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
    }
    if (((prev >> 4) & 0x03) == 0x03)                                                         /* normal mode */
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	f040 80a0 	bne.w	8003f8a <bmp390_read_temperature_pressure+0x1e2>
    {
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);          /* read config */
 8003e4a:	f107 0217 	add.w	r2, r7, #23
 8003e4e:	2301      	movs	r3, #1
 8003e50:	2103      	movs	r1, #3
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7fe fd3c 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 8003e5e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <bmp390_read_temperature_pressure+0xcc>
        {
            handle->debug_print("bmp390: get status register failed.\n");                     /* get status register failed */
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003e6c:	4895      	ldr	r0, [pc, #596]	@ (80040c4 <bmp390_read_temperature_pressure+0x31c>)
 8003e6e:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8003e70:	2301      	movs	r3, #1
 8003e72:	e1a0      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
        }
        if ((prev & (1 << 6)) != 0)                                                           /* data is ready */
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d03d      	beq.n	8003efa <bmp390_read_temperature_pressure+0x152>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);        /* read raw data */
 8003e7e:	f107 0214 	add.w	r2, r7, #20
 8003e82:	2303      	movs	r3, #3
 8003e84:	2107      	movs	r1, #7
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f7fe fd22 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8003e92:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d006      	beq.n	8003ea8 <bmp390_read_temperature_pressure+0x100>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003ea0:	4889      	ldr	r0, [pc, #548]	@ (80040c8 <bmp390_read_temperature_pressure+0x320>)
 8003ea2:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e186      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
            }
            *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];       /* get data */
 8003ea8:	7dbb      	ldrb	r3, [r7, #22]
 8003eaa:	041a      	lsls	r2, r3, #16
 8003eac:	7d7b      	ldrb	r3, [r7, #21]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	7d3a      	ldrb	r2, [r7, #20]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_temperature(handle, *temperature_raw);               /* compensate temperature */
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7fe ff13 	bl	8002cec <a_bmp390_compensate_temperature>
 8003ec6:	e9c7 0108 	strd	r0, r1, [r7, #32]
            *temperature_c = (float)((double)output / 100.0);                                 /* get converted temperature */
 8003eca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003ece:	f7fc fb85 	bl	80005dc <__aeabi_l2d>
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	4b7d      	ldr	r3, [pc, #500]	@ (80040cc <bmp390_read_temperature_pressure+0x324>)
 8003ed8:	f7fc fcd8 	bl	800088c <__aeabi_ddiv>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f7fc fea0 	bl	8000c28 <__aeabi_d2f>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
        {
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
           
            return 1;                                                                         /* return error */
        }
        if ((prev & (1 << 5)) != 0)                                                           /* data is ready */
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d041      	beq.n	8003f7c <bmp390_read_temperature_pressure+0x1d4>
 8003ef8:	e006      	b.n	8003f08 <bmp390_read_temperature_pressure+0x160>
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003f00:	4873      	ldr	r0, [pc, #460]	@ (80040d0 <bmp390_read_temperature_pressure+0x328>)
 8003f02:	4798      	blx	r3
            return 1;                                                                         /* return error */
 8003f04:	2301      	movs	r3, #1
 8003f06:	e156      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);        /* read data */
 8003f08:	f107 0214 	add.w	r2, r7, #20
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	2104      	movs	r1, #4
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7fe fcdd 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8003f1c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <bmp390_read_temperature_pressure+0x18a>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003f2a:	4867      	ldr	r0, [pc, #412]	@ (80040c8 <bmp390_read_temperature_pressure+0x320>)
 8003f2c:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e141      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
            }
            *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];          /* get data */
 8003f32:	7dbb      	ldrb	r3, [r7, #22]
 8003f34:	041a      	lsls	r2, r3, #16
 8003f36:	7d7b      	ldrb	r3, [r7, #21]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	7d3a      	ldrb	r2, [r7, #20]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_pressure(handle, *pressure_raw);                     /* compensate pressure */
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7fe ffb6 	bl	8002ebc <a_bmp390_compensate_pressure>
 8003f50:	e9c7 0106 	strd	r0, r1, [r7, #24]
            *pressure_pa = (float)((double)output / 100.0);                                   /* get converted pressure */
 8003f54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f58:	f7fc fb40 	bl	80005dc <__aeabi_l2d>
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	4b5a      	ldr	r3, [pc, #360]	@ (80040cc <bmp390_read_temperature_pressure+0x324>)
 8003f62:	f7fc fc93 	bl	800088c <__aeabi_ddiv>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f7fc fe5b 	bl	8000c28 <__aeabi_d2f>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f76:	601a      	str	r2, [r3, #0]
            
            return 0;                                                                         /* success return 0 */
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e11c      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
        }
        else
        {
            handle->debug_print("bmp390: pressure data is not ready.\n");                     /* pressure data is not ready */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003f82:	4854      	ldr	r0, [pc, #336]	@ (80040d4 <bmp390_read_temperature_pressure+0x32c>)
 8003f84:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8003f86:	2301      	movs	r3, #1
 8003f88:	e115      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
        }
    }
    else if (((prev >> 4) & 0x03) == 0x00)                                                    /* force mode */
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 8108 	bne.w	80041aa <bmp390_read_temperature_pressure+0x402>
    {
        uint16_t cnt = 5000;
 8003f9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003f9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8003fa0:	f107 0217 	add.w	r2, r7, #23
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	211b      	movs	r1, #27
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7fe fc91 	bl	80028d0 <a_bmp390_iic_spi_read>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 8003fb4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d006      	beq.n	8003fca <bmp390_read_temperature_pressure+0x222>
        {
            handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003fc2:	483f      	ldr	r0, [pc, #252]	@ (80040c0 <bmp390_read_temperature_pressure+0x318>)
 8003fc4:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0f5      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
        }
        prev &= ~(0x03 << 4);                                                                 /* clear 4-5 bits */
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	75fb      	strb	r3, [r7, #23]
        prev |= 0x01 << 4;                                                                    /* set bit 4 */
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	f043 0310 	orr.w	r3, r3, #16
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	75fb      	strb	r3, [r7, #23]
        res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8003fde:	f107 0217 	add.w	r2, r7, #23
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	211b      	movs	r1, #27
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7fe fcbd 	bl	8002966 <a_bmp390_iic_spi_write>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 8003ff2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <bmp390_read_temperature_pressure+0x260>
        {
            handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8004000:	4835      	ldr	r0, [pc, #212]	@ (80040d8 <bmp390_read_temperature_pressure+0x330>)
 8004002:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8004004:	2301      	movs	r3, #1
 8004006:	e0d6      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
        }
        
        while (1)                                                                             /* loop */
        {
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 8004008:	f107 0217 	add.w	r2, r7, #23
 800400c:	2301      	movs	r3, #1
 800400e:	2103      	movs	r1, #3
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7fe fc5d 	bl	80028d0 <a_bmp390_iic_spi_read>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 800401c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004020:	2b00      	cmp	r3, #0
 8004022:	d006      	beq.n	8004032 <bmp390_read_temperature_pressure+0x28a>
            {
                handle->debug_print("bmp390: get status register failed.\n");                 /* get status register failed */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800402a:	4826      	ldr	r0, [pc, #152]	@ (80040c4 <bmp390_read_temperature_pressure+0x31c>)
 800402c:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 800402e:	2301      	movs	r3, #1
 8004030:	e0c1      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
            }
            if ((prev & (1 << 6)) != 0)                                                       /* data is ready */
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d04f      	beq.n	80040dc <bmp390_read_temperature_pressure+0x334>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);    /* read raw data */
 800403c:	f107 0214 	add.w	r2, r7, #20
 8004040:	2303      	movs	r3, #3
 8004042:	2107      	movs	r1, #7
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7fe fc43 	bl	80028d0 <a_bmp390_iic_spi_read>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 8004050:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <bmp390_read_temperature_pressure+0x2be>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800405e:	481a      	ldr	r0, [pc, #104]	@ (80040c8 <bmp390_read_temperature_pressure+0x320>)
 8004060:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 8004062:	2301      	movs	r3, #1
 8004064:	e0a7      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
                }
                *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];   /* get data */
 8004066:	7dbb      	ldrb	r3, [r7, #22]
 8004068:	041a      	lsls	r2, r3, #16
 800406a:	7d7b      	ldrb	r3, [r7, #21]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	4313      	orrs	r3, r2
 8004070:	7d3a      	ldrb	r2, [r7, #20]
 8004072:	431a      	orrs	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_temperature(handle, *temperature_raw);           /* compensate temperature */
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4619      	mov	r1, r3
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f7fe fe34 	bl	8002cec <a_bmp390_compensate_temperature>
 8004084:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                *temperature_c = (float)((double)output / 100.0);                             /* get converted temperature */
 8004088:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800408c:	f7fc faa6 	bl	80005dc <__aeabi_l2d>
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <bmp390_read_temperature_pressure+0x324>)
 8004096:	f7fc fbf9 	bl	800088c <__aeabi_ddiv>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4610      	mov	r0, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	f7fc fdc1 	bl	8000c28 <__aeabi_d2f>
 80040a6:	4602      	mov	r2, r0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	601a      	str	r2, [r3, #0]
                
                break;                                                                        /* break */
 80040ac:	bf00      	nop
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
               
                return 1;                                                                     /* return error */
            }
        }
        cnt = 5000;                                                                           /* set cnt */
 80040ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80040b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80040b4:	e026      	b.n	8004104 <bmp390_read_temperature_pressure+0x35c>
 80040b6:	bf00      	nop
 80040b8:	080127b4 	.word	0x080127b4
 80040bc:	08012ca8 	.word	0x08012ca8
 80040c0:	08012924 	.word	0x08012924
 80040c4:	08012658 	.word	0x08012658
 80040c8:	08012cd4 	.word	0x08012cd4
 80040cc:	40590000 	.word	0x40590000
 80040d0:	08012cf8 	.word	0x08012cf8
 80040d4:	08012d3c 	.word	0x08012d3c
 80040d8:	0801294c 	.word	0x0801294c
                if (cnt != 0)                                                                 /* check cnt */
 80040dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <bmp390_read_temperature_pressure+0x34c>
                    cnt--;                                                                    /* cnt-- */
 80040e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80040e4:	3b01      	subs	r3, #1
 80040e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80040ee:	2001      	movs	r0, #1
 80040f0:	4798      	blx	r3
                    continue;                                                                 /* continue */
 80040f2:	e006      	b.n	8004102 <bmp390_read_temperature_pressure+0x35a>
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80040fa:	4831      	ldr	r0, [pc, #196]	@ (80041c0 <bmp390_read_temperature_pressure+0x418>)
 80040fc:	4798      	blx	r3
                return 1;                                                                     /* return error */
 80040fe:	2301      	movs	r3, #1
 8004100:	e059      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 8004102:	e781      	b.n	8004008 <bmp390_read_temperature_pressure+0x260>
        
        while (1)                                                                             /* loop */
        {
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d039      	beq.n	8004182 <bmp390_read_temperature_pressure+0x3da>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);    /* read raw data */
 800410e:	f107 0214 	add.w	r2, r7, #20
 8004112:	2303      	movs	r3, #3
 8004114:	2104      	movs	r1, #4
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f7fe fbda 	bl	80028d0 <a_bmp390_iic_spi_read>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 8004122:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <bmp390_read_temperature_pressure+0x390>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8004130:	4824      	ldr	r0, [pc, #144]	@ (80041c4 <bmp390_read_temperature_pressure+0x41c>)
 8004132:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 8004134:	2301      	movs	r3, #1
 8004136:	e03e      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
                }
                *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];      /* get data */
 8004138:	7dbb      	ldrb	r3, [r7, #22]
 800413a:	041a      	lsls	r2, r3, #16
 800413c:	7d7b      	ldrb	r3, [r7, #21]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	4313      	orrs	r3, r2
 8004142:	7d3a      	ldrb	r2, [r7, #20]
 8004144:	431a      	orrs	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_pressure(handle, *pressure_raw);                 /* compensate pressure */
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4619      	mov	r1, r3
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7fe feb3 	bl	8002ebc <a_bmp390_compensate_pressure>
 8004156:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                *pressure_pa = (float)((double)output / 100.0);                               /* get converted pressure */
 800415a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800415e:	f7fc fa3d 	bl	80005dc <__aeabi_l2d>
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <bmp390_read_temperature_pressure+0x420>)
 8004168:	f7fc fb90 	bl	800088c <__aeabi_ddiv>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	f7fc fd58 	bl	8000c28 <__aeabi_d2f>
 8004178:	4602      	mov	r2, r0
 800417a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800417c:	601a      	str	r2, [r3, #0]
                
                return 0;                                                                     /* success return 0 */
 800417e:	2300      	movs	r3, #0
 8004180:	e019      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
            }
            else
            {
                if (cnt != 0)                                                                 /* check cnt */
 8004182:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <bmp390_read_temperature_pressure+0x3f2>
                {
                    cnt--;                                                                    /* cnt-- */
 8004188:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800418a:	3b01      	subs	r3, #1
 800418c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8004194:	2001      	movs	r0, #1
 8004196:	4798      	blx	r3
                    
                    continue;                                                                 /* continue */
 8004198:	e006      	b.n	80041a8 <bmp390_read_temperature_pressure+0x400>
                }
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80041a0:	4807      	ldr	r0, [pc, #28]	@ (80041c0 <bmp390_read_temperature_pressure+0x418>)
 80041a2:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 80041a4:	2301      	movs	r3, #1
 80041a6:	e006      	b.n	80041b6 <bmp390_read_temperature_pressure+0x40e>
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 80041a8:	e7ac      	b.n	8004104 <bmp390_read_temperature_pressure+0x35c>
            }
        }
    }
    else
    {
        handle->debug_print("bmp390: mode is invalid.\n");                                    /* mode is invalid */
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80041b0:	4806      	ldr	r0, [pc, #24]	@ (80041cc <bmp390_read_temperature_pressure+0x424>)
 80041b2:	4798      	blx	r3
           
        return 1;                                                                             /* return error */
 80041b4:	2301      	movs	r3, #1
    }
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3740      	adds	r7, #64	@ 0x40
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	08012cf8 	.word	0x08012cf8
 80041c4:	08012cd4 	.word	0x08012cd4
 80041c8:	40590000 	.word	0x40590000
 80041cc:	08012d20 	.word	0x08012d20

080041d0 <bmp390_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_addr_pin(bmp390_handle_t *handle, bmp390_address_t addr_pin)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <bmp390_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 80041e2:	2302      	movs	r3, #2
 80041e4:	e003      	b.n	80041ee <bmp390_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set iic address */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <bmp390_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_interface(bmp390_handle_t *handle, bmp390_interface_t interface) 
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                        /* check handle */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <bmp390_set_interface+0x16>
    {
        return 2;                              /* return error */
 800420c:	2302      	movs	r3, #2
 800420e:	e004      	b.n	800421a <bmp390_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;      /* set interface */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
    
    return 0;                                  /* success return 0 */
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <check_flight_phase>:
#include <math.h>
#include "main.h" // For HAL_GetTick()
#include "parameters.h" // Include for constants


void check_flight_phase(flight_fsm_t *fsm_state, vf32_t acc_data, vf32_t gyro_data, estimation_output_t state_data, const control_settings_t *settings, bool launch_pin_high) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b08e      	sub	sp, #56	@ 0x38
 800422c:	af00      	add	r7, sp, #0
 800422e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004230:	eef0 4a41 	vmov.f32	s9, s2
 8004234:	eeb0 5a61 	vmov.f32	s10, s3
 8004238:	eef0 5a42 	vmov.f32	s11, s4
 800423c:	eeb0 6a62 	vmov.f32	s12, s5
 8004240:	eef0 6a43 	vmov.f32	s13, s6
 8004244:	eeb0 7a63 	vmov.f32	s14, s7
 8004248:	eef0 7a44 	vmov.f32	s15, s8
 800424c:	6079      	str	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	ed87 0a08 	vstr	s0, [r7, #32]
 8004254:	edc7 0a09 	vstr	s1, [r7, #36]	@ 0x24
 8004258:	edc7 4a0a 	vstr	s9, [r7, #40]	@ 0x28
 800425c:	ed87 5a05 	vstr	s10, [r7, #20]
 8004260:	edc7 5a06 	vstr	s11, [r7, #24]
 8004264:	ed87 6a07 	vstr	s12, [r7, #28]
 8004268:	edc7 6a02 	vstr	s13, [r7, #8]
 800426c:	ed87 7a03 	vstr	s14, [r7, #12]
 8004270:	edc7 7a04 	vstr	s15, [r7, #16]
 8004274:	70fb      	strb	r3, [r7, #3]
    // Save old FSM State
    flight_fsm_e old_fsm_state = fsm_state->flight_state;
 8004276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Check FSM State
    switch (fsm_state->flight_state) {
 800427e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b04      	cmp	r3, #4
 8004284:	d85f      	bhi.n	8004346 <check_flight_phase+0x11e>
 8004286:	a201      	add	r2, pc, #4	@ (adr r2, 800428c <check_flight_phase+0x64>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	080042a1 	.word	0x080042a1
 8004290:	080042c7 	.word	0x080042c7
 8004294:	080042e7 	.word	0x080042e7
 8004298:	08004307 	.word	0x08004307
 800429c:	08004327 	.word	0x08004327
        case READY:
            check_ready_phase(fsm_state, acc_data, settings, launch_pin_high);
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	edd7 6a08 	vldr	s13, [r7, #32]
 80042a6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80042aa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80042ae:	461a      	mov	r2, r3
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	eeb0 0a66 	vmov.f32	s0, s13
 80042b6:	eef0 0a47 	vmov.f32	s1, s14
 80042ba:	eeb0 1a67 	vmov.f32	s2, s15
 80042be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80042c0:	f000 f89c 	bl	80043fc <check_ready_phase>
            break;
 80042c4:	e040      	b.n	8004348 <check_flight_phase+0x120>
        case THRUSTING:
            check_thrusting_phase(fsm_state, state_data);
 80042c6:	edd7 6a02 	vldr	s13, [r7, #8]
 80042ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80042ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80042d2:	eeb0 0a66 	vmov.f32	s0, s13
 80042d6:	eef0 0a47 	vmov.f32	s1, s14
 80042da:	eeb0 1a67 	vmov.f32	s2, s15
 80042de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80042e0:	f000 f901 	bl	80044e6 <check_thrusting_phase>
            break;
 80042e4:	e030      	b.n	8004348 <check_flight_phase+0x120>
        case COASTING:
            check_coasting_phase(fsm_state, state_data);
 80042e6:	edd7 6a02 	vldr	s13, [r7, #8]
 80042ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80042ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80042f2:	eeb0 0a66 	vmov.f32	s0, s13
 80042f6:	eef0 0a47 	vmov.f32	s1, s14
 80042fa:	eeb0 1a67 	vmov.f32	s2, s15
 80042fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004300:	f000 f930 	bl	8004564 <check_coasting_phase>
            break;
 8004304:	e020      	b.n	8004348 <check_flight_phase+0x120>
        case DROGUE:
            check_drogue_phase(fsm_state, state_data);
 8004306:	edd7 6a02 	vldr	s13, [r7, #8]
 800430a:	ed97 7a03 	vldr	s14, [r7, #12]
 800430e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004312:	eeb0 0a66 	vmov.f32	s0, s13
 8004316:	eef0 0a47 	vmov.f32	s1, s14
 800431a:	eeb0 1a67 	vmov.f32	s2, s15
 800431e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004320:	f000 f960 	bl	80045e4 <check_drogue_phase>
            break;
 8004324:	e010      	b.n	8004348 <check_flight_phase+0x120>
        case MAIN:
            check_main_phase(fsm_state, state_data);
 8004326:	edd7 6a02 	vldr	s13, [r7, #8]
 800432a:	ed97 7a03 	vldr	s14, [r7, #12]
 800432e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004332:	eeb0 0a66 	vmov.f32	s0, s13
 8004336:	eef0 0a47 	vmov.f32	s1, s14
 800433a:	eeb0 1a67 	vmov.f32	s2, s15
 800433e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004340:	f000 f9b2 	bl	80046a8 <check_main_phase>
            break;
 8004344:	e000      	b.n	8004348 <check_flight_phase+0x120>
        case TOUCHDOWN:
        default:
            break;
 8004346:	bf00      	nop
    }

    fsm_state->state_changed = old_fsm_state != fsm_state->flight_state;
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8004350:	429a      	cmp	r2, r3
 8004352:	bf14      	ite	ne
 8004354:	2301      	movne	r3, #1
 8004356:	2300      	moveq	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	761a      	strb	r2, [r3, #24]
}
 8004360:	bf00      	nop
 8004362:	3738      	adds	r7, #56	@ 0x38
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <trigger_event>:
void trigger_event(cats_event_e event, flight_fsm_t *fsm_state) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	6039      	str	r1, [r7, #0]
 8004372:	71fb      	strb	r3, [r7, #7]
    switch (event) {
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	3b01      	subs	r3, #1
 8004378:	2b04      	cmp	r3, #4
 800437a:	d838      	bhi.n	80043ee <trigger_event+0x86>
 800437c:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <trigger_event+0x1c>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	080043ef 	.word	0x080043ef
 8004388:	080043ef 	.word	0x080043ef
 800438c:	080043ef 	.word	0x080043ef
 8004390:	08004399 	.word	0x08004399
 8004394:	080043c9 	.word	0x080043c9
        case EV_MAX_V:
            // Code to handle maximum velocity event //no action needed
            break;
        case EV_APOGEE:
            // Code to handle apogee event // TRIGGER the Nosecone Seperation Motor for 1 Seconds
            fsm_state->apogee_flag = true; // Set apogee flag
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            fsm_state->apogee_trigger_time_ms = HAL_GetTick(); // Record apogee time
 80043a0:	f003 fe8e 	bl	80080c0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	625a      	str	r2, [r3, #36]	@ 0x24
            
            // Activate Nosecone Motor
            HAL_GPIO_WritePin(GPIOB, MOTOR_NOSECONE_PIN, GPIO_PIN_SET); // Use constant from parameters.h
 80043aa:	2201      	movs	r2, #1
 80043ac:	2110      	movs	r1, #16
 80043ae:	4812      	ldr	r0, [pc, #72]	@ (80043f8 <trigger_event+0x90>)
 80043b0:	f004 fcae 	bl	8008d10 <HAL_GPIO_WritePin>
            fsm_state->nosecone_motor_active = true;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            fsm_state->nosecone_motor_start_time_ms = HAL_GetTick();
 80043bc:	f003 fe80 	bl	80080c0 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	62da      	str	r2, [r3, #44]	@ 0x2c
            break;
 80043c6:	e013      	b.n	80043f0 <trigger_event+0x88>
        case EV_MAIN_DEPLOYMENT:
            // Code to handle main deployment event // TRIGGER the Main Parachute Deployment Motor for 2 Seconds
            fsm_state->main_deployment_flag = true; // Set main deployment flag
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            
            // Activate Main Parachute Motor
            HAL_GPIO_WritePin(GPIOB, MOTOR_MAIN_PIN, GPIO_PIN_SET); // Use constant from parameters.h
 80043d0:	2201      	movs	r2, #1
 80043d2:	2120      	movs	r1, #32
 80043d4:	4808      	ldr	r0, [pc, #32]	@ (80043f8 <trigger_event+0x90>)
 80043d6:	f004 fc9b 	bl	8008d10 <HAL_GPIO_WritePin>
            fsm_state->main_parachute_motor_active = true;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            fsm_state->main_parachute_motor_start_time_ms = HAL_GetTick();
 80043e2:	f003 fe6d 	bl	80080c0 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80043ec:	e000      	b.n	80043f0 <trigger_event+0x88>
        case EV_TOUCHDOWN:
            // Code to handle touchdown event // Stop the Data Logging
            break;
        default:
            break;
 80043ee:	bf00      	nop
    }
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40020400 	.word	0x40020400

080043fc <check_ready_phase>:

static void check_ready_phase(flight_fsm_t *fsm_state, vf32_t acc_data, const control_settings_t *settings, bool launch_pin_high) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	@ 0x30
 8004400:	af00      	add	r7, sp, #0
 8004402:	6178      	str	r0, [r7, #20]
 8004404:	eef0 6a40 	vmov.f32	s13, s0
 8004408:	eeb0 7a60 	vmov.f32	s14, s1
 800440c:	eef0 7a41 	vmov.f32	s15, s2
 8004410:	6079      	str	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	edc7 6a02 	vstr	s13, [r7, #8]
 8004418:	ed87 7a03 	vstr	s14, [r7, #12]
 800441c:	edc7 7a04 	vstr	s15, [r7, #16]
 8004420:	70fb      	strb	r3, [r7, #3]
    /* Check if we move from READY To THRUSTING */
    
    // Condition 1: Launch Pin is HIGH (disconnected from ground)
    if (launch_pin_high) {
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <check_ready_phase+0x38>
        change_state_to(THRUSTING, EV_LIFTOFF, fsm_state);
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	2101      	movs	r1, #1
 800442c:	2001      	movs	r0, #1
 800442e:	f000 f9a1 	bl	8004774 <change_state_to>
        return; // Exit immediately if launch pin triggers liftoff
 8004432:	e055      	b.n	80044e0 <check_ready_phase+0xe4>
    }

    // Condition 2: Acceleration threshold met for a duration
    /* The absolute value of the acceleration is used here to make sure that we detect liftoff */
    const float32_t accel_x = acc_data.x * acc_data.x;
 8004434:	ed97 7a02 	vldr	s14, [r7, #8]
 8004438:	edd7 7a02 	vldr	s15, [r7, #8]
 800443c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004440:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    const float32_t accel_y = acc_data.y * acc_data.y;
 8004444:	ed97 7a03 	vldr	s14, [r7, #12]
 8004448:	edd7 7a03 	vldr	s15, [r7, #12]
 800444c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004450:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    const float32_t accel_z = acc_data.z * acc_data.z;
 8004454:	ed97 7a04 	vldr	s14, [r7, #16]
 8004458:	edd7 7a04 	vldr	s15, [r7, #16]
 800445c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004460:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // Calculate magnitude squared for comparison with squared threshold
    const float32_t acceleration_sq = accel_x + accel_y + accel_z;
 8004464:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004468:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800446c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004470:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004478:	edc7 7a08 	vstr	s15, [r7, #32]

    // num iterations, if the acceleration is bigger than the threshold for 0.1 s we detect liftoff
    uint16_t LIFTOFF_SAFETY_COUNTER = FLIGHT_LIFTOFF_SAFETY_ITERATIONS; // Use constant from parameters.h
 800447c:	230a      	movs	r3, #10
 800447e:	83fb      	strh	r3, [r7, #30]

    if (acceleration_sq > (settings->liftoff_acc_threshold * settings->liftoff_acc_threshold)) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	ed93 7a00 	vldr	s14, [r3]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004490:	ed97 7a08 	vldr	s14, [r7, #32]
 8004494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449c:	dd0a      	ble.n	80044b4 <check_ready_phase+0xb8>
        fsm_state->memory[0]++;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80044a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	edc3 7a01 	vstr	s15, [r3, #4]
 80044b2:	e003      	b.n	80044bc <check_ready_phase+0xc0>
    } else {
        fsm_state->memory[0] = 0;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	605a      	str	r2, [r3, #4]
    }

    if (fsm_state->memory[0] > LIFTOFF_SAFETY_COUNTER) {
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	ed93 7a01 	vldr	s14, [r3, #4]
 80044c2:	8bfb      	ldrh	r3, [r7, #30]
 80044c4:	ee07 3a90 	vmov	s15, r3
 80044c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d4:	dd04      	ble.n	80044e0 <check_ready_phase+0xe4>
        change_state_to(THRUSTING, EV_LIFTOFF, fsm_state);
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	2101      	movs	r1, #1
 80044da:	2001      	movs	r0, #1
 80044dc:	f000 f94a 	bl	8004774 <change_state_to>
    }
}
 80044e0:	3730      	adds	r7, #48	@ 0x30
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <check_thrusting_phase>:

static void check_thrusting_phase(flight_fsm_t *fsm_state, estimation_output_t state_data) {
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b086      	sub	sp, #24
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	eef0 6a40 	vmov.f32	s13, s0
 80044f2:	eeb0 7a60 	vmov.f32	s14, s1
 80044f6:	eef0 7a41 	vmov.f32	s15, s2
 80044fa:	edc7 6a00 	vstr	s13, [r7]
 80044fe:	ed87 7a01 	vstr	s14, [r7, #4]
 8004502:	edc7 7a02 	vstr	s15, [r7, #8]
    /* When acceleration is below 0, liftoff concludes */
    // num iterations, acceleration needs to be smaller than 0 for at least 0.1 s for the transition THRUSTING -> COASTING
    uint16_t COASTING_SAFETY_COUNTER = FLIGHT_COASTING_SAFETY_ITERATIONS; // Use constant from parameters.h
 8004506:	230a      	movs	r3, #10
 8004508:	82fb      	strh	r3, [r7, #22]
    if (state_data.acceleration < 0) {
 800450a:	edd7 7a00 	vldr	s15, [r7]
 800450e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	d50a      	bpl.n	800452e <check_thrusting_phase+0x48>
        fsm_state->memory[1]++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	edd3 7a02 	vldr	s15, [r3, #8]
 800451e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	edc3 7a02 	vstr	s15, [r3, #8]
 800452c:	e003      	b.n	8004536 <check_thrusting_phase+0x50>
    } else {
        fsm_state->memory[1] = 0;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
    }

    if (fsm_state->memory[1] > COASTING_SAFETY_COUNTER) {
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	ed93 7a02 	vldr	s14, [r3, #8]
 800453c:	8afb      	ldrh	r3, [r7, #22]
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454e:	dc00      	bgt.n	8004552 <check_thrusting_phase+0x6c>
        change_state_to(COASTING, EV_MAX_V, fsm_state);
    }
}
 8004550:	e004      	b.n	800455c <check_thrusting_phase+0x76>
        change_state_to(COASTING, EV_MAX_V, fsm_state);
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	2102      	movs	r1, #2
 8004556:	2002      	movs	r0, #2
 8004558:	f000 f90c 	bl	8004774 <change_state_to>
}
 800455c:	bf00      	nop
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <check_coasting_phase>:

static void check_coasting_phase(flight_fsm_t *fsm_state, estimation_output_t state_data) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	eef0 6a40 	vmov.f32	s13, s0
 8004570:	eeb0 7a60 	vmov.f32	s14, s1
 8004574:	eef0 7a41 	vmov.f32	s15, s2
 8004578:	edc7 6a00 	vstr	s13, [r7]
 800457c:	ed87 7a01 	vstr	s14, [r7, #4]
 8004580:	edc7 7a02 	vstr	s15, [r7, #8]
    /* When velocity is below 0, coasting concludes */
    // num iterations, velocity needs to be smaller than 0 for at least 0.3 s for the transition COASTING -> DROGUE
    uint16_t APOGEE_SAFETY_COUNTER = FLIGHT_APOGEE_SAFETY_ITERATIONS; // Use constant from parameters.h
 8004584:	231e      	movs	r3, #30
 8004586:	82fb      	strh	r3, [r7, #22]
    //uint32_t thrust_trigger_time = 0;
    /* DROGUE */
    // num iterations, height needs to be smaller than user-defined for at least 0.3 s for the transition DROGUE -> MAIN
    // tick counts [ms]
    //uint16_t MIN_TICK_COUNTS_BETWEEN_THRUSTING_APOGEE = 1500;
    if (state_data.velocity < 0) {
 8004588:	edd7 7a01 	vldr	s15, [r7, #4]
 800458c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004594:	d50a      	bpl.n	80045ac <check_coasting_phase+0x48>
        fsm_state->memory[2]++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	edd3 7a03 	vldr	s15, [r3, #12]
 800459c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	edc3 7a03 	vstr	s15, [r3, #12]
 80045aa:	e003      	b.n	80045b4 <check_coasting_phase+0x50>
    } else {
        fsm_state->memory[2] = 0; // Reset if velocity is not below 0
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	60da      	str	r2, [r3, #12]
    }

    if (fsm_state->memory[2] > APOGEE_SAFETY_COUNTER) {
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80045ba:	8afb      	ldrh	r3, [r7, #22]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045cc:	dc00      	bgt.n	80045d0 <check_coasting_phase+0x6c>
        // Directly transition to DROGUE 
        change_state_to(DROGUE, EV_APOGEE, fsm_state);
    }   
}
 80045ce:	e004      	b.n	80045da <check_coasting_phase+0x76>
        change_state_to(DROGUE, EV_APOGEE, fsm_state);
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	2104      	movs	r1, #4
 80045d4:	2003      	movs	r0, #3
 80045d6:	f000 f8cd 	bl	8004774 <change_state_to>
}
 80045da:	bf00      	nop
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <check_drogue_phase>:

static void check_drogue_phase(flight_fsm_t *fsm_state, estimation_output_t state_data) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	eef0 6a40 	vmov.f32	s13, s0
 80045f0:	eeb0 7a60 	vmov.f32	s14, s1
 80045f4:	eef0 7a41 	vmov.f32	s15, s2
 80045f8:	edc7 6a00 	vstr	s13, [r7]
 80045fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8004600:	edc7 7a02 	vstr	s15, [r7, #8]
    float32_t Main_height = FLIGHT_MAIN_DEPLOY_ALTITUDE_M; // Use constant from parameters.h
 8004604:	4b27      	ldr	r3, [pc, #156]	@ (80046a4 <check_drogue_phase+0xc0>)
 8004606:	61bb      	str	r3, [r7, #24]
    uint16_t MAIN_SAFETY_COUNTER = FLIGHT_MAIN_DEPLOY_SAFETY_ITERATIONS; // Use constant from parameters.h
 8004608:	231e      	movs	r3, #30
 800460a:	82fb      	strh	r3, [r7, #22]
    bool time_condition = false;
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
    bool altitude_condition = false;
 8004610:	2300      	movs	r3, #0
 8004612:	77bb      	strb	r3, [r7, #30]

    // Check time-based condition
    if (fsm_state->apogee_flag) {
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <check_drogue_phase+0x52>
        if ((HAL_GetTick() - fsm_state->apogee_trigger_time_ms) >= FLIGHT_MAIN_DEPLOY_DELAY_AFTER_APOGEE_MS) { // Use constant from parameters.h
 800461e:	f003 fd4f 	bl	80080c0 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <check_drogue_phase+0x52>
            time_condition = true;
 8004632:	2301      	movs	r3, #1
 8004634:	77fb      	strb	r3, [r7, #31]
        }
    }

    // Check altitude-based condition
    if (state_data.height < Main_height) {
 8004636:	edd7 7a02 	vldr	s15, [r7, #8]
 800463a:	ed97 7a06 	vldr	s14, [r7, #24]
 800463e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004646:	dd19      	ble.n	800467c <check_drogue_phase+0x98>
        fsm_state->memory[3]++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	edd3 7a04 	vldr	s15, [r3, #16]
 800464e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004652:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	edc3 7a04 	vstr	s15, [r3, #16]
        if (fsm_state->memory[3] > MAIN_SAFETY_COUNTER) {
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004662:	8afb      	ldrh	r3, [r7, #22]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800466c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	dd06      	ble.n	8004684 <check_drogue_phase+0xa0>
            altitude_condition = true;
 8004676:	2301      	movs	r3, #1
 8004678:	77bb      	strb	r3, [r7, #30]
 800467a:	e003      	b.n	8004684 <check_drogue_phase+0xa0>
        }
    } else {
        fsm_state->memory[3] = 0;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	611a      	str	r2, [r3, #16]
    }

    // Transition if either condition is met
    if (time_condition || altitude_condition) {
 8004684:	7ffb      	ldrb	r3, [r7, #31]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <check_drogue_phase+0xac>
 800468a:	7fbb      	ldrb	r3, [r7, #30]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d004      	beq.n	800469a <check_drogue_phase+0xb6>
        change_state_to(MAIN, EV_MAIN_DEPLOYMENT, fsm_state);
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	2105      	movs	r1, #5
 8004694:	2004      	movs	r0, #4
 8004696:	f000 f86d 	bl	8004774 <change_state_to>
    }
}
 800469a:	bf00      	nop
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	43fa0000 	.word	0x43fa0000

080046a8 <check_main_phase>:

static void check_main_phase(flight_fsm_t *fsm_state, estimation_output_t state_data) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	eef0 6a40 	vmov.f32	s13, s0
 80046b4:	eeb0 7a60 	vmov.f32	s14, s1
 80046b8:	eef0 7a41 	vmov.f32	s15, s2
 80046bc:	edc7 6a00 	vstr	s13, [r7]
 80046c0:	ed87 7a01 	vstr	s14, [r7, #4]
 80046c4:	edc7 7a02 	vstr	s15, [r7, #8]
    /* If the velocity is very small we have touchdown */
    float32_t VELOCITY_BOUND_TOUCHDOWN = FLIGHT_TOUCHDOWN_VELOCITY_THRESHOLD_MPS; // Use constant from parameters.h
 80046c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004734 <check_main_phase+0x8c>)
 80046ca:	617b      	str	r3, [r7, #20]
    uint16_t TOUCHDOWN_SAFETY_COUNTER = FLIGHT_TOUCHDOWN_SAFETY_ITERATIONS; // Use constant from parameters.h
 80046cc:	2364      	movs	r3, #100	@ 0x64
 80046ce:	827b      	strh	r3, [r7, #18]
    if (fabsf(state_data.velocity) < VELOCITY_BOUND_TOUCHDOWN) {
 80046d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80046d4:	eef0 7ae7 	vabs.f32	s15, s15
 80046d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80046dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	dd0a      	ble.n	80046fc <check_main_phase+0x54>
        /* Touchdown achieved */
        fsm_state->memory[4]++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80046ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	edc3 7a05 	vstr	s15, [r3, #20]
 80046fa:	e003      	b.n	8004704 <check_main_phase+0x5c>
    } else {
        /* Touchdown not achieved */
        fsm_state->memory[4] = 0;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	615a      	str	r2, [r3, #20]
    }

    if (fsm_state->memory[4] > TOUCHDOWN_SAFETY_COUNTER) {
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	ed93 7a05 	vldr	s14, [r3, #20]
 800470a:	8a7b      	ldrh	r3, [r7, #18]
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	dc00      	bgt.n	8004720 <check_main_phase+0x78>
        change_state_to(TOUCHDOWN, EV_TOUCHDOWN, fsm_state);
    }
}
 800471e:	e004      	b.n	800472a <check_main_phase+0x82>
        change_state_to(TOUCHDOWN, EV_TOUCHDOWN, fsm_state);
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	2103      	movs	r1, #3
 8004724:	2005      	movs	r0, #5
 8004726:	f000 f825 	bl	8004774 <change_state_to>
}
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40400000 	.word	0x40400000

08004738 <clear_fsm_memory>:

static void clear_fsm_memory(flight_fsm_t *fsm_state) {
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
    fsm_state->memory[0] = 0;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	605a      	str	r2, [r3, #4]
    fsm_state->memory[1] = 0;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
    fsm_state->memory[2] = 0;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	60da      	str	r2, [r3, #12]
    fsm_state->memory[3] = 0;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	611a      	str	r2, [r3, #16]
    fsm_state->memory[4] = 0;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	615a      	str	r2, [r3, #20]
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <change_state_to>:

static void change_state_to(flight_fsm_e new_state, cats_event_e event_to_trigger, flight_fsm_t *fsm_state) {
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	603a      	str	r2, [r7, #0]
 800477e:	71fb      	strb	r3, [r7, #7]
 8004780:	460b      	mov	r3, r1
 8004782:	71bb      	strb	r3, [r7, #6]
    // Implement state change logic
    fsm_state->flight_state = new_state;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	79fa      	ldrb	r2, [r7, #7]
 8004788:	701a      	strb	r2, [r3, #0]
    clear_fsm_memory(fsm_state);
 800478a:	6838      	ldr	r0, [r7, #0]
 800478c:	f7ff ffd4 	bl	8004738 <clear_fsm_memory>
    // Trigger the corresponding event
    trigger_event(event_to_trigger, fsm_state);
 8004790:	79bb      	ldrb	r3, [r7, #6]
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff fde7 	bl	8004368 <trigger_event>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <manage_timed_actuators>:

// New function to manage timed actuators like motors
void manage_timed_actuators(flight_fsm_t *fsm_state) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
    // --- Nosecone Motor Control (PB4) ---
    if (fsm_state->nosecone_motor_active) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d011      	beq.n	80047da <manage_timed_actuators+0x36>
        if ((HAL_GetTick() - fsm_state->nosecone_motor_start_time_ms) >= MOTOR_NOSECONE_DURATION_MS) { // Use constant from parameters.h
 80047b6:	f003 fc83 	bl	80080c0 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047c6:	d308      	bcc.n	80047da <manage_timed_actuators+0x36>
            HAL_GPIO_WritePin(GPIOB, MOTOR_NOSECONE_PIN, GPIO_PIN_RESET); // Use constant from parameters.h
 80047c8:	2200      	movs	r2, #0
 80047ca:	2110      	movs	r1, #16
 80047cc:	4810      	ldr	r0, [pc, #64]	@ (8004810 <manage_timed_actuators+0x6c>)
 80047ce:	f004 fa9f 	bl	8008d10 <HAL_GPIO_WritePin>
            fsm_state->nosecone_motor_active = false;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        }
    }

    // --- Main Parachute Motor Control (PB5) ---
    if (fsm_state->main_parachute_motor_active) {
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d011      	beq.n	8004808 <manage_timed_actuators+0x64>
        if ((HAL_GetTick() - fsm_state->main_parachute_motor_start_time_ms) >= MOTOR_MAIN_DURATION_MS) { // Use constant from parameters.h
 80047e4:	f003 fc6c 	bl	80080c0 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80047f4:	d308      	bcc.n	8004808 <manage_timed_actuators+0x64>
            HAL_GPIO_WritePin(GPIOB, MOTOR_MAIN_PIN, GPIO_PIN_RESET); // Use constant from parameters.h
 80047f6:	2200      	movs	r2, #0
 80047f8:	2120      	movs	r1, #32
 80047fa:	4805      	ldr	r0, [pc, #20]	@ (8004810 <manage_timed_actuators+0x6c>)
 80047fc:	f004 fa88 	bl	8008d10 <HAL_GPIO_WritePin>
            fsm_state->main_parachute_motor_active = false;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        }
    }

    // Add other timed actuator logic here if needed in the future
    // For example, main parachute motor
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40020400 	.word	0x40020400

08004814 <kalman_init>:
void kalman_init(KalmanFilter *kf,
                 float initial_altitude_m,
                 float initial_altitude_variance,
                 float initial_velocity_variance,
                 float process_noise_accel_variance,
                 float measurement_noise_baro_variance) {
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6178      	str	r0, [r7, #20]
 800481c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004820:	edc7 0a03 	vstr	s1, [r7, #12]
 8004824:	ed87 1a02 	vstr	s2, [r7, #8]
 8004828:	edc7 1a01 	vstr	s3, [r7, #4]
 800482c:	ed87 2a00 	vstr	s4, [r7]
    kf->altitude_m = initial_altitude_m;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	601a      	str	r2, [r3, #0]
    kf->vertical_velocity_mps = 0.0f; // Assume initial vertical velocity is zero unless specified
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	605a      	str	r2, [r3, #4]

    // Initialize covariance matrix P
    // P = [[var_alt, 0],
    //      [0, var_vel]]
    kf->P[0][0] = initial_altitude_variance;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	609a      	str	r2, [r3, #8]
    kf->P[0][1] = 0.0f;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	60da      	str	r2, [r3, #12]
    kf->P[1][0] = 0.0f;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	611a      	str	r2, [r3, #16]
    kf->P[1][1] = initial_velocity_variance;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	615a      	str	r2, [r3, #20]

    kf->Q_accel_variance = process_noise_accel_variance;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	619a      	str	r2, [r3, #24]
    kf->R_baro_altitude_variance = measurement_noise_baro_variance;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	61da      	str	r2, [r3, #28]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <kalman_predict>:

void kalman_predict(KalmanFilter *kf, float vertical_accel_mps2, float dt) {
 8004874:	b480      	push	{r7}
 8004876:	b099      	sub	sp, #100	@ 0x64
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004880:	edc7 0a01 	vstr	s1, [r7, #4]
    // Control input matrix B = [[0.5*dt^2],
    //                           [dt]]
    // Control input u = [vertical_accel_mps2]

    // Predict state: x_k_minus = A * x_k_minus_1_plus + B * u_k_minus_1
    float prev_alt = kf->altitude_m;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float prev_vel = kf->vertical_velocity_mps;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	65bb      	str	r3, [r7, #88]	@ 0x58

    kf->altitude_m = prev_alt + prev_vel * dt + 0.5f * vertical_accel_mps2 * dt * dt;
 8004890:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8004894:	edd7 7a01 	vldr	s15, [r7, #4]
 8004898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800489c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80048a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80048a8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80048ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80048b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80048b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80048b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80048bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	edc3 7a00 	vstr	s15, [r3]
    kf->vertical_velocity_mps = prev_vel + vertical_accel_mps2 * dt;
 80048ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80048ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80048d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048d6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80048da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	edc3 7a01 	vstr	s15, [r3, #4]

    // Predict covariance: P_k_minus = A * P_k_minus_1_plus * A' + Q
    // Q = [[0.25*dt^4, 0.5*dt^3],
    //      [0.5*dt^3,  dt^2]] * Q_accel_variance

    float p00 = kf->P[0][0];
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	657b      	str	r3, [r7, #84]	@ 0x54
    float p01 = kf->P[0][1];
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	653b      	str	r3, [r7, #80]	@ 0x50
    float p10 = kf->P[1][0]; // Should be equal to p01
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float p11 = kf->P[1][1];
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	64bb      	str	r3, [r7, #72]	@ 0x48

    // A*P
    float ap00 = p00 + dt * p10;
 80048fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004900:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004908:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800490c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004910:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float ap01 = p01 + dt * p11;
 8004914:	ed97 7a01 	vldr	s14, [r7, #4]
 8004918:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800491c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004920:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004928:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float ap10 = p10; // 0*p00 + 1*p10
 800492c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800492e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float ap11 = p11; // 0*p01 + 1*p11
 8004930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38

    // (A*P)*A'
    // A' = [[1, 0],
    //       [dt,1]]
    float p_pred_00 = ap00 * 1.0f + ap01 * dt;
 8004934:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004938:	edd7 7a01 	vldr	s15, [r7, #4]
 800493c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004940:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004948:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float p_pred_01 = ap00 * 0.0f + ap01 * 1.0f;
 800494c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004950:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8004a5c <kalman_predict+0x1e8>
 8004954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004958:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800495c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004960:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float p_pred_10 = ap10 * 1.0f + ap11 * dt;
 8004964:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8004968:	edd7 7a01 	vldr	s15, [r7, #4]
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004978:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float p_pred_11 = ap10 * 0.0f + ap11 * 1.0f;
 800497c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004980:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004a5c <kalman_predict+0x1e8>
 8004984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004988:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800498c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004990:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    
    // Add Q (Process Noise Covariance)
    float dt2 = dt * dt;
 8004994:	edd7 7a01 	vldr	s15, [r7, #4]
 8004998:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800499c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float dt3 = dt2 * dt;
 80049a0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80049a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	edc7 7a08 	vstr	s15, [r7, #32]
    float dt4 = dt3 * dt;
 80049b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80049b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	edc7 7a07 	vstr	s15, [r7, #28]

    float q00 = 0.25f * dt4 * kf->Q_accel_variance;
 80049c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80049c4:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80049c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a06 	vstr	s15, [r7, #24]
    float q01 = 0.5f  * dt3 * kf->Q_accel_variance;
 80049da:	edd7 7a08 	vldr	s15, [r7, #32]
 80049de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80049e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80049ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f0:	edc7 7a05 	vstr	s15, [r7, #20]
    // float q10 = q01; // Q is symmetric
    float q11 = dt2 * kf->Q_accel_variance;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80049fa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80049fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a02:	edc7 7a04 	vstr	s15, [r7, #16]

    kf->P[0][0] = p_pred_00 + q00;
 8004a06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004a0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P[0][1] = p_pred_01 + q01;
 8004a18:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[1][0] = p_pred_10 + q01; // Using q01 for symmetry
 8004a2a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004a2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][1] = p_pred_11 + q11;
 8004a3c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004a40:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8004a4e:	bf00      	nop
 8004a50:	3764      	adds	r7, #100	@ 0x64
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	00000000 	.word	0x00000000

08004a60 <kalman_update_barometer>:

void kalman_update_barometer(KalmanFilter *kf, float baro_altitude_m) {
 8004a60:	b480      	push	{r7}
 8004a62:	b08b      	sub	sp, #44	@ 0x2c
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	ed87 0a00 	vstr	s0, [r7]
    // Measurement matrix H = [1, 0] (measures altitude)
    // Measurement z = baro_altitude_m

    // Innovation (measurement residual): y = z - H * x_k_minus
    float y_residual = baro_altitude_m - kf->altitude_m; // H*x_k_minus is just kf->altitude_m
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	edd3 7a00 	vldr	s15, [r3]
 8004a72:	ed97 7a00 	vldr	s14, [r7]
 8004a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a7a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Innovation covariance: S = H * P_k_minus * H' + R
    // H * P_k_minus * H' = P_k_minus[0][0]
    float S_innovation_cov = kf->P[0][0] + kf->R_baro_altitude_variance;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a8e:	edc7 7a08 	vstr	s15, [r7, #32]

    if (S_innovation_cov == 0.0f) {
 8004a92:	edd7 7a08 	vldr	s15, [r7, #32]
 8004a96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9e:	d070      	beq.n	8004b82 <kalman_update_barometer+0x122>
        return;
    }

    // Kalman Gain K = P_k_minus * H' * S^-1
    // P_k_minus * H' = [[P00], [P10]] (since H' = [[1],[0]])
    float K0 = kf->P[0][0] / S_innovation_cov;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	edd3 6a02 	vldr	s13, [r3, #8]
 8004aa6:	ed97 7a08 	vldr	s14, [r7, #32]
 8004aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aae:	edc7 7a07 	vstr	s15, [r7, #28]
    float K1 = kf->P[1][0] / S_innovation_cov;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	edd3 6a04 	vldr	s13, [r3, #16]
 8004ab8:	ed97 7a08 	vldr	s14, [r7, #32]
 8004abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac0:	edc7 7a06 	vstr	s15, [r7, #24]

    // Update state estimate: x_k_plus = x_k_minus + K * y
    kf->altitude_m = kf->altitude_m + K0 * y_residual;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	ed93 7a00 	vldr	s14, [r3]
 8004aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ace:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	edc3 7a00 	vstr	s15, [r3]
    kf->vertical_velocity_mps = kf->vertical_velocity_mps + K1 * y_residual;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ae6:	edd7 6a06 	vldr	s13, [r7, #24]
 8004aea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update covariance estimate: P_k_plus = (I - K * H) * P_k_minus
    // I - K*H = [[1-K0,  0],
    //            [ -K1,  1]]
    float p00 = kf->P[0][0];
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	617b      	str	r3, [r7, #20]
    float p01 = kf->P[0][1];
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	613b      	str	r3, [r7, #16]
    // p10 = kf->P[1][0]; // same as p01
    float p11 = kf->P[1][1];
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	60fb      	str	r3, [r7, #12]

    kf->P[0][0] = (1.0f - K0) * p00;
 8004b0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b12:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P[0][1] = (1.0f - K0) * p01;
 8004b28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[1][0] = -K1 * p00 + kf->P[1][0]; // kf->P[1][0] is p10 from P_k_minus
 8004b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b46:	eeb1 7a67 	vneg.f32	s14, s15
 8004b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][1] = -K1 * p01 + p11;
 8004b62:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b66:	eeb1 7a67 	vneg.f32	s14, s15
 8004b6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	edc3 7a05 	vstr	s15, [r3, #20]
 8004b80:	e000      	b.n	8004b84 <kalman_update_barometer+0x124>
        return;
 8004b82:	bf00      	nop
    // For robustness:
    // kf->P[1][0] = kf->P[0][1]; 
    // However, the (I-KH)P formula used above should maintain symmetry if P was symmetric.
    // More robust P update: P = (I-KH)P(I-KH)' + KRK' (Joseph form, but more complex)
    // For now, the P_updated = (I - K * H) * P_k_minus is standard and often sufficient.
}
 8004b84:	372c      	adds	r7, #44	@ 0x2c
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004b8e:	b590      	push	{r4, r7, lr}
 8004b90:	b087      	sub	sp, #28
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	72fb      	strb	r3, [r7, #11]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685c      	ldr	r4, [r3, #4]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68d8      	ldr	r0, [r3, #12]
 8004baa:	893b      	ldrh	r3, [r7, #8]
 8004bac:	7af9      	ldrb	r1, [r7, #11]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	47a0      	blx	r4
 8004bb2:	6178      	str	r0, [r7, #20]

  return ret;
 8004bb4:	697b      	ldr	r3, [r7, #20]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd90      	pop	{r4, r7, pc}

08004bbe <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004bbe:	b590      	push	{r4, r7, lr}
 8004bc0:	b087      	sub	sp, #28
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	460b      	mov	r3, r1
 8004bcc:	72fb      	strb	r3, [r7, #11]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681c      	ldr	r4, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68d8      	ldr	r0, [r3, #12]
 8004bda:	893b      	ldrh	r3, [r7, #8]
 8004bdc:	7af9      	ldrb	r1, [r7, #11]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	47a0      	blx	r4
 8004be2:	6178      	str	r0, [r7, #20]

  return ret;
 8004be4:	697b      	ldr	r3, [r7, #20]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}

08004bee <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004bfa:	f107 0208 	add.w	r2, r7, #8
 8004bfe:	2301      	movs	r3, #1
 8004c00:	2110      	movs	r1, #16
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ffc3 	bl	8004b8e <lsm6dso_read_reg>
 8004c08:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10f      	bne.n	8004c30 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	7a3b      	ldrb	r3, [r7, #8]
 8004c1a:	f362 0383 	bfi	r3, r2, #2, #2
 8004c1e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004c20:	f107 0208 	add.w	r2, r7, #8
 8004c24:	2301      	movs	r3, #1
 8004c26:	2110      	movs	r1, #16
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ffc8 	bl	8004bbe <lsm6dso_write_reg>
 8004c2e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c30:	68fb      	ldr	r3, [r7, #12]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004c4c:	f107 030c 	add.w	r3, r7, #12
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fb49 	bl	80052ea <lsm6dso_fsm_enable_get>
 8004c58:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f040 80c4 	bne.w	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c62:	7b3b      	ldrb	r3, [r7, #12]
 8004c64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004c6a:	7b3b      	ldrb	r3, [r7, #12]
 8004c6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c70:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c72:	4313      	orrs	r3, r2
 8004c74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004c76:	7b3b      	ldrb	r3, [r7, #12]
 8004c78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004c82:	7b3b      	ldrb	r3, [r7, #12]
 8004c84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004c8e:	7b3b      	ldrb	r3, [r7, #12]
 8004c90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004c96:	4313      	orrs	r3, r2
 8004c98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004c9a:	7b3b      	ldrb	r3, [r7, #12]
 8004c9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ca0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004ca6:	7b3b      	ldrb	r3, [r7, #12]
 8004ca8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004cac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004cb2:	7b3b      	ldrb	r3, [r7, #12]
 8004cb4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004cb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004cbe:	7b7b      	ldrb	r3, [r7, #13]
 8004cc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004cc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004cca:	7b7b      	ldrb	r3, [r7, #13]
 8004ccc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004cd6:	7b7b      	ldrb	r3, [r7, #13]
 8004cd8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004cdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004ce2:	7b7b      	ldrb	r3, [r7, #13]
 8004ce4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ce8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004cea:	4313      	orrs	r3, r2
 8004cec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004cee:	7b7b      	ldrb	r3, [r7, #13]
 8004cf0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004cf4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004cfa:	7b7b      	ldrb	r3, [r7, #13]
 8004cfc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004d02:	4313      	orrs	r3, r2
 8004d04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004d06:	7b7b      	ldrb	r3, [r7, #13]
 8004d08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004d12:	7b7b      	ldrb	r3, [r7, #13]
 8004d14:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d163      	bne.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004d22:	f107 030b 	add.w	r3, r7, #11
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 faff 	bl	800532c <lsm6dso_fsm_data_rate_get>
 8004d2e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d159      	bne.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004d36:	7afb      	ldrb	r3, [r7, #11]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d853      	bhi.n	8004de4 <lsm6dso_xl_data_rate_set+0x1a8>
 8004d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <lsm6dso_xl_data_rate_set+0x108>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d67 	.word	0x08004d67
 8004d4c:	08004d85 	.word	0x08004d85
 8004d50:	08004daf 	.word	0x08004daf
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d5e:	e044      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	75fb      	strb	r3, [r7, #23]
            break;
 8004d64:	e041      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d70:	e03b      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8004d7c:	e035      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	75fb      	strb	r3, [r7, #23]
            break;
 8004d82:	e032      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d102      	bne.n	8004d90 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d8e:	e02c      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d102      	bne.n	8004d9c <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d96:	2303      	movs	r3, #3
 8004d98:	75fb      	strb	r3, [r7, #23]
            break;
 8004d9a:	e026      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d102      	bne.n	8004da8 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004da2:	2303      	movs	r3, #3
 8004da4:	75fb      	strb	r3, [r7, #23]
            break;
 8004da6:	e020      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	75fb      	strb	r3, [r7, #23]
            break;
 8004dac:	e01d      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004db4:	2304      	movs	r3, #4
 8004db6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004db8:	e017      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d102      	bne.n	8004dc6 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	75fb      	strb	r3, [r7, #23]
            break;
 8004dc4:	e011      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d102      	bne.n	8004dd2 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004dcc:	2304      	movs	r3, #4
 8004dce:	75fb      	strb	r3, [r7, #23]
            break;
 8004dd0:	e00b      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d102      	bne.n	8004dde <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004dd8:	2304      	movs	r3, #4
 8004dda:	75fb      	strb	r3, [r7, #23]
            break;
 8004ddc:	e005      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	75fb      	strb	r3, [r7, #23]
            break;
 8004de2:	e002      	b.n	8004dea <lsm6dso_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	75fb      	strb	r3, [r7, #23]
            break;
 8004de8:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d107      	bne.n	8004e00 <lsm6dso_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004df0:	f107 0208 	add.w	r2, r7, #8
 8004df4:	2301      	movs	r3, #1
 8004df6:	2110      	movs	r1, #16
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fec8 	bl	8004b8e <lsm6dso_read_reg>
 8004dfe:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10f      	bne.n	8004e26 <lsm6dso_xl_data_rate_set+0x1ea>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	7a3b      	ldrb	r3, [r7, #8]
 8004e10:	f362 1307 	bfi	r3, r2, #4, #4
 8004e14:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004e16:	f107 0208 	add.w	r2, r7, #8
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	2110      	movs	r1, #16
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fecd 	bl	8004bbe <lsm6dso_write_reg>
 8004e24:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004e26:	693b      	ldr	r3, [r7, #16]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004e3c:	f107 0208 	add.w	r2, r7, #8
 8004e40:	2301      	movs	r3, #1
 8004e42:	2111      	movs	r1, #17
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fea2 	bl	8004b8e <lsm6dso_read_reg>
 8004e4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	7a3b      	ldrb	r3, [r7, #8]
 8004e5c:	f362 0343 	bfi	r3, r2, #1, #3
 8004e60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004e62:	f107 0208 	add.w	r2, r7, #8
 8004e66:	2301      	movs	r3, #1
 8004e68:	2111      	movs	r1, #17
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fea7 	bl	8004bbe <lsm6dso_write_reg>
 8004e70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e72:	68fb      	ldr	r3, [r7, #12]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa29 	bl	80052ea <lsm6dso_fsm_enable_get>
 8004e98:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f040 80c4 	bne.w	800502a <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004ea2:	7b3b      	ldrb	r3, [r7, #12]
 8004ea4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ea8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004eaa:	7b3b      	ldrb	r3, [r7, #12]
 8004eac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004eb0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004eb6:	7b3b      	ldrb	r3, [r7, #12]
 8004eb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ebc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004ec2:	7b3b      	ldrb	r3, [r7, #12]
 8004ec4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ec8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004ece:	7b3b      	ldrb	r3, [r7, #12]
 8004ed0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ed4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004eda:	7b3b      	ldrb	r3, [r7, #12]
 8004edc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ee0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004ee6:	7b3b      	ldrb	r3, [r7, #12]
 8004ee8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004eec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004ef2:	7b3b      	ldrb	r3, [r7, #12]
 8004ef4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ef8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004efa:	4313      	orrs	r3, r2
 8004efc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004efe:	7b7b      	ldrb	r3, [r7, #13]
 8004f00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004f06:	4313      	orrs	r3, r2
 8004f08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004f0a:	7b7b      	ldrb	r3, [r7, #13]
 8004f0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004f12:	4313      	orrs	r3, r2
 8004f14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004f16:	7b7b      	ldrb	r3, [r7, #13]
 8004f18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004f22:	7b7b      	ldrb	r3, [r7, #13]
 8004f24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004f2e:	7b7b      	ldrb	r3, [r7, #13]
 8004f30:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004f34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004f36:	4313      	orrs	r3, r2
 8004f38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004f3a:	7b7b      	ldrb	r3, [r7, #13]
 8004f3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004f40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004f42:	4313      	orrs	r3, r2
 8004f44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004f46:	7b7b      	ldrb	r3, [r7, #13]
 8004f48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004f4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004f52:	7b7b      	ldrb	r3, [r7, #13]
 8004f54:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d163      	bne.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004f62:	f107 030b 	add.w	r3, r7, #11
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f9df 	bl	800532c <lsm6dso_fsm_data_rate_get>
 8004f6e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d159      	bne.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004f76:	7afb      	ldrb	r3, [r7, #11]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d853      	bhi.n	8005024 <lsm6dso_gy_data_rate_set+0x1a8>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <lsm6dso_gy_data_rate_set+0x108>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004fa7 	.word	0x08004fa7
 8004f8c:	08004fc5 	.word	0x08004fc5
 8004f90:	08004fef 	.word	0x08004fef
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004f9e:	e044      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	75fb      	strb	r3, [r7, #23]
            break;
 8004fa4:	e041      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d102      	bne.n	8004fb2 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004fac:	2302      	movs	r3, #2
 8004fae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004fb0:	e03b      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d102      	bne.n	8004fbe <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	75fb      	strb	r3, [r7, #23]
            break;
 8004fbc:	e035      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	75fb      	strb	r3, [r7, #23]
            break;
 8004fc2:	e032      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004fce:	e02c      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d102      	bne.n	8004fdc <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	75fb      	strb	r3, [r7, #23]
            break;
 8004fda:	e026      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d102      	bne.n	8004fe8 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	75fb      	strb	r3, [r7, #23]
            break;
 8004fe6:	e020      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	75fb      	strb	r3, [r7, #23]
            break;
 8004fec:	e01d      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004ff8:	e017      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d102      	bne.n	8005006 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005000:	2304      	movs	r3, #4
 8005002:	75fb      	strb	r3, [r7, #23]
            break;
 8005004:	e011      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d102      	bne.n	8005012 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800500c:	2304      	movs	r3, #4
 800500e:	75fb      	strb	r3, [r7, #23]
            break;
 8005010:	e00b      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d102      	bne.n	800501e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005018:	2304      	movs	r3, #4
 800501a:	75fb      	strb	r3, [r7, #23]
            break;
 800501c:	e005      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	75fb      	strb	r3, [r7, #23]
            break;
 8005022:	e002      	b.n	800502a <lsm6dso_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	75fb      	strb	r3, [r7, #23]
            break;
 8005028:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d107      	bne.n	8005040 <lsm6dso_gy_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005030:	f107 0208 	add.w	r2, r7, #8
 8005034:	2301      	movs	r3, #1
 8005036:	2111      	movs	r1, #17
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff fda8 	bl	8004b8e <lsm6dso_read_reg>
 800503e:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10f      	bne.n	8005066 <lsm6dso_gy_data_rate_set+0x1ea>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	b2da      	uxtb	r2, r3
 800504e:	7a3b      	ldrb	r3, [r7, #8]
 8005050:	f362 1307 	bfi	r3, r2, #4, #4
 8005054:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005056:	f107 0208 	add.w	r2, r7, #8
 800505a:	2301      	movs	r3, #1
 800505c:	2111      	movs	r1, #17
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fdad 	bl	8004bbe <lsm6dso_write_reg>
 8005064:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005066:	693b      	ldr	r3, [r7, #16]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800507c:	f107 0208 	add.w	r2, r7, #8
 8005080:	2301      	movs	r3, #1
 8005082:	2112      	movs	r1, #18
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff fd82 	bl	8004b8e <lsm6dso_read_reg>
 800508a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10f      	bne.n	80050b2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	b2da      	uxtb	r2, r3
 800509a:	7a3b      	ldrb	r3, [r7, #8]
 800509c:	f362 1386 	bfi	r3, r2, #6, #1
 80050a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80050a2:	f107 0208 	add.w	r2, r7, #8
 80050a6:	2301      	movs	r3, #1
 80050a8:	2112      	movs	r1, #18
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fd87 	bl	8004bbe <lsm6dso_write_reg>
 80050b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <lsm6dso_status_reg_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_status_reg_get(stmdev_ctx_t *ctx,
                               lsm6dso_status_reg_t *val)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) val, 1);
 80050c6:	2301      	movs	r3, #1
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	211e      	movs	r1, #30
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff fd5e 	bl	8004b8e <lsm6dso_read_reg>
 80050d2:	60f8      	str	r0, [r7, #12]

  return ret;
 80050d4:	68fb      	ldr	r3, [r7, #12]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80050e8:	f107 020c 	add.w	r2, r7, #12
 80050ec:	2306      	movs	r3, #6
 80050ee:	2122      	movs	r1, #34	@ 0x22
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff fd4c 	bl	8004b8e <lsm6dso_read_reg>
 80050f6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80050f8:	7b7b      	ldrb	r3, [r7, #13]
 80050fa:	b21a      	sxth	r2, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005106:	b29b      	uxth	r3, r3
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	b29b      	uxth	r3, r3
 800510c:	7b3a      	ldrb	r2, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	b29b      	uxth	r3, r3
 8005112:	b21a      	sxth	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005118:	7bfa      	ldrb	r2, [r7, #15]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	3302      	adds	r3, #2
 800511e:	b212      	sxth	r2, r2
 8005120:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	3302      	adds	r3, #2
 8005126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800512a:	b29b      	uxth	r3, r3
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	b29b      	uxth	r3, r3
 8005130:	7bba      	ldrb	r2, [r7, #14]
 8005132:	4413      	add	r3, r2
 8005134:	b29a      	uxth	r2, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	3302      	adds	r3, #2
 800513a:	b212      	sxth	r2, r2
 800513c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800513e:	7c7a      	ldrb	r2, [r7, #17]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	3304      	adds	r3, #4
 8005144:	b212      	sxth	r2, r2
 8005146:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	3304      	adds	r3, #4
 800514c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005150:	b29b      	uxth	r3, r3
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	b29b      	uxth	r3, r3
 8005156:	7c3a      	ldrb	r2, [r7, #16]
 8005158:	4413      	add	r3, r2
 800515a:	b29a      	uxth	r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	3304      	adds	r3, #4
 8005160:	b212      	sxth	r2, r2
 8005162:	801a      	strh	r2, [r3, #0]

  return ret;
 8005164:	697b      	ldr	r3, [r7, #20]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005178:	f107 020c 	add.w	r2, r7, #12
 800517c:	2306      	movs	r3, #6
 800517e:	2128      	movs	r1, #40	@ 0x28
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fd04 	bl	8004b8e <lsm6dso_read_reg>
 8005186:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005188:	7b7b      	ldrb	r3, [r7, #13]
 800518a:	b21a      	sxth	r2, r3
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005196:	b29b      	uxth	r3, r3
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	b29b      	uxth	r3, r3
 800519c:	7b3a      	ldrb	r2, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	b21a      	sxth	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3302      	adds	r3, #2
 80051ae:	b212      	sxth	r2, r2
 80051b0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	3302      	adds	r3, #2
 80051b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	b29b      	uxth	r3, r3
 80051c0:	7bba      	ldrb	r2, [r7, #14]
 80051c2:	4413      	add	r3, r2
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	3302      	adds	r3, #2
 80051ca:	b212      	sxth	r2, r2
 80051cc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80051ce:	7c7a      	ldrb	r2, [r7, #17]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	3304      	adds	r3, #4
 80051d4:	b212      	sxth	r2, r2
 80051d6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	3304      	adds	r3, #4
 80051dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	7c3a      	ldrb	r2, [r7, #16]
 80051e8:	4413      	add	r3, r2
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	3304      	adds	r3, #4
 80051f0:	b212      	sxth	r2, r2
 80051f2:	801a      	strh	r2, [r3, #0]

  return ret;
 80051f4:	697b      	ldr	r3, [r7, #20]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800520a:	f107 0208 	add.w	r2, r7, #8
 800520e:	2301      	movs	r3, #1
 8005210:	2101      	movs	r1, #1
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff fcbb 	bl	8004b8e <lsm6dso_read_reg>
 8005218:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10f      	bne.n	8005240 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	b2da      	uxtb	r2, r3
 8005228:	7a3b      	ldrb	r3, [r7, #8]
 800522a:	f362 1387 	bfi	r3, r2, #6, #2
 800522e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005230:	f107 0208 	add.w	r2, r7, #8
 8005234:	2301      	movs	r3, #1
 8005236:	2101      	movs	r1, #1
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fcc0 	bl	8004bbe <lsm6dso_write_reg>
 800523e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005240:	68fb      	ldr	r3, [r7, #12]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005254:	2301      	movs	r3, #1
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	210f      	movs	r1, #15
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fc97 	bl	8004b8e <lsm6dso_read_reg>
 8005260:	60f8      	str	r0, [r7, #12]

  return ret;
 8005262:	68fb      	ldr	r3, [r7, #12]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005278:	f107 0208 	add.w	r2, r7, #8
 800527c:	2301      	movs	r3, #1
 800527e:	2112      	movs	r1, #18
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff fc84 	bl	8004b8e <lsm6dso_read_reg>
 8005286:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	b2da      	uxtb	r2, r3
 8005296:	7a3b      	ldrb	r3, [r7, #8]
 8005298:	f362 0300 	bfi	r3, r2, #0, #1
 800529c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800529e:	f107 0208 	add.w	r2, r7, #8
 80052a2:	2301      	movs	r3, #1
 80052a4:	2112      	movs	r1, #18
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff fc89 	bl	8004bbe <lsm6dso_write_reg>
 80052ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052ae:	68fb      	ldr	r3, [r7, #12]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80052c2:	f107 0208 	add.w	r2, r7, #8
 80052c6:	2301      	movs	r3, #1
 80052c8:	2112      	movs	r1, #18
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fc5f 	bl	8004b8e <lsm6dso_read_reg>
 80052d0:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 80052d2:	7a3b      	ldrb	r3, [r7, #8]
 80052d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	701a      	strb	r2, [r3, #0]

  return ret;
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80052f4:	2102      	movs	r1, #2
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff ff81 	bl	80051fe <lsm6dso_mem_bank_set>
 80052fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005304:	2302      	movs	r3, #2
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	2146      	movs	r1, #70	@ 0x46
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fc3f 	bl	8004b8e <lsm6dso_read_reg>
 8005310:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005318:	2100      	movs	r1, #0
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff ff6f 	bl	80051fe <lsm6dso_mem_bank_set>
 8005320:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005322:	68fb      	ldr	r3, [r7, #12]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005336:	2102      	movs	r1, #2
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff ff60 	bl	80051fe <lsm6dso_mem_bank_set>
 800533e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d107      	bne.n	8005356 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8005346:	f107 0208 	add.w	r2, r7, #8
 800534a:	2301      	movs	r3, #1
 800534c:	215f      	movs	r1, #95	@ 0x5f
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fc1d 	bl	8004b8e <lsm6dso_read_reg>
 8005354:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d12a      	bne.n	80053b2 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 800535c:	7a3b      	ldrb	r3, [r7, #8]
 800535e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b03      	cmp	r3, #3
 8005366:	d81b      	bhi.n	80053a0 <lsm6dso_fsm_data_rate_get+0x74>
 8005368:	a201      	add	r2, pc, #4	@ (adr r2, 8005370 <lsm6dso_fsm_data_rate_get+0x44>)
 800536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536e:	bf00      	nop
 8005370:	08005381 	.word	0x08005381
 8005374:	08005389 	.word	0x08005389
 8005378:	08005391 	.word	0x08005391
 800537c:	08005399 	.word	0x08005399
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
        break;
 8005386:	e00f      	b.n	80053a8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
        break;
 800538e:	e00b      	b.n	80053a8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2202      	movs	r2, #2
 8005394:	701a      	strb	r2, [r3, #0]
        break;
 8005396:	e007      	b.n	80053a8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2203      	movs	r2, #3
 800539c:	701a      	strb	r2, [r3, #0]
        break;
 800539e:	e003      	b.n	80053a8 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
        break;
 80053a6:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80053a8:	2100      	movs	r1, #0
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff ff27 	bl	80051fe <lsm6dso_mem_bank_set>
 80053b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053b2:	68fb      	ldr	r3, [r7, #12]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <platform_write>:
// Kalman Filter instance
static KalmanFilter kf_altitude_velocity;

// LSM6DSO functions re-enabled and corrected
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af04      	add	r7, sp, #16
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	461a      	mov	r2, r3
 80053c8:	460b      	mov	r3, r1
 80053ca:	72fb      	strb	r3, [r7, #11]
 80053cc:	4613      	mov	r3, r2
 80053ce:	813b      	strh	r3, [r7, #8]
  // Note: LSM6DSO_I2C_ADD_L is the 7-bit address. HAL functions expect the 8-bit address (7-bit shifted left).
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef*)handle, (LSM6DSO_I2C_ADD_L << 1), reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000) == HAL_OK) {
 80053d0:	7afb      	ldrb	r3, [r7, #11]
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053d8:	9302      	str	r3, [sp, #8]
 80053da:	893b      	ldrh	r3, [r7, #8]
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	2301      	movs	r3, #1
 80053e4:	21d4      	movs	r1, #212	@ 0xd4
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f003 fe7a 	bl	80090e0 <HAL_I2C_Mem_Write>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <platform_write+0x3a>
    return 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e001      	b.n	80053fa <platform_write+0x3e>
  }
  return -1; // Return non-zero for error
 80053f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b088      	sub	sp, #32
 8005406:	af04      	add	r7, sp, #16
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	461a      	mov	r2, r3
 800540e:	460b      	mov	r3, r1
 8005410:	72fb      	strb	r3, [r7, #11]
 8005412:	4613      	mov	r3, r2
 8005414:	813b      	strh	r3, [r7, #8]
  // Note: LSM6DSO_I2C_ADD_L is the 7-bit address. HAL functions expect the 8-bit address (7-bit shifted left).
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef*)handle, (LSM6DSO_I2C_ADD_L << 1), reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000) == HAL_OK) {
 8005416:	7afb      	ldrb	r3, [r7, #11]
 8005418:	b29a      	uxth	r2, r3
 800541a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800541e:	9302      	str	r3, [sp, #8]
 8005420:	893b      	ldrh	r3, [r7, #8]
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2301      	movs	r3, #1
 800542a:	21d4      	movs	r1, #212	@ 0xd4
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f003 ff6b 	bl	8009308 <HAL_I2C_Mem_Read>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <platform_read+0x3a>
    return 0;
 8005438:	2300      	movs	r3, #0
 800543a:	e001      	b.n	8005440 <platform_read+0x3e>
  }
  return -1; // Return non-zero for error
 800543c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <bmp390_i2c_interface_init>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */

// Wrapper functions for BMP390 driver
uint8_t bmp390_i2c_interface_init(void) {
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  // MX_I2C1_Init() is called before this, so I2C hardware is already initialized.
  // This function can be a no-op or ensure I2C1 is ready.
  return 0; // Success
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <bmp390_i2c_interface_deinit>:

uint8_t bmp390_i2c_interface_deinit(void) {
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  // Optional: HAL_I2C_DeInit(&hi2c1); if necessary for power down
  return 0; // Success
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <bmp390_i2c_read>:

uint8_t bmp390_i2c_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af04      	add	r7, sp, #16
 800546e:	603a      	str	r2, [r7, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	4603      	mov	r3, r0
 8005474:	71fb      	strb	r3, [r7, #7]
 8005476:	460b      	mov	r3, r1
 8005478:	71bb      	strb	r3, [r7, #6]
 800547a:	4613      	mov	r3, r2
 800547c:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_read calls this with addr = handle->iic_addr
    if (HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	b299      	uxth	r1, r3
 8005482:	79bb      	ldrb	r3, [r7, #6]
 8005484:	b29a      	uxth	r2, r3
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	88bb      	ldrh	r3, [r7, #4]
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	2301      	movs	r3, #1
 8005496:	4806      	ldr	r0, [pc, #24]	@ (80054b0 <bmp390_i2c_read+0x48>)
 8005498:	f003 ff36 	bl	8009308 <HAL_I2C_Mem_Read>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <bmp390_i2c_read+0x3e>
        return 0; // Success
 80054a2:	2300      	movs	r3, #0
 80054a4:	e000      	b.n	80054a8 <bmp390_i2c_read+0x40>
    }
    return 1; // Failure
 80054a6:	2301      	movs	r3, #1
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000664 	.word	0x20000664

080054b4 <bmp390_i2c_write>:

uint8_t bmp390_i2c_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af04      	add	r7, sp, #16
 80054ba:	603a      	str	r2, [r7, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
 80054c2:	460b      	mov	r3, r1
 80054c4:	71bb      	strb	r3, [r7, #6]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_write calls this in a loop with len=1 for multi-byte writes.
    // So, this function will effectively be called to write one byte at a time.
    if (HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	b299      	uxth	r1, r3
 80054ce:	79bb      	ldrb	r3, [r7, #6]
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295
 80054d6:	9302      	str	r3, [sp, #8]
 80054d8:	88bb      	ldrh	r3, [r7, #4]
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	2301      	movs	r3, #1
 80054e2:	4806      	ldr	r0, [pc, #24]	@ (80054fc <bmp390_i2c_write+0x48>)
 80054e4:	f003 fdfc 	bl	80090e0 <HAL_I2C_Mem_Write>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <bmp390_i2c_write+0x3e>
        return 0; // Success
 80054ee:	2300      	movs	r3, #0
 80054f0:	e000      	b.n	80054f4 <bmp390_i2c_write+0x40>
    }
    return 1; // Failure
 80054f2:	2301      	movs	r3, #1
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20000664 	.word	0x20000664

08005500 <bmp390_delay_ms>:

void bmp390_delay_ms(uint32_t ms) {
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f002 fde5 	bl	80080d8 <HAL_Delay>
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <bmp390_spi_interface_init>:

// Dummy SPI functions to satisfy driver checks when using I2C
uint8_t bmp390_spi_interface_init(void) {
 8005516:	b480      	push	{r7}
 8005518:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <bmp390_spi_interface_deinit>:

uint8_t bmp390_spi_interface_deinit(void) {
 8005526:	b480      	push	{r7}
 8005528:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <bmp390_spi_read>:

uint8_t bmp390_spi_read(uint8_t reg, uint8_t *buf, uint16_t len) {
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	4603      	mov	r3, r0
 800553e:	6039      	str	r1, [r7, #0]
 8005540:	71fb      	strb	r3, [r7, #7]
 8005542:	4613      	mov	r3, r2
 8005544:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8005546:	2301      	movs	r3, #1
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <bmp390_spi_write>:

uint8_t bmp390_spi_write(uint8_t reg, uint8_t *buf, uint16_t len) {
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	6039      	str	r1, [r7, #0]
 800555e:	71fb      	strb	r3, [r7, #7]
 8005560:	4613      	mov	r3, r2
 8005562:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8005564:	2301      	movs	r3, #1
}
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <bmp390_debug_print>:

void bmp390_debug_print(const char *const fmt, ...) {
 8005572:	b40f      	push	{r0, r1, r2, r3}
 8005574:	b580      	push	{r7, lr}
 8005576:	b0a2      	sub	sp, #136	@ 0x88
 8005578:	af00      	add	r7, sp, #0
    char dbg_buffer[128]; // Buffer for debug messages
    va_list args;
    va_start(args, fmt);
 800557a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800557e:	607b      	str	r3, [r7, #4]
    vsnprintf(dbg_buffer, sizeof(dbg_buffer), fmt, args);
 8005580:	f107 0008 	add.w	r0, r7, #8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800558a:	2180      	movs	r1, #128	@ 0x80
 800558c:	f008 fb3c 	bl	800dc08 <vsniprintf>
    va_end(args);
    // Direct transmit is simpler if buffer is managed carefully
    // HAL_UART_Transmit(&huart3, (uint8_t*)"BMP390_DBG: ", 12, HAL_MAX_DELAY);
    // HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buffer, strlen(dbg_buffer), HAL_MAX_DELAY);
    (void)dbg_buffer; // Suppress unused variable warning if UART lines are commented
}
 8005590:	bf00      	nop
 8005592:	3788      	adds	r7, #136	@ 0x88
 8005594:	46bd      	mov	sp, r7
 8005596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800559a:	b004      	add	sp, #16
 800559c:	4770      	bx	lr
	...

080055a0 <calibrate_sea_level_pressure_hpa>:


// Altitude calculation functions
// pressure_hpa: current measured pressure in hPa
// known_altitude_meters: current known altitude in meters
void calibrate_sea_level_pressure_hpa(float current_pressure_hpa, float known_altitude_meters) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80055aa:	edc7 0a00 	vstr	s1, [r7]
  sea_level_pressure_hpa = current_pressure_hpa / powf((1.0f - (known_altitude_meters * BMP_ALTITUDE_FACTOR_1)), BMP_ALTITUDE_FACTOR_2);
 80055ae:	edd7 7a00 	vldr	s15, [r7]
 80055b2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80055e8 <calibrate_sea_level_pressure_hpa+0x48>
 80055b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055c2:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 80055ec <calibrate_sea_level_pressure_hpa+0x4c>
 80055c6:	eeb0 0a67 	vmov.f32	s0, s15
 80055ca:	f00b ff07 	bl	80113dc <powf>
 80055ce:	eef0 6a40 	vmov.f32	s13, s0
 80055d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80055d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055da:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <calibrate_sea_level_pressure_hpa+0x50>)
 80055dc:	edc3 7a00 	vstr	s15, [r3]
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	37bd3a4b 	.word	0x37bd3a4b
 80055ec:	40a83025 	.word	0x40a83025
 80055f0:	20000fe8 	.word	0x20000fe8

080055f4 <calculate_altitude_hpa>:

// pressure_hpa: current measured pressure in hPa
// returns altitude in meters
float calculate_altitude_hpa(float pressure_hpa) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	ed87 0a01 	vstr	s0, [r7, #4]
  if (sea_level_pressure_hpa <= 0) return 0.0f; // Avoid division by zero or log of non-positive
 80055fe:	4b13      	ldr	r3, [pc, #76]	@ (800564c <calculate_altitude_hpa+0x58>)
 8005600:	edd3 7a00 	vldr	s15, [r3]
 8005604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560c:	d802      	bhi.n	8005614 <calculate_altitude_hpa+0x20>
 800560e:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8005650 <calculate_altitude_hpa+0x5c>
 8005612:	e016      	b.n	8005642 <calculate_altitude_hpa+0x4e>
  return BMP_ALTITUDE_FORMULA_FACTOR * (1.0f - powf(pressure_hpa / sea_level_pressure_hpa, BMP_ALTITUDE_FORMULA_EXPONENT));
 8005614:	4b0d      	ldr	r3, [pc, #52]	@ (800564c <calculate_altitude_hpa+0x58>)
 8005616:	edd3 7a00 	vldr	s15, [r3]
 800561a:	ed97 7a01 	vldr	s14, [r7, #4]
 800561e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005622:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8005654 <calculate_altitude_hpa+0x60>
 8005626:	eeb0 0a66 	vmov.f32	s0, s13
 800562a:	f00b fed7 	bl	80113dc <powf>
 800562e:	eef0 7a40 	vmov.f32	s15, s0
 8005632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800563a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005658 <calculate_altitude_hpa+0x64>
 800563e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005642:	eeb0 0a67 	vmov.f32	s0, s15
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000fe8 	.word	0x20000fe8
 8005650:	00000000 	.word	0x00000000
 8005654:	3e42de01 	.word	0x3e42de01
 8005658:	472d2a00 	.word	0x472d2a00

0800565c <lsm6dso_from_fs16g_to_mg>:
  * @brief  Converts raw accelerometer data from LSM6DSO to mg.
  * @param  lsb Raw data from the sensor.
  * @retval Acceleration in mg.
  */
static float lsm6dso_from_fs16g_to_mg(int16_t lsb)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	80fb      	strh	r3, [r7, #6]
  // Apply a 2x correction factor - the sensor is reporting ~half the expected values
  return (float)lsb * LSM6DSO_16G_SENSITIVITY_CORR * LSM6DSO_SENSITIVITY_CORR_FACTOR; // Sensitivity from parameters.h
 8005666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005672:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800568c <lsm6dso_from_fs16g_to_mg+0x30>
 8005676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800567a:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 800567e:	eeb0 0a67 	vmov.f32	s0, s15
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	3ef9db23 	.word	0x3ef9db23

08005690 <lsm6dso_from_fs2000dps_to_mdps>:
  * @brief  Converts raw gyroscope data from LSM6DSO to mdps.
  * @param  lsb Raw data from the sensor.
  * @retval Angular rate in mdps.
  */
static float lsm6dso_from_fs2000dps_to_mdps(int16_t lsb)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	80fb      	strh	r3, [r7, #6]
  return (float)lsb * LSM6DSO_2000DPS_SENSITIVITY; // Sensitivity from parameters.h
 800569a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80056bc <lsm6dso_from_fs2000dps_to_mdps+0x2c>
 80056aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80056ae:	eeb0 0a67 	vmov.f32	s0, s15
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	428c0000 	.word	0x428c0000

080056c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	b0f1      	sub	sp, #452	@ 0x1c4
 80056c6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056c8:	f002 fca9 	bl	800801e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056cc:	f001 fe68 	bl	80073a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056d0:	f001 fff8 	bl	80076c4 <MX_GPIO_Init>
  MX_ETH_Init();
 80056d4:	f001 fecc 	bl	8007470 <MX_ETH_Init>
  MX_I2C1_Init();
 80056d8:	f001 ff18 	bl	800750c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80056dc:	f001 ff94 	bl	8007608 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80056e0:	f001 ffc2 	bl	8007668 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 80056e4:	f001 ff52 	bl	800758c <MX_SPI2_Init>
  MX_FATFS_Init();
 80056e8:	f007 f9da 	bl	800caa0 <MX_FATFS_Init>
  // Initialize I2C (already called by HAL_Init system, but good to ensure)
  // MX_I2C1_Init(); // Called above in peripheral init sequence

  // char uart_buffer[100]; // Moved global and resized
  
  sprintf(uart_buffer, "System Initialized. UART OK.\r\n");
 80056ec:	4997      	ldr	r1, [pc, #604]	@ (800594c <main+0x28c>)
 80056ee:	4898      	ldr	r0, [pc, #608]	@ (8005950 <main+0x290>)
 80056f0:	f008 f9f6 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80056f4:	4896      	ldr	r0, [pc, #600]	@ (8005950 <main+0x290>)
 80056f6:	f7fa fddb 	bl	80002b0 <strlen>
 80056fa:	4603      	mov	r3, r0
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005702:	4993      	ldr	r1, [pc, #588]	@ (8005950 <main+0x290>)
 8005704:	4893      	ldr	r0, [pc, #588]	@ (8005954 <main+0x294>)
 8005706:	f006 fa1d 	bl	800bb44 <HAL_UART_Transmit>
  
  // Scan the I2C bus first to see what devices are present
  sprintf(uart_buffer, "Scanning I2C bus for devices...\r\n");
 800570a:	4993      	ldr	r1, [pc, #588]	@ (8005958 <main+0x298>)
 800570c:	4890      	ldr	r0, [pc, #576]	@ (8005950 <main+0x290>)
 800570e:	f008 f9e7 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005712:	488f      	ldr	r0, [pc, #572]	@ (8005950 <main+0x290>)
 8005714:	f7fa fdcc 	bl	80002b0 <strlen>
 8005718:	4603      	mov	r3, r0
 800571a:	b29a      	uxth	r2, r3
 800571c:	f04f 33ff 	mov.w	r3, #4294967295
 8005720:	498b      	ldr	r1, [pc, #556]	@ (8005950 <main+0x290>)
 8005722:	488c      	ldr	r0, [pc, #560]	@ (8005954 <main+0x294>)
 8005724:	f006 fa0e 	bl	800bb44 <HAL_UART_Transmit>
  
  uint8_t i2c_devices_found = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
  for (uint8_t i = 1; i < 128; i++) {
 800572e:	2301      	movs	r3, #1
 8005730:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8005734:	e04d      	b.n	80057d2 <main+0x112>
    if (i < 0x08 || i > 0x77) continue;
 8005736:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 800573a:	2b07      	cmp	r3, #7
 800573c:	d943      	bls.n	80057c6 <main+0x106>
 800573e:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 8005742:	2b77      	cmp	r3, #119	@ 0x77
 8005744:	d83f      	bhi.n	80057c6 <main+0x106>

    HAL_StatusTypeDef i2c_result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 2, 10); // Use 2 trials, 10ms timeout
 8005746:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 800574a:	b29b      	uxth	r3, r3
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	b299      	uxth	r1, r3
 8005750:	230a      	movs	r3, #10
 8005752:	2202      	movs	r2, #2
 8005754:	4881      	ldr	r0, [pc, #516]	@ (800595c <main+0x29c>)
 8005756:	f003 fef1 	bl	800953c <HAL_I2C_IsDeviceReady>
 800575a:	4603      	mov	r3, r0
 800575c:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    
    if (i2c_result == HAL_OK) {
 8005760:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8005764:	2b00      	cmp	r3, #0
 8005766:	d12f      	bne.n	80057c8 <main+0x108>
      i2c_devices_found++;
 8005768:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 800576c:	3301      	adds	r3, #1
 800576e:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
      sprintf(uart_buffer, "Found I2C device at address: 0x%02X\r\n", i);
 8005772:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 8005776:	461a      	mov	r2, r3
 8005778:	4979      	ldr	r1, [pc, #484]	@ (8005960 <main+0x2a0>)
 800577a:	4875      	ldr	r0, [pc, #468]	@ (8005950 <main+0x290>)
 800577c:	f008 f9b0 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005780:	4873      	ldr	r0, [pc, #460]	@ (8005950 <main+0x290>)
 8005782:	f7fa fd95 	bl	80002b0 <strlen>
 8005786:	4603      	mov	r3, r0
 8005788:	b29a      	uxth	r2, r3
 800578a:	f04f 33ff 	mov.w	r3, #4294967295
 800578e:	4970      	ldr	r1, [pc, #448]	@ (8005950 <main+0x290>)
 8005790:	4870      	ldr	r0, [pc, #448]	@ (8005954 <main+0x294>)
 8005792:	f006 f9d7 	bl	800bb44 <HAL_UART_Transmit>
      
      if (i == (BMP390_I2C_ADDRESS_LOW_SHIFTED >> 1) || i == (BMP390_I2C_ADDRESS_HIGH_SHIFTED >> 1)) {
 8005796:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 800579a:	2b76      	cmp	r3, #118	@ 0x76
 800579c:	d003      	beq.n	80057a6 <main+0xe6>
 800579e:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 80057a2:	2b77      	cmp	r3, #119	@ 0x77
 80057a4:	d110      	bne.n	80057c8 <main+0x108>
        sprintf(uart_buffer, "  --> This could be a BMP390 sensor!\r\n");
 80057a6:	496f      	ldr	r1, [pc, #444]	@ (8005964 <main+0x2a4>)
 80057a8:	4869      	ldr	r0, [pc, #420]	@ (8005950 <main+0x290>)
 80057aa:	f008 f999 	bl	800dae0 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80057ae:	4868      	ldr	r0, [pc, #416]	@ (8005950 <main+0x290>)
 80057b0:	f7fa fd7e 	bl	80002b0 <strlen>
 80057b4:	4603      	mov	r3, r0
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	4964      	ldr	r1, [pc, #400]	@ (8005950 <main+0x290>)
 80057be:	4865      	ldr	r0, [pc, #404]	@ (8005954 <main+0x294>)
 80057c0:	f006 f9c0 	bl	800bb44 <HAL_UART_Transmit>
 80057c4:	e000      	b.n	80057c8 <main+0x108>
    if (i < 0x08 || i > 0x77) continue;
 80057c6:	bf00      	nop
  for (uint8_t i = 1; i < 128; i++) {
 80057c8:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 80057cc:	3301      	adds	r3, #1
 80057ce:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80057d2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	daad      	bge.n	8005736 <main+0x76>
      }
    }
  }
  
  if (i2c_devices_found == 0) {
 80057da:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10f      	bne.n	8005802 <main+0x142>
    sprintf(uart_buffer, "No I2C devices found! Check wiring/pull-ups.\r\n");
 80057e2:	4961      	ldr	r1, [pc, #388]	@ (8005968 <main+0x2a8>)
 80057e4:	485a      	ldr	r0, [pc, #360]	@ (8005950 <main+0x290>)
 80057e6:	f008 f97b 	bl	800dae0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80057ea:	4859      	ldr	r0, [pc, #356]	@ (8005950 <main+0x290>)
 80057ec:	f7fa fd60 	bl	80002b0 <strlen>
 80057f0:	4603      	mov	r3, r0
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295
 80057f8:	4955      	ldr	r1, [pc, #340]	@ (8005950 <main+0x290>)
 80057fa:	4856      	ldr	r0, [pc, #344]	@ (8005954 <main+0x294>)
 80057fc:	f006 f9a2 	bl	800bb44 <HAL_UART_Transmit>
 8005800:	e011      	b.n	8005826 <main+0x166>
  } else {
    sprintf(uart_buffer, "Found %d I2C devices in total.\r\n", i2c_devices_found);
 8005802:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 8005806:	461a      	mov	r2, r3
 8005808:	4958      	ldr	r1, [pc, #352]	@ (800596c <main+0x2ac>)
 800580a:	4851      	ldr	r0, [pc, #324]	@ (8005950 <main+0x290>)
 800580c:	f008 f968 	bl	800dae0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005810:	484f      	ldr	r0, [pc, #316]	@ (8005950 <main+0x290>)
 8005812:	f7fa fd4d 	bl	80002b0 <strlen>
 8005816:	4603      	mov	r3, r0
 8005818:	b29a      	uxth	r2, r3
 800581a:	f04f 33ff 	mov.w	r3, #4294967295
 800581e:	494c      	ldr	r1, [pc, #304]	@ (8005950 <main+0x290>)
 8005820:	484c      	ldr	r0, [pc, #304]	@ (8005954 <main+0x294>)
 8005822:	f006 f98f 	bl	800bb44 <HAL_UART_Transmit>
  }

  // Initialize LSM6DSO
  sprintf(uart_buffer, "Initializing LSM6DSO...\r\n");
 8005826:	4952      	ldr	r1, [pc, #328]	@ (8005970 <main+0x2b0>)
 8005828:	4849      	ldr	r0, [pc, #292]	@ (8005950 <main+0x290>)
 800582a:	f008 f959 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800582e:	4848      	ldr	r0, [pc, #288]	@ (8005950 <main+0x290>)
 8005830:	f7fa fd3e 	bl	80002b0 <strlen>
 8005834:	4603      	mov	r3, r0
 8005836:	b29a      	uxth	r2, r3
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	4944      	ldr	r1, [pc, #272]	@ (8005950 <main+0x290>)
 800583e:	4845      	ldr	r0, [pc, #276]	@ (8005954 <main+0x294>)
 8005840:	f006 f980 	bl	800bb44 <HAL_UART_Transmit>

  dev_ctx.write_reg = platform_write;
 8005844:	4b4b      	ldr	r3, [pc, #300]	@ (8005974 <main+0x2b4>)
 8005846:	4a4c      	ldr	r2, [pc, #304]	@ (8005978 <main+0x2b8>)
 8005848:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 800584a:	4b4a      	ldr	r3, [pc, #296]	@ (8005974 <main+0x2b4>)
 800584c:	4a4b      	ldr	r2, [pc, #300]	@ (800597c <main+0x2bc>)
 800584e:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 8005850:	4b48      	ldr	r3, [pc, #288]	@ (8005974 <main+0x2b4>)
 8005852:	4a42      	ldr	r2, [pc, #264]	@ (800595c <main+0x29c>)
 8005854:	60da      	str	r2, [r3, #12]

  // Check device ID
  lsm6dso_device_id_get(&dev_ctx, &whoamI_lsm);
 8005856:	494a      	ldr	r1, [pc, #296]	@ (8005980 <main+0x2c0>)
 8005858:	4846      	ldr	r0, [pc, #280]	@ (8005974 <main+0x2b4>)
 800585a:	f7ff fcf6 	bl	800524a <lsm6dso_device_id_get>
  if (whoamI_lsm == LSM6DSO_WHO_AM_I) {
 800585e:	4b48      	ldr	r3, [pc, #288]	@ (8005980 <main+0x2c0>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b0f      	cmp	r3, #15
 8005864:	d112      	bne.n	800588c <main+0x1cc>
    sprintf(uart_buffer, "LSM6DSO WHO_AM_I is OK: 0x%02X\r\n", whoamI_lsm);
 8005866:	4b46      	ldr	r3, [pc, #280]	@ (8005980 <main+0x2c0>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	4945      	ldr	r1, [pc, #276]	@ (8005984 <main+0x2c4>)
 800586e:	4838      	ldr	r0, [pc, #224]	@ (8005950 <main+0x290>)
 8005870:	f008 f936 	bl	800dae0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005874:	4836      	ldr	r0, [pc, #216]	@ (8005950 <main+0x290>)
 8005876:	f7fa fd1b 	bl	80002b0 <strlen>
 800587a:	4603      	mov	r3, r0
 800587c:	b29a      	uxth	r2, r3
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	4933      	ldr	r1, [pc, #204]	@ (8005950 <main+0x290>)
 8005884:	4833      	ldr	r0, [pc, #204]	@ (8005954 <main+0x294>)
 8005886:	f006 f95d 	bl	800bb44 <HAL_UART_Transmit>
 800588a:	e011      	b.n	80058b0 <main+0x1f0>
  } else {
    sprintf(uart_buffer, "LSM6DSO WHO_AM_I FAILED! Expected 0x%02X, got 0x%02X\r\n", LSM6DSO_WHO_AM_I, whoamI_lsm);
 800588c:	4b3c      	ldr	r3, [pc, #240]	@ (8005980 <main+0x2c0>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	220f      	movs	r2, #15
 8005892:	493d      	ldr	r1, [pc, #244]	@ (8005988 <main+0x2c8>)
 8005894:	482e      	ldr	r0, [pc, #184]	@ (8005950 <main+0x290>)
 8005896:	f008 f923 	bl	800dae0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800589a:	482d      	ldr	r0, [pc, #180]	@ (8005950 <main+0x290>)
 800589c:	f7fa fd08 	bl	80002b0 <strlen>
 80058a0:	4603      	mov	r3, r0
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295
 80058a8:	4929      	ldr	r1, [pc, #164]	@ (8005950 <main+0x290>)
 80058aa:	482a      	ldr	r0, [pc, #168]	@ (8005954 <main+0x294>)
 80058ac:	f006 f94a 	bl	800bb44 <HAL_UART_Transmit>
    // Error_Handler(); // Decide if this is fatal
  }

  // Restore default configuration
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80058b0:	2101      	movs	r1, #1
 80058b2:	4830      	ldr	r0, [pc, #192]	@ (8005974 <main+0x2b4>)
 80058b4:	f7ff fcda 	bl	800526c <lsm6dso_reset_set>
  do {
    lsm6dso_reset_get(&dev_ctx, &rst_lsm);
 80058b8:	4934      	ldr	r1, [pc, #208]	@ (800598c <main+0x2cc>)
 80058ba:	482e      	ldr	r0, [pc, #184]	@ (8005974 <main+0x2b4>)
 80058bc:	f7ff fcfc 	bl	80052b8 <lsm6dso_reset_get>
  } while (rst_lsm);
 80058c0:	4b32      	ldr	r3, [pc, #200]	@ (800598c <main+0x2cc>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f7      	bne.n	80058b8 <main+0x1f8>

  // Enable Block Data Update
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80058c8:	2101      	movs	r1, #1
 80058ca:	482a      	ldr	r0, [pc, #168]	@ (8005974 <main+0x2b4>)
 80058cc:	f7ff fbd0 	bl	8005070 <lsm6dso_block_data_update_set>

  // Set Output Data Rate for Accelerometer and Gyroscope
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_104Hz); // 104 Hz ODR for Accelerometer
 80058d0:	2104      	movs	r1, #4
 80058d2:	4828      	ldr	r0, [pc, #160]	@ (8005974 <main+0x2b4>)
 80058d4:	f7ff f9b2 	bl	8004c3c <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_104Hz); // 104 Hz ODR for Gyroscope
 80058d8:	2104      	movs	r1, #4
 80058da:	4826      	ldr	r0, [pc, #152]	@ (8005974 <main+0x2b4>)
 80058dc:	f7ff face 	bl	8004e7c <lsm6dso_gy_data_rate_set>

  // Set Full Scale for Accelerometer and Gyroscope
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_16g);    // +/- 16g Full Scale for Accelerometer
 80058e0:	2101      	movs	r1, #1
 80058e2:	4824      	ldr	r0, [pc, #144]	@ (8005974 <main+0x2b4>)
 80058e4:	f7ff f983 	bl	8004bee <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps); // +/- 2000 dps Full Scale for Gyroscope
 80058e8:	2106      	movs	r1, #6
 80058ea:	4822      	ldr	r0, [pc, #136]	@ (8005974 <main+0x2b4>)
 80058ec:	f7ff faa0 	bl	8004e30 <lsm6dso_gy_full_scale_set>

  // Make sure xl_fs_mode is set to 0 to ensure 16g works correctly
  uint8_t ctrl8_xl_val = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
  lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 80058f6:	f507 7283 	add.w	r2, r7, #262	@ 0x106
 80058fa:	2301      	movs	r3, #1
 80058fc:	2117      	movs	r1, #23
 80058fe:	481d      	ldr	r0, [pc, #116]	@ (8005974 <main+0x2b4>)
 8005900:	f7ff f945 	bl	8004b8e <lsm6dso_read_reg>
  // Clear the xl_fs_mode bit (bit 1) to ensure proper 16g operation
  ctrl8_xl_val &= ~(1 << 1);
 8005904:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 8005908:	f023 0302 	bic.w	r3, r3, #2
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
  lsm6dso_write_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 8005912:	f507 7283 	add.w	r2, r7, #262	@ 0x106
 8005916:	2301      	movs	r3, #1
 8005918:	2117      	movs	r1, #23
 800591a:	4816      	ldr	r0, [pc, #88]	@ (8005974 <main+0x2b4>)
 800591c:	f7ff f94f 	bl	8004bbe <lsm6dso_write_reg>
  
  // ---- START DEBUG: Read back CTRL1_XL and CTRL8_XL ----
  uint8_t ctrl1_xl_val = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
  if (lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL1_XL, &ctrl1_xl_val, 1) == 0) {
 8005926:	f207 1205 	addw	r2, r7, #261	@ 0x105
 800592a:	2301      	movs	r3, #1
 800592c:	2110      	movs	r1, #16
 800592e:	4811      	ldr	r0, [pc, #68]	@ (8005974 <main+0x2b4>)
 8005930:	f7ff f92d 	bl	8004b8e <lsm6dso_read_reg>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d12c      	bne.n	8005994 <main+0x2d4>
    sprintf(uart_buffer, "LSM6DSO CTRL1_XL after set: 0x%02X\r\n", ctrl1_xl_val);
 800593a:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 800593e:	461a      	mov	r2, r3
 8005940:	4913      	ldr	r1, [pc, #76]	@ (8005990 <main+0x2d0>)
 8005942:	4803      	ldr	r0, [pc, #12]	@ (8005950 <main+0x290>)
 8005944:	f008 f8cc 	bl	800dae0 <siprintf>
 8005948:	e028      	b.n	800599c <main+0x2dc>
 800594a:	bf00      	nop
 800594c:	08012e24 	.word	0x08012e24
 8005950:	20000ee8 	.word	0x20000ee8
 8005954:	2000071c 	.word	0x2000071c
 8005958:	08012e44 	.word	0x08012e44
 800595c:	20000664 	.word	0x20000664
 8005960:	08012e68 	.word	0x08012e68
 8005964:	08012e90 	.word	0x08012e90
 8005968:	08012eb8 	.word	0x08012eb8
 800596c:	08012ee8 	.word	0x08012ee8
 8005970:	08012f0c 	.word	0x08012f0c
 8005974:	20000c84 	.word	0x20000c84
 8005978:	080053bd 	.word	0x080053bd
 800597c:	08005403 	.word	0x08005403
 8005980:	20001056 	.word	0x20001056
 8005984:	08012f28 	.word	0x08012f28
 8005988:	08012f4c 	.word	0x08012f4c
 800598c:	20001057 	.word	0x20001057
 8005990:	08012f84 	.word	0x08012f84
  } else {
    sprintf(uart_buffer, "LSM6DSO Failed to read CTRL1_XL\r\n");
 8005994:	4932      	ldr	r1, [pc, #200]	@ (8005a60 <main+0x3a0>)
 8005996:	4833      	ldr	r0, [pc, #204]	@ (8005a64 <main+0x3a4>)
 8005998:	f008 f8a2 	bl	800dae0 <siprintf>
  }
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800599c:	4831      	ldr	r0, [pc, #196]	@ (8005a64 <main+0x3a4>)
 800599e:	f7fa fc87 	bl	80002b0 <strlen>
 80059a2:	4603      	mov	r3, r0
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295
 80059aa:	492e      	ldr	r1, [pc, #184]	@ (8005a64 <main+0x3a4>)
 80059ac:	482e      	ldr	r0, [pc, #184]	@ (8005a68 <main+0x3a8>)
 80059ae:	f006 f8c9 	bl	800bb44 <HAL_UART_Transmit>
  
  lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 80059b2:	f507 7283 	add.w	r2, r7, #262	@ 0x106
 80059b6:	2301      	movs	r3, #1
 80059b8:	2117      	movs	r1, #23
 80059ba:	482c      	ldr	r0, [pc, #176]	@ (8005a6c <main+0x3ac>)
 80059bc:	f7ff f8e7 	bl	8004b8e <lsm6dso_read_reg>
  sprintf(uart_buffer, "LSM6DSO CTRL8_XL after set: 0x%02X\r\n", ctrl8_xl_val);
 80059c0:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80059c4:	461a      	mov	r2, r3
 80059c6:	492a      	ldr	r1, [pc, #168]	@ (8005a70 <main+0x3b0>)
 80059c8:	4826      	ldr	r0, [pc, #152]	@ (8005a64 <main+0x3a4>)
 80059ca:	f008 f889 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80059ce:	4825      	ldr	r0, [pc, #148]	@ (8005a64 <main+0x3a4>)
 80059d0:	f7fa fc6e 	bl	80002b0 <strlen>
 80059d4:	4603      	mov	r3, r0
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	f04f 33ff 	mov.w	r3, #4294967295
 80059dc:	4921      	ldr	r1, [pc, #132]	@ (8005a64 <main+0x3a4>)
 80059de:	4822      	ldr	r0, [pc, #136]	@ (8005a68 <main+0x3a8>)
 80059e0:	f006 f8b0 	bl	800bb44 <HAL_UART_Transmit>
  // ---- END DEBUG ----

  sprintf(uart_buffer, "LSM6DSO Initialized and Configured (XL:104Hz/16g, GY:104Hz/2000dps).\r\n");
 80059e4:	4923      	ldr	r1, [pc, #140]	@ (8005a74 <main+0x3b4>)
 80059e6:	481f      	ldr	r0, [pc, #124]	@ (8005a64 <main+0x3a4>)
 80059e8:	f008 f87a 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80059ec:	481d      	ldr	r0, [pc, #116]	@ (8005a64 <main+0x3a4>)
 80059ee:	f7fa fc5f 	bl	80002b0 <strlen>
 80059f2:	4603      	mov	r3, r0
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295
 80059fa:	491a      	ldr	r1, [pc, #104]	@ (8005a64 <main+0x3a4>)
 80059fc:	481a      	ldr	r0, [pc, #104]	@ (8005a68 <main+0x3a8>)
 80059fe:	f006 f8a1 	bl	800bb44 <HAL_UART_Transmit>

  // Calibrate LSM6DSO Accelerometer and Gyroscope
  sprintf(uart_buffer, "Starting LSM6DSO calibration... Keep device still and flat for a few seconds.\r\n");
 8005a02:	491d      	ldr	r1, [pc, #116]	@ (8005a78 <main+0x3b8>)
 8005a04:	4817      	ldr	r0, [pc, #92]	@ (8005a64 <main+0x3a4>)
 8005a06:	f008 f86b 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005a0a:	4816      	ldr	r0, [pc, #88]	@ (8005a64 <main+0x3a4>)
 8005a0c:	f7fa fc50 	bl	80002b0 <strlen>
 8005a10:	4603      	mov	r3, r0
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	f04f 33ff 	mov.w	r3, #4294967295
 8005a18:	4912      	ldr	r1, [pc, #72]	@ (8005a64 <main+0x3a4>)
 8005a1a:	4813      	ldr	r0, [pc, #76]	@ (8005a68 <main+0x3a8>)
 8005a1c:	f006 f892 	bl	800bb44 <HAL_UART_Transmit>

  const int lsm6dso_cal_samples = 100;
 8005a20:	2364      	movs	r3, #100	@ 0x64
 8005a22:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  float temp_accel_sum_mg[3] = {0.0f, 0.0f, 0.0f};
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  float temp_gyro_sum_mdps[3] = {0.0f, 0.0f, 0.0f};
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  int16_t raw_acc[3], raw_gyro[3];

  for (int i = 0; i < lsm6dso_cal_samples; i++) {
 8005a56:	2300      	movs	r3, #0
 8005a58:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8005a5c:	e082      	b.n	8005b64 <main+0x4a4>
 8005a5e:	bf00      	nop
 8005a60:	08012fac 	.word	0x08012fac
 8005a64:	20000ee8 	.word	0x20000ee8
 8005a68:	2000071c 	.word	0x2000071c
 8005a6c:	20000c84 	.word	0x20000c84
 8005a70:	08012fd0 	.word	0x08012fd0
 8005a74:	08012ff8 	.word	0x08012ff8
 8005a78:	08013040 	.word	0x08013040
    uint8_t reg_lsm_cal;
    do {
        lsm6dso_status_reg_get(&dev_ctx, &reg_lsm_cal);
 8005a7c:	f107 03cb 	add.w	r3, r7, #203	@ 0xcb
 8005a80:	4619      	mov	r1, r3
 8005a82:	48c4      	ldr	r0, [pc, #784]	@ (8005d94 <main+0x6d4>)
 8005a84:	f7ff fb1a 	bl	80050bc <lsm6dso_status_reg_get>
    } while (!((reg_lsm_cal & 0x01) && (reg_lsm_cal & 0x02))); // Wait for both Accel (XLDA) and Gyro (GDA) data ready
 8005a88:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f3      	beq.n	8005a7c <main+0x3bc>
 8005a94:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0ed      	beq.n	8005a7c <main+0x3bc>

    lsm6dso_acceleration_raw_get(&dev_ctx, raw_acc);
 8005aa0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	48bb      	ldr	r0, [pc, #748]	@ (8005d94 <main+0x6d4>)
 8005aa8:	f7ff fb61 	bl	800516e <lsm6dso_acceleration_raw_get>
    temp_accel_sum_mg[0] += lsm6dso_from_fs16g_to_mg(raw_acc[0]);
 8005aac:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	@ 0xe4
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff fdd3 	bl	800565c <lsm6dso_from_fs16g_to_mg>
 8005ab6:	eeb0 7a40 	vmov.f32	s14, s0
 8005aba:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8005abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac2:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
    temp_accel_sum_mg[1] += lsm6dso_from_fs16g_to_mg(raw_acc[1]);
 8005ac6:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	@ 0xe6
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fdc6 	bl	800565c <lsm6dso_from_fs16g_to_mg>
 8005ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8005ad4:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8005ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005adc:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
    temp_accel_sum_mg[2] += lsm6dso_from_fs16g_to_mg(raw_acc[2]);
 8005ae0:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	@ 0xe8
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fdb9 	bl	800565c <lsm6dso_from_fs16g_to_mg>
 8005aea:	eeb0 7a40 	vmov.f32	s14, s0
 8005aee:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8005af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af6:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100

    lsm6dso_angular_rate_raw_get(&dev_ctx, raw_gyro);
 8005afa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8005afe:	4619      	mov	r1, r3
 8005b00:	48a4      	ldr	r0, [pc, #656]	@ (8005d94 <main+0x6d4>)
 8005b02:	f7ff faec 	bl	80050de <lsm6dso_angular_rate_raw_get>
    temp_gyro_sum_mdps[0] += lsm6dso_from_fs2000dps_to_mdps(raw_gyro[0]);
 8005b06:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fdc0 	bl	8005690 <lsm6dso_from_fs2000dps_to_mdps>
 8005b10:	eeb0 7a40 	vmov.f32	s14, s0
 8005b14:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8005b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b1c:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
    temp_gyro_sum_mdps[1] += lsm6dso_from_fs2000dps_to_mdps(raw_gyro[1]);
 8005b20:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff fdb3 	bl	8005690 <lsm6dso_from_fs2000dps_to_mdps>
 8005b2a:	eeb0 7a40 	vmov.f32	s14, s0
 8005b2e:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8005b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b36:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0
    temp_gyro_sum_mdps[2] += lsm6dso_from_fs2000dps_to_mdps(raw_gyro[2]);
 8005b3a:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fda6 	bl	8005690 <lsm6dso_from_fs2000dps_to_mdps>
 8005b44:	eeb0 7a40 	vmov.f32	s14, s0
 8005b48:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8005b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b50:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4

    HAL_Delay(10); // Delay between samples (LSM6DSO ODR is ~104Hz, so new data every ~9.6ms)
 8005b54:	200a      	movs	r0, #10
 8005b56:	f002 fabf 	bl	80080d8 <HAL_Delay>
  for (int i = 0; i < lsm6dso_cal_samples; i++) {
 8005b5a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8005b64:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005b68:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	db85      	blt.n	8005a7c <main+0x3bc>
  }

  lsm6dso_accel_offset_mg[0] = temp_accel_sum_mg[0] / lsm6dso_cal_samples;
 8005b70:	edd7 6a3e 	vldr	s13, [r7, #248]	@ 0xf8
 8005b74:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b84:	4b84      	ldr	r3, [pc, #528]	@ (8005d98 <main+0x6d8>)
 8005b86:	edc3 7a00 	vstr	s15, [r3]
  lsm6dso_accel_offset_mg[1] = temp_accel_sum_mg[1] / lsm6dso_cal_samples;
 8005b8a:	edd7 6a3f 	vldr	s13, [r7, #252]	@ 0xfc
 8005b8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b9e:	4b7e      	ldr	r3, [pc, #504]	@ (8005d98 <main+0x6d8>)
 8005ba0:	edc3 7a01 	vstr	s15, [r3, #4]
  lsm6dso_accel_offset_mg[2] = (temp_accel_sum_mg[2] / lsm6dso_cal_samples) - 1000.0f; // Assuming Z-axis is UP, expecting +1g (1000mg)
 8005ba4:	edd7 6a40 	vldr	s13, [r7, #256]	@ 0x100
 8005ba8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb8:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8005d9c <main+0x6dc>
 8005bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bc0:	4b75      	ldr	r3, [pc, #468]	@ (8005d98 <main+0x6d8>)
 8005bc2:	edc3 7a02 	vstr	s15, [r3, #8]

  lsm6dso_gyro_offset_mdps[0] = temp_gyro_sum_mdps[0] / lsm6dso_cal_samples;
 8005bc6:	edd7 6a3b 	vldr	s13, [r7, #236]	@ 0xec
 8005bca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bda:	4b71      	ldr	r3, [pc, #452]	@ (8005da0 <main+0x6e0>)
 8005bdc:	edc3 7a00 	vstr	s15, [r3]
  lsm6dso_gyro_offset_mdps[1] = temp_gyro_sum_mdps[1] / lsm6dso_cal_samples;
 8005be0:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 8005be4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005be8:	ee07 3a90 	vmov	s15, r3
 8005bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8005da0 <main+0x6e0>)
 8005bf6:	edc3 7a01 	vstr	s15, [r3, #4]
  lsm6dso_gyro_offset_mdps[2] = temp_gyro_sum_mdps[2] / lsm6dso_cal_samples;
 8005bfa:	edd7 6a3d 	vldr	s13, [r7, #244]	@ 0xf4
 8005bfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c0e:	4b64      	ldr	r3, [pc, #400]	@ (8005da0 <main+0x6e0>)
 8005c10:	edc3 7a02 	vstr	s15, [r3, #8]

  sprintf(uart_buffer, "LSM6DSO Calibration Complete.\r\n");
 8005c14:	4963      	ldr	r1, [pc, #396]	@ (8005da4 <main+0x6e4>)
 8005c16:	4864      	ldr	r0, [pc, #400]	@ (8005da8 <main+0x6e8>)
 8005c18:	f007 ff62 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005c1c:	4862      	ldr	r0, [pc, #392]	@ (8005da8 <main+0x6e8>)
 8005c1e:	f7fa fb47 	bl	80002b0 <strlen>
 8005c22:	4603      	mov	r3, r0
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2a:	495f      	ldr	r1, [pc, #380]	@ (8005da8 <main+0x6e8>)
 8005c2c:	485f      	ldr	r0, [pc, #380]	@ (8005dac <main+0x6ec>)
 8005c2e:	f005 ff89 	bl	800bb44 <HAL_UART_Transmit>
  sprintf(uart_buffer, "  Accel Offsets (mg): X: %.2f, Y: %.2f, Z: %.2f\r\n", 
          lsm6dso_accel_offset_mg[0], lsm6dso_accel_offset_mg[1], lsm6dso_accel_offset_mg[2]);
 8005c32:	4b59      	ldr	r3, [pc, #356]	@ (8005d98 <main+0x6d8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
  sprintf(uart_buffer, "  Accel Offsets (mg): X: %.2f, Y: %.2f, Z: %.2f\r\n", 
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fa fca6 	bl	8000588 <__aeabi_f2d>
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	4689      	mov	r9, r1
          lsm6dso_accel_offset_mg[0], lsm6dso_accel_offset_mg[1], lsm6dso_accel_offset_mg[2]);
 8005c40:	4b55      	ldr	r3, [pc, #340]	@ (8005d98 <main+0x6d8>)
 8005c42:	685b      	ldr	r3, [r3, #4]
  sprintf(uart_buffer, "  Accel Offsets (mg): X: %.2f, Y: %.2f, Z: %.2f\r\n", 
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fa fc9f 	bl	8000588 <__aeabi_f2d>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
          lsm6dso_accel_offset_mg[0], lsm6dso_accel_offset_mg[1], lsm6dso_accel_offset_mg[2]);
 8005c4e:	4b52      	ldr	r3, [pc, #328]	@ (8005d98 <main+0x6d8>)
 8005c50:	689b      	ldr	r3, [r3, #8]
  sprintf(uart_buffer, "  Accel Offsets (mg): X: %.2f, Y: %.2f, Z: %.2f\r\n", 
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fa fc98 	bl	8000588 <__aeabi_f2d>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c60:	e9cd 4500 	strd	r4, r5, [sp]
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	4951      	ldr	r1, [pc, #324]	@ (8005db0 <main+0x6f0>)
 8005c6a:	484f      	ldr	r0, [pc, #316]	@ (8005da8 <main+0x6e8>)
 8005c6c:	f007 ff38 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005c70:	484d      	ldr	r0, [pc, #308]	@ (8005da8 <main+0x6e8>)
 8005c72:	f7fa fb1d 	bl	80002b0 <strlen>
 8005c76:	4603      	mov	r3, r0
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7e:	494a      	ldr	r1, [pc, #296]	@ (8005da8 <main+0x6e8>)
 8005c80:	484a      	ldr	r0, [pc, #296]	@ (8005dac <main+0x6ec>)
 8005c82:	f005 ff5f 	bl	800bb44 <HAL_UART_Transmit>
  sprintf(uart_buffer, "  Gyro Offsets (mdps): X: %.2f, Y: %.2f, Z: %.2f\r\n", 
          lsm6dso_gyro_offset_mdps[0], lsm6dso_gyro_offset_mdps[1], lsm6dso_gyro_offset_mdps[2]);
 8005c86:	4b46      	ldr	r3, [pc, #280]	@ (8005da0 <main+0x6e0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
  sprintf(uart_buffer, "  Gyro Offsets (mdps): X: %.2f, Y: %.2f, Z: %.2f\r\n", 
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fa fc7c 	bl	8000588 <__aeabi_f2d>
 8005c90:	4680      	mov	r8, r0
 8005c92:	4689      	mov	r9, r1
          lsm6dso_gyro_offset_mdps[0], lsm6dso_gyro_offset_mdps[1], lsm6dso_gyro_offset_mdps[2]);
 8005c94:	4b42      	ldr	r3, [pc, #264]	@ (8005da0 <main+0x6e0>)
 8005c96:	685b      	ldr	r3, [r3, #4]
  sprintf(uart_buffer, "  Gyro Offsets (mdps): X: %.2f, Y: %.2f, Z: %.2f\r\n", 
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fa fc75 	bl	8000588 <__aeabi_f2d>
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	460d      	mov	r5, r1
          lsm6dso_gyro_offset_mdps[0], lsm6dso_gyro_offset_mdps[1], lsm6dso_gyro_offset_mdps[2]);
 8005ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8005da0 <main+0x6e0>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
  sprintf(uart_buffer, "  Gyro Offsets (mdps): X: %.2f, Y: %.2f, Z: %.2f\r\n", 
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fa fc6e 	bl	8000588 <__aeabi_f2d>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cb4:	e9cd 4500 	strd	r4, r5, [sp]
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	493d      	ldr	r1, [pc, #244]	@ (8005db4 <main+0x6f4>)
 8005cbe:	483a      	ldr	r0, [pc, #232]	@ (8005da8 <main+0x6e8>)
 8005cc0:	f007 ff0e 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005cc4:	4838      	ldr	r0, [pc, #224]	@ (8005da8 <main+0x6e8>)
 8005cc6:	f7fa faf3 	bl	80002b0 <strlen>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	4935      	ldr	r1, [pc, #212]	@ (8005da8 <main+0x6e8>)
 8005cd4:	4835      	ldr	r0, [pc, #212]	@ (8005dac <main+0x6ec>)
 8005cd6:	f005 ff35 	bl	800bb44 <HAL_UART_Transmit>

  // Initialize BMP390 using the new driver
  DRIVER_BMP390_LINK_INIT(&bmp390_handle, bmp390_handle_t);
 8005cda:	f44f 7214 	mov.w	r2, #592	@ 0x250
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4835      	ldr	r0, [pc, #212]	@ (8005db8 <main+0x6f8>)
 8005ce2:	f007 ff9f 	bl	800dc24 <memset>
  DRIVER_BMP390_LINK_IIC_INIT(&bmp390_handle, bmp390_i2c_interface_init);
 8005ce6:	4b34      	ldr	r3, [pc, #208]	@ (8005db8 <main+0x6f8>)
 8005ce8:	4a34      	ldr	r2, [pc, #208]	@ (8005dbc <main+0x6fc>)
 8005cea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  DRIVER_BMP390_LINK_IIC_DEINIT(&bmp390_handle, bmp390_i2c_interface_deinit);
 8005cee:	4b32      	ldr	r3, [pc, #200]	@ (8005db8 <main+0x6f8>)
 8005cf0:	4a33      	ldr	r2, [pc, #204]	@ (8005dc0 <main+0x700>)
 8005cf2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  DRIVER_BMP390_LINK_IIC_READ(&bmp390_handle, bmp390_i2c_read);
 8005cf6:	4b30      	ldr	r3, [pc, #192]	@ (8005db8 <main+0x6f8>)
 8005cf8:	4a32      	ldr	r2, [pc, #200]	@ (8005dc4 <main+0x704>)
 8005cfa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  DRIVER_BMP390_LINK_IIC_WRITE(&bmp390_handle, bmp390_i2c_write);
 8005cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8005db8 <main+0x6f8>)
 8005d00:	4a31      	ldr	r2, [pc, #196]	@ (8005dc8 <main+0x708>)
 8005d02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  DRIVER_BMP390_LINK_DELAY_MS(&bmp390_handle, bmp390_delay_ms);
 8005d06:	4b2c      	ldr	r3, [pc, #176]	@ (8005db8 <main+0x6f8>)
 8005d08:	4a30      	ldr	r2, [pc, #192]	@ (8005dcc <main+0x70c>)
 8005d0a:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
  DRIVER_BMP390_LINK_DEBUG_PRINT(&bmp390_handle, bmp390_debug_print);
 8005d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005db8 <main+0x6f8>)
 8005d10:	4a2f      	ldr	r2, [pc, #188]	@ (8005dd0 <main+0x710>)
 8005d12:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c

  // Link dummy SPI functions as well, even if not used, to satisfy driver checks
  DRIVER_BMP390_LINK_SPI_INIT(&bmp390_handle, bmp390_spi_interface_init);
 8005d16:	4b28      	ldr	r3, [pc, #160]	@ (8005db8 <main+0x6f8>)
 8005d18:	4a2e      	ldr	r2, [pc, #184]	@ (8005dd4 <main+0x714>)
 8005d1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  DRIVER_BMP390_LINK_SPI_DEINIT(&bmp390_handle, bmp390_spi_interface_deinit);
 8005d1e:	4b26      	ldr	r3, [pc, #152]	@ (8005db8 <main+0x6f8>)
 8005d20:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd8 <main+0x718>)
 8005d22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  DRIVER_BMP390_LINK_SPI_READ(&bmp390_handle, bmp390_spi_read);
 8005d26:	4b24      	ldr	r3, [pc, #144]	@ (8005db8 <main+0x6f8>)
 8005d28:	4a2c      	ldr	r2, [pc, #176]	@ (8005ddc <main+0x71c>)
 8005d2a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
  DRIVER_BMP390_LINK_SPI_WRITE(&bmp390_handle, bmp390_spi_write);
 8005d2e:	4b22      	ldr	r3, [pc, #136]	@ (8005db8 <main+0x6f8>)
 8005d30:	4a2b      	ldr	r2, [pc, #172]	@ (8005de0 <main+0x720>)
 8005d32:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

  bmp390_set_interface(&bmp390_handle, BMP390_INTERFACE_IIC);
 8005d36:	2100      	movs	r1, #0
 8005d38:	481f      	ldr	r0, [pc, #124]	@ (8005db8 <main+0x6f8>)
 8005d3a:	f7fe fa5e 	bl	80041fa <bmp390_set_interface>
  // IMPORTANT: Set the correct I2C address based on your SDO/AD0 pin connection
  bmp390_set_addr_pin(&bmp390_handle, BMP390_ADDRESS_ADO_HIGH); // Corrected: Use 0x77 as detected by scan
 8005d3e:	21ee      	movs	r1, #238	@ 0xee
 8005d40:	481d      	ldr	r0, [pc, #116]	@ (8005db8 <main+0x6f8>)
 8005d42:	f7fe fa45 	bl	80041d0 <bmp390_set_addr_pin>

  sprintf(uart_buffer, "Initializing BMP390 (new driver)...\r\n");
 8005d46:	4927      	ldr	r1, [pc, #156]	@ (8005de4 <main+0x724>)
 8005d48:	4817      	ldr	r0, [pc, #92]	@ (8005da8 <main+0x6e8>)
 8005d4a:	f007 fec9 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005d4e:	4816      	ldr	r0, [pc, #88]	@ (8005da8 <main+0x6e8>)
 8005d50:	f7fa faae 	bl	80002b0 <strlen>
 8005d54:	4603      	mov	r3, r0
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	f04f 33ff 	mov.w	r3, #4294967295
 8005d5c:	4912      	ldr	r1, [pc, #72]	@ (8005da8 <main+0x6e8>)
 8005d5e:	4813      	ldr	r0, [pc, #76]	@ (8005dac <main+0x6ec>)
 8005d60:	f005 fef0 	bl	800bb44 <HAL_UART_Transmit>

  if (bmp390_init(&bmp390_handle) != 0) {
 8005d64:	4814      	ldr	r0, [pc, #80]	@ (8005db8 <main+0x6f8>)
 8005d66:	f7fd fee7 	bl	8003b38 <bmp390_init>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d03d      	beq.n	8005dec <main+0x72c>
      sprintf(uart_buffer, "BMP390 new driver initialization FAILED!\r\n");
 8005d70:	491d      	ldr	r1, [pc, #116]	@ (8005de8 <main+0x728>)
 8005d72:	480d      	ldr	r0, [pc, #52]	@ (8005da8 <main+0x6e8>)
 8005d74:	f007 feb4 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005d78:	480b      	ldr	r0, [pc, #44]	@ (8005da8 <main+0x6e8>)
 8005d7a:	f7fa fa99 	bl	80002b0 <strlen>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
 8005d86:	4908      	ldr	r1, [pc, #32]	@ (8005da8 <main+0x6e8>)
 8005d88:	4808      	ldr	r0, [pc, #32]	@ (8005dac <main+0x6ec>)
 8005d8a:	f005 fedb 	bl	800bb44 <HAL_UART_Transmit>
      Error_Handler();
 8005d8e:	f001 fd97 	bl	80078c0 <Error_Handler>
 8005d92:	e0e9      	b.n	8005f68 <main+0x8a8>
 8005d94:	20000c84 	.word	0x20000c84
 8005d98:	20000fec 	.word	0x20000fec
 8005d9c:	447a0000 	.word	0x447a0000
 8005da0:	20000ff8 	.word	0x20000ff8
 8005da4:	08013090 	.word	0x08013090
 8005da8:	20000ee8 	.word	0x20000ee8
 8005dac:	2000071c 	.word	0x2000071c
 8005db0:	080130b0 	.word	0x080130b0
 8005db4:	080130e4 	.word	0x080130e4
 8005db8:	20000c98 	.word	0x20000c98
 8005dbc:	08005449 	.word	0x08005449
 8005dc0:	08005459 	.word	0x08005459
 8005dc4:	08005469 	.word	0x08005469
 8005dc8:	080054b5 	.word	0x080054b5
 8005dcc:	08005501 	.word	0x08005501
 8005dd0:	08005573 	.word	0x08005573
 8005dd4:	08005517 	.word	0x08005517
 8005dd8:	08005527 	.word	0x08005527
 8005ddc:	08005537 	.word	0x08005537
 8005de0:	08005555 	.word	0x08005555
 8005de4:	08013118 	.word	0x08013118
 8005de8:	08013140 	.word	0x08013140
  } else {
      sprintf(uart_buffer, "BMP390 new driver initialized successfully!\r\n");
 8005dec:	4994      	ldr	r1, [pc, #592]	@ (8006040 <main+0x980>)
 8005dee:	4895      	ldr	r0, [pc, #596]	@ (8006044 <main+0x984>)
 8005df0:	f007 fe76 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005df4:	4893      	ldr	r0, [pc, #588]	@ (8006044 <main+0x984>)
 8005df6:	f7fa fa5b 	bl	80002b0 <strlen>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005e02:	4990      	ldr	r1, [pc, #576]	@ (8006044 <main+0x984>)
 8005e04:	4890      	ldr	r0, [pc, #576]	@ (8006048 <main+0x988>)
 8005e06:	f005 fe9d 	bl	800bb44 <HAL_UART_Transmit>

      // Configure sensor settings
      sprintf(uart_buffer, "Configuring BMP390...\r\n");
 8005e0a:	4990      	ldr	r1, [pc, #576]	@ (800604c <main+0x98c>)
 8005e0c:	488d      	ldr	r0, [pc, #564]	@ (8006044 <main+0x984>)
 8005e0e:	f007 fe67 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005e12:	488c      	ldr	r0, [pc, #560]	@ (8006044 <main+0x984>)
 8005e14:	f7fa fa4c 	bl	80002b0 <strlen>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e20:	4988      	ldr	r1, [pc, #544]	@ (8006044 <main+0x984>)
 8005e22:	4889      	ldr	r0, [pc, #548]	@ (8006048 <main+0x988>)
 8005e24:	f005 fe8e 	bl	800bb44 <HAL_UART_Transmit>

      if (bmp390_set_pressure_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x8) != 0) {
 8005e28:	2103      	movs	r1, #3
 8005e2a:	4889      	ldr	r0, [pc, #548]	@ (8006050 <main+0x990>)
 8005e2c:	f7fd fd6c 	bl	8003908 <bmp390_set_pressure_oversampling>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <main+0x798>
          sprintf(uart_buffer, "BMP390: Failed to set pressure oversampling\r\n");
 8005e36:	4987      	ldr	r1, [pc, #540]	@ (8006054 <main+0x994>)
 8005e38:	4882      	ldr	r0, [pc, #520]	@ (8006044 <main+0x984>)
 8005e3a:	f007 fe51 	bl	800dae0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8005e3e:	4881      	ldr	r0, [pc, #516]	@ (8006044 <main+0x984>)
 8005e40:	f7fa fa36 	bl	80002b0 <strlen>
 8005e44:	4603      	mov	r3, r0
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4c:	497d      	ldr	r1, [pc, #500]	@ (8006044 <main+0x984>)
 8005e4e:	487e      	ldr	r0, [pc, #504]	@ (8006048 <main+0x988>)
 8005e50:	f005 fe78 	bl	800bb44 <HAL_UART_Transmit>
 8005e54:	f001 fd34 	bl	80078c0 <Error_Handler>
      }
      if (bmp390_set_temperature_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x1) != 0) {
 8005e58:	2100      	movs	r1, #0
 8005e5a:	487d      	ldr	r0, [pc, #500]	@ (8006050 <main+0x990>)
 8005e5c:	f7fd fda0 	bl	80039a0 <bmp390_set_temperature_oversampling>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d010      	beq.n	8005e88 <main+0x7c8>
          sprintf(uart_buffer, "BMP390: Failed to set temperature oversampling\r\n");
 8005e66:	497c      	ldr	r1, [pc, #496]	@ (8006058 <main+0x998>)
 8005e68:	4876      	ldr	r0, [pc, #472]	@ (8006044 <main+0x984>)
 8005e6a:	f007 fe39 	bl	800dae0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8005e6e:	4875      	ldr	r0, [pc, #468]	@ (8006044 <main+0x984>)
 8005e70:	f7fa fa1e 	bl	80002b0 <strlen>
 8005e74:	4603      	mov	r3, r0
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7c:	4971      	ldr	r1, [pc, #452]	@ (8006044 <main+0x984>)
 8005e7e:	4872      	ldr	r0, [pc, #456]	@ (8006048 <main+0x988>)
 8005e80:	f005 fe60 	bl	800bb44 <HAL_UART_Transmit>
 8005e84:	f001 fd1c 	bl	80078c0 <Error_Handler>
      }
      if (bmp390_set_odr(&bmp390_handle, BMP390_ODR_25_HZ) != 0) { // Revert to 25 Hz ODR
 8005e88:	2103      	movs	r1, #3
 8005e8a:	4871      	ldr	r0, [pc, #452]	@ (8006050 <main+0x990>)
 8005e8c:	f7fd fdd8 	bl	8003a40 <bmp390_set_odr>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d010      	beq.n	8005eb8 <main+0x7f8>
          sprintf(uart_buffer, "BMP390: Failed to set ODR to 25Hz\r\n");
 8005e96:	4971      	ldr	r1, [pc, #452]	@ (800605c <main+0x99c>)
 8005e98:	486a      	ldr	r0, [pc, #424]	@ (8006044 <main+0x984>)
 8005e9a:	f007 fe21 	bl	800dae0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8005e9e:	4869      	ldr	r0, [pc, #420]	@ (8006044 <main+0x984>)
 8005ea0:	f7fa fa06 	bl	80002b0 <strlen>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eac:	4965      	ldr	r1, [pc, #404]	@ (8006044 <main+0x984>)
 8005eae:	4866      	ldr	r0, [pc, #408]	@ (8006048 <main+0x988>)
 8005eb0:	f005 fe48 	bl	800bb44 <HAL_UART_Transmit>
 8005eb4:	f001 fd04 	bl	80078c0 <Error_Handler>
      }
      if (bmp390_set_pressure(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable pressure
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4865      	ldr	r0, [pc, #404]	@ (8006050 <main+0x990>)
 8005ebc:	f7fd fc38 	bl	8003730 <bmp390_set_pressure>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d010      	beq.n	8005ee8 <main+0x828>
          sprintf(uart_buffer, "BMP390: Failed to enable pressure measurement\r\n");
 8005ec6:	4966      	ldr	r1, [pc, #408]	@ (8006060 <main+0x9a0>)
 8005ec8:	485e      	ldr	r0, [pc, #376]	@ (8006044 <main+0x984>)
 8005eca:	f007 fe09 	bl	800dae0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8005ece:	485d      	ldr	r0, [pc, #372]	@ (8006044 <main+0x984>)
 8005ed0:	f7fa f9ee 	bl	80002b0 <strlen>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	4959      	ldr	r1, [pc, #356]	@ (8006044 <main+0x984>)
 8005ede:	485a      	ldr	r0, [pc, #360]	@ (8006048 <main+0x988>)
 8005ee0:	f005 fe30 	bl	800bb44 <HAL_UART_Transmit>
 8005ee4:	f001 fcec 	bl	80078c0 <Error_Handler>
      }
      if (bmp390_set_temperature(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable temperature
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4859      	ldr	r0, [pc, #356]	@ (8006050 <main+0x990>)
 8005eec:	f7fd fc6c 	bl	80037c8 <bmp390_set_temperature>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d010      	beq.n	8005f18 <main+0x858>
          sprintf(uart_buffer, "BMP390: Failed to enable temperature measurement\r\n");
 8005ef6:	495b      	ldr	r1, [pc, #364]	@ (8006064 <main+0x9a4>)
 8005ef8:	4852      	ldr	r0, [pc, #328]	@ (8006044 <main+0x984>)
 8005efa:	f007 fdf1 	bl	800dae0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8005efe:	4851      	ldr	r0, [pc, #324]	@ (8006044 <main+0x984>)
 8005f00:	f7fa f9d6 	bl	80002b0 <strlen>
 8005f04:	4603      	mov	r3, r0
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0c:	494d      	ldr	r1, [pc, #308]	@ (8006044 <main+0x984>)
 8005f0e:	484e      	ldr	r0, [pc, #312]	@ (8006048 <main+0x988>)
 8005f10:	f005 fe18 	bl	800bb44 <HAL_UART_Transmit>
 8005f14:	f001 fcd4 	bl	80078c0 <Error_Handler>
      }
      if (bmp390_set_mode(&bmp390_handle, BMP390_MODE_NORMAL_MODE) != 0) {
 8005f18:	2103      	movs	r1, #3
 8005f1a:	484d      	ldr	r0, [pc, #308]	@ (8006050 <main+0x990>)
 8005f1c:	f7fd fca4 	bl	8003868 <bmp390_set_mode>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d011      	beq.n	8005f4a <main+0x88a>
          sprintf(uart_buffer, "BMP390: Failed to set normal mode!\r\n");
 8005f26:	4950      	ldr	r1, [pc, #320]	@ (8006068 <main+0x9a8>)
 8005f28:	4846      	ldr	r0, [pc, #280]	@ (8006044 <main+0x984>)
 8005f2a:	f007 fdd9 	bl	800dae0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8005f2e:	4845      	ldr	r0, [pc, #276]	@ (8006044 <main+0x984>)
 8005f30:	f7fa f9be 	bl	80002b0 <strlen>
 8005f34:	4603      	mov	r3, r0
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3c:	4941      	ldr	r1, [pc, #260]	@ (8006044 <main+0x984>)
 8005f3e:	4842      	ldr	r0, [pc, #264]	@ (8006048 <main+0x988>)
 8005f40:	f005 fe00 	bl	800bb44 <HAL_UART_Transmit>
 8005f44:	f001 fcbc 	bl	80078c0 <Error_Handler>
 8005f48:	e00e      	b.n	8005f68 <main+0x8a8>
      } else {
          sprintf(uart_buffer, "BMP390 configured for Normal Mode (P_OSR_x8, T_OSR_x1, ODR_25Hz).\r\n");
 8005f4a:	4948      	ldr	r1, [pc, #288]	@ (800606c <main+0x9ac>)
 8005f4c:	483d      	ldr	r0, [pc, #244]	@ (8006044 <main+0x984>)
 8005f4e:	f007 fdc7 	bl	800dae0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005f52:	483c      	ldr	r0, [pc, #240]	@ (8006044 <main+0x984>)
 8005f54:	f7fa f9ac 	bl	80002b0 <strlen>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f60:	4938      	ldr	r1, [pc, #224]	@ (8006044 <main+0x984>)
 8005f62:	4839      	ldr	r0, [pc, #228]	@ (8006048 <main+0x988>)
 8005f64:	f005 fdee 	bl	800bb44 <HAL_UART_Transmit>
      }
  }

  HAL_Delay(200); // Wait for sensor to stabilize and take first readings after mode set
 8005f68:	20c8      	movs	r0, #200	@ 0xc8
 8005f6a:	f002 f8b5 	bl	80080d8 <HAL_Delay>

  float initial_pressure_pa_sum = 0;
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  float initial_temperature_c_sum = 0;
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  int valid_calibration_readings = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  uint32_t cal_raw_p, cal_raw_t;
  float cal_p_pa, cal_t_c; // Pressure in Pa, Temp in Celsius

  sprintf(uart_buffer, "Calibrating BMP390 for altitude (takes a few readings)...\r\n");
 8005f84:	493a      	ldr	r1, [pc, #232]	@ (8006070 <main+0x9b0>)
 8005f86:	482f      	ldr	r0, [pc, #188]	@ (8006044 <main+0x984>)
 8005f88:	f007 fdaa 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8005f8c:	482d      	ldr	r0, [pc, #180]	@ (8006044 <main+0x984>)
 8005f8e:	f7fa f98f 	bl	80002b0 <strlen>
 8005f92:	4603      	mov	r3, r0
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9a:	492a      	ldr	r1, [pc, #168]	@ (8006044 <main+0x984>)
 8005f9c:	482a      	ldr	r0, [pc, #168]	@ (8006048 <main+0x988>)
 8005f9e:	f005 fdd1 	bl	800bb44 <HAL_UART_Transmit>

  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8005fa8:	e081      	b.n	80060ae <main+0x9ee>
      if (bmp390_read_temperature_pressure(&bmp390_handle, &cal_raw_t, &cal_t_c, &cal_raw_p, &cal_p_pa) == 0) {
 8005faa:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8005fae:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 8005fb2:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8005fb6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	4824      	ldr	r0, [pc, #144]	@ (8006050 <main+0x990>)
 8005fc0:	f7fd fef2 	bl	8003da8 <bmp390_read_temperature_pressure>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d156      	bne.n	8006078 <main+0x9b8>
          initial_pressure_pa_sum += cal_p_pa;
 8005fca:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8005fce:	ed97 7a65 	vldr	s14, [r7, #404]	@ 0x194
 8005fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fd6:	edc7 7a65 	vstr	s15, [r7, #404]	@ 0x194
          initial_temperature_c_sum += cal_t_c;
 8005fda:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8005fde:	ed97 7a64 	vldr	s14, [r7, #400]	@ 0x190
 8005fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fe6:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
          valid_calibration_readings++;
 8005fea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005fee:	3301      	adds	r3, #1
 8005ff0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
          sprintf(uart_buffer, "Calib reading %d: P=%.2f Pa, T=%.2f C\r\n", i + 1, cal_p_pa, cal_t_c);
 8005ff4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005ff8:	1c5e      	adds	r6, r3, #1
 8005ffa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fa fac2 	bl	8000588 <__aeabi_f2d>
 8006004:	4604      	mov	r4, r0
 8006006:	460d      	mov	r5, r1
 8006008:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa fabb 	bl	8000588 <__aeabi_f2d>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800601a:	e9cd 4500 	strd	r4, r5, [sp]
 800601e:	4632      	mov	r2, r6
 8006020:	4914      	ldr	r1, [pc, #80]	@ (8006074 <main+0x9b4>)
 8006022:	4808      	ldr	r0, [pc, #32]	@ (8006044 <main+0x984>)
 8006024:	f007 fd5c 	bl	800dae0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8006028:	4806      	ldr	r0, [pc, #24]	@ (8006044 <main+0x984>)
 800602a:	f7fa f941 	bl	80002b0 <strlen>
 800602e:	4603      	mov	r3, r0
 8006030:	b29a      	uxth	r2, r3
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	4903      	ldr	r1, [pc, #12]	@ (8006044 <main+0x984>)
 8006038:	4803      	ldr	r0, [pc, #12]	@ (8006048 <main+0x988>)
 800603a:	f005 fd83 	bl	800bb44 <HAL_UART_Transmit>
 800603e:	e02e      	b.n	800609e <main+0x9de>
 8006040:	0801316c 	.word	0x0801316c
 8006044:	20000ee8 	.word	0x20000ee8
 8006048:	2000071c 	.word	0x2000071c
 800604c:	0801319c 	.word	0x0801319c
 8006050:	20000c98 	.word	0x20000c98
 8006054:	080131b4 	.word	0x080131b4
 8006058:	080131e4 	.word	0x080131e4
 800605c:	08013218 	.word	0x08013218
 8006060:	0801323c 	.word	0x0801323c
 8006064:	0801326c 	.word	0x0801326c
 8006068:	080132a0 	.word	0x080132a0
 800606c:	080132c8 	.word	0x080132c8
 8006070:	0801330c 	.word	0x0801330c
 8006074:	08013348 	.word	0x08013348
      } else {
          sprintf(uart_buffer, "Calibration reading %d failed.\r\n", i + 1);
 8006078:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800607c:	3301      	adds	r3, #1
 800607e:	461a      	mov	r2, r3
 8006080:	49c7      	ldr	r1, [pc, #796]	@ (80063a0 <main+0xce0>)
 8006082:	48c8      	ldr	r0, [pc, #800]	@ (80063a4 <main+0xce4>)
 8006084:	f007 fd2c 	bl	800dae0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8006088:	48c6      	ldr	r0, [pc, #792]	@ (80063a4 <main+0xce4>)
 800608a:	f7fa f911 	bl	80002b0 <strlen>
 800608e:	4603      	mov	r3, r0
 8006090:	b29a      	uxth	r2, r3
 8006092:	f04f 33ff 	mov.w	r3, #4294967295
 8006096:	49c3      	ldr	r1, [pc, #780]	@ (80063a4 <main+0xce4>)
 8006098:	48c3      	ldr	r0, [pc, #780]	@ (80063a8 <main+0xce8>)
 800609a:	f005 fd53 	bl	800bb44 <HAL_UART_Transmit>
      }
      HAL_Delay(100); // Delay between readings (adjust based on ODR if necessary)
 800609e:	2064      	movs	r0, #100	@ 0x64
 80060a0:	f002 f81a 	bl	80080d8 <HAL_Delay>
  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 80060a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80060a8:	3301      	adds	r3, #1
 80060aa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80060ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	f77f af79 	ble.w	8005faa <main+0x8ea>
  }

  if (valid_calibration_readings > 0) {
 80060b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dd50      	ble.n	8006162 <main+0xaa2>
      float avg_initial_pressure_pa = initial_pressure_pa_sum / valid_calibration_readings;
 80060c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060cc:	edd7 6a65 	vldr	s13, [r7, #404]	@ 0x194
 80060d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060d4:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
      float avg_initial_temperature_c = initial_temperature_c_sum / valid_calibration_readings;
 80060d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80060dc:	ee07 3a90 	vmov	s15, r3
 80060e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060e4:	edd7 6a64 	vldr	s13, [r7, #400]	@ 0x190
 80060e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ec:	edc7 7a54 	vstr	s15, [r7, #336]	@ 0x150
      float known_initial_altitude_m = 0.0f; // Assume starting at 0m altitude for calibration
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

      calibrate_sea_level_pressure_hpa(avg_initial_pressure_pa / 100.0f, known_initial_altitude_m); // Convert Pa to hPa
 80060f8:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 80060fc:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80063ac <main+0xcec>
 8006100:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006104:	edd7 0a53 	vldr	s1, [r7, #332]	@ 0x14c
 8006108:	eeb0 0a47 	vmov.f32	s0, s14
 800610c:	f7ff fa48 	bl	80055a0 <calibrate_sea_level_pressure_hpa>

      sprintf(uart_buffer, "BMP390 Calibrated. Avg P: %.2f Pa, Avg T: %.2f C. Sea Level P: %.2f hPa\r\n",
 8006110:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8006114:	f7fa fa38 	bl	8000588 <__aeabi_f2d>
 8006118:	4680      	mov	r8, r0
 800611a:	4689      	mov	r9, r1
 800611c:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8006120:	f7fa fa32 	bl	8000588 <__aeabi_f2d>
 8006124:	4604      	mov	r4, r0
 8006126:	460d      	mov	r5, r1
 8006128:	4ba1      	ldr	r3, [pc, #644]	@ (80063b0 <main+0xcf0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa fa2b 	bl	8000588 <__aeabi_f2d>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800613a:	e9cd 4500 	strd	r4, r5, [sp]
 800613e:	4642      	mov	r2, r8
 8006140:	464b      	mov	r3, r9
 8006142:	499c      	ldr	r1, [pc, #624]	@ (80063b4 <main+0xcf4>)
 8006144:	4897      	ldr	r0, [pc, #604]	@ (80063a4 <main+0xce4>)
 8006146:	f007 fccb 	bl	800dae0 <siprintf>
              avg_initial_pressure_pa, avg_initial_temperature_c, sea_level_pressure_hpa);
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800614a:	4896      	ldr	r0, [pc, #600]	@ (80063a4 <main+0xce4>)
 800614c:	f7fa f8b0 	bl	80002b0 <strlen>
 8006150:	4603      	mov	r3, r0
 8006152:	b29a      	uxth	r2, r3
 8006154:	f04f 33ff 	mov.w	r3, #4294967295
 8006158:	4992      	ldr	r1, [pc, #584]	@ (80063a4 <main+0xce4>)
 800615a:	4893      	ldr	r0, [pc, #588]	@ (80063a8 <main+0xce8>)
 800615c:	f005 fcf2 	bl	800bb44 <HAL_UART_Transmit>
 8006160:	e011      	b.n	8006186 <main+0xac6>
  } else {
      sprintf(uart_buffer, "BMP390 Calibration failed. Using default sea level pressure (1013.25 hPa).\r\n");
 8006162:	4995      	ldr	r1, [pc, #596]	@ (80063b8 <main+0xcf8>)
 8006164:	488f      	ldr	r0, [pc, #572]	@ (80063a4 <main+0xce4>)
 8006166:	f007 fcbb 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800616a:	488e      	ldr	r0, [pc, #568]	@ (80063a4 <main+0xce4>)
 800616c:	f7fa f8a0 	bl	80002b0 <strlen>
 8006170:	4603      	mov	r3, r0
 8006172:	b29a      	uxth	r2, r3
 8006174:	f04f 33ff 	mov.w	r3, #4294967295
 8006178:	498a      	ldr	r1, [pc, #552]	@ (80063a4 <main+0xce4>)
 800617a:	488b      	ldr	r0, [pc, #556]	@ (80063a8 <main+0xce8>)
 800617c:	f005 fce2 	bl	800bb44 <HAL_UART_Transmit>
      sea_level_pressure_hpa = BMP_DEFAULT_SEA_LEVEL_PRESSURE_HPA; // Default from parameters.h
 8006180:	4b8b      	ldr	r3, [pc, #556]	@ (80063b0 <main+0xcf0>)
 8006182:	4a8e      	ldr	r2, [pc, #568]	@ (80063bc <main+0xcfc>)
 8006184:	601a      	str	r2, [r3, #0]
  }
  
  // Initialize ADXL375 high-g accelerometer
  sprintf(uart_buffer, "Initializing ADXL375 high-g accelerometer...\r\n");
 8006186:	498e      	ldr	r1, [pc, #568]	@ (80063c0 <main+0xd00>)
 8006188:	4886      	ldr	r0, [pc, #536]	@ (80063a4 <main+0xce4>)
 800618a:	f007 fca9 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800618e:	4885      	ldr	r0, [pc, #532]	@ (80063a4 <main+0xce4>)
 8006190:	f7fa f88e 	bl	80002b0 <strlen>
 8006194:	4603      	mov	r3, r0
 8006196:	b29a      	uxth	r2, r3
 8006198:	f04f 33ff 	mov.w	r3, #4294967295
 800619c:	4981      	ldr	r1, [pc, #516]	@ (80063a4 <main+0xce4>)
 800619e:	4882      	ldr	r0, [pc, #520]	@ (80063a8 <main+0xce8>)
 80061a0:	f005 fcd0 	bl	800bb44 <HAL_UART_Transmit>
  
  adxl375_init();
 80061a4:	f7fc fa9e 	bl	80026e4 <adxl375_init>
  
  uint8_t adxl_id = adxl375_read(ADXL375_REG_DEVID);
 80061a8:	2000      	movs	r0, #0
 80061aa:	f7fc fa3d 	bl	8002628 <adxl375_read>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
  if (adxl_id == 0xE5) {
 80061b4:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 80061b8:	2be5      	cmp	r3, #229	@ 0xe5
 80061ba:	d154      	bne.n	8006266 <main+0xba6>
      sprintf(uart_buffer, "ADXL375 initialized successfully. DEVID: 0x%02X (expected 0xE5)\r\n", adxl_id);
 80061bc:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 80061c0:	461a      	mov	r2, r3
 80061c2:	4980      	ldr	r1, [pc, #512]	@ (80063c4 <main+0xd04>)
 80061c4:	4877      	ldr	r0, [pc, #476]	@ (80063a4 <main+0xce4>)
 80061c6:	f007 fc8b 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80061ca:	4876      	ldr	r0, [pc, #472]	@ (80063a4 <main+0xce4>)
 80061cc:	f7fa f870 	bl	80002b0 <strlen>
 80061d0:	4603      	mov	r3, r0
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f04f 33ff 	mov.w	r3, #4294967295
 80061d8:	4972      	ldr	r1, [pc, #456]	@ (80063a4 <main+0xce4>)
 80061da:	4873      	ldr	r0, [pc, #460]	@ (80063a8 <main+0xce8>)
 80061dc:	f005 fcb2 	bl	800bb44 <HAL_UART_Transmit>
      
      // Calibrate ADXL375 - assume device is positioned so Z reads 1G, X/Y read 0G
      sprintf(uart_buffer, "Calibrating ADXL375... Please keep device still with Z-axis up.\r\n");
 80061e0:	4979      	ldr	r1, [pc, #484]	@ (80063c8 <main+0xd08>)
 80061e2:	4870      	ldr	r0, [pc, #448]	@ (80063a4 <main+0xce4>)
 80061e4:	f007 fc7c 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80061e8:	486e      	ldr	r0, [pc, #440]	@ (80063a4 <main+0xce4>)
 80061ea:	f7fa f861 	bl	80002b0 <strlen>
 80061ee:	4603      	mov	r3, r0
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	f04f 33ff 	mov.w	r3, #4294967295
 80061f6:	496b      	ldr	r1, [pc, #428]	@ (80063a4 <main+0xce4>)
 80061f8:	486b      	ldr	r0, [pc, #428]	@ (80063a8 <main+0xce8>)
 80061fa:	f005 fca3 	bl	800bb44 <HAL_UART_Transmit>
      
      adxl375_calibrate(); // Call the new calibration function
 80061fe:	f7fc facf 	bl	80027a0 <adxl375_calibrate>
      
      // Read back and verify the offsets (original code)
      int8_t read_offset_x, read_offset_y, read_offset_z;
      adxl375_read_offsets(&read_offset_x, &read_offset_y, &read_offset_z);
 8006202:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8006206:	f107 01c9 	add.w	r1, r7, #201	@ 0xc9
 800620a:	f107 03ca 	add.w	r3, r7, #202	@ 0xca
 800620e:	4618      	mov	r0, r3
 8006210:	f7fc fa9e 	bl	8002750 <adxl375_read_offsets>
      
      sprintf(uart_buffer, "ADXL375 Calibration Complete.\r\n");
 8006214:	496d      	ldr	r1, [pc, #436]	@ (80063cc <main+0xd0c>)
 8006216:	4863      	ldr	r0, [pc, #396]	@ (80063a4 <main+0xce4>)
 8006218:	f007 fc62 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800621c:	4861      	ldr	r0, [pc, #388]	@ (80063a4 <main+0xce4>)
 800621e:	f7fa f847 	bl	80002b0 <strlen>
 8006222:	4603      	mov	r3, r0
 8006224:	b29a      	uxth	r2, r3
 8006226:	f04f 33ff 	mov.w	r3, #4294967295
 800622a:	495e      	ldr	r1, [pc, #376]	@ (80063a4 <main+0xce4>)
 800622c:	485e      	ldr	r0, [pc, #376]	@ (80063a8 <main+0xce8>)
 800622e:	f005 fc89 	bl	800bb44 <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Readback Offsets from ADXL375: X=%d, Y=%d, Z=%d\r\n", read_offset_x, read_offset_y, read_offset_z);
 8006232:	f997 30ca 	ldrsb.w	r3, [r7, #202]	@ 0xca
 8006236:	461a      	mov	r2, r3
 8006238:	f997 30c9 	ldrsb.w	r3, [r7, #201]	@ 0xc9
 800623c:	4619      	mov	r1, r3
 800623e:	f997 30c8 	ldrsb.w	r3, [r7, #200]	@ 0xc8
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	460b      	mov	r3, r1
 8006246:	4962      	ldr	r1, [pc, #392]	@ (80063d0 <main+0xd10>)
 8006248:	4856      	ldr	r0, [pc, #344]	@ (80063a4 <main+0xce4>)
 800624a:	f007 fc49 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800624e:	4855      	ldr	r0, [pc, #340]	@ (80063a4 <main+0xce4>)
 8006250:	f7fa f82e 	bl	80002b0 <strlen>
 8006254:	4603      	mov	r3, r0
 8006256:	b29a      	uxth	r2, r3
 8006258:	f04f 33ff 	mov.w	r3, #4294967295
 800625c:	4951      	ldr	r1, [pc, #324]	@ (80063a4 <main+0xce4>)
 800625e:	4852      	ldr	r0, [pc, #328]	@ (80063a8 <main+0xce8>)
 8006260:	f005 fc70 	bl	800bb44 <HAL_UART_Transmit>
 8006264:	e011      	b.n	800628a <main+0xbca>
      
  } else {
      sprintf(uart_buffer, "ADXL375 initialization FAILED! DEVID: 0x%02X (expected 0xE5)\r\n", adxl_id);
 8006266:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 800626a:	461a      	mov	r2, r3
 800626c:	4959      	ldr	r1, [pc, #356]	@ (80063d4 <main+0xd14>)
 800626e:	484d      	ldr	r0, [pc, #308]	@ (80063a4 <main+0xce4>)
 8006270:	f007 fc36 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8006274:	484b      	ldr	r0, [pc, #300]	@ (80063a4 <main+0xce4>)
 8006276:	f7fa f81b 	bl	80002b0 <strlen>
 800627a:	4603      	mov	r3, r0
 800627c:	b29a      	uxth	r2, r3
 800627e:	f04f 33ff 	mov.w	r3, #4294967295
 8006282:	4948      	ldr	r1, [pc, #288]	@ (80063a4 <main+0xce4>)
 8006284:	4848      	ldr	r0, [pc, #288]	@ (80063a8 <main+0xce8>)
 8006286:	f005 fc5d 	bl	800bb44 <HAL_UART_Transmit>
  }
  
  // Turn on LED to indicate ready state
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET); // LD2 is usually green or yellow.
 800628a:	2201      	movs	r2, #1
 800628c:	2180      	movs	r1, #128	@ 0x80
 800628e:	4852      	ldr	r0, [pc, #328]	@ (80063d8 <main+0xd18>)
 8006290:	f002 fd3e 	bl	8008d10 <HAL_GPIO_WritePin>
  // Initialize Kalman Filter
  // Noise parameters:
  // BMP390 altitude noise RMS = 0.15m => variance = 0.15*0.15 = 0.0225 m^2
  // LSM6DSO accel noise density = 160e-6 g/sqrt(Hz). For 100Hz sample rate (50Hz bandwidth):
  // accel_process_noise_variance = (160e-6 * 9.80665)^2 * 50 approx 0.000123 (m/s^2)^2
  float initial_altitude_m = 0.0f; // Will be updated by first good baro reading if possible, or use current persistent
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
  if (sea_level_pressure_hpa > 0.0f && persistent_bmp_pres_pa > 0.0f) { // Check if calibration ran and we have a pressure
 800629c:	4b44      	ldr	r3, [pc, #272]	@ (80063b0 <main+0xcf0>)
 800629e:	edd3 7a00 	vldr	s15, [r3]
 80062a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062aa:	dd15      	ble.n	80062d8 <main+0xc18>
 80062ac:	4b4b      	ldr	r3, [pc, #300]	@ (80063dc <main+0xd1c>)
 80062ae:	edd3 7a00 	vldr	s15, [r3]
 80062b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	dd0d      	ble.n	80062d8 <main+0xc18>
      initial_altitude_m = calculate_altitude_hpa(persistent_bmp_pres_pa / 100.0f);
 80062bc:	4b47      	ldr	r3, [pc, #284]	@ (80063dc <main+0xd1c>)
 80062be:	edd3 7a00 	vldr	s15, [r3]
 80062c2:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80063ac <main+0xcec>
 80062c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80062ca:	eeb0 0a47 	vmov.f32	s0, s14
 80062ce:	f7ff f991 	bl	80055f4 <calculate_altitude_hpa>
 80062d2:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
 80062d6:	e017      	b.n	8006308 <main+0xc48>
  } else if (valid_calibration_readings > 0) { // Fallback to avg calibration altitude if available
 80062d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dd13      	ble.n	8006308 <main+0xc48>
      initial_altitude_m = calculate_altitude_hpa((initial_pressure_pa_sum / valid_calibration_readings) / 100.0f);
 80062e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ec:	edd7 6a65 	vldr	s13, [r7, #404]	@ 0x194
 80062f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f4:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80063ac <main+0xcec>
 80062f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80062fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006300:	f7ff f978 	bl	80055f4 <calculate_altitude_hpa>
 8006304:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
  }

  kalman_init(&kf_altitude_velocity,
 8006308:	ed9f 2a35 	vldr	s4, [pc, #212]	@ 80063e0 <main+0xd20>
 800630c:	eddf 1a35 	vldr	s3, [pc, #212]	@ 80063e4 <main+0xd24>
 8006310:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8006314:	eddf 0a32 	vldr	s1, [pc, #200]	@ 80063e0 <main+0xd20>
 8006318:	ed97 0a61 	vldr	s0, [r7, #388]	@ 0x184
 800631c:	4832      	ldr	r0, [pc, #200]	@ (80063e8 <main+0xd28>)
 800631e:	f7fe fa79 	bl	8004814 <kalman_init>
              KF_INITIAL_ALTITUDE_VARIANCE,        // initial_altitude_variance (R_baro)
              KF_INITIAL_VELOCITY_VARIANCE,        // initial_velocity_variance (e.g., 1 (m/s)^2)
              KF_PROCESS_NOISE_ACCEL_VARIANCE,     // process_noise_accel_variance (sigma_a^2 for Q)
              KF_MEASUREMENT_NOISE_BARO_VARIANCE); // measurement_noise_baro_variance (R_baro)

  sprintf(uart_buffer, "Kalman Filter Initialized. Initial Alt: %.2fm\r\n", initial_altitude_m);
 8006322:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 8006326:	f7fa f92f 	bl	8000588 <__aeabi_f2d>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	492f      	ldr	r1, [pc, #188]	@ (80063ec <main+0xd2c>)
 8006330:	481c      	ldr	r0, [pc, #112]	@ (80063a4 <main+0xce4>)
 8006332:	f007 fbd5 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8006336:	481b      	ldr	r0, [pc, #108]	@ (80063a4 <main+0xce4>)
 8006338:	f7f9 ffba 	bl	80002b0 <strlen>
 800633c:	4603      	mov	r3, r0
 800633e:	b29a      	uxth	r2, r3
 8006340:	f04f 33ff 	mov.w	r3, #4294967295
 8006344:	4917      	ldr	r1, [pc, #92]	@ (80063a4 <main+0xce4>)
 8006346:	4818      	ldr	r0, [pc, #96]	@ (80063a8 <main+0xce8>)
 8006348:	f005 fbfc 	bl	800bb44 <HAL_UART_Transmit>

  // Initialize Flight State Machine
  flight_state_machine.flight_state = READY;
 800634c:	4b28      	ldr	r3, [pc, #160]	@ (80063f0 <main+0xd30>)
 800634e:	2200      	movs	r2, #0
 8006350:	701a      	strb	r2, [r3, #0]
  flight_state_machine.state_changed = 0; // false
 8006352:	4b27      	ldr	r3, [pc, #156]	@ (80063f0 <main+0xd30>)
 8006354:	2200      	movs	r2, #0
 8006356:	761a      	strb	r2, [r3, #24]
  flight_state_machine.apogee_flag = false;
 8006358:	4b25      	ldr	r3, [pc, #148]	@ (80063f0 <main+0xd30>)
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  flight_state_machine.main_deployment_flag = false;
 8006360:	4b23      	ldr	r3, [pc, #140]	@ (80063f0 <main+0xd30>)
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  flight_state_machine.thrust_trigger_time = 0;
 8006368:	4b21      	ldr	r3, [pc, #132]	@ (80063f0 <main+0xd30>)
 800636a:	2200      	movs	r2, #0
 800636c:	61da      	str	r2, [r3, #28]
  flight_state_machine.iteration_count = 0;  
 800636e:	4b20      	ldr	r3, [pc, #128]	@ (80063f0 <main+0xd30>)
 8006370:	2200      	movs	r2, #0
 8006372:	621a      	str	r2, [r3, #32]
  flight_state_machine.apogee_trigger_time_ms = 0;
 8006374:	4b1e      	ldr	r3, [pc, #120]	@ (80063f0 <main+0xd30>)
 8006376:	2200      	movs	r2, #0
 8006378:	625a      	str	r2, [r3, #36]	@ 0x24
  flight_state_machine.nosecone_motor_active = false; // Initialize nosecone motor state
 800637a:	4b1d      	ldr	r3, [pc, #116]	@ (80063f0 <main+0xd30>)
 800637c:	2200      	movs	r2, #0
 800637e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  flight_state_machine.nosecone_motor_start_time_ms = 0; // Initialize nosecone motor time
 8006382:	4b1b      	ldr	r3, [pc, #108]	@ (80063f0 <main+0xd30>)
 8006384:	2200      	movs	r2, #0
 8006386:	62da      	str	r2, [r3, #44]	@ 0x2c
  flight_state_machine.main_parachute_motor_active = false; // Initialize main parachute motor state
 8006388:	4b19      	ldr	r3, [pc, #100]	@ (80063f0 <main+0xd30>)
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  flight_state_machine.main_parachute_motor_start_time_ms = 0; // Initialize main parachute motor time
 8006390:	4b17      	ldr	r3, [pc, #92]	@ (80063f0 <main+0xd30>)
 8006392:	2200      	movs	r2, #0
 8006394:	635a      	str	r2, [r3, #52]	@ 0x34
  for (int i = 0; i < 5; i++) {
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800639c:	e038      	b.n	8006410 <main+0xd50>
 800639e:	bf00      	nop
 80063a0:	08013370 	.word	0x08013370
 80063a4:	20000ee8 	.word	0x20000ee8
 80063a8:	2000071c 	.word	0x2000071c
 80063ac:	42c80000 	.word	0x42c80000
 80063b0:	20000fe8 	.word	0x20000fe8
 80063b4:	08013394 	.word	0x08013394
 80063b8:	080133e0 	.word	0x080133e0
 80063bc:	447d5000 	.word	0x447d5000
 80063c0:	08013430 	.word	0x08013430
 80063c4:	08013460 	.word	0x08013460
 80063c8:	080134a4 	.word	0x080134a4
 80063cc:	080134e8 	.word	0x080134e8
 80063d0:	08013508 	.word	0x08013508
 80063d4:	0801353c 	.word	0x0801353c
 80063d8:	40020400 	.word	0x40020400
 80063dc:	2000105c 	.word	0x2000105c
 80063e0:	3cb851ec 	.word	0x3cb851ec
 80063e4:	3900f990 	.word	0x3900f990
 80063e8:	20001064 	.word	0x20001064
 80063ec:	0801357c 	.word	0x0801357c
 80063f0:	20001004 	.word	0x20001004
      flight_state_machine.memory[i] = 0.0f;
 80063f4:	4a20      	ldr	r2, [pc, #128]	@ (8006478 <main+0xdb8>)
 80063f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	3304      	adds	r3, #4
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 5; i++) {
 8006406:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800640a:	3301      	adds	r3, #1
 800640c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8006410:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006414:	2b04      	cmp	r3, #4
 8006416:	dded      	ble.n	80063f4 <main+0xd34>
  }

  // Initialize Control Settings
  control_settings.liftoff_acc_threshold = FLIGHT_LIFTOFF_ACCEL_THRESHOLD_G; // Use constant from parameters.h
 8006418:	4b18      	ldr	r3, [pc, #96]	@ (800647c <main+0xdbc>)
 800641a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800641e:	601a      	str	r2, [r3, #0]

  // Initialize SD Card
  MX_SPI2_Init(); // Initialize SPI2 peripheral for SD Card
 8006420:	f001 f8b4 	bl	800758c <MX_SPI2_Init>
  SD_SPI_Init(&hspi2); // Pass the SPI2 handle to the SD card driver
 8006424:	4816      	ldr	r0, [pc, #88]	@ (8006480 <main+0xdc0>)
 8006426:	f7fb fa55 	bl	80018d4 <SD_SPI_Init>

  sprintf(uart_buffer, "Initializing SD Card for logging...\r\n");
 800642a:	4916      	ldr	r1, [pc, #88]	@ (8006484 <main+0xdc4>)
 800642c:	4816      	ldr	r0, [pc, #88]	@ (8006488 <main+0xdc8>)
 800642e:	f007 fb57 	bl	800dae0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8006432:	4815      	ldr	r0, [pc, #84]	@ (8006488 <main+0xdc8>)
 8006434:	f7f9 ff3c 	bl	80002b0 <strlen>
 8006438:	4603      	mov	r3, r0
 800643a:	b29a      	uxth	r2, r3
 800643c:	f04f 33ff 	mov.w	r3, #4294967295
 8006440:	4911      	ldr	r1, [pc, #68]	@ (8006488 <main+0xdc8>)
 8006442:	4812      	ldr	r0, [pc, #72]	@ (800648c <main+0xdcc>)
 8006444:	f005 fb7e 	bl	800bb44 <HAL_UART_Transmit>
  if (SD_Init() == 0) {
 8006448:	f7fb fa5a 	bl	8001900 <SD_Init>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d120      	bne.n	8006494 <main+0xdd4>
      sprintf(uart_buffer, "SD Card Initialized Successfully.\r\n");
 8006452:	490f      	ldr	r1, [pc, #60]	@ (8006490 <main+0xdd0>)
 8006454:	480c      	ldr	r0, [pc, #48]	@ (8006488 <main+0xdc8>)
 8006456:	f007 fb43 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800645a:	480b      	ldr	r0, [pc, #44]	@ (8006488 <main+0xdc8>)
 800645c:	f7f9 ff28 	bl	80002b0 <strlen>
 8006460:	4603      	mov	r3, r0
 8006462:	b29a      	uxth	r2, r3
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	4907      	ldr	r1, [pc, #28]	@ (8006488 <main+0xdc8>)
 800646a:	4808      	ldr	r0, [pc, #32]	@ (800648c <main+0xdcc>)
 800646c:	f005 fb6a 	bl	800bb44 <HAL_UART_Transmit>
      SD_Log_Start(0); // Start logging from block 0. Choose a suitable start block.
 8006470:	2000      	movs	r0, #0
 8006472:	f7fb fda9 	bl	8001fc8 <SD_Log_Start>
 8006476:	e01c      	b.n	80064b2 <main+0xdf2>
 8006478:	20001004 	.word	0x20001004
 800647c:	2000103c 	.word	0x2000103c
 8006480:	200006b8 	.word	0x200006b8
 8006484:	080135ac 	.word	0x080135ac
 8006488:	20000ee8 	.word	0x20000ee8
 800648c:	2000071c 	.word	0x2000071c
 8006490:	080135d4 	.word	0x080135d4
  } else {
      sprintf(uart_buffer, "SD Card Initialization FAILED!\r\n");
 8006494:	49de      	ldr	r1, [pc, #888]	@ (8006810 <main+0x1150>)
 8006496:	48df      	ldr	r0, [pc, #892]	@ (8006814 <main+0x1154>)
 8006498:	f007 fb22 	bl	800dae0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800649c:	48dd      	ldr	r0, [pc, #884]	@ (8006814 <main+0x1154>)
 800649e:	f7f9 ff07 	bl	80002b0 <strlen>
 80064a2:	4603      	mov	r3, r0
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	f04f 33ff 	mov.w	r3, #4294967295
 80064aa:	49da      	ldr	r1, [pc, #872]	@ (8006814 <main+0x1154>)
 80064ac:	48da      	ldr	r0, [pc, #872]	@ (8006818 <main+0x1158>)
 80064ae:	f005 fb49 	bl	800bb44 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t loop_start_tick = HAL_GetTick(); // Record start time of the loop
 80064b2:	f001 fe05 	bl	80080c0 <HAL_GetTick>
 80064b6:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

    uint32_t raw_pressure; // raw_temperature is still needed for the function call
    uint32_t local_raw_temperature; // Use a distinct local variable for the raw temperature param

    // Sensor values
    float lsm_acc_x = 0.0f, lsm_acc_y = 0.0f, lsm_acc_z = 0.0f;
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    float lsm_gyr_x = 0.0f, lsm_gyr_y = 0.0f, lsm_gyr_z = 0.0f;
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    float bmp_temp_c = 0.0f, bmp_pres_pa = 0.0f, bmp_alt_m = 0.0f;
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    float adxl_hi_g_x = 0.0f, adxl_hi_g_y = 0.0f, adxl_hi_g_z = 0.0f;
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    // Madgwick inputs
    float acc_g[3];  // Acceleration in g
    float gyro_rps[3]; // Gyroscope in rad/s

    bool lsm_accel_data_ready = false;
 800651a:	2300      	movs	r3, #0
 800651c:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
    bool lsm_gyro_data_ready = false;
 8006520:	2300      	movs	r3, #0
 8006522:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166
    bool bmp_data_ok = false; // Initialize to false for this cycle
 8006526:	2300      	movs	r3, #0
 8006528:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b

    // Read LSM6DSO data
    uint8_t reg_lsm;
    lsm6dso_status_reg_get(&dev_ctx, &reg_lsm);
 800652c:	f107 03a7 	add.w	r3, r7, #167	@ 0xa7
 8006530:	4619      	mov	r1, r3
 8006532:	48ba      	ldr	r0, [pc, #744]	@ (800681c <main+0x115c>)
 8006534:	f7fe fdc2 	bl	80050bc <lsm6dso_status_reg_get>

    if (reg_lsm & 0x01) { // Check XLDA bit
 8006538:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d04b      	beq.n	80065dc <main+0xf1c>
      lsm_accel_data_ready = true;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
      lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800654a:	49b5      	ldr	r1, [pc, #724]	@ (8006820 <main+0x1160>)
 800654c:	48b3      	ldr	r0, [pc, #716]	@ (800681c <main+0x115c>)
 800654e:	f7fe fe0e 	bl	800516e <lsm6dso_acceleration_raw_get>
      lsm_acc_x = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[0]) - lsm6dso_accel_offset_mg[0];
 8006552:	4bb3      	ldr	r3, [pc, #716]	@ (8006820 <main+0x1160>)
 8006554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff f87f 	bl	800565c <lsm6dso_from_fs16g_to_mg>
 800655e:	eeb0 7a40 	vmov.f32	s14, s0
 8006562:	4bb0      	ldr	r3, [pc, #704]	@ (8006824 <main+0x1164>)
 8006564:	edd3 7a00 	vldr	s15, [r3]
 8006568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800656c:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
      lsm_acc_y = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[1]) - lsm6dso_accel_offset_mg[1];
 8006570:	4bab      	ldr	r3, [pc, #684]	@ (8006820 <main+0x1160>)
 8006572:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff f870 	bl	800565c <lsm6dso_from_fs16g_to_mg>
 800657c:	eeb0 7a40 	vmov.f32	s14, s0
 8006580:	4ba8      	ldr	r3, [pc, #672]	@ (8006824 <main+0x1164>)
 8006582:	edd3 7a01 	vldr	s15, [r3, #4]
 8006586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800658a:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
      lsm_acc_z = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[2]) - lsm6dso_accel_offset_mg[2];
 800658e:	4ba4      	ldr	r3, [pc, #656]	@ (8006820 <main+0x1160>)
 8006590:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff f861 	bl	800565c <lsm6dso_from_fs16g_to_mg>
 800659a:	eeb0 7a40 	vmov.f32	s14, s0
 800659e:	4ba1      	ldr	r3, [pc, #644]	@ (8006824 <main+0x1164>)
 80065a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80065a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065a8:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174

      // Convert accelerometer data from mg to g for Madgwick
      acc_g[0] = lsm_acc_x / 1000.0f;
 80065ac:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 80065b0:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8006828 <main+0x1168>
 80065b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065b8:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
      acc_g[1] = lsm_acc_y / 1000.0f;
 80065bc:	ed97 7a5e 	vldr	s14, [r7, #376]	@ 0x178
 80065c0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8006828 <main+0x1168>
 80065c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065c8:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
      acc_g[2] = lsm_acc_z / 1000.0f;
 80065cc:	ed97 7a5d 	vldr	s14, [r7, #372]	@ 0x174
 80065d0:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8006828 <main+0x1168>
 80065d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065d8:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
    }

        if (reg_lsm & 0x02) { // Check GDA (Gyroscope Data Available) bit
 80065dc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d069      	beq.n	80066bc <main+0xffc>
      lsm_gyro_data_ready = true;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166
            lsm6dso_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 80065ee:	498f      	ldr	r1, [pc, #572]	@ (800682c <main+0x116c>)
 80065f0:	488a      	ldr	r0, [pc, #552]	@ (800681c <main+0x115c>)
 80065f2:	f7fe fd74 	bl	80050de <lsm6dso_angular_rate_raw_get>
      lsm_gyr_x = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) - lsm6dso_gyro_offset_mdps[0];
 80065f6:	4b8d      	ldr	r3, [pc, #564]	@ (800682c <main+0x116c>)
 80065f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff f847 	bl	8005690 <lsm6dso_from_fs2000dps_to_mdps>
 8006602:	eeb0 7a40 	vmov.f32	s14, s0
 8006606:	4b8a      	ldr	r3, [pc, #552]	@ (8006830 <main+0x1170>)
 8006608:	edd3 7a00 	vldr	s15, [r3]
 800660c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006610:	edc7 7a5c 	vstr	s15, [r7, #368]	@ 0x170
      lsm_gyr_y = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) - lsm6dso_gyro_offset_mdps[1];
 8006614:	4b85      	ldr	r3, [pc, #532]	@ (800682c <main+0x116c>)
 8006616:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff f838 	bl	8005690 <lsm6dso_from_fs2000dps_to_mdps>
 8006620:	eeb0 7a40 	vmov.f32	s14, s0
 8006624:	4b82      	ldr	r3, [pc, #520]	@ (8006830 <main+0x1170>)
 8006626:	edd3 7a01 	vldr	s15, [r3, #4]
 800662a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800662e:	edc7 7a5b 	vstr	s15, [r7, #364]	@ 0x16c
      lsm_gyr_z = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) - lsm6dso_gyro_offset_mdps[2];
 8006632:	4b7e      	ldr	r3, [pc, #504]	@ (800682c <main+0x116c>)
 8006634:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff f829 	bl	8005690 <lsm6dso_from_fs2000dps_to_mdps>
 800663e:	eeb0 7a40 	vmov.f32	s14, s0
 8006642:	4b7b      	ldr	r3, [pc, #492]	@ (8006830 <main+0x1170>)
 8006644:	edd3 7a02 	vldr	s15, [r3, #8]
 8006648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800664c:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168

      // Convert gyroscope data from mdps to rad/s for Madgwick
      // PI is defined in Madgwick_filter.h
      gyro_rps[0] = lsm_gyr_x * (PI / 180.0f / 1000.0f);
 8006650:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8006654:	f7f9 ff98 	bl	8000588 <__aeabi_f2d>
 8006658:	a36b      	add	r3, pc, #428	@ (adr r3, 8006808 <main+0x1148>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f7f9 ffeb 	bl	8000638 <__aeabi_dmul>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4610      	mov	r0, r2
 8006668:	4619      	mov	r1, r3
 800666a:	f7fa fadd 	bl	8000c28 <__aeabi_d2f>
 800666e:	4603      	mov	r3, r0
 8006670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      gyro_rps[1] = lsm_gyr_y * (PI / 180.0f / 1000.0f);
 8006674:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8006678:	f7f9 ff86 	bl	8000588 <__aeabi_f2d>
 800667c:	a362      	add	r3, pc, #392	@ (adr r3, 8006808 <main+0x1148>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f7f9 ffd9 	bl	8000638 <__aeabi_dmul>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4610      	mov	r0, r2
 800668c:	4619      	mov	r1, r3
 800668e:	f7fa facb 	bl	8000c28 <__aeabi_d2f>
 8006692:	4603      	mov	r3, r0
 8006694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      gyro_rps[2] = lsm_gyr_z * (PI / 180.0f / 1000.0f);
 8006698:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 800669c:	f7f9 ff74 	bl	8000588 <__aeabi_f2d>
 80066a0:	a359      	add	r3, pc, #356	@ (adr r3, 8006808 <main+0x1148>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 ffc7 	bl	8000638 <__aeabi_dmul>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4610      	mov	r0, r2
 80066b0:	4619      	mov	r1, r3
 80066b2:	f7fa fab9 	bl	8000c28 <__aeabi_d2f>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    // Update Madgwick filter (call this every 10ms)
    // Ensure acc_g and gyro_rps are updated if data is ready, otherwise, decide on behavior
    // (e.g., use last known, or skip update if critical data missing)
    // For now, assume data is usually ready. If not, filter might get stale inputs from previous loop.
    MadgwickAHRSupdateIMU(gyro_rps[0], gyro_rps[1], gyro_rps[2], acc_g[0], acc_g[1], acc_g[2]);
 80066bc:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80066c0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80066c4:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
 80066c8:	ed97 6a2d 	vldr	s12, [r7, #180]	@ 0xb4
 80066cc:	edd7 5a2e 	vldr	s11, [r7, #184]	@ 0xb8
 80066d0:	ed97 5a2f 	vldr	s10, [r7, #188]	@ 0xbc
 80066d4:	eef0 2a45 	vmov.f32	s5, s10
 80066d8:	eeb0 2a65 	vmov.f32	s4, s11
 80066dc:	eef0 1a46 	vmov.f32	s3, s12
 80066e0:	eeb0 1a66 	vmov.f32	s2, s13
 80066e4:	eef0 0a47 	vmov.f32	s1, s14
 80066e8:	eeb0 0a67 	vmov.f32	s0, s15
 80066ec:	f7fa fcb8 	bl	8001060 <MadgwickAHRSupdateIMU>

    // Calculate world-frame vertical linear acceleration for Kalman filter
    float acc_z_world_g = (2.0f*(q1*q3 - q0*q2)*acc_g[0] + 2.0f*(q2*q3 + q0*q1)*acc_g[1] + (q0*q0 - q1*q1 - q2*q2 + q3*q3)*acc_g[2]);
 80066f0:	4b50      	ldr	r3, [pc, #320]	@ (8006834 <main+0x1174>)
 80066f2:	ed93 7a00 	vldr	s14, [r3]
 80066f6:	4b50      	ldr	r3, [pc, #320]	@ (8006838 <main+0x1178>)
 80066f8:	edd3 7a00 	vldr	s15, [r3]
 80066fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006700:	4b4e      	ldr	r3, [pc, #312]	@ (800683c <main+0x117c>)
 8006702:	edd3 6a00 	vldr	s13, [r3]
 8006706:	4b4e      	ldr	r3, [pc, #312]	@ (8006840 <main+0x1180>)
 8006708:	edd3 7a00 	vldr	s15, [r3]
 800670c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006714:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006718:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800671c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006720:	4b47      	ldr	r3, [pc, #284]	@ (8006840 <main+0x1180>)
 8006722:	edd3 6a00 	vldr	s13, [r3]
 8006726:	4b44      	ldr	r3, [pc, #272]	@ (8006838 <main+0x1178>)
 8006728:	edd3 7a00 	vldr	s15, [r3]
 800672c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006730:	4b42      	ldr	r3, [pc, #264]	@ (800683c <main+0x117c>)
 8006732:	ed93 6a00 	vldr	s12, [r3]
 8006736:	4b3f      	ldr	r3, [pc, #252]	@ (8006834 <main+0x1174>)
 8006738:	edd3 7a00 	vldr	s15, [r3]
 800673c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006744:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006748:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800674c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006754:	4b39      	ldr	r3, [pc, #228]	@ (800683c <main+0x117c>)
 8006756:	edd3 6a00 	vldr	s13, [r3]
 800675a:	4b38      	ldr	r3, [pc, #224]	@ (800683c <main+0x117c>)
 800675c:	edd3 7a00 	vldr	s15, [r3]
 8006760:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006764:	4b33      	ldr	r3, [pc, #204]	@ (8006834 <main+0x1174>)
 8006766:	ed93 6a00 	vldr	s12, [r3]
 800676a:	4b32      	ldr	r3, [pc, #200]	@ (8006834 <main+0x1174>)
 800676c:	edd3 7a00 	vldr	s15, [r3]
 8006770:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006774:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006778:	4b31      	ldr	r3, [pc, #196]	@ (8006840 <main+0x1180>)
 800677a:	ed93 6a00 	vldr	s12, [r3]
 800677e:	4b30      	ldr	r3, [pc, #192]	@ (8006840 <main+0x1180>)
 8006780:	edd3 7a00 	vldr	s15, [r3]
 8006784:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006788:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800678c:	4b2a      	ldr	r3, [pc, #168]	@ (8006838 <main+0x1178>)
 800678e:	ed93 6a00 	vldr	s12, [r3]
 8006792:	4b29      	ldr	r3, [pc, #164]	@ (8006838 <main+0x1178>)
 8006794:	edd3 7a00 	vldr	s15, [r3]
 8006798:	ee66 7a27 	vmul.f32	s15, s12, s15
 800679c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80067a0:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80067a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067ac:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124
    float linear_accel_z_mps2 = (acc_z_world_g - 1.0f) * STANDARD_GRAVITY_MPS2; // Assuming Z is UP, using constant from parameters.h
 80067b0:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 80067b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067bc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006844 <main+0x1184>
 80067c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067c4:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120

    // Kalman Predict Step (every loop = every 10ms)
    kalman_predict(&kf_altitude_velocity, linear_accel_z_mps2, 0.01f);
 80067c8:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8006848 <main+0x1188>
 80067cc:	ed97 0a48 	vldr	s0, [r7, #288]	@ 0x120
 80067d0:	481e      	ldr	r0, [pc, #120]	@ (800684c <main+0x118c>)
 80067d2:	f7fe f84f 	bl	8004874 <kalman_predict>

    // Read BMP390 data only every other cycle (20ms interval if loop is 10ms)
    bool new_baro_data_for_kalman = false;
 80067d6:	2300      	movs	r3, #0
 80067d8:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165
    if (bmp390_read_scheduler == 0) {
 80067dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006850 <main+0x1190>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d171      	bne.n	80068c8 <main+0x1208>
        float func_temp_c, func_pres_pa; // Local variables for the values read from the function
        if (bmp390_read_temperature_pressure(&bmp390_handle, &local_raw_temperature, &func_temp_c, &raw_pressure, &func_pres_pa) == 0) {
 80067e4:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80067e8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80067ec:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80067f0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	4603      	mov	r3, r0
 80067f8:	4816      	ldr	r0, [pc, #88]	@ (8006854 <main+0x1194>)
 80067fa:	f7fd fad5 	bl	8003da8 <bmp390_read_temperature_pressure>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d155      	bne.n	80068b0 <main+0x11f0>
 8006804:	e028      	b.n	8006858 <main+0x1198>
 8006806:	bf00      	nop
 8006808:	e13863be 	.word	0xe13863be
 800680c:	3ef24d14 	.word	0x3ef24d14
 8006810:	080135f8 	.word	0x080135f8
 8006814:	20000ee8 	.word	0x20000ee8
 8006818:	2000071c 	.word	0x2000071c
 800681c:	20000c84 	.word	0x20000c84
 8006820:	20001048 	.word	0x20001048
 8006824:	20000fec 	.word	0x20000fec
 8006828:	447a0000 	.word	0x447a0000
 800682c:	20001050 	.word	0x20001050
 8006830:	20000ff8 	.word	0x20000ff8
 8006834:	20000354 	.word	0x20000354
 8006838:	2000035c 	.word	0x2000035c
 800683c:	20000004 	.word	0x20000004
 8006840:	20000358 	.word	0x20000358
 8006844:	411ce80a 	.word	0x411ce80a
 8006848:	3c23d70a 	.word	0x3c23d70a
 800684c:	20001064 	.word	0x20001064
 8006850:	20001058 	.word	0x20001058
 8006854:	20000c98 	.word	0x20000c98
            bmp_data_ok = true; // Indicates data read attempt was successful for this cycle
 8006858:	2301      	movs	r3, #1
 800685a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
            persistent_bmp_pres_pa = func_pres_pa; // Update persistent pressure
 800685e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006862:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a0d      	ldr	r2, [pc, #52]	@ (80068a0 <main+0x11e0>)
 800686a:	6013      	str	r3, [r2, #0]
            float current_pressure_hpa = persistent_bmp_pres_pa / 100.0f;
 800686c:	4b0c      	ldr	r3, [pc, #48]	@ (80068a0 <main+0x11e0>)
 800686e:	ed93 7a00 	vldr	s14, [r3]
 8006872:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80068a4 <main+0x11e4>
 8006876:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800687a:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c
            persistent_bmp_alt_m = calculate_altitude_hpa(current_pressure_hpa); // Update persistent altitude
 800687e:	ed97 0a47 	vldr	s0, [r7, #284]	@ 0x11c
 8006882:	f7fe feb7 	bl	80055f4 <calculate_altitude_hpa>
 8006886:	eef0 7a40 	vmov.f32	s15, s0
 800688a:	4b07      	ldr	r3, [pc, #28]	@ (80068a8 <main+0x11e8>)
 800688c:	edc3 7a00 	vstr	s15, [r3]
            new_baro_data_for_kalman = true; // New data is available for Kalman
 8006890:	2301      	movs	r3, #1
 8006892:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165

            // Temperature reading is no longer updated or used here actively
        HAL_GPIO_TogglePin(GPIOB, LD1_Pin); // Toggle LD1 (usually green) to show activity
 8006896:	2101      	movs	r1, #1
 8006898:	4804      	ldr	r0, [pc, #16]	@ (80068ac <main+0x11ec>)
 800689a:	f002 fa52 	bl	8008d42 <HAL_GPIO_TogglePin>
 800689e:	e013      	b.n	80068c8 <main+0x1208>
 80068a0:	2000105c 	.word	0x2000105c
 80068a4:	42c80000 	.word	0x42c80000
 80068a8:	20001060 	.word	0x20001060
 80068ac:	40020400 	.word	0x40020400
    } else {
            // bmp_data_ok remains false, set by initialization
        HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET); // Turn on LD3 (usually red) for error
 80068b0:	2201      	movs	r2, #1
 80068b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80068b6:	48cd      	ldr	r0, [pc, #820]	@ (8006bec <main+0x152c>)
 80068b8:	f002 fa2a 	bl	8008d10 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET); // Blink error LED
 80068bc:	2200      	movs	r2, #0
 80068be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80068c2:	48ca      	ldr	r0, [pc, #808]	@ (8006bec <main+0x152c>)
 80068c4:	f002 fa24 	bl	8008d10 <HAL_GPIO_WritePin>
        }
    }
    // On other cycles, bmp_data_ok remains false, and old bmp_pres_pa, bmp_alt_m are used if printed.

    // Kalman Update Step (conditionally, when new barometer data is available)
    if (new_baro_data_for_kalman) {
 80068c8:	f897 3165 	ldrb.w	r3, [r7, #357]	@ 0x165
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <main+0x1220>
        kalman_update_barometer(&kf_altitude_velocity, persistent_bmp_alt_m);
 80068d0:	4bc7      	ldr	r3, [pc, #796]	@ (8006bf0 <main+0x1530>)
 80068d2:	edd3 7a00 	vldr	s15, [r3]
 80068d6:	eeb0 0a67 	vmov.f32	s0, s15
 80068da:	48c6      	ldr	r0, [pc, #792]	@ (8006bf4 <main+0x1534>)
 80068dc:	f7fe f8c0 	bl	8004a60 <kalman_update_barometer>
    }
    
    bmp390_read_scheduler++;
 80068e0:	4bc5      	ldr	r3, [pc, #788]	@ (8006bf8 <main+0x1538>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	4bc3      	ldr	r3, [pc, #780]	@ (8006bf8 <main+0x1538>)
 80068ea:	701a      	strb	r2, [r3, #0]
    if (bmp390_read_scheduler >= 1) { // Reset every 2 cycles
 80068ec:	4bc2      	ldr	r3, [pc, #776]	@ (8006bf8 <main+0x1538>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <main+0x123a>
        bmp390_read_scheduler = 0;
 80068f4:	4bc0      	ldr	r3, [pc, #768]	@ (8006bf8 <main+0x1538>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	701a      	strb	r2, [r3, #0]
    }
    
    // Read ADXL375 high-g accelerometer (±200g range)
    int16_t adxl_raw_x, adxl_raw_y, adxl_raw_z;
    adxl375_read_xyz(&adxl_raw_x, &adxl_raw_y, &adxl_raw_z);
 80068fa:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80068fe:	f107 01a2 	add.w	r1, r7, #162	@ 0xa2
 8006902:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8006906:	4618      	mov	r0, r3
 8006908:	f7fb feac 	bl	8002664 <adxl375_read_xyz>
    adxl_hi_g_x = (float)adxl_raw_x * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f); 
 800690c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8006910:	ee07 3a90 	vmov	s15, r3
 8006914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006918:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8006bfc <main+0x153c>
 800691c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006920:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    adxl_hi_g_y = (float)adxl_raw_y * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f);
 8006924:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006928:	ee07 3a90 	vmov	s15, r3
 800692c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006930:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8006bfc <main+0x153c>
 8006934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006938:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
    adxl_hi_g_z = (float)adxl_raw_z * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f);
 800693c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006940:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006950:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8006bfc <main+0x153c>
 8006954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006958:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
    
    // Prepare data for Flight State Machine
    vf32_t adxl_acc_data_g;
    adxl_acc_data_g.x = adxl_hi_g_x;
 800695c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006960:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006964:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006968:	601a      	str	r2, [r3, #0]
    adxl_acc_data_g.y = adxl_hi_g_y;
 800696a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800696e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006972:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006976:	605a      	str	r2, [r3, #4]
    adxl_acc_data_g.z = adxl_hi_g_z;
 8006978:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800697c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006980:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8006984:	609a      	str	r2, [r3, #8]

    vf32_t lsm_gyro_data_for_fsm;
    lsm_gyro_data_for_fsm.x = gyro_rps[0];
 8006986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800698a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800698e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006992:	601a      	str	r2, [r3, #0]
    lsm_gyro_data_for_fsm.y = gyro_rps[1];
 8006994:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006998:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800699c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80069a0:	605a      	str	r2, [r3, #4]
    lsm_gyro_data_for_fsm.z = gyro_rps[2];
 80069a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80069aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80069ae:	609a      	str	r2, [r3, #8]

    estimation_output_t current_state_estimation;
    current_state_estimation.height = kf_altitude_velocity.altitude_m;
 80069b0:	4b90      	ldr	r3, [pc, #576]	@ (8006bf4 <main+0x1534>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80069b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80069bc:	609a      	str	r2, [r3, #8]
    current_state_estimation.velocity = kf_altitude_velocity.vertical_velocity_mps;
 80069be:	4b8d      	ldr	r3, [pc, #564]	@ (8006bf4 <main+0x1534>)
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80069c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80069ca:	605a      	str	r2, [r3, #4]
    current_state_estimation.acceleration = linear_accel_z_mps2; // Global frame Z acceleration
 80069cc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80069d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80069d4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80069d8:	601a      	str	r2, [r3, #0]

    // Read Launch Detect Pin (PA6)
    bool launch_pin_is_high = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET);
 80069da:	2140      	movs	r1, #64	@ 0x40
 80069dc:	4888      	ldr	r0, [pc, #544]	@ (8006c00 <main+0x1540>)
 80069de:	f002 f97f 	bl	8008ce0 <HAL_GPIO_ReadPin>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

    // Check and update flight phase
    check_flight_phase(&flight_state_machine, adxl_acc_data_g, lsm_gyro_data_for_fsm, current_state_estimation, &control_settings, launch_pin_is_high);
 80069f0:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 80069f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80069f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80069fc:	edd3 3a00 	vldr	s7, [r3]
 8006a00:	ed93 4a01 	vldr	s8, [r3, #4]
 8006a04:	edd3 4a02 	vldr	s9, [r3, #8]
 8006a08:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006a10:	ed93 5a00 	vldr	s10, [r3]
 8006a14:	edd3 5a01 	vldr	s11, [r3, #4]
 8006a18:	ed93 6a02 	vldr	s12, [r3, #8]
 8006a1c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006a24:	edd3 6a00 	vldr	s13, [r3]
 8006a28:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006a30:	4974      	ldr	r1, [pc, #464]	@ (8006c04 <main+0x1544>)
 8006a32:	eeb0 3a63 	vmov.f32	s6, s7
 8006a36:	eef0 3a44 	vmov.f32	s7, s8
 8006a3a:	eeb0 4a64 	vmov.f32	s8, s9
 8006a3e:	eef0 1a45 	vmov.f32	s3, s10
 8006a42:	eeb0 2a65 	vmov.f32	s4, s11
 8006a46:	eef0 2a46 	vmov.f32	s5, s12
 8006a4a:	eeb0 0a66 	vmov.f32	s0, s13
 8006a4e:	eef0 0a47 	vmov.f32	s1, s14
 8006a52:	eeb0 1a67 	vmov.f32	s2, s15
 8006a56:	486c      	ldr	r0, [pc, #432]	@ (8006c08 <main+0x1548>)
 8006a58:	f7fd fbe6 	bl	8004228 <check_flight_phase>

    // Manage timed actuators (e.g., motors)
    manage_timed_actuators(&flight_state_machine);
 8006a5c:	486a      	ldr	r0, [pc, #424]	@ (8006c08 <main+0x1548>)
 8006a5e:	f7fd fea1 	bl	80047a4 <manage_timed_actuators>

    uint32_t loop_end_tick = HAL_GetTick();
 8006a62:	f001 fb2d 	bl	80080c0 <HAL_GetTick>
 8006a66:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    uint32_t execution_time_ms = loop_end_tick - loop_start_tick;
 8006a6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8006a6e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    // Populate FlightData_LogEntry_t
    FlightData_LogEntry_t current_log_entry;
    current_log_entry.timestamp_ms = loop_start_tick; // Or loop_end_tick, or a more precise timer if available
 8006a78:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a7c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006a80:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8006a84:	601a      	str	r2, [r3, #0]

    current_log_entry.lsm_acc_x_mg = lsm_acc_x;
 8006a86:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a8a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006a8e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8006a92:	605a      	str	r2, [r3, #4]
    current_log_entry.lsm_acc_y_mg = lsm_acc_y;
 8006a94:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a98:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006a9c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8006aa0:	609a      	str	r2, [r3, #8]
    current_log_entry.lsm_acc_z_mg = lsm_acc_z;
 8006aa2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006aa6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006aaa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8006aae:	60da      	str	r2, [r3, #12]

    current_log_entry.lsm_gyro_x_mdps = lsm_gyr_x;
 8006ab0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ab4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006ab8:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8006abc:	611a      	str	r2, [r3, #16]
    current_log_entry.lsm_gyro_y_mdps = lsm_gyr_y;
 8006abe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ac2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006ac6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8006aca:	615a      	str	r2, [r3, #20]
    current_log_entry.lsm_gyro_z_mdps = lsm_gyr_z;
 8006acc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ad0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006ad4:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8006ad8:	619a      	str	r2, [r3, #24]

    current_log_entry.bmp_pres_pa = persistent_bmp_pres_pa;
 8006ada:	4b4c      	ldr	r3, [pc, #304]	@ (8006c0c <main+0x154c>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ae2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006ae6:	61da      	str	r2, [r3, #28]
    current_log_entry.bmp_alt_m = persistent_bmp_alt_m;
 8006ae8:	4b41      	ldr	r3, [pc, #260]	@ (8006bf0 <main+0x1530>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006af0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006af4:	621a      	str	r2, [r3, #32]

    current_log_entry.adxl_hi_g_x = adxl_hi_g_x;
 8006af6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006afa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006afe:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006b02:	625a      	str	r2, [r3, #36]	@ 0x24
    current_log_entry.adxl_hi_g_y = adxl_hi_g_y;
 8006b04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b08:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b0c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006b10:	629a      	str	r2, [r3, #40]	@ 0x28
    current_log_entry.adxl_hi_g_z = adxl_hi_g_z;
 8006b12:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b16:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b1a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8006b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    current_log_entry.q0 = q0;
 8006b20:	4b3b      	ldr	r3, [pc, #236]	@ (8006c10 <main+0x1550>)
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b28:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b2c:	631a      	str	r2, [r3, #48]	@ 0x30
    current_log_entry.q1 = q1;
 8006b2e:	4b39      	ldr	r3, [pc, #228]	@ (8006c14 <main+0x1554>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b36:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b3a:	635a      	str	r2, [r3, #52]	@ 0x34
    current_log_entry.q2 = q2;
 8006b3c:	4b36      	ldr	r3, [pc, #216]	@ (8006c18 <main+0x1558>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b44:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b48:	639a      	str	r2, [r3, #56]	@ 0x38
    current_log_entry.q3 = q3;
 8006b4a:	4b34      	ldr	r3, [pc, #208]	@ (8006c1c <main+0x155c>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b52:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b56:	63da      	str	r2, [r3, #60]	@ 0x3c

    current_log_entry.kf_altitude_m = kf_altitude_velocity.altitude_m;
 8006b58:	4b26      	ldr	r3, [pc, #152]	@ (8006bf4 <main+0x1534>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b60:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b64:	641a      	str	r2, [r3, #64]	@ 0x40
    current_log_entry.kf_velocity_mps = kf_altitude_velocity.vertical_velocity_mps;
 8006b66:	4b23      	ldr	r3, [pc, #140]	@ (8006bf4 <main+0x1534>)
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b6e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b72:	645a      	str	r2, [r3, #68]	@ 0x44

    current_log_entry.loop_exec_time_ms = execution_time_ms;
 8006b74:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b78:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b7c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8006b80:	649a      	str	r2, [r3, #72]	@ 0x48
    current_log_entry.flight_phase = (uint8_t)flight_state_machine.flight_state;
 8006b82:	4b21      	ldr	r3, [pc, #132]	@ (8006c08 <main+0x1548>)
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b8a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006b8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    // Log the data to SD card if count is less than MAX_LOG_ENTRIES
    if (!sd_logging_stopped && log_entry_count < MAX_LOG_ENTRIES_DEBUG) {
 8006b92:	4b23      	ldr	r3, [pc, #140]	@ (8006c20 <main+0x1560>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f083 0301 	eor.w	r3, r3, #1
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d052      	beq.n	8006c46 <main+0x1586>
 8006ba0:	4b20      	ldr	r3, [pc, #128]	@ (8006c24 <main+0x1564>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b63      	cmp	r3, #99	@ 0x63
 8006ba6:	d84e      	bhi.n	8006c46 <main+0x1586>
        SD_Log_Data(&current_log_entry);
 8006ba8:	f107 030c 	add.w	r3, r7, #12
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fb faf3 	bl	8002198 <SD_Log_Data>
        log_entry_count++;
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8006c24 <main+0x1564>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c24 <main+0x1564>)
 8006bba:	6013      	str	r3, [r2, #0]

        if (log_entry_count >= MAX_LOG_ENTRIES_DEBUG) {
 8006bbc:	4b19      	ldr	r3, [pc, #100]	@ (8006c24 <main+0x1564>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b63      	cmp	r3, #99	@ 0x63
 8006bc2:	d95c      	bls.n	8006c7e <main+0x15be>
            sprintf(uart_buffer, "Reached %u log entries. Stopping SD card logging.\r\n", MAX_LOG_ENTRIES_DEBUG);
 8006bc4:	2264      	movs	r2, #100	@ 0x64
 8006bc6:	4918      	ldr	r1, [pc, #96]	@ (8006c28 <main+0x1568>)
 8006bc8:	4818      	ldr	r0, [pc, #96]	@ (8006c2c <main+0x156c>)
 8006bca:	f006 ff89 	bl	800dae0 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8006bce:	4817      	ldr	r0, [pc, #92]	@ (8006c2c <main+0x156c>)
 8006bd0:	f7f9 fb6e 	bl	80002b0 <strlen>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bdc:	4913      	ldr	r1, [pc, #76]	@ (8006c2c <main+0x156c>)
 8006bde:	4814      	ldr	r0, [pc, #80]	@ (8006c30 <main+0x1570>)
 8006be0:	f004 ffb0 	bl	800bb44 <HAL_UART_Transmit>
            SD_Log_Stop();
 8006be4:	f7fb fcd8 	bl	8002598 <SD_Log_Stop>
 8006be8:	e024      	b.n	8006c34 <main+0x1574>
 8006bea:	bf00      	nop
 8006bec:	40020400 	.word	0x40020400
 8006bf0:	20001060 	.word	0x20001060
 8006bf4:	20001064 	.word	0x20001064
 8006bf8:	20001058 	.word	0x20001058
 8006bfc:	3d48b439 	.word	0x3d48b439
 8006c00:	40020000 	.word	0x40020000
 8006c04:	2000103c 	.word	0x2000103c
 8006c08:	20001004 	.word	0x20001004
 8006c0c:	2000105c 	.word	0x2000105c
 8006c10:	20000004 	.word	0x20000004
 8006c14:	20000354 	.word	0x20000354
 8006c18:	20000358 	.word	0x20000358
 8006c1c:	2000035c 	.word	0x2000035c
 8006c20:	20001040 	.word	0x20001040
 8006c24:	20001044 	.word	0x20001044
 8006c28:	0801361c 	.word	0x0801361c
 8006c2c:	20000ee8 	.word	0x20000ee8
 8006c30:	2000071c 	.word	0x2000071c
            sd_logging_stopped = true;
 8006c34:	4b8b      	ldr	r3, [pc, #556]	@ (8006e64 <main+0x17a4>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET); // Turn off Green LED (LD2) to indicate logging stopped
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2180      	movs	r1, #128	@ 0x80
 8006c3e:	488a      	ldr	r0, [pc, #552]	@ (8006e68 <main+0x17a8>)
 8006c40:	f002 f866 	bl	8008d10 <HAL_GPIO_WritePin>
        if (log_entry_count >= MAX_LOG_ENTRIES_DEBUG) {
 8006c44:	e01b      	b.n	8006c7e <main+0x15be>
        }
    } else if (!sd_logging_stopped && log_entry_count >= MAX_LOG_ENTRIES_DEBUG) {
 8006c46:	4b87      	ldr	r3, [pc, #540]	@ (8006e64 <main+0x17a4>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f083 0301 	eor.w	r3, r3, #1
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d014      	beq.n	8006c7e <main+0x15be>
 8006c54:	4b85      	ldr	r3, [pc, #532]	@ (8006e6c <main+0x17ac>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b63      	cmp	r3, #99	@ 0x63
 8006c5a:	d910      	bls.n	8006c7e <main+0x15be>
        // This case handles if logging was already meant to be stopped but flag wasn't set.
        // Ensures SD_Log_Stop() is called if it somehow wasn't.
        if (!sd_logging_stopped) { // Check flag again to be absolutely sure
 8006c5c:	4b81      	ldr	r3, [pc, #516]	@ (8006e64 <main+0x17a4>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f083 0301 	eor.w	r3, r3, #1
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <main+0x15be>
            SD_Log_Stop();
 8006c6a:	f7fb fc95 	bl	8002598 <SD_Log_Stop>
            sd_logging_stopped = true;
 8006c6e:	4b7d      	ldr	r3, [pc, #500]	@ (8006e64 <main+0x17a4>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
             HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET); // Turn off Green LED (LD2)
 8006c74:	2200      	movs	r2, #0
 8006c76:	2180      	movs	r1, #128	@ 0x80
 8006c78:	487b      	ldr	r0, [pc, #492]	@ (8006e68 <main+0x17a8>)
 8006c7a:	f002 f849 	bl	8008d10 <HAL_GPIO_WritePin>
        }
    }

    // Check if execution time exceeds 10ms
    if (execution_time_ms >= TARGET_LOOP_PERIOD_MS) {
 8006c7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006c82:	2b09      	cmp	r3, #9
 8006c84:	d911      	bls.n	8006caa <main+0x15ea>
        // Blink LED3 if the execution time exceeds 10ms
        if (HAL_GetTick() - led3_last_toggle_time >= LED3_BLINK_INTERVAL_MS) {
 8006c86:	f001 fa1b 	bl	80080c0 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	4b78      	ldr	r3, [pc, #480]	@ (8006e70 <main+0x17b0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c94:	d909      	bls.n	8006caa <main+0x15ea>
            HAL_GPIO_TogglePin(GPIOB, LD3_Pin); // Toggle LED3
 8006c96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006c9a:	4873      	ldr	r0, [pc, #460]	@ (8006e68 <main+0x17a8>)
 8006c9c:	f002 f851 	bl	8008d42 <HAL_GPIO_TogglePin>
            led3_last_toggle_time = HAL_GetTick(); // Update last toggle time
 8006ca0:	f001 fa0e 	bl	80080c0 <HAL_GetTick>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	4a72      	ldr	r2, [pc, #456]	@ (8006e70 <main+0x17b0>)
 8006ca8:	6013      	str	r3, [r2, #0]
        }
    }

    // Consolidate UART output
    int_fast16_t current_len = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    bool data_printed_prev = false; // Flag to track if a separator is needed
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

#ifdef PRINT_LSM6DSO_ACCEL_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 8006cb6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d01a      	beq.n	8006cf4 <main+0x1634>
 8006cbe:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	dd16      	ble.n	8006cf4 <main+0x1634>
 8006cc6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cce:	d011      	beq.n	8006cf4 <main+0x1634>
 8006cd0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006cd4:	4a67      	ldr	r2, [pc, #412]	@ (8006e74 <main+0x17b4>)
 8006cd6:	1898      	adds	r0, r3, r2
 8006cd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006cdc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006ce0:	4a65      	ldr	r2, [pc, #404]	@ (8006e78 <main+0x17b8>)
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	f006 fec6 	bl	800da74 <sniprintf>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006cee:	4413      	add	r3, r2
 8006cf0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "A:");
 8006cf4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006cf8:	4a5e      	ldr	r2, [pc, #376]	@ (8006e74 <main+0x17b4>)
 8006cfa:	1898      	adds	r0, r3, r2
 8006cfc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006d00:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006d04:	4a5d      	ldr	r2, [pc, #372]	@ (8006e7c <main+0x17bc>)
 8006d06:	4619      	mov	r1, r3
 8006d08:	f006 feb4 	bl	800da74 <sniprintf>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006d12:	4413      	add	r3, r2
 8006d14:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    if (lsm_accel_data_ready) {
 8006d18:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d02b      	beq.n	8006d78 <main+0x16b8>
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "%.1f,%.1f,%.1f", lsm_acc_x, lsm_acc_y, lsm_acc_z);
 8006d20:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006d24:	4a53      	ldr	r2, [pc, #332]	@ (8006e74 <main+0x17b4>)
 8006d26:	189e      	adds	r6, r3, r2
 8006d28:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006d2c:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8006d30:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 8006d34:	f7f9 fc28 	bl	8000588 <__aeabi_f2d>
 8006d38:	4604      	mov	r4, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8006d40:	f7f9 fc22 	bl	8000588 <__aeabi_f2d>
 8006d44:	4680      	mov	r8, r0
 8006d46:	4689      	mov	r9, r1
 8006d48:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8006d4c:	f7f9 fc1c 	bl	8000588 <__aeabi_f2d>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d58:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006d5c:	e9cd 4500 	strd	r4, r5, [sp]
 8006d60:	4a47      	ldr	r2, [pc, #284]	@ (8006e80 <main+0x17c0>)
 8006d62:	4651      	mov	r1, sl
 8006d64:	4630      	mov	r0, r6
 8006d66:	f006 fe85 	bl	800da74 <sniprintf>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006d70:	4413      	add	r3, r2
 8006d72:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8006d76:	e011      	b.n	8006d9c <main+0x16dc>
    } else {
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "NR,NR,NR");
 8006d78:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006d7c:	4a3d      	ldr	r2, [pc, #244]	@ (8006e74 <main+0x17b4>)
 8006d7e:	1898      	adds	r0, r3, r2
 8006d80:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006d84:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006d88:	4a3e      	ldr	r2, [pc, #248]	@ (8006e84 <main+0x17c4>)
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	f006 fe72 	bl	800da74 <sniprintf>
 8006d90:	4602      	mov	r2, r0
 8006d92:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006d96:	4413      	add	r3, r2
 8006d98:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    }
    data_printed_prev = true;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
#endif

#ifdef PRINT_LSM6DSO_GYRO_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 8006da2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01a      	beq.n	8006de0 <main+0x1720>
 8006daa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	dd16      	ble.n	8006de0 <main+0x1720>
 8006db2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dba:	d011      	beq.n	8006de0 <main+0x1720>
 8006dbc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e74 <main+0x17b4>)
 8006dc2:	1898      	adds	r0, r3, r2
 8006dc4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006dc8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8006e78 <main+0x17b8>)
 8006dce:	4619      	mov	r1, r3
 8006dd0:	f006 fe50 	bl	800da74 <sniprintf>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006dda:	4413      	add	r3, r2
 8006ddc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "G:");
 8006de0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006de4:	4a23      	ldr	r2, [pc, #140]	@ (8006e74 <main+0x17b4>)
 8006de6:	1898      	adds	r0, r3, r2
 8006de8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006dec:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006df0:	4a25      	ldr	r2, [pc, #148]	@ (8006e88 <main+0x17c8>)
 8006df2:	4619      	mov	r1, r3
 8006df4:	f006 fe3e 	bl	800da74 <sniprintf>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006dfe:	4413      	add	r3, r2
 8006e00:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    if (lsm_gyro_data_ready) {
 8006e04:	f897 3166 	ldrb.w	r3, [r7, #358]	@ 0x166
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d03f      	beq.n	8006e8c <main+0x17cc>
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "%.1f,%.1f,%.1f", lsm_gyr_x, lsm_gyr_y, lsm_gyr_z);
 8006e0c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006e10:	4a18      	ldr	r2, [pc, #96]	@ (8006e74 <main+0x17b4>)
 8006e12:	189e      	adds	r6, r3, r2
 8006e14:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006e18:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8006e1c:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8006e20:	f7f9 fbb2 	bl	8000588 <__aeabi_f2d>
 8006e24:	4604      	mov	r4, r0
 8006e26:	460d      	mov	r5, r1
 8006e28:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8006e2c:	f7f9 fbac 	bl	8000588 <__aeabi_f2d>
 8006e30:	4680      	mov	r8, r0
 8006e32:	4689      	mov	r9, r1
 8006e34:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 8006e38:	f7f9 fba6 	bl	8000588 <__aeabi_f2d>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e44:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006e48:	e9cd 4500 	strd	r4, r5, [sp]
 8006e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8006e80 <main+0x17c0>)
 8006e4e:	4651      	mov	r1, sl
 8006e50:	4630      	mov	r0, r6
 8006e52:	f006 fe0f 	bl	800da74 <sniprintf>
 8006e56:	4602      	mov	r2, r0
 8006e58:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8006e62:	e025      	b.n	8006eb0 <main+0x17f0>
 8006e64:	20001040 	.word	0x20001040
 8006e68:	40020400 	.word	0x40020400
 8006e6c:	20001044 	.word	0x20001044
 8006e70:	20001084 	.word	0x20001084
 8006e74:	20000ee8 	.word	0x20000ee8
 8006e78:	08013650 	.word	0x08013650
 8006e7c:	08013654 	.word	0x08013654
 8006e80:	08013658 	.word	0x08013658
 8006e84:	08013668 	.word	0x08013668
 8006e88:	08013674 	.word	0x08013674
    } else {
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "NR,NR,NR");
 8006e8c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006e90:	4aa1      	ldr	r2, [pc, #644]	@ (8007118 <main+0x1a58>)
 8006e92:	1898      	adds	r0, r3, r2
 8006e94:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006e98:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006e9c:	4a9f      	ldr	r2, [pc, #636]	@ (800711c <main+0x1a5c>)
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f006 fde8 	bl	800da74 <sniprintf>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006eaa:	4413      	add	r3, r2
 8006eac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    }
    data_printed_prev = true;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
#endif

#ifdef PRINT_BMP390_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 8006eb6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01a      	beq.n	8006ef4 <main+0x1834>
 8006ebe:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dd16      	ble.n	8006ef4 <main+0x1834>
 8006ec6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ece:	d011      	beq.n	8006ef4 <main+0x1834>
 8006ed0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006ed4:	4a90      	ldr	r2, [pc, #576]	@ (8007118 <main+0x1a58>)
 8006ed6:	1898      	adds	r0, r3, r2
 8006ed8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006edc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006ee0:	4a8f      	ldr	r2, [pc, #572]	@ (8007120 <main+0x1a60>)
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f006 fdc6 	bl	800da74 <sniprintf>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006eee:	4413      	add	r3, r2
 8006ef0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "B:");
 8006ef4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006ef8:	4a87      	ldr	r2, [pc, #540]	@ (8007118 <main+0x1a58>)
 8006efa:	1898      	adds	r0, r3, r2
 8006efc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006f00:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006f04:	4a87      	ldr	r2, [pc, #540]	@ (8007124 <main+0x1a64>)
 8006f06:	4619      	mov	r1, r3
 8006f08:	f006 fdb4 	bl	800da74 <sniprintf>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006f12:	4413      	add	r3, r2
 8006f14:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "P%.0f,Alt%.1f", persistent_bmp_pres_pa, persistent_bmp_alt_m);
 8006f18:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006f1c:	4a7e      	ldr	r2, [pc, #504]	@ (8007118 <main+0x1a58>)
 8006f1e:	189e      	adds	r6, r3, r2
 8006f20:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006f24:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8006f28:	4b7f      	ldr	r3, [pc, #508]	@ (8007128 <main+0x1a68>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7f9 fb2b 	bl	8000588 <__aeabi_f2d>
 8006f32:	4604      	mov	r4, r0
 8006f34:	460d      	mov	r5, r1
 8006f36:	4b7d      	ldr	r3, [pc, #500]	@ (800712c <main+0x1a6c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7f9 fb24 	bl	8000588 <__aeabi_f2d>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f48:	e9cd 4500 	strd	r4, r5, [sp]
 8006f4c:	4a78      	ldr	r2, [pc, #480]	@ (8007130 <main+0x1a70>)
 8006f4e:	4641      	mov	r1, r8
 8006f50:	4630      	mov	r0, r6
 8006f52:	f006 fd8f 	bl	800da74 <sniprintf>
 8006f56:	4602      	mov	r2, r0
 8006f58:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    data_printed_prev = true;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
#endif

#ifdef PRINT_ADXL375_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 8006f68:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01a      	beq.n	8006fa6 <main+0x18e6>
 8006f70:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	dd16      	ble.n	8006fa6 <main+0x18e6>
 8006f78:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f80:	d011      	beq.n	8006fa6 <main+0x18e6>
 8006f82:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006f86:	4a64      	ldr	r2, [pc, #400]	@ (8007118 <main+0x1a58>)
 8006f88:	1898      	adds	r0, r3, r2
 8006f8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006f8e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006f92:	4a63      	ldr	r2, [pc, #396]	@ (8007120 <main+0x1a60>)
 8006f94:	4619      	mov	r1, r3
 8006f96:	f006 fd6d 	bl	800da74 <sniprintf>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "H:%.1f,%.1f,%.1f", adxl_hi_g_x, adxl_hi_g_y, adxl_hi_g_z);
 8006fa6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006faa:	4a5b      	ldr	r2, [pc, #364]	@ (8007118 <main+0x1a58>)
 8006fac:	189e      	adds	r6, r3, r2
 8006fae:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006fb2:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8006fb6:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8006fba:	f7f9 fae5 	bl	8000588 <__aeabi_f2d>
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	460d      	mov	r5, r1
 8006fc2:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8006fc6:	f7f9 fadf 	bl	8000588 <__aeabi_f2d>
 8006fca:	4680      	mov	r8, r0
 8006fcc:	4689      	mov	r9, r1
 8006fce:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8006fd2:	f7f9 fad9 	bl	8000588 <__aeabi_f2d>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fde:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006fe2:	e9cd 4500 	strd	r4, r5, [sp]
 8006fe6:	4a53      	ldr	r2, [pc, #332]	@ (8007134 <main+0x1a74>)
 8006fe8:	4651      	mov	r1, sl
 8006fea:	4630      	mov	r0, r6
 8006fec:	f006 fd42 	bl	800da74 <sniprintf>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    data_printed_prev = true;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
#endif
    
#ifdef PRINT_QUATERNION_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 8007002:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01a      	beq.n	8007040 <main+0x1980>
 800700a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800700e:	2b00      	cmp	r3, #0
 8007010:	dd16      	ble.n	8007040 <main+0x1980>
 8007012:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800701a:	d011      	beq.n	8007040 <main+0x1980>
 800701c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007020:	4a3d      	ldr	r2, [pc, #244]	@ (8007118 <main+0x1a58>)
 8007022:	1898      	adds	r0, r3, r2
 8007024:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007028:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800702c:	4a3c      	ldr	r2, [pc, #240]	@ (8007120 <main+0x1a60>)
 800702e:	4619      	mov	r1, r3
 8007030:	f006 fd20 	bl	800da74 <sniprintf>
 8007034:	4602      	mov	r2, r0
 8007036:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800703a:	4413      	add	r3, r2
 800703c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "Q:%.2f,%.2f,%.2f,%.2f", q0, q1, q2, q3);
 8007040:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007044:	4a34      	ldr	r2, [pc, #208]	@ (8007118 <main+0x1a58>)
 8007046:	189e      	adds	r6, r3, r2
 8007048:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800704c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007050:	607b      	str	r3, [r7, #4]
 8007052:	4b39      	ldr	r3, [pc, #228]	@ (8007138 <main+0x1a78>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f7f9 fa96 	bl	8000588 <__aeabi_f2d>
 800705c:	4604      	mov	r4, r0
 800705e:	460d      	mov	r5, r1
 8007060:	4b36      	ldr	r3, [pc, #216]	@ (800713c <main+0x1a7c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f7f9 fa8f 	bl	8000588 <__aeabi_f2d>
 800706a:	4680      	mov	r8, r0
 800706c:	4689      	mov	r9, r1
 800706e:	4b34      	ldr	r3, [pc, #208]	@ (8007140 <main+0x1a80>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f7f9 fa88 	bl	8000588 <__aeabi_f2d>
 8007078:	4682      	mov	sl, r0
 800707a:	468b      	mov	fp, r1
 800707c:	4b31      	ldr	r3, [pc, #196]	@ (8007144 <main+0x1a84>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4618      	mov	r0, r3
 8007082:	f7f9 fa81 	bl	8000588 <__aeabi_f2d>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800708e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8007092:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007096:	e9cd 4500 	strd	r4, r5, [sp]
 800709a:	4a2b      	ldr	r2, [pc, #172]	@ (8007148 <main+0x1a88>)
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4630      	mov	r0, r6
 80070a0:	f006 fce8 	bl	800da74 <sniprintf>
 80070a4:	4602      	mov	r2, r0
 80070a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80070aa:	4413      	add	r3, r2
 80070ac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    data_printed_prev = true;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
#endif

#ifdef PRINT_LOOP_EXEC_TIME
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 80070b6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d01a      	beq.n	80070f4 <main+0x1a34>
 80070be:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	dd16      	ble.n	80070f4 <main+0x1a34>
 80070c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ce:	d011      	beq.n	80070f4 <main+0x1a34>
 80070d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80070d4:	4a10      	ldr	r2, [pc, #64]	@ (8007118 <main+0x1a58>)
 80070d6:	1898      	adds	r0, r3, r2
 80070d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80070dc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80070e0:	4a0f      	ldr	r2, [pc, #60]	@ (8007120 <main+0x1a60>)
 80070e2:	4619      	mov	r1, r3
 80070e4:	f006 fcc6 	bl	800da74 <sniprintf>
 80070e8:	4602      	mov	r2, r0
 80070ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80070ee:	4413      	add	r3, r2
 80070f0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "L:%lums%s",
 80070f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80070f8:	4a07      	ldr	r2, [pc, #28]	@ (8007118 <main+0x1a58>)
 80070fa:	1898      	adds	r0, r3, r2
 80070fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007100:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8007104:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007108:	2b09      	cmp	r3, #9
 800710a:	d921      	bls.n	8007150 <main+0x1a90>
                            execution_time_ms,
                            (execution_time_ms >= TARGET_LOOP_PERIOD_MS && execution_time_ms != 0) ? " OV!" : "");
 800710c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01d      	beq.n	8007150 <main+0x1a90>
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "L:%lums%s",
 8007114:	4b0d      	ldr	r3, [pc, #52]	@ (800714c <main+0x1a8c>)
 8007116:	e01c      	b.n	8007152 <main+0x1a92>
 8007118:	20000ee8 	.word	0x20000ee8
 800711c:	08013668 	.word	0x08013668
 8007120:	08013650 	.word	0x08013650
 8007124:	08013678 	.word	0x08013678
 8007128:	2000105c 	.word	0x2000105c
 800712c:	20001060 	.word	0x20001060
 8007130:	0801367c 	.word	0x0801367c
 8007134:	0801368c 	.word	0x0801368c
 8007138:	20000004 	.word	0x20000004
 800713c:	20000354 	.word	0x20000354
 8007140:	20000358 	.word	0x20000358
 8007144:	2000035c 	.word	0x2000035c
 8007148:	080136a0 	.word	0x080136a0
 800714c:	080136b8 	.word	0x080136b8
 8007150:	4b88      	ldr	r3, [pc, #544]	@ (8007374 <main+0x1cb4>)
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007158:	4a87      	ldr	r2, [pc, #540]	@ (8007378 <main+0x1cb8>)
 800715a:	f006 fc8b 	bl	800da74 <sniprintf>
 800715e:	4602      	mov	r2, r0
 8007160:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007164:	4413      	add	r3, r2
 8007166:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    data_printed_prev = true; // Though this is last, set it for consistency
 800716a:	2301      	movs	r3, #1
 800716c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
#endif

#ifdef PRINT_KALMAN_DATA
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 0) { current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|"); }
 8007170:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01a      	beq.n	80071ae <main+0x1aee>
 8007178:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800717c:	2b00      	cmp	r3, #0
 800717e:	dd16      	ble.n	80071ae <main+0x1aee>
 8007180:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007188:	d011      	beq.n	80071ae <main+0x1aee>
 800718a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800718e:	4a7b      	ldr	r2, [pc, #492]	@ (800737c <main+0x1cbc>)
 8007190:	1898      	adds	r0, r3, r2
 8007192:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007196:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800719a:	4a79      	ldr	r2, [pc, #484]	@ (8007380 <main+0x1cc0>)
 800719c:	4619      	mov	r1, r3
 800719e:	f006 fc69 	bl	800da74 <sniprintf>
 80071a2:	4602      	mov	r2, r0
 80071a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80071a8:	4413      	add	r3, r2
 80071aa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "KF:Alt%.2f,Vel%.2f", kf_altitude_velocity.altitude_m, kf_altitude_velocity.vertical_velocity_mps);
 80071ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80071b2:	4a72      	ldr	r2, [pc, #456]	@ (800737c <main+0x1cbc>)
 80071b4:	189e      	adds	r6, r3, r2
 80071b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80071ba:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 80071be:	4b71      	ldr	r3, [pc, #452]	@ (8007384 <main+0x1cc4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7f9 f9e0 	bl	8000588 <__aeabi_f2d>
 80071c8:	4604      	mov	r4, r0
 80071ca:	460d      	mov	r5, r1
 80071cc:	4b6d      	ldr	r3, [pc, #436]	@ (8007384 <main+0x1cc4>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7f9 f9d9 	bl	8000588 <__aeabi_f2d>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071de:	e9cd 4500 	strd	r4, r5, [sp]
 80071e2:	4a69      	ldr	r2, [pc, #420]	@ (8007388 <main+0x1cc8>)
 80071e4:	4641      	mov	r1, r8
 80071e6:	4630      	mov	r0, r6
 80071e8:	f006 fc44 	bl	800da74 <sniprintf>
 80071ec:	4602      	mov	r2, r0
 80071ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80071f2:	4413      	add	r3, r2
 80071f4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    data_printed_prev = true;
 80071f8:	2301      	movs	r3, #1
 80071fa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
#endif

    // Flight Phase Print
    if (data_printed_prev && current_len > 0 && (sizeof(uart_buffer) - current_len) > 2) { // Need space for |FP:X
 80071fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007202:	2b00      	cmp	r3, #0
 8007204:	d01b      	beq.n	800723e <main+0x1b7e>
 8007206:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800720a:	2b00      	cmp	r3, #0
 800720c:	dd17      	ble.n	800723e <main+0x1b7e>
 800720e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007212:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007216:	2b02      	cmp	r3, #2
 8007218:	d911      	bls.n	800723e <main+0x1b7e>
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|");
 800721a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800721e:	4a57      	ldr	r2, [pc, #348]	@ (800737c <main+0x1cbc>)
 8007220:	1898      	adds	r0, r3, r2
 8007222:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007226:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800722a:	4a55      	ldr	r2, [pc, #340]	@ (8007380 <main+0x1cc0>)
 800722c:	4619      	mov	r1, r3
 800722e:	f006 fc21 	bl	800da74 <sniprintf>
 8007232:	4602      	mov	r2, r0
 8007234:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007238:	4413      	add	r3, r2
 800723a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    }
    char phase_char = 'U'; // Unknown/default
 800723e:	2355      	movs	r3, #85	@ 0x55
 8007240:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
    switch (flight_state_machine.flight_state) {
 8007244:	4b51      	ldr	r3, [pc, #324]	@ (800738c <main+0x1ccc>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b05      	cmp	r3, #5
 800724a:	d827      	bhi.n	800729c <main+0x1bdc>
 800724c:	a201      	add	r2, pc, #4	@ (adr r2, 8007254 <main+0x1b94>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	0800726d 	.word	0x0800726d
 8007258:	08007275 	.word	0x08007275
 800725c:	0800727d 	.word	0x0800727d
 8007260:	08007285 	.word	0x08007285
 8007264:	0800728d 	.word	0x0800728d
 8007268:	08007295 	.word	0x08007295
        case READY:     phase_char = 'RDY'; break;
 800726c:	2359      	movs	r3, #89	@ 0x59
 800726e:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8007272:	e013      	b.n	800729c <main+0x1bdc>
        case THRUSTING: phase_char = 'THR'; break;
 8007274:	2352      	movs	r3, #82	@ 0x52
 8007276:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 800727a:	e00f      	b.n	800729c <main+0x1bdc>
        case COASTING:  phase_char = 'COA'; break;
 800727c:	2341      	movs	r3, #65	@ 0x41
 800727e:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8007282:	e00b      	b.n	800729c <main+0x1bdc>
        case DROGUE:    phase_char = 'DRO'; break;
 8007284:	234f      	movs	r3, #79	@ 0x4f
 8007286:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 800728a:	e007      	b.n	800729c <main+0x1bdc>
        case MAIN:      phase_char = 'MAI'; break;
 800728c:	2349      	movs	r3, #73	@ 0x49
 800728e:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8007292:	e003      	b.n	800729c <main+0x1bdc>
        case TOUCHDOWN: phase_char = 'TCH'; break; // L for Landed/Touchdown
 8007294:	2348      	movs	r3, #72	@ 0x48
 8007296:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 800729a:	bf00      	nop
    }
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "FP:%c", phase_char);
 800729c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80072a0:	4a36      	ldr	r2, [pc, #216]	@ (800737c <main+0x1cbc>)
 80072a2:	1898      	adds	r0, r3, r2
 80072a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80072a8:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 80072ac:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80072b0:	4a37      	ldr	r2, [pc, #220]	@ (8007390 <main+0x1cd0>)
 80072b2:	f006 fbdf 	bl	800da74 <sniprintf>
 80072b6:	4602      	mov	r2, r0
 80072b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80072bc:	4413      	add	r3, r2
 80072be:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    // No need to set data_printed_prev = true; as this is the last item before newline typically

    // Add newline if any data was printed
    if (current_len > 0) {
 80072c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	dd11      	ble.n	80072ee <main+0x1c2e>
        current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "\r\n");
 80072ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80072ce:	4a2b      	ldr	r2, [pc, #172]	@ (800737c <main+0x1cbc>)
 80072d0:	1898      	adds	r0, r3, r2
 80072d2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80072d6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80072da:	4a2e      	ldr	r2, [pc, #184]	@ (8007394 <main+0x1cd4>)
 80072dc:	4619      	mov	r1, r3
 80072de:	f006 fbc9 	bl	800da74 <sniprintf>
 80072e2:	4602      	mov	r2, r0
 80072e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80072e8:	4413      	add	r3, r2
 80072ea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    }

    if (current_len > 0 && (size_t)current_len < sizeof(uart_buffer)) { // Check if anything was written and buffer not overflowed by snprintf
 80072ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	dd0d      	ble.n	8007312 <main+0x1c52>
 80072f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80072fa:	2bff      	cmp	r3, #255	@ 0xff
 80072fc:	d809      	bhi.n	8007312 <main+0x1c52>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, current_len, HAL_MAX_DELAY);
 80072fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007302:	b29a      	uxth	r2, r3
 8007304:	f04f 33ff 	mov.w	r3, #4294967295
 8007308:	491c      	ldr	r1, [pc, #112]	@ (800737c <main+0x1cbc>)
 800730a:	4823      	ldr	r0, [pc, #140]	@ (8007398 <main+0x1cd8>)
 800730c:	f004 fc1a 	bl	800bb44 <HAL_UART_Transmit>
 8007310:	e01e      	b.n	8007350 <main+0x1c90>
    } else if ((size_t)current_len >= sizeof(uart_buffer)) {
 8007312:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007316:	2bff      	cmp	r3, #255	@ 0xff
 8007318:	d91a      	bls.n	8007350 <main+0x1c90>
        // Handle potential truncation / error in string formatting if buffer was too small
        char err_msg[] = "UART buffer overflow!\r\n";
 800731a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800731e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8007322:	4a1e      	ldr	r2, [pc, #120]	@ (800739c <main+0x1cdc>)
 8007324:	461c      	mov	r4, r3
 8007326:	4615      	mov	r5, r2
 8007328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800732a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800732c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007330:	e884 0003 	stmia.w	r4, {r0, r1}
        HAL_UART_Transmit(&huart3, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 8007334:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007338:	4618      	mov	r0, r3
 800733a:	f7f8 ffb9 	bl	80002b0 <strlen>
 800733e:	4603      	mov	r3, r0
 8007340:	b29a      	uxth	r2, r3
 8007342:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8007346:	f04f 33ff 	mov.w	r3, #4294967295
 800734a:	4813      	ldr	r0, [pc, #76]	@ (8007398 <main+0x1cd8>)
 800734c:	f004 fbfa 	bl	800bb44 <HAL_UART_Transmit>
    }


    if (execution_time_ms < TARGET_LOOP_PERIOD_MS) {
 8007350:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007354:	2b09      	cmp	r3, #9
 8007356:	f63f a8ac 	bhi.w	80064b2 <main+0xdf2>
      uint32_t delay_ms = TARGET_LOOP_PERIOD_MS - execution_time_ms;
 800735a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800735e:	f1c3 030a 	rsb	r3, r3, #10
 8007362:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
      HAL_Delay(delay_ms);
 8007366:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800736a:	f000 feb5 	bl	80080d8 <HAL_Delay>
  {
 800736e:	f7ff b8a0 	b.w	80064b2 <main+0xdf2>
 8007372:	bf00      	nop
 8007374:	080136c0 	.word	0x080136c0
 8007378:	080136c4 	.word	0x080136c4
 800737c:	20000ee8 	.word	0x20000ee8
 8007380:	08013650 	.word	0x08013650
 8007384:	20001064 	.word	0x20001064
 8007388:	080136d0 	.word	0x080136d0
 800738c:	20001004 	.word	0x20001004
 8007390:	080136e4 	.word	0x080136e4
 8007394:	080136ec 	.word	0x080136ec
 8007398:	2000071c 	.word	0x2000071c
 800739c:	080136f0 	.word	0x080136f0

080073a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b094      	sub	sp, #80	@ 0x50
 80073a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073a6:	f107 0320 	add.w	r3, r7, #32
 80073aa:	2230      	movs	r2, #48	@ 0x30
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f006 fc38 	bl	800dc24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073b4:	f107 030c 	add.w	r3, r7, #12
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	609a      	str	r2, [r3, #8]
 80073c0:	60da      	str	r2, [r3, #12]
 80073c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80073c4:	f002 fe54 	bl	800a070 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80073c8:	4b27      	ldr	r3, [pc, #156]	@ (8007468 <SystemClock_Config+0xc8>)
 80073ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073cc:	4a26      	ldr	r2, [pc, #152]	@ (8007468 <SystemClock_Config+0xc8>)
 80073ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80073d4:	4b24      	ldr	r3, [pc, #144]	@ (8007468 <SystemClock_Config+0xc8>)
 80073d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80073e0:	4b22      	ldr	r3, [pc, #136]	@ (800746c <SystemClock_Config+0xcc>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80073e8:	4a20      	ldr	r2, [pc, #128]	@ (800746c <SystemClock_Config+0xcc>)
 80073ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	4b1e      	ldr	r3, [pc, #120]	@ (800746c <SystemClock_Config+0xcc>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007400:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8007404:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007406:	2302      	movs	r3, #2
 8007408:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800740a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800740e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007410:	2304      	movs	r3, #4
 8007412:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8007414:	2348      	movs	r3, #72	@ 0x48
 8007416:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007418:	2302      	movs	r3, #2
 800741a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800741c:	2303      	movs	r3, #3
 800741e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007420:	f107 0320 	add.w	r3, r7, #32
 8007424:	4618      	mov	r0, r3
 8007426:	f002 fe33 	bl	800a090 <HAL_RCC_OscConfig>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007430:	f000 fa46 	bl	80078c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007434:	230f      	movs	r3, #15
 8007436:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007438:	2302      	movs	r3, #2
 800743a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007444:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800744a:	f107 030c 	add.w	r3, r7, #12
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f003 f8c1 	bl	800a5d8 <HAL_RCC_ClockConfig>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800745c:	f000 fa30 	bl	80078c0 <Error_Handler>
  }
}
 8007460:	bf00      	nop
 8007462:	3750      	adds	r7, #80	@ 0x50
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40023800 	.word	0x40023800
 800746c:	40007000 	.word	0x40007000

08007470 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8007474:	4b1f      	ldr	r3, [pc, #124]	@ (80074f4 <MX_ETH_Init+0x84>)
 8007476:	4a20      	ldr	r2, [pc, #128]	@ (80074f8 <MX_ETH_Init+0x88>)
 8007478:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800747a:	4b20      	ldr	r3, [pc, #128]	@ (80074fc <MX_ETH_Init+0x8c>)
 800747c:	2200      	movs	r2, #0
 800747e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8007480:	4b1e      	ldr	r3, [pc, #120]	@ (80074fc <MX_ETH_Init+0x8c>)
 8007482:	2280      	movs	r2, #128	@ 0x80
 8007484:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8007486:	4b1d      	ldr	r3, [pc, #116]	@ (80074fc <MX_ETH_Init+0x8c>)
 8007488:	22e1      	movs	r2, #225	@ 0xe1
 800748a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800748c:	4b1b      	ldr	r3, [pc, #108]	@ (80074fc <MX_ETH_Init+0x8c>)
 800748e:	2200      	movs	r2, #0
 8007490:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8007492:	4b1a      	ldr	r3, [pc, #104]	@ (80074fc <MX_ETH_Init+0x8c>)
 8007494:	2200      	movs	r2, #0
 8007496:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8007498:	4b18      	ldr	r3, [pc, #96]	@ (80074fc <MX_ETH_Init+0x8c>)
 800749a:	2200      	movs	r2, #0
 800749c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800749e:	4b15      	ldr	r3, [pc, #84]	@ (80074f4 <MX_ETH_Init+0x84>)
 80074a0:	4a16      	ldr	r2, [pc, #88]	@ (80074fc <MX_ETH_Init+0x8c>)
 80074a2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80074a4:	4b13      	ldr	r3, [pc, #76]	@ (80074f4 <MX_ETH_Init+0x84>)
 80074a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80074aa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80074ac:	4b11      	ldr	r3, [pc, #68]	@ (80074f4 <MX_ETH_Init+0x84>)
 80074ae:	4a14      	ldr	r2, [pc, #80]	@ (8007500 <MX_ETH_Init+0x90>)
 80074b0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80074b2:	4b10      	ldr	r3, [pc, #64]	@ (80074f4 <MX_ETH_Init+0x84>)
 80074b4:	4a13      	ldr	r2, [pc, #76]	@ (8007504 <MX_ETH_Init+0x94>)
 80074b6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80074b8:	4b0e      	ldr	r3, [pc, #56]	@ (80074f4 <MX_ETH_Init+0x84>)
 80074ba:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80074be:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80074c0:	480c      	ldr	r0, [pc, #48]	@ (80074f4 <MX_ETH_Init+0x84>)
 80074c2:	f000 ff13 	bl	80082ec <HAL_ETH_Init>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80074cc:	f000 f9f8 	bl	80078c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80074d0:	2238      	movs	r2, #56	@ 0x38
 80074d2:	2100      	movs	r1, #0
 80074d4:	480c      	ldr	r0, [pc, #48]	@ (8007508 <MX_ETH_Init+0x98>)
 80074d6:	f006 fba5 	bl	800dc24 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80074da:	4b0b      	ldr	r3, [pc, #44]	@ (8007508 <MX_ETH_Init+0x98>)
 80074dc:	2221      	movs	r2, #33	@ 0x21
 80074de:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80074e0:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <MX_ETH_Init+0x98>)
 80074e2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80074e6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80074e8:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <MX_ETH_Init+0x98>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80074ee:	bf00      	nop
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	200005b4 	.word	0x200005b4
 80074f8:	40028000 	.word	0x40028000
 80074fc:	20001088 	.word	0x20001088
 8007500:	20000294 	.word	0x20000294
 8007504:	200001f4 	.word	0x200001f4
 8007508:	2000057c 	.word	0x2000057c

0800750c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007510:	4b1b      	ldr	r3, [pc, #108]	@ (8007580 <MX_I2C1_Init+0x74>)
 8007512:	4a1c      	ldr	r2, [pc, #112]	@ (8007584 <MX_I2C1_Init+0x78>)
 8007514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8007516:	4b1a      	ldr	r3, [pc, #104]	@ (8007580 <MX_I2C1_Init+0x74>)
 8007518:	4a1b      	ldr	r2, [pc, #108]	@ (8007588 <MX_I2C1_Init+0x7c>)
 800751a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800751c:	4b18      	ldr	r3, [pc, #96]	@ (8007580 <MX_I2C1_Init+0x74>)
 800751e:	2200      	movs	r2, #0
 8007520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007522:	4b17      	ldr	r3, [pc, #92]	@ (8007580 <MX_I2C1_Init+0x74>)
 8007524:	2201      	movs	r2, #1
 8007526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007528:	4b15      	ldr	r3, [pc, #84]	@ (8007580 <MX_I2C1_Init+0x74>)
 800752a:	2200      	movs	r2, #0
 800752c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800752e:	4b14      	ldr	r3, [pc, #80]	@ (8007580 <MX_I2C1_Init+0x74>)
 8007530:	2200      	movs	r2, #0
 8007532:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007534:	4b12      	ldr	r3, [pc, #72]	@ (8007580 <MX_I2C1_Init+0x74>)
 8007536:	2200      	movs	r2, #0
 8007538:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800753a:	4b11      	ldr	r3, [pc, #68]	@ (8007580 <MX_I2C1_Init+0x74>)
 800753c:	2200      	movs	r2, #0
 800753e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007540:	4b0f      	ldr	r3, [pc, #60]	@ (8007580 <MX_I2C1_Init+0x74>)
 8007542:	2200      	movs	r2, #0
 8007544:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007546:	480e      	ldr	r0, [pc, #56]	@ (8007580 <MX_I2C1_Init+0x74>)
 8007548:	f001 fc16 	bl	8008d78 <HAL_I2C_Init>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007552:	f000 f9b5 	bl	80078c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007556:	2100      	movs	r1, #0
 8007558:	4809      	ldr	r0, [pc, #36]	@ (8007580 <MX_I2C1_Init+0x74>)
 800755a:	f002 fbb7 	bl	8009ccc <HAL_I2CEx_ConfigAnalogFilter>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007564:	f000 f9ac 	bl	80078c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007568:	2100      	movs	r1, #0
 800756a:	4805      	ldr	r0, [pc, #20]	@ (8007580 <MX_I2C1_Init+0x74>)
 800756c:	f002 fbf9 	bl	8009d62 <HAL_I2CEx_ConfigDigitalFilter>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007576:	f000 f9a3 	bl	80078c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800757a:	bf00      	nop
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000664 	.word	0x20000664
 8007584:	40005400 	.word	0x40005400
 8007588:	00808cd2 	.word	0x00808cd2

0800758c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007590:	4b1b      	ldr	r3, [pc, #108]	@ (8007600 <MX_SPI2_Init+0x74>)
 8007592:	4a1c      	ldr	r2, [pc, #112]	@ (8007604 <MX_SPI2_Init+0x78>)
 8007594:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007596:	4b1a      	ldr	r3, [pc, #104]	@ (8007600 <MX_SPI2_Init+0x74>)
 8007598:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800759c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800759e:	4b18      	ldr	r3, [pc, #96]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80075a4:	4b16      	ldr	r3, [pc, #88]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80075aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80075ac:	4b14      	ldr	r3, [pc, #80]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80075b2:	4b13      	ldr	r3, [pc, #76]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80075b8:	4b11      	ldr	r3, [pc, #68]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80075c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80075cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80075d8:	4b09      	ldr	r3, [pc, #36]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075da:	2207      	movs	r2, #7
 80075dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80075de:	4b08      	ldr	r3, [pc, #32]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80075e4:	4b06      	ldr	r3, [pc, #24]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075e6:	2208      	movs	r2, #8
 80075e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80075ea:	4805      	ldr	r0, [pc, #20]	@ (8007600 <MX_SPI2_Init+0x74>)
 80075ec:	f003 fe0a 	bl	800b204 <HAL_SPI_Init>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80075f6:	f000 f963 	bl	80078c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80075fa:	bf00      	nop
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200006b8 	.word	0x200006b8
 8007604:	40003800 	.word	0x40003800

08007608 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800760c:	4b14      	ldr	r3, [pc, #80]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 800760e:	4a15      	ldr	r2, [pc, #84]	@ (8007664 <MX_USART3_UART_Init+0x5c>)
 8007610:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007612:	4b13      	ldr	r3, [pc, #76]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 8007614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007618:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800761a:	4b11      	ldr	r3, [pc, #68]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 800761c:	2200      	movs	r2, #0
 800761e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007620:	4b0f      	ldr	r3, [pc, #60]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 8007622:	2200      	movs	r2, #0
 8007624:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007626:	4b0e      	ldr	r3, [pc, #56]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 8007628:	2200      	movs	r2, #0
 800762a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800762c:	4b0c      	ldr	r3, [pc, #48]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 800762e:	220c      	movs	r2, #12
 8007630:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007632:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 8007634:	2200      	movs	r2, #0
 8007636:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007638:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 800763a:	2200      	movs	r2, #0
 800763c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800763e:	4b08      	ldr	r3, [pc, #32]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 8007640:	2200      	movs	r2, #0
 8007642:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007644:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 8007646:	2200      	movs	r2, #0
 8007648:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800764a:	4805      	ldr	r0, [pc, #20]	@ (8007660 <MX_USART3_UART_Init+0x58>)
 800764c:	f004 fa2c 	bl	800baa8 <HAL_UART_Init>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8007656:	f000 f933 	bl	80078c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800765a:	bf00      	nop
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	2000071c 	.word	0x2000071c
 8007664:	40004800 	.word	0x40004800

08007668 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800766c:	4b14      	ldr	r3, [pc, #80]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800766e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007672:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007674:	4b12      	ldr	r3, [pc, #72]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007676:	2206      	movs	r2, #6
 8007678:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800767a:	4b11      	ldr	r3, [pc, #68]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800767c:	2202      	movs	r2, #2
 800767e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007680:	4b0f      	ldr	r3, [pc, #60]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007682:	2200      	movs	r2, #0
 8007684:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007686:	4b0e      	ldr	r3, [pc, #56]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007688:	2202      	movs	r2, #2
 800768a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800768c:	4b0c      	ldr	r3, [pc, #48]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800768e:	2201      	movs	r2, #1
 8007690:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007692:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007694:	2200      	movs	r2, #0
 8007696:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007698:	4b09      	ldr	r3, [pc, #36]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800769a:	2200      	movs	r2, #0
 800769c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800769e:	4b08      	ldr	r3, [pc, #32]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80076a0:	2201      	movs	r2, #1
 80076a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076a4:	4b06      	ldr	r3, [pc, #24]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076aa:	4805      	ldr	r0, [pc, #20]	@ (80076c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80076ac:	f002 fba5 	bl	8009dfa <HAL_PCD_Init>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80076b6:	f000 f903 	bl	80078c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80076ba:	bf00      	nop
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	200007a4 	.word	0x200007a4

080076c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08e      	sub	sp, #56	@ 0x38
 80076c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	605a      	str	r2, [r3, #4]
 80076d4:	609a      	str	r2, [r3, #8]
 80076d6:	60da      	str	r2, [r3, #12]
 80076d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076da:	4b73      	ldr	r3, [pc, #460]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 80076dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076de:	4a72      	ldr	r2, [pc, #456]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 80076e0:	f043 0304 	orr.w	r3, r3, #4
 80076e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80076e6:	4b70      	ldr	r3, [pc, #448]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 80076e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	623b      	str	r3, [r7, #32]
 80076f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80076f2:	4b6d      	ldr	r3, [pc, #436]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f6:	4a6c      	ldr	r2, [pc, #432]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 80076f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80076fe:	4b6a      	ldr	r3, [pc, #424]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800770a:	4b67      	ldr	r3, [pc, #412]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770e:	4a66      	ldr	r2, [pc, #408]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	6313      	str	r3, [r2, #48]	@ 0x30
 8007716:	4b64      	ldr	r3, [pc, #400]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007722:	4b61      	ldr	r3, [pc, #388]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007726:	4a60      	ldr	r2, [pc, #384]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007728:	f043 0302 	orr.w	r3, r3, #2
 800772c:	6313      	str	r3, [r2, #48]	@ 0x30
 800772e:	4b5e      	ldr	r3, [pc, #376]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800773a:	4b5b      	ldr	r3, [pc, #364]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773e:	4a5a      	ldr	r2, [pc, #360]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007740:	f043 0308 	orr.w	r3, r3, #8
 8007744:	6313      	str	r3, [r2, #48]	@ 0x30
 8007746:	4b58      	ldr	r3, [pc, #352]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007752:	4b55      	ldr	r3, [pc, #340]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007756:	4a54      	ldr	r2, [pc, #336]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800775c:	6313      	str	r3, [r2, #48]	@ 0x30
 800775e:	4b52      	ldr	r3, [pc, #328]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPI2_CS_Pin|LD3_Pin|APPO_TRIG_Pin
 800776a:	2200      	movs	r2, #0
 800776c:	f245 01b1 	movw	r1, #20657	@ 0x50b1
 8007770:	484e      	ldr	r0, [pc, #312]	@ (80078ac <MX_GPIO_Init+0x1e8>)
 8007772:	f001 facd 	bl	8008d10 <HAL_GPIO_WritePin>
                          |MAIN_TRIG_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8007776:	2200      	movs	r2, #0
 8007778:	2140      	movs	r1, #64	@ 0x40
 800777a:	484d      	ldr	r0, [pc, #308]	@ (80078b0 <MX_GPIO_Init+0x1ec>)
 800777c:	f001 fac8 	bl	8008d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8007780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007786:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800778a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778c:	2300      	movs	r3, #0
 800778e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8007790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007794:	4619      	mov	r1, r3
 8007796:	4847      	ldr	r0, [pc, #284]	@ (80078b4 <MX_GPIO_Init+0x1f0>)
 8007798:	f001 f8f6 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM_PIN_Pin LL_Detect_PIN_Pin */
  GPIO_InitStruct.Pin = ARM_PIN_Pin|LL_Detect_PIN_Pin;
 800779c:	2360      	movs	r3, #96	@ 0x60
 800779e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077a0:	2300      	movs	r3, #0
 80077a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077ac:	4619      	mov	r1, r3
 80077ae:	4842      	ldr	r0, [pc, #264]	@ (80078b8 <MX_GPIO_Init+0x1f4>)
 80077b0:	f001 f8ea 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SPI2_CS_Pin LD3_Pin APPO_TRIG_Pin
                           MAIN_TRIG_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPI2_CS_Pin|LD3_Pin|APPO_TRIG_Pin
 80077b4:	f245 03b1 	movw	r3, #20657	@ 0x50b1
 80077b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |MAIN_TRIG_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077ba:	2301      	movs	r3, #1
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c2:	2300      	movs	r3, #0
 80077c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077ca:	4619      	mov	r1, r3
 80077cc:	4837      	ldr	r0, [pc, #220]	@ (80078ac <MX_GPIO_Init+0x1e8>)
 80077ce:	f001 f8db 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80077d2:	2340      	movs	r3, #64	@ 0x40
 80077d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077d6:	2301      	movs	r3, #1
 80077d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077de:	2300      	movs	r3, #0
 80077e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80077e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077e6:	4619      	mov	r1, r3
 80077e8:	4831      	ldr	r0, [pc, #196]	@ (80078b0 <MX_GPIO_Init+0x1ec>)
 80077ea:	f001 f8cd 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80077ee:	2380      	movs	r3, #128	@ 0x80
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077f2:	2300      	movs	r3, #0
 80077f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80077fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077fe:	4619      	mov	r1, r3
 8007800:	482b      	ldr	r0, [pc, #172]	@ (80078b0 <MX_GPIO_Init+0x1ec>)
 8007802:	f001 f8c1 	bl	8008988 <HAL_GPIO_Init>
  // PB12 (CS) - Already configured as output in SD.h/SD.c, ensure it's controlled there.
  // Here we ensure the clock is enabled for GPIOB if not already.
  // __HAL_RCC_GPIOB_CLK_ENABLE(); // Already enabled for LEDs

  // PC3 (MOSI), PC2 (MISO)
  __HAL_RCC_GPIOC_CLK_ENABLE(); // Ensure GPIOC clock is enabled
 8007806:	4b28      	ldr	r3, [pc, #160]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780a:	4a27      	ldr	r2, [pc, #156]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 800780c:	f043 0304 	orr.w	r3, r3, #4
 8007810:	6313      	str	r3, [r2, #48]	@ 0x30
 8007812:	4b25      	ldr	r3, [pc, #148]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007816:	f003 0304 	and.w	r3, r3, #4
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800781e:	230c      	movs	r3, #12
 8007820:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007822:	2302      	movs	r3, #2
 8007824:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Or GPIO_PULLUP for MISO if required by card/long lines
 8007826:	2300      	movs	r3, #0
 8007828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800782a:	2303      	movs	r3, #3
 800782c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800782e:	2305      	movs	r3, #5
 8007830:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007836:	4619      	mov	r1, r3
 8007838:	481e      	ldr	r0, [pc, #120]	@ (80078b4 <MX_GPIO_Init+0x1f0>)
 800783a:	f001 f8a5 	bl	8008988 <HAL_GPIO_Init>

  // PD3 (CLK)
  __HAL_RCC_GPIOD_CLK_ENABLE(); // Ensure GPIOD clock is enabled
 800783e:	4b1a      	ldr	r3, [pc, #104]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007842:	4a19      	ldr	r2, [pc, #100]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 8007844:	f043 0308 	orr.w	r3, r3, #8
 8007848:	6313      	str	r3, [r2, #48]	@ 0x30
 800784a:	4b17      	ldr	r3, [pc, #92]	@ (80078a8 <MX_GPIO_Init+0x1e4>)
 800784c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	607b      	str	r3, [r7, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007856:	2308      	movs	r3, #8
 8007858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800785a:	2302      	movs	r3, #2
 800785c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800785e:	2300      	movs	r3, #0
 8007860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007862:	2303      	movs	r3, #3
 8007864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007866:	2305      	movs	r3, #5
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800786a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800786e:	4619      	mov	r1, r3
 8007870:	4812      	ldr	r0, [pc, #72]	@ (80078bc <MX_GPIO_Init+0x1f8>)
 8007872:	f001 f889 	bl	8008988 <HAL_GPIO_Init>

  // Configure SD Card Chip Select (PB12) as Output Push-Pull
  // This is critical and should be explicitly set up.
  // SD.c will handle driving it HIGH/LOW.
  GPIO_InitStruct.Pin = SD_CS_Pin; // Using SD_CS_Pin from SD.h
 8007876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800787a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800787c:	2301      	movs	r3, #1
 800787e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP; // Keep CS high when not selected
 8007880:	2301      	movs	r3, #1
 8007882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007884:	2302      	movs	r3, #2
 8007886:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct); // Using SD_CS_GPIO_Port from SD.h
 8007888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800788c:	4619      	mov	r1, r3
 800788e:	4807      	ldr	r0, [pc, #28]	@ (80078ac <MX_GPIO_Init+0x1e8>)
 8007890:	f001 f87a 	bl	8008988 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET); // Initialize CS high (deselected)
 8007894:	2201      	movs	r2, #1
 8007896:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800789a:	4804      	ldr	r0, [pc, #16]	@ (80078ac <MX_GPIO_Init+0x1e8>)
 800789c:	f001 fa38 	bl	8008d10 <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80078a0:	bf00      	nop
 80078a2:	3738      	adds	r7, #56	@ 0x38
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40023800 	.word	0x40023800
 80078ac:	40020400 	.word	0x40020400
 80078b0:	40021800 	.word	0x40021800
 80078b4:	40020800 	.word	0x40020800
 80078b8:	40020000 	.word	0x40020000
 80078bc:	40020c00 	.word	0x40020c00

080078c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80078c4:	b672      	cpsid	i
}
 80078c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80078c8:	bf00      	nop
 80078ca:	e7fd      	b.n	80078c8 <Error_Handler+0x8>

080078cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80078d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007910 <HAL_MspInit+0x44>)
 80078d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007910 <HAL_MspInit+0x44>)
 80078d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80078de:	4b0c      	ldr	r3, [pc, #48]	@ (8007910 <HAL_MspInit+0x44>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e6:	607b      	str	r3, [r7, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078ea:	4b09      	ldr	r3, [pc, #36]	@ (8007910 <HAL_MspInit+0x44>)
 80078ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ee:	4a08      	ldr	r2, [pc, #32]	@ (8007910 <HAL_MspInit+0x44>)
 80078f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80078f6:	4b06      	ldr	r3, [pc, #24]	@ (8007910 <HAL_MspInit+0x44>)
 80078f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40023800 	.word	0x40023800

08007914 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08e      	sub	sp, #56	@ 0x38
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800791c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	609a      	str	r2, [r3, #8]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a4e      	ldr	r2, [pc, #312]	@ (8007a6c <HAL_ETH_MspInit+0x158>)
 8007932:	4293      	cmp	r3, r2
 8007934:	f040 8096 	bne.w	8007a64 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007938:	4b4d      	ldr	r3, [pc, #308]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 800793a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793c:	4a4c      	ldr	r2, [pc, #304]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 800793e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007942:	6313      	str	r3, [r2, #48]	@ 0x30
 8007944:	4b4a      	ldr	r3, [pc, #296]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 8007946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800794c:	623b      	str	r3, [r7, #32]
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	4b47      	ldr	r3, [pc, #284]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 8007952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007954:	4a46      	ldr	r2, [pc, #280]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 8007956:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800795a:	6313      	str	r3, [r2, #48]	@ 0x30
 800795c:	4b44      	ldr	r3, [pc, #272]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 800795e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007960:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007964:	61fb      	str	r3, [r7, #28]
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4b41      	ldr	r3, [pc, #260]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 800796a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796c:	4a40      	ldr	r2, [pc, #256]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 800796e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007972:	6313      	str	r3, [r2, #48]	@ 0x30
 8007974:	4b3e      	ldr	r3, [pc, #248]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 8007976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800797c:	61bb      	str	r3, [r7, #24]
 800797e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007980:	4b3b      	ldr	r3, [pc, #236]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 8007982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007984:	4a3a      	ldr	r2, [pc, #232]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 8007986:	f043 0304 	orr.w	r3, r3, #4
 800798a:	6313      	str	r3, [r2, #48]	@ 0x30
 800798c:	4b38      	ldr	r3, [pc, #224]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 800798e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007998:	4b35      	ldr	r3, [pc, #212]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 800799a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799c:	4a34      	ldr	r2, [pc, #208]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 800799e:	f043 0301 	orr.w	r3, r3, #1
 80079a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80079a4:	4b32      	ldr	r3, [pc, #200]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 80079a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 80079b6:	f043 0302 	orr.w	r3, r3, #2
 80079ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80079bc:	4b2c      	ldr	r3, [pc, #176]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80079c8:	4b29      	ldr	r3, [pc, #164]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 80079ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079cc:	4a28      	ldr	r2, [pc, #160]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 80079ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80079d4:	4b26      	ldr	r3, [pc, #152]	@ (8007a70 <HAL_ETH_MspInit+0x15c>)
 80079d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80079e0:	2332      	movs	r3, #50	@ 0x32
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e4:	2302      	movs	r3, #2
 80079e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e8:	2300      	movs	r3, #0
 80079ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079ec:	2303      	movs	r3, #3
 80079ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80079f0:	230b      	movs	r3, #11
 80079f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079f8:	4619      	mov	r1, r3
 80079fa:	481e      	ldr	r0, [pc, #120]	@ (8007a74 <HAL_ETH_MspInit+0x160>)
 80079fc:	f000 ffc4 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007a00:	2386      	movs	r3, #134	@ 0x86
 8007a02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a04:	2302      	movs	r3, #2
 8007a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a10:	230b      	movs	r3, #11
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4817      	ldr	r0, [pc, #92]	@ (8007a78 <HAL_ETH_MspInit+0x164>)
 8007a1c:	f000 ffb4 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007a20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a26:	2302      	movs	r3, #2
 8007a28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a32:	230b      	movs	r3, #11
 8007a34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	480f      	ldr	r0, [pc, #60]	@ (8007a7c <HAL_ETH_MspInit+0x168>)
 8007a3e:	f000 ffa3 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007a42:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8007a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a50:	2303      	movs	r3, #3
 8007a52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a54:	230b      	movs	r3, #11
 8007a56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4808      	ldr	r0, [pc, #32]	@ (8007a80 <HAL_ETH_MspInit+0x16c>)
 8007a60:	f000 ff92 	bl	8008988 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8007a64:	bf00      	nop
 8007a66:	3738      	adds	r7, #56	@ 0x38
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40028000 	.word	0x40028000
 8007a70:	40023800 	.word	0x40023800
 8007a74:	40020800 	.word	0x40020800
 8007a78:	40020000 	.word	0x40020000
 8007a7c:	40020400 	.word	0x40020400
 8007a80:	40021800 	.word	0x40021800

08007a84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b0aa      	sub	sp, #168	@ 0xa8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a8c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	605a      	str	r2, [r3, #4]
 8007a96:	609a      	str	r2, [r3, #8]
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007a9c:	f107 0310 	add.w	r3, r7, #16
 8007aa0:	2284      	movs	r2, #132	@ 0x84
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f006 f8bd 	bl	800dc24 <memset>
  if(hi2c->Instance==I2C1)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a22      	ldr	r2, [pc, #136]	@ (8007b38 <HAL_I2C_MspInit+0xb4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d13c      	bne.n	8007b2e <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007ab4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ab8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007aba:	2300      	movs	r3, #0
 8007abc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007abe:	f107 0310 	add.w	r3, r7, #16
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f002 ffae 	bl	800aa24 <HAL_RCCEx_PeriphCLKConfig>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007ace:	f7ff fef7 	bl	80078c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b3c <HAL_I2C_MspInit+0xb8>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad6:	4a19      	ldr	r2, [pc, #100]	@ (8007b3c <HAL_I2C_MspInit+0xb8>)
 8007ad8:	f043 0302 	orr.w	r3, r3, #2
 8007adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ade:	4b17      	ldr	r3, [pc, #92]	@ (8007b3c <HAL_I2C_MspInit+0xb8>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007aea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007af2:	2312      	movs	r3, #18
 8007af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007afe:	2303      	movs	r3, #3
 8007b00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007b04:	2304      	movs	r3, #4
 8007b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8007b0e:	4619      	mov	r1, r3
 8007b10:	480b      	ldr	r0, [pc, #44]	@ (8007b40 <HAL_I2C_MspInit+0xbc>)
 8007b12:	f000 ff39 	bl	8008988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007b16:	4b09      	ldr	r3, [pc, #36]	@ (8007b3c <HAL_I2C_MspInit+0xb8>)
 8007b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1a:	4a08      	ldr	r2, [pc, #32]	@ (8007b3c <HAL_I2C_MspInit+0xb8>)
 8007b1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b22:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <HAL_I2C_MspInit+0xb8>)
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b2a:	60bb      	str	r3, [r7, #8]
 8007b2c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007b2e:	bf00      	nop
 8007b30:	37a8      	adds	r7, #168	@ 0xa8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40005400 	.word	0x40005400
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	40020400 	.word	0x40020400

08007b44 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	@ 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b4c:	f107 0314 	add.w	r3, r7, #20
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	605a      	str	r2, [r3, #4]
 8007b56:	609a      	str	r2, [r3, #8]
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a25      	ldr	r2, [pc, #148]	@ (8007bf8 <HAL_SPI_MspInit+0xb4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d143      	bne.n	8007bee <HAL_SPI_MspInit+0xaa>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007b66:	4b25      	ldr	r3, [pc, #148]	@ (8007bfc <HAL_SPI_MspInit+0xb8>)
 8007b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6a:	4a24      	ldr	r2, [pc, #144]	@ (8007bfc <HAL_SPI_MspInit+0xb8>)
 8007b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b72:	4b22      	ldr	r3, [pc, #136]	@ (8007bfc <HAL_SPI_MspInit+0xb8>)
 8007b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8007bfc <HAL_SPI_MspInit+0xb8>)
 8007b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b82:	4a1e      	ldr	r2, [pc, #120]	@ (8007bfc <HAL_SPI_MspInit+0xb8>)
 8007b84:	f043 0304 	orr.w	r3, r3, #4
 8007b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bfc <HAL_SPI_MspInit+0xb8>)
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b96:	4b19      	ldr	r3, [pc, #100]	@ (8007bfc <HAL_SPI_MspInit+0xb8>)
 8007b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b9a:	4a18      	ldr	r2, [pc, #96]	@ (8007bfc <HAL_SPI_MspInit+0xb8>)
 8007b9c:	f043 0308 	orr.w	r3, r3, #8
 8007ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ba2:	4b16      	ldr	r3, [pc, #88]	@ (8007bfc <HAL_SPI_MspInit+0xb8>)
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007bae:	230c      	movs	r3, #12
 8007bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007bbe:	2305      	movs	r3, #5
 8007bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bc2:	f107 0314 	add.w	r3, r7, #20
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	480d      	ldr	r0, [pc, #52]	@ (8007c00 <HAL_SPI_MspInit+0xbc>)
 8007bca:	f000 fedd 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007bce:	2308      	movs	r3, #8
 8007bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007bde:	2305      	movs	r3, #5
 8007be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007be2:	f107 0314 	add.w	r3, r7, #20
 8007be6:	4619      	mov	r1, r3
 8007be8:	4806      	ldr	r0, [pc, #24]	@ (8007c04 <HAL_SPI_MspInit+0xc0>)
 8007bea:	f000 fecd 	bl	8008988 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8007bee:	bf00      	nop
 8007bf0:	3728      	adds	r7, #40	@ 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40003800 	.word	0x40003800
 8007bfc:	40023800 	.word	0x40023800
 8007c00:	40020800 	.word	0x40020800
 8007c04:	40020c00 	.word	0x40020c00

08007c08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b0aa      	sub	sp, #168	@ 0xa8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c10:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	605a      	str	r2, [r3, #4]
 8007c1a:	609a      	str	r2, [r3, #8]
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007c20:	f107 0310 	add.w	r3, r7, #16
 8007c24:	2284      	movs	r2, #132	@ 0x84
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f005 fffb 	bl	800dc24 <memset>
  if(huart->Instance==USART3)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a22      	ldr	r2, [pc, #136]	@ (8007cbc <HAL_UART_MspInit+0xb4>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d13c      	bne.n	8007cb2 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007c38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c42:	f107 0310 	add.w	r3, r7, #16
 8007c46:	4618      	mov	r0, r3
 8007c48:	f002 feec 	bl	800aa24 <HAL_RCCEx_PeriphCLKConfig>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007c52:	f7ff fe35 	bl	80078c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007c56:	4b1a      	ldr	r3, [pc, #104]	@ (8007cc0 <HAL_UART_MspInit+0xb8>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5a:	4a19      	ldr	r2, [pc, #100]	@ (8007cc0 <HAL_UART_MspInit+0xb8>)
 8007c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c62:	4b17      	ldr	r3, [pc, #92]	@ (8007cc0 <HAL_UART_MspInit+0xb8>)
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c6e:	4b14      	ldr	r3, [pc, #80]	@ (8007cc0 <HAL_UART_MspInit+0xb8>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	4a13      	ldr	r2, [pc, #76]	@ (8007cc0 <HAL_UART_MspInit+0xb8>)
 8007c74:	f043 0308 	orr.w	r3, r3, #8
 8007c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c7a:	4b11      	ldr	r3, [pc, #68]	@ (8007cc0 <HAL_UART_MspInit+0xb8>)
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	60bb      	str	r3, [r7, #8]
 8007c84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007c86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007c8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c8e:	2302      	movs	r3, #2
 8007c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007ca0:	2307      	movs	r3, #7
 8007ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ca6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8007caa:	4619      	mov	r1, r3
 8007cac:	4805      	ldr	r0, [pc, #20]	@ (8007cc4 <HAL_UART_MspInit+0xbc>)
 8007cae:	f000 fe6b 	bl	8008988 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8007cb2:	bf00      	nop
 8007cb4:	37a8      	adds	r7, #168	@ 0xa8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	40004800 	.word	0x40004800
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	40020c00 	.word	0x40020c00

08007cc8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b0ac      	sub	sp, #176	@ 0xb0
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	605a      	str	r2, [r3, #4]
 8007cda:	609a      	str	r2, [r3, #8]
 8007cdc:	60da      	str	r2, [r3, #12]
 8007cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ce0:	f107 0318 	add.w	r3, r7, #24
 8007ce4:	2284      	movs	r2, #132	@ 0x84
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f005 ff9b 	bl	800dc24 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cf6:	d159      	bne.n	8007dac <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007cf8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007cfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d04:	f107 0318 	add.w	r3, r7, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f002 fe8b 	bl	800aa24 <HAL_RCCEx_PeriphCLKConfig>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8007d14:	f7ff fdd4 	bl	80078c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d18:	4b26      	ldr	r3, [pc, #152]	@ (8007db4 <HAL_PCD_MspInit+0xec>)
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1c:	4a25      	ldr	r2, [pc, #148]	@ (8007db4 <HAL_PCD_MspInit+0xec>)
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d24:	4b23      	ldr	r3, [pc, #140]	@ (8007db4 <HAL_PCD_MspInit+0xec>)
 8007d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007d30:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8007d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d44:	2303      	movs	r3, #3
 8007d46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d4a:	230a      	movs	r3, #10
 8007d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007d54:	4619      	mov	r1, r3
 8007d56:	4818      	ldr	r0, [pc, #96]	@ (8007db8 <HAL_PCD_MspInit+0xf0>)
 8007d58:	f000 fe16 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007d70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007d74:	4619      	mov	r1, r3
 8007d76:	4810      	ldr	r0, [pc, #64]	@ (8007db8 <HAL_PCD_MspInit+0xf0>)
 8007d78:	f000 fe06 	bl	8008988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007db4 <HAL_PCD_MspInit+0xec>)
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d80:	4a0c      	ldr	r2, [pc, #48]	@ (8007db4 <HAL_PCD_MspInit+0xec>)
 8007d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d86:	6353      	str	r3, [r2, #52]	@ 0x34
 8007d88:	4b0a      	ldr	r3, [pc, #40]	@ (8007db4 <HAL_PCD_MspInit+0xec>)
 8007d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d90:	613b      	str	r3, [r7, #16]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	4b07      	ldr	r3, [pc, #28]	@ (8007db4 <HAL_PCD_MspInit+0xec>)
 8007d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d98:	4a06      	ldr	r2, [pc, #24]	@ (8007db4 <HAL_PCD_MspInit+0xec>)
 8007d9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007da0:	4b04      	ldr	r3, [pc, #16]	@ (8007db4 <HAL_PCD_MspInit+0xec>)
 8007da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8007dac:	bf00      	nop
 8007dae:	37b0      	adds	r7, #176	@ 0xb0
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40023800 	.word	0x40023800
 8007db8:	40020000 	.word	0x40020000

08007dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007dc0:	bf00      	nop
 8007dc2:	e7fd      	b.n	8007dc0 <NMI_Handler+0x4>

08007dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007dc8:	bf00      	nop
 8007dca:	e7fd      	b.n	8007dc8 <HardFault_Handler+0x4>

08007dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007dd0:	bf00      	nop
 8007dd2:	e7fd      	b.n	8007dd0 <MemManage_Handler+0x4>

08007dd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <BusFault_Handler+0x4>

08007ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007de0:	bf00      	nop
 8007de2:	e7fd      	b.n	8007de0 <UsageFault_Handler+0x4>

08007de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007de8:	bf00      	nop
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007df2:	b480      	push	{r7}
 8007df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007df6:	bf00      	nop
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e04:	bf00      	nop
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e12:	f000 f941 	bl	8008098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e16:	bf00      	nop
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	af00      	add	r7, sp, #0
  return 1;
 8007e1e:	2301      	movs	r3, #1
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <_kill>:

int _kill(int pid, int sig)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007e34:	f005 ff48 	bl	800dcc8 <__errno>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2216      	movs	r2, #22
 8007e3c:	601a      	str	r2, [r3, #0]
  return -1;
 8007e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <_exit>:

void _exit (int status)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007e52:	f04f 31ff 	mov.w	r1, #4294967295
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff ffe7 	bl	8007e2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8007e5c:	bf00      	nop
 8007e5e:	e7fd      	b.n	8007e5c <_exit+0x12>

08007e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	e00a      	b.n	8007e88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007e72:	f3af 8000 	nop.w
 8007e76:	4601      	mov	r1, r0
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	60ba      	str	r2, [r7, #8]
 8007e7e:	b2ca      	uxtb	r2, r1
 8007e80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	3301      	adds	r3, #1
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	dbf0      	blt.n	8007e72 <_read+0x12>
  }

  return len;
 8007e90:	687b      	ldr	r3, [r7, #4]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e009      	b.n	8007ec0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	60ba      	str	r2, [r7, #8]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	dbf1      	blt.n	8007eac <_write+0x12>
  }
  return len;
 8007ec8:	687b      	ldr	r3, [r7, #4]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <_close>:

int _close(int file)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007efa:	605a      	str	r2, [r3, #4]
  return 0;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <_isatty>:

int _isatty(int file)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007f12:	2301      	movs	r3, #1
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f44:	4a14      	ldr	r2, [pc, #80]	@ (8007f98 <_sbrk+0x5c>)
 8007f46:	4b15      	ldr	r3, [pc, #84]	@ (8007f9c <_sbrk+0x60>)
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f50:	4b13      	ldr	r3, [pc, #76]	@ (8007fa0 <_sbrk+0x64>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f58:	4b11      	ldr	r3, [pc, #68]	@ (8007fa0 <_sbrk+0x64>)
 8007f5a:	4a12      	ldr	r2, [pc, #72]	@ (8007fa4 <_sbrk+0x68>)
 8007f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f5e:	4b10      	ldr	r3, [pc, #64]	@ (8007fa0 <_sbrk+0x64>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4413      	add	r3, r2
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d207      	bcs.n	8007f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f6c:	f005 feac 	bl	800dcc8 <__errno>
 8007f70:	4603      	mov	r3, r0
 8007f72:	220c      	movs	r2, #12
 8007f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f76:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7a:	e009      	b.n	8007f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f7c:	4b08      	ldr	r3, [pc, #32]	@ (8007fa0 <_sbrk+0x64>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f82:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <_sbrk+0x64>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4413      	add	r3, r2
 8007f8a:	4a05      	ldr	r2, [pc, #20]	@ (8007fa0 <_sbrk+0x64>)
 8007f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20050000 	.word	0x20050000
 8007f9c:	00000400 	.word	0x00000400
 8007fa0:	20001090 	.word	0x20001090
 8007fa4:	200011f8 	.word	0x200011f8

08007fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007fac:	4b06      	ldr	r3, [pc, #24]	@ (8007fc8 <SystemInit+0x20>)
 8007fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb2:	4a05      	ldr	r2, [pc, #20]	@ (8007fc8 <SystemInit+0x20>)
 8007fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007fbc:	bf00      	nop
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	e000ed00 	.word	0xe000ed00

08007fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007fd0:	f7ff ffea 	bl	8007fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007fd4:	480c      	ldr	r0, [pc, #48]	@ (8008008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007fd6:	490d      	ldr	r1, [pc, #52]	@ (800800c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8008010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007fdc:	e002      	b.n	8007fe4 <LoopCopyDataInit>

08007fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007fe2:	3304      	adds	r3, #4

08007fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007fe8:	d3f9      	bcc.n	8007fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007fea:	4a0a      	ldr	r2, [pc, #40]	@ (8008014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007fec:	4c0a      	ldr	r4, [pc, #40]	@ (8008018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ff0:	e001      	b.n	8007ff6 <LoopFillZerobss>

08007ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ff4:	3204      	adds	r2, #4

08007ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ff8:	d3fb      	bcc.n	8007ff2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8007ffa:	f005 fe6b 	bl	800dcd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ffe:	f7fd fb5f 	bl	80056c0 <main>
  bx  lr    
 8008002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008004:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8008008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800800c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8008010:	08013b74 	.word	0x08013b74
  ldr r2, =_sbss
 8008014:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8008018:	200011f8 	.word	0x200011f8

0800801c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800801c:	e7fe      	b.n	800801c <ADC_IRQHandler>

0800801e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008022:	2003      	movs	r0, #3
 8008024:	f000 f92e 	bl	8008284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008028:	2000      	movs	r0, #0
 800802a:	f000 f805 	bl	8008038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800802e:	f7ff fc4d 	bl	80078cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008040:	4b12      	ldr	r3, [pc, #72]	@ (800808c <HAL_InitTick+0x54>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	4b12      	ldr	r3, [pc, #72]	@ (8008090 <HAL_InitTick+0x58>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	4619      	mov	r1, r3
 800804a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800804e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008052:	fbb2 f3f3 	udiv	r3, r2, r3
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f93b 	bl	80082d2 <HAL_SYSTICK_Config>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e00e      	b.n	8008084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b0f      	cmp	r3, #15
 800806a:	d80a      	bhi.n	8008082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800806c:	2200      	movs	r2, #0
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	f04f 30ff 	mov.w	r0, #4294967295
 8008074:	f000 f911 	bl	800829a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008078:	4a06      	ldr	r2, [pc, #24]	@ (8008094 <HAL_InitTick+0x5c>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	e000      	b.n	8008084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	2000000c 	.word	0x2000000c
 8008090:	20000014 	.word	0x20000014
 8008094:	20000010 	.word	0x20000010

08008098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800809c:	4b06      	ldr	r3, [pc, #24]	@ (80080b8 <HAL_IncTick+0x20>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <HAL_IncTick+0x24>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4413      	add	r3, r2
 80080a8:	4a04      	ldr	r2, [pc, #16]	@ (80080bc <HAL_IncTick+0x24>)
 80080aa:	6013      	str	r3, [r2, #0]
}
 80080ac:	bf00      	nop
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	20000014 	.word	0x20000014
 80080bc:	20001094 	.word	0x20001094

080080c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
  return uwTick;
 80080c4:	4b03      	ldr	r3, [pc, #12]	@ (80080d4 <HAL_GetTick+0x14>)
 80080c6:	681b      	ldr	r3, [r3, #0]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20001094 	.word	0x20001094

080080d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80080e0:	f7ff ffee 	bl	80080c0 <HAL_GetTick>
 80080e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f0:	d005      	beq.n	80080fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80080f2:	4b0a      	ldr	r3, [pc, #40]	@ (800811c <HAL_Delay+0x44>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80080fe:	bf00      	nop
 8008100:	f7ff ffde 	bl	80080c0 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	429a      	cmp	r2, r3
 800810e:	d8f7      	bhi.n	8008100 <HAL_Delay+0x28>
  {
  }
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20000014 	.word	0x20000014

08008120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008130:	4b0b      	ldr	r3, [pc, #44]	@ (8008160 <__NVIC_SetPriorityGrouping+0x40>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800813c:	4013      	ands	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008148:	4b06      	ldr	r3, [pc, #24]	@ (8008164 <__NVIC_SetPriorityGrouping+0x44>)
 800814a:	4313      	orrs	r3, r2
 800814c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800814e:	4a04      	ldr	r2, [pc, #16]	@ (8008160 <__NVIC_SetPriorityGrouping+0x40>)
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	60d3      	str	r3, [r2, #12]
}
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	e000ed00 	.word	0xe000ed00
 8008164:	05fa0000 	.word	0x05fa0000

08008168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800816c:	4b04      	ldr	r3, [pc, #16]	@ (8008180 <__NVIC_GetPriorityGrouping+0x18>)
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	0a1b      	lsrs	r3, r3, #8
 8008172:	f003 0307 	and.w	r3, r3, #7
}
 8008176:	4618      	mov	r0, r3
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	e000ed00 	.word	0xe000ed00

08008184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008194:	2b00      	cmp	r3, #0
 8008196:	db0a      	blt.n	80081ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	b2da      	uxtb	r2, r3
 800819c:	490c      	ldr	r1, [pc, #48]	@ (80081d0 <__NVIC_SetPriority+0x4c>)
 800819e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a2:	0112      	lsls	r2, r2, #4
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	440b      	add	r3, r1
 80081a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80081ac:	e00a      	b.n	80081c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	4908      	ldr	r1, [pc, #32]	@ (80081d4 <__NVIC_SetPriority+0x50>)
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	3b04      	subs	r3, #4
 80081bc:	0112      	lsls	r2, r2, #4
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	440b      	add	r3, r1
 80081c2:	761a      	strb	r2, [r3, #24]
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	e000e100 	.word	0xe000e100
 80081d4:	e000ed00 	.word	0xe000ed00

080081d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081d8:	b480      	push	{r7}
 80081da:	b089      	sub	sp, #36	@ 0x24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	f1c3 0307 	rsb	r3, r3, #7
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	bf28      	it	cs
 80081f6:	2304      	movcs	r3, #4
 80081f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	3304      	adds	r3, #4
 80081fe:	2b06      	cmp	r3, #6
 8008200:	d902      	bls.n	8008208 <NVIC_EncodePriority+0x30>
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	3b03      	subs	r3, #3
 8008206:	e000      	b.n	800820a <NVIC_EncodePriority+0x32>
 8008208:	2300      	movs	r3, #0
 800820a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	43da      	mvns	r2, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	401a      	ands	r2, r3
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008220:	f04f 31ff 	mov.w	r1, #4294967295
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	fa01 f303 	lsl.w	r3, r1, r3
 800822a:	43d9      	mvns	r1, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008230:	4313      	orrs	r3, r2
         );
}
 8008232:	4618      	mov	r0, r3
 8008234:	3724      	adds	r7, #36	@ 0x24
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3b01      	subs	r3, #1
 800824c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008250:	d301      	bcc.n	8008256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008252:	2301      	movs	r3, #1
 8008254:	e00f      	b.n	8008276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008256:	4a0a      	ldr	r2, [pc, #40]	@ (8008280 <SysTick_Config+0x40>)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3b01      	subs	r3, #1
 800825c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800825e:	210f      	movs	r1, #15
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	f7ff ff8e 	bl	8008184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <SysTick_Config+0x40>)
 800826a:	2200      	movs	r2, #0
 800826c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800826e:	4b04      	ldr	r3, [pc, #16]	@ (8008280 <SysTick_Config+0x40>)
 8008270:	2207      	movs	r2, #7
 8008272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	e000e010 	.word	0xe000e010

08008284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff ff47 	bl	8008120 <__NVIC_SetPriorityGrouping>
}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800829a:	b580      	push	{r7, lr}
 800829c:	b086      	sub	sp, #24
 800829e:	af00      	add	r7, sp, #0
 80082a0:	4603      	mov	r3, r0
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	607a      	str	r2, [r7, #4]
 80082a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80082a8:	2300      	movs	r3, #0
 80082aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80082ac:	f7ff ff5c 	bl	8008168 <__NVIC_GetPriorityGrouping>
 80082b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	6978      	ldr	r0, [r7, #20]
 80082b8:	f7ff ff8e 	bl	80081d8 <NVIC_EncodePriority>
 80082bc:	4602      	mov	r2, r0
 80082be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff ff5d 	bl	8008184 <__NVIC_SetPriority>
}
 80082ca:	bf00      	nop
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff ffb0 	bl	8008240 <SysTick_Config>
 80082e0:	4603      	mov	r3, r0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
	...

080082ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e086      	b.n	800840c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff faff 	bl	8007914 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008316:	4b3f      	ldr	r3, [pc, #252]	@ (8008414 <HAL_ETH_Init+0x128>)
 8008318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831a:	4a3e      	ldr	r2, [pc, #248]	@ (8008414 <HAL_ETH_Init+0x128>)
 800831c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008320:	6453      	str	r3, [r2, #68]	@ 0x44
 8008322:	4b3c      	ldr	r3, [pc, #240]	@ (8008414 <HAL_ETH_Init+0x128>)
 8008324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800832a:	60bb      	str	r3, [r7, #8]
 800832c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800832e:	4b3a      	ldr	r3, [pc, #232]	@ (8008418 <HAL_ETH_Init+0x12c>)
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	4a39      	ldr	r2, [pc, #228]	@ (8008418 <HAL_ETH_Init+0x12c>)
 8008334:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008338:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800833a:	4b37      	ldr	r3, [pc, #220]	@ (8008418 <HAL_ETH_Init+0x12c>)
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	4935      	ldr	r1, [pc, #212]	@ (8008418 <HAL_ETH_Init+0x12c>)
 8008344:	4313      	orrs	r3, r2
 8008346:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8008348:	4b33      	ldr	r3, [pc, #204]	@ (8008418 <HAL_ETH_Init+0x12c>)
 800834a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6812      	ldr	r2, [r2, #0]
 800835a:	f043 0301 	orr.w	r3, r3, #1
 800835e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008362:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008364:	f7ff feac 	bl	80080c0 <HAL_GetTick>
 8008368:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800836a:	e011      	b.n	8008390 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800836c:	f7ff fea8 	bl	80080c0 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800837a:	d909      	bls.n	8008390 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2204      	movs	r2, #4
 8008380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	22e0      	movs	r2, #224	@ 0xe0
 8008388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e03d      	b.n	800840c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e4      	bne.n	800836c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f97a 	bl	800869c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fa25 	bl	80087f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa7b 	bl	80088aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	461a      	mov	r2, r3
 80083ba:	2100      	movs	r1, #0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f9e3 	bl	8008788 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80083d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	4b0f      	ldr	r3, [pc, #60]	@ (800841c <HAL_ETH_Init+0x130>)
 80083e0:	430b      	orrs	r3, r1
 80083e2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80083f6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2210      	movs	r2, #16
 8008406:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	40023800 	.word	0x40023800
 8008418:	40013800 	.word	0x40013800
 800841c:	00020060 	.word	0x00020060

08008420 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	4b53      	ldr	r3, [pc, #332]	@ (8008584 <ETH_SetMACConfig+0x164>)
 8008436:	4013      	ands	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	7b9b      	ldrb	r3, [r3, #14]
 800843e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	7c12      	ldrb	r2, [r2, #16]
 8008444:	2a00      	cmp	r2, #0
 8008446:	d102      	bne.n	800844e <ETH_SetMACConfig+0x2e>
 8008448:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800844c:	e000      	b.n	8008450 <ETH_SetMACConfig+0x30>
 800844e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8008450:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	7c52      	ldrb	r2, [r2, #17]
 8008456:	2a00      	cmp	r2, #0
 8008458:	d102      	bne.n	8008460 <ETH_SetMACConfig+0x40>
 800845a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800845e:	e000      	b.n	8008462 <ETH_SetMACConfig+0x42>
 8008460:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8008462:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8008468:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	7fdb      	ldrb	r3, [r3, #31]
 800846e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8008470:	431a      	orrs	r2, r3
                        macconf->Speed |
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8008476:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	7f92      	ldrb	r2, [r2, #30]
 800847c:	2a00      	cmp	r2, #0
 800847e:	d102      	bne.n	8008486 <ETH_SetMACConfig+0x66>
 8008480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008484:	e000      	b.n	8008488 <ETH_SetMACConfig+0x68>
 8008486:	2200      	movs	r2, #0
                        macconf->Speed |
 8008488:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	7f1b      	ldrb	r3, [r3, #28]
 800848e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8008490:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8008496:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	791b      	ldrb	r3, [r3, #4]
 800849c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800849e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80084a6:	2a00      	cmp	r2, #0
 80084a8:	d102      	bne.n	80084b0 <ETH_SetMACConfig+0x90>
 80084aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084ae:	e000      	b.n	80084b2 <ETH_SetMACConfig+0x92>
 80084b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80084b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	7bdb      	ldrb	r3, [r3, #15]
 80084b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80084ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80084c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80084ca:	4313      	orrs	r3, r2
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80084e2:	2001      	movs	r0, #1
 80084e4:	f7ff fdf8 	bl	80080d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80084fe:	4013      	ands	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008506:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800850e:	2a00      	cmp	r2, #0
 8008510:	d101      	bne.n	8008516 <ETH_SetMACConfig+0xf6>
 8008512:	2280      	movs	r2, #128	@ 0x80
 8008514:	e000      	b.n	8008518 <ETH_SetMACConfig+0xf8>
 8008516:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008518:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800851e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8008526:	2a01      	cmp	r2, #1
 8008528:	d101      	bne.n	800852e <ETH_SetMACConfig+0x10e>
 800852a:	2208      	movs	r2, #8
 800852c:	e000      	b.n	8008530 <ETH_SetMACConfig+0x110>
 800852e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8008530:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8008538:	2a01      	cmp	r2, #1
 800853a:	d101      	bne.n	8008540 <ETH_SetMACConfig+0x120>
 800853c:	2204      	movs	r2, #4
 800853e:	e000      	b.n	8008542 <ETH_SetMACConfig+0x122>
 8008540:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8008542:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800854a:	2a01      	cmp	r2, #1
 800854c:	d101      	bne.n	8008552 <ETH_SetMACConfig+0x132>
 800854e:	2202      	movs	r2, #2
 8008550:	e000      	b.n	8008554 <ETH_SetMACConfig+0x134>
 8008552:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008554:	4313      	orrs	r3, r2
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800856c:	2001      	movs	r0, #1
 800856e:	f7ff fdb3 	bl	80080d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	619a      	str	r2, [r3, #24]
}
 800857a:	bf00      	nop
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	fd20810f 	.word	0xfd20810f

08008588 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4b3d      	ldr	r3, [pc, #244]	@ (8008698 <ETH_SetDMAConfig+0x110>)
 80085a2:	4013      	ands	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	7b1b      	ldrb	r3, [r3, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <ETH_SetDMAConfig+0x2c>
 80085ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80085b2:	e000      	b.n	80085b6 <ETH_SetDMAConfig+0x2e>
 80085b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	7b5b      	ldrb	r3, [r3, #13]
 80085ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80085bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	7f52      	ldrb	r2, [r2, #29]
 80085c2:	2a00      	cmp	r2, #0
 80085c4:	d102      	bne.n	80085cc <ETH_SetDMAConfig+0x44>
 80085c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085ca:	e000      	b.n	80085ce <ETH_SetDMAConfig+0x46>
 80085cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80085ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	7b9b      	ldrb	r3, [r3, #14]
 80085d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80085d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80085dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	7f1b      	ldrb	r3, [r3, #28]
 80085e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80085e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	7f9b      	ldrb	r3, [r3, #30]
 80085ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80085ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80085f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80085fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80085fc:	4313      	orrs	r3, r2
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4313      	orrs	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800860c:	461a      	mov	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800861e:	2001      	movs	r0, #1
 8008620:	f7ff fd5a 	bl	80080d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800862c:	461a      	mov	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	791b      	ldrb	r3, [r3, #4]
 8008636:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800863c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8008642:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8008648:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008650:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8008652:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008658:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800865a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008660:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6812      	ldr	r2, [r2, #0]
 8008666:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800866a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800866e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800867c:	2001      	movs	r0, #1
 800867e:	f7ff fd2b 	bl	80080d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800868a:	461a      	mov	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6013      	str	r3, [r2, #0]
}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	f8de3f23 	.word	0xf8de3f23

0800869c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b0a6      	sub	sp, #152	@ 0x98
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80086b0:	2300      	movs	r3, #0
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80086c6:	2301      	movs	r3, #1
 80086c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80086d2:	2300      	movs	r3, #0
 80086d4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80086d8:	2300      	movs	r3, #0
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80086de:	2300      	movs	r3, #0
 80086e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80086ec:	2300      	movs	r3, #0
 80086ee:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80086fe:	2300      	movs	r3, #0
 8008700:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008704:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008708:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800870a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800870e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008710:	2300      	movs	r3, #0
 8008712:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008716:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff fe7f 	bl	8008420 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8008722:	2301      	movs	r3, #1
 8008724:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8008726:	2301      	movs	r3, #1
 8008728:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8008730:	2301      	movs	r3, #1
 8008732:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008734:	2300      	movs	r3, #0
 8008736:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8008738:	2300      	movs	r3, #0
 800873a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800873e:	2300      	movs	r3, #0
 8008740:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008744:	2300      	movs	r3, #0
 8008746:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8008748:	2301      	movs	r3, #1
 800874a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800874e:	2301      	movs	r3, #1
 8008750:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008756:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008758:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800875c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800875e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008762:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800876a:	2300      	movs	r3, #0
 800876c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008772:	f107 0308 	add.w	r3, r7, #8
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff ff05 	bl	8008588 <ETH_SetDMAConfig>
}
 800877e:	bf00      	nop
 8008780:	3798      	adds	r7, #152	@ 0x98
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008788:	b480      	push	{r7}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3305      	adds	r3, #5
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	3204      	adds	r2, #4
 80087a0:	7812      	ldrb	r2, [r2, #0]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	4b11      	ldr	r3, [pc, #68]	@ (80087f0 <ETH_MACAddressConfig+0x68>)
 80087aa:	4413      	add	r3, r2
 80087ac:	461a      	mov	r2, r3
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3303      	adds	r3, #3
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	061a      	lsls	r2, r3, #24
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3302      	adds	r3, #2
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	041b      	lsls	r3, r3, #16
 80087c2:	431a      	orrs	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3301      	adds	r3, #1
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	4313      	orrs	r3, r2
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	7812      	ldrb	r2, [r2, #0]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	4b06      	ldr	r3, [pc, #24]	@ (80087f4 <ETH_MACAddressConfig+0x6c>)
 80087da:	4413      	add	r3, r2
 80087dc:	461a      	mov	r2, r3
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	6013      	str	r3, [r2, #0]
}
 80087e2:	bf00      	nop
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	40028040 	.word	0x40028040
 80087f4:	40028044 	.word	0x40028044

080087f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	e03e      	b.n	8008884 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68d9      	ldr	r1, [r3, #12]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	00db      	lsls	r3, r3, #3
 8008814:	440b      	add	r3, r1
 8008816:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008830:	68b9      	ldr	r1, [r7, #8]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	3206      	adds	r2, #6
 8008838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b02      	cmp	r3, #2
 800884c:	d80c      	bhi.n	8008868 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68d9      	ldr	r1, [r3, #12]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	440b      	add	r3, r1
 8008860:	461a      	mov	r2, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	60da      	str	r2, [r3, #12]
 8008866:	e004      	b.n	8008872 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	461a      	mov	r2, r3
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3301      	adds	r3, #1
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b03      	cmp	r3, #3
 8008888:	d9bd      	bls.n	8008806 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800889c:	611a      	str	r2, [r3, #16]
}
 800889e:	bf00      	nop
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b085      	sub	sp, #20
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	e048      	b.n	800894a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6919      	ldr	r1, [r3, #16]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	440b      	add	r3, r1
 80088c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2200      	movs	r2, #0
 80088d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2200      	movs	r2, #0
 80088da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2200      	movs	r2, #0
 80088e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2200      	movs	r2, #0
 80088e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2200      	movs	r2, #0
 80088ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80088f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	3212      	adds	r2, #18
 8008916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d80c      	bhi.n	800893a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6919      	ldr	r1, [r3, #16]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	4613      	mov	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	440b      	add	r3, r1
 8008932:	461a      	mov	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	60da      	str	r2, [r3, #12]
 8008938:	e004      	b.n	8008944 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	461a      	mov	r2, r3
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3301      	adds	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b03      	cmp	r3, #3
 800894e:	d9b3      	bls.n	80088b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800897a:	60da      	str	r2, [r3, #12]
}
 800897c:	bf00      	nop
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008988:	b480      	push	{r7}
 800898a:	b089      	sub	sp, #36	@ 0x24
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008996:	2300      	movs	r3, #0
 8008998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800899a:	2300      	movs	r3, #0
 800899c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800899e:	2300      	movs	r3, #0
 80089a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	e175      	b.n	8008c94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80089a8:	2201      	movs	r2, #1
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	fa02 f303 	lsl.w	r3, r2, r3
 80089b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4013      	ands	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	f040 8164 	bne.w	8008c8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d005      	beq.n	80089de <HAL_GPIO_Init+0x56>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d130      	bne.n	8008a40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	2203      	movs	r2, #3
 80089ea:	fa02 f303 	lsl.w	r3, r2, r3
 80089ee:	43db      	mvns	r3, r3
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	4013      	ands	r3, r2
 80089f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a14:	2201      	movs	r2, #1
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1c:	43db      	mvns	r3, r3
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	4013      	ands	r3, r2
 8008a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	091b      	lsrs	r3, r3, #4
 8008a2a:	f003 0201 	and.w	r2, r3, #1
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	fa02 f303 	lsl.w	r3, r2, r3
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f003 0303 	and.w	r3, r3, #3
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d017      	beq.n	8008a7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	2203      	movs	r2, #3
 8008a58:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5c:	43db      	mvns	r3, r3
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	4013      	ands	r3, r2
 8008a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f003 0303 	and.w	r3, r3, #3
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d123      	bne.n	8008ad0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	08da      	lsrs	r2, r3, #3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3208      	adds	r2, #8
 8008a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	f003 0307 	and.w	r3, r3, #7
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	220f      	movs	r2, #15
 8008aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	691a      	ldr	r2, [r3, #16]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	08da      	lsrs	r2, r3, #3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3208      	adds	r2, #8
 8008aca:	69b9      	ldr	r1, [r7, #24]
 8008acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	2203      	movs	r2, #3
 8008adc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f003 0203 	and.w	r2, r3, #3
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	fa02 f303 	lsl.w	r3, r2, r3
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 80be 	beq.w	8008c8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b12:	4b66      	ldr	r3, [pc, #408]	@ (8008cac <HAL_GPIO_Init+0x324>)
 8008b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b16:	4a65      	ldr	r2, [pc, #404]	@ (8008cac <HAL_GPIO_Init+0x324>)
 8008b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b1e:	4b63      	ldr	r3, [pc, #396]	@ (8008cac <HAL_GPIO_Init+0x324>)
 8008b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008b2a:	4a61      	ldr	r2, [pc, #388]	@ (8008cb0 <HAL_GPIO_Init+0x328>)
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	089b      	lsrs	r3, r3, #2
 8008b30:	3302      	adds	r3, #2
 8008b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	220f      	movs	r2, #15
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	43db      	mvns	r3, r3
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a58      	ldr	r2, [pc, #352]	@ (8008cb4 <HAL_GPIO_Init+0x32c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d037      	beq.n	8008bc6 <HAL_GPIO_Init+0x23e>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a57      	ldr	r2, [pc, #348]	@ (8008cb8 <HAL_GPIO_Init+0x330>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d031      	beq.n	8008bc2 <HAL_GPIO_Init+0x23a>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a56      	ldr	r2, [pc, #344]	@ (8008cbc <HAL_GPIO_Init+0x334>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d02b      	beq.n	8008bbe <HAL_GPIO_Init+0x236>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a55      	ldr	r2, [pc, #340]	@ (8008cc0 <HAL_GPIO_Init+0x338>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d025      	beq.n	8008bba <HAL_GPIO_Init+0x232>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a54      	ldr	r2, [pc, #336]	@ (8008cc4 <HAL_GPIO_Init+0x33c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d01f      	beq.n	8008bb6 <HAL_GPIO_Init+0x22e>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a53      	ldr	r2, [pc, #332]	@ (8008cc8 <HAL_GPIO_Init+0x340>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d019      	beq.n	8008bb2 <HAL_GPIO_Init+0x22a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a52      	ldr	r2, [pc, #328]	@ (8008ccc <HAL_GPIO_Init+0x344>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d013      	beq.n	8008bae <HAL_GPIO_Init+0x226>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a51      	ldr	r2, [pc, #324]	@ (8008cd0 <HAL_GPIO_Init+0x348>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d00d      	beq.n	8008baa <HAL_GPIO_Init+0x222>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a50      	ldr	r2, [pc, #320]	@ (8008cd4 <HAL_GPIO_Init+0x34c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d007      	beq.n	8008ba6 <HAL_GPIO_Init+0x21e>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a4f      	ldr	r2, [pc, #316]	@ (8008cd8 <HAL_GPIO_Init+0x350>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d101      	bne.n	8008ba2 <HAL_GPIO_Init+0x21a>
 8008b9e:	2309      	movs	r3, #9
 8008ba0:	e012      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008ba2:	230a      	movs	r3, #10
 8008ba4:	e010      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	e00e      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008baa:	2307      	movs	r3, #7
 8008bac:	e00c      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008bae:	2306      	movs	r3, #6
 8008bb0:	e00a      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008bb2:	2305      	movs	r3, #5
 8008bb4:	e008      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008bb6:	2304      	movs	r3, #4
 8008bb8:	e006      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e004      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e002      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e000      	b.n	8008bc8 <HAL_GPIO_Init+0x240>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	f002 0203 	and.w	r2, r2, #3
 8008bce:	0092      	lsls	r2, r2, #2
 8008bd0:	4093      	lsls	r3, r2
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008bd8:	4935      	ldr	r1, [pc, #212]	@ (8008cb0 <HAL_GPIO_Init+0x328>)
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	089b      	lsrs	r3, r3, #2
 8008bde:	3302      	adds	r3, #2
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008be6:	4b3d      	ldr	r3, [pc, #244]	@ (8008cdc <HAL_GPIO_Init+0x354>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	43db      	mvns	r3, r3
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c0a:	4a34      	ldr	r2, [pc, #208]	@ (8008cdc <HAL_GPIO_Init+0x354>)
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c10:	4b32      	ldr	r3, [pc, #200]	@ (8008cdc <HAL_GPIO_Init+0x354>)
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	43db      	mvns	r3, r3
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c34:	4a29      	ldr	r2, [pc, #164]	@ (8008cdc <HAL_GPIO_Init+0x354>)
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008c3a:	4b28      	ldr	r3, [pc, #160]	@ (8008cdc <HAL_GPIO_Init+0x354>)
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	43db      	mvns	r3, r3
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	4013      	ands	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008cdc <HAL_GPIO_Init+0x354>)
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c64:	4b1d      	ldr	r3, [pc, #116]	@ (8008cdc <HAL_GPIO_Init+0x354>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	4013      	ands	r3, r2
 8008c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008c88:	4a14      	ldr	r2, [pc, #80]	@ (8008cdc <HAL_GPIO_Init+0x354>)
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	3301      	adds	r3, #1
 8008c92:	61fb      	str	r3, [r7, #28]
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	2b0f      	cmp	r3, #15
 8008c98:	f67f ae86 	bls.w	80089a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008c9c:	bf00      	nop
 8008c9e:	bf00      	nop
 8008ca0:	3724      	adds	r7, #36	@ 0x24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	40023800 	.word	0x40023800
 8008cb0:	40013800 	.word	0x40013800
 8008cb4:	40020000 	.word	0x40020000
 8008cb8:	40020400 	.word	0x40020400
 8008cbc:	40020800 	.word	0x40020800
 8008cc0:	40020c00 	.word	0x40020c00
 8008cc4:	40021000 	.word	0x40021000
 8008cc8:	40021400 	.word	0x40021400
 8008ccc:	40021800 	.word	0x40021800
 8008cd0:	40021c00 	.word	0x40021c00
 8008cd4:	40022000 	.word	0x40022000
 8008cd8:	40022400 	.word	0x40022400
 8008cdc:	40013c00 	.word	0x40013c00

08008ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691a      	ldr	r2, [r3, #16]
 8008cf0:	887b      	ldrh	r3, [r7, #2]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
 8008cfc:	e001      	b.n	8008d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	807b      	strh	r3, [r7, #2]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d20:	787b      	ldrb	r3, [r7, #1]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d26:	887a      	ldrh	r2, [r7, #2]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008d2c:	e003      	b.n	8008d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008d2e:	887b      	ldrh	r3, [r7, #2]
 8008d30:	041a      	lsls	r2, r3, #16
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	619a      	str	r2, [r3, #24]
}
 8008d36:	bf00      	nop
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b085      	sub	sp, #20
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008d54:	887a      	ldrh	r2, [r7, #2]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	041a      	lsls	r2, r3, #16
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	43d9      	mvns	r1, r3
 8008d60:	887b      	ldrh	r3, [r7, #2]
 8008d62:	400b      	ands	r3, r1
 8008d64:	431a      	orrs	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	619a      	str	r2, [r3, #24]
}
 8008d6a:	bf00      	nop
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
	...

08008d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e08b      	b.n	8008ea2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7fe fe70 	bl	8007a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2224      	movs	r2, #36	@ 0x24
 8008da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008dc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008dd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d107      	bne.n	8008df2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008dee:	609a      	str	r2, [r3, #8]
 8008df0:	e006      	b.n	8008e00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008dfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d108      	bne.n	8008e1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	e007      	b.n	8008e2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6859      	ldr	r1, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	4b1d      	ldr	r3, [pc, #116]	@ (8008eac <HAL_I2C_Init+0x134>)
 8008e36:	430b      	orrs	r3, r1
 8008e38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68da      	ldr	r2, [r3, #12]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691a      	ldr	r2, [r3, #16]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	69d9      	ldr	r1, [r3, #28]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a1a      	ldr	r2, [r3, #32]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0201 	orr.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	02008000 	.word	0x02008000

08008eb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af02      	add	r7, sp, #8
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	607a      	str	r2, [r7, #4]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	817b      	strh	r3, [r7, #10]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b20      	cmp	r3, #32
 8008ece:	f040 80fd 	bne.w	80090cc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <HAL_I2C_Master_Transmit+0x30>
 8008edc:	2302      	movs	r3, #2
 8008ede:	e0f6      	b.n	80090ce <HAL_I2C_Master_Transmit+0x21e>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ee8:	f7ff f8ea 	bl	80080c0 <HAL_GetTick>
 8008eec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	2319      	movs	r3, #25
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fcf0 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e0e1      	b.n	80090ce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2221      	movs	r2, #33	@ 0x21
 8008f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2210      	movs	r2, #16
 8008f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	893a      	ldrh	r2, [r7, #8]
 8008f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2bff      	cmp	r3, #255	@ 0xff
 8008f3a:	d906      	bls.n	8008f4a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	22ff      	movs	r2, #255	@ 0xff
 8008f40:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008f42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	e007      	b.n	8008f5a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008f54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f58:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d024      	beq.n	8008fac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f66:	781a      	ldrb	r2, [r3, #0]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	3301      	adds	r3, #1
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	8979      	ldrh	r1, [r7, #10]
 8008f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80090d8 <HAL_I2C_Master_Transmit+0x228>)
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fe5f 	bl	8009c68 <I2C_TransferConfig>
 8008faa:	e066      	b.n	800907a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	8979      	ldrh	r1, [r7, #10]
 8008fb4:	4b48      	ldr	r3, [pc, #288]	@ (80090d8 <HAL_I2C_Master_Transmit+0x228>)
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fe54 	bl	8009c68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008fc0:	e05b      	b.n	800907a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	6a39      	ldr	r1, [r7, #32]
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fce3 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e07b      	b.n	80090ce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	781a      	ldrb	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ffe:	3b01      	subs	r3, #1
 8009000:	b29a      	uxth	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800900a:	b29b      	uxth	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	d034      	beq.n	800907a <HAL_I2C_Master_Transmit+0x1ca>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009014:	2b00      	cmp	r3, #0
 8009016:	d130      	bne.n	800907a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	2200      	movs	r2, #0
 8009020:	2180      	movs	r1, #128	@ 0x80
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 fc5c 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e04d      	b.n	80090ce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009036:	b29b      	uxth	r3, r3
 8009038:	2bff      	cmp	r3, #255	@ 0xff
 800903a:	d90e      	bls.n	800905a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	22ff      	movs	r2, #255	@ 0xff
 8009040:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009046:	b2da      	uxtb	r2, r3
 8009048:	8979      	ldrh	r1, [r7, #10]
 800904a:	2300      	movs	r3, #0
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 fe08 	bl	8009c68 <I2C_TransferConfig>
 8009058:	e00f      	b.n	800907a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009068:	b2da      	uxtb	r2, r3
 800906a:	8979      	ldrh	r1, [r7, #10]
 800906c:	2300      	movs	r3, #0
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 fdf7 	bl	8009c68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800907e:	b29b      	uxth	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d19e      	bne.n	8008fc2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	6a39      	ldr	r1, [r7, #32]
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 fcc9 	bl	8009a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e01a      	b.n	80090ce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2220      	movs	r2, #32
 800909e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6859      	ldr	r1, [r3, #4]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	4b0c      	ldr	r3, [pc, #48]	@ (80090dc <HAL_I2C_Master_Transmit+0x22c>)
 80090ac:	400b      	ands	r3, r1
 80090ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2220      	movs	r2, #32
 80090b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	e000      	b.n	80090ce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80090cc:	2302      	movs	r3, #2
  }
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	80002000 	.word	0x80002000
 80090dc:	fe00e800 	.word	0xfe00e800

080090e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	4608      	mov	r0, r1
 80090ea:	4611      	mov	r1, r2
 80090ec:	461a      	mov	r2, r3
 80090ee:	4603      	mov	r3, r0
 80090f0:	817b      	strh	r3, [r7, #10]
 80090f2:	460b      	mov	r3, r1
 80090f4:	813b      	strh	r3, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b20      	cmp	r3, #32
 8009104:	f040 80f9 	bne.w	80092fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <HAL_I2C_Mem_Write+0x34>
 800910e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009110:	2b00      	cmp	r3, #0
 8009112:	d105      	bne.n	8009120 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800911a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e0ed      	b.n	80092fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009126:	2b01      	cmp	r3, #1
 8009128:	d101      	bne.n	800912e <HAL_I2C_Mem_Write+0x4e>
 800912a:	2302      	movs	r3, #2
 800912c:	e0e6      	b.n	80092fc <HAL_I2C_Mem_Write+0x21c>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009136:	f7fe ffc3 	bl	80080c0 <HAL_GetTick>
 800913a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	2319      	movs	r3, #25
 8009142:	2201      	movs	r2, #1
 8009144:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 fbc9 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e0d1      	b.n	80092fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2221      	movs	r2, #33	@ 0x21
 800915c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2240      	movs	r2, #64	@ 0x40
 8009164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a3a      	ldr	r2, [r7, #32]
 8009172:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009178:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009180:	88f8      	ldrh	r0, [r7, #6]
 8009182:	893a      	ldrh	r2, [r7, #8]
 8009184:	8979      	ldrh	r1, [r7, #10]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	4603      	mov	r3, r0
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 fad9 	bl	8009748 <I2C_RequestMemoryWrite>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d005      	beq.n	80091a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e0a9      	b.n	80092fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	2bff      	cmp	r3, #255	@ 0xff
 80091b0:	d90e      	bls.n	80091d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	22ff      	movs	r2, #255	@ 0xff
 80091b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	8979      	ldrh	r1, [r7, #10]
 80091c0:	2300      	movs	r3, #0
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 fd4d 	bl	8009c68 <I2C_TransferConfig>
 80091ce:	e00f      	b.n	80091f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	8979      	ldrh	r1, [r7, #10]
 80091e2:	2300      	movs	r3, #0
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 fd3c 	bl	8009c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 fbcc 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e07b      	b.n	80092fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800921e:	b29b      	uxth	r3, r3
 8009220:	3b01      	subs	r3, #1
 8009222:	b29a      	uxth	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800922c:	3b01      	subs	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d034      	beq.n	80092a8 <HAL_I2C_Mem_Write+0x1c8>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009242:	2b00      	cmp	r3, #0
 8009244:	d130      	bne.n	80092a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	2200      	movs	r2, #0
 800924e:	2180      	movs	r1, #128	@ 0x80
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f000 fb45 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e04d      	b.n	80092fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009264:	b29b      	uxth	r3, r3
 8009266:	2bff      	cmp	r3, #255	@ 0xff
 8009268:	d90e      	bls.n	8009288 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	22ff      	movs	r2, #255	@ 0xff
 800926e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009274:	b2da      	uxtb	r2, r3
 8009276:	8979      	ldrh	r1, [r7, #10]
 8009278:	2300      	movs	r3, #0
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 fcf1 	bl	8009c68 <I2C_TransferConfig>
 8009286:	e00f      	b.n	80092a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800928c:	b29a      	uxth	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009296:	b2da      	uxtb	r2, r3
 8009298:	8979      	ldrh	r1, [r7, #10]
 800929a:	2300      	movs	r3, #0
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fce0 	bl	8009c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d19e      	bne.n	80091f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fbb2 	bl	8009a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e01a      	b.n	80092fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2220      	movs	r2, #32
 80092cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6859      	ldr	r1, [r3, #4]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009304 <HAL_I2C_Mem_Write+0x224>)
 80092da:	400b      	ands	r3, r1
 80092dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e000      	b.n	80092fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80092fa:	2302      	movs	r3, #2
  }
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	fe00e800 	.word	0xfe00e800

08009308 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af02      	add	r7, sp, #8
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	4608      	mov	r0, r1
 8009312:	4611      	mov	r1, r2
 8009314:	461a      	mov	r2, r3
 8009316:	4603      	mov	r3, r0
 8009318:	817b      	strh	r3, [r7, #10]
 800931a:	460b      	mov	r3, r1
 800931c:	813b      	strh	r3, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b20      	cmp	r3, #32
 800932c:	f040 80fd 	bne.w	800952a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <HAL_I2C_Mem_Read+0x34>
 8009336:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009338:	2b00      	cmp	r3, #0
 800933a:	d105      	bne.n	8009348 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009342:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e0f1      	b.n	800952c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <HAL_I2C_Mem_Read+0x4e>
 8009352:	2302      	movs	r3, #2
 8009354:	e0ea      	b.n	800952c <HAL_I2C_Mem_Read+0x224>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800935e:	f7fe feaf 	bl	80080c0 <HAL_GetTick>
 8009362:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	2319      	movs	r3, #25
 800936a:	2201      	movs	r2, #1
 800936c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fab5 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e0d5      	b.n	800952c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2222      	movs	r2, #34	@ 0x22
 8009384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2240      	movs	r2, #64	@ 0x40
 800938c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a3a      	ldr	r2, [r7, #32]
 800939a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80093a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093a8:	88f8      	ldrh	r0, [r7, #6]
 80093aa:	893a      	ldrh	r2, [r7, #8]
 80093ac:	8979      	ldrh	r1, [r7, #10]
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	4603      	mov	r3, r0
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 fa19 	bl	80097f0 <I2C_RequestMemoryRead>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e0ad      	b.n	800952c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	2bff      	cmp	r3, #255	@ 0xff
 80093d8:	d90e      	bls.n	80093f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	8979      	ldrh	r1, [r7, #10]
 80093e8:	4b52      	ldr	r3, [pc, #328]	@ (8009534 <HAL_I2C_Mem_Read+0x22c>)
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fc39 	bl	8009c68 <I2C_TransferConfig>
 80093f6:	e00f      	b.n	8009418 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009406:	b2da      	uxtb	r2, r3
 8009408:	8979      	ldrh	r1, [r7, #10]
 800940a:	4b4a      	ldr	r3, [pc, #296]	@ (8009534 <HAL_I2C_Mem_Read+0x22c>)
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fc28 	bl	8009c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941e:	2200      	movs	r2, #0
 8009420:	2104      	movs	r1, #4
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fa5c 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e07c      	b.n	800952c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800943c:	b2d2      	uxtb	r2, r2
 800943e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800944e:	3b01      	subs	r3, #1
 8009450:	b29a      	uxth	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800945a:	b29b      	uxth	r3, r3
 800945c:	3b01      	subs	r3, #1
 800945e:	b29a      	uxth	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d034      	beq.n	80094d8 <HAL_I2C_Mem_Read+0x1d0>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009472:	2b00      	cmp	r3, #0
 8009474:	d130      	bne.n	80094d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947c:	2200      	movs	r2, #0
 800947e:	2180      	movs	r1, #128	@ 0x80
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 fa2d 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e04d      	b.n	800952c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009494:	b29b      	uxth	r3, r3
 8009496:	2bff      	cmp	r3, #255	@ 0xff
 8009498:	d90e      	bls.n	80094b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	8979      	ldrh	r1, [r7, #10]
 80094a8:	2300      	movs	r3, #0
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 fbd9 	bl	8009c68 <I2C_TransferConfig>
 80094b6:	e00f      	b.n	80094d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	8979      	ldrh	r1, [r7, #10]
 80094ca:	2300      	movs	r3, #0
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fbc8 	bl	8009c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d19a      	bne.n	8009418 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 fa9a 	bl	8009a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e01a      	b.n	800952c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2220      	movs	r2, #32
 80094fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6859      	ldr	r1, [r3, #4]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	4b0b      	ldr	r3, [pc, #44]	@ (8009538 <HAL_I2C_Mem_Read+0x230>)
 800950a:	400b      	ands	r3, r1
 800950c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2220      	movs	r2, #32
 8009512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	e000      	b.n	800952c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800952a:	2302      	movs	r3, #2
  }
}
 800952c:	4618      	mov	r0, r3
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	80002400 	.word	0x80002400
 8009538:	fe00e800 	.word	0xfe00e800

0800953c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08a      	sub	sp, #40	@ 0x28
 8009540:	af02      	add	r7, sp, #8
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	607a      	str	r2, [r7, #4]
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	460b      	mov	r3, r1
 800954a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800954c:	2300      	movs	r3, #0
 800954e:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b20      	cmp	r3, #32
 800955e:	f040 80e9 	bne.w	8009734 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800956c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009570:	d101      	bne.n	8009576 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8009572:	2302      	movs	r3, #2
 8009574:	e0df      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800957c:	2b01      	cmp	r3, #1
 800957e:	d101      	bne.n	8009584 <HAL_I2C_IsDeviceReady+0x48>
 8009580:	2302      	movs	r3, #2
 8009582:	e0d8      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x1fa>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2224      	movs	r2, #36	@ 0x24
 8009590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d105      	bne.n	80095ae <HAL_I2C_IsDeviceReady+0x72>
 80095a2:	897b      	ldrh	r3, [r7, #10]
 80095a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80095a8:	4b65      	ldr	r3, [pc, #404]	@ (8009740 <HAL_I2C_IsDeviceReady+0x204>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	e004      	b.n	80095b8 <HAL_I2C_IsDeviceReady+0x7c>
 80095ae:	897b      	ldrh	r3, [r7, #10]
 80095b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80095b4:	4b63      	ldr	r3, [pc, #396]	@ (8009744 <HAL_I2C_IsDeviceReady+0x208>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	6812      	ldr	r2, [r2, #0]
 80095bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80095be:	f7fe fd7f 	bl	80080c0 <HAL_GetTick>
 80095c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b20      	cmp	r3, #32
 80095d0:	bf0c      	ite	eq
 80095d2:	2301      	moveq	r3, #1
 80095d4:	2300      	movne	r3, #0
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	f003 0310 	and.w	r3, r3, #16
 80095e4:	2b10      	cmp	r3, #16
 80095e6:	bf0c      	ite	eq
 80095e8:	2301      	moveq	r3, #1
 80095ea:	2300      	movne	r3, #0
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80095f0:	e034      	b.n	800965c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f8:	d01a      	beq.n	8009630 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80095fa:	f7fe fd61 	bl	80080c0 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d302      	bcc.n	8009610 <HAL_I2C_IsDeviceReady+0xd4>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10f      	bne.n	8009630 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2220      	movs	r2, #32
 8009614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800961c:	f043 0220 	orr.w	r2, r3, #32
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e082      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b20      	cmp	r3, #32
 800963c:	bf0c      	ite	eq
 800963e:	2301      	moveq	r3, #1
 8009640:	2300      	movne	r3, #0
 8009642:	b2db      	uxtb	r3, r3
 8009644:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f003 0310 	and.w	r3, r3, #16
 8009650:	2b10      	cmp	r3, #16
 8009652:	bf0c      	ite	eq
 8009654:	2301      	moveq	r3, #1
 8009656:	2300      	movne	r3, #0
 8009658:	b2db      	uxtb	r3, r3
 800965a:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800965c:	7fbb      	ldrb	r3, [r7, #30]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d102      	bne.n	8009668 <HAL_I2C_IsDeviceReady+0x12c>
 8009662:	7f7b      	ldrb	r3, [r7, #29]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d0c4      	beq.n	80095f2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	f003 0310 	and.w	r3, r3, #16
 8009672:	2b10      	cmp	r3, #16
 8009674:	d027      	beq.n	80096c6 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2200      	movs	r2, #0
 800967e:	2120      	movs	r1, #32
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 f92d 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00e      	beq.n	80096aa <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009690:	2b04      	cmp	r3, #4
 8009692:	d107      	bne.n	80096a4 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2220      	movs	r2, #32
 800969a:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80096a2:	e026      	b.n	80096f2 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	77fb      	strb	r3, [r7, #31]
 80096a8:	e023      	b.n	80096f2 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2220      	movs	r2, #32
 80096b0:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	e037      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2210      	movs	r2, #16
 80096cc:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2200      	movs	r2, #0
 80096d6:	2120      	movs	r1, #32
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 f901 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	77fb      	strb	r3, [r7, #31]
 80096e8:	e003      	b.n	80096f2 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2220      	movs	r2, #32
 80096f0:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	3301      	adds	r3, #1
 80096f6:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d904      	bls.n	800970a <HAL_I2C_IsDeviceReady+0x1ce>
 8009700:	7ffb      	ldrb	r3, [r7, #31]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d101      	bne.n	800970a <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	429a      	cmp	r2, r3
 8009710:	f63f af43 	bhi.w	800959a <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2220      	movs	r2, #32
 8009718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009720:	f043 0220 	orr.w	r2, r3, #32
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8009734:	2302      	movs	r3, #2
  }
}
 8009736:	4618      	mov	r0, r3
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	02002000 	.word	0x02002000
 8009744:	02002800 	.word	0x02002800

08009748 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	4608      	mov	r0, r1
 8009752:	4611      	mov	r1, r2
 8009754:	461a      	mov	r2, r3
 8009756:	4603      	mov	r3, r0
 8009758:	817b      	strh	r3, [r7, #10]
 800975a:	460b      	mov	r3, r1
 800975c:	813b      	strh	r3, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	b2da      	uxtb	r2, r3
 8009766:	8979      	ldrh	r1, [r7, #10]
 8009768:	4b20      	ldr	r3, [pc, #128]	@ (80097ec <I2C_RequestMemoryWrite+0xa4>)
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 fa79 	bl	8009c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009776:	69fa      	ldr	r2, [r7, #28]
 8009778:	69b9      	ldr	r1, [r7, #24]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 f909 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e02c      	b.n	80097e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d105      	bne.n	800979c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009790:	893b      	ldrh	r3, [r7, #8]
 8009792:	b2da      	uxtb	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	629a      	str	r2, [r3, #40]	@ 0x28
 800979a:	e015      	b.n	80097c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800979c:	893b      	ldrh	r3, [r7, #8]
 800979e:	0a1b      	lsrs	r3, r3, #8
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	69b9      	ldr	r1, [r7, #24]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 f8ef 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e012      	b.n	80097e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097be:	893b      	ldrh	r3, [r7, #8]
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	2200      	movs	r2, #0
 80097d0:	2180      	movs	r1, #128	@ 0x80
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 f884 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	80002000 	.word	0x80002000

080097f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af02      	add	r7, sp, #8
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	4608      	mov	r0, r1
 80097fa:	4611      	mov	r1, r2
 80097fc:	461a      	mov	r2, r3
 80097fe:	4603      	mov	r3, r0
 8009800:	817b      	strh	r3, [r7, #10]
 8009802:	460b      	mov	r3, r1
 8009804:	813b      	strh	r3, [r7, #8]
 8009806:	4613      	mov	r3, r2
 8009808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800980a:	88fb      	ldrh	r3, [r7, #6]
 800980c:	b2da      	uxtb	r2, r3
 800980e:	8979      	ldrh	r1, [r7, #10]
 8009810:	4b20      	ldr	r3, [pc, #128]	@ (8009894 <I2C_RequestMemoryRead+0xa4>)
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fa26 	bl	8009c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800981c:	69fa      	ldr	r2, [r7, #28]
 800981e:	69b9      	ldr	r1, [r7, #24]
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 f8b6 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e02c      	b.n	800988a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009830:	88fb      	ldrh	r3, [r7, #6]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d105      	bne.n	8009842 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009836:	893b      	ldrh	r3, [r7, #8]
 8009838:	b2da      	uxtb	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009840:	e015      	b.n	800986e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009842:	893b      	ldrh	r3, [r7, #8]
 8009844:	0a1b      	lsrs	r3, r3, #8
 8009846:	b29b      	uxth	r3, r3
 8009848:	b2da      	uxtb	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	69b9      	ldr	r1, [r7, #24]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 f89c 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e012      	b.n	800988a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009864:	893b      	ldrh	r3, [r7, #8]
 8009866:	b2da      	uxtb	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	2200      	movs	r2, #0
 8009876:	2140      	movs	r1, #64	@ 0x40
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 f831 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e000      	b.n	800988a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	80002000 	.word	0x80002000

08009898 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d103      	bne.n	80098b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2200      	movs	r2, #0
 80098b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d007      	beq.n	80098d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699a      	ldr	r2, [r3, #24]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0201 	orr.w	r2, r2, #1
 80098d2:	619a      	str	r2, [r3, #24]
  }
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	4613      	mov	r3, r2
 80098ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098f0:	e03b      	b.n	800996a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098f2:	69ba      	ldr	r2, [r7, #24]
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 f8d6 	bl	8009aa8 <I2C_IsErrorOccurred>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e041      	b.n	800998a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d02d      	beq.n	800996a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800990e:	f7fe fbd7 	bl	80080c0 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d302      	bcc.n	8009924 <I2C_WaitOnFlagUntilTimeout+0x44>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d122      	bne.n	800996a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699a      	ldr	r2, [r3, #24]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	4013      	ands	r3, r2
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	429a      	cmp	r2, r3
 8009932:	bf0c      	ite	eq
 8009934:	2301      	moveq	r3, #1
 8009936:	2300      	movne	r3, #0
 8009938:	b2db      	uxtb	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	79fb      	ldrb	r3, [r7, #7]
 800993e:	429a      	cmp	r2, r3
 8009940:	d113      	bne.n	800996a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009946:	f043 0220 	orr.w	r2, r3, #32
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2220      	movs	r2, #32
 8009952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e00f      	b.n	800998a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699a      	ldr	r2, [r3, #24]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	4013      	ands	r3, r2
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	429a      	cmp	r2, r3
 8009978:	bf0c      	ite	eq
 800997a:	2301      	moveq	r3, #1
 800997c:	2300      	movne	r3, #0
 800997e:	b2db      	uxtb	r3, r3
 8009980:	461a      	mov	r2, r3
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	429a      	cmp	r2, r3
 8009986:	d0b4      	beq.n	80098f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	60f8      	str	r0, [r7, #12]
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800999e:	e033      	b.n	8009a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f87f 	bl	8009aa8 <I2C_IsErrorOccurred>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e031      	b.n	8009a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d025      	beq.n	8009a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099bc:	f7fe fb80 	bl	80080c0 <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d302      	bcc.n	80099d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d11a      	bne.n	8009a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f003 0302 	and.w	r3, r3, #2
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d013      	beq.n	8009a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e4:	f043 0220 	orr.w	r2, r3, #32
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e007      	b.n	8009a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d1c4      	bne.n	80099a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a2c:	e02f      	b.n	8009a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f838 	bl	8009aa8 <I2C_IsErrorOccurred>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e02d      	b.n	8009a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a42:	f7fe fb3d 	bl	80080c0 <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d302      	bcc.n	8009a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d11a      	bne.n	8009a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b20      	cmp	r3, #32
 8009a64:	d013      	beq.n	8009a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a6a:	f043 0220 	orr.w	r2, r3, #32
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e007      	b.n	8009a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	d1c8      	bne.n	8009a2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08a      	sub	sp, #40	@ 0x28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	f003 0310 	and.w	r3, r3, #16
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d068      	beq.n	8009ba6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2210      	movs	r2, #16
 8009ada:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009adc:	e049      	b.n	8009b72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae4:	d045      	beq.n	8009b72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ae6:	f7fe faeb 	bl	80080c0 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d302      	bcc.n	8009afc <I2C_IsErrorOccurred+0x54>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d13a      	bne.n	8009b72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b1e:	d121      	bne.n	8009b64 <I2C_IsErrorOccurred+0xbc>
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b26:	d01d      	beq.n	8009b64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009b28:	7cfb      	ldrb	r3, [r7, #19]
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d01a      	beq.n	8009b64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b3e:	f7fe fabf 	bl	80080c0 <HAL_GetTick>
 8009b42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b44:	e00e      	b.n	8009b64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b46:	f7fe fabb 	bl	80080c0 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b19      	cmp	r3, #25
 8009b52:	d907      	bls.n	8009b64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	f043 0320 	orr.w	r3, r3, #32
 8009b5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009b62:	e006      	b.n	8009b72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d1e9      	bne.n	8009b46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d003      	beq.n	8009b88 <I2C_IsErrorOccurred+0xe0>
 8009b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0aa      	beq.n	8009ade <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d103      	bne.n	8009b98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2220      	movs	r2, #32
 8009b96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	f043 0304 	orr.w	r3, r3, #4
 8009b9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00b      	beq.n	8009bd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	f043 0301 	orr.w	r3, r3, #1
 8009bbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	f043 0308 	orr.w	r3, r3, #8
 8009be0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	f043 0302 	orr.w	r3, r3, #2
 8009c02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01c      	beq.n	8009c56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7ff fe3b 	bl	8009898 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6859      	ldr	r1, [r3, #4]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c64 <I2C_IsErrorOccurred+0x1bc>)
 8009c2e:	400b      	ands	r3, r1
 8009c30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2220      	movs	r2, #32
 8009c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009c56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3728      	adds	r7, #40	@ 0x28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	fe00e800 	.word	0xfe00e800

08009c68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	607b      	str	r3, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	817b      	strh	r3, [r7, #10]
 8009c76:	4613      	mov	r3, r2
 8009c78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c7a:	897b      	ldrh	r3, [r7, #10]
 8009c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c80:	7a7b      	ldrb	r3, [r7, #9]
 8009c82:	041b      	lsls	r3, r3, #16
 8009c84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c88:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c96:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	0d5b      	lsrs	r3, r3, #21
 8009ca2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009ca6:	4b08      	ldr	r3, [pc, #32]	@ (8009cc8 <I2C_TransferConfig+0x60>)
 8009ca8:	430b      	orrs	r3, r1
 8009caa:	43db      	mvns	r3, r3
 8009cac:	ea02 0103 	and.w	r1, r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009cba:	bf00      	nop
 8009cbc:	371c      	adds	r7, #28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	03ff63ff 	.word	0x03ff63ff

08009ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	d138      	bne.n	8009d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d101      	bne.n	8009cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cec:	2302      	movs	r3, #2
 8009cee:	e032      	b.n	8009d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2224      	movs	r2, #36	@ 0x24
 8009cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0201 	bic.w	r2, r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6819      	ldr	r1, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0201 	orr.w	r2, r2, #1
 8009d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	e000      	b.n	8009d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d54:	2302      	movs	r3, #2
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d139      	bne.n	8009dec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e033      	b.n	8009dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2224      	movs	r2, #36	@ 0x24
 8009d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 0201 	bic.w	r2, r2, #1
 8009da4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009db4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	021b      	lsls	r3, r3, #8
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0201 	orr.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	e000      	b.n	8009dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009dec:	2302      	movs	r3, #2
  }
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b086      	sub	sp, #24
 8009dfe:	af02      	add	r7, sp, #8
 8009e00:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e108      	b.n	800a01e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7fd ff4e 	bl	8007cc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2203      	movs	r2, #3
 8009e30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e3a:	d102      	bne.n	8009e42 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f002 fb8e 	bl	800c568 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6818      	ldr	r0, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	7c1a      	ldrb	r2, [r3, #16]
 8009e54:	f88d 2000 	strb.w	r2, [sp]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e5c:	f002 fb2a 	bl	800c4b4 <USB_CoreInit>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d005      	beq.n	8009e72 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e0d5      	b.n	800a01e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f002 fb86 	bl	800c58a <USB_SetCurrentMode>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d005      	beq.n	8009e90 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e0c6      	b.n	800a01e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e90:	2300      	movs	r3, #0
 8009e92:	73fb      	strb	r3, [r7, #15]
 8009e94:	e04a      	b.n	8009f2c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009e96:	7bfa      	ldrb	r2, [r7, #15]
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	00db      	lsls	r3, r3, #3
 8009e9e:	4413      	add	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	3315      	adds	r3, #21
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009eaa:	7bfa      	ldrb	r2, [r7, #15]
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	00db      	lsls	r3, r3, #3
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	440b      	add	r3, r1
 8009eb8:	3314      	adds	r3, #20
 8009eba:	7bfa      	ldrb	r2, [r7, #15]
 8009ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009ebe:	7bfa      	ldrb	r2, [r7, #15]
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	b298      	uxth	r0, r3
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	440b      	add	r3, r1
 8009ed0:	332e      	adds	r3, #46	@ 0x2e
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ed6:	7bfa      	ldrb	r2, [r7, #15]
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	4613      	mov	r3, r2
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	440b      	add	r3, r1
 8009ee4:	3318      	adds	r3, #24
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009eea:	7bfa      	ldrb	r2, [r7, #15]
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	00db      	lsls	r3, r3, #3
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	331c      	adds	r3, #28
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009efe:	7bfa      	ldrb	r2, [r7, #15]
 8009f00:	6879      	ldr	r1, [r7, #4]
 8009f02:	4613      	mov	r3, r2
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	4413      	add	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	440b      	add	r3, r1
 8009f0c:	3320      	adds	r3, #32
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f12:	7bfa      	ldrb	r2, [r7, #15]
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	3324      	adds	r3, #36	@ 0x24
 8009f22:	2200      	movs	r2, #0
 8009f24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	73fb      	strb	r3, [r7, #15]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	791b      	ldrb	r3, [r3, #4]
 8009f30:	7bfa      	ldrb	r2, [r7, #15]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d3af      	bcc.n	8009e96 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f36:	2300      	movs	r3, #0
 8009f38:	73fb      	strb	r3, [r7, #15]
 8009f3a:	e044      	b.n	8009fc6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f3c:	7bfa      	ldrb	r2, [r7, #15]
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	4613      	mov	r3, r2
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009f4e:	2200      	movs	r2, #0
 8009f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f52:	7bfa      	ldrb	r2, [r7, #15]
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	4613      	mov	r3, r2
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	4413      	add	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	440b      	add	r3, r1
 8009f60:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009f64:	7bfa      	ldrb	r2, [r7, #15]
 8009f66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f68:	7bfa      	ldrb	r2, [r7, #15]
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	00db      	lsls	r3, r3, #3
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	440b      	add	r3, r1
 8009f76:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f7e:	7bfa      	ldrb	r2, [r7, #15]
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	4613      	mov	r3, r2
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	4413      	add	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f94:	7bfa      	ldrb	r2, [r7, #15]
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009faa:	7bfa      	ldrb	r2, [r7, #15]
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	440b      	add	r3, r1
 8009fb8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	73fb      	strb	r3, [r7, #15]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	791b      	ldrb	r3, [r3, #4]
 8009fca:	7bfa      	ldrb	r2, [r7, #15]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d3b5      	bcc.n	8009f3c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7c1a      	ldrb	r2, [r3, #16]
 8009fd8:	f88d 2000 	strb.w	r2, [sp]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009fe0:	f002 fb20 	bl	800c624 <USB_DevInit>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d005      	beq.n	8009ff6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2202      	movs	r2, #2
 8009fee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e013      	b.n	800a01e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	7b1b      	ldrb	r3, [r3, #12]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d102      	bne.n	800a012 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f80b 	bl	800a028 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4618      	mov	r0, r3
 800a018:	f002 fcdb 	bl	800c9d2 <USB_DevDisconnect>

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a056:	4b05      	ldr	r3, [pc, #20]	@ (800a06c <HAL_PCDEx_ActivateLPM+0x44>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	10000003 	.word	0x10000003

0800a070 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a070:	b480      	push	{r7}
 800a072:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a074:	4b05      	ldr	r3, [pc, #20]	@ (800a08c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a04      	ldr	r2, [pc, #16]	@ (800a08c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a07a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a07e:	6013      	str	r3, [r2, #0]
}
 800a080:	bf00      	nop
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	40007000 	.word	0x40007000

0800a090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a098:	2300      	movs	r3, #0
 800a09a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e291      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 8087 	beq.w	800a1c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0b4:	4b96      	ldr	r3, [pc, #600]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f003 030c 	and.w	r3, r3, #12
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d00c      	beq.n	800a0da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0c0:	4b93      	ldr	r3, [pc, #588]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f003 030c 	and.w	r3, r3, #12
 800a0c8:	2b08      	cmp	r3, #8
 800a0ca:	d112      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x62>
 800a0cc:	4b90      	ldr	r3, [pc, #576]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0d8:	d10b      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0da:	4b8d      	ldr	r3, [pc, #564]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d06c      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x130>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d168      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e26b      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0fa:	d106      	bne.n	800a10a <HAL_RCC_OscConfig+0x7a>
 800a0fc:	4b84      	ldr	r3, [pc, #528]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a83      	ldr	r2, [pc, #524]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	e02e      	b.n	800a168 <HAL_RCC_OscConfig+0xd8>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10c      	bne.n	800a12c <HAL_RCC_OscConfig+0x9c>
 800a112:	4b7f      	ldr	r3, [pc, #508]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a7e      	ldr	r2, [pc, #504]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	4b7c      	ldr	r3, [pc, #496]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a7b      	ldr	r2, [pc, #492]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	e01d      	b.n	800a168 <HAL_RCC_OscConfig+0xd8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a134:	d10c      	bne.n	800a150 <HAL_RCC_OscConfig+0xc0>
 800a136:	4b76      	ldr	r3, [pc, #472]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a75      	ldr	r2, [pc, #468]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a13c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	4b73      	ldr	r3, [pc, #460]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a72      	ldr	r2, [pc, #456]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	e00b      	b.n	800a168 <HAL_RCC_OscConfig+0xd8>
 800a150:	4b6f      	ldr	r3, [pc, #444]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a6e      	ldr	r2, [pc, #440]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a15a:	6013      	str	r3, [r2, #0]
 800a15c:	4b6c      	ldr	r3, [pc, #432]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a6b      	ldr	r2, [pc, #428]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d013      	beq.n	800a198 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a170:	f7fd ffa6 	bl	80080c0 <HAL_GetTick>
 800a174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a178:	f7fd ffa2 	bl	80080c0 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b64      	cmp	r3, #100	@ 0x64
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e21f      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a18a:	4b61      	ldr	r3, [pc, #388]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f0      	beq.n	800a178 <HAL_RCC_OscConfig+0xe8>
 800a196:	e014      	b.n	800a1c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a198:	f7fd ff92 	bl	80080c0 <HAL_GetTick>
 800a19c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a19e:	e008      	b.n	800a1b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1a0:	f7fd ff8e 	bl	80080c0 <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b64      	cmp	r3, #100	@ 0x64
 800a1ac:	d901      	bls.n	800a1b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e20b      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1b2:	4b57      	ldr	r3, [pc, #348]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1f0      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x110>
 800a1be:	e000      	b.n	800a1c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d069      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1ce:	4b50      	ldr	r3, [pc, #320]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f003 030c 	and.w	r3, r3, #12
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00b      	beq.n	800a1f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1da:	4b4d      	ldr	r3, [pc, #308]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 030c 	and.w	r3, r3, #12
 800a1e2:	2b08      	cmp	r3, #8
 800a1e4:	d11c      	bne.n	800a220 <HAL_RCC_OscConfig+0x190>
 800a1e6:	4b4a      	ldr	r3, [pc, #296]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d116      	bne.n	800a220 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1f2:	4b47      	ldr	r3, [pc, #284]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <HAL_RCC_OscConfig+0x17a>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d001      	beq.n	800a20a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e1df      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a20a:	4b41      	ldr	r3, [pc, #260]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	493d      	ldr	r1, [pc, #244]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a21e:	e040      	b.n	800a2a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d023      	beq.n	800a270 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a228:	4b39      	ldr	r3, [pc, #228]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a38      	ldr	r2, [pc, #224]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a22e:	f043 0301 	orr.w	r3, r3, #1
 800a232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a234:	f7fd ff44 	bl	80080c0 <HAL_GetTick>
 800a238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a23a:	e008      	b.n	800a24e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a23c:	f7fd ff40 	bl	80080c0 <HAL_GetTick>
 800a240:	4602      	mov	r2, r0
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d901      	bls.n	800a24e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e1bd      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a24e:	4b30      	ldr	r3, [pc, #192]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0f0      	beq.n	800a23c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a25a:	4b2d      	ldr	r3, [pc, #180]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	4929      	ldr	r1, [pc, #164]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	600b      	str	r3, [r1, #0]
 800a26e:	e018      	b.n	800a2a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a270:	4b27      	ldr	r3, [pc, #156]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a26      	ldr	r2, [pc, #152]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a27c:	f7fd ff20 	bl	80080c0 <HAL_GetTick>
 800a280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a284:	f7fd ff1c 	bl	80080c0 <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e199      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a296:	4b1e      	ldr	r3, [pc, #120]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f0      	bne.n	800a284 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d038      	beq.n	800a320 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d019      	beq.n	800a2ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2b6:	4b16      	ldr	r3, [pc, #88]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ba:	4a15      	ldr	r2, [pc, #84]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2bc:	f043 0301 	orr.w	r3, r3, #1
 800a2c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2c2:	f7fd fefd 	bl	80080c0 <HAL_GetTick>
 800a2c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2c8:	e008      	b.n	800a2dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2ca:	f7fd fef9 	bl	80080c0 <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d901      	bls.n	800a2dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e176      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0f0      	beq.n	800a2ca <HAL_RCC_OscConfig+0x23a>
 800a2e8:	e01a      	b.n	800a320 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2ea:	4b09      	ldr	r3, [pc, #36]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ee:	4a08      	ldr	r2, [pc, #32]	@ (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2f0:	f023 0301 	bic.w	r3, r3, #1
 800a2f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2f6:	f7fd fee3 	bl	80080c0 <HAL_GetTick>
 800a2fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2fc:	e00a      	b.n	800a314 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2fe:	f7fd fedf 	bl	80080c0 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d903      	bls.n	800a314 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e15c      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
 800a310:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a314:	4b91      	ldr	r3, [pc, #580]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a318:	f003 0302 	and.w	r3, r3, #2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1ee      	bne.n	800a2fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0304 	and.w	r3, r3, #4
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 80a4 	beq.w	800a476 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a32e:	4b8b      	ldr	r3, [pc, #556]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10d      	bne.n	800a356 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a33a:	4b88      	ldr	r3, [pc, #544]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33e:	4a87      	ldr	r2, [pc, #540]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a344:	6413      	str	r3, [r2, #64]	@ 0x40
 800a346:	4b85      	ldr	r3, [pc, #532]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a34e:	60bb      	str	r3, [r7, #8]
 800a350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a352:	2301      	movs	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a356:	4b82      	ldr	r3, [pc, #520]	@ (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d118      	bne.n	800a394 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a362:	4b7f      	ldr	r3, [pc, #508]	@ (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a7e      	ldr	r2, [pc, #504]	@ (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a36c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a36e:	f7fd fea7 	bl	80080c0 <HAL_GetTick>
 800a372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a374:	e008      	b.n	800a388 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a376:	f7fd fea3 	bl	80080c0 <HAL_GetTick>
 800a37a:	4602      	mov	r2, r0
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	2b64      	cmp	r3, #100	@ 0x64
 800a382:	d901      	bls.n	800a388 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e120      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a388:	4b75      	ldr	r3, [pc, #468]	@ (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0f0      	beq.n	800a376 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d106      	bne.n	800a3aa <HAL_RCC_OscConfig+0x31a>
 800a39c:	4b6f      	ldr	r3, [pc, #444]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a39e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3a0:	4a6e      	ldr	r2, [pc, #440]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3a2:	f043 0301 	orr.w	r3, r3, #1
 800a3a6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3a8:	e02d      	b.n	800a406 <HAL_RCC_OscConfig+0x376>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10c      	bne.n	800a3cc <HAL_RCC_OscConfig+0x33c>
 800a3b2:	4b6a      	ldr	r3, [pc, #424]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3b6:	4a69      	ldr	r2, [pc, #420]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3b8:	f023 0301 	bic.w	r3, r3, #1
 800a3bc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3be:	4b67      	ldr	r3, [pc, #412]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3c2:	4a66      	ldr	r2, [pc, #408]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3c4:	f023 0304 	bic.w	r3, r3, #4
 800a3c8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3ca:	e01c      	b.n	800a406 <HAL_RCC_OscConfig+0x376>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	2b05      	cmp	r3, #5
 800a3d2:	d10c      	bne.n	800a3ee <HAL_RCC_OscConfig+0x35e>
 800a3d4:	4b61      	ldr	r3, [pc, #388]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3d8:	4a60      	ldr	r2, [pc, #384]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3da:	f043 0304 	orr.w	r3, r3, #4
 800a3de:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3e0:	4b5e      	ldr	r3, [pc, #376]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3e4:	4a5d      	ldr	r2, [pc, #372]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3e6:	f043 0301 	orr.w	r3, r3, #1
 800a3ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3ec:	e00b      	b.n	800a406 <HAL_RCC_OscConfig+0x376>
 800a3ee:	4b5b      	ldr	r3, [pc, #364]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3f2:	4a5a      	ldr	r2, [pc, #360]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3f4:	f023 0301 	bic.w	r3, r3, #1
 800a3f8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3fa:	4b58      	ldr	r3, [pc, #352]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3fe:	4a57      	ldr	r2, [pc, #348]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a400:	f023 0304 	bic.w	r3, r3, #4
 800a404:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d015      	beq.n	800a43a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a40e:	f7fd fe57 	bl	80080c0 <HAL_GetTick>
 800a412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a414:	e00a      	b.n	800a42c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a416:	f7fd fe53 	bl	80080c0 <HAL_GetTick>
 800a41a:	4602      	mov	r2, r0
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a424:	4293      	cmp	r3, r2
 800a426:	d901      	bls.n	800a42c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e0ce      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a42c:	4b4b      	ldr	r3, [pc, #300]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a42e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d0ee      	beq.n	800a416 <HAL_RCC_OscConfig+0x386>
 800a438:	e014      	b.n	800a464 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a43a:	f7fd fe41 	bl	80080c0 <HAL_GetTick>
 800a43e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a440:	e00a      	b.n	800a458 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a442:	f7fd fe3d 	bl	80080c0 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a450:	4293      	cmp	r3, r2
 800a452:	d901      	bls.n	800a458 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e0b8      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a458:	4b40      	ldr	r3, [pc, #256]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a45a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1ee      	bne.n	800a442 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d105      	bne.n	800a476 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a46a:	4b3c      	ldr	r3, [pc, #240]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a46e:	4a3b      	ldr	r2, [pc, #236]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a474:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 80a4 	beq.w	800a5c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a480:	4b36      	ldr	r3, [pc, #216]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f003 030c 	and.w	r3, r3, #12
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d06b      	beq.n	800a564 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d149      	bne.n	800a528 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a494:	4b31      	ldr	r3, [pc, #196]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a30      	ldr	r2, [pc, #192]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a49a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a49e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a0:	f7fd fe0e 	bl	80080c0 <HAL_GetTick>
 800a4a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4a6:	e008      	b.n	800a4ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4a8:	f7fd fe0a 	bl	80080c0 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e087      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ba:	4b28      	ldr	r3, [pc, #160]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f0      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	69da      	ldr	r2, [r3, #28]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d4:	019b      	lsls	r3, r3, #6
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4dc:	085b      	lsrs	r3, r3, #1
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	041b      	lsls	r3, r3, #16
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e8:	061b      	lsls	r3, r3, #24
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	4a1b      	ldr	r2, [pc, #108]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a4ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a4f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4f4:	4b19      	ldr	r3, [pc, #100]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a18      	ldr	r2, [pc, #96]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a4fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a500:	f7fd fdde 	bl	80080c0 <HAL_GetTick>
 800a504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a506:	e008      	b.n	800a51a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a508:	f7fd fdda 	bl	80080c0 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e057      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a51a:	4b10      	ldr	r3, [pc, #64]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f0      	beq.n	800a508 <HAL_RCC_OscConfig+0x478>
 800a526:	e04f      	b.n	800a5c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a528:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a0b      	ldr	r2, [pc, #44]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a52e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a534:	f7fd fdc4 	bl	80080c0 <HAL_GetTick>
 800a538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a53a:	e008      	b.n	800a54e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a53c:	f7fd fdc0 	bl	80080c0 <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	2b02      	cmp	r3, #2
 800a548:	d901      	bls.n	800a54e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e03d      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a54e:	4b03      	ldr	r3, [pc, #12]	@ (800a55c <HAL_RCC_OscConfig+0x4cc>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1f0      	bne.n	800a53c <HAL_RCC_OscConfig+0x4ac>
 800a55a:	e035      	b.n	800a5c8 <HAL_RCC_OscConfig+0x538>
 800a55c:	40023800 	.word	0x40023800
 800a560:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a564:	4b1b      	ldr	r3, [pc, #108]	@ (800a5d4 <HAL_RCC_OscConfig+0x544>)
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d028      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d121      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d11a      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a594:	4013      	ands	r3, r2
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a59a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d111      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d107      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d001      	beq.n	800a5c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e000      	b.n	800a5ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	40023800 	.word	0x40023800

0800a5d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e0d0      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5f0:	4b6a      	ldr	r3, [pc, #424]	@ (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 030f 	and.w	r3, r3, #15
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d910      	bls.n	800a620 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5fe:	4b67      	ldr	r3, [pc, #412]	@ (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f023 020f 	bic.w	r2, r3, #15
 800a606:	4965      	ldr	r1, [pc, #404]	@ (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a60e:	4b63      	ldr	r3, [pc, #396]	@ (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 030f 	and.w	r3, r3, #15
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d001      	beq.n	800a620 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e0b8      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d020      	beq.n	800a66e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b00      	cmp	r3, #0
 800a636:	d005      	beq.n	800a644 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a638:	4b59      	ldr	r3, [pc, #356]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	4a58      	ldr	r2, [pc, #352]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a63e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a642:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0308 	and.w	r3, r3, #8
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d005      	beq.n	800a65c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a650:	4b53      	ldr	r3, [pc, #332]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	4a52      	ldr	r2, [pc, #328]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a656:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a65a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a65c:	4b50      	ldr	r3, [pc, #320]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	494d      	ldr	r1, [pc, #308]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d040      	beq.n	800a6fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d107      	bne.n	800a692 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a682:	4b47      	ldr	r3, [pc, #284]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d115      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e07f      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d107      	bne.n	800a6aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a69a:	4b41      	ldr	r3, [pc, #260]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e073      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6aa:	4b3d      	ldr	r3, [pc, #244]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e06b      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6ba:	4b39      	ldr	r3, [pc, #228]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f023 0203 	bic.w	r2, r3, #3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	4936      	ldr	r1, [pc, #216]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6cc:	f7fd fcf8 	bl	80080c0 <HAL_GetTick>
 800a6d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6d2:	e00a      	b.n	800a6ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6d4:	f7fd fcf4 	bl	80080c0 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e053      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6ea:	4b2d      	ldr	r3, [pc, #180]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f003 020c 	and.w	r2, r3, #12
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d1eb      	bne.n	800a6d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6fc:	4b27      	ldr	r3, [pc, #156]	@ (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 030f 	and.w	r3, r3, #15
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	429a      	cmp	r2, r3
 800a708:	d210      	bcs.n	800a72c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a70a:	4b24      	ldr	r3, [pc, #144]	@ (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f023 020f 	bic.w	r2, r3, #15
 800a712:	4922      	ldr	r1, [pc, #136]	@ (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	4313      	orrs	r3, r2
 800a718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a71a:	4b20      	ldr	r3, [pc, #128]	@ (800a79c <HAL_RCC_ClockConfig+0x1c4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 030f 	and.w	r3, r3, #15
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d001      	beq.n	800a72c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e032      	b.n	800a792 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b00      	cmp	r3, #0
 800a736:	d008      	beq.n	800a74a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a738:	4b19      	ldr	r3, [pc, #100]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	4916      	ldr	r1, [pc, #88]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a746:	4313      	orrs	r3, r2
 800a748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0308 	and.w	r3, r3, #8
 800a752:	2b00      	cmp	r3, #0
 800a754:	d009      	beq.n	800a76a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a756:	4b12      	ldr	r3, [pc, #72]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	490e      	ldr	r1, [pc, #56]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a766:	4313      	orrs	r3, r2
 800a768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a76a:	f000 f821 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800a76e:	4602      	mov	r2, r0
 800a770:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a0 <HAL_RCC_ClockConfig+0x1c8>)
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	091b      	lsrs	r3, r3, #4
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	490a      	ldr	r1, [pc, #40]	@ (800a7a4 <HAL_RCC_ClockConfig+0x1cc>)
 800a77c:	5ccb      	ldrb	r3, [r1, r3]
 800a77e:	fa22 f303 	lsr.w	r3, r2, r3
 800a782:	4a09      	ldr	r2, [pc, #36]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1d0>)
 800a784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a786:	4b09      	ldr	r3, [pc, #36]	@ (800a7ac <HAL_RCC_ClockConfig+0x1d4>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fd fc54 	bl	8008038 <HAL_InitTick>

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	40023c00 	.word	0x40023c00
 800a7a0:	40023800 	.word	0x40023800
 800a7a4:	08013708 	.word	0x08013708
 800a7a8:	2000000c 	.word	0x2000000c
 800a7ac:	20000010 	.word	0x20000010

0800a7b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7b4:	b094      	sub	sp, #80	@ 0x50
 800a7b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7bc:	2300      	movs	r3, #0
 800a7be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7c8:	4b79      	ldr	r3, [pc, #484]	@ (800a9b0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f003 030c 	and.w	r3, r3, #12
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d00d      	beq.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x40>
 800a7d4:	2b08      	cmp	r3, #8
 800a7d6:	f200 80e1 	bhi.w	800a99c <HAL_RCC_GetSysClockFreq+0x1ec>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <HAL_RCC_GetSysClockFreq+0x34>
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d003      	beq.n	800a7ea <HAL_RCC_GetSysClockFreq+0x3a>
 800a7e2:	e0db      	b.n	800a99c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7e4:	4b73      	ldr	r3, [pc, #460]	@ (800a9b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800a7e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a7e8:	e0db      	b.n	800a9a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7ea:	4b73      	ldr	r3, [pc, #460]	@ (800a9b8 <HAL_RCC_GetSysClockFreq+0x208>)
 800a7ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a7ee:	e0d8      	b.n	800a9a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7f0:	4b6f      	ldr	r3, [pc, #444]	@ (800a9b0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a7fa:	4b6d      	ldr	r3, [pc, #436]	@ (800a9b0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d063      	beq.n	800a8ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a806:	4b6a      	ldr	r3, [pc, #424]	@ (800a9b0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	099b      	lsrs	r3, r3, #6
 800a80c:	2200      	movs	r2, #0
 800a80e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a810:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a818:	633b      	str	r3, [r7, #48]	@ 0x30
 800a81a:	2300      	movs	r3, #0
 800a81c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a81e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a822:	4622      	mov	r2, r4
 800a824:	462b      	mov	r3, r5
 800a826:	f04f 0000 	mov.w	r0, #0
 800a82a:	f04f 0100 	mov.w	r1, #0
 800a82e:	0159      	lsls	r1, r3, #5
 800a830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a834:	0150      	lsls	r0, r2, #5
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	4621      	mov	r1, r4
 800a83c:	1a51      	subs	r1, r2, r1
 800a83e:	6139      	str	r1, [r7, #16]
 800a840:	4629      	mov	r1, r5
 800a842:	eb63 0301 	sbc.w	r3, r3, r1
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	f04f 0200 	mov.w	r2, #0
 800a84c:	f04f 0300 	mov.w	r3, #0
 800a850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a854:	4659      	mov	r1, fp
 800a856:	018b      	lsls	r3, r1, #6
 800a858:	4651      	mov	r1, sl
 800a85a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a85e:	4651      	mov	r1, sl
 800a860:	018a      	lsls	r2, r1, #6
 800a862:	4651      	mov	r1, sl
 800a864:	ebb2 0801 	subs.w	r8, r2, r1
 800a868:	4659      	mov	r1, fp
 800a86a:	eb63 0901 	sbc.w	r9, r3, r1
 800a86e:	f04f 0200 	mov.w	r2, #0
 800a872:	f04f 0300 	mov.w	r3, #0
 800a876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a87a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a87e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a882:	4690      	mov	r8, r2
 800a884:	4699      	mov	r9, r3
 800a886:	4623      	mov	r3, r4
 800a888:	eb18 0303 	adds.w	r3, r8, r3
 800a88c:	60bb      	str	r3, [r7, #8]
 800a88e:	462b      	mov	r3, r5
 800a890:	eb49 0303 	adc.w	r3, r9, r3
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	f04f 0200 	mov.w	r2, #0
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	024b      	lsls	r3, r1, #9
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	024a      	lsls	r2, r1, #9
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a8c0:	f7f6 fa02 	bl	8000cc8 <__aeabi_uldivmod>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8cc:	e058      	b.n	800a980 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8ce:	4b38      	ldr	r3, [pc, #224]	@ (800a9b0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	099b      	lsrs	r3, r3, #6
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	4611      	mov	r1, r2
 800a8da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a8de:	623b      	str	r3, [r7, #32]
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a8e8:	4642      	mov	r2, r8
 800a8ea:	464b      	mov	r3, r9
 800a8ec:	f04f 0000 	mov.w	r0, #0
 800a8f0:	f04f 0100 	mov.w	r1, #0
 800a8f4:	0159      	lsls	r1, r3, #5
 800a8f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8fa:	0150      	lsls	r0, r2, #5
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4641      	mov	r1, r8
 800a902:	ebb2 0a01 	subs.w	sl, r2, r1
 800a906:	4649      	mov	r1, r9
 800a908:	eb63 0b01 	sbc.w	fp, r3, r1
 800a90c:	f04f 0200 	mov.w	r2, #0
 800a910:	f04f 0300 	mov.w	r3, #0
 800a914:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a918:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a91c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a920:	ebb2 040a 	subs.w	r4, r2, sl
 800a924:	eb63 050b 	sbc.w	r5, r3, fp
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	00eb      	lsls	r3, r5, #3
 800a932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a936:	00e2      	lsls	r2, r4, #3
 800a938:	4614      	mov	r4, r2
 800a93a:	461d      	mov	r5, r3
 800a93c:	4643      	mov	r3, r8
 800a93e:	18e3      	adds	r3, r4, r3
 800a940:	603b      	str	r3, [r7, #0]
 800a942:	464b      	mov	r3, r9
 800a944:	eb45 0303 	adc.w	r3, r5, r3
 800a948:	607b      	str	r3, [r7, #4]
 800a94a:	f04f 0200 	mov.w	r2, #0
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a956:	4629      	mov	r1, r5
 800a958:	028b      	lsls	r3, r1, #10
 800a95a:	4621      	mov	r1, r4
 800a95c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a960:	4621      	mov	r1, r4
 800a962:	028a      	lsls	r2, r1, #10
 800a964:	4610      	mov	r0, r2
 800a966:	4619      	mov	r1, r3
 800a968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a96a:	2200      	movs	r2, #0
 800a96c:	61bb      	str	r3, [r7, #24]
 800a96e:	61fa      	str	r2, [r7, #28]
 800a970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a974:	f7f6 f9a8 	bl	8000cc8 <__aeabi_uldivmod>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	4613      	mov	r3, r2
 800a97e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a980:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	0c1b      	lsrs	r3, r3, #16
 800a986:	f003 0303 	and.w	r3, r3, #3
 800a98a:	3301      	adds	r3, #1
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800a990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a994:	fbb2 f3f3 	udiv	r3, r2, r3
 800a998:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a99a:	e002      	b.n	800a9a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a99c:	4b05      	ldr	r3, [pc, #20]	@ (800a9b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800a99e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a9a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a9a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3750      	adds	r7, #80	@ 0x50
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9ae:	bf00      	nop
 800a9b0:	40023800 	.word	0x40023800
 800a9b4:	00f42400 	.word	0x00f42400
 800a9b8:	007a1200 	.word	0x007a1200

0800a9bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9c0:	4b03      	ldr	r3, [pc, #12]	@ (800a9d0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	2000000c 	.word	0x2000000c

0800a9d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a9d8:	f7ff fff0 	bl	800a9bc <HAL_RCC_GetHCLKFreq>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	4b05      	ldr	r3, [pc, #20]	@ (800a9f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	0a9b      	lsrs	r3, r3, #10
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	4903      	ldr	r1, [pc, #12]	@ (800a9f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9ea:	5ccb      	ldrb	r3, [r1, r3]
 800a9ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	40023800 	.word	0x40023800
 800a9f8:	08013718 	.word	0x08013718

0800a9fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aa00:	f7ff ffdc 	bl	800a9bc <HAL_RCC_GetHCLKFreq>
 800aa04:	4602      	mov	r2, r0
 800aa06:	4b05      	ldr	r3, [pc, #20]	@ (800aa1c <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	0b5b      	lsrs	r3, r3, #13
 800aa0c:	f003 0307 	and.w	r3, r3, #7
 800aa10:	4903      	ldr	r1, [pc, #12]	@ (800aa20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa12:	5ccb      	ldrb	r3, [r1, r3]
 800aa14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	40023800 	.word	0x40023800
 800aa20:	08013718 	.word	0x08013718

0800aa24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b088      	sub	sp, #32
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d012      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aa4c:	4b69      	ldr	r3, [pc, #420]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	4a68      	ldr	r2, [pc, #416]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa52:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aa56:	6093      	str	r3, [r2, #8]
 800aa58:	4b66      	ldr	r3, [pc, #408]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa5a:	689a      	ldr	r2, [r3, #8]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa60:	4964      	ldr	r1, [pc, #400]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d017      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa7e:	4b5d      	ldr	r3, [pc, #372]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa84:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa8c:	4959      	ldr	r1, [pc, #356]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa9c:	d101      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d017      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aaba:	4b4e      	ldr	r3, [pc, #312]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aac0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac8:	494a      	ldr	r1, [pc, #296]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaca:	4313      	orrs	r3, r2
 800aacc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aad8:	d101      	bne.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800aada:	2301      	movs	r3, #1
 800aadc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800aae6:	2301      	movs	r3, #1
 800aae8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0320 	and.w	r3, r3, #32
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f000 808b 	beq.w	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ab08:	4b3a      	ldr	r3, [pc, #232]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab0c:	4a39      	ldr	r2, [pc, #228]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab12:	6413      	str	r3, [r2, #64]	@ 0x40
 800ab14:	4b37      	ldr	r3, [pc, #220]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab1c:	60bb      	str	r3, [r7, #8]
 800ab1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab20:	4b35      	ldr	r3, [pc, #212]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a34      	ldr	r2, [pc, #208]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab2c:	f7fd fac8 	bl	80080c0 <HAL_GetTick>
 800ab30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ab32:	e008      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab34:	f7fd fac4 	bl	80080c0 <HAL_GetTick>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	2b64      	cmp	r3, #100	@ 0x64
 800ab40:	d901      	bls.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e357      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ab46:	4b2c      	ldr	r3, [pc, #176]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0f0      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab52:	4b28      	ldr	r3, [pc, #160]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d035      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d02e      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab70:	4b20      	ldr	r3, [pc, #128]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab7a:	4b1e      	ldr	r3, [pc, #120]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab7e:	4a1d      	ldr	r2, [pc, #116]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab84:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab86:	4b1b      	ldr	r3, [pc, #108]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab8a:	4a1a      	ldr	r2, [pc, #104]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab90:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ab92:	4a18      	ldr	r2, [pc, #96]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ab98:	4b16      	ldr	r3, [pc, #88]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d114      	bne.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba4:	f7fd fa8c 	bl	80080c0 <HAL_GetTick>
 800aba8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abaa:	e00a      	b.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800abac:	f7fd fa88 	bl	80080c0 <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abba:	4293      	cmp	r3, r2
 800abbc:	d901      	bls.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e319      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abc2:	4b0c      	ldr	r3, [pc, #48]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d0ee      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abda:	d111      	bne.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800abdc:	4b05      	ldr	r3, [pc, #20]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800abe8:	4b04      	ldr	r3, [pc, #16]	@ (800abfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800abea:	400b      	ands	r3, r1
 800abec:	4901      	ldr	r1, [pc, #4]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abee:	4313      	orrs	r3, r2
 800abf0:	608b      	str	r3, [r1, #8]
 800abf2:	e00b      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800abf4:	40023800 	.word	0x40023800
 800abf8:	40007000 	.word	0x40007000
 800abfc:	0ffffcff 	.word	0x0ffffcff
 800ac00:	4baa      	ldr	r3, [pc, #680]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	4aa9      	ldr	r2, [pc, #676]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac06:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800ac0a:	6093      	str	r3, [r2, #8]
 800ac0c:	4ba7      	ldr	r3, [pc, #668]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac18:	49a4      	ldr	r1, [pc, #656]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0310 	and.w	r3, r3, #16
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d010      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac2a:	4ba0      	ldr	r3, [pc, #640]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac30:	4a9e      	ldr	r2, [pc, #632]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ac3a:	4b9c      	ldr	r3, [pc, #624]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac44:	4999      	ldr	r1, [pc, #612]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00a      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac58:	4b94      	ldr	r3, [pc, #592]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac66:	4991      	ldr	r1, [pc, #580]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac7a:	4b8c      	ldr	r3, [pc, #560]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac88:	4988      	ldr	r1, [pc, #544]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00a      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac9c:	4b83      	ldr	r3, [pc, #524]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aca2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acaa:	4980      	ldr	r1, [pc, #512]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acac:	4313      	orrs	r3, r2
 800acae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00a      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800acbe:	4b7b      	ldr	r3, [pc, #492]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acc4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800accc:	4977      	ldr	r1, [pc, #476]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acce:	4313      	orrs	r3, r2
 800acd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00a      	beq.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ace0:	4b72      	ldr	r3, [pc, #456]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ace2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ace6:	f023 0203 	bic.w	r2, r3, #3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acee:	496f      	ldr	r1, [pc, #444]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acf0:	4313      	orrs	r3, r2
 800acf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00a      	beq.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ad02:	4b6a      	ldr	r3, [pc, #424]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad08:	f023 020c 	bic.w	r2, r3, #12
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad10:	4966      	ldr	r1, [pc, #408]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad12:	4313      	orrs	r3, r2
 800ad14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00a      	beq.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ad24:	4b61      	ldr	r3, [pc, #388]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad2a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad32:	495e      	ldr	r1, [pc, #376]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00a      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ad46:	4b59      	ldr	r3, [pc, #356]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad4c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad54:	4955      	ldr	r1, [pc, #340]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00a      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ad68:	4b50      	ldr	r3, [pc, #320]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad76:	494d      	ldr	r1, [pc, #308]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00a      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ad8a:	4b48      	ldr	r3, [pc, #288]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad98:	4944      	ldr	r1, [pc, #272]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00a      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800adac:	4b3f      	ldr	r3, [pc, #252]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adb2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adba:	493c      	ldr	r1, [pc, #240]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adbc:	4313      	orrs	r3, r2
 800adbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00a      	beq.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800adce:	4b37      	ldr	r3, [pc, #220]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800add0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800add4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800addc:	4933      	ldr	r1, [pc, #204]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00a      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800adf0:	4b2e      	ldr	r3, [pc, #184]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adf6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adfe:	492b      	ldr	r1, [pc, #172]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae00:	4313      	orrs	r3, r2
 800ae02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d011      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ae12:	4b26      	ldr	r3, [pc, #152]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae18:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae20:	4922      	ldr	r1, [pc, #136]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae22:	4313      	orrs	r3, r2
 800ae24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae30:	d101      	bne.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ae32:	2301      	movs	r3, #1
 800ae34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 0308 	and.w	r3, r3, #8
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ae42:	2301      	movs	r3, #1
 800ae44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00a      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae52:	4b16      	ldr	r3, [pc, #88]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae58:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae60:	4912      	ldr	r1, [pc, #72]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ae74:	4b0d      	ldr	r3, [pc, #52]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae84:	4909      	ldr	r1, [pc, #36]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d006      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 80d9 	beq.w	800b052 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aea0:	4b02      	ldr	r3, [pc, #8]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a01      	ldr	r2, [pc, #4]	@ (800aeac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aea6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aeaa:	e001      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800aeac:	40023800 	.word	0x40023800
 800aeb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeb2:	f7fd f905 	bl	80080c0 <HAL_GetTick>
 800aeb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aeb8:	e008      	b.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aeba:	f7fd f901 	bl	80080c0 <HAL_GetTick>
 800aebe:	4602      	mov	r2, r0
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	2b64      	cmp	r3, #100	@ 0x64
 800aec6:	d901      	bls.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aec8:	2303      	movs	r3, #3
 800aeca:	e194      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aecc:	4b6c      	ldr	r3, [pc, #432]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1f0      	bne.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0301 	and.w	r3, r3, #1
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d021      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d11d      	bne.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aeec:	4b64      	ldr	r3, [pc, #400]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aeee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aef2:	0c1b      	lsrs	r3, r3, #16
 800aef4:	f003 0303 	and.w	r3, r3, #3
 800aef8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aefa:	4b61      	ldr	r3, [pc, #388]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aefc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af00:	0e1b      	lsrs	r3, r3, #24
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	019a      	lsls	r2, r3, #6
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	041b      	lsls	r3, r3, #16
 800af12:	431a      	orrs	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	061b      	lsls	r3, r3, #24
 800af18:	431a      	orrs	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	071b      	lsls	r3, r3, #28
 800af20:	4957      	ldr	r1, [pc, #348]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af22:	4313      	orrs	r3, r2
 800af24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d004      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af3c:	d00a      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af46:	2b00      	cmp	r3, #0
 800af48:	d02e      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af52:	d129      	bne.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af54:	4b4a      	ldr	r3, [pc, #296]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af5a:	0c1b      	lsrs	r3, r3, #16
 800af5c:	f003 0303 	and.w	r3, r3, #3
 800af60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af62:	4b47      	ldr	r3, [pc, #284]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af68:	0f1b      	lsrs	r3, r3, #28
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	019a      	lsls	r2, r3, #6
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	041b      	lsls	r3, r3, #16
 800af7a:	431a      	orrs	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	061b      	lsls	r3, r3, #24
 800af82:	431a      	orrs	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	071b      	lsls	r3, r3, #28
 800af88:	493d      	ldr	r1, [pc, #244]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af8a:	4313      	orrs	r3, r2
 800af8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800af90:	4b3b      	ldr	r3, [pc, #236]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af96:	f023 021f 	bic.w	r2, r3, #31
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9e:	3b01      	subs	r3, #1
 800afa0:	4937      	ldr	r1, [pc, #220]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afa2:	4313      	orrs	r3, r2
 800afa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d01d      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800afb4:	4b32      	ldr	r3, [pc, #200]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afba:	0e1b      	lsrs	r3, r3, #24
 800afbc:	f003 030f 	and.w	r3, r3, #15
 800afc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800afc2:	4b2f      	ldr	r3, [pc, #188]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afc8:	0f1b      	lsrs	r3, r3, #28
 800afca:	f003 0307 	and.w	r3, r3, #7
 800afce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	019a      	lsls	r2, r3, #6
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	041b      	lsls	r3, r3, #16
 800afdc:	431a      	orrs	r2, r3
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	061b      	lsls	r3, r3, #24
 800afe2:	431a      	orrs	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	071b      	lsls	r3, r3, #28
 800afe8:	4925      	ldr	r1, [pc, #148]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afea:	4313      	orrs	r3, r2
 800afec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d011      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	019a      	lsls	r2, r3, #6
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	041b      	lsls	r3, r3, #16
 800b008:	431a      	orrs	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	061b      	lsls	r3, r3, #24
 800b010:	431a      	orrs	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	071b      	lsls	r3, r3, #28
 800b018:	4919      	ldr	r1, [pc, #100]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b020:	4b17      	ldr	r3, [pc, #92]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a16      	ldr	r2, [pc, #88]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b026:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b02a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b02c:	f7fd f848 	bl	80080c0 <HAL_GetTick>
 800b030:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b032:	e008      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b034:	f7fd f844 	bl	80080c0 <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b64      	cmp	r3, #100	@ 0x64
 800b040:	d901      	bls.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e0d7      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b046:	4b0e      	ldr	r3, [pc, #56]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0f0      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	2b01      	cmp	r3, #1
 800b056:	f040 80cd 	bne.w	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b05a:	4b09      	ldr	r3, [pc, #36]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a08      	ldr	r2, [pc, #32]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b060:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b066:	f7fd f82b 	bl	80080c0 <HAL_GetTick>
 800b06a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b06c:	e00a      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b06e:	f7fd f827 	bl	80080c0 <HAL_GetTick>
 800b072:	4602      	mov	r2, r0
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	2b64      	cmp	r3, #100	@ 0x64
 800b07a:	d903      	bls.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b07c:	2303      	movs	r3, #3
 800b07e:	e0ba      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b080:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b084:	4b5e      	ldr	r3, [pc, #376]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b08c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b090:	d0ed      	beq.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d003      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d02e      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d12a      	bne.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b0ba:	4b51      	ldr	r3, [pc, #324]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0c0:	0c1b      	lsrs	r3, r3, #16
 800b0c2:	f003 0303 	and.w	r3, r3, #3
 800b0c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b0c8:	4b4d      	ldr	r3, [pc, #308]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0ce:	0f1b      	lsrs	r3, r3, #28
 800b0d0:	f003 0307 	and.w	r3, r3, #7
 800b0d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	019a      	lsls	r2, r3, #6
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	041b      	lsls	r3, r3, #16
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	061b      	lsls	r3, r3, #24
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	071b      	lsls	r3, r3, #28
 800b0ee:	4944      	ldr	r1, [pc, #272]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b0f6:	4b42      	ldr	r3, [pc, #264]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b104:	3b01      	subs	r3, #1
 800b106:	021b      	lsls	r3, r3, #8
 800b108:	493d      	ldr	r1, [pc, #244]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d022      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b124:	d11d      	bne.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b126:	4b36      	ldr	r3, [pc, #216]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b12c:	0e1b      	lsrs	r3, r3, #24
 800b12e:	f003 030f 	and.w	r3, r3, #15
 800b132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b134:	4b32      	ldr	r3, [pc, #200]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b13a:	0f1b      	lsrs	r3, r3, #28
 800b13c:	f003 0307 	and.w	r3, r3, #7
 800b140:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	019a      	lsls	r2, r3, #6
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a1b      	ldr	r3, [r3, #32]
 800b14c:	041b      	lsls	r3, r3, #16
 800b14e:	431a      	orrs	r2, r3
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	061b      	lsls	r3, r3, #24
 800b154:	431a      	orrs	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	071b      	lsls	r3, r3, #28
 800b15a:	4929      	ldr	r1, [pc, #164]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b15c:	4313      	orrs	r3, r2
 800b15e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 0308 	and.w	r3, r3, #8
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d028      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b16e:	4b24      	ldr	r3, [pc, #144]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b174:	0e1b      	lsrs	r3, r3, #24
 800b176:	f003 030f 	and.w	r3, r3, #15
 800b17a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b17c:	4b20      	ldr	r3, [pc, #128]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b182:	0c1b      	lsrs	r3, r3, #16
 800b184:	f003 0303 	and.w	r3, r3, #3
 800b188:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	019a      	lsls	r2, r3, #6
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	041b      	lsls	r3, r3, #16
 800b194:	431a      	orrs	r2, r3
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	061b      	lsls	r3, r3, #24
 800b19a:	431a      	orrs	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	69db      	ldr	r3, [r3, #28]
 800b1a0:	071b      	lsls	r3, r3, #28
 800b1a2:	4917      	ldr	r1, [pc, #92]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b1aa:	4b15      	ldr	r3, [pc, #84]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b8:	4911      	ldr	r1, [pc, #68]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b1c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a0e      	ldr	r2, [pc, #56]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1cc:	f7fc ff78 	bl	80080c0 <HAL_GetTick>
 800b1d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1d2:	e008      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b1d4:	f7fc ff74 	bl	80080c0 <HAL_GetTick>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	2b64      	cmp	r3, #100	@ 0x64
 800b1e0:	d901      	bls.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e007      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1e6:	4b06      	ldr	r3, [pc, #24]	@ (800b200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1f2:	d1ef      	bne.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3720      	adds	r7, #32
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	40023800 	.word	0x40023800

0800b204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e09d      	b.n	800b352 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d108      	bne.n	800b230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b226:	d009      	beq.n	800b23c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	61da      	str	r2, [r3, #28]
 800b22e:	e005      	b.n	800b23c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7fc fc74 	bl	8007b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b272:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b27c:	d902      	bls.n	800b284 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b27e:	2300      	movs	r3, #0
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	e002      	b.n	800b28a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b288:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800b292:	d007      	beq.n	800b2a4 <HAL_SPI_Init+0xa0>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b29c:	d002      	beq.n	800b2a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	f003 0302 	and.w	r3, r3, #2
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	695b      	ldr	r3, [r3, #20]
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	431a      	orrs	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2e6:	ea42 0103 	orr.w	r1, r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	0c1b      	lsrs	r3, r3, #16
 800b300:	f003 0204 	and.w	r2, r3, #4
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b308:	f003 0310 	and.w	r3, r3, #16
 800b30c:	431a      	orrs	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b312:	f003 0308 	and.w	r3, r3, #8
 800b316:	431a      	orrs	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b320:	ea42 0103 	orr.w	r1, r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	430a      	orrs	r2, r1
 800b330:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69da      	ldr	r2, [r3, #28]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b340:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b08a      	sub	sp, #40	@ 0x28
 800b35e:	af00      	add	r7, sp, #0
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607a      	str	r2, [r7, #4]
 800b366:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b368:	2301      	movs	r3, #1
 800b36a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b36c:	f7fc fea8 	bl	80080c0 <HAL_GetTick>
 800b370:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b378:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b380:	887b      	ldrh	r3, [r7, #2]
 800b382:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800b384:	887b      	ldrh	r3, [r7, #2]
 800b386:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b388:	7ffb      	ldrb	r3, [r7, #31]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d00c      	beq.n	800b3a8 <HAL_SPI_TransmitReceive+0x4e>
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b394:	d106      	bne.n	800b3a4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d102      	bne.n	800b3a4 <HAL_SPI_TransmitReceive+0x4a>
 800b39e:	7ffb      	ldrb	r3, [r7, #31]
 800b3a0:	2b04      	cmp	r3, #4
 800b3a2:	d001      	beq.n	800b3a8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	e1f3      	b.n	800b790 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d005      	beq.n	800b3ba <HAL_SPI_TransmitReceive+0x60>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d002      	beq.n	800b3ba <HAL_SPI_TransmitReceive+0x60>
 800b3b4:	887b      	ldrh	r3, [r7, #2]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d101      	bne.n	800b3be <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e1e8      	b.n	800b790 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d101      	bne.n	800b3cc <HAL_SPI_TransmitReceive+0x72>
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	e1e1      	b.n	800b790 <HAL_SPI_TransmitReceive+0x436>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d003      	beq.n	800b3e8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2205      	movs	r2, #5
 800b3e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	887a      	ldrh	r2, [r7, #2]
 800b3f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	887a      	ldrh	r2, [r7, #2]
 800b400:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	887a      	ldrh	r2, [r7, #2]
 800b40e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	887a      	ldrh	r2, [r7, #2]
 800b414:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b42a:	d802      	bhi.n	800b432 <HAL_SPI_TransmitReceive+0xd8>
 800b42c:	8abb      	ldrh	r3, [r7, #20]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d908      	bls.n	800b444 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b440:	605a      	str	r2, [r3, #4]
 800b442:	e007      	b.n	800b454 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	685a      	ldr	r2, [r3, #4]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b452:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b45e:	2b40      	cmp	r3, #64	@ 0x40
 800b460:	d007      	beq.n	800b472 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b47a:	f240 8083 	bls.w	800b584 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d002      	beq.n	800b48c <HAL_SPI_TransmitReceive+0x132>
 800b486:	8afb      	ldrh	r3, [r7, #22]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d16f      	bne.n	800b56c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b490:	881a      	ldrh	r2, [r3, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b49c:	1c9a      	adds	r2, r3, #2
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4b0:	e05c      	b.n	800b56c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d11b      	bne.n	800b4f8 <HAL_SPI_TransmitReceive+0x19e>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d016      	beq.n	800b4f8 <HAL_SPI_TransmitReceive+0x19e>
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d113      	bne.n	800b4f8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d4:	881a      	ldrh	r2, [r3, #0]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e0:	1c9a      	adds	r2, r3, #2
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	f003 0301 	and.w	r3, r3, #1
 800b502:	2b01      	cmp	r3, #1
 800b504:	d11c      	bne.n	800b540 <HAL_SPI_TransmitReceive+0x1e6>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d016      	beq.n	800b540 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68da      	ldr	r2, [r3, #12]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b51c:	b292      	uxth	r2, r2
 800b51e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b524:	1c9a      	adds	r2, r3, #2
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b530:	b29b      	uxth	r3, r3
 800b532:	3b01      	subs	r3, #1
 800b534:	b29a      	uxth	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b53c:	2301      	movs	r3, #1
 800b53e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b540:	f7fc fdbe 	bl	80080c0 <HAL_GetTick>
 800b544:	4602      	mov	r2, r0
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	1ad3      	subs	r3, r2, r3
 800b54a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d80d      	bhi.n	800b56c <HAL_SPI_TransmitReceive+0x212>
 800b550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b556:	d009      	beq.n	800b56c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	e111      	b.n	800b790 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b570:	b29b      	uxth	r3, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	d19d      	bne.n	800b4b2 <HAL_SPI_TransmitReceive+0x158>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d197      	bne.n	800b4b2 <HAL_SPI_TransmitReceive+0x158>
 800b582:	e0e5      	b.n	800b750 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d003      	beq.n	800b594 <HAL_SPI_TransmitReceive+0x23a>
 800b58c:	8afb      	ldrh	r3, [r7, #22]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	f040 80d1 	bne.w	800b736 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b598:	b29b      	uxth	r3, r3
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d912      	bls.n	800b5c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5a2:	881a      	ldrh	r2, [r3, #0]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ae:	1c9a      	adds	r2, r3, #2
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	3b02      	subs	r3, #2
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b5c2:	e0b8      	b.n	800b736 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	330c      	adds	r3, #12
 800b5ce:	7812      	ldrb	r2, [r2, #0]
 800b5d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5ea:	e0a4      	b.n	800b736 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d134      	bne.n	800b664 <HAL_SPI_TransmitReceive+0x30a>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	2b00      	cmp	r3, #0
 800b602:	d02f      	beq.n	800b664 <HAL_SPI_TransmitReceive+0x30a>
 800b604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b606:	2b01      	cmp	r3, #1
 800b608:	d12c      	bne.n	800b664 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b60e:	b29b      	uxth	r3, r3
 800b610:	2b01      	cmp	r3, #1
 800b612:	d912      	bls.n	800b63a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b618:	881a      	ldrh	r2, [r3, #0]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b624:	1c9a      	adds	r2, r3, #2
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b62e:	b29b      	uxth	r3, r3
 800b630:	3b02      	subs	r3, #2
 800b632:	b29a      	uxth	r2, r3
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b638:	e012      	b.n	800b660 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	330c      	adds	r3, #12
 800b644:	7812      	ldrb	r2, [r2, #0]
 800b646:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b64c:	1c5a      	adds	r2, r3, #1
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b656:	b29b      	uxth	r3, r3
 800b658:	3b01      	subs	r3, #1
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d148      	bne.n	800b704 <HAL_SPI_TransmitReceive+0x3aa>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b678:	b29b      	uxth	r3, r3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d042      	beq.n	800b704 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b684:	b29b      	uxth	r3, r3
 800b686:	2b01      	cmp	r3, #1
 800b688:	d923      	bls.n	800b6d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68da      	ldr	r2, [r3, #12]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b694:	b292      	uxth	r2, r2
 800b696:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b69c:	1c9a      	adds	r2, r3, #2
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	3b02      	subs	r3, #2
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d81f      	bhi.n	800b700 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b6ce:	605a      	str	r2, [r3, #4]
 800b6d0:	e016      	b.n	800b700 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f103 020c 	add.w	r2, r3, #12
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6de:	7812      	ldrb	r2, [r2, #0]
 800b6e0:	b2d2      	uxtb	r2, r2
 800b6e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b700:	2301      	movs	r3, #1
 800b702:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b704:	f7fc fcdc 	bl	80080c0 <HAL_GetTick>
 800b708:	4602      	mov	r2, r0
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b710:	429a      	cmp	r2, r3
 800b712:	d803      	bhi.n	800b71c <HAL_SPI_TransmitReceive+0x3c2>
 800b714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b71a:	d102      	bne.n	800b722 <HAL_SPI_TransmitReceive+0x3c8>
 800b71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d109      	bne.n	800b736 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e02c      	b.n	800b790 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f47f af55 	bne.w	800b5ec <HAL_SPI_TransmitReceive+0x292>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b748:	b29b      	uxth	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f47f af4e 	bne.w	800b5ec <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b750:	6a3a      	ldr	r2, [r7, #32]
 800b752:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f000 f93d 	bl	800b9d4 <SPI_EndRxTxTransaction>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d008      	beq.n	800b772 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2220      	movs	r2, #32
 800b764:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e00e      	b.n	800b790 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b786:	2b00      	cmp	r3, #0
 800b788:	d001      	beq.n	800b78e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e000      	b.n	800b790 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800b78e:	2300      	movs	r3, #0
  }
}
 800b790:	4618      	mov	r0, r3
 800b792:	3728      	adds	r7, #40	@ 0x28
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b088      	sub	sp, #32
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b7a8:	f7fc fc8a 	bl	80080c0 <HAL_GetTick>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b0:	1a9b      	subs	r3, r3, r2
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b7b8:	f7fc fc82 	bl	80080c0 <HAL_GetTick>
 800b7bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b7be:	4b39      	ldr	r3, [pc, #228]	@ (800b8a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	015b      	lsls	r3, r3, #5
 800b7c4:	0d1b      	lsrs	r3, r3, #20
 800b7c6:	69fa      	ldr	r2, [r7, #28]
 800b7c8:	fb02 f303 	mul.w	r3, r2, r3
 800b7cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b7ce:	e055      	b.n	800b87c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d6:	d051      	beq.n	800b87c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b7d8:	f7fc fc72 	bl	80080c0 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	69fa      	ldr	r2, [r7, #28]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d902      	bls.n	800b7ee <SPI_WaitFlagStateUntilTimeout+0x56>
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d13d      	bne.n	800b86a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b7fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b806:	d111      	bne.n	800b82c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b810:	d004      	beq.n	800b81c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b81a:	d107      	bne.n	800b82c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b82a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b834:	d10f      	bne.n	800b856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b866:	2303      	movs	r3, #3
 800b868:	e018      	b.n	800b89c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d102      	bne.n	800b876 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b870:	2300      	movs	r3, #0
 800b872:	61fb      	str	r3, [r7, #28]
 800b874:	e002      	b.n	800b87c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	3b01      	subs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	689a      	ldr	r2, [r3, #8]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	4013      	ands	r3, r2
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	429a      	cmp	r2, r3
 800b88a:	bf0c      	ite	eq
 800b88c:	2301      	moveq	r3, #1
 800b88e:	2300      	movne	r3, #0
 800b890:	b2db      	uxtb	r3, r3
 800b892:	461a      	mov	r2, r3
 800b894:	79fb      	ldrb	r3, [r7, #7]
 800b896:	429a      	cmp	r2, r3
 800b898:	d19a      	bne.n	800b7d0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3720      	adds	r7, #32
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	2000000c 	.word	0x2000000c

0800b8a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08a      	sub	sp, #40	@ 0x28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b8ba:	f7fc fc01 	bl	80080c0 <HAL_GetTick>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c2:	1a9b      	subs	r3, r3, r2
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b8ca:	f7fc fbf9 	bl	80080c0 <HAL_GetTick>
 800b8ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	330c      	adds	r3, #12
 800b8d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b8d8:	4b3d      	ldr	r3, [pc, #244]	@ (800b9d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	4613      	mov	r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4413      	add	r3, r2
 800b8e2:	00da      	lsls	r2, r3, #3
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	0d1b      	lsrs	r3, r3, #20
 800b8e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8ea:	fb02 f303 	mul.w	r3, r2, r3
 800b8ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b8f0:	e061      	b.n	800b9b6 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b8f8:	d107      	bne.n	800b90a <SPI_WaitFifoStateUntilTimeout+0x62>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d104      	bne.n	800b90a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	b2db      	uxtb	r3, r3
 800b906:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b908:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b910:	d051      	beq.n	800b9b6 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b912:	f7fc fbd5 	bl	80080c0 <HAL_GetTick>
 800b916:	4602      	mov	r2, r0
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b91e:	429a      	cmp	r2, r3
 800b920:	d902      	bls.n	800b928 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	d13d      	bne.n	800b9a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b936:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b940:	d111      	bne.n	800b966 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b94a:	d004      	beq.n	800b956 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b954:	d107      	bne.n	800b966 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b964:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b96a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b96e:	d10f      	bne.n	800b990 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b97e:	601a      	str	r2, [r3, #0]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b98e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e011      	b.n	800b9c8 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d102      	bne.n	800b9b0 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9ae:	e002      	b.n	800b9b6 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689a      	ldr	r2, [r3, #8]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d195      	bne.n	800b8f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3728      	adds	r7, #40	@ 0x28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	2000000c 	.word	0x2000000c

0800b9d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af02      	add	r7, sp, #8
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f7ff ff5b 	bl	800b8a8 <SPI_WaitFifoStateUntilTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d007      	beq.n	800ba08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9fc:	f043 0220 	orr.w	r2, r3, #32
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e046      	b.n	800ba96 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ba08:	4b25      	ldr	r3, [pc, #148]	@ (800baa0 <SPI_EndRxTxTransaction+0xcc>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a25      	ldr	r2, [pc, #148]	@ (800baa4 <SPI_EndRxTxTransaction+0xd0>)
 800ba0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba12:	0d5b      	lsrs	r3, r3, #21
 800ba14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ba18:	fb02 f303 	mul.w	r3, r2, r3
 800ba1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ba26:	d112      	bne.n	800ba4e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2180      	movs	r1, #128	@ 0x80
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff feb0 	bl	800b798 <SPI_WaitFlagStateUntilTimeout>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d016      	beq.n	800ba6c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba42:	f043 0220 	orr.w	r2, r3, #32
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e023      	b.n	800ba96 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00a      	beq.n	800ba6a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba64:	2b80      	cmp	r3, #128	@ 0x80
 800ba66:	d0f2      	beq.n	800ba4e <SPI_EndRxTxTransaction+0x7a>
 800ba68:	e000      	b.n	800ba6c <SPI_EndRxTxTransaction+0x98>
        break;
 800ba6a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f7ff ff15 	bl	800b8a8 <SPI_WaitFifoStateUntilTimeout>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d007      	beq.n	800ba94 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba88:	f043 0220 	orr.w	r2, r3, #32
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e000      	b.n	800ba96 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	2000000c 	.word	0x2000000c
 800baa4:	165e9f81 	.word	0x165e9f81

0800baa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e040      	b.n	800bb3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7fc f89c 	bl	8007c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2224      	movs	r2, #36	@ 0x24
 800bad4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f022 0201 	bic.w	r2, r2, #1
 800bae4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fb16 	bl	800c120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f8af 	bl	800bc58 <UART_SetConfig>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d101      	bne.n	800bb04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e01b      	b.n	800bb3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689a      	ldr	r2, [r3, #8]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bb22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f042 0201 	orr.w	r2, r2, #1
 800bb32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 fb95 	bl	800c264 <UART_CheckIdleState>
 800bb3a:	4603      	mov	r3, r0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08a      	sub	sp, #40	@ 0x28
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	4613      	mov	r3, r2
 800bb52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb58:	2b20      	cmp	r3, #32
 800bb5a:	d177      	bne.n	800bc4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d002      	beq.n	800bb68 <HAL_UART_Transmit+0x24>
 800bb62:	88fb      	ldrh	r3, [r7, #6]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e070      	b.n	800bc4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2221      	movs	r2, #33	@ 0x21
 800bb78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb7a:	f7fc faa1 	bl	80080c0 <HAL_GetTick>
 800bb7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	88fa      	ldrh	r2, [r7, #6]
 800bb84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	88fa      	ldrh	r2, [r7, #6]
 800bb8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb98:	d108      	bne.n	800bbac <HAL_UART_Transmit+0x68>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d104      	bne.n	800bbac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	61bb      	str	r3, [r7, #24]
 800bbaa:	e003      	b.n	800bbb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bbb4:	e02f      	b.n	800bc16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2180      	movs	r1, #128	@ 0x80
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f000 fba6 	bl	800c312 <UART_WaitOnFlagUntilTimeout>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d004      	beq.n	800bbd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2220      	movs	r2, #32
 800bbd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	e03b      	b.n	800bc4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10b      	bne.n	800bbf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	881b      	ldrh	r3, [r3, #0]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	3302      	adds	r3, #2
 800bbf0:	61bb      	str	r3, [r7, #24]
 800bbf2:	e007      	b.n	800bc04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	781a      	ldrb	r2, [r3, #0]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	3301      	adds	r3, #1
 800bc02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1c9      	bne.n	800bbb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2140      	movs	r1, #64	@ 0x40
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f000 fb70 	bl	800c312 <UART_WaitOnFlagUntilTimeout>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2220      	movs	r2, #32
 800bc3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e005      	b.n	800bc4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2220      	movs	r2, #32
 800bc46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	e000      	b.n	800bc4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800bc4c:	2302      	movs	r3, #2
  }
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3720      	adds	r7, #32
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	689a      	ldr	r2, [r3, #8]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	431a      	orrs	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	4ba6      	ldr	r3, [pc, #664]	@ (800bf1c <UART_SetConfig+0x2c4>)
 800bc84:	4013      	ands	r3, r2
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	6812      	ldr	r2, [r2, #0]
 800bc8a:	6979      	ldr	r1, [r7, #20]
 800bc8c:	430b      	orrs	r3, r1
 800bc8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	68da      	ldr	r2, [r3, #12]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	430a      	orrs	r2, r1
 800bca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a1b      	ldr	r3, [r3, #32]
 800bcb0:	697a      	ldr	r2, [r7, #20]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a94      	ldr	r2, [pc, #592]	@ (800bf20 <UART_SetConfig+0x2c8>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d120      	bne.n	800bd16 <UART_SetConfig+0xbe>
 800bcd4:	4b93      	ldr	r3, [pc, #588]	@ (800bf24 <UART_SetConfig+0x2cc>)
 800bcd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcda:	f003 0303 	and.w	r3, r3, #3
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	d816      	bhi.n	800bd10 <UART_SetConfig+0xb8>
 800bce2:	a201      	add	r2, pc, #4	@ (adr r2, 800bce8 <UART_SetConfig+0x90>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bcf9 	.word	0x0800bcf9
 800bcec:	0800bd05 	.word	0x0800bd05
 800bcf0:	0800bcff 	.word	0x0800bcff
 800bcf4:	0800bd0b 	.word	0x0800bd0b
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	77fb      	strb	r3, [r7, #31]
 800bcfc:	e150      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bcfe:	2302      	movs	r3, #2
 800bd00:	77fb      	strb	r3, [r7, #31]
 800bd02:	e14d      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bd04:	2304      	movs	r3, #4
 800bd06:	77fb      	strb	r3, [r7, #31]
 800bd08:	e14a      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bd0a:	2308      	movs	r3, #8
 800bd0c:	77fb      	strb	r3, [r7, #31]
 800bd0e:	e147      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bd10:	2310      	movs	r3, #16
 800bd12:	77fb      	strb	r3, [r7, #31]
 800bd14:	e144      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a83      	ldr	r2, [pc, #524]	@ (800bf28 <UART_SetConfig+0x2d0>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d132      	bne.n	800bd86 <UART_SetConfig+0x12e>
 800bd20:	4b80      	ldr	r3, [pc, #512]	@ (800bf24 <UART_SetConfig+0x2cc>)
 800bd22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd26:	f003 030c 	and.w	r3, r3, #12
 800bd2a:	2b0c      	cmp	r3, #12
 800bd2c:	d828      	bhi.n	800bd80 <UART_SetConfig+0x128>
 800bd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd34 <UART_SetConfig+0xdc>)
 800bd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd34:	0800bd69 	.word	0x0800bd69
 800bd38:	0800bd81 	.word	0x0800bd81
 800bd3c:	0800bd81 	.word	0x0800bd81
 800bd40:	0800bd81 	.word	0x0800bd81
 800bd44:	0800bd75 	.word	0x0800bd75
 800bd48:	0800bd81 	.word	0x0800bd81
 800bd4c:	0800bd81 	.word	0x0800bd81
 800bd50:	0800bd81 	.word	0x0800bd81
 800bd54:	0800bd6f 	.word	0x0800bd6f
 800bd58:	0800bd81 	.word	0x0800bd81
 800bd5c:	0800bd81 	.word	0x0800bd81
 800bd60:	0800bd81 	.word	0x0800bd81
 800bd64:	0800bd7b 	.word	0x0800bd7b
 800bd68:	2300      	movs	r3, #0
 800bd6a:	77fb      	strb	r3, [r7, #31]
 800bd6c:	e118      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bd6e:	2302      	movs	r3, #2
 800bd70:	77fb      	strb	r3, [r7, #31]
 800bd72:	e115      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bd74:	2304      	movs	r3, #4
 800bd76:	77fb      	strb	r3, [r7, #31]
 800bd78:	e112      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bd7a:	2308      	movs	r3, #8
 800bd7c:	77fb      	strb	r3, [r7, #31]
 800bd7e:	e10f      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bd80:	2310      	movs	r3, #16
 800bd82:	77fb      	strb	r3, [r7, #31]
 800bd84:	e10c      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a68      	ldr	r2, [pc, #416]	@ (800bf2c <UART_SetConfig+0x2d4>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d120      	bne.n	800bdd2 <UART_SetConfig+0x17a>
 800bd90:	4b64      	ldr	r3, [pc, #400]	@ (800bf24 <UART_SetConfig+0x2cc>)
 800bd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd96:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bd9a:	2b30      	cmp	r3, #48	@ 0x30
 800bd9c:	d013      	beq.n	800bdc6 <UART_SetConfig+0x16e>
 800bd9e:	2b30      	cmp	r3, #48	@ 0x30
 800bda0:	d814      	bhi.n	800bdcc <UART_SetConfig+0x174>
 800bda2:	2b20      	cmp	r3, #32
 800bda4:	d009      	beq.n	800bdba <UART_SetConfig+0x162>
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	d810      	bhi.n	800bdcc <UART_SetConfig+0x174>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d002      	beq.n	800bdb4 <UART_SetConfig+0x15c>
 800bdae:	2b10      	cmp	r3, #16
 800bdb0:	d006      	beq.n	800bdc0 <UART_SetConfig+0x168>
 800bdb2:	e00b      	b.n	800bdcc <UART_SetConfig+0x174>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	77fb      	strb	r3, [r7, #31]
 800bdb8:	e0f2      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bdba:	2302      	movs	r3, #2
 800bdbc:	77fb      	strb	r3, [r7, #31]
 800bdbe:	e0ef      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bdc0:	2304      	movs	r3, #4
 800bdc2:	77fb      	strb	r3, [r7, #31]
 800bdc4:	e0ec      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bdc6:	2308      	movs	r3, #8
 800bdc8:	77fb      	strb	r3, [r7, #31]
 800bdca:	e0e9      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bdcc:	2310      	movs	r3, #16
 800bdce:	77fb      	strb	r3, [r7, #31]
 800bdd0:	e0e6      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a56      	ldr	r2, [pc, #344]	@ (800bf30 <UART_SetConfig+0x2d8>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d120      	bne.n	800be1e <UART_SetConfig+0x1c6>
 800bddc:	4b51      	ldr	r3, [pc, #324]	@ (800bf24 <UART_SetConfig+0x2cc>)
 800bdde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bde2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bde6:	2bc0      	cmp	r3, #192	@ 0xc0
 800bde8:	d013      	beq.n	800be12 <UART_SetConfig+0x1ba>
 800bdea:	2bc0      	cmp	r3, #192	@ 0xc0
 800bdec:	d814      	bhi.n	800be18 <UART_SetConfig+0x1c0>
 800bdee:	2b80      	cmp	r3, #128	@ 0x80
 800bdf0:	d009      	beq.n	800be06 <UART_SetConfig+0x1ae>
 800bdf2:	2b80      	cmp	r3, #128	@ 0x80
 800bdf4:	d810      	bhi.n	800be18 <UART_SetConfig+0x1c0>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d002      	beq.n	800be00 <UART_SetConfig+0x1a8>
 800bdfa:	2b40      	cmp	r3, #64	@ 0x40
 800bdfc:	d006      	beq.n	800be0c <UART_SetConfig+0x1b4>
 800bdfe:	e00b      	b.n	800be18 <UART_SetConfig+0x1c0>
 800be00:	2300      	movs	r3, #0
 800be02:	77fb      	strb	r3, [r7, #31]
 800be04:	e0cc      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be06:	2302      	movs	r3, #2
 800be08:	77fb      	strb	r3, [r7, #31]
 800be0a:	e0c9      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be0c:	2304      	movs	r3, #4
 800be0e:	77fb      	strb	r3, [r7, #31]
 800be10:	e0c6      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be12:	2308      	movs	r3, #8
 800be14:	77fb      	strb	r3, [r7, #31]
 800be16:	e0c3      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be18:	2310      	movs	r3, #16
 800be1a:	77fb      	strb	r3, [r7, #31]
 800be1c:	e0c0      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a44      	ldr	r2, [pc, #272]	@ (800bf34 <UART_SetConfig+0x2dc>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d125      	bne.n	800be74 <UART_SetConfig+0x21c>
 800be28:	4b3e      	ldr	r3, [pc, #248]	@ (800bf24 <UART_SetConfig+0x2cc>)
 800be2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be36:	d017      	beq.n	800be68 <UART_SetConfig+0x210>
 800be38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be3c:	d817      	bhi.n	800be6e <UART_SetConfig+0x216>
 800be3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be42:	d00b      	beq.n	800be5c <UART_SetConfig+0x204>
 800be44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be48:	d811      	bhi.n	800be6e <UART_SetConfig+0x216>
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d003      	beq.n	800be56 <UART_SetConfig+0x1fe>
 800be4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be52:	d006      	beq.n	800be62 <UART_SetConfig+0x20a>
 800be54:	e00b      	b.n	800be6e <UART_SetConfig+0x216>
 800be56:	2300      	movs	r3, #0
 800be58:	77fb      	strb	r3, [r7, #31]
 800be5a:	e0a1      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be5c:	2302      	movs	r3, #2
 800be5e:	77fb      	strb	r3, [r7, #31]
 800be60:	e09e      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be62:	2304      	movs	r3, #4
 800be64:	77fb      	strb	r3, [r7, #31]
 800be66:	e09b      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be68:	2308      	movs	r3, #8
 800be6a:	77fb      	strb	r3, [r7, #31]
 800be6c:	e098      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be6e:	2310      	movs	r3, #16
 800be70:	77fb      	strb	r3, [r7, #31]
 800be72:	e095      	b.n	800bfa0 <UART_SetConfig+0x348>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a2f      	ldr	r2, [pc, #188]	@ (800bf38 <UART_SetConfig+0x2e0>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d125      	bne.n	800beca <UART_SetConfig+0x272>
 800be7e:	4b29      	ldr	r3, [pc, #164]	@ (800bf24 <UART_SetConfig+0x2cc>)
 800be80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800be88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800be8c:	d017      	beq.n	800bebe <UART_SetConfig+0x266>
 800be8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800be92:	d817      	bhi.n	800bec4 <UART_SetConfig+0x26c>
 800be94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be98:	d00b      	beq.n	800beb2 <UART_SetConfig+0x25a>
 800be9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be9e:	d811      	bhi.n	800bec4 <UART_SetConfig+0x26c>
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d003      	beq.n	800beac <UART_SetConfig+0x254>
 800bea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bea8:	d006      	beq.n	800beb8 <UART_SetConfig+0x260>
 800beaa:	e00b      	b.n	800bec4 <UART_SetConfig+0x26c>
 800beac:	2301      	movs	r3, #1
 800beae:	77fb      	strb	r3, [r7, #31]
 800beb0:	e076      	b.n	800bfa0 <UART_SetConfig+0x348>
 800beb2:	2302      	movs	r3, #2
 800beb4:	77fb      	strb	r3, [r7, #31]
 800beb6:	e073      	b.n	800bfa0 <UART_SetConfig+0x348>
 800beb8:	2304      	movs	r3, #4
 800beba:	77fb      	strb	r3, [r7, #31]
 800bebc:	e070      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bebe:	2308      	movs	r3, #8
 800bec0:	77fb      	strb	r3, [r7, #31]
 800bec2:	e06d      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bec4:	2310      	movs	r3, #16
 800bec6:	77fb      	strb	r3, [r7, #31]
 800bec8:	e06a      	b.n	800bfa0 <UART_SetConfig+0x348>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a1b      	ldr	r2, [pc, #108]	@ (800bf3c <UART_SetConfig+0x2e4>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d138      	bne.n	800bf46 <UART_SetConfig+0x2ee>
 800bed4:	4b13      	ldr	r3, [pc, #76]	@ (800bf24 <UART_SetConfig+0x2cc>)
 800bed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beda:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bede:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bee2:	d017      	beq.n	800bf14 <UART_SetConfig+0x2bc>
 800bee4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bee8:	d82a      	bhi.n	800bf40 <UART_SetConfig+0x2e8>
 800beea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beee:	d00b      	beq.n	800bf08 <UART_SetConfig+0x2b0>
 800bef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bef4:	d824      	bhi.n	800bf40 <UART_SetConfig+0x2e8>
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d003      	beq.n	800bf02 <UART_SetConfig+0x2aa>
 800befa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800befe:	d006      	beq.n	800bf0e <UART_SetConfig+0x2b6>
 800bf00:	e01e      	b.n	800bf40 <UART_SetConfig+0x2e8>
 800bf02:	2300      	movs	r3, #0
 800bf04:	77fb      	strb	r3, [r7, #31]
 800bf06:	e04b      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf08:	2302      	movs	r3, #2
 800bf0a:	77fb      	strb	r3, [r7, #31]
 800bf0c:	e048      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf0e:	2304      	movs	r3, #4
 800bf10:	77fb      	strb	r3, [r7, #31]
 800bf12:	e045      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf14:	2308      	movs	r3, #8
 800bf16:	77fb      	strb	r3, [r7, #31]
 800bf18:	e042      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf1a:	bf00      	nop
 800bf1c:	efff69f3 	.word	0xefff69f3
 800bf20:	40011000 	.word	0x40011000
 800bf24:	40023800 	.word	0x40023800
 800bf28:	40004400 	.word	0x40004400
 800bf2c:	40004800 	.word	0x40004800
 800bf30:	40004c00 	.word	0x40004c00
 800bf34:	40005000 	.word	0x40005000
 800bf38:	40011400 	.word	0x40011400
 800bf3c:	40007800 	.word	0x40007800
 800bf40:	2310      	movs	r3, #16
 800bf42:	77fb      	strb	r3, [r7, #31]
 800bf44:	e02c      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a72      	ldr	r2, [pc, #456]	@ (800c114 <UART_SetConfig+0x4bc>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d125      	bne.n	800bf9c <UART_SetConfig+0x344>
 800bf50:	4b71      	ldr	r3, [pc, #452]	@ (800c118 <UART_SetConfig+0x4c0>)
 800bf52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf56:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bf5a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bf5e:	d017      	beq.n	800bf90 <UART_SetConfig+0x338>
 800bf60:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bf64:	d817      	bhi.n	800bf96 <UART_SetConfig+0x33e>
 800bf66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf6a:	d00b      	beq.n	800bf84 <UART_SetConfig+0x32c>
 800bf6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf70:	d811      	bhi.n	800bf96 <UART_SetConfig+0x33e>
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <UART_SetConfig+0x326>
 800bf76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf7a:	d006      	beq.n	800bf8a <UART_SetConfig+0x332>
 800bf7c:	e00b      	b.n	800bf96 <UART_SetConfig+0x33e>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	77fb      	strb	r3, [r7, #31]
 800bf82:	e00d      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf84:	2302      	movs	r3, #2
 800bf86:	77fb      	strb	r3, [r7, #31]
 800bf88:	e00a      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf8a:	2304      	movs	r3, #4
 800bf8c:	77fb      	strb	r3, [r7, #31]
 800bf8e:	e007      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf90:	2308      	movs	r3, #8
 800bf92:	77fb      	strb	r3, [r7, #31]
 800bf94:	e004      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf96:	2310      	movs	r3, #16
 800bf98:	77fb      	strb	r3, [r7, #31]
 800bf9a:	e001      	b.n	800bfa0 <UART_SetConfig+0x348>
 800bf9c:	2310      	movs	r3, #16
 800bf9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	69db      	ldr	r3, [r3, #28]
 800bfa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfa8:	d15b      	bne.n	800c062 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bfaa:	7ffb      	ldrb	r3, [r7, #31]
 800bfac:	2b08      	cmp	r3, #8
 800bfae:	d828      	bhi.n	800c002 <UART_SetConfig+0x3aa>
 800bfb0:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb8 <UART_SetConfig+0x360>)
 800bfb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb6:	bf00      	nop
 800bfb8:	0800bfdd 	.word	0x0800bfdd
 800bfbc:	0800bfe5 	.word	0x0800bfe5
 800bfc0:	0800bfed 	.word	0x0800bfed
 800bfc4:	0800c003 	.word	0x0800c003
 800bfc8:	0800bff3 	.word	0x0800bff3
 800bfcc:	0800c003 	.word	0x0800c003
 800bfd0:	0800c003 	.word	0x0800c003
 800bfd4:	0800c003 	.word	0x0800c003
 800bfd8:	0800bffb 	.word	0x0800bffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfdc:	f7fe fcfa 	bl	800a9d4 <HAL_RCC_GetPCLK1Freq>
 800bfe0:	61b8      	str	r0, [r7, #24]
        break;
 800bfe2:	e013      	b.n	800c00c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfe4:	f7fe fd0a 	bl	800a9fc <HAL_RCC_GetPCLK2Freq>
 800bfe8:	61b8      	str	r0, [r7, #24]
        break;
 800bfea:	e00f      	b.n	800c00c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfec:	4b4b      	ldr	r3, [pc, #300]	@ (800c11c <UART_SetConfig+0x4c4>)
 800bfee:	61bb      	str	r3, [r7, #24]
        break;
 800bff0:	e00c      	b.n	800c00c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bff2:	f7fe fbdd 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800bff6:	61b8      	str	r0, [r7, #24]
        break;
 800bff8:	e008      	b.n	800c00c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bffe:	61bb      	str	r3, [r7, #24]
        break;
 800c000:	e004      	b.n	800c00c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c002:	2300      	movs	r3, #0
 800c004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	77bb      	strb	r3, [r7, #30]
        break;
 800c00a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d074      	beq.n	800c0fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	005a      	lsls	r2, r3, #1
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	085b      	lsrs	r3, r3, #1
 800c01c:	441a      	add	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	fbb2 f3f3 	udiv	r3, r2, r3
 800c026:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	2b0f      	cmp	r3, #15
 800c02c:	d916      	bls.n	800c05c <UART_SetConfig+0x404>
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c034:	d212      	bcs.n	800c05c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	b29b      	uxth	r3, r3
 800c03a:	f023 030f 	bic.w	r3, r3, #15
 800c03e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	085b      	lsrs	r3, r3, #1
 800c044:	b29b      	uxth	r3, r3
 800c046:	f003 0307 	and.w	r3, r3, #7
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	89fb      	ldrh	r3, [r7, #14]
 800c04e:	4313      	orrs	r3, r2
 800c050:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	89fa      	ldrh	r2, [r7, #14]
 800c058:	60da      	str	r2, [r3, #12]
 800c05a:	e04f      	b.n	800c0fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c05c:	2301      	movs	r3, #1
 800c05e:	77bb      	strb	r3, [r7, #30]
 800c060:	e04c      	b.n	800c0fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c062:	7ffb      	ldrb	r3, [r7, #31]
 800c064:	2b08      	cmp	r3, #8
 800c066:	d828      	bhi.n	800c0ba <UART_SetConfig+0x462>
 800c068:	a201      	add	r2, pc, #4	@ (adr r2, 800c070 <UART_SetConfig+0x418>)
 800c06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06e:	bf00      	nop
 800c070:	0800c095 	.word	0x0800c095
 800c074:	0800c09d 	.word	0x0800c09d
 800c078:	0800c0a5 	.word	0x0800c0a5
 800c07c:	0800c0bb 	.word	0x0800c0bb
 800c080:	0800c0ab 	.word	0x0800c0ab
 800c084:	0800c0bb 	.word	0x0800c0bb
 800c088:	0800c0bb 	.word	0x0800c0bb
 800c08c:	0800c0bb 	.word	0x0800c0bb
 800c090:	0800c0b3 	.word	0x0800c0b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c094:	f7fe fc9e 	bl	800a9d4 <HAL_RCC_GetPCLK1Freq>
 800c098:	61b8      	str	r0, [r7, #24]
        break;
 800c09a:	e013      	b.n	800c0c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c09c:	f7fe fcae 	bl	800a9fc <HAL_RCC_GetPCLK2Freq>
 800c0a0:	61b8      	str	r0, [r7, #24]
        break;
 800c0a2:	e00f      	b.n	800c0c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0a4:	4b1d      	ldr	r3, [pc, #116]	@ (800c11c <UART_SetConfig+0x4c4>)
 800c0a6:	61bb      	str	r3, [r7, #24]
        break;
 800c0a8:	e00c      	b.n	800c0c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0aa:	f7fe fb81 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c0ae:	61b8      	str	r0, [r7, #24]
        break;
 800c0b0:	e008      	b.n	800c0c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0b6:	61bb      	str	r3, [r7, #24]
        break;
 800c0b8:	e004      	b.n	800c0c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	77bb      	strb	r3, [r7, #30]
        break;
 800c0c2:	bf00      	nop
    }

    if (pclk != 0U)
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d018      	beq.n	800c0fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	085a      	lsrs	r2, r3, #1
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	441a      	add	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2b0f      	cmp	r3, #15
 800c0e2:	d909      	bls.n	800c0f8 <UART_SetConfig+0x4a0>
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0ea:	d205      	bcs.n	800c0f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	60da      	str	r2, [r3, #12]
 800c0f6:	e001      	b.n	800c0fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c108:	7fbb      	ldrb	r3, [r7, #30]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3720      	adds	r7, #32
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	40007c00 	.word	0x40007c00
 800c118:	40023800 	.word	0x40023800
 800c11c:	00f42400 	.word	0x00f42400

0800c120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c12c:	f003 0308 	and.w	r3, r3, #8
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00a      	beq.n	800c14a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	430a      	orrs	r2, r1
 800c148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00a      	beq.n	800c16c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	430a      	orrs	r2, r1
 800c16a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00a      	beq.n	800c18e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c192:	f003 0304 	and.w	r3, r3, #4
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1b4:	f003 0310 	and.w	r3, r3, #16
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00a      	beq.n	800c1d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d6:	f003 0320 	and.w	r3, r3, #32
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00a      	beq.n	800c1f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	430a      	orrs	r2, r1
 800c1f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d01a      	beq.n	800c236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	430a      	orrs	r2, r1
 800c214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c21a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c21e:	d10a      	bne.n	800c236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	430a      	orrs	r2, r1
 800c234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c23a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00a      	beq.n	800c258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	430a      	orrs	r2, r1
 800c256:	605a      	str	r2, [r3, #4]
  }
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08c      	sub	sp, #48	@ 0x30
 800c268:	af02      	add	r7, sp, #8
 800c26a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c274:	f7fb ff24 	bl	80080c0 <HAL_GetTick>
 800c278:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f003 0308 	and.w	r3, r3, #8
 800c284:	2b08      	cmp	r3, #8
 800c286:	d12e      	bne.n	800c2e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c290:	2200      	movs	r2, #0
 800c292:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f83b 	bl	800c312 <UART_WaitOnFlagUntilTimeout>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d021      	beq.n	800c2e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	e853 3f00 	ldrex	r3, [r3]
 800c2ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2b6:	623b      	str	r3, [r7, #32]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	61fb      	str	r3, [r7, #28]
 800c2c2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c4:	69b9      	ldr	r1, [r7, #24]
 800c2c6:	69fa      	ldr	r2, [r7, #28]
 800c2c8:	e841 2300 	strex	r3, r2, [r1]
 800c2cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1e6      	bne.n	800c2a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2e2:	2303      	movs	r3, #3
 800c2e4:	e011      	b.n	800c30a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2220      	movs	r2, #32
 800c2f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3728      	adds	r7, #40	@ 0x28
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	60f8      	str	r0, [r7, #12]
 800c31a:	60b9      	str	r1, [r7, #8]
 800c31c:	603b      	str	r3, [r7, #0]
 800c31e:	4613      	mov	r3, r2
 800c320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c322:	e04f      	b.n	800c3c4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32a:	d04b      	beq.n	800c3c4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c32c:	f7fb fec8 	bl	80080c0 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	69ba      	ldr	r2, [r7, #24]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d302      	bcc.n	800c342 <UART_WaitOnFlagUntilTimeout+0x30>
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c342:	2303      	movs	r3, #3
 800c344:	e04e      	b.n	800c3e4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0304 	and.w	r3, r3, #4
 800c350:	2b00      	cmp	r3, #0
 800c352:	d037      	beq.n	800c3c4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2b80      	cmp	r3, #128	@ 0x80
 800c358:	d034      	beq.n	800c3c4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b40      	cmp	r3, #64	@ 0x40
 800c35e:	d031      	beq.n	800c3c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	69db      	ldr	r3, [r3, #28]
 800c366:	f003 0308 	and.w	r3, r3, #8
 800c36a:	2b08      	cmp	r3, #8
 800c36c:	d110      	bne.n	800c390 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2208      	movs	r2, #8
 800c374:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f000 f838 	bl	800c3ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2208      	movs	r2, #8
 800c380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e029      	b.n	800c3e4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	69db      	ldr	r3, [r3, #28]
 800c396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c39a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c39e:	d111      	bne.n	800c3c4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c3a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f000 f81e 	bl	800c3ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2220      	movs	r2, #32
 800c3b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e00f      	b.n	800c3e4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	69da      	ldr	r2, [r3, #28]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	bf0c      	ite	eq
 800c3d4:	2301      	moveq	r3, #1
 800c3d6:	2300      	movne	r3, #0
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	461a      	mov	r2, r3
 800c3dc:	79fb      	ldrb	r3, [r7, #7]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d0a0      	beq.n	800c324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b095      	sub	sp, #84	@ 0x54
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3fc:	e853 3f00 	ldrex	r3, [r3]
 800c400:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c412:	643b      	str	r3, [r7, #64]	@ 0x40
 800c414:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c416:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c418:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c41a:	e841 2300 	strex	r3, r2, [r1]
 800c41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e6      	bne.n	800c3f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3308      	adds	r3, #8
 800c42c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	e853 3f00 	ldrex	r3, [r3]
 800c434:	61fb      	str	r3, [r7, #28]
   return(result);
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	f023 0301 	bic.w	r3, r3, #1
 800c43c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3308      	adds	r3, #8
 800c444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c448:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c44c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c44e:	e841 2300 	strex	r3, r2, [r1]
 800c452:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e5      	bne.n	800c426 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d118      	bne.n	800c494 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	e853 3f00 	ldrex	r3, [r3]
 800c46e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	f023 0310 	bic.w	r3, r3, #16
 800c476:	647b      	str	r3, [r7, #68]	@ 0x44
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	461a      	mov	r2, r3
 800c47e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c480:	61bb      	str	r3, [r7, #24]
 800c482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c484:	6979      	ldr	r1, [r7, #20]
 800c486:	69ba      	ldr	r2, [r7, #24]
 800c488:	e841 2300 	strex	r3, r2, [r1]
 800c48c:	613b      	str	r3, [r7, #16]
   return(result);
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e6      	bne.n	800c462 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2220      	movs	r2, #32
 800c498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c4a8:	bf00      	nop
 800c4aa:	3754      	adds	r7, #84	@ 0x54
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4b4:	b084      	sub	sp, #16
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	f107 001c 	add.w	r0, r7, #28
 800c4c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d121      	bne.n	800c512 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68da      	ldr	r2, [r3, #12]
 800c4de:	4b21      	ldr	r3, [pc, #132]	@ (800c564 <USB_CoreInit+0xb0>)
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c4f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d105      	bne.n	800c506 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa92 	bl	800ca30 <USB_CoreReset>
 800c50c:	4603      	mov	r3, r0
 800c50e:	73fb      	strb	r3, [r7, #15]
 800c510:	e010      	b.n	800c534 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fa86 	bl	800ca30 <USB_CoreReset>
 800c524:	4603      	mov	r3, r0
 800c526:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c52c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800c534:	7fbb      	ldrb	r3, [r7, #30]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d10b      	bne.n	800c552 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f043 0206 	orr.w	r2, r3, #6
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f043 0220 	orr.w	r2, r3, #32
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c552:	7bfb      	ldrb	r3, [r7, #15]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c55e:	b004      	add	sp, #16
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	ffbdffbf 	.word	0xffbdffbf

0800c568 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	f023 0201 	bic.w	r2, r3, #1
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr

0800c58a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b084      	sub	sp, #16
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	460b      	mov	r3, r1
 800c594:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c5a6:	78fb      	ldrb	r3, [r7, #3]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d115      	bne.n	800c5d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c5b8:	200a      	movs	r0, #10
 800c5ba:	f7fb fd8d 	bl	80080d8 <HAL_Delay>
      ms += 10U;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	330a      	adds	r3, #10
 800c5c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa25 	bl	800ca14 <USB_GetMode>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d01e      	beq.n	800c60e <USB_SetCurrentMode+0x84>
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2bc7      	cmp	r3, #199	@ 0xc7
 800c5d4:	d9f0      	bls.n	800c5b8 <USB_SetCurrentMode+0x2e>
 800c5d6:	e01a      	b.n	800c60e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c5d8:	78fb      	ldrb	r3, [r7, #3]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d115      	bne.n	800c60a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c5ea:	200a      	movs	r0, #10
 800c5ec:	f7fb fd74 	bl	80080d8 <HAL_Delay>
      ms += 10U;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	330a      	adds	r3, #10
 800c5f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fa0c 	bl	800ca14 <USB_GetMode>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d005      	beq.n	800c60e <USB_SetCurrentMode+0x84>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2bc7      	cmp	r3, #199	@ 0xc7
 800c606:	d9f0      	bls.n	800c5ea <USB_SetCurrentMode+0x60>
 800c608:	e001      	b.n	800c60e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e005      	b.n	800c61a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2bc8      	cmp	r3, #200	@ 0xc8
 800c612:	d101      	bne.n	800c618 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	e000      	b.n	800c61a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c624:	b084      	sub	sp, #16
 800c626:	b580      	push	{r7, lr}
 800c628:	b086      	sub	sp, #24
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
 800c62e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c636:	2300      	movs	r3, #0
 800c638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c63e:	2300      	movs	r3, #0
 800c640:	613b      	str	r3, [r7, #16]
 800c642:	e009      	b.n	800c658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	3340      	adds	r3, #64	@ 0x40
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	2200      	movs	r2, #0
 800c650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	3301      	adds	r3, #1
 800c656:	613b      	str	r3, [r7, #16]
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	2b0e      	cmp	r3, #14
 800c65c:	d9f2      	bls.n	800c644 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c65e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c662:	2b00      	cmp	r3, #0
 800c664:	d11c      	bne.n	800c6a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c674:	f043 0302 	orr.w	r3, r3, #2
 800c678:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c67e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	e005      	b.n	800c6ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c6b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d10d      	bne.n	800c6dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d104      	bne.n	800c6d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f968 	bl	800c9a0 <USB_SetDevSpeed>
 800c6d0:	e008      	b.n	800c6e4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f963 	bl	800c9a0 <USB_SetDevSpeed>
 800c6da:	e003      	b.n	800c6e4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c6dc:	2103      	movs	r1, #3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f95e 	bl	800c9a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c6e4:	2110      	movs	r1, #16
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f8fa 	bl	800c8e0 <USB_FlushTxFifo>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f924 	bl	800c944 <USB_FlushRxFifo>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c70c:	461a      	mov	r2, r3
 800c70e:	2300      	movs	r3, #0
 800c710:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c718:	461a      	mov	r2, r3
 800c71a:	2300      	movs	r3, #0
 800c71c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c724:	461a      	mov	r2, r3
 800c726:	2300      	movs	r3, #0
 800c728:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c72a:	2300      	movs	r3, #0
 800c72c:	613b      	str	r3, [r7, #16]
 800c72e:	e043      	b.n	800c7b8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	015a      	lsls	r2, r3, #5
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	4413      	add	r3, r2
 800c738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c742:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c746:	d118      	bne.n	800c77a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	015a      	lsls	r2, r3, #5
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	4413      	add	r3, r2
 800c756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c75a:	461a      	mov	r2, r3
 800c75c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c760:	6013      	str	r3, [r2, #0]
 800c762:	e013      	b.n	800c78c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	015a      	lsls	r2, r3, #5
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	4413      	add	r3, r2
 800c76c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c770:	461a      	mov	r2, r3
 800c772:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c776:	6013      	str	r3, [r2, #0]
 800c778:	e008      	b.n	800c78c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	015a      	lsls	r2, r3, #5
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	4413      	add	r3, r2
 800c782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c786:	461a      	mov	r2, r3
 800c788:	2300      	movs	r3, #0
 800c78a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	015a      	lsls	r2, r3, #5
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	4413      	add	r3, r2
 800c794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c798:	461a      	mov	r2, r3
 800c79a:	2300      	movs	r3, #0
 800c79c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	015a      	lsls	r2, r3, #5
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c7b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	613b      	str	r3, [r7, #16]
 800c7b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c7bc:	461a      	mov	r2, r3
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d3b5      	bcc.n	800c730 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	613b      	str	r3, [r7, #16]
 800c7c8:	e043      	b.n	800c852 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	015a      	lsls	r2, r3, #5
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7e0:	d118      	bne.n	800c814 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10a      	bne.n	800c7fe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	015a      	lsls	r2, r3, #5
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c7fa:	6013      	str	r3, [r2, #0]
 800c7fc:	e013      	b.n	800c826 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	015a      	lsls	r2, r3, #5
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	4413      	add	r3, r2
 800c806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c80a:	461a      	mov	r2, r3
 800c80c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c810:	6013      	str	r3, [r2, #0]
 800c812:	e008      	b.n	800c826 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c820:	461a      	mov	r2, r3
 800c822:	2300      	movs	r3, #0
 800c824:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	015a      	lsls	r2, r3, #5
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	4413      	add	r3, r2
 800c82e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c832:	461a      	mov	r2, r3
 800c834:	2300      	movs	r3, #0
 800c836:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c844:	461a      	mov	r2, r3
 800c846:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c84a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	3301      	adds	r3, #1
 800c850:	613b      	str	r3, [r7, #16]
 800c852:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c856:	461a      	mov	r2, r3
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d3b5      	bcc.n	800c7ca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c86c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c870:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c87e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c880:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c884:	2b00      	cmp	r3, #0
 800c886:	d105      	bne.n	800c894 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	f043 0210 	orr.w	r2, r3, #16
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	699a      	ldr	r2, [r3, #24]
 800c898:	4b0f      	ldr	r3, [pc, #60]	@ (800c8d8 <USB_DevInit+0x2b4>)
 800c89a:	4313      	orrs	r3, r2
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c8a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d005      	beq.n	800c8b4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	f043 0208 	orr.w	r2, r3, #8
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c8b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d105      	bne.n	800c8c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	699a      	ldr	r2, [r3, #24]
 800c8c0:	4b06      	ldr	r3, [pc, #24]	@ (800c8dc <USB_DevInit+0x2b8>)
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8d4:	b004      	add	sp, #16
 800c8d6:	4770      	bx	lr
 800c8d8:	803c3800 	.word	0x803c3800
 800c8dc:	40000004 	.word	0x40000004

0800c8e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b085      	sub	sp, #20
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c8fa:	d901      	bls.n	800c900 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e01b      	b.n	800c938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	daf2      	bge.n	800c8ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c908:	2300      	movs	r3, #0
 800c90a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	019b      	lsls	r3, r3, #6
 800c910:	f043 0220 	orr.w	r2, r3, #32
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	3301      	adds	r3, #1
 800c91c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c924:	d901      	bls.n	800c92a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c926:	2303      	movs	r3, #3
 800c928:	e006      	b.n	800c938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	f003 0320 	and.w	r3, r3, #32
 800c932:	2b20      	cmp	r3, #32
 800c934:	d0f0      	beq.n	800c918 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3714      	adds	r7, #20
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c94c:	2300      	movs	r3, #0
 800c94e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	3301      	adds	r3, #1
 800c954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c95c:	d901      	bls.n	800c962 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c95e:	2303      	movs	r3, #3
 800c960:	e018      	b.n	800c994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	daf2      	bge.n	800c950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2210      	movs	r2, #16
 800c972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	3301      	adds	r3, #1
 800c978:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c980:	d901      	bls.n	800c986 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c982:	2303      	movs	r3, #3
 800c984:	e006      	b.n	800c994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	f003 0310 	and.w	r3, r3, #16
 800c98e:	2b10      	cmp	r3, #16
 800c990:	d0f0      	beq.n	800c974 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c992:	2300      	movs	r3, #0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	78fb      	ldrb	r3, [r7, #3]
 800c9ba:	68f9      	ldr	r1, [r7, #12]
 800c9bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b085      	sub	sp, #20
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c9ec:	f023 0303 	bic.w	r3, r3, #3
 800c9f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca00:	f043 0302 	orr.w	r3, r3, #2
 800ca04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	f003 0301 	and.w	r3, r3, #1
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca48:	d901      	bls.n	800ca4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	e022      	b.n	800ca94 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	daf2      	bge.n	800ca3c <USB_CoreReset+0xc>

  count = 10U;
 800ca56:	230a      	movs	r3, #10
 800ca58:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800ca5a:	e002      	b.n	800ca62 <USB_CoreReset+0x32>
  {
    count--;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1f9      	bne.n	800ca5c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	f043 0201 	orr.w	r2, r3, #1
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3301      	adds	r3, #1
 800ca78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca80:	d901      	bls.n	800ca86 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e006      	b.n	800ca94 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d0f0      	beq.n	800ca74 <USB_CoreReset+0x44>

  return HAL_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800caa4:	4904      	ldr	r1, [pc, #16]	@ (800cab8 <MX_FATFS_Init+0x18>)
 800caa6:	4805      	ldr	r0, [pc, #20]	@ (800cabc <MX_FATFS_Init+0x1c>)
 800caa8:	f000 f8b0 	bl	800cc0c <FATFS_LinkDriver>
 800caac:	4603      	mov	r3, r0
 800caae:	461a      	mov	r2, r3
 800cab0:	4b03      	ldr	r3, [pc, #12]	@ (800cac0 <MX_FATFS_Init+0x20>)
 800cab2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cab4:	bf00      	nop
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	2000109c 	.word	0x2000109c
 800cabc:	20000018 	.word	0x20000018
 800cac0:	20001098 	.word	0x20001098

0800cac4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	4603      	mov	r3, r0
 800cacc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800cace:	4b06      	ldr	r3, [pc, #24]	@ (800cae8 <USER_initialize+0x24>)
 800cad0:	2201      	movs	r2, #1
 800cad2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800cad4:	4b04      	ldr	r3, [pc, #16]	@ (800cae8 <USER_initialize+0x24>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800cada:	4618      	mov	r0, r3
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	20000015 	.word	0x20000015

0800caec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	4603      	mov	r3, r0
 800caf4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800caf6:	4b06      	ldr	r3, [pc, #24]	@ (800cb10 <USER_status+0x24>)
 800caf8:	2201      	movs	r2, #1
 800cafa:	701a      	strb	r2, [r3, #0]
    return Stat;
 800cafc:	4b04      	ldr	r3, [pc, #16]	@ (800cb10 <USER_status+0x24>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	20000015 	.word	0x20000015

0800cb14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	607a      	str	r2, [r7, #4]
 800cb1e:	603b      	str	r3, [r7, #0]
 800cb20:	4603      	mov	r3, r0
 800cb22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800cb24:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr

0800cb32 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b085      	sub	sp, #20
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
 800cb3c:	603b      	str	r3, [r7, #0]
 800cb3e:	4603      	mov	r3, r0
 800cb40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800cb42:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	603a      	str	r2, [r7, #0]
 800cb5a:	71fb      	strb	r3, [r7, #7]
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	73fb      	strb	r3, [r7, #15]
    return res;
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
	...

0800cb74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb82:	2301      	movs	r3, #1
 800cb84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb8a:	4b1f      	ldr	r3, [pc, #124]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cb8c:	7a5b      	ldrb	r3, [r3, #9]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d131      	bne.n	800cbf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb94:	4b1c      	ldr	r3, [pc, #112]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cb96:	7a5b      	ldrb	r3, [r3, #9]
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	4b1a      	ldr	r3, [pc, #104]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cb9e:	2100      	movs	r1, #0
 800cba0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cba2:	4b19      	ldr	r3, [pc, #100]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cba4:	7a5b      	ldrb	r3, [r3, #9]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	4a17      	ldr	r2, [pc, #92]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4413      	add	r3, r2
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cbb2:	4b15      	ldr	r3, [pc, #84]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbb4:	7a5b      	ldrb	r3, [r3, #9]
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4b13      	ldr	r3, [pc, #76]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbbc:	4413      	add	r3, r2
 800cbbe:	79fa      	ldrb	r2, [r7, #7]
 800cbc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cbc2:	4b11      	ldr	r3, [pc, #68]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbc4:	7a5b      	ldrb	r3, [r3, #9]
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	b2d1      	uxtb	r1, r2
 800cbcc:	4a0e      	ldr	r2, [pc, #56]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbce:	7251      	strb	r1, [r2, #9]
 800cbd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cbd2:	7dbb      	ldrb	r3, [r7, #22]
 800cbd4:	3330      	adds	r3, #48	@ 0x30
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	223a      	movs	r2, #58	@ 0x3a
 800cbe2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	3302      	adds	r3, #2
 800cbe8:	222f      	movs	r2, #47	@ 0x2f
 800cbea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	3303      	adds	r3, #3
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	371c      	adds	r7, #28
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	200010a0 	.word	0x200010a0

0800cc0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc16:	2200      	movs	r2, #0
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff ffaa 	bl	800cb74 <FATFS_LinkDriverEx>
 800cc20:	4603      	mov	r3, r0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <__cvt>:
 800cc2a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc2e:	ec57 6b10 	vmov	r6, r7, d0
 800cc32:	2f00      	cmp	r7, #0
 800cc34:	460c      	mov	r4, r1
 800cc36:	4619      	mov	r1, r3
 800cc38:	463b      	mov	r3, r7
 800cc3a:	bfbb      	ittet	lt
 800cc3c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cc40:	461f      	movlt	r7, r3
 800cc42:	2300      	movge	r3, #0
 800cc44:	232d      	movlt	r3, #45	@ 0x2d
 800cc46:	700b      	strb	r3, [r1, #0]
 800cc48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc4a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cc4e:	4691      	mov	r9, r2
 800cc50:	f023 0820 	bic.w	r8, r3, #32
 800cc54:	bfbc      	itt	lt
 800cc56:	4632      	movlt	r2, r6
 800cc58:	4616      	movlt	r6, r2
 800cc5a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc5e:	d005      	beq.n	800cc6c <__cvt+0x42>
 800cc60:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cc64:	d100      	bne.n	800cc68 <__cvt+0x3e>
 800cc66:	3401      	adds	r4, #1
 800cc68:	2102      	movs	r1, #2
 800cc6a:	e000      	b.n	800cc6e <__cvt+0x44>
 800cc6c:	2103      	movs	r1, #3
 800cc6e:	ab03      	add	r3, sp, #12
 800cc70:	9301      	str	r3, [sp, #4]
 800cc72:	ab02      	add	r3, sp, #8
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	ec47 6b10 	vmov	d0, r6, r7
 800cc7a:	4653      	mov	r3, sl
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	f001 f8ef 	bl	800de60 <_dtoa_r>
 800cc82:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cc86:	4605      	mov	r5, r0
 800cc88:	d119      	bne.n	800ccbe <__cvt+0x94>
 800cc8a:	f019 0f01 	tst.w	r9, #1
 800cc8e:	d00e      	beq.n	800ccae <__cvt+0x84>
 800cc90:	eb00 0904 	add.w	r9, r0, r4
 800cc94:	2200      	movs	r2, #0
 800cc96:	2300      	movs	r3, #0
 800cc98:	4630      	mov	r0, r6
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	f7f3 ff34 	bl	8000b08 <__aeabi_dcmpeq>
 800cca0:	b108      	cbz	r0, 800cca6 <__cvt+0x7c>
 800cca2:	f8cd 900c 	str.w	r9, [sp, #12]
 800cca6:	2230      	movs	r2, #48	@ 0x30
 800cca8:	9b03      	ldr	r3, [sp, #12]
 800ccaa:	454b      	cmp	r3, r9
 800ccac:	d31e      	bcc.n	800ccec <__cvt+0xc2>
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ccb2:	1b5b      	subs	r3, r3, r5
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	b004      	add	sp, #16
 800ccba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccbe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ccc2:	eb00 0904 	add.w	r9, r0, r4
 800ccc6:	d1e5      	bne.n	800cc94 <__cvt+0x6a>
 800ccc8:	7803      	ldrb	r3, [r0, #0]
 800ccca:	2b30      	cmp	r3, #48	@ 0x30
 800cccc:	d10a      	bne.n	800cce4 <__cvt+0xba>
 800ccce:	2200      	movs	r2, #0
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	4639      	mov	r1, r7
 800ccd6:	f7f3 ff17 	bl	8000b08 <__aeabi_dcmpeq>
 800ccda:	b918      	cbnz	r0, 800cce4 <__cvt+0xba>
 800ccdc:	f1c4 0401 	rsb	r4, r4, #1
 800cce0:	f8ca 4000 	str.w	r4, [sl]
 800cce4:	f8da 3000 	ldr.w	r3, [sl]
 800cce8:	4499      	add	r9, r3
 800ccea:	e7d3      	b.n	800cc94 <__cvt+0x6a>
 800ccec:	1c59      	adds	r1, r3, #1
 800ccee:	9103      	str	r1, [sp, #12]
 800ccf0:	701a      	strb	r2, [r3, #0]
 800ccf2:	e7d9      	b.n	800cca8 <__cvt+0x7e>

0800ccf4 <__exponent>:
 800ccf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccf6:	2900      	cmp	r1, #0
 800ccf8:	bfba      	itte	lt
 800ccfa:	4249      	neglt	r1, r1
 800ccfc:	232d      	movlt	r3, #45	@ 0x2d
 800ccfe:	232b      	movge	r3, #43	@ 0x2b
 800cd00:	2909      	cmp	r1, #9
 800cd02:	7002      	strb	r2, [r0, #0]
 800cd04:	7043      	strb	r3, [r0, #1]
 800cd06:	dd29      	ble.n	800cd5c <__exponent+0x68>
 800cd08:	f10d 0307 	add.w	r3, sp, #7
 800cd0c:	461d      	mov	r5, r3
 800cd0e:	270a      	movs	r7, #10
 800cd10:	461a      	mov	r2, r3
 800cd12:	fbb1 f6f7 	udiv	r6, r1, r7
 800cd16:	fb07 1416 	mls	r4, r7, r6, r1
 800cd1a:	3430      	adds	r4, #48	@ 0x30
 800cd1c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cd20:	460c      	mov	r4, r1
 800cd22:	2c63      	cmp	r4, #99	@ 0x63
 800cd24:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd28:	4631      	mov	r1, r6
 800cd2a:	dcf1      	bgt.n	800cd10 <__exponent+0x1c>
 800cd2c:	3130      	adds	r1, #48	@ 0x30
 800cd2e:	1e94      	subs	r4, r2, #2
 800cd30:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cd34:	1c41      	adds	r1, r0, #1
 800cd36:	4623      	mov	r3, r4
 800cd38:	42ab      	cmp	r3, r5
 800cd3a:	d30a      	bcc.n	800cd52 <__exponent+0x5e>
 800cd3c:	f10d 0309 	add.w	r3, sp, #9
 800cd40:	1a9b      	subs	r3, r3, r2
 800cd42:	42ac      	cmp	r4, r5
 800cd44:	bf88      	it	hi
 800cd46:	2300      	movhi	r3, #0
 800cd48:	3302      	adds	r3, #2
 800cd4a:	4403      	add	r3, r0
 800cd4c:	1a18      	subs	r0, r3, r0
 800cd4e:	b003      	add	sp, #12
 800cd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd52:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cd56:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cd5a:	e7ed      	b.n	800cd38 <__exponent+0x44>
 800cd5c:	2330      	movs	r3, #48	@ 0x30
 800cd5e:	3130      	adds	r1, #48	@ 0x30
 800cd60:	7083      	strb	r3, [r0, #2]
 800cd62:	70c1      	strb	r1, [r0, #3]
 800cd64:	1d03      	adds	r3, r0, #4
 800cd66:	e7f1      	b.n	800cd4c <__exponent+0x58>

0800cd68 <_printf_float>:
 800cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	b08d      	sub	sp, #52	@ 0x34
 800cd6e:	460c      	mov	r4, r1
 800cd70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cd74:	4616      	mov	r6, r2
 800cd76:	461f      	mov	r7, r3
 800cd78:	4605      	mov	r5, r0
 800cd7a:	f000 ff5b 	bl	800dc34 <_localeconv_r>
 800cd7e:	6803      	ldr	r3, [r0, #0]
 800cd80:	9304      	str	r3, [sp, #16]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7f3 fa94 	bl	80002b0 <strlen>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd90:	9005      	str	r0, [sp, #20]
 800cd92:	3307      	adds	r3, #7
 800cd94:	f023 0307 	bic.w	r3, r3, #7
 800cd98:	f103 0208 	add.w	r2, r3, #8
 800cd9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cda0:	f8d4 b000 	ldr.w	fp, [r4]
 800cda4:	f8c8 2000 	str.w	r2, [r8]
 800cda8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cdac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cdb0:	9307      	str	r3, [sp, #28]
 800cdb2:	f8cd 8018 	str.w	r8, [sp, #24]
 800cdb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cdba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdbe:	4b9c      	ldr	r3, [pc, #624]	@ (800d030 <_printf_float+0x2c8>)
 800cdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc4:	f7f3 fed2 	bl	8000b6c <__aeabi_dcmpun>
 800cdc8:	bb70      	cbnz	r0, 800ce28 <_printf_float+0xc0>
 800cdca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdce:	4b98      	ldr	r3, [pc, #608]	@ (800d030 <_printf_float+0x2c8>)
 800cdd0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd4:	f7f3 feac 	bl	8000b30 <__aeabi_dcmple>
 800cdd8:	bb30      	cbnz	r0, 800ce28 <_printf_float+0xc0>
 800cdda:	2200      	movs	r2, #0
 800cddc:	2300      	movs	r3, #0
 800cdde:	4640      	mov	r0, r8
 800cde0:	4649      	mov	r1, r9
 800cde2:	f7f3 fe9b 	bl	8000b1c <__aeabi_dcmplt>
 800cde6:	b110      	cbz	r0, 800cdee <_printf_float+0x86>
 800cde8:	232d      	movs	r3, #45	@ 0x2d
 800cdea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdee:	4a91      	ldr	r2, [pc, #580]	@ (800d034 <_printf_float+0x2cc>)
 800cdf0:	4b91      	ldr	r3, [pc, #580]	@ (800d038 <_printf_float+0x2d0>)
 800cdf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cdf6:	bf8c      	ite	hi
 800cdf8:	4690      	movhi	r8, r2
 800cdfa:	4698      	movls	r8, r3
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	6123      	str	r3, [r4, #16]
 800ce00:	f02b 0304 	bic.w	r3, fp, #4
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	f04f 0900 	mov.w	r9, #0
 800ce0a:	9700      	str	r7, [sp, #0]
 800ce0c:	4633      	mov	r3, r6
 800ce0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ce10:	4621      	mov	r1, r4
 800ce12:	4628      	mov	r0, r5
 800ce14:	f000 f9d2 	bl	800d1bc <_printf_common>
 800ce18:	3001      	adds	r0, #1
 800ce1a:	f040 808d 	bne.w	800cf38 <_printf_float+0x1d0>
 800ce1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce22:	b00d      	add	sp, #52	@ 0x34
 800ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce28:	4642      	mov	r2, r8
 800ce2a:	464b      	mov	r3, r9
 800ce2c:	4640      	mov	r0, r8
 800ce2e:	4649      	mov	r1, r9
 800ce30:	f7f3 fe9c 	bl	8000b6c <__aeabi_dcmpun>
 800ce34:	b140      	cbz	r0, 800ce48 <_printf_float+0xe0>
 800ce36:	464b      	mov	r3, r9
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	bfbc      	itt	lt
 800ce3c:	232d      	movlt	r3, #45	@ 0x2d
 800ce3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ce42:	4a7e      	ldr	r2, [pc, #504]	@ (800d03c <_printf_float+0x2d4>)
 800ce44:	4b7e      	ldr	r3, [pc, #504]	@ (800d040 <_printf_float+0x2d8>)
 800ce46:	e7d4      	b.n	800cdf2 <_printf_float+0x8a>
 800ce48:	6863      	ldr	r3, [r4, #4]
 800ce4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ce4e:	9206      	str	r2, [sp, #24]
 800ce50:	1c5a      	adds	r2, r3, #1
 800ce52:	d13b      	bne.n	800cecc <_printf_float+0x164>
 800ce54:	2306      	movs	r3, #6
 800ce56:	6063      	str	r3, [r4, #4]
 800ce58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	6022      	str	r2, [r4, #0]
 800ce60:	9303      	str	r3, [sp, #12]
 800ce62:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce64:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ce68:	ab09      	add	r3, sp, #36	@ 0x24
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	6861      	ldr	r1, [r4, #4]
 800ce6e:	ec49 8b10 	vmov	d0, r8, r9
 800ce72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ce76:	4628      	mov	r0, r5
 800ce78:	f7ff fed7 	bl	800cc2a <__cvt>
 800ce7c:	9b06      	ldr	r3, [sp, #24]
 800ce7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce80:	2b47      	cmp	r3, #71	@ 0x47
 800ce82:	4680      	mov	r8, r0
 800ce84:	d129      	bne.n	800ceda <_printf_float+0x172>
 800ce86:	1cc8      	adds	r0, r1, #3
 800ce88:	db02      	blt.n	800ce90 <_printf_float+0x128>
 800ce8a:	6863      	ldr	r3, [r4, #4]
 800ce8c:	4299      	cmp	r1, r3
 800ce8e:	dd41      	ble.n	800cf14 <_printf_float+0x1ac>
 800ce90:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce94:	fa5f fa8a 	uxtb.w	sl, sl
 800ce98:	3901      	subs	r1, #1
 800ce9a:	4652      	mov	r2, sl
 800ce9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cea0:	9109      	str	r1, [sp, #36]	@ 0x24
 800cea2:	f7ff ff27 	bl	800ccf4 <__exponent>
 800cea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cea8:	1813      	adds	r3, r2, r0
 800ceaa:	2a01      	cmp	r2, #1
 800ceac:	4681      	mov	r9, r0
 800ceae:	6123      	str	r3, [r4, #16]
 800ceb0:	dc02      	bgt.n	800ceb8 <_printf_float+0x150>
 800ceb2:	6822      	ldr	r2, [r4, #0]
 800ceb4:	07d2      	lsls	r2, r2, #31
 800ceb6:	d501      	bpl.n	800cebc <_printf_float+0x154>
 800ceb8:	3301      	adds	r3, #1
 800ceba:	6123      	str	r3, [r4, #16]
 800cebc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d0a2      	beq.n	800ce0a <_printf_float+0xa2>
 800cec4:	232d      	movs	r3, #45	@ 0x2d
 800cec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ceca:	e79e      	b.n	800ce0a <_printf_float+0xa2>
 800cecc:	9a06      	ldr	r2, [sp, #24]
 800cece:	2a47      	cmp	r2, #71	@ 0x47
 800ced0:	d1c2      	bne.n	800ce58 <_printf_float+0xf0>
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1c0      	bne.n	800ce58 <_printf_float+0xf0>
 800ced6:	2301      	movs	r3, #1
 800ced8:	e7bd      	b.n	800ce56 <_printf_float+0xee>
 800ceda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cede:	d9db      	bls.n	800ce98 <_printf_float+0x130>
 800cee0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cee4:	d118      	bne.n	800cf18 <_printf_float+0x1b0>
 800cee6:	2900      	cmp	r1, #0
 800cee8:	6863      	ldr	r3, [r4, #4]
 800ceea:	dd0b      	ble.n	800cf04 <_printf_float+0x19c>
 800ceec:	6121      	str	r1, [r4, #16]
 800ceee:	b913      	cbnz	r3, 800cef6 <_printf_float+0x18e>
 800cef0:	6822      	ldr	r2, [r4, #0]
 800cef2:	07d0      	lsls	r0, r2, #31
 800cef4:	d502      	bpl.n	800cefc <_printf_float+0x194>
 800cef6:	3301      	adds	r3, #1
 800cef8:	440b      	add	r3, r1
 800cefa:	6123      	str	r3, [r4, #16]
 800cefc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cefe:	f04f 0900 	mov.w	r9, #0
 800cf02:	e7db      	b.n	800cebc <_printf_float+0x154>
 800cf04:	b913      	cbnz	r3, 800cf0c <_printf_float+0x1a4>
 800cf06:	6822      	ldr	r2, [r4, #0]
 800cf08:	07d2      	lsls	r2, r2, #31
 800cf0a:	d501      	bpl.n	800cf10 <_printf_float+0x1a8>
 800cf0c:	3302      	adds	r3, #2
 800cf0e:	e7f4      	b.n	800cefa <_printf_float+0x192>
 800cf10:	2301      	movs	r3, #1
 800cf12:	e7f2      	b.n	800cefa <_printf_float+0x192>
 800cf14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cf18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf1a:	4299      	cmp	r1, r3
 800cf1c:	db05      	blt.n	800cf2a <_printf_float+0x1c2>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	6121      	str	r1, [r4, #16]
 800cf22:	07d8      	lsls	r0, r3, #31
 800cf24:	d5ea      	bpl.n	800cefc <_printf_float+0x194>
 800cf26:	1c4b      	adds	r3, r1, #1
 800cf28:	e7e7      	b.n	800cefa <_printf_float+0x192>
 800cf2a:	2900      	cmp	r1, #0
 800cf2c:	bfd4      	ite	le
 800cf2e:	f1c1 0202 	rsble	r2, r1, #2
 800cf32:	2201      	movgt	r2, #1
 800cf34:	4413      	add	r3, r2
 800cf36:	e7e0      	b.n	800cefa <_printf_float+0x192>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	055a      	lsls	r2, r3, #21
 800cf3c:	d407      	bmi.n	800cf4e <_printf_float+0x1e6>
 800cf3e:	6923      	ldr	r3, [r4, #16]
 800cf40:	4642      	mov	r2, r8
 800cf42:	4631      	mov	r1, r6
 800cf44:	4628      	mov	r0, r5
 800cf46:	47b8      	blx	r7
 800cf48:	3001      	adds	r0, #1
 800cf4a:	d12b      	bne.n	800cfa4 <_printf_float+0x23c>
 800cf4c:	e767      	b.n	800ce1e <_printf_float+0xb6>
 800cf4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf52:	f240 80dd 	bls.w	800d110 <_printf_float+0x3a8>
 800cf56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f7f3 fdd3 	bl	8000b08 <__aeabi_dcmpeq>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d033      	beq.n	800cfce <_printf_float+0x266>
 800cf66:	4a37      	ldr	r2, [pc, #220]	@ (800d044 <_printf_float+0x2dc>)
 800cf68:	2301      	movs	r3, #1
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	47b8      	blx	r7
 800cf70:	3001      	adds	r0, #1
 800cf72:	f43f af54 	beq.w	800ce1e <_printf_float+0xb6>
 800cf76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cf7a:	4543      	cmp	r3, r8
 800cf7c:	db02      	blt.n	800cf84 <_printf_float+0x21c>
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	07d8      	lsls	r0, r3, #31
 800cf82:	d50f      	bpl.n	800cfa4 <_printf_float+0x23c>
 800cf84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	47b8      	blx	r7
 800cf8e:	3001      	adds	r0, #1
 800cf90:	f43f af45 	beq.w	800ce1e <_printf_float+0xb6>
 800cf94:	f04f 0900 	mov.w	r9, #0
 800cf98:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf9c:	f104 0a1a 	add.w	sl, r4, #26
 800cfa0:	45c8      	cmp	r8, r9
 800cfa2:	dc09      	bgt.n	800cfb8 <_printf_float+0x250>
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	079b      	lsls	r3, r3, #30
 800cfa8:	f100 8103 	bmi.w	800d1b2 <_printf_float+0x44a>
 800cfac:	68e0      	ldr	r0, [r4, #12]
 800cfae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfb0:	4298      	cmp	r0, r3
 800cfb2:	bfb8      	it	lt
 800cfb4:	4618      	movlt	r0, r3
 800cfb6:	e734      	b.n	800ce22 <_printf_float+0xba>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	4652      	mov	r2, sl
 800cfbc:	4631      	mov	r1, r6
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	47b8      	blx	r7
 800cfc2:	3001      	adds	r0, #1
 800cfc4:	f43f af2b 	beq.w	800ce1e <_printf_float+0xb6>
 800cfc8:	f109 0901 	add.w	r9, r9, #1
 800cfcc:	e7e8      	b.n	800cfa0 <_printf_float+0x238>
 800cfce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	dc39      	bgt.n	800d048 <_printf_float+0x2e0>
 800cfd4:	4a1b      	ldr	r2, [pc, #108]	@ (800d044 <_printf_float+0x2dc>)
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	4631      	mov	r1, r6
 800cfda:	4628      	mov	r0, r5
 800cfdc:	47b8      	blx	r7
 800cfde:	3001      	adds	r0, #1
 800cfe0:	f43f af1d 	beq.w	800ce1e <_printf_float+0xb6>
 800cfe4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cfe8:	ea59 0303 	orrs.w	r3, r9, r3
 800cfec:	d102      	bne.n	800cff4 <_printf_float+0x28c>
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	07d9      	lsls	r1, r3, #31
 800cff2:	d5d7      	bpl.n	800cfa4 <_printf_float+0x23c>
 800cff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cff8:	4631      	mov	r1, r6
 800cffa:	4628      	mov	r0, r5
 800cffc:	47b8      	blx	r7
 800cffe:	3001      	adds	r0, #1
 800d000:	f43f af0d 	beq.w	800ce1e <_printf_float+0xb6>
 800d004:	f04f 0a00 	mov.w	sl, #0
 800d008:	f104 0b1a 	add.w	fp, r4, #26
 800d00c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d00e:	425b      	negs	r3, r3
 800d010:	4553      	cmp	r3, sl
 800d012:	dc01      	bgt.n	800d018 <_printf_float+0x2b0>
 800d014:	464b      	mov	r3, r9
 800d016:	e793      	b.n	800cf40 <_printf_float+0x1d8>
 800d018:	2301      	movs	r3, #1
 800d01a:	465a      	mov	r2, fp
 800d01c:	4631      	mov	r1, r6
 800d01e:	4628      	mov	r0, r5
 800d020:	47b8      	blx	r7
 800d022:	3001      	adds	r0, #1
 800d024:	f43f aefb 	beq.w	800ce1e <_printf_float+0xb6>
 800d028:	f10a 0a01 	add.w	sl, sl, #1
 800d02c:	e7ee      	b.n	800d00c <_printf_float+0x2a4>
 800d02e:	bf00      	nop
 800d030:	7fefffff 	.word	0x7fefffff
 800d034:	08013724 	.word	0x08013724
 800d038:	08013720 	.word	0x08013720
 800d03c:	0801372c 	.word	0x0801372c
 800d040:	08013728 	.word	0x08013728
 800d044:	08013730 	.word	0x08013730
 800d048:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d04a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d04e:	4553      	cmp	r3, sl
 800d050:	bfa8      	it	ge
 800d052:	4653      	movge	r3, sl
 800d054:	2b00      	cmp	r3, #0
 800d056:	4699      	mov	r9, r3
 800d058:	dc36      	bgt.n	800d0c8 <_printf_float+0x360>
 800d05a:	f04f 0b00 	mov.w	fp, #0
 800d05e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d062:	f104 021a 	add.w	r2, r4, #26
 800d066:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d068:	9306      	str	r3, [sp, #24]
 800d06a:	eba3 0309 	sub.w	r3, r3, r9
 800d06e:	455b      	cmp	r3, fp
 800d070:	dc31      	bgt.n	800d0d6 <_printf_float+0x36e>
 800d072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d074:	459a      	cmp	sl, r3
 800d076:	dc3a      	bgt.n	800d0ee <_printf_float+0x386>
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	07da      	lsls	r2, r3, #31
 800d07c:	d437      	bmi.n	800d0ee <_printf_float+0x386>
 800d07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d080:	ebaa 0903 	sub.w	r9, sl, r3
 800d084:	9b06      	ldr	r3, [sp, #24]
 800d086:	ebaa 0303 	sub.w	r3, sl, r3
 800d08a:	4599      	cmp	r9, r3
 800d08c:	bfa8      	it	ge
 800d08e:	4699      	movge	r9, r3
 800d090:	f1b9 0f00 	cmp.w	r9, #0
 800d094:	dc33      	bgt.n	800d0fe <_printf_float+0x396>
 800d096:	f04f 0800 	mov.w	r8, #0
 800d09a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d09e:	f104 0b1a 	add.w	fp, r4, #26
 800d0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a4:	ebaa 0303 	sub.w	r3, sl, r3
 800d0a8:	eba3 0309 	sub.w	r3, r3, r9
 800d0ac:	4543      	cmp	r3, r8
 800d0ae:	f77f af79 	ble.w	800cfa4 <_printf_float+0x23c>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	465a      	mov	r2, fp
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	47b8      	blx	r7
 800d0bc:	3001      	adds	r0, #1
 800d0be:	f43f aeae 	beq.w	800ce1e <_printf_float+0xb6>
 800d0c2:	f108 0801 	add.w	r8, r8, #1
 800d0c6:	e7ec      	b.n	800d0a2 <_printf_float+0x33a>
 800d0c8:	4642      	mov	r2, r8
 800d0ca:	4631      	mov	r1, r6
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	47b8      	blx	r7
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	d1c2      	bne.n	800d05a <_printf_float+0x2f2>
 800d0d4:	e6a3      	b.n	800ce1e <_printf_float+0xb6>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	4631      	mov	r1, r6
 800d0da:	4628      	mov	r0, r5
 800d0dc:	9206      	str	r2, [sp, #24]
 800d0de:	47b8      	blx	r7
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	f43f ae9c 	beq.w	800ce1e <_printf_float+0xb6>
 800d0e6:	9a06      	ldr	r2, [sp, #24]
 800d0e8:	f10b 0b01 	add.w	fp, fp, #1
 800d0ec:	e7bb      	b.n	800d066 <_printf_float+0x2fe>
 800d0ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0f2:	4631      	mov	r1, r6
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	47b8      	blx	r7
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	d1c0      	bne.n	800d07e <_printf_float+0x316>
 800d0fc:	e68f      	b.n	800ce1e <_printf_float+0xb6>
 800d0fe:	9a06      	ldr	r2, [sp, #24]
 800d100:	464b      	mov	r3, r9
 800d102:	4442      	add	r2, r8
 800d104:	4631      	mov	r1, r6
 800d106:	4628      	mov	r0, r5
 800d108:	47b8      	blx	r7
 800d10a:	3001      	adds	r0, #1
 800d10c:	d1c3      	bne.n	800d096 <_printf_float+0x32e>
 800d10e:	e686      	b.n	800ce1e <_printf_float+0xb6>
 800d110:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d114:	f1ba 0f01 	cmp.w	sl, #1
 800d118:	dc01      	bgt.n	800d11e <_printf_float+0x3b6>
 800d11a:	07db      	lsls	r3, r3, #31
 800d11c:	d536      	bpl.n	800d18c <_printf_float+0x424>
 800d11e:	2301      	movs	r3, #1
 800d120:	4642      	mov	r2, r8
 800d122:	4631      	mov	r1, r6
 800d124:	4628      	mov	r0, r5
 800d126:	47b8      	blx	r7
 800d128:	3001      	adds	r0, #1
 800d12a:	f43f ae78 	beq.w	800ce1e <_printf_float+0xb6>
 800d12e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d132:	4631      	mov	r1, r6
 800d134:	4628      	mov	r0, r5
 800d136:	47b8      	blx	r7
 800d138:	3001      	adds	r0, #1
 800d13a:	f43f ae70 	beq.w	800ce1e <_printf_float+0xb6>
 800d13e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d142:	2200      	movs	r2, #0
 800d144:	2300      	movs	r3, #0
 800d146:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d14a:	f7f3 fcdd 	bl	8000b08 <__aeabi_dcmpeq>
 800d14e:	b9c0      	cbnz	r0, 800d182 <_printf_float+0x41a>
 800d150:	4653      	mov	r3, sl
 800d152:	f108 0201 	add.w	r2, r8, #1
 800d156:	4631      	mov	r1, r6
 800d158:	4628      	mov	r0, r5
 800d15a:	47b8      	blx	r7
 800d15c:	3001      	adds	r0, #1
 800d15e:	d10c      	bne.n	800d17a <_printf_float+0x412>
 800d160:	e65d      	b.n	800ce1e <_printf_float+0xb6>
 800d162:	2301      	movs	r3, #1
 800d164:	465a      	mov	r2, fp
 800d166:	4631      	mov	r1, r6
 800d168:	4628      	mov	r0, r5
 800d16a:	47b8      	blx	r7
 800d16c:	3001      	adds	r0, #1
 800d16e:	f43f ae56 	beq.w	800ce1e <_printf_float+0xb6>
 800d172:	f108 0801 	add.w	r8, r8, #1
 800d176:	45d0      	cmp	r8, sl
 800d178:	dbf3      	blt.n	800d162 <_printf_float+0x3fa>
 800d17a:	464b      	mov	r3, r9
 800d17c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d180:	e6df      	b.n	800cf42 <_printf_float+0x1da>
 800d182:	f04f 0800 	mov.w	r8, #0
 800d186:	f104 0b1a 	add.w	fp, r4, #26
 800d18a:	e7f4      	b.n	800d176 <_printf_float+0x40e>
 800d18c:	2301      	movs	r3, #1
 800d18e:	4642      	mov	r2, r8
 800d190:	e7e1      	b.n	800d156 <_printf_float+0x3ee>
 800d192:	2301      	movs	r3, #1
 800d194:	464a      	mov	r2, r9
 800d196:	4631      	mov	r1, r6
 800d198:	4628      	mov	r0, r5
 800d19a:	47b8      	blx	r7
 800d19c:	3001      	adds	r0, #1
 800d19e:	f43f ae3e 	beq.w	800ce1e <_printf_float+0xb6>
 800d1a2:	f108 0801 	add.w	r8, r8, #1
 800d1a6:	68e3      	ldr	r3, [r4, #12]
 800d1a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1aa:	1a5b      	subs	r3, r3, r1
 800d1ac:	4543      	cmp	r3, r8
 800d1ae:	dcf0      	bgt.n	800d192 <_printf_float+0x42a>
 800d1b0:	e6fc      	b.n	800cfac <_printf_float+0x244>
 800d1b2:	f04f 0800 	mov.w	r8, #0
 800d1b6:	f104 0919 	add.w	r9, r4, #25
 800d1ba:	e7f4      	b.n	800d1a6 <_printf_float+0x43e>

0800d1bc <_printf_common>:
 800d1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c0:	4616      	mov	r6, r2
 800d1c2:	4698      	mov	r8, r3
 800d1c4:	688a      	ldr	r2, [r1, #8]
 800d1c6:	690b      	ldr	r3, [r1, #16]
 800d1c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	bfb8      	it	lt
 800d1d0:	4613      	movlt	r3, r2
 800d1d2:	6033      	str	r3, [r6, #0]
 800d1d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1d8:	4607      	mov	r7, r0
 800d1da:	460c      	mov	r4, r1
 800d1dc:	b10a      	cbz	r2, 800d1e2 <_printf_common+0x26>
 800d1de:	3301      	adds	r3, #1
 800d1e0:	6033      	str	r3, [r6, #0]
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	0699      	lsls	r1, r3, #26
 800d1e6:	bf42      	ittt	mi
 800d1e8:	6833      	ldrmi	r3, [r6, #0]
 800d1ea:	3302      	addmi	r3, #2
 800d1ec:	6033      	strmi	r3, [r6, #0]
 800d1ee:	6825      	ldr	r5, [r4, #0]
 800d1f0:	f015 0506 	ands.w	r5, r5, #6
 800d1f4:	d106      	bne.n	800d204 <_printf_common+0x48>
 800d1f6:	f104 0a19 	add.w	sl, r4, #25
 800d1fa:	68e3      	ldr	r3, [r4, #12]
 800d1fc:	6832      	ldr	r2, [r6, #0]
 800d1fe:	1a9b      	subs	r3, r3, r2
 800d200:	42ab      	cmp	r3, r5
 800d202:	dc26      	bgt.n	800d252 <_printf_common+0x96>
 800d204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d208:	6822      	ldr	r2, [r4, #0]
 800d20a:	3b00      	subs	r3, #0
 800d20c:	bf18      	it	ne
 800d20e:	2301      	movne	r3, #1
 800d210:	0692      	lsls	r2, r2, #26
 800d212:	d42b      	bmi.n	800d26c <_printf_common+0xb0>
 800d214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d218:	4641      	mov	r1, r8
 800d21a:	4638      	mov	r0, r7
 800d21c:	47c8      	blx	r9
 800d21e:	3001      	adds	r0, #1
 800d220:	d01e      	beq.n	800d260 <_printf_common+0xa4>
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	6922      	ldr	r2, [r4, #16]
 800d226:	f003 0306 	and.w	r3, r3, #6
 800d22a:	2b04      	cmp	r3, #4
 800d22c:	bf02      	ittt	eq
 800d22e:	68e5      	ldreq	r5, [r4, #12]
 800d230:	6833      	ldreq	r3, [r6, #0]
 800d232:	1aed      	subeq	r5, r5, r3
 800d234:	68a3      	ldr	r3, [r4, #8]
 800d236:	bf0c      	ite	eq
 800d238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d23c:	2500      	movne	r5, #0
 800d23e:	4293      	cmp	r3, r2
 800d240:	bfc4      	itt	gt
 800d242:	1a9b      	subgt	r3, r3, r2
 800d244:	18ed      	addgt	r5, r5, r3
 800d246:	2600      	movs	r6, #0
 800d248:	341a      	adds	r4, #26
 800d24a:	42b5      	cmp	r5, r6
 800d24c:	d11a      	bne.n	800d284 <_printf_common+0xc8>
 800d24e:	2000      	movs	r0, #0
 800d250:	e008      	b.n	800d264 <_printf_common+0xa8>
 800d252:	2301      	movs	r3, #1
 800d254:	4652      	mov	r2, sl
 800d256:	4641      	mov	r1, r8
 800d258:	4638      	mov	r0, r7
 800d25a:	47c8      	blx	r9
 800d25c:	3001      	adds	r0, #1
 800d25e:	d103      	bne.n	800d268 <_printf_common+0xac>
 800d260:	f04f 30ff 	mov.w	r0, #4294967295
 800d264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d268:	3501      	adds	r5, #1
 800d26a:	e7c6      	b.n	800d1fa <_printf_common+0x3e>
 800d26c:	18e1      	adds	r1, r4, r3
 800d26e:	1c5a      	adds	r2, r3, #1
 800d270:	2030      	movs	r0, #48	@ 0x30
 800d272:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d276:	4422      	add	r2, r4
 800d278:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d27c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d280:	3302      	adds	r3, #2
 800d282:	e7c7      	b.n	800d214 <_printf_common+0x58>
 800d284:	2301      	movs	r3, #1
 800d286:	4622      	mov	r2, r4
 800d288:	4641      	mov	r1, r8
 800d28a:	4638      	mov	r0, r7
 800d28c:	47c8      	blx	r9
 800d28e:	3001      	adds	r0, #1
 800d290:	d0e6      	beq.n	800d260 <_printf_common+0xa4>
 800d292:	3601      	adds	r6, #1
 800d294:	e7d9      	b.n	800d24a <_printf_common+0x8e>
	...

0800d298 <_printf_i>:
 800d298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d29c:	7e0f      	ldrb	r7, [r1, #24]
 800d29e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2a0:	2f78      	cmp	r7, #120	@ 0x78
 800d2a2:	4691      	mov	r9, r2
 800d2a4:	4680      	mov	r8, r0
 800d2a6:	460c      	mov	r4, r1
 800d2a8:	469a      	mov	sl, r3
 800d2aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d2ae:	d807      	bhi.n	800d2c0 <_printf_i+0x28>
 800d2b0:	2f62      	cmp	r7, #98	@ 0x62
 800d2b2:	d80a      	bhi.n	800d2ca <_printf_i+0x32>
 800d2b4:	2f00      	cmp	r7, #0
 800d2b6:	f000 80d1 	beq.w	800d45c <_printf_i+0x1c4>
 800d2ba:	2f58      	cmp	r7, #88	@ 0x58
 800d2bc:	f000 80b8 	beq.w	800d430 <_printf_i+0x198>
 800d2c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2c8:	e03a      	b.n	800d340 <_printf_i+0xa8>
 800d2ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2ce:	2b15      	cmp	r3, #21
 800d2d0:	d8f6      	bhi.n	800d2c0 <_printf_i+0x28>
 800d2d2:	a101      	add	r1, pc, #4	@ (adr r1, 800d2d8 <_printf_i+0x40>)
 800d2d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2d8:	0800d331 	.word	0x0800d331
 800d2dc:	0800d345 	.word	0x0800d345
 800d2e0:	0800d2c1 	.word	0x0800d2c1
 800d2e4:	0800d2c1 	.word	0x0800d2c1
 800d2e8:	0800d2c1 	.word	0x0800d2c1
 800d2ec:	0800d2c1 	.word	0x0800d2c1
 800d2f0:	0800d345 	.word	0x0800d345
 800d2f4:	0800d2c1 	.word	0x0800d2c1
 800d2f8:	0800d2c1 	.word	0x0800d2c1
 800d2fc:	0800d2c1 	.word	0x0800d2c1
 800d300:	0800d2c1 	.word	0x0800d2c1
 800d304:	0800d443 	.word	0x0800d443
 800d308:	0800d36f 	.word	0x0800d36f
 800d30c:	0800d3fd 	.word	0x0800d3fd
 800d310:	0800d2c1 	.word	0x0800d2c1
 800d314:	0800d2c1 	.word	0x0800d2c1
 800d318:	0800d465 	.word	0x0800d465
 800d31c:	0800d2c1 	.word	0x0800d2c1
 800d320:	0800d36f 	.word	0x0800d36f
 800d324:	0800d2c1 	.word	0x0800d2c1
 800d328:	0800d2c1 	.word	0x0800d2c1
 800d32c:	0800d405 	.word	0x0800d405
 800d330:	6833      	ldr	r3, [r6, #0]
 800d332:	1d1a      	adds	r2, r3, #4
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6032      	str	r2, [r6, #0]
 800d338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d33c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d340:	2301      	movs	r3, #1
 800d342:	e09c      	b.n	800d47e <_printf_i+0x1e6>
 800d344:	6833      	ldr	r3, [r6, #0]
 800d346:	6820      	ldr	r0, [r4, #0]
 800d348:	1d19      	adds	r1, r3, #4
 800d34a:	6031      	str	r1, [r6, #0]
 800d34c:	0606      	lsls	r6, r0, #24
 800d34e:	d501      	bpl.n	800d354 <_printf_i+0xbc>
 800d350:	681d      	ldr	r5, [r3, #0]
 800d352:	e003      	b.n	800d35c <_printf_i+0xc4>
 800d354:	0645      	lsls	r5, r0, #25
 800d356:	d5fb      	bpl.n	800d350 <_printf_i+0xb8>
 800d358:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d35c:	2d00      	cmp	r5, #0
 800d35e:	da03      	bge.n	800d368 <_printf_i+0xd0>
 800d360:	232d      	movs	r3, #45	@ 0x2d
 800d362:	426d      	negs	r5, r5
 800d364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d368:	4858      	ldr	r0, [pc, #352]	@ (800d4cc <_printf_i+0x234>)
 800d36a:	230a      	movs	r3, #10
 800d36c:	e011      	b.n	800d392 <_printf_i+0xfa>
 800d36e:	6821      	ldr	r1, [r4, #0]
 800d370:	6833      	ldr	r3, [r6, #0]
 800d372:	0608      	lsls	r0, r1, #24
 800d374:	f853 5b04 	ldr.w	r5, [r3], #4
 800d378:	d402      	bmi.n	800d380 <_printf_i+0xe8>
 800d37a:	0649      	lsls	r1, r1, #25
 800d37c:	bf48      	it	mi
 800d37e:	b2ad      	uxthmi	r5, r5
 800d380:	2f6f      	cmp	r7, #111	@ 0x6f
 800d382:	4852      	ldr	r0, [pc, #328]	@ (800d4cc <_printf_i+0x234>)
 800d384:	6033      	str	r3, [r6, #0]
 800d386:	bf14      	ite	ne
 800d388:	230a      	movne	r3, #10
 800d38a:	2308      	moveq	r3, #8
 800d38c:	2100      	movs	r1, #0
 800d38e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d392:	6866      	ldr	r6, [r4, #4]
 800d394:	60a6      	str	r6, [r4, #8]
 800d396:	2e00      	cmp	r6, #0
 800d398:	db05      	blt.n	800d3a6 <_printf_i+0x10e>
 800d39a:	6821      	ldr	r1, [r4, #0]
 800d39c:	432e      	orrs	r6, r5
 800d39e:	f021 0104 	bic.w	r1, r1, #4
 800d3a2:	6021      	str	r1, [r4, #0]
 800d3a4:	d04b      	beq.n	800d43e <_printf_i+0x1a6>
 800d3a6:	4616      	mov	r6, r2
 800d3a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3ac:	fb03 5711 	mls	r7, r3, r1, r5
 800d3b0:	5dc7      	ldrb	r7, [r0, r7]
 800d3b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3b6:	462f      	mov	r7, r5
 800d3b8:	42bb      	cmp	r3, r7
 800d3ba:	460d      	mov	r5, r1
 800d3bc:	d9f4      	bls.n	800d3a8 <_printf_i+0x110>
 800d3be:	2b08      	cmp	r3, #8
 800d3c0:	d10b      	bne.n	800d3da <_printf_i+0x142>
 800d3c2:	6823      	ldr	r3, [r4, #0]
 800d3c4:	07df      	lsls	r7, r3, #31
 800d3c6:	d508      	bpl.n	800d3da <_printf_i+0x142>
 800d3c8:	6923      	ldr	r3, [r4, #16]
 800d3ca:	6861      	ldr	r1, [r4, #4]
 800d3cc:	4299      	cmp	r1, r3
 800d3ce:	bfde      	ittt	le
 800d3d0:	2330      	movle	r3, #48	@ 0x30
 800d3d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3da:	1b92      	subs	r2, r2, r6
 800d3dc:	6122      	str	r2, [r4, #16]
 800d3de:	f8cd a000 	str.w	sl, [sp]
 800d3e2:	464b      	mov	r3, r9
 800d3e4:	aa03      	add	r2, sp, #12
 800d3e6:	4621      	mov	r1, r4
 800d3e8:	4640      	mov	r0, r8
 800d3ea:	f7ff fee7 	bl	800d1bc <_printf_common>
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	d14a      	bne.n	800d488 <_printf_i+0x1f0>
 800d3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f6:	b004      	add	sp, #16
 800d3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	f043 0320 	orr.w	r3, r3, #32
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	4832      	ldr	r0, [pc, #200]	@ (800d4d0 <_printf_i+0x238>)
 800d406:	2778      	movs	r7, #120	@ 0x78
 800d408:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	6831      	ldr	r1, [r6, #0]
 800d410:	061f      	lsls	r7, r3, #24
 800d412:	f851 5b04 	ldr.w	r5, [r1], #4
 800d416:	d402      	bmi.n	800d41e <_printf_i+0x186>
 800d418:	065f      	lsls	r7, r3, #25
 800d41a:	bf48      	it	mi
 800d41c:	b2ad      	uxthmi	r5, r5
 800d41e:	6031      	str	r1, [r6, #0]
 800d420:	07d9      	lsls	r1, r3, #31
 800d422:	bf44      	itt	mi
 800d424:	f043 0320 	orrmi.w	r3, r3, #32
 800d428:	6023      	strmi	r3, [r4, #0]
 800d42a:	b11d      	cbz	r5, 800d434 <_printf_i+0x19c>
 800d42c:	2310      	movs	r3, #16
 800d42e:	e7ad      	b.n	800d38c <_printf_i+0xf4>
 800d430:	4826      	ldr	r0, [pc, #152]	@ (800d4cc <_printf_i+0x234>)
 800d432:	e7e9      	b.n	800d408 <_printf_i+0x170>
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	f023 0320 	bic.w	r3, r3, #32
 800d43a:	6023      	str	r3, [r4, #0]
 800d43c:	e7f6      	b.n	800d42c <_printf_i+0x194>
 800d43e:	4616      	mov	r6, r2
 800d440:	e7bd      	b.n	800d3be <_printf_i+0x126>
 800d442:	6833      	ldr	r3, [r6, #0]
 800d444:	6825      	ldr	r5, [r4, #0]
 800d446:	6961      	ldr	r1, [r4, #20]
 800d448:	1d18      	adds	r0, r3, #4
 800d44a:	6030      	str	r0, [r6, #0]
 800d44c:	062e      	lsls	r6, r5, #24
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	d501      	bpl.n	800d456 <_printf_i+0x1be>
 800d452:	6019      	str	r1, [r3, #0]
 800d454:	e002      	b.n	800d45c <_printf_i+0x1c4>
 800d456:	0668      	lsls	r0, r5, #25
 800d458:	d5fb      	bpl.n	800d452 <_printf_i+0x1ba>
 800d45a:	8019      	strh	r1, [r3, #0]
 800d45c:	2300      	movs	r3, #0
 800d45e:	6123      	str	r3, [r4, #16]
 800d460:	4616      	mov	r6, r2
 800d462:	e7bc      	b.n	800d3de <_printf_i+0x146>
 800d464:	6833      	ldr	r3, [r6, #0]
 800d466:	1d1a      	adds	r2, r3, #4
 800d468:	6032      	str	r2, [r6, #0]
 800d46a:	681e      	ldr	r6, [r3, #0]
 800d46c:	6862      	ldr	r2, [r4, #4]
 800d46e:	2100      	movs	r1, #0
 800d470:	4630      	mov	r0, r6
 800d472:	f7f2 fecd 	bl	8000210 <memchr>
 800d476:	b108      	cbz	r0, 800d47c <_printf_i+0x1e4>
 800d478:	1b80      	subs	r0, r0, r6
 800d47a:	6060      	str	r0, [r4, #4]
 800d47c:	6863      	ldr	r3, [r4, #4]
 800d47e:	6123      	str	r3, [r4, #16]
 800d480:	2300      	movs	r3, #0
 800d482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d486:	e7aa      	b.n	800d3de <_printf_i+0x146>
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	4632      	mov	r2, r6
 800d48c:	4649      	mov	r1, r9
 800d48e:	4640      	mov	r0, r8
 800d490:	47d0      	blx	sl
 800d492:	3001      	adds	r0, #1
 800d494:	d0ad      	beq.n	800d3f2 <_printf_i+0x15a>
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	079b      	lsls	r3, r3, #30
 800d49a:	d413      	bmi.n	800d4c4 <_printf_i+0x22c>
 800d49c:	68e0      	ldr	r0, [r4, #12]
 800d49e:	9b03      	ldr	r3, [sp, #12]
 800d4a0:	4298      	cmp	r0, r3
 800d4a2:	bfb8      	it	lt
 800d4a4:	4618      	movlt	r0, r3
 800d4a6:	e7a6      	b.n	800d3f6 <_printf_i+0x15e>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	4632      	mov	r2, r6
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	47d0      	blx	sl
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	d09d      	beq.n	800d3f2 <_printf_i+0x15a>
 800d4b6:	3501      	adds	r5, #1
 800d4b8:	68e3      	ldr	r3, [r4, #12]
 800d4ba:	9903      	ldr	r1, [sp, #12]
 800d4bc:	1a5b      	subs	r3, r3, r1
 800d4be:	42ab      	cmp	r3, r5
 800d4c0:	dcf2      	bgt.n	800d4a8 <_printf_i+0x210>
 800d4c2:	e7eb      	b.n	800d49c <_printf_i+0x204>
 800d4c4:	2500      	movs	r5, #0
 800d4c6:	f104 0619 	add.w	r6, r4, #25
 800d4ca:	e7f5      	b.n	800d4b8 <_printf_i+0x220>
 800d4cc:	08013732 	.word	0x08013732
 800d4d0:	08013743 	.word	0x08013743

0800d4d4 <_scanf_float>:
 800d4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d8:	b087      	sub	sp, #28
 800d4da:	4691      	mov	r9, r2
 800d4dc:	9303      	str	r3, [sp, #12]
 800d4de:	688b      	ldr	r3, [r1, #8]
 800d4e0:	1e5a      	subs	r2, r3, #1
 800d4e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d4e6:	bf81      	itttt	hi
 800d4e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d4ec:	eb03 0b05 	addhi.w	fp, r3, r5
 800d4f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d4f4:	608b      	strhi	r3, [r1, #8]
 800d4f6:	680b      	ldr	r3, [r1, #0]
 800d4f8:	460a      	mov	r2, r1
 800d4fa:	f04f 0500 	mov.w	r5, #0
 800d4fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d502:	f842 3b1c 	str.w	r3, [r2], #28
 800d506:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d50a:	4680      	mov	r8, r0
 800d50c:	460c      	mov	r4, r1
 800d50e:	bf98      	it	ls
 800d510:	f04f 0b00 	movls.w	fp, #0
 800d514:	9201      	str	r2, [sp, #4]
 800d516:	4616      	mov	r6, r2
 800d518:	46aa      	mov	sl, r5
 800d51a:	462f      	mov	r7, r5
 800d51c:	9502      	str	r5, [sp, #8]
 800d51e:	68a2      	ldr	r2, [r4, #8]
 800d520:	b15a      	cbz	r2, 800d53a <_scanf_float+0x66>
 800d522:	f8d9 3000 	ldr.w	r3, [r9]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	2b4e      	cmp	r3, #78	@ 0x4e
 800d52a:	d863      	bhi.n	800d5f4 <_scanf_float+0x120>
 800d52c:	2b40      	cmp	r3, #64	@ 0x40
 800d52e:	d83b      	bhi.n	800d5a8 <_scanf_float+0xd4>
 800d530:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d534:	b2c8      	uxtb	r0, r1
 800d536:	280e      	cmp	r0, #14
 800d538:	d939      	bls.n	800d5ae <_scanf_float+0xda>
 800d53a:	b11f      	cbz	r7, 800d544 <_scanf_float+0x70>
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d542:	6023      	str	r3, [r4, #0]
 800d544:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d548:	f1ba 0f01 	cmp.w	sl, #1
 800d54c:	f200 8114 	bhi.w	800d778 <_scanf_float+0x2a4>
 800d550:	9b01      	ldr	r3, [sp, #4]
 800d552:	429e      	cmp	r6, r3
 800d554:	f200 8105 	bhi.w	800d762 <_scanf_float+0x28e>
 800d558:	2001      	movs	r0, #1
 800d55a:	b007      	add	sp, #28
 800d55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d560:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d564:	2a0d      	cmp	r2, #13
 800d566:	d8e8      	bhi.n	800d53a <_scanf_float+0x66>
 800d568:	a101      	add	r1, pc, #4	@ (adr r1, 800d570 <_scanf_float+0x9c>)
 800d56a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d56e:	bf00      	nop
 800d570:	0800d6b9 	.word	0x0800d6b9
 800d574:	0800d53b 	.word	0x0800d53b
 800d578:	0800d53b 	.word	0x0800d53b
 800d57c:	0800d53b 	.word	0x0800d53b
 800d580:	0800d715 	.word	0x0800d715
 800d584:	0800d6ef 	.word	0x0800d6ef
 800d588:	0800d53b 	.word	0x0800d53b
 800d58c:	0800d53b 	.word	0x0800d53b
 800d590:	0800d6c7 	.word	0x0800d6c7
 800d594:	0800d53b 	.word	0x0800d53b
 800d598:	0800d53b 	.word	0x0800d53b
 800d59c:	0800d53b 	.word	0x0800d53b
 800d5a0:	0800d53b 	.word	0x0800d53b
 800d5a4:	0800d683 	.word	0x0800d683
 800d5a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d5ac:	e7da      	b.n	800d564 <_scanf_float+0x90>
 800d5ae:	290e      	cmp	r1, #14
 800d5b0:	d8c3      	bhi.n	800d53a <_scanf_float+0x66>
 800d5b2:	a001      	add	r0, pc, #4	@ (adr r0, 800d5b8 <_scanf_float+0xe4>)
 800d5b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d5b8:	0800d673 	.word	0x0800d673
 800d5bc:	0800d53b 	.word	0x0800d53b
 800d5c0:	0800d673 	.word	0x0800d673
 800d5c4:	0800d703 	.word	0x0800d703
 800d5c8:	0800d53b 	.word	0x0800d53b
 800d5cc:	0800d615 	.word	0x0800d615
 800d5d0:	0800d659 	.word	0x0800d659
 800d5d4:	0800d659 	.word	0x0800d659
 800d5d8:	0800d659 	.word	0x0800d659
 800d5dc:	0800d659 	.word	0x0800d659
 800d5e0:	0800d659 	.word	0x0800d659
 800d5e4:	0800d659 	.word	0x0800d659
 800d5e8:	0800d659 	.word	0x0800d659
 800d5ec:	0800d659 	.word	0x0800d659
 800d5f0:	0800d659 	.word	0x0800d659
 800d5f4:	2b6e      	cmp	r3, #110	@ 0x6e
 800d5f6:	d809      	bhi.n	800d60c <_scanf_float+0x138>
 800d5f8:	2b60      	cmp	r3, #96	@ 0x60
 800d5fa:	d8b1      	bhi.n	800d560 <_scanf_float+0x8c>
 800d5fc:	2b54      	cmp	r3, #84	@ 0x54
 800d5fe:	d07b      	beq.n	800d6f8 <_scanf_float+0x224>
 800d600:	2b59      	cmp	r3, #89	@ 0x59
 800d602:	d19a      	bne.n	800d53a <_scanf_float+0x66>
 800d604:	2d07      	cmp	r5, #7
 800d606:	d198      	bne.n	800d53a <_scanf_float+0x66>
 800d608:	2508      	movs	r5, #8
 800d60a:	e02f      	b.n	800d66c <_scanf_float+0x198>
 800d60c:	2b74      	cmp	r3, #116	@ 0x74
 800d60e:	d073      	beq.n	800d6f8 <_scanf_float+0x224>
 800d610:	2b79      	cmp	r3, #121	@ 0x79
 800d612:	e7f6      	b.n	800d602 <_scanf_float+0x12e>
 800d614:	6821      	ldr	r1, [r4, #0]
 800d616:	05c8      	lsls	r0, r1, #23
 800d618:	d51e      	bpl.n	800d658 <_scanf_float+0x184>
 800d61a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d61e:	6021      	str	r1, [r4, #0]
 800d620:	3701      	adds	r7, #1
 800d622:	f1bb 0f00 	cmp.w	fp, #0
 800d626:	d003      	beq.n	800d630 <_scanf_float+0x15c>
 800d628:	3201      	adds	r2, #1
 800d62a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d62e:	60a2      	str	r2, [r4, #8]
 800d630:	68a3      	ldr	r3, [r4, #8]
 800d632:	3b01      	subs	r3, #1
 800d634:	60a3      	str	r3, [r4, #8]
 800d636:	6923      	ldr	r3, [r4, #16]
 800d638:	3301      	adds	r3, #1
 800d63a:	6123      	str	r3, [r4, #16]
 800d63c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d640:	3b01      	subs	r3, #1
 800d642:	2b00      	cmp	r3, #0
 800d644:	f8c9 3004 	str.w	r3, [r9, #4]
 800d648:	f340 8082 	ble.w	800d750 <_scanf_float+0x27c>
 800d64c:	f8d9 3000 	ldr.w	r3, [r9]
 800d650:	3301      	adds	r3, #1
 800d652:	f8c9 3000 	str.w	r3, [r9]
 800d656:	e762      	b.n	800d51e <_scanf_float+0x4a>
 800d658:	eb1a 0105 	adds.w	r1, sl, r5
 800d65c:	f47f af6d 	bne.w	800d53a <_scanf_float+0x66>
 800d660:	6822      	ldr	r2, [r4, #0]
 800d662:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d666:	6022      	str	r2, [r4, #0]
 800d668:	460d      	mov	r5, r1
 800d66a:	468a      	mov	sl, r1
 800d66c:	f806 3b01 	strb.w	r3, [r6], #1
 800d670:	e7de      	b.n	800d630 <_scanf_float+0x15c>
 800d672:	6822      	ldr	r2, [r4, #0]
 800d674:	0610      	lsls	r0, r2, #24
 800d676:	f57f af60 	bpl.w	800d53a <_scanf_float+0x66>
 800d67a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d67e:	6022      	str	r2, [r4, #0]
 800d680:	e7f4      	b.n	800d66c <_scanf_float+0x198>
 800d682:	f1ba 0f00 	cmp.w	sl, #0
 800d686:	d10c      	bne.n	800d6a2 <_scanf_float+0x1ce>
 800d688:	b977      	cbnz	r7, 800d6a8 <_scanf_float+0x1d4>
 800d68a:	6822      	ldr	r2, [r4, #0]
 800d68c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d690:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d694:	d108      	bne.n	800d6a8 <_scanf_float+0x1d4>
 800d696:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d69a:	6022      	str	r2, [r4, #0]
 800d69c:	f04f 0a01 	mov.w	sl, #1
 800d6a0:	e7e4      	b.n	800d66c <_scanf_float+0x198>
 800d6a2:	f1ba 0f02 	cmp.w	sl, #2
 800d6a6:	d050      	beq.n	800d74a <_scanf_float+0x276>
 800d6a8:	2d01      	cmp	r5, #1
 800d6aa:	d002      	beq.n	800d6b2 <_scanf_float+0x1de>
 800d6ac:	2d04      	cmp	r5, #4
 800d6ae:	f47f af44 	bne.w	800d53a <_scanf_float+0x66>
 800d6b2:	3501      	adds	r5, #1
 800d6b4:	b2ed      	uxtb	r5, r5
 800d6b6:	e7d9      	b.n	800d66c <_scanf_float+0x198>
 800d6b8:	f1ba 0f01 	cmp.w	sl, #1
 800d6bc:	f47f af3d 	bne.w	800d53a <_scanf_float+0x66>
 800d6c0:	f04f 0a02 	mov.w	sl, #2
 800d6c4:	e7d2      	b.n	800d66c <_scanf_float+0x198>
 800d6c6:	b975      	cbnz	r5, 800d6e6 <_scanf_float+0x212>
 800d6c8:	2f00      	cmp	r7, #0
 800d6ca:	f47f af37 	bne.w	800d53c <_scanf_float+0x68>
 800d6ce:	6822      	ldr	r2, [r4, #0]
 800d6d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d6d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d6d8:	f040 8103 	bne.w	800d8e2 <_scanf_float+0x40e>
 800d6dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d6e0:	6022      	str	r2, [r4, #0]
 800d6e2:	2501      	movs	r5, #1
 800d6e4:	e7c2      	b.n	800d66c <_scanf_float+0x198>
 800d6e6:	2d03      	cmp	r5, #3
 800d6e8:	d0e3      	beq.n	800d6b2 <_scanf_float+0x1de>
 800d6ea:	2d05      	cmp	r5, #5
 800d6ec:	e7df      	b.n	800d6ae <_scanf_float+0x1da>
 800d6ee:	2d02      	cmp	r5, #2
 800d6f0:	f47f af23 	bne.w	800d53a <_scanf_float+0x66>
 800d6f4:	2503      	movs	r5, #3
 800d6f6:	e7b9      	b.n	800d66c <_scanf_float+0x198>
 800d6f8:	2d06      	cmp	r5, #6
 800d6fa:	f47f af1e 	bne.w	800d53a <_scanf_float+0x66>
 800d6fe:	2507      	movs	r5, #7
 800d700:	e7b4      	b.n	800d66c <_scanf_float+0x198>
 800d702:	6822      	ldr	r2, [r4, #0]
 800d704:	0591      	lsls	r1, r2, #22
 800d706:	f57f af18 	bpl.w	800d53a <_scanf_float+0x66>
 800d70a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d70e:	6022      	str	r2, [r4, #0]
 800d710:	9702      	str	r7, [sp, #8]
 800d712:	e7ab      	b.n	800d66c <_scanf_float+0x198>
 800d714:	6822      	ldr	r2, [r4, #0]
 800d716:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d71a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d71e:	d005      	beq.n	800d72c <_scanf_float+0x258>
 800d720:	0550      	lsls	r0, r2, #21
 800d722:	f57f af0a 	bpl.w	800d53a <_scanf_float+0x66>
 800d726:	2f00      	cmp	r7, #0
 800d728:	f000 80db 	beq.w	800d8e2 <_scanf_float+0x40e>
 800d72c:	0591      	lsls	r1, r2, #22
 800d72e:	bf58      	it	pl
 800d730:	9902      	ldrpl	r1, [sp, #8]
 800d732:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d736:	bf58      	it	pl
 800d738:	1a79      	subpl	r1, r7, r1
 800d73a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d73e:	bf58      	it	pl
 800d740:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d744:	6022      	str	r2, [r4, #0]
 800d746:	2700      	movs	r7, #0
 800d748:	e790      	b.n	800d66c <_scanf_float+0x198>
 800d74a:	f04f 0a03 	mov.w	sl, #3
 800d74e:	e78d      	b.n	800d66c <_scanf_float+0x198>
 800d750:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d754:	4649      	mov	r1, r9
 800d756:	4640      	mov	r0, r8
 800d758:	4798      	blx	r3
 800d75a:	2800      	cmp	r0, #0
 800d75c:	f43f aedf 	beq.w	800d51e <_scanf_float+0x4a>
 800d760:	e6eb      	b.n	800d53a <_scanf_float+0x66>
 800d762:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d76a:	464a      	mov	r2, r9
 800d76c:	4640      	mov	r0, r8
 800d76e:	4798      	blx	r3
 800d770:	6923      	ldr	r3, [r4, #16]
 800d772:	3b01      	subs	r3, #1
 800d774:	6123      	str	r3, [r4, #16]
 800d776:	e6eb      	b.n	800d550 <_scanf_float+0x7c>
 800d778:	1e6b      	subs	r3, r5, #1
 800d77a:	2b06      	cmp	r3, #6
 800d77c:	d824      	bhi.n	800d7c8 <_scanf_float+0x2f4>
 800d77e:	2d02      	cmp	r5, #2
 800d780:	d836      	bhi.n	800d7f0 <_scanf_float+0x31c>
 800d782:	9b01      	ldr	r3, [sp, #4]
 800d784:	429e      	cmp	r6, r3
 800d786:	f67f aee7 	bls.w	800d558 <_scanf_float+0x84>
 800d78a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d78e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d792:	464a      	mov	r2, r9
 800d794:	4640      	mov	r0, r8
 800d796:	4798      	blx	r3
 800d798:	6923      	ldr	r3, [r4, #16]
 800d79a:	3b01      	subs	r3, #1
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	e7f0      	b.n	800d782 <_scanf_float+0x2ae>
 800d7a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d7a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d7a8:	464a      	mov	r2, r9
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	4798      	blx	r3
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	6123      	str	r3, [r4, #16]
 800d7b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7b8:	fa5f fa8a 	uxtb.w	sl, sl
 800d7bc:	f1ba 0f02 	cmp.w	sl, #2
 800d7c0:	d1ee      	bne.n	800d7a0 <_scanf_float+0x2cc>
 800d7c2:	3d03      	subs	r5, #3
 800d7c4:	b2ed      	uxtb	r5, r5
 800d7c6:	1b76      	subs	r6, r6, r5
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	05da      	lsls	r2, r3, #23
 800d7cc:	d530      	bpl.n	800d830 <_scanf_float+0x35c>
 800d7ce:	055b      	lsls	r3, r3, #21
 800d7d0:	d511      	bpl.n	800d7f6 <_scanf_float+0x322>
 800d7d2:	9b01      	ldr	r3, [sp, #4]
 800d7d4:	429e      	cmp	r6, r3
 800d7d6:	f67f aebf 	bls.w	800d558 <_scanf_float+0x84>
 800d7da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d7de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d7e2:	464a      	mov	r2, r9
 800d7e4:	4640      	mov	r0, r8
 800d7e6:	4798      	blx	r3
 800d7e8:	6923      	ldr	r3, [r4, #16]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	6123      	str	r3, [r4, #16]
 800d7ee:	e7f0      	b.n	800d7d2 <_scanf_float+0x2fe>
 800d7f0:	46aa      	mov	sl, r5
 800d7f2:	46b3      	mov	fp, r6
 800d7f4:	e7de      	b.n	800d7b4 <_scanf_float+0x2e0>
 800d7f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d7fa:	6923      	ldr	r3, [r4, #16]
 800d7fc:	2965      	cmp	r1, #101	@ 0x65
 800d7fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800d802:	f106 35ff 	add.w	r5, r6, #4294967295
 800d806:	6123      	str	r3, [r4, #16]
 800d808:	d00c      	beq.n	800d824 <_scanf_float+0x350>
 800d80a:	2945      	cmp	r1, #69	@ 0x45
 800d80c:	d00a      	beq.n	800d824 <_scanf_float+0x350>
 800d80e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d812:	464a      	mov	r2, r9
 800d814:	4640      	mov	r0, r8
 800d816:	4798      	blx	r3
 800d818:	6923      	ldr	r3, [r4, #16]
 800d81a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d81e:	3b01      	subs	r3, #1
 800d820:	1eb5      	subs	r5, r6, #2
 800d822:	6123      	str	r3, [r4, #16]
 800d824:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d828:	464a      	mov	r2, r9
 800d82a:	4640      	mov	r0, r8
 800d82c:	4798      	blx	r3
 800d82e:	462e      	mov	r6, r5
 800d830:	6822      	ldr	r2, [r4, #0]
 800d832:	f012 0210 	ands.w	r2, r2, #16
 800d836:	d001      	beq.n	800d83c <_scanf_float+0x368>
 800d838:	2000      	movs	r0, #0
 800d83a:	e68e      	b.n	800d55a <_scanf_float+0x86>
 800d83c:	7032      	strb	r2, [r6, #0]
 800d83e:	6823      	ldr	r3, [r4, #0]
 800d840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d848:	d125      	bne.n	800d896 <_scanf_float+0x3c2>
 800d84a:	9b02      	ldr	r3, [sp, #8]
 800d84c:	429f      	cmp	r7, r3
 800d84e:	d00a      	beq.n	800d866 <_scanf_float+0x392>
 800d850:	1bda      	subs	r2, r3, r7
 800d852:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d856:	429e      	cmp	r6, r3
 800d858:	bf28      	it	cs
 800d85a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d85e:	4922      	ldr	r1, [pc, #136]	@ (800d8e8 <_scanf_float+0x414>)
 800d860:	4630      	mov	r0, r6
 800d862:	f000 f93d 	bl	800dae0 <siprintf>
 800d866:	9901      	ldr	r1, [sp, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	4640      	mov	r0, r8
 800d86c:	f002 fc74 	bl	8010158 <_strtod_r>
 800d870:	9b03      	ldr	r3, [sp, #12]
 800d872:	6821      	ldr	r1, [r4, #0]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f011 0f02 	tst.w	r1, #2
 800d87a:	ec57 6b10 	vmov	r6, r7, d0
 800d87e:	f103 0204 	add.w	r2, r3, #4
 800d882:	d015      	beq.n	800d8b0 <_scanf_float+0x3dc>
 800d884:	9903      	ldr	r1, [sp, #12]
 800d886:	600a      	str	r2, [r1, #0]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	e9c3 6700 	strd	r6, r7, [r3]
 800d88e:	68e3      	ldr	r3, [r4, #12]
 800d890:	3301      	adds	r3, #1
 800d892:	60e3      	str	r3, [r4, #12]
 800d894:	e7d0      	b.n	800d838 <_scanf_float+0x364>
 800d896:	9b04      	ldr	r3, [sp, #16]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d0e4      	beq.n	800d866 <_scanf_float+0x392>
 800d89c:	9905      	ldr	r1, [sp, #20]
 800d89e:	230a      	movs	r3, #10
 800d8a0:	3101      	adds	r1, #1
 800d8a2:	4640      	mov	r0, r8
 800d8a4:	f002 fcd8 	bl	8010258 <_strtol_r>
 800d8a8:	9b04      	ldr	r3, [sp, #16]
 800d8aa:	9e05      	ldr	r6, [sp, #20]
 800d8ac:	1ac2      	subs	r2, r0, r3
 800d8ae:	e7d0      	b.n	800d852 <_scanf_float+0x37e>
 800d8b0:	f011 0f04 	tst.w	r1, #4
 800d8b4:	9903      	ldr	r1, [sp, #12]
 800d8b6:	600a      	str	r2, [r1, #0]
 800d8b8:	d1e6      	bne.n	800d888 <_scanf_float+0x3b4>
 800d8ba:	681d      	ldr	r5, [r3, #0]
 800d8bc:	4632      	mov	r2, r6
 800d8be:	463b      	mov	r3, r7
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	f7f3 f952 	bl	8000b6c <__aeabi_dcmpun>
 800d8c8:	b128      	cbz	r0, 800d8d6 <_scanf_float+0x402>
 800d8ca:	4808      	ldr	r0, [pc, #32]	@ (800d8ec <_scanf_float+0x418>)
 800d8cc:	f000 fa38 	bl	800dd40 <nanf>
 800d8d0:	ed85 0a00 	vstr	s0, [r5]
 800d8d4:	e7db      	b.n	800d88e <_scanf_float+0x3ba>
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	f7f3 f9a5 	bl	8000c28 <__aeabi_d2f>
 800d8de:	6028      	str	r0, [r5, #0]
 800d8e0:	e7d5      	b.n	800d88e <_scanf_float+0x3ba>
 800d8e2:	2700      	movs	r7, #0
 800d8e4:	e62e      	b.n	800d544 <_scanf_float+0x70>
 800d8e6:	bf00      	nop
 800d8e8:	08013754 	.word	0x08013754
 800d8ec:	08013895 	.word	0x08013895

0800d8f0 <std>:
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	b510      	push	{r4, lr}
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	e9c0 3300 	strd	r3, r3, [r0]
 800d8fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8fe:	6083      	str	r3, [r0, #8]
 800d900:	8181      	strh	r1, [r0, #12]
 800d902:	6643      	str	r3, [r0, #100]	@ 0x64
 800d904:	81c2      	strh	r2, [r0, #14]
 800d906:	6183      	str	r3, [r0, #24]
 800d908:	4619      	mov	r1, r3
 800d90a:	2208      	movs	r2, #8
 800d90c:	305c      	adds	r0, #92	@ 0x5c
 800d90e:	f000 f989 	bl	800dc24 <memset>
 800d912:	4b0d      	ldr	r3, [pc, #52]	@ (800d948 <std+0x58>)
 800d914:	6263      	str	r3, [r4, #36]	@ 0x24
 800d916:	4b0d      	ldr	r3, [pc, #52]	@ (800d94c <std+0x5c>)
 800d918:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d91a:	4b0d      	ldr	r3, [pc, #52]	@ (800d950 <std+0x60>)
 800d91c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d91e:	4b0d      	ldr	r3, [pc, #52]	@ (800d954 <std+0x64>)
 800d920:	6323      	str	r3, [r4, #48]	@ 0x30
 800d922:	4b0d      	ldr	r3, [pc, #52]	@ (800d958 <std+0x68>)
 800d924:	6224      	str	r4, [r4, #32]
 800d926:	429c      	cmp	r4, r3
 800d928:	d006      	beq.n	800d938 <std+0x48>
 800d92a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d92e:	4294      	cmp	r4, r2
 800d930:	d002      	beq.n	800d938 <std+0x48>
 800d932:	33d0      	adds	r3, #208	@ 0xd0
 800d934:	429c      	cmp	r4, r3
 800d936:	d105      	bne.n	800d944 <std+0x54>
 800d938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d940:	f000 b9ec 	b.w	800dd1c <__retarget_lock_init_recursive>
 800d944:	bd10      	pop	{r4, pc}
 800d946:	bf00      	nop
 800d948:	0800db25 	.word	0x0800db25
 800d94c:	0800db47 	.word	0x0800db47
 800d950:	0800db7f 	.word	0x0800db7f
 800d954:	0800dba3 	.word	0x0800dba3
 800d958:	200010ac 	.word	0x200010ac

0800d95c <stdio_exit_handler>:
 800d95c:	4a02      	ldr	r2, [pc, #8]	@ (800d968 <stdio_exit_handler+0xc>)
 800d95e:	4903      	ldr	r1, [pc, #12]	@ (800d96c <stdio_exit_handler+0x10>)
 800d960:	4803      	ldr	r0, [pc, #12]	@ (800d970 <stdio_exit_handler+0x14>)
 800d962:	f000 b869 	b.w	800da38 <_fwalk_sglue>
 800d966:	bf00      	nop
 800d968:	2000002c 	.word	0x2000002c
 800d96c:	08010615 	.word	0x08010615
 800d970:	2000003c 	.word	0x2000003c

0800d974 <cleanup_stdio>:
 800d974:	6841      	ldr	r1, [r0, #4]
 800d976:	4b0c      	ldr	r3, [pc, #48]	@ (800d9a8 <cleanup_stdio+0x34>)
 800d978:	4299      	cmp	r1, r3
 800d97a:	b510      	push	{r4, lr}
 800d97c:	4604      	mov	r4, r0
 800d97e:	d001      	beq.n	800d984 <cleanup_stdio+0x10>
 800d980:	f002 fe48 	bl	8010614 <_fflush_r>
 800d984:	68a1      	ldr	r1, [r4, #8]
 800d986:	4b09      	ldr	r3, [pc, #36]	@ (800d9ac <cleanup_stdio+0x38>)
 800d988:	4299      	cmp	r1, r3
 800d98a:	d002      	beq.n	800d992 <cleanup_stdio+0x1e>
 800d98c:	4620      	mov	r0, r4
 800d98e:	f002 fe41 	bl	8010614 <_fflush_r>
 800d992:	68e1      	ldr	r1, [r4, #12]
 800d994:	4b06      	ldr	r3, [pc, #24]	@ (800d9b0 <cleanup_stdio+0x3c>)
 800d996:	4299      	cmp	r1, r3
 800d998:	d004      	beq.n	800d9a4 <cleanup_stdio+0x30>
 800d99a:	4620      	mov	r0, r4
 800d99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9a0:	f002 be38 	b.w	8010614 <_fflush_r>
 800d9a4:	bd10      	pop	{r4, pc}
 800d9a6:	bf00      	nop
 800d9a8:	200010ac 	.word	0x200010ac
 800d9ac:	20001114 	.word	0x20001114
 800d9b0:	2000117c 	.word	0x2000117c

0800d9b4 <global_stdio_init.part.0>:
 800d9b4:	b510      	push	{r4, lr}
 800d9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800d9e4 <global_stdio_init.part.0+0x30>)
 800d9b8:	4c0b      	ldr	r4, [pc, #44]	@ (800d9e8 <global_stdio_init.part.0+0x34>)
 800d9ba:	4a0c      	ldr	r2, [pc, #48]	@ (800d9ec <global_stdio_init.part.0+0x38>)
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	4620      	mov	r0, r4
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	2104      	movs	r1, #4
 800d9c4:	f7ff ff94 	bl	800d8f0 <std>
 800d9c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	2109      	movs	r1, #9
 800d9d0:	f7ff ff8e 	bl	800d8f0 <std>
 800d9d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d9d8:	2202      	movs	r2, #2
 800d9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9de:	2112      	movs	r1, #18
 800d9e0:	f7ff bf86 	b.w	800d8f0 <std>
 800d9e4:	200011e4 	.word	0x200011e4
 800d9e8:	200010ac 	.word	0x200010ac
 800d9ec:	0800d95d 	.word	0x0800d95d

0800d9f0 <__sfp_lock_acquire>:
 800d9f0:	4801      	ldr	r0, [pc, #4]	@ (800d9f8 <__sfp_lock_acquire+0x8>)
 800d9f2:	f000 b994 	b.w	800dd1e <__retarget_lock_acquire_recursive>
 800d9f6:	bf00      	nop
 800d9f8:	200011ed 	.word	0x200011ed

0800d9fc <__sfp_lock_release>:
 800d9fc:	4801      	ldr	r0, [pc, #4]	@ (800da04 <__sfp_lock_release+0x8>)
 800d9fe:	f000 b98f 	b.w	800dd20 <__retarget_lock_release_recursive>
 800da02:	bf00      	nop
 800da04:	200011ed 	.word	0x200011ed

0800da08 <__sinit>:
 800da08:	b510      	push	{r4, lr}
 800da0a:	4604      	mov	r4, r0
 800da0c:	f7ff fff0 	bl	800d9f0 <__sfp_lock_acquire>
 800da10:	6a23      	ldr	r3, [r4, #32]
 800da12:	b11b      	cbz	r3, 800da1c <__sinit+0x14>
 800da14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da18:	f7ff bff0 	b.w	800d9fc <__sfp_lock_release>
 800da1c:	4b04      	ldr	r3, [pc, #16]	@ (800da30 <__sinit+0x28>)
 800da1e:	6223      	str	r3, [r4, #32]
 800da20:	4b04      	ldr	r3, [pc, #16]	@ (800da34 <__sinit+0x2c>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1f5      	bne.n	800da14 <__sinit+0xc>
 800da28:	f7ff ffc4 	bl	800d9b4 <global_stdio_init.part.0>
 800da2c:	e7f2      	b.n	800da14 <__sinit+0xc>
 800da2e:	bf00      	nop
 800da30:	0800d975 	.word	0x0800d975
 800da34:	200011e4 	.word	0x200011e4

0800da38 <_fwalk_sglue>:
 800da38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da3c:	4607      	mov	r7, r0
 800da3e:	4688      	mov	r8, r1
 800da40:	4614      	mov	r4, r2
 800da42:	2600      	movs	r6, #0
 800da44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da48:	f1b9 0901 	subs.w	r9, r9, #1
 800da4c:	d505      	bpl.n	800da5a <_fwalk_sglue+0x22>
 800da4e:	6824      	ldr	r4, [r4, #0]
 800da50:	2c00      	cmp	r4, #0
 800da52:	d1f7      	bne.n	800da44 <_fwalk_sglue+0xc>
 800da54:	4630      	mov	r0, r6
 800da56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da5a:	89ab      	ldrh	r3, [r5, #12]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d907      	bls.n	800da70 <_fwalk_sglue+0x38>
 800da60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da64:	3301      	adds	r3, #1
 800da66:	d003      	beq.n	800da70 <_fwalk_sglue+0x38>
 800da68:	4629      	mov	r1, r5
 800da6a:	4638      	mov	r0, r7
 800da6c:	47c0      	blx	r8
 800da6e:	4306      	orrs	r6, r0
 800da70:	3568      	adds	r5, #104	@ 0x68
 800da72:	e7e9      	b.n	800da48 <_fwalk_sglue+0x10>

0800da74 <sniprintf>:
 800da74:	b40c      	push	{r2, r3}
 800da76:	b530      	push	{r4, r5, lr}
 800da78:	4b18      	ldr	r3, [pc, #96]	@ (800dadc <sniprintf+0x68>)
 800da7a:	1e0c      	subs	r4, r1, #0
 800da7c:	681d      	ldr	r5, [r3, #0]
 800da7e:	b09d      	sub	sp, #116	@ 0x74
 800da80:	da08      	bge.n	800da94 <sniprintf+0x20>
 800da82:	238b      	movs	r3, #139	@ 0x8b
 800da84:	602b      	str	r3, [r5, #0]
 800da86:	f04f 30ff 	mov.w	r0, #4294967295
 800da8a:	b01d      	add	sp, #116	@ 0x74
 800da8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da90:	b002      	add	sp, #8
 800da92:	4770      	bx	lr
 800da94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800da98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da9c:	f04f 0300 	mov.w	r3, #0
 800daa0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800daa2:	bf14      	ite	ne
 800daa4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800daa8:	4623      	moveq	r3, r4
 800daaa:	9304      	str	r3, [sp, #16]
 800daac:	9307      	str	r3, [sp, #28]
 800daae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dab2:	9002      	str	r0, [sp, #8]
 800dab4:	9006      	str	r0, [sp, #24]
 800dab6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800daba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dabc:	ab21      	add	r3, sp, #132	@ 0x84
 800dabe:	a902      	add	r1, sp, #8
 800dac0:	4628      	mov	r0, r5
 800dac2:	9301      	str	r3, [sp, #4]
 800dac4:	f002 fc26 	bl	8010314 <_svfiprintf_r>
 800dac8:	1c43      	adds	r3, r0, #1
 800daca:	bfbc      	itt	lt
 800dacc:	238b      	movlt	r3, #139	@ 0x8b
 800dace:	602b      	strlt	r3, [r5, #0]
 800dad0:	2c00      	cmp	r4, #0
 800dad2:	d0da      	beq.n	800da8a <sniprintf+0x16>
 800dad4:	9b02      	ldr	r3, [sp, #8]
 800dad6:	2200      	movs	r2, #0
 800dad8:	701a      	strb	r2, [r3, #0]
 800dada:	e7d6      	b.n	800da8a <sniprintf+0x16>
 800dadc:	20000038 	.word	0x20000038

0800dae0 <siprintf>:
 800dae0:	b40e      	push	{r1, r2, r3}
 800dae2:	b510      	push	{r4, lr}
 800dae4:	b09d      	sub	sp, #116	@ 0x74
 800dae6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800dae8:	9002      	str	r0, [sp, #8]
 800daea:	9006      	str	r0, [sp, #24]
 800daec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800daf0:	480a      	ldr	r0, [pc, #40]	@ (800db1c <siprintf+0x3c>)
 800daf2:	9107      	str	r1, [sp, #28]
 800daf4:	9104      	str	r1, [sp, #16]
 800daf6:	490a      	ldr	r1, [pc, #40]	@ (800db20 <siprintf+0x40>)
 800daf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dafc:	9105      	str	r1, [sp, #20]
 800dafe:	2400      	movs	r4, #0
 800db00:	a902      	add	r1, sp, #8
 800db02:	6800      	ldr	r0, [r0, #0]
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	941b      	str	r4, [sp, #108]	@ 0x6c
 800db08:	f002 fc04 	bl	8010314 <_svfiprintf_r>
 800db0c:	9b02      	ldr	r3, [sp, #8]
 800db0e:	701c      	strb	r4, [r3, #0]
 800db10:	b01d      	add	sp, #116	@ 0x74
 800db12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db16:	b003      	add	sp, #12
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	20000038 	.word	0x20000038
 800db20:	ffff0208 	.word	0xffff0208

0800db24 <__sread>:
 800db24:	b510      	push	{r4, lr}
 800db26:	460c      	mov	r4, r1
 800db28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db2c:	f000 f8a8 	bl	800dc80 <_read_r>
 800db30:	2800      	cmp	r0, #0
 800db32:	bfab      	itete	ge
 800db34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db36:	89a3      	ldrhlt	r3, [r4, #12]
 800db38:	181b      	addge	r3, r3, r0
 800db3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db3e:	bfac      	ite	ge
 800db40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db42:	81a3      	strhlt	r3, [r4, #12]
 800db44:	bd10      	pop	{r4, pc}

0800db46 <__swrite>:
 800db46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db4a:	461f      	mov	r7, r3
 800db4c:	898b      	ldrh	r3, [r1, #12]
 800db4e:	05db      	lsls	r3, r3, #23
 800db50:	4605      	mov	r5, r0
 800db52:	460c      	mov	r4, r1
 800db54:	4616      	mov	r6, r2
 800db56:	d505      	bpl.n	800db64 <__swrite+0x1e>
 800db58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db5c:	2302      	movs	r3, #2
 800db5e:	2200      	movs	r2, #0
 800db60:	f000 f87c 	bl	800dc5c <_lseek_r>
 800db64:	89a3      	ldrh	r3, [r4, #12]
 800db66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db6e:	81a3      	strh	r3, [r4, #12]
 800db70:	4632      	mov	r2, r6
 800db72:	463b      	mov	r3, r7
 800db74:	4628      	mov	r0, r5
 800db76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db7a:	f000 b893 	b.w	800dca4 <_write_r>

0800db7e <__sseek>:
 800db7e:	b510      	push	{r4, lr}
 800db80:	460c      	mov	r4, r1
 800db82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db86:	f000 f869 	bl	800dc5c <_lseek_r>
 800db8a:	1c43      	adds	r3, r0, #1
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	bf15      	itete	ne
 800db90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800db92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800db96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800db9a:	81a3      	strheq	r3, [r4, #12]
 800db9c:	bf18      	it	ne
 800db9e:	81a3      	strhne	r3, [r4, #12]
 800dba0:	bd10      	pop	{r4, pc}

0800dba2 <__sclose>:
 800dba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dba6:	f000 b849 	b.w	800dc3c <_close_r>

0800dbaa <_vsniprintf_r>:
 800dbaa:	b530      	push	{r4, r5, lr}
 800dbac:	4614      	mov	r4, r2
 800dbae:	2c00      	cmp	r4, #0
 800dbb0:	b09b      	sub	sp, #108	@ 0x6c
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	da05      	bge.n	800dbc4 <_vsniprintf_r+0x1a>
 800dbb8:	238b      	movs	r3, #139	@ 0x8b
 800dbba:	6003      	str	r3, [r0, #0]
 800dbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc0:	b01b      	add	sp, #108	@ 0x6c
 800dbc2:	bd30      	pop	{r4, r5, pc}
 800dbc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dbc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dbcc:	f04f 0300 	mov.w	r3, #0
 800dbd0:	9319      	str	r3, [sp, #100]	@ 0x64
 800dbd2:	bf14      	ite	ne
 800dbd4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dbd8:	4623      	moveq	r3, r4
 800dbda:	9302      	str	r3, [sp, #8]
 800dbdc:	9305      	str	r3, [sp, #20]
 800dbde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbe2:	9100      	str	r1, [sp, #0]
 800dbe4:	9104      	str	r1, [sp, #16]
 800dbe6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dbea:	4669      	mov	r1, sp
 800dbec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dbee:	f002 fb91 	bl	8010314 <_svfiprintf_r>
 800dbf2:	1c43      	adds	r3, r0, #1
 800dbf4:	bfbc      	itt	lt
 800dbf6:	238b      	movlt	r3, #139	@ 0x8b
 800dbf8:	602b      	strlt	r3, [r5, #0]
 800dbfa:	2c00      	cmp	r4, #0
 800dbfc:	d0e0      	beq.n	800dbc0 <_vsniprintf_r+0x16>
 800dbfe:	9b00      	ldr	r3, [sp, #0]
 800dc00:	2200      	movs	r2, #0
 800dc02:	701a      	strb	r2, [r3, #0]
 800dc04:	e7dc      	b.n	800dbc0 <_vsniprintf_r+0x16>
	...

0800dc08 <vsniprintf>:
 800dc08:	b507      	push	{r0, r1, r2, lr}
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	460a      	mov	r2, r1
 800dc10:	4601      	mov	r1, r0
 800dc12:	4803      	ldr	r0, [pc, #12]	@ (800dc20 <vsniprintf+0x18>)
 800dc14:	6800      	ldr	r0, [r0, #0]
 800dc16:	f7ff ffc8 	bl	800dbaa <_vsniprintf_r>
 800dc1a:	b003      	add	sp, #12
 800dc1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc20:	20000038 	.word	0x20000038

0800dc24 <memset>:
 800dc24:	4402      	add	r2, r0
 800dc26:	4603      	mov	r3, r0
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d100      	bne.n	800dc2e <memset+0xa>
 800dc2c:	4770      	bx	lr
 800dc2e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc32:	e7f9      	b.n	800dc28 <memset+0x4>

0800dc34 <_localeconv_r>:
 800dc34:	4800      	ldr	r0, [pc, #0]	@ (800dc38 <_localeconv_r+0x4>)
 800dc36:	4770      	bx	lr
 800dc38:	20000178 	.word	0x20000178

0800dc3c <_close_r>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	4d06      	ldr	r5, [pc, #24]	@ (800dc58 <_close_r+0x1c>)
 800dc40:	2300      	movs	r3, #0
 800dc42:	4604      	mov	r4, r0
 800dc44:	4608      	mov	r0, r1
 800dc46:	602b      	str	r3, [r5, #0]
 800dc48:	f7fa f943 	bl	8007ed2 <_close>
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	d102      	bne.n	800dc56 <_close_r+0x1a>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	b103      	cbz	r3, 800dc56 <_close_r+0x1a>
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	bd38      	pop	{r3, r4, r5, pc}
 800dc58:	200011e8 	.word	0x200011e8

0800dc5c <_lseek_r>:
 800dc5c:	b538      	push	{r3, r4, r5, lr}
 800dc5e:	4d07      	ldr	r5, [pc, #28]	@ (800dc7c <_lseek_r+0x20>)
 800dc60:	4604      	mov	r4, r0
 800dc62:	4608      	mov	r0, r1
 800dc64:	4611      	mov	r1, r2
 800dc66:	2200      	movs	r2, #0
 800dc68:	602a      	str	r2, [r5, #0]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	f7fa f958 	bl	8007f20 <_lseek>
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	d102      	bne.n	800dc7a <_lseek_r+0x1e>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	b103      	cbz	r3, 800dc7a <_lseek_r+0x1e>
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	bd38      	pop	{r3, r4, r5, pc}
 800dc7c:	200011e8 	.word	0x200011e8

0800dc80 <_read_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d07      	ldr	r5, [pc, #28]	@ (800dca0 <_read_r+0x20>)
 800dc84:	4604      	mov	r4, r0
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	602a      	str	r2, [r5, #0]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f7fa f8e6 	bl	8007e60 <_read>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_read_r+0x1e>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_read_r+0x1e>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	200011e8 	.word	0x200011e8

0800dca4 <_write_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d07      	ldr	r5, [pc, #28]	@ (800dcc4 <_write_r+0x20>)
 800dca8:	4604      	mov	r4, r0
 800dcaa:	4608      	mov	r0, r1
 800dcac:	4611      	mov	r1, r2
 800dcae:	2200      	movs	r2, #0
 800dcb0:	602a      	str	r2, [r5, #0]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	f7fa f8f1 	bl	8007e9a <_write>
 800dcb8:	1c43      	adds	r3, r0, #1
 800dcba:	d102      	bne.n	800dcc2 <_write_r+0x1e>
 800dcbc:	682b      	ldr	r3, [r5, #0]
 800dcbe:	b103      	cbz	r3, 800dcc2 <_write_r+0x1e>
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	200011e8 	.word	0x200011e8

0800dcc8 <__errno>:
 800dcc8:	4b01      	ldr	r3, [pc, #4]	@ (800dcd0 <__errno+0x8>)
 800dcca:	6818      	ldr	r0, [r3, #0]
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	20000038 	.word	0x20000038

0800dcd4 <__libc_init_array>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	4d0d      	ldr	r5, [pc, #52]	@ (800dd0c <__libc_init_array+0x38>)
 800dcd8:	4c0d      	ldr	r4, [pc, #52]	@ (800dd10 <__libc_init_array+0x3c>)
 800dcda:	1b64      	subs	r4, r4, r5
 800dcdc:	10a4      	asrs	r4, r4, #2
 800dcde:	2600      	movs	r6, #0
 800dce0:	42a6      	cmp	r6, r4
 800dce2:	d109      	bne.n	800dcf8 <__libc_init_array+0x24>
 800dce4:	4d0b      	ldr	r5, [pc, #44]	@ (800dd14 <__libc_init_array+0x40>)
 800dce6:	4c0c      	ldr	r4, [pc, #48]	@ (800dd18 <__libc_init_array+0x44>)
 800dce8:	f003 ff5c 	bl	8011ba4 <_init>
 800dcec:	1b64      	subs	r4, r4, r5
 800dcee:	10a4      	asrs	r4, r4, #2
 800dcf0:	2600      	movs	r6, #0
 800dcf2:	42a6      	cmp	r6, r4
 800dcf4:	d105      	bne.n	800dd02 <__libc_init_array+0x2e>
 800dcf6:	bd70      	pop	{r4, r5, r6, pc}
 800dcf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcfc:	4798      	blx	r3
 800dcfe:	3601      	adds	r6, #1
 800dd00:	e7ee      	b.n	800dce0 <__libc_init_array+0xc>
 800dd02:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd06:	4798      	blx	r3
 800dd08:	3601      	adds	r6, #1
 800dd0a:	e7f2      	b.n	800dcf2 <__libc_init_array+0x1e>
 800dd0c:	08013b6c 	.word	0x08013b6c
 800dd10:	08013b6c 	.word	0x08013b6c
 800dd14:	08013b6c 	.word	0x08013b6c
 800dd18:	08013b70 	.word	0x08013b70

0800dd1c <__retarget_lock_init_recursive>:
 800dd1c:	4770      	bx	lr

0800dd1e <__retarget_lock_acquire_recursive>:
 800dd1e:	4770      	bx	lr

0800dd20 <__retarget_lock_release_recursive>:
 800dd20:	4770      	bx	lr

0800dd22 <memcpy>:
 800dd22:	440a      	add	r2, r1
 800dd24:	4291      	cmp	r1, r2
 800dd26:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd2a:	d100      	bne.n	800dd2e <memcpy+0xc>
 800dd2c:	4770      	bx	lr
 800dd2e:	b510      	push	{r4, lr}
 800dd30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd38:	4291      	cmp	r1, r2
 800dd3a:	d1f9      	bne.n	800dd30 <memcpy+0xe>
 800dd3c:	bd10      	pop	{r4, pc}
	...

0800dd40 <nanf>:
 800dd40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dd48 <nanf+0x8>
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	7fc00000 	.word	0x7fc00000

0800dd4c <quorem>:
 800dd4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd50:	6903      	ldr	r3, [r0, #16]
 800dd52:	690c      	ldr	r4, [r1, #16]
 800dd54:	42a3      	cmp	r3, r4
 800dd56:	4607      	mov	r7, r0
 800dd58:	db7e      	blt.n	800de58 <quorem+0x10c>
 800dd5a:	3c01      	subs	r4, #1
 800dd5c:	f101 0814 	add.w	r8, r1, #20
 800dd60:	00a3      	lsls	r3, r4, #2
 800dd62:	f100 0514 	add.w	r5, r0, #20
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd76:	3301      	adds	r3, #1
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd7e:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd82:	d32e      	bcc.n	800dde2 <quorem+0x96>
 800dd84:	f04f 0a00 	mov.w	sl, #0
 800dd88:	46c4      	mov	ip, r8
 800dd8a:	46ae      	mov	lr, r5
 800dd8c:	46d3      	mov	fp, sl
 800dd8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd92:	b298      	uxth	r0, r3
 800dd94:	fb06 a000 	mla	r0, r6, r0, sl
 800dd98:	0c02      	lsrs	r2, r0, #16
 800dd9a:	0c1b      	lsrs	r3, r3, #16
 800dd9c:	fb06 2303 	mla	r3, r6, r3, r2
 800dda0:	f8de 2000 	ldr.w	r2, [lr]
 800dda4:	b280      	uxth	r0, r0
 800dda6:	b292      	uxth	r2, r2
 800dda8:	1a12      	subs	r2, r2, r0
 800ddaa:	445a      	add	r2, fp
 800ddac:	f8de 0000 	ldr.w	r0, [lr]
 800ddb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ddba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ddbe:	b292      	uxth	r2, r2
 800ddc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ddc4:	45e1      	cmp	r9, ip
 800ddc6:	f84e 2b04 	str.w	r2, [lr], #4
 800ddca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ddce:	d2de      	bcs.n	800dd8e <quorem+0x42>
 800ddd0:	9b00      	ldr	r3, [sp, #0]
 800ddd2:	58eb      	ldr	r3, [r5, r3]
 800ddd4:	b92b      	cbnz	r3, 800dde2 <quorem+0x96>
 800ddd6:	9b01      	ldr	r3, [sp, #4]
 800ddd8:	3b04      	subs	r3, #4
 800ddda:	429d      	cmp	r5, r3
 800dddc:	461a      	mov	r2, r3
 800ddde:	d32f      	bcc.n	800de40 <quorem+0xf4>
 800dde0:	613c      	str	r4, [r7, #16]
 800dde2:	4638      	mov	r0, r7
 800dde4:	f001 f9c8 	bl	800f178 <__mcmp>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	db25      	blt.n	800de38 <quorem+0xec>
 800ddec:	4629      	mov	r1, r5
 800ddee:	2000      	movs	r0, #0
 800ddf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddf4:	f8d1 c000 	ldr.w	ip, [r1]
 800ddf8:	fa1f fe82 	uxth.w	lr, r2
 800ddfc:	fa1f f38c 	uxth.w	r3, ip
 800de00:	eba3 030e 	sub.w	r3, r3, lr
 800de04:	4403      	add	r3, r0
 800de06:	0c12      	lsrs	r2, r2, #16
 800de08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de10:	b29b      	uxth	r3, r3
 800de12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de16:	45c1      	cmp	r9, r8
 800de18:	f841 3b04 	str.w	r3, [r1], #4
 800de1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800de20:	d2e6      	bcs.n	800ddf0 <quorem+0xa4>
 800de22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de2a:	b922      	cbnz	r2, 800de36 <quorem+0xea>
 800de2c:	3b04      	subs	r3, #4
 800de2e:	429d      	cmp	r5, r3
 800de30:	461a      	mov	r2, r3
 800de32:	d30b      	bcc.n	800de4c <quorem+0x100>
 800de34:	613c      	str	r4, [r7, #16]
 800de36:	3601      	adds	r6, #1
 800de38:	4630      	mov	r0, r6
 800de3a:	b003      	add	sp, #12
 800de3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de40:	6812      	ldr	r2, [r2, #0]
 800de42:	3b04      	subs	r3, #4
 800de44:	2a00      	cmp	r2, #0
 800de46:	d1cb      	bne.n	800dde0 <quorem+0x94>
 800de48:	3c01      	subs	r4, #1
 800de4a:	e7c6      	b.n	800ddda <quorem+0x8e>
 800de4c:	6812      	ldr	r2, [r2, #0]
 800de4e:	3b04      	subs	r3, #4
 800de50:	2a00      	cmp	r2, #0
 800de52:	d1ef      	bne.n	800de34 <quorem+0xe8>
 800de54:	3c01      	subs	r4, #1
 800de56:	e7ea      	b.n	800de2e <quorem+0xe2>
 800de58:	2000      	movs	r0, #0
 800de5a:	e7ee      	b.n	800de3a <quorem+0xee>
 800de5c:	0000      	movs	r0, r0
	...

0800de60 <_dtoa_r>:
 800de60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de64:	69c7      	ldr	r7, [r0, #28]
 800de66:	b097      	sub	sp, #92	@ 0x5c
 800de68:	ed8d 0b04 	vstr	d0, [sp, #16]
 800de6c:	ec55 4b10 	vmov	r4, r5, d0
 800de70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800de72:	9107      	str	r1, [sp, #28]
 800de74:	4681      	mov	r9, r0
 800de76:	920c      	str	r2, [sp, #48]	@ 0x30
 800de78:	9311      	str	r3, [sp, #68]	@ 0x44
 800de7a:	b97f      	cbnz	r7, 800de9c <_dtoa_r+0x3c>
 800de7c:	2010      	movs	r0, #16
 800de7e:	f000 fe09 	bl	800ea94 <malloc>
 800de82:	4602      	mov	r2, r0
 800de84:	f8c9 001c 	str.w	r0, [r9, #28]
 800de88:	b920      	cbnz	r0, 800de94 <_dtoa_r+0x34>
 800de8a:	4ba9      	ldr	r3, [pc, #676]	@ (800e130 <_dtoa_r+0x2d0>)
 800de8c:	21ef      	movs	r1, #239	@ 0xef
 800de8e:	48a9      	ldr	r0, [pc, #676]	@ (800e134 <_dtoa_r+0x2d4>)
 800de90:	f002 fc2e 	bl	80106f0 <__assert_func>
 800de94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800de98:	6007      	str	r7, [r0, #0]
 800de9a:	60c7      	str	r7, [r0, #12]
 800de9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dea0:	6819      	ldr	r1, [r3, #0]
 800dea2:	b159      	cbz	r1, 800debc <_dtoa_r+0x5c>
 800dea4:	685a      	ldr	r2, [r3, #4]
 800dea6:	604a      	str	r2, [r1, #4]
 800dea8:	2301      	movs	r3, #1
 800deaa:	4093      	lsls	r3, r2
 800deac:	608b      	str	r3, [r1, #8]
 800deae:	4648      	mov	r0, r9
 800deb0:	f000 fee6 	bl	800ec80 <_Bfree>
 800deb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]
 800debc:	1e2b      	subs	r3, r5, #0
 800debe:	bfb9      	ittee	lt
 800dec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dec4:	9305      	strlt	r3, [sp, #20]
 800dec6:	2300      	movge	r3, #0
 800dec8:	6033      	strge	r3, [r6, #0]
 800deca:	9f05      	ldr	r7, [sp, #20]
 800decc:	4b9a      	ldr	r3, [pc, #616]	@ (800e138 <_dtoa_r+0x2d8>)
 800dece:	bfbc      	itt	lt
 800ded0:	2201      	movlt	r2, #1
 800ded2:	6032      	strlt	r2, [r6, #0]
 800ded4:	43bb      	bics	r3, r7
 800ded6:	d112      	bne.n	800defe <_dtoa_r+0x9e>
 800ded8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800deda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dee4:	4323      	orrs	r3, r4
 800dee6:	f000 855a 	beq.w	800e99e <_dtoa_r+0xb3e>
 800deea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800deec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e14c <_dtoa_r+0x2ec>
 800def0:	2b00      	cmp	r3, #0
 800def2:	f000 855c 	beq.w	800e9ae <_dtoa_r+0xb4e>
 800def6:	f10a 0303 	add.w	r3, sl, #3
 800defa:	f000 bd56 	b.w	800e9aa <_dtoa_r+0xb4a>
 800defe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800df02:	2200      	movs	r2, #0
 800df04:	ec51 0b17 	vmov	r0, r1, d7
 800df08:	2300      	movs	r3, #0
 800df0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800df0e:	f7f2 fdfb 	bl	8000b08 <__aeabi_dcmpeq>
 800df12:	4680      	mov	r8, r0
 800df14:	b158      	cbz	r0, 800df2e <_dtoa_r+0xce>
 800df16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800df18:	2301      	movs	r3, #1
 800df1a:	6013      	str	r3, [r2, #0]
 800df1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df1e:	b113      	cbz	r3, 800df26 <_dtoa_r+0xc6>
 800df20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800df22:	4b86      	ldr	r3, [pc, #536]	@ (800e13c <_dtoa_r+0x2dc>)
 800df24:	6013      	str	r3, [r2, #0]
 800df26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e150 <_dtoa_r+0x2f0>
 800df2a:	f000 bd40 	b.w	800e9ae <_dtoa_r+0xb4e>
 800df2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800df32:	aa14      	add	r2, sp, #80	@ 0x50
 800df34:	a915      	add	r1, sp, #84	@ 0x54
 800df36:	4648      	mov	r0, r9
 800df38:	f001 fa3e 	bl	800f3b8 <__d2b>
 800df3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800df40:	9002      	str	r0, [sp, #8]
 800df42:	2e00      	cmp	r6, #0
 800df44:	d078      	beq.n	800e038 <_dtoa_r+0x1d8>
 800df46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800df4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800df54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800df58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800df5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800df60:	4619      	mov	r1, r3
 800df62:	2200      	movs	r2, #0
 800df64:	4b76      	ldr	r3, [pc, #472]	@ (800e140 <_dtoa_r+0x2e0>)
 800df66:	f7f2 f9af 	bl	80002c8 <__aeabi_dsub>
 800df6a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e118 <_dtoa_r+0x2b8>)
 800df6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df70:	f7f2 fb62 	bl	8000638 <__aeabi_dmul>
 800df74:	a36a      	add	r3, pc, #424	@ (adr r3, 800e120 <_dtoa_r+0x2c0>)
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	f7f2 f9a7 	bl	80002cc <__adddf3>
 800df7e:	4604      	mov	r4, r0
 800df80:	4630      	mov	r0, r6
 800df82:	460d      	mov	r5, r1
 800df84:	f7f2 faee 	bl	8000564 <__aeabi_i2d>
 800df88:	a367      	add	r3, pc, #412	@ (adr r3, 800e128 <_dtoa_r+0x2c8>)
 800df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8e:	f7f2 fb53 	bl	8000638 <__aeabi_dmul>
 800df92:	4602      	mov	r2, r0
 800df94:	460b      	mov	r3, r1
 800df96:	4620      	mov	r0, r4
 800df98:	4629      	mov	r1, r5
 800df9a:	f7f2 f997 	bl	80002cc <__adddf3>
 800df9e:	4604      	mov	r4, r0
 800dfa0:	460d      	mov	r5, r1
 800dfa2:	f7f2 fdf9 	bl	8000b98 <__aeabi_d2iz>
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	4607      	mov	r7, r0
 800dfaa:	2300      	movs	r3, #0
 800dfac:	4620      	mov	r0, r4
 800dfae:	4629      	mov	r1, r5
 800dfb0:	f7f2 fdb4 	bl	8000b1c <__aeabi_dcmplt>
 800dfb4:	b140      	cbz	r0, 800dfc8 <_dtoa_r+0x168>
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	f7f2 fad4 	bl	8000564 <__aeabi_i2d>
 800dfbc:	4622      	mov	r2, r4
 800dfbe:	462b      	mov	r3, r5
 800dfc0:	f7f2 fda2 	bl	8000b08 <__aeabi_dcmpeq>
 800dfc4:	b900      	cbnz	r0, 800dfc8 <_dtoa_r+0x168>
 800dfc6:	3f01      	subs	r7, #1
 800dfc8:	2f16      	cmp	r7, #22
 800dfca:	d852      	bhi.n	800e072 <_dtoa_r+0x212>
 800dfcc:	4b5d      	ldr	r3, [pc, #372]	@ (800e144 <_dtoa_r+0x2e4>)
 800dfce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dfda:	f7f2 fd9f 	bl	8000b1c <__aeabi_dcmplt>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d049      	beq.n	800e076 <_dtoa_r+0x216>
 800dfe2:	3f01      	subs	r7, #1
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfe8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dfea:	1b9b      	subs	r3, r3, r6
 800dfec:	1e5a      	subs	r2, r3, #1
 800dfee:	bf45      	ittet	mi
 800dff0:	f1c3 0301 	rsbmi	r3, r3, #1
 800dff4:	9300      	strmi	r3, [sp, #0]
 800dff6:	2300      	movpl	r3, #0
 800dff8:	2300      	movmi	r3, #0
 800dffa:	9206      	str	r2, [sp, #24]
 800dffc:	bf54      	ite	pl
 800dffe:	9300      	strpl	r3, [sp, #0]
 800e000:	9306      	strmi	r3, [sp, #24]
 800e002:	2f00      	cmp	r7, #0
 800e004:	db39      	blt.n	800e07a <_dtoa_r+0x21a>
 800e006:	9b06      	ldr	r3, [sp, #24]
 800e008:	970d      	str	r7, [sp, #52]	@ 0x34
 800e00a:	443b      	add	r3, r7
 800e00c:	9306      	str	r3, [sp, #24]
 800e00e:	2300      	movs	r3, #0
 800e010:	9308      	str	r3, [sp, #32]
 800e012:	9b07      	ldr	r3, [sp, #28]
 800e014:	2b09      	cmp	r3, #9
 800e016:	d863      	bhi.n	800e0e0 <_dtoa_r+0x280>
 800e018:	2b05      	cmp	r3, #5
 800e01a:	bfc4      	itt	gt
 800e01c:	3b04      	subgt	r3, #4
 800e01e:	9307      	strgt	r3, [sp, #28]
 800e020:	9b07      	ldr	r3, [sp, #28]
 800e022:	f1a3 0302 	sub.w	r3, r3, #2
 800e026:	bfcc      	ite	gt
 800e028:	2400      	movgt	r4, #0
 800e02a:	2401      	movle	r4, #1
 800e02c:	2b03      	cmp	r3, #3
 800e02e:	d863      	bhi.n	800e0f8 <_dtoa_r+0x298>
 800e030:	e8df f003 	tbb	[pc, r3]
 800e034:	2b375452 	.word	0x2b375452
 800e038:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e03c:	441e      	add	r6, r3
 800e03e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e042:	2b20      	cmp	r3, #32
 800e044:	bfc1      	itttt	gt
 800e046:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e04a:	409f      	lslgt	r7, r3
 800e04c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e050:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e054:	bfd6      	itet	le
 800e056:	f1c3 0320 	rsble	r3, r3, #32
 800e05a:	ea47 0003 	orrgt.w	r0, r7, r3
 800e05e:	fa04 f003 	lslle.w	r0, r4, r3
 800e062:	f7f2 fa6f 	bl	8000544 <__aeabi_ui2d>
 800e066:	2201      	movs	r2, #1
 800e068:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e06c:	3e01      	subs	r6, #1
 800e06e:	9212      	str	r2, [sp, #72]	@ 0x48
 800e070:	e776      	b.n	800df60 <_dtoa_r+0x100>
 800e072:	2301      	movs	r3, #1
 800e074:	e7b7      	b.n	800dfe6 <_dtoa_r+0x186>
 800e076:	9010      	str	r0, [sp, #64]	@ 0x40
 800e078:	e7b6      	b.n	800dfe8 <_dtoa_r+0x188>
 800e07a:	9b00      	ldr	r3, [sp, #0]
 800e07c:	1bdb      	subs	r3, r3, r7
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	427b      	negs	r3, r7
 800e082:	9308      	str	r3, [sp, #32]
 800e084:	2300      	movs	r3, #0
 800e086:	930d      	str	r3, [sp, #52]	@ 0x34
 800e088:	e7c3      	b.n	800e012 <_dtoa_r+0x1b2>
 800e08a:	2301      	movs	r3, #1
 800e08c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e08e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e090:	eb07 0b03 	add.w	fp, r7, r3
 800e094:	f10b 0301 	add.w	r3, fp, #1
 800e098:	2b01      	cmp	r3, #1
 800e09a:	9303      	str	r3, [sp, #12]
 800e09c:	bfb8      	it	lt
 800e09e:	2301      	movlt	r3, #1
 800e0a0:	e006      	b.n	800e0b0 <_dtoa_r+0x250>
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	dd28      	ble.n	800e0fe <_dtoa_r+0x29e>
 800e0ac:	469b      	mov	fp, r3
 800e0ae:	9303      	str	r3, [sp, #12]
 800e0b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	2204      	movs	r2, #4
 800e0b8:	f102 0514 	add.w	r5, r2, #20
 800e0bc:	429d      	cmp	r5, r3
 800e0be:	d926      	bls.n	800e10e <_dtoa_r+0x2ae>
 800e0c0:	6041      	str	r1, [r0, #4]
 800e0c2:	4648      	mov	r0, r9
 800e0c4:	f000 fd9c 	bl	800ec00 <_Balloc>
 800e0c8:	4682      	mov	sl, r0
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d142      	bne.n	800e154 <_dtoa_r+0x2f4>
 800e0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800e148 <_dtoa_r+0x2e8>)
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	f240 11af 	movw	r1, #431	@ 0x1af
 800e0d6:	e6da      	b.n	800de8e <_dtoa_r+0x2e>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e7e3      	b.n	800e0a4 <_dtoa_r+0x244>
 800e0dc:	2300      	movs	r3, #0
 800e0de:	e7d5      	b.n	800e08c <_dtoa_r+0x22c>
 800e0e0:	2401      	movs	r4, #1
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	9307      	str	r3, [sp, #28]
 800e0e6:	9409      	str	r4, [sp, #36]	@ 0x24
 800e0e8:	f04f 3bff 	mov.w	fp, #4294967295
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f8cd b00c 	str.w	fp, [sp, #12]
 800e0f2:	2312      	movs	r3, #18
 800e0f4:	920c      	str	r2, [sp, #48]	@ 0x30
 800e0f6:	e7db      	b.n	800e0b0 <_dtoa_r+0x250>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0fc:	e7f4      	b.n	800e0e8 <_dtoa_r+0x288>
 800e0fe:	f04f 0b01 	mov.w	fp, #1
 800e102:	f8cd b00c 	str.w	fp, [sp, #12]
 800e106:	465b      	mov	r3, fp
 800e108:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e10c:	e7d0      	b.n	800e0b0 <_dtoa_r+0x250>
 800e10e:	3101      	adds	r1, #1
 800e110:	0052      	lsls	r2, r2, #1
 800e112:	e7d1      	b.n	800e0b8 <_dtoa_r+0x258>
 800e114:	f3af 8000 	nop.w
 800e118:	636f4361 	.word	0x636f4361
 800e11c:	3fd287a7 	.word	0x3fd287a7
 800e120:	8b60c8b3 	.word	0x8b60c8b3
 800e124:	3fc68a28 	.word	0x3fc68a28
 800e128:	509f79fb 	.word	0x509f79fb
 800e12c:	3fd34413 	.word	0x3fd34413
 800e130:	08013766 	.word	0x08013766
 800e134:	0801377d 	.word	0x0801377d
 800e138:	7ff00000 	.word	0x7ff00000
 800e13c:	08013731 	.word	0x08013731
 800e140:	3ff80000 	.word	0x3ff80000
 800e144:	08013930 	.word	0x08013930
 800e148:	080137d5 	.word	0x080137d5
 800e14c:	08013762 	.word	0x08013762
 800e150:	08013730 	.word	0x08013730
 800e154:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e158:	6018      	str	r0, [r3, #0]
 800e15a:	9b03      	ldr	r3, [sp, #12]
 800e15c:	2b0e      	cmp	r3, #14
 800e15e:	f200 80a1 	bhi.w	800e2a4 <_dtoa_r+0x444>
 800e162:	2c00      	cmp	r4, #0
 800e164:	f000 809e 	beq.w	800e2a4 <_dtoa_r+0x444>
 800e168:	2f00      	cmp	r7, #0
 800e16a:	dd33      	ble.n	800e1d4 <_dtoa_r+0x374>
 800e16c:	4b9c      	ldr	r3, [pc, #624]	@ (800e3e0 <_dtoa_r+0x580>)
 800e16e:	f007 020f 	and.w	r2, r7, #15
 800e172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e176:	ed93 7b00 	vldr	d7, [r3]
 800e17a:	05f8      	lsls	r0, r7, #23
 800e17c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e180:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e184:	d516      	bpl.n	800e1b4 <_dtoa_r+0x354>
 800e186:	4b97      	ldr	r3, [pc, #604]	@ (800e3e4 <_dtoa_r+0x584>)
 800e188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e18c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e190:	f7f2 fb7c 	bl	800088c <__aeabi_ddiv>
 800e194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e198:	f004 040f 	and.w	r4, r4, #15
 800e19c:	2603      	movs	r6, #3
 800e19e:	4d91      	ldr	r5, [pc, #580]	@ (800e3e4 <_dtoa_r+0x584>)
 800e1a0:	b954      	cbnz	r4, 800e1b8 <_dtoa_r+0x358>
 800e1a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1aa:	f7f2 fb6f 	bl	800088c <__aeabi_ddiv>
 800e1ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1b2:	e028      	b.n	800e206 <_dtoa_r+0x3a6>
 800e1b4:	2602      	movs	r6, #2
 800e1b6:	e7f2      	b.n	800e19e <_dtoa_r+0x33e>
 800e1b8:	07e1      	lsls	r1, r4, #31
 800e1ba:	d508      	bpl.n	800e1ce <_dtoa_r+0x36e>
 800e1bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e1c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1c4:	f7f2 fa38 	bl	8000638 <__aeabi_dmul>
 800e1c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e1cc:	3601      	adds	r6, #1
 800e1ce:	1064      	asrs	r4, r4, #1
 800e1d0:	3508      	adds	r5, #8
 800e1d2:	e7e5      	b.n	800e1a0 <_dtoa_r+0x340>
 800e1d4:	f000 80af 	beq.w	800e336 <_dtoa_r+0x4d6>
 800e1d8:	427c      	negs	r4, r7
 800e1da:	4b81      	ldr	r3, [pc, #516]	@ (800e3e0 <_dtoa_r+0x580>)
 800e1dc:	4d81      	ldr	r5, [pc, #516]	@ (800e3e4 <_dtoa_r+0x584>)
 800e1de:	f004 020f 	and.w	r2, r4, #15
 800e1e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e1ee:	f7f2 fa23 	bl	8000638 <__aeabi_dmul>
 800e1f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1f6:	1124      	asrs	r4, r4, #4
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	2602      	movs	r6, #2
 800e1fc:	2c00      	cmp	r4, #0
 800e1fe:	f040 808f 	bne.w	800e320 <_dtoa_r+0x4c0>
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1d3      	bne.n	800e1ae <_dtoa_r+0x34e>
 800e206:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e208:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 8094 	beq.w	800e33a <_dtoa_r+0x4da>
 800e212:	4b75      	ldr	r3, [pc, #468]	@ (800e3e8 <_dtoa_r+0x588>)
 800e214:	2200      	movs	r2, #0
 800e216:	4620      	mov	r0, r4
 800e218:	4629      	mov	r1, r5
 800e21a:	f7f2 fc7f 	bl	8000b1c <__aeabi_dcmplt>
 800e21e:	2800      	cmp	r0, #0
 800e220:	f000 808b 	beq.w	800e33a <_dtoa_r+0x4da>
 800e224:	9b03      	ldr	r3, [sp, #12]
 800e226:	2b00      	cmp	r3, #0
 800e228:	f000 8087 	beq.w	800e33a <_dtoa_r+0x4da>
 800e22c:	f1bb 0f00 	cmp.w	fp, #0
 800e230:	dd34      	ble.n	800e29c <_dtoa_r+0x43c>
 800e232:	4620      	mov	r0, r4
 800e234:	4b6d      	ldr	r3, [pc, #436]	@ (800e3ec <_dtoa_r+0x58c>)
 800e236:	2200      	movs	r2, #0
 800e238:	4629      	mov	r1, r5
 800e23a:	f7f2 f9fd 	bl	8000638 <__aeabi_dmul>
 800e23e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e242:	f107 38ff 	add.w	r8, r7, #4294967295
 800e246:	3601      	adds	r6, #1
 800e248:	465c      	mov	r4, fp
 800e24a:	4630      	mov	r0, r6
 800e24c:	f7f2 f98a 	bl	8000564 <__aeabi_i2d>
 800e250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e254:	f7f2 f9f0 	bl	8000638 <__aeabi_dmul>
 800e258:	4b65      	ldr	r3, [pc, #404]	@ (800e3f0 <_dtoa_r+0x590>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7f2 f836 	bl	80002cc <__adddf3>
 800e260:	4605      	mov	r5, r0
 800e262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e266:	2c00      	cmp	r4, #0
 800e268:	d16a      	bne.n	800e340 <_dtoa_r+0x4e0>
 800e26a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e26e:	4b61      	ldr	r3, [pc, #388]	@ (800e3f4 <_dtoa_r+0x594>)
 800e270:	2200      	movs	r2, #0
 800e272:	f7f2 f829 	bl	80002c8 <__aeabi_dsub>
 800e276:	4602      	mov	r2, r0
 800e278:	460b      	mov	r3, r1
 800e27a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e27e:	462a      	mov	r2, r5
 800e280:	4633      	mov	r3, r6
 800e282:	f7f2 fc69 	bl	8000b58 <__aeabi_dcmpgt>
 800e286:	2800      	cmp	r0, #0
 800e288:	f040 8298 	bne.w	800e7bc <_dtoa_r+0x95c>
 800e28c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e290:	462a      	mov	r2, r5
 800e292:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e296:	f7f2 fc41 	bl	8000b1c <__aeabi_dcmplt>
 800e29a:	bb38      	cbnz	r0, 800e2ec <_dtoa_r+0x48c>
 800e29c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e2a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e2a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f2c0 8157 	blt.w	800e55a <_dtoa_r+0x6fa>
 800e2ac:	2f0e      	cmp	r7, #14
 800e2ae:	f300 8154 	bgt.w	800e55a <_dtoa_r+0x6fa>
 800e2b2:	4b4b      	ldr	r3, [pc, #300]	@ (800e3e0 <_dtoa_r+0x580>)
 800e2b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2b8:	ed93 7b00 	vldr	d7, [r3]
 800e2bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	ed8d 7b00 	vstr	d7, [sp]
 800e2c4:	f280 80e5 	bge.w	800e492 <_dtoa_r+0x632>
 800e2c8:	9b03      	ldr	r3, [sp, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f300 80e1 	bgt.w	800e492 <_dtoa_r+0x632>
 800e2d0:	d10c      	bne.n	800e2ec <_dtoa_r+0x48c>
 800e2d2:	4b48      	ldr	r3, [pc, #288]	@ (800e3f4 <_dtoa_r+0x594>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	ec51 0b17 	vmov	r0, r1, d7
 800e2da:	f7f2 f9ad 	bl	8000638 <__aeabi_dmul>
 800e2de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2e2:	f7f2 fc2f 	bl	8000b44 <__aeabi_dcmpge>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f000 8266 	beq.w	800e7b8 <_dtoa_r+0x958>
 800e2ec:	2400      	movs	r4, #0
 800e2ee:	4625      	mov	r5, r4
 800e2f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2f2:	4656      	mov	r6, sl
 800e2f4:	ea6f 0803 	mvn.w	r8, r3
 800e2f8:	2700      	movs	r7, #0
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	4648      	mov	r0, r9
 800e2fe:	f000 fcbf 	bl	800ec80 <_Bfree>
 800e302:	2d00      	cmp	r5, #0
 800e304:	f000 80bd 	beq.w	800e482 <_dtoa_r+0x622>
 800e308:	b12f      	cbz	r7, 800e316 <_dtoa_r+0x4b6>
 800e30a:	42af      	cmp	r7, r5
 800e30c:	d003      	beq.n	800e316 <_dtoa_r+0x4b6>
 800e30e:	4639      	mov	r1, r7
 800e310:	4648      	mov	r0, r9
 800e312:	f000 fcb5 	bl	800ec80 <_Bfree>
 800e316:	4629      	mov	r1, r5
 800e318:	4648      	mov	r0, r9
 800e31a:	f000 fcb1 	bl	800ec80 <_Bfree>
 800e31e:	e0b0      	b.n	800e482 <_dtoa_r+0x622>
 800e320:	07e2      	lsls	r2, r4, #31
 800e322:	d505      	bpl.n	800e330 <_dtoa_r+0x4d0>
 800e324:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e328:	f7f2 f986 	bl	8000638 <__aeabi_dmul>
 800e32c:	3601      	adds	r6, #1
 800e32e:	2301      	movs	r3, #1
 800e330:	1064      	asrs	r4, r4, #1
 800e332:	3508      	adds	r5, #8
 800e334:	e762      	b.n	800e1fc <_dtoa_r+0x39c>
 800e336:	2602      	movs	r6, #2
 800e338:	e765      	b.n	800e206 <_dtoa_r+0x3a6>
 800e33a:	9c03      	ldr	r4, [sp, #12]
 800e33c:	46b8      	mov	r8, r7
 800e33e:	e784      	b.n	800e24a <_dtoa_r+0x3ea>
 800e340:	4b27      	ldr	r3, [pc, #156]	@ (800e3e0 <_dtoa_r+0x580>)
 800e342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e34c:	4454      	add	r4, sl
 800e34e:	2900      	cmp	r1, #0
 800e350:	d054      	beq.n	800e3fc <_dtoa_r+0x59c>
 800e352:	4929      	ldr	r1, [pc, #164]	@ (800e3f8 <_dtoa_r+0x598>)
 800e354:	2000      	movs	r0, #0
 800e356:	f7f2 fa99 	bl	800088c <__aeabi_ddiv>
 800e35a:	4633      	mov	r3, r6
 800e35c:	462a      	mov	r2, r5
 800e35e:	f7f1 ffb3 	bl	80002c8 <__aeabi_dsub>
 800e362:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e366:	4656      	mov	r6, sl
 800e368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e36c:	f7f2 fc14 	bl	8000b98 <__aeabi_d2iz>
 800e370:	4605      	mov	r5, r0
 800e372:	f7f2 f8f7 	bl	8000564 <__aeabi_i2d>
 800e376:	4602      	mov	r2, r0
 800e378:	460b      	mov	r3, r1
 800e37a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e37e:	f7f1 ffa3 	bl	80002c8 <__aeabi_dsub>
 800e382:	3530      	adds	r5, #48	@ 0x30
 800e384:	4602      	mov	r2, r0
 800e386:	460b      	mov	r3, r1
 800e388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e38c:	f806 5b01 	strb.w	r5, [r6], #1
 800e390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e394:	f7f2 fbc2 	bl	8000b1c <__aeabi_dcmplt>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d172      	bne.n	800e482 <_dtoa_r+0x622>
 800e39c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3a0:	4911      	ldr	r1, [pc, #68]	@ (800e3e8 <_dtoa_r+0x588>)
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	f7f1 ff90 	bl	80002c8 <__aeabi_dsub>
 800e3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e3ac:	f7f2 fbb6 	bl	8000b1c <__aeabi_dcmplt>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	f040 80b4 	bne.w	800e51e <_dtoa_r+0x6be>
 800e3b6:	42a6      	cmp	r6, r4
 800e3b8:	f43f af70 	beq.w	800e29c <_dtoa_r+0x43c>
 800e3bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800e3ec <_dtoa_r+0x58c>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f7f2 f938 	bl	8000638 <__aeabi_dmul>
 800e3c8:	4b08      	ldr	r3, [pc, #32]	@ (800e3ec <_dtoa_r+0x58c>)
 800e3ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3d4:	f7f2 f930 	bl	8000638 <__aeabi_dmul>
 800e3d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3dc:	e7c4      	b.n	800e368 <_dtoa_r+0x508>
 800e3de:	bf00      	nop
 800e3e0:	08013930 	.word	0x08013930
 800e3e4:	08013908 	.word	0x08013908
 800e3e8:	3ff00000 	.word	0x3ff00000
 800e3ec:	40240000 	.word	0x40240000
 800e3f0:	401c0000 	.word	0x401c0000
 800e3f4:	40140000 	.word	0x40140000
 800e3f8:	3fe00000 	.word	0x3fe00000
 800e3fc:	4631      	mov	r1, r6
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7f2 f91a 	bl	8000638 <__aeabi_dmul>
 800e404:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e408:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e40a:	4656      	mov	r6, sl
 800e40c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e410:	f7f2 fbc2 	bl	8000b98 <__aeabi_d2iz>
 800e414:	4605      	mov	r5, r0
 800e416:	f7f2 f8a5 	bl	8000564 <__aeabi_i2d>
 800e41a:	4602      	mov	r2, r0
 800e41c:	460b      	mov	r3, r1
 800e41e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e422:	f7f1 ff51 	bl	80002c8 <__aeabi_dsub>
 800e426:	3530      	adds	r5, #48	@ 0x30
 800e428:	f806 5b01 	strb.w	r5, [r6], #1
 800e42c:	4602      	mov	r2, r0
 800e42e:	460b      	mov	r3, r1
 800e430:	42a6      	cmp	r6, r4
 800e432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e436:	f04f 0200 	mov.w	r2, #0
 800e43a:	d124      	bne.n	800e486 <_dtoa_r+0x626>
 800e43c:	4baf      	ldr	r3, [pc, #700]	@ (800e6fc <_dtoa_r+0x89c>)
 800e43e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e442:	f7f1 ff43 	bl	80002cc <__adddf3>
 800e446:	4602      	mov	r2, r0
 800e448:	460b      	mov	r3, r1
 800e44a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e44e:	f7f2 fb83 	bl	8000b58 <__aeabi_dcmpgt>
 800e452:	2800      	cmp	r0, #0
 800e454:	d163      	bne.n	800e51e <_dtoa_r+0x6be>
 800e456:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e45a:	49a8      	ldr	r1, [pc, #672]	@ (800e6fc <_dtoa_r+0x89c>)
 800e45c:	2000      	movs	r0, #0
 800e45e:	f7f1 ff33 	bl	80002c8 <__aeabi_dsub>
 800e462:	4602      	mov	r2, r0
 800e464:	460b      	mov	r3, r1
 800e466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e46a:	f7f2 fb57 	bl	8000b1c <__aeabi_dcmplt>
 800e46e:	2800      	cmp	r0, #0
 800e470:	f43f af14 	beq.w	800e29c <_dtoa_r+0x43c>
 800e474:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e476:	1e73      	subs	r3, r6, #1
 800e478:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e47a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e47e:	2b30      	cmp	r3, #48	@ 0x30
 800e480:	d0f8      	beq.n	800e474 <_dtoa_r+0x614>
 800e482:	4647      	mov	r7, r8
 800e484:	e03b      	b.n	800e4fe <_dtoa_r+0x69e>
 800e486:	4b9e      	ldr	r3, [pc, #632]	@ (800e700 <_dtoa_r+0x8a0>)
 800e488:	f7f2 f8d6 	bl	8000638 <__aeabi_dmul>
 800e48c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e490:	e7bc      	b.n	800e40c <_dtoa_r+0x5ac>
 800e492:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e496:	4656      	mov	r6, sl
 800e498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e49c:	4620      	mov	r0, r4
 800e49e:	4629      	mov	r1, r5
 800e4a0:	f7f2 f9f4 	bl	800088c <__aeabi_ddiv>
 800e4a4:	f7f2 fb78 	bl	8000b98 <__aeabi_d2iz>
 800e4a8:	4680      	mov	r8, r0
 800e4aa:	f7f2 f85b 	bl	8000564 <__aeabi_i2d>
 800e4ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4b2:	f7f2 f8c1 	bl	8000638 <__aeabi_dmul>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	4629      	mov	r1, r5
 800e4be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e4c2:	f7f1 ff01 	bl	80002c8 <__aeabi_dsub>
 800e4c6:	f806 4b01 	strb.w	r4, [r6], #1
 800e4ca:	9d03      	ldr	r5, [sp, #12]
 800e4cc:	eba6 040a 	sub.w	r4, r6, sl
 800e4d0:	42a5      	cmp	r5, r4
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	d133      	bne.n	800e540 <_dtoa_r+0x6e0>
 800e4d8:	f7f1 fef8 	bl	80002cc <__adddf3>
 800e4dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	460d      	mov	r5, r1
 800e4e4:	f7f2 fb38 	bl	8000b58 <__aeabi_dcmpgt>
 800e4e8:	b9c0      	cbnz	r0, 800e51c <_dtoa_r+0x6bc>
 800e4ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	4629      	mov	r1, r5
 800e4f2:	f7f2 fb09 	bl	8000b08 <__aeabi_dcmpeq>
 800e4f6:	b110      	cbz	r0, 800e4fe <_dtoa_r+0x69e>
 800e4f8:	f018 0f01 	tst.w	r8, #1
 800e4fc:	d10e      	bne.n	800e51c <_dtoa_r+0x6bc>
 800e4fe:	9902      	ldr	r1, [sp, #8]
 800e500:	4648      	mov	r0, r9
 800e502:	f000 fbbd 	bl	800ec80 <_Bfree>
 800e506:	2300      	movs	r3, #0
 800e508:	7033      	strb	r3, [r6, #0]
 800e50a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e50c:	3701      	adds	r7, #1
 800e50e:	601f      	str	r7, [r3, #0]
 800e510:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e512:	2b00      	cmp	r3, #0
 800e514:	f000 824b 	beq.w	800e9ae <_dtoa_r+0xb4e>
 800e518:	601e      	str	r6, [r3, #0]
 800e51a:	e248      	b.n	800e9ae <_dtoa_r+0xb4e>
 800e51c:	46b8      	mov	r8, r7
 800e51e:	4633      	mov	r3, r6
 800e520:	461e      	mov	r6, r3
 800e522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e526:	2a39      	cmp	r2, #57	@ 0x39
 800e528:	d106      	bne.n	800e538 <_dtoa_r+0x6d8>
 800e52a:	459a      	cmp	sl, r3
 800e52c:	d1f8      	bne.n	800e520 <_dtoa_r+0x6c0>
 800e52e:	2230      	movs	r2, #48	@ 0x30
 800e530:	f108 0801 	add.w	r8, r8, #1
 800e534:	f88a 2000 	strb.w	r2, [sl]
 800e538:	781a      	ldrb	r2, [r3, #0]
 800e53a:	3201      	adds	r2, #1
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	e7a0      	b.n	800e482 <_dtoa_r+0x622>
 800e540:	4b6f      	ldr	r3, [pc, #444]	@ (800e700 <_dtoa_r+0x8a0>)
 800e542:	2200      	movs	r2, #0
 800e544:	f7f2 f878 	bl	8000638 <__aeabi_dmul>
 800e548:	2200      	movs	r2, #0
 800e54a:	2300      	movs	r3, #0
 800e54c:	4604      	mov	r4, r0
 800e54e:	460d      	mov	r5, r1
 800e550:	f7f2 fada 	bl	8000b08 <__aeabi_dcmpeq>
 800e554:	2800      	cmp	r0, #0
 800e556:	d09f      	beq.n	800e498 <_dtoa_r+0x638>
 800e558:	e7d1      	b.n	800e4fe <_dtoa_r+0x69e>
 800e55a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e55c:	2a00      	cmp	r2, #0
 800e55e:	f000 80ea 	beq.w	800e736 <_dtoa_r+0x8d6>
 800e562:	9a07      	ldr	r2, [sp, #28]
 800e564:	2a01      	cmp	r2, #1
 800e566:	f300 80cd 	bgt.w	800e704 <_dtoa_r+0x8a4>
 800e56a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e56c:	2a00      	cmp	r2, #0
 800e56e:	f000 80c1 	beq.w	800e6f4 <_dtoa_r+0x894>
 800e572:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e576:	9c08      	ldr	r4, [sp, #32]
 800e578:	9e00      	ldr	r6, [sp, #0]
 800e57a:	9a00      	ldr	r2, [sp, #0]
 800e57c:	441a      	add	r2, r3
 800e57e:	9200      	str	r2, [sp, #0]
 800e580:	9a06      	ldr	r2, [sp, #24]
 800e582:	2101      	movs	r1, #1
 800e584:	441a      	add	r2, r3
 800e586:	4648      	mov	r0, r9
 800e588:	9206      	str	r2, [sp, #24]
 800e58a:	f000 fc77 	bl	800ee7c <__i2b>
 800e58e:	4605      	mov	r5, r0
 800e590:	b166      	cbz	r6, 800e5ac <_dtoa_r+0x74c>
 800e592:	9b06      	ldr	r3, [sp, #24]
 800e594:	2b00      	cmp	r3, #0
 800e596:	dd09      	ble.n	800e5ac <_dtoa_r+0x74c>
 800e598:	42b3      	cmp	r3, r6
 800e59a:	9a00      	ldr	r2, [sp, #0]
 800e59c:	bfa8      	it	ge
 800e59e:	4633      	movge	r3, r6
 800e5a0:	1ad2      	subs	r2, r2, r3
 800e5a2:	9200      	str	r2, [sp, #0]
 800e5a4:	9a06      	ldr	r2, [sp, #24]
 800e5a6:	1af6      	subs	r6, r6, r3
 800e5a8:	1ad3      	subs	r3, r2, r3
 800e5aa:	9306      	str	r3, [sp, #24]
 800e5ac:	9b08      	ldr	r3, [sp, #32]
 800e5ae:	b30b      	cbz	r3, 800e5f4 <_dtoa_r+0x794>
 800e5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 80c6 	beq.w	800e744 <_dtoa_r+0x8e4>
 800e5b8:	2c00      	cmp	r4, #0
 800e5ba:	f000 80c0 	beq.w	800e73e <_dtoa_r+0x8de>
 800e5be:	4629      	mov	r1, r5
 800e5c0:	4622      	mov	r2, r4
 800e5c2:	4648      	mov	r0, r9
 800e5c4:	f000 fd12 	bl	800efec <__pow5mult>
 800e5c8:	9a02      	ldr	r2, [sp, #8]
 800e5ca:	4601      	mov	r1, r0
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	4648      	mov	r0, r9
 800e5d0:	f000 fc6a 	bl	800eea8 <__multiply>
 800e5d4:	9902      	ldr	r1, [sp, #8]
 800e5d6:	4680      	mov	r8, r0
 800e5d8:	4648      	mov	r0, r9
 800e5da:	f000 fb51 	bl	800ec80 <_Bfree>
 800e5de:	9b08      	ldr	r3, [sp, #32]
 800e5e0:	1b1b      	subs	r3, r3, r4
 800e5e2:	9308      	str	r3, [sp, #32]
 800e5e4:	f000 80b1 	beq.w	800e74a <_dtoa_r+0x8ea>
 800e5e8:	9a08      	ldr	r2, [sp, #32]
 800e5ea:	4641      	mov	r1, r8
 800e5ec:	4648      	mov	r0, r9
 800e5ee:	f000 fcfd 	bl	800efec <__pow5mult>
 800e5f2:	9002      	str	r0, [sp, #8]
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	4648      	mov	r0, r9
 800e5f8:	f000 fc40 	bl	800ee7c <__i2b>
 800e5fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5fe:	4604      	mov	r4, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 81d8 	beq.w	800e9b6 <_dtoa_r+0xb56>
 800e606:	461a      	mov	r2, r3
 800e608:	4601      	mov	r1, r0
 800e60a:	4648      	mov	r0, r9
 800e60c:	f000 fcee 	bl	800efec <__pow5mult>
 800e610:	9b07      	ldr	r3, [sp, #28]
 800e612:	2b01      	cmp	r3, #1
 800e614:	4604      	mov	r4, r0
 800e616:	f300 809f 	bgt.w	800e758 <_dtoa_r+0x8f8>
 800e61a:	9b04      	ldr	r3, [sp, #16]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f040 8097 	bne.w	800e750 <_dtoa_r+0x8f0>
 800e622:	9b05      	ldr	r3, [sp, #20]
 800e624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f040 8093 	bne.w	800e754 <_dtoa_r+0x8f4>
 800e62e:	9b05      	ldr	r3, [sp, #20]
 800e630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e634:	0d1b      	lsrs	r3, r3, #20
 800e636:	051b      	lsls	r3, r3, #20
 800e638:	b133      	cbz	r3, 800e648 <_dtoa_r+0x7e8>
 800e63a:	9b00      	ldr	r3, [sp, #0]
 800e63c:	3301      	adds	r3, #1
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	9b06      	ldr	r3, [sp, #24]
 800e642:	3301      	adds	r3, #1
 800e644:	9306      	str	r3, [sp, #24]
 800e646:	2301      	movs	r3, #1
 800e648:	9308      	str	r3, [sp, #32]
 800e64a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f000 81b8 	beq.w	800e9c2 <_dtoa_r+0xb62>
 800e652:	6923      	ldr	r3, [r4, #16]
 800e654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e658:	6918      	ldr	r0, [r3, #16]
 800e65a:	f000 fbc3 	bl	800ede4 <__hi0bits>
 800e65e:	f1c0 0020 	rsb	r0, r0, #32
 800e662:	9b06      	ldr	r3, [sp, #24]
 800e664:	4418      	add	r0, r3
 800e666:	f010 001f 	ands.w	r0, r0, #31
 800e66a:	f000 8082 	beq.w	800e772 <_dtoa_r+0x912>
 800e66e:	f1c0 0320 	rsb	r3, r0, #32
 800e672:	2b04      	cmp	r3, #4
 800e674:	dd73      	ble.n	800e75e <_dtoa_r+0x8fe>
 800e676:	9b00      	ldr	r3, [sp, #0]
 800e678:	f1c0 001c 	rsb	r0, r0, #28
 800e67c:	4403      	add	r3, r0
 800e67e:	9300      	str	r3, [sp, #0]
 800e680:	9b06      	ldr	r3, [sp, #24]
 800e682:	4403      	add	r3, r0
 800e684:	4406      	add	r6, r0
 800e686:	9306      	str	r3, [sp, #24]
 800e688:	9b00      	ldr	r3, [sp, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	dd05      	ble.n	800e69a <_dtoa_r+0x83a>
 800e68e:	9902      	ldr	r1, [sp, #8]
 800e690:	461a      	mov	r2, r3
 800e692:	4648      	mov	r0, r9
 800e694:	f000 fd04 	bl	800f0a0 <__lshift>
 800e698:	9002      	str	r0, [sp, #8]
 800e69a:	9b06      	ldr	r3, [sp, #24]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	dd05      	ble.n	800e6ac <_dtoa_r+0x84c>
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	4648      	mov	r0, r9
 800e6a6:	f000 fcfb 	bl	800f0a0 <__lshift>
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d061      	beq.n	800e776 <_dtoa_r+0x916>
 800e6b2:	9802      	ldr	r0, [sp, #8]
 800e6b4:	4621      	mov	r1, r4
 800e6b6:	f000 fd5f 	bl	800f178 <__mcmp>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	da5b      	bge.n	800e776 <_dtoa_r+0x916>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	9902      	ldr	r1, [sp, #8]
 800e6c2:	220a      	movs	r2, #10
 800e6c4:	4648      	mov	r0, r9
 800e6c6:	f000 fafd 	bl	800ecc4 <__multadd>
 800e6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6cc:	9002      	str	r0, [sp, #8]
 800e6ce:	f107 38ff 	add.w	r8, r7, #4294967295
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	f000 8177 	beq.w	800e9c6 <_dtoa_r+0xb66>
 800e6d8:	4629      	mov	r1, r5
 800e6da:	2300      	movs	r3, #0
 800e6dc:	220a      	movs	r2, #10
 800e6de:	4648      	mov	r0, r9
 800e6e0:	f000 faf0 	bl	800ecc4 <__multadd>
 800e6e4:	f1bb 0f00 	cmp.w	fp, #0
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	dc6f      	bgt.n	800e7cc <_dtoa_r+0x96c>
 800e6ec:	9b07      	ldr	r3, [sp, #28]
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	dc49      	bgt.n	800e786 <_dtoa_r+0x926>
 800e6f2:	e06b      	b.n	800e7cc <_dtoa_r+0x96c>
 800e6f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e6f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e6fa:	e73c      	b.n	800e576 <_dtoa_r+0x716>
 800e6fc:	3fe00000 	.word	0x3fe00000
 800e700:	40240000 	.word	0x40240000
 800e704:	9b03      	ldr	r3, [sp, #12]
 800e706:	1e5c      	subs	r4, r3, #1
 800e708:	9b08      	ldr	r3, [sp, #32]
 800e70a:	42a3      	cmp	r3, r4
 800e70c:	db09      	blt.n	800e722 <_dtoa_r+0x8c2>
 800e70e:	1b1c      	subs	r4, r3, r4
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	f6bf af30 	bge.w	800e578 <_dtoa_r+0x718>
 800e718:	9b00      	ldr	r3, [sp, #0]
 800e71a:	9a03      	ldr	r2, [sp, #12]
 800e71c:	1a9e      	subs	r6, r3, r2
 800e71e:	2300      	movs	r3, #0
 800e720:	e72b      	b.n	800e57a <_dtoa_r+0x71a>
 800e722:	9b08      	ldr	r3, [sp, #32]
 800e724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e726:	9408      	str	r4, [sp, #32]
 800e728:	1ae3      	subs	r3, r4, r3
 800e72a:	441a      	add	r2, r3
 800e72c:	9e00      	ldr	r6, [sp, #0]
 800e72e:	9b03      	ldr	r3, [sp, #12]
 800e730:	920d      	str	r2, [sp, #52]	@ 0x34
 800e732:	2400      	movs	r4, #0
 800e734:	e721      	b.n	800e57a <_dtoa_r+0x71a>
 800e736:	9c08      	ldr	r4, [sp, #32]
 800e738:	9e00      	ldr	r6, [sp, #0]
 800e73a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e73c:	e728      	b.n	800e590 <_dtoa_r+0x730>
 800e73e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e742:	e751      	b.n	800e5e8 <_dtoa_r+0x788>
 800e744:	9a08      	ldr	r2, [sp, #32]
 800e746:	9902      	ldr	r1, [sp, #8]
 800e748:	e750      	b.n	800e5ec <_dtoa_r+0x78c>
 800e74a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e74e:	e751      	b.n	800e5f4 <_dtoa_r+0x794>
 800e750:	2300      	movs	r3, #0
 800e752:	e779      	b.n	800e648 <_dtoa_r+0x7e8>
 800e754:	9b04      	ldr	r3, [sp, #16]
 800e756:	e777      	b.n	800e648 <_dtoa_r+0x7e8>
 800e758:	2300      	movs	r3, #0
 800e75a:	9308      	str	r3, [sp, #32]
 800e75c:	e779      	b.n	800e652 <_dtoa_r+0x7f2>
 800e75e:	d093      	beq.n	800e688 <_dtoa_r+0x828>
 800e760:	9a00      	ldr	r2, [sp, #0]
 800e762:	331c      	adds	r3, #28
 800e764:	441a      	add	r2, r3
 800e766:	9200      	str	r2, [sp, #0]
 800e768:	9a06      	ldr	r2, [sp, #24]
 800e76a:	441a      	add	r2, r3
 800e76c:	441e      	add	r6, r3
 800e76e:	9206      	str	r2, [sp, #24]
 800e770:	e78a      	b.n	800e688 <_dtoa_r+0x828>
 800e772:	4603      	mov	r3, r0
 800e774:	e7f4      	b.n	800e760 <_dtoa_r+0x900>
 800e776:	9b03      	ldr	r3, [sp, #12]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	46b8      	mov	r8, r7
 800e77c:	dc20      	bgt.n	800e7c0 <_dtoa_r+0x960>
 800e77e:	469b      	mov	fp, r3
 800e780:	9b07      	ldr	r3, [sp, #28]
 800e782:	2b02      	cmp	r3, #2
 800e784:	dd1e      	ble.n	800e7c4 <_dtoa_r+0x964>
 800e786:	f1bb 0f00 	cmp.w	fp, #0
 800e78a:	f47f adb1 	bne.w	800e2f0 <_dtoa_r+0x490>
 800e78e:	4621      	mov	r1, r4
 800e790:	465b      	mov	r3, fp
 800e792:	2205      	movs	r2, #5
 800e794:	4648      	mov	r0, r9
 800e796:	f000 fa95 	bl	800ecc4 <__multadd>
 800e79a:	4601      	mov	r1, r0
 800e79c:	4604      	mov	r4, r0
 800e79e:	9802      	ldr	r0, [sp, #8]
 800e7a0:	f000 fcea 	bl	800f178 <__mcmp>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	f77f ada3 	ble.w	800e2f0 <_dtoa_r+0x490>
 800e7aa:	4656      	mov	r6, sl
 800e7ac:	2331      	movs	r3, #49	@ 0x31
 800e7ae:	f806 3b01 	strb.w	r3, [r6], #1
 800e7b2:	f108 0801 	add.w	r8, r8, #1
 800e7b6:	e59f      	b.n	800e2f8 <_dtoa_r+0x498>
 800e7b8:	9c03      	ldr	r4, [sp, #12]
 800e7ba:	46b8      	mov	r8, r7
 800e7bc:	4625      	mov	r5, r4
 800e7be:	e7f4      	b.n	800e7aa <_dtoa_r+0x94a>
 800e7c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f000 8101 	beq.w	800e9ce <_dtoa_r+0xb6e>
 800e7cc:	2e00      	cmp	r6, #0
 800e7ce:	dd05      	ble.n	800e7dc <_dtoa_r+0x97c>
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	4632      	mov	r2, r6
 800e7d4:	4648      	mov	r0, r9
 800e7d6:	f000 fc63 	bl	800f0a0 <__lshift>
 800e7da:	4605      	mov	r5, r0
 800e7dc:	9b08      	ldr	r3, [sp, #32]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d05c      	beq.n	800e89c <_dtoa_r+0xa3c>
 800e7e2:	6869      	ldr	r1, [r5, #4]
 800e7e4:	4648      	mov	r0, r9
 800e7e6:	f000 fa0b 	bl	800ec00 <_Balloc>
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	b928      	cbnz	r0, 800e7fa <_dtoa_r+0x99a>
 800e7ee:	4b82      	ldr	r3, [pc, #520]	@ (800e9f8 <_dtoa_r+0xb98>)
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e7f6:	f7ff bb4a 	b.w	800de8e <_dtoa_r+0x2e>
 800e7fa:	692a      	ldr	r2, [r5, #16]
 800e7fc:	3202      	adds	r2, #2
 800e7fe:	0092      	lsls	r2, r2, #2
 800e800:	f105 010c 	add.w	r1, r5, #12
 800e804:	300c      	adds	r0, #12
 800e806:	f7ff fa8c 	bl	800dd22 <memcpy>
 800e80a:	2201      	movs	r2, #1
 800e80c:	4631      	mov	r1, r6
 800e80e:	4648      	mov	r0, r9
 800e810:	f000 fc46 	bl	800f0a0 <__lshift>
 800e814:	f10a 0301 	add.w	r3, sl, #1
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	eb0a 030b 	add.w	r3, sl, fp
 800e81e:	9308      	str	r3, [sp, #32]
 800e820:	9b04      	ldr	r3, [sp, #16]
 800e822:	f003 0301 	and.w	r3, r3, #1
 800e826:	462f      	mov	r7, r5
 800e828:	9306      	str	r3, [sp, #24]
 800e82a:	4605      	mov	r5, r0
 800e82c:	9b00      	ldr	r3, [sp, #0]
 800e82e:	9802      	ldr	r0, [sp, #8]
 800e830:	4621      	mov	r1, r4
 800e832:	f103 3bff 	add.w	fp, r3, #4294967295
 800e836:	f7ff fa89 	bl	800dd4c <quorem>
 800e83a:	4603      	mov	r3, r0
 800e83c:	3330      	adds	r3, #48	@ 0x30
 800e83e:	9003      	str	r0, [sp, #12]
 800e840:	4639      	mov	r1, r7
 800e842:	9802      	ldr	r0, [sp, #8]
 800e844:	9309      	str	r3, [sp, #36]	@ 0x24
 800e846:	f000 fc97 	bl	800f178 <__mcmp>
 800e84a:	462a      	mov	r2, r5
 800e84c:	9004      	str	r0, [sp, #16]
 800e84e:	4621      	mov	r1, r4
 800e850:	4648      	mov	r0, r9
 800e852:	f000 fcad 	bl	800f1b0 <__mdiff>
 800e856:	68c2      	ldr	r2, [r0, #12]
 800e858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85a:	4606      	mov	r6, r0
 800e85c:	bb02      	cbnz	r2, 800e8a0 <_dtoa_r+0xa40>
 800e85e:	4601      	mov	r1, r0
 800e860:	9802      	ldr	r0, [sp, #8]
 800e862:	f000 fc89 	bl	800f178 <__mcmp>
 800e866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e868:	4602      	mov	r2, r0
 800e86a:	4631      	mov	r1, r6
 800e86c:	4648      	mov	r0, r9
 800e86e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e870:	9309      	str	r3, [sp, #36]	@ 0x24
 800e872:	f000 fa05 	bl	800ec80 <_Bfree>
 800e876:	9b07      	ldr	r3, [sp, #28]
 800e878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e87a:	9e00      	ldr	r6, [sp, #0]
 800e87c:	ea42 0103 	orr.w	r1, r2, r3
 800e880:	9b06      	ldr	r3, [sp, #24]
 800e882:	4319      	orrs	r1, r3
 800e884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e886:	d10d      	bne.n	800e8a4 <_dtoa_r+0xa44>
 800e888:	2b39      	cmp	r3, #57	@ 0x39
 800e88a:	d027      	beq.n	800e8dc <_dtoa_r+0xa7c>
 800e88c:	9a04      	ldr	r2, [sp, #16]
 800e88e:	2a00      	cmp	r2, #0
 800e890:	dd01      	ble.n	800e896 <_dtoa_r+0xa36>
 800e892:	9b03      	ldr	r3, [sp, #12]
 800e894:	3331      	adds	r3, #49	@ 0x31
 800e896:	f88b 3000 	strb.w	r3, [fp]
 800e89a:	e52e      	b.n	800e2fa <_dtoa_r+0x49a>
 800e89c:	4628      	mov	r0, r5
 800e89e:	e7b9      	b.n	800e814 <_dtoa_r+0x9b4>
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	e7e2      	b.n	800e86a <_dtoa_r+0xa0a>
 800e8a4:	9904      	ldr	r1, [sp, #16]
 800e8a6:	2900      	cmp	r1, #0
 800e8a8:	db04      	blt.n	800e8b4 <_dtoa_r+0xa54>
 800e8aa:	9807      	ldr	r0, [sp, #28]
 800e8ac:	4301      	orrs	r1, r0
 800e8ae:	9806      	ldr	r0, [sp, #24]
 800e8b0:	4301      	orrs	r1, r0
 800e8b2:	d120      	bne.n	800e8f6 <_dtoa_r+0xa96>
 800e8b4:	2a00      	cmp	r2, #0
 800e8b6:	ddee      	ble.n	800e896 <_dtoa_r+0xa36>
 800e8b8:	9902      	ldr	r1, [sp, #8]
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	4648      	mov	r0, r9
 800e8c0:	f000 fbee 	bl	800f0a0 <__lshift>
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	9002      	str	r0, [sp, #8]
 800e8c8:	f000 fc56 	bl	800f178 <__mcmp>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	9b00      	ldr	r3, [sp, #0]
 800e8d0:	dc02      	bgt.n	800e8d8 <_dtoa_r+0xa78>
 800e8d2:	d1e0      	bne.n	800e896 <_dtoa_r+0xa36>
 800e8d4:	07da      	lsls	r2, r3, #31
 800e8d6:	d5de      	bpl.n	800e896 <_dtoa_r+0xa36>
 800e8d8:	2b39      	cmp	r3, #57	@ 0x39
 800e8da:	d1da      	bne.n	800e892 <_dtoa_r+0xa32>
 800e8dc:	2339      	movs	r3, #57	@ 0x39
 800e8de:	f88b 3000 	strb.w	r3, [fp]
 800e8e2:	4633      	mov	r3, r6
 800e8e4:	461e      	mov	r6, r3
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e8ec:	2a39      	cmp	r2, #57	@ 0x39
 800e8ee:	d04e      	beq.n	800e98e <_dtoa_r+0xb2e>
 800e8f0:	3201      	adds	r2, #1
 800e8f2:	701a      	strb	r2, [r3, #0]
 800e8f4:	e501      	b.n	800e2fa <_dtoa_r+0x49a>
 800e8f6:	2a00      	cmp	r2, #0
 800e8f8:	dd03      	ble.n	800e902 <_dtoa_r+0xaa2>
 800e8fa:	2b39      	cmp	r3, #57	@ 0x39
 800e8fc:	d0ee      	beq.n	800e8dc <_dtoa_r+0xa7c>
 800e8fe:	3301      	adds	r3, #1
 800e900:	e7c9      	b.n	800e896 <_dtoa_r+0xa36>
 800e902:	9a00      	ldr	r2, [sp, #0]
 800e904:	9908      	ldr	r1, [sp, #32]
 800e906:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e90a:	428a      	cmp	r2, r1
 800e90c:	d028      	beq.n	800e960 <_dtoa_r+0xb00>
 800e90e:	9902      	ldr	r1, [sp, #8]
 800e910:	2300      	movs	r3, #0
 800e912:	220a      	movs	r2, #10
 800e914:	4648      	mov	r0, r9
 800e916:	f000 f9d5 	bl	800ecc4 <__multadd>
 800e91a:	42af      	cmp	r7, r5
 800e91c:	9002      	str	r0, [sp, #8]
 800e91e:	f04f 0300 	mov.w	r3, #0
 800e922:	f04f 020a 	mov.w	r2, #10
 800e926:	4639      	mov	r1, r7
 800e928:	4648      	mov	r0, r9
 800e92a:	d107      	bne.n	800e93c <_dtoa_r+0xadc>
 800e92c:	f000 f9ca 	bl	800ecc4 <__multadd>
 800e930:	4607      	mov	r7, r0
 800e932:	4605      	mov	r5, r0
 800e934:	9b00      	ldr	r3, [sp, #0]
 800e936:	3301      	adds	r3, #1
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	e777      	b.n	800e82c <_dtoa_r+0x9cc>
 800e93c:	f000 f9c2 	bl	800ecc4 <__multadd>
 800e940:	4629      	mov	r1, r5
 800e942:	4607      	mov	r7, r0
 800e944:	2300      	movs	r3, #0
 800e946:	220a      	movs	r2, #10
 800e948:	4648      	mov	r0, r9
 800e94a:	f000 f9bb 	bl	800ecc4 <__multadd>
 800e94e:	4605      	mov	r5, r0
 800e950:	e7f0      	b.n	800e934 <_dtoa_r+0xad4>
 800e952:	f1bb 0f00 	cmp.w	fp, #0
 800e956:	bfcc      	ite	gt
 800e958:	465e      	movgt	r6, fp
 800e95a:	2601      	movle	r6, #1
 800e95c:	4456      	add	r6, sl
 800e95e:	2700      	movs	r7, #0
 800e960:	9902      	ldr	r1, [sp, #8]
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	2201      	movs	r2, #1
 800e966:	4648      	mov	r0, r9
 800e968:	f000 fb9a 	bl	800f0a0 <__lshift>
 800e96c:	4621      	mov	r1, r4
 800e96e:	9002      	str	r0, [sp, #8]
 800e970:	f000 fc02 	bl	800f178 <__mcmp>
 800e974:	2800      	cmp	r0, #0
 800e976:	dcb4      	bgt.n	800e8e2 <_dtoa_r+0xa82>
 800e978:	d102      	bne.n	800e980 <_dtoa_r+0xb20>
 800e97a:	9b00      	ldr	r3, [sp, #0]
 800e97c:	07db      	lsls	r3, r3, #31
 800e97e:	d4b0      	bmi.n	800e8e2 <_dtoa_r+0xa82>
 800e980:	4633      	mov	r3, r6
 800e982:	461e      	mov	r6, r3
 800e984:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e988:	2a30      	cmp	r2, #48	@ 0x30
 800e98a:	d0fa      	beq.n	800e982 <_dtoa_r+0xb22>
 800e98c:	e4b5      	b.n	800e2fa <_dtoa_r+0x49a>
 800e98e:	459a      	cmp	sl, r3
 800e990:	d1a8      	bne.n	800e8e4 <_dtoa_r+0xa84>
 800e992:	2331      	movs	r3, #49	@ 0x31
 800e994:	f108 0801 	add.w	r8, r8, #1
 800e998:	f88a 3000 	strb.w	r3, [sl]
 800e99c:	e4ad      	b.n	800e2fa <_dtoa_r+0x49a>
 800e99e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e9fc <_dtoa_r+0xb9c>
 800e9a4:	b11b      	cbz	r3, 800e9ae <_dtoa_r+0xb4e>
 800e9a6:	f10a 0308 	add.w	r3, sl, #8
 800e9aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e9ac:	6013      	str	r3, [r2, #0]
 800e9ae:	4650      	mov	r0, sl
 800e9b0:	b017      	add	sp, #92	@ 0x5c
 800e9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b6:	9b07      	ldr	r3, [sp, #28]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	f77f ae2e 	ble.w	800e61a <_dtoa_r+0x7ba>
 800e9be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9c0:	9308      	str	r3, [sp, #32]
 800e9c2:	2001      	movs	r0, #1
 800e9c4:	e64d      	b.n	800e662 <_dtoa_r+0x802>
 800e9c6:	f1bb 0f00 	cmp.w	fp, #0
 800e9ca:	f77f aed9 	ble.w	800e780 <_dtoa_r+0x920>
 800e9ce:	4656      	mov	r6, sl
 800e9d0:	9802      	ldr	r0, [sp, #8]
 800e9d2:	4621      	mov	r1, r4
 800e9d4:	f7ff f9ba 	bl	800dd4c <quorem>
 800e9d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e9dc:	f806 3b01 	strb.w	r3, [r6], #1
 800e9e0:	eba6 020a 	sub.w	r2, r6, sl
 800e9e4:	4593      	cmp	fp, r2
 800e9e6:	ddb4      	ble.n	800e952 <_dtoa_r+0xaf2>
 800e9e8:	9902      	ldr	r1, [sp, #8]
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	220a      	movs	r2, #10
 800e9ee:	4648      	mov	r0, r9
 800e9f0:	f000 f968 	bl	800ecc4 <__multadd>
 800e9f4:	9002      	str	r0, [sp, #8]
 800e9f6:	e7eb      	b.n	800e9d0 <_dtoa_r+0xb70>
 800e9f8:	080137d5 	.word	0x080137d5
 800e9fc:	08013759 	.word	0x08013759

0800ea00 <_free_r>:
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	4605      	mov	r5, r0
 800ea04:	2900      	cmp	r1, #0
 800ea06:	d041      	beq.n	800ea8c <_free_r+0x8c>
 800ea08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea0c:	1f0c      	subs	r4, r1, #4
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	bfb8      	it	lt
 800ea12:	18e4      	addlt	r4, r4, r3
 800ea14:	f000 f8e8 	bl	800ebe8 <__malloc_lock>
 800ea18:	4a1d      	ldr	r2, [pc, #116]	@ (800ea90 <_free_r+0x90>)
 800ea1a:	6813      	ldr	r3, [r2, #0]
 800ea1c:	b933      	cbnz	r3, 800ea2c <_free_r+0x2c>
 800ea1e:	6063      	str	r3, [r4, #4]
 800ea20:	6014      	str	r4, [r2, #0]
 800ea22:	4628      	mov	r0, r5
 800ea24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea28:	f000 b8e4 	b.w	800ebf4 <__malloc_unlock>
 800ea2c:	42a3      	cmp	r3, r4
 800ea2e:	d908      	bls.n	800ea42 <_free_r+0x42>
 800ea30:	6820      	ldr	r0, [r4, #0]
 800ea32:	1821      	adds	r1, r4, r0
 800ea34:	428b      	cmp	r3, r1
 800ea36:	bf01      	itttt	eq
 800ea38:	6819      	ldreq	r1, [r3, #0]
 800ea3a:	685b      	ldreq	r3, [r3, #4]
 800ea3c:	1809      	addeq	r1, r1, r0
 800ea3e:	6021      	streq	r1, [r4, #0]
 800ea40:	e7ed      	b.n	800ea1e <_free_r+0x1e>
 800ea42:	461a      	mov	r2, r3
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	b10b      	cbz	r3, 800ea4c <_free_r+0x4c>
 800ea48:	42a3      	cmp	r3, r4
 800ea4a:	d9fa      	bls.n	800ea42 <_free_r+0x42>
 800ea4c:	6811      	ldr	r1, [r2, #0]
 800ea4e:	1850      	adds	r0, r2, r1
 800ea50:	42a0      	cmp	r0, r4
 800ea52:	d10b      	bne.n	800ea6c <_free_r+0x6c>
 800ea54:	6820      	ldr	r0, [r4, #0]
 800ea56:	4401      	add	r1, r0
 800ea58:	1850      	adds	r0, r2, r1
 800ea5a:	4283      	cmp	r3, r0
 800ea5c:	6011      	str	r1, [r2, #0]
 800ea5e:	d1e0      	bne.n	800ea22 <_free_r+0x22>
 800ea60:	6818      	ldr	r0, [r3, #0]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	6053      	str	r3, [r2, #4]
 800ea66:	4408      	add	r0, r1
 800ea68:	6010      	str	r0, [r2, #0]
 800ea6a:	e7da      	b.n	800ea22 <_free_r+0x22>
 800ea6c:	d902      	bls.n	800ea74 <_free_r+0x74>
 800ea6e:	230c      	movs	r3, #12
 800ea70:	602b      	str	r3, [r5, #0]
 800ea72:	e7d6      	b.n	800ea22 <_free_r+0x22>
 800ea74:	6820      	ldr	r0, [r4, #0]
 800ea76:	1821      	adds	r1, r4, r0
 800ea78:	428b      	cmp	r3, r1
 800ea7a:	bf04      	itt	eq
 800ea7c:	6819      	ldreq	r1, [r3, #0]
 800ea7e:	685b      	ldreq	r3, [r3, #4]
 800ea80:	6063      	str	r3, [r4, #4]
 800ea82:	bf04      	itt	eq
 800ea84:	1809      	addeq	r1, r1, r0
 800ea86:	6021      	streq	r1, [r4, #0]
 800ea88:	6054      	str	r4, [r2, #4]
 800ea8a:	e7ca      	b.n	800ea22 <_free_r+0x22>
 800ea8c:	bd38      	pop	{r3, r4, r5, pc}
 800ea8e:	bf00      	nop
 800ea90:	200011f4 	.word	0x200011f4

0800ea94 <malloc>:
 800ea94:	4b02      	ldr	r3, [pc, #8]	@ (800eaa0 <malloc+0xc>)
 800ea96:	4601      	mov	r1, r0
 800ea98:	6818      	ldr	r0, [r3, #0]
 800ea9a:	f000 b825 	b.w	800eae8 <_malloc_r>
 800ea9e:	bf00      	nop
 800eaa0:	20000038 	.word	0x20000038

0800eaa4 <sbrk_aligned>:
 800eaa4:	b570      	push	{r4, r5, r6, lr}
 800eaa6:	4e0f      	ldr	r6, [pc, #60]	@ (800eae4 <sbrk_aligned+0x40>)
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	6831      	ldr	r1, [r6, #0]
 800eaac:	4605      	mov	r5, r0
 800eaae:	b911      	cbnz	r1, 800eab6 <sbrk_aligned+0x12>
 800eab0:	f001 fe04 	bl	80106bc <_sbrk_r>
 800eab4:	6030      	str	r0, [r6, #0]
 800eab6:	4621      	mov	r1, r4
 800eab8:	4628      	mov	r0, r5
 800eaba:	f001 fdff 	bl	80106bc <_sbrk_r>
 800eabe:	1c43      	adds	r3, r0, #1
 800eac0:	d103      	bne.n	800eaca <sbrk_aligned+0x26>
 800eac2:	f04f 34ff 	mov.w	r4, #4294967295
 800eac6:	4620      	mov	r0, r4
 800eac8:	bd70      	pop	{r4, r5, r6, pc}
 800eaca:	1cc4      	adds	r4, r0, #3
 800eacc:	f024 0403 	bic.w	r4, r4, #3
 800ead0:	42a0      	cmp	r0, r4
 800ead2:	d0f8      	beq.n	800eac6 <sbrk_aligned+0x22>
 800ead4:	1a21      	subs	r1, r4, r0
 800ead6:	4628      	mov	r0, r5
 800ead8:	f001 fdf0 	bl	80106bc <_sbrk_r>
 800eadc:	3001      	adds	r0, #1
 800eade:	d1f2      	bne.n	800eac6 <sbrk_aligned+0x22>
 800eae0:	e7ef      	b.n	800eac2 <sbrk_aligned+0x1e>
 800eae2:	bf00      	nop
 800eae4:	200011f0 	.word	0x200011f0

0800eae8 <_malloc_r>:
 800eae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaec:	1ccd      	adds	r5, r1, #3
 800eaee:	f025 0503 	bic.w	r5, r5, #3
 800eaf2:	3508      	adds	r5, #8
 800eaf4:	2d0c      	cmp	r5, #12
 800eaf6:	bf38      	it	cc
 800eaf8:	250c      	movcc	r5, #12
 800eafa:	2d00      	cmp	r5, #0
 800eafc:	4606      	mov	r6, r0
 800eafe:	db01      	blt.n	800eb04 <_malloc_r+0x1c>
 800eb00:	42a9      	cmp	r1, r5
 800eb02:	d904      	bls.n	800eb0e <_malloc_r+0x26>
 800eb04:	230c      	movs	r3, #12
 800eb06:	6033      	str	r3, [r6, #0]
 800eb08:	2000      	movs	r0, #0
 800eb0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ebe4 <_malloc_r+0xfc>
 800eb12:	f000 f869 	bl	800ebe8 <__malloc_lock>
 800eb16:	f8d8 3000 	ldr.w	r3, [r8]
 800eb1a:	461c      	mov	r4, r3
 800eb1c:	bb44      	cbnz	r4, 800eb70 <_malloc_r+0x88>
 800eb1e:	4629      	mov	r1, r5
 800eb20:	4630      	mov	r0, r6
 800eb22:	f7ff ffbf 	bl	800eaa4 <sbrk_aligned>
 800eb26:	1c43      	adds	r3, r0, #1
 800eb28:	4604      	mov	r4, r0
 800eb2a:	d158      	bne.n	800ebde <_malloc_r+0xf6>
 800eb2c:	f8d8 4000 	ldr.w	r4, [r8]
 800eb30:	4627      	mov	r7, r4
 800eb32:	2f00      	cmp	r7, #0
 800eb34:	d143      	bne.n	800ebbe <_malloc_r+0xd6>
 800eb36:	2c00      	cmp	r4, #0
 800eb38:	d04b      	beq.n	800ebd2 <_malloc_r+0xea>
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	4630      	mov	r0, r6
 800eb40:	eb04 0903 	add.w	r9, r4, r3
 800eb44:	f001 fdba 	bl	80106bc <_sbrk_r>
 800eb48:	4581      	cmp	r9, r0
 800eb4a:	d142      	bne.n	800ebd2 <_malloc_r+0xea>
 800eb4c:	6821      	ldr	r1, [r4, #0]
 800eb4e:	1a6d      	subs	r5, r5, r1
 800eb50:	4629      	mov	r1, r5
 800eb52:	4630      	mov	r0, r6
 800eb54:	f7ff ffa6 	bl	800eaa4 <sbrk_aligned>
 800eb58:	3001      	adds	r0, #1
 800eb5a:	d03a      	beq.n	800ebd2 <_malloc_r+0xea>
 800eb5c:	6823      	ldr	r3, [r4, #0]
 800eb5e:	442b      	add	r3, r5
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	f8d8 3000 	ldr.w	r3, [r8]
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	bb62      	cbnz	r2, 800ebc4 <_malloc_r+0xdc>
 800eb6a:	f8c8 7000 	str.w	r7, [r8]
 800eb6e:	e00f      	b.n	800eb90 <_malloc_r+0xa8>
 800eb70:	6822      	ldr	r2, [r4, #0]
 800eb72:	1b52      	subs	r2, r2, r5
 800eb74:	d420      	bmi.n	800ebb8 <_malloc_r+0xd0>
 800eb76:	2a0b      	cmp	r2, #11
 800eb78:	d917      	bls.n	800ebaa <_malloc_r+0xc2>
 800eb7a:	1961      	adds	r1, r4, r5
 800eb7c:	42a3      	cmp	r3, r4
 800eb7e:	6025      	str	r5, [r4, #0]
 800eb80:	bf18      	it	ne
 800eb82:	6059      	strne	r1, [r3, #4]
 800eb84:	6863      	ldr	r3, [r4, #4]
 800eb86:	bf08      	it	eq
 800eb88:	f8c8 1000 	streq.w	r1, [r8]
 800eb8c:	5162      	str	r2, [r4, r5]
 800eb8e:	604b      	str	r3, [r1, #4]
 800eb90:	4630      	mov	r0, r6
 800eb92:	f000 f82f 	bl	800ebf4 <__malloc_unlock>
 800eb96:	f104 000b 	add.w	r0, r4, #11
 800eb9a:	1d23      	adds	r3, r4, #4
 800eb9c:	f020 0007 	bic.w	r0, r0, #7
 800eba0:	1ac2      	subs	r2, r0, r3
 800eba2:	bf1c      	itt	ne
 800eba4:	1a1b      	subne	r3, r3, r0
 800eba6:	50a3      	strne	r3, [r4, r2]
 800eba8:	e7af      	b.n	800eb0a <_malloc_r+0x22>
 800ebaa:	6862      	ldr	r2, [r4, #4]
 800ebac:	42a3      	cmp	r3, r4
 800ebae:	bf0c      	ite	eq
 800ebb0:	f8c8 2000 	streq.w	r2, [r8]
 800ebb4:	605a      	strne	r2, [r3, #4]
 800ebb6:	e7eb      	b.n	800eb90 <_malloc_r+0xa8>
 800ebb8:	4623      	mov	r3, r4
 800ebba:	6864      	ldr	r4, [r4, #4]
 800ebbc:	e7ae      	b.n	800eb1c <_malloc_r+0x34>
 800ebbe:	463c      	mov	r4, r7
 800ebc0:	687f      	ldr	r7, [r7, #4]
 800ebc2:	e7b6      	b.n	800eb32 <_malloc_r+0x4a>
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	42a3      	cmp	r3, r4
 800ebca:	d1fb      	bne.n	800ebc4 <_malloc_r+0xdc>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	6053      	str	r3, [r2, #4]
 800ebd0:	e7de      	b.n	800eb90 <_malloc_r+0xa8>
 800ebd2:	230c      	movs	r3, #12
 800ebd4:	6033      	str	r3, [r6, #0]
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	f000 f80c 	bl	800ebf4 <__malloc_unlock>
 800ebdc:	e794      	b.n	800eb08 <_malloc_r+0x20>
 800ebde:	6005      	str	r5, [r0, #0]
 800ebe0:	e7d6      	b.n	800eb90 <_malloc_r+0xa8>
 800ebe2:	bf00      	nop
 800ebe4:	200011f4 	.word	0x200011f4

0800ebe8 <__malloc_lock>:
 800ebe8:	4801      	ldr	r0, [pc, #4]	@ (800ebf0 <__malloc_lock+0x8>)
 800ebea:	f7ff b898 	b.w	800dd1e <__retarget_lock_acquire_recursive>
 800ebee:	bf00      	nop
 800ebf0:	200011ec 	.word	0x200011ec

0800ebf4 <__malloc_unlock>:
 800ebf4:	4801      	ldr	r0, [pc, #4]	@ (800ebfc <__malloc_unlock+0x8>)
 800ebf6:	f7ff b893 	b.w	800dd20 <__retarget_lock_release_recursive>
 800ebfa:	bf00      	nop
 800ebfc:	200011ec 	.word	0x200011ec

0800ec00 <_Balloc>:
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	69c6      	ldr	r6, [r0, #28]
 800ec04:	4604      	mov	r4, r0
 800ec06:	460d      	mov	r5, r1
 800ec08:	b976      	cbnz	r6, 800ec28 <_Balloc+0x28>
 800ec0a:	2010      	movs	r0, #16
 800ec0c:	f7ff ff42 	bl	800ea94 <malloc>
 800ec10:	4602      	mov	r2, r0
 800ec12:	61e0      	str	r0, [r4, #28]
 800ec14:	b920      	cbnz	r0, 800ec20 <_Balloc+0x20>
 800ec16:	4b18      	ldr	r3, [pc, #96]	@ (800ec78 <_Balloc+0x78>)
 800ec18:	4818      	ldr	r0, [pc, #96]	@ (800ec7c <_Balloc+0x7c>)
 800ec1a:	216b      	movs	r1, #107	@ 0x6b
 800ec1c:	f001 fd68 	bl	80106f0 <__assert_func>
 800ec20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec24:	6006      	str	r6, [r0, #0]
 800ec26:	60c6      	str	r6, [r0, #12]
 800ec28:	69e6      	ldr	r6, [r4, #28]
 800ec2a:	68f3      	ldr	r3, [r6, #12]
 800ec2c:	b183      	cbz	r3, 800ec50 <_Balloc+0x50>
 800ec2e:	69e3      	ldr	r3, [r4, #28]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec36:	b9b8      	cbnz	r0, 800ec68 <_Balloc+0x68>
 800ec38:	2101      	movs	r1, #1
 800ec3a:	fa01 f605 	lsl.w	r6, r1, r5
 800ec3e:	1d72      	adds	r2, r6, #5
 800ec40:	0092      	lsls	r2, r2, #2
 800ec42:	4620      	mov	r0, r4
 800ec44:	f001 fd72 	bl	801072c <_calloc_r>
 800ec48:	b160      	cbz	r0, 800ec64 <_Balloc+0x64>
 800ec4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec4e:	e00e      	b.n	800ec6e <_Balloc+0x6e>
 800ec50:	2221      	movs	r2, #33	@ 0x21
 800ec52:	2104      	movs	r1, #4
 800ec54:	4620      	mov	r0, r4
 800ec56:	f001 fd69 	bl	801072c <_calloc_r>
 800ec5a:	69e3      	ldr	r3, [r4, #28]
 800ec5c:	60f0      	str	r0, [r6, #12]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d1e4      	bne.n	800ec2e <_Balloc+0x2e>
 800ec64:	2000      	movs	r0, #0
 800ec66:	bd70      	pop	{r4, r5, r6, pc}
 800ec68:	6802      	ldr	r2, [r0, #0]
 800ec6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec74:	e7f7      	b.n	800ec66 <_Balloc+0x66>
 800ec76:	bf00      	nop
 800ec78:	08013766 	.word	0x08013766
 800ec7c:	080137e6 	.word	0x080137e6

0800ec80 <_Bfree>:
 800ec80:	b570      	push	{r4, r5, r6, lr}
 800ec82:	69c6      	ldr	r6, [r0, #28]
 800ec84:	4605      	mov	r5, r0
 800ec86:	460c      	mov	r4, r1
 800ec88:	b976      	cbnz	r6, 800eca8 <_Bfree+0x28>
 800ec8a:	2010      	movs	r0, #16
 800ec8c:	f7ff ff02 	bl	800ea94 <malloc>
 800ec90:	4602      	mov	r2, r0
 800ec92:	61e8      	str	r0, [r5, #28]
 800ec94:	b920      	cbnz	r0, 800eca0 <_Bfree+0x20>
 800ec96:	4b09      	ldr	r3, [pc, #36]	@ (800ecbc <_Bfree+0x3c>)
 800ec98:	4809      	ldr	r0, [pc, #36]	@ (800ecc0 <_Bfree+0x40>)
 800ec9a:	218f      	movs	r1, #143	@ 0x8f
 800ec9c:	f001 fd28 	bl	80106f0 <__assert_func>
 800eca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eca4:	6006      	str	r6, [r0, #0]
 800eca6:	60c6      	str	r6, [r0, #12]
 800eca8:	b13c      	cbz	r4, 800ecba <_Bfree+0x3a>
 800ecaa:	69eb      	ldr	r3, [r5, #28]
 800ecac:	6862      	ldr	r2, [r4, #4]
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ecb4:	6021      	str	r1, [r4, #0]
 800ecb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ecba:	bd70      	pop	{r4, r5, r6, pc}
 800ecbc:	08013766 	.word	0x08013766
 800ecc0:	080137e6 	.word	0x080137e6

0800ecc4 <__multadd>:
 800ecc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc8:	690d      	ldr	r5, [r1, #16]
 800ecca:	4607      	mov	r7, r0
 800eccc:	460c      	mov	r4, r1
 800ecce:	461e      	mov	r6, r3
 800ecd0:	f101 0c14 	add.w	ip, r1, #20
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	f8dc 3000 	ldr.w	r3, [ip]
 800ecda:	b299      	uxth	r1, r3
 800ecdc:	fb02 6101 	mla	r1, r2, r1, r6
 800ece0:	0c1e      	lsrs	r6, r3, #16
 800ece2:	0c0b      	lsrs	r3, r1, #16
 800ece4:	fb02 3306 	mla	r3, r2, r6, r3
 800ece8:	b289      	uxth	r1, r1
 800ecea:	3001      	adds	r0, #1
 800ecec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ecf0:	4285      	cmp	r5, r0
 800ecf2:	f84c 1b04 	str.w	r1, [ip], #4
 800ecf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ecfa:	dcec      	bgt.n	800ecd6 <__multadd+0x12>
 800ecfc:	b30e      	cbz	r6, 800ed42 <__multadd+0x7e>
 800ecfe:	68a3      	ldr	r3, [r4, #8]
 800ed00:	42ab      	cmp	r3, r5
 800ed02:	dc19      	bgt.n	800ed38 <__multadd+0x74>
 800ed04:	6861      	ldr	r1, [r4, #4]
 800ed06:	4638      	mov	r0, r7
 800ed08:	3101      	adds	r1, #1
 800ed0a:	f7ff ff79 	bl	800ec00 <_Balloc>
 800ed0e:	4680      	mov	r8, r0
 800ed10:	b928      	cbnz	r0, 800ed1e <__multadd+0x5a>
 800ed12:	4602      	mov	r2, r0
 800ed14:	4b0c      	ldr	r3, [pc, #48]	@ (800ed48 <__multadd+0x84>)
 800ed16:	480d      	ldr	r0, [pc, #52]	@ (800ed4c <__multadd+0x88>)
 800ed18:	21ba      	movs	r1, #186	@ 0xba
 800ed1a:	f001 fce9 	bl	80106f0 <__assert_func>
 800ed1e:	6922      	ldr	r2, [r4, #16]
 800ed20:	3202      	adds	r2, #2
 800ed22:	f104 010c 	add.w	r1, r4, #12
 800ed26:	0092      	lsls	r2, r2, #2
 800ed28:	300c      	adds	r0, #12
 800ed2a:	f7fe fffa 	bl	800dd22 <memcpy>
 800ed2e:	4621      	mov	r1, r4
 800ed30:	4638      	mov	r0, r7
 800ed32:	f7ff ffa5 	bl	800ec80 <_Bfree>
 800ed36:	4644      	mov	r4, r8
 800ed38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed3c:	3501      	adds	r5, #1
 800ed3e:	615e      	str	r6, [r3, #20]
 800ed40:	6125      	str	r5, [r4, #16]
 800ed42:	4620      	mov	r0, r4
 800ed44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed48:	080137d5 	.word	0x080137d5
 800ed4c:	080137e6 	.word	0x080137e6

0800ed50 <__s2b>:
 800ed50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed54:	460c      	mov	r4, r1
 800ed56:	4615      	mov	r5, r2
 800ed58:	461f      	mov	r7, r3
 800ed5a:	2209      	movs	r2, #9
 800ed5c:	3308      	adds	r3, #8
 800ed5e:	4606      	mov	r6, r0
 800ed60:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed64:	2100      	movs	r1, #0
 800ed66:	2201      	movs	r2, #1
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	db09      	blt.n	800ed80 <__s2b+0x30>
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	f7ff ff47 	bl	800ec00 <_Balloc>
 800ed72:	b940      	cbnz	r0, 800ed86 <__s2b+0x36>
 800ed74:	4602      	mov	r2, r0
 800ed76:	4b19      	ldr	r3, [pc, #100]	@ (800eddc <__s2b+0x8c>)
 800ed78:	4819      	ldr	r0, [pc, #100]	@ (800ede0 <__s2b+0x90>)
 800ed7a:	21d3      	movs	r1, #211	@ 0xd3
 800ed7c:	f001 fcb8 	bl	80106f0 <__assert_func>
 800ed80:	0052      	lsls	r2, r2, #1
 800ed82:	3101      	adds	r1, #1
 800ed84:	e7f0      	b.n	800ed68 <__s2b+0x18>
 800ed86:	9b08      	ldr	r3, [sp, #32]
 800ed88:	6143      	str	r3, [r0, #20]
 800ed8a:	2d09      	cmp	r5, #9
 800ed8c:	f04f 0301 	mov.w	r3, #1
 800ed90:	6103      	str	r3, [r0, #16]
 800ed92:	dd16      	ble.n	800edc2 <__s2b+0x72>
 800ed94:	f104 0909 	add.w	r9, r4, #9
 800ed98:	46c8      	mov	r8, r9
 800ed9a:	442c      	add	r4, r5
 800ed9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eda0:	4601      	mov	r1, r0
 800eda2:	3b30      	subs	r3, #48	@ 0x30
 800eda4:	220a      	movs	r2, #10
 800eda6:	4630      	mov	r0, r6
 800eda8:	f7ff ff8c 	bl	800ecc4 <__multadd>
 800edac:	45a0      	cmp	r8, r4
 800edae:	d1f5      	bne.n	800ed9c <__s2b+0x4c>
 800edb0:	f1a5 0408 	sub.w	r4, r5, #8
 800edb4:	444c      	add	r4, r9
 800edb6:	1b2d      	subs	r5, r5, r4
 800edb8:	1963      	adds	r3, r4, r5
 800edba:	42bb      	cmp	r3, r7
 800edbc:	db04      	blt.n	800edc8 <__s2b+0x78>
 800edbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edc2:	340a      	adds	r4, #10
 800edc4:	2509      	movs	r5, #9
 800edc6:	e7f6      	b.n	800edb6 <__s2b+0x66>
 800edc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800edcc:	4601      	mov	r1, r0
 800edce:	3b30      	subs	r3, #48	@ 0x30
 800edd0:	220a      	movs	r2, #10
 800edd2:	4630      	mov	r0, r6
 800edd4:	f7ff ff76 	bl	800ecc4 <__multadd>
 800edd8:	e7ee      	b.n	800edb8 <__s2b+0x68>
 800edda:	bf00      	nop
 800eddc:	080137d5 	.word	0x080137d5
 800ede0:	080137e6 	.word	0x080137e6

0800ede4 <__hi0bits>:
 800ede4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ede8:	4603      	mov	r3, r0
 800edea:	bf36      	itet	cc
 800edec:	0403      	lslcc	r3, r0, #16
 800edee:	2000      	movcs	r0, #0
 800edf0:	2010      	movcc	r0, #16
 800edf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800edf6:	bf3c      	itt	cc
 800edf8:	021b      	lslcc	r3, r3, #8
 800edfa:	3008      	addcc	r0, #8
 800edfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee00:	bf3c      	itt	cc
 800ee02:	011b      	lslcc	r3, r3, #4
 800ee04:	3004      	addcc	r0, #4
 800ee06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee0a:	bf3c      	itt	cc
 800ee0c:	009b      	lslcc	r3, r3, #2
 800ee0e:	3002      	addcc	r0, #2
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	db05      	blt.n	800ee20 <__hi0bits+0x3c>
 800ee14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ee18:	f100 0001 	add.w	r0, r0, #1
 800ee1c:	bf08      	it	eq
 800ee1e:	2020      	moveq	r0, #32
 800ee20:	4770      	bx	lr

0800ee22 <__lo0bits>:
 800ee22:	6803      	ldr	r3, [r0, #0]
 800ee24:	4602      	mov	r2, r0
 800ee26:	f013 0007 	ands.w	r0, r3, #7
 800ee2a:	d00b      	beq.n	800ee44 <__lo0bits+0x22>
 800ee2c:	07d9      	lsls	r1, r3, #31
 800ee2e:	d421      	bmi.n	800ee74 <__lo0bits+0x52>
 800ee30:	0798      	lsls	r0, r3, #30
 800ee32:	bf49      	itett	mi
 800ee34:	085b      	lsrmi	r3, r3, #1
 800ee36:	089b      	lsrpl	r3, r3, #2
 800ee38:	2001      	movmi	r0, #1
 800ee3a:	6013      	strmi	r3, [r2, #0]
 800ee3c:	bf5c      	itt	pl
 800ee3e:	6013      	strpl	r3, [r2, #0]
 800ee40:	2002      	movpl	r0, #2
 800ee42:	4770      	bx	lr
 800ee44:	b299      	uxth	r1, r3
 800ee46:	b909      	cbnz	r1, 800ee4c <__lo0bits+0x2a>
 800ee48:	0c1b      	lsrs	r3, r3, #16
 800ee4a:	2010      	movs	r0, #16
 800ee4c:	b2d9      	uxtb	r1, r3
 800ee4e:	b909      	cbnz	r1, 800ee54 <__lo0bits+0x32>
 800ee50:	3008      	adds	r0, #8
 800ee52:	0a1b      	lsrs	r3, r3, #8
 800ee54:	0719      	lsls	r1, r3, #28
 800ee56:	bf04      	itt	eq
 800ee58:	091b      	lsreq	r3, r3, #4
 800ee5a:	3004      	addeq	r0, #4
 800ee5c:	0799      	lsls	r1, r3, #30
 800ee5e:	bf04      	itt	eq
 800ee60:	089b      	lsreq	r3, r3, #2
 800ee62:	3002      	addeq	r0, #2
 800ee64:	07d9      	lsls	r1, r3, #31
 800ee66:	d403      	bmi.n	800ee70 <__lo0bits+0x4e>
 800ee68:	085b      	lsrs	r3, r3, #1
 800ee6a:	f100 0001 	add.w	r0, r0, #1
 800ee6e:	d003      	beq.n	800ee78 <__lo0bits+0x56>
 800ee70:	6013      	str	r3, [r2, #0]
 800ee72:	4770      	bx	lr
 800ee74:	2000      	movs	r0, #0
 800ee76:	4770      	bx	lr
 800ee78:	2020      	movs	r0, #32
 800ee7a:	4770      	bx	lr

0800ee7c <__i2b>:
 800ee7c:	b510      	push	{r4, lr}
 800ee7e:	460c      	mov	r4, r1
 800ee80:	2101      	movs	r1, #1
 800ee82:	f7ff febd 	bl	800ec00 <_Balloc>
 800ee86:	4602      	mov	r2, r0
 800ee88:	b928      	cbnz	r0, 800ee96 <__i2b+0x1a>
 800ee8a:	4b05      	ldr	r3, [pc, #20]	@ (800eea0 <__i2b+0x24>)
 800ee8c:	4805      	ldr	r0, [pc, #20]	@ (800eea4 <__i2b+0x28>)
 800ee8e:	f240 1145 	movw	r1, #325	@ 0x145
 800ee92:	f001 fc2d 	bl	80106f0 <__assert_func>
 800ee96:	2301      	movs	r3, #1
 800ee98:	6144      	str	r4, [r0, #20]
 800ee9a:	6103      	str	r3, [r0, #16]
 800ee9c:	bd10      	pop	{r4, pc}
 800ee9e:	bf00      	nop
 800eea0:	080137d5 	.word	0x080137d5
 800eea4:	080137e6 	.word	0x080137e6

0800eea8 <__multiply>:
 800eea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeac:	4617      	mov	r7, r2
 800eeae:	690a      	ldr	r2, [r1, #16]
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	bfa8      	it	ge
 800eeb6:	463b      	movge	r3, r7
 800eeb8:	4689      	mov	r9, r1
 800eeba:	bfa4      	itt	ge
 800eebc:	460f      	movge	r7, r1
 800eebe:	4699      	movge	r9, r3
 800eec0:	693d      	ldr	r5, [r7, #16]
 800eec2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	6879      	ldr	r1, [r7, #4]
 800eeca:	eb05 060a 	add.w	r6, r5, sl
 800eece:	42b3      	cmp	r3, r6
 800eed0:	b085      	sub	sp, #20
 800eed2:	bfb8      	it	lt
 800eed4:	3101      	addlt	r1, #1
 800eed6:	f7ff fe93 	bl	800ec00 <_Balloc>
 800eeda:	b930      	cbnz	r0, 800eeea <__multiply+0x42>
 800eedc:	4602      	mov	r2, r0
 800eede:	4b41      	ldr	r3, [pc, #260]	@ (800efe4 <__multiply+0x13c>)
 800eee0:	4841      	ldr	r0, [pc, #260]	@ (800efe8 <__multiply+0x140>)
 800eee2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eee6:	f001 fc03 	bl	80106f0 <__assert_func>
 800eeea:	f100 0414 	add.w	r4, r0, #20
 800eeee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800eef2:	4623      	mov	r3, r4
 800eef4:	2200      	movs	r2, #0
 800eef6:	4573      	cmp	r3, lr
 800eef8:	d320      	bcc.n	800ef3c <__multiply+0x94>
 800eefa:	f107 0814 	add.w	r8, r7, #20
 800eefe:	f109 0114 	add.w	r1, r9, #20
 800ef02:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ef06:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ef0a:	9302      	str	r3, [sp, #8]
 800ef0c:	1beb      	subs	r3, r5, r7
 800ef0e:	3b15      	subs	r3, #21
 800ef10:	f023 0303 	bic.w	r3, r3, #3
 800ef14:	3304      	adds	r3, #4
 800ef16:	3715      	adds	r7, #21
 800ef18:	42bd      	cmp	r5, r7
 800ef1a:	bf38      	it	cc
 800ef1c:	2304      	movcc	r3, #4
 800ef1e:	9301      	str	r3, [sp, #4]
 800ef20:	9b02      	ldr	r3, [sp, #8]
 800ef22:	9103      	str	r1, [sp, #12]
 800ef24:	428b      	cmp	r3, r1
 800ef26:	d80c      	bhi.n	800ef42 <__multiply+0x9a>
 800ef28:	2e00      	cmp	r6, #0
 800ef2a:	dd03      	ble.n	800ef34 <__multiply+0x8c>
 800ef2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d055      	beq.n	800efe0 <__multiply+0x138>
 800ef34:	6106      	str	r6, [r0, #16]
 800ef36:	b005      	add	sp, #20
 800ef38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3c:	f843 2b04 	str.w	r2, [r3], #4
 800ef40:	e7d9      	b.n	800eef6 <__multiply+0x4e>
 800ef42:	f8b1 a000 	ldrh.w	sl, [r1]
 800ef46:	f1ba 0f00 	cmp.w	sl, #0
 800ef4a:	d01f      	beq.n	800ef8c <__multiply+0xe4>
 800ef4c:	46c4      	mov	ip, r8
 800ef4e:	46a1      	mov	r9, r4
 800ef50:	2700      	movs	r7, #0
 800ef52:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ef56:	f8d9 3000 	ldr.w	r3, [r9]
 800ef5a:	fa1f fb82 	uxth.w	fp, r2
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	fb0a 330b 	mla	r3, sl, fp, r3
 800ef64:	443b      	add	r3, r7
 800ef66:	f8d9 7000 	ldr.w	r7, [r9]
 800ef6a:	0c12      	lsrs	r2, r2, #16
 800ef6c:	0c3f      	lsrs	r7, r7, #16
 800ef6e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ef72:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef7c:	4565      	cmp	r5, ip
 800ef7e:	f849 3b04 	str.w	r3, [r9], #4
 800ef82:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ef86:	d8e4      	bhi.n	800ef52 <__multiply+0xaa>
 800ef88:	9b01      	ldr	r3, [sp, #4]
 800ef8a:	50e7      	str	r7, [r4, r3]
 800ef8c:	9b03      	ldr	r3, [sp, #12]
 800ef8e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ef92:	3104      	adds	r1, #4
 800ef94:	f1b9 0f00 	cmp.w	r9, #0
 800ef98:	d020      	beq.n	800efdc <__multiply+0x134>
 800ef9a:	6823      	ldr	r3, [r4, #0]
 800ef9c:	4647      	mov	r7, r8
 800ef9e:	46a4      	mov	ip, r4
 800efa0:	f04f 0a00 	mov.w	sl, #0
 800efa4:	f8b7 b000 	ldrh.w	fp, [r7]
 800efa8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800efac:	fb09 220b 	mla	r2, r9, fp, r2
 800efb0:	4452      	add	r2, sl
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efb8:	f84c 3b04 	str.w	r3, [ip], #4
 800efbc:	f857 3b04 	ldr.w	r3, [r7], #4
 800efc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efc4:	f8bc 3000 	ldrh.w	r3, [ip]
 800efc8:	fb09 330a 	mla	r3, r9, sl, r3
 800efcc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800efd0:	42bd      	cmp	r5, r7
 800efd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efd6:	d8e5      	bhi.n	800efa4 <__multiply+0xfc>
 800efd8:	9a01      	ldr	r2, [sp, #4]
 800efda:	50a3      	str	r3, [r4, r2]
 800efdc:	3404      	adds	r4, #4
 800efde:	e79f      	b.n	800ef20 <__multiply+0x78>
 800efe0:	3e01      	subs	r6, #1
 800efe2:	e7a1      	b.n	800ef28 <__multiply+0x80>
 800efe4:	080137d5 	.word	0x080137d5
 800efe8:	080137e6 	.word	0x080137e6

0800efec <__pow5mult>:
 800efec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eff0:	4615      	mov	r5, r2
 800eff2:	f012 0203 	ands.w	r2, r2, #3
 800eff6:	4607      	mov	r7, r0
 800eff8:	460e      	mov	r6, r1
 800effa:	d007      	beq.n	800f00c <__pow5mult+0x20>
 800effc:	4c25      	ldr	r4, [pc, #148]	@ (800f094 <__pow5mult+0xa8>)
 800effe:	3a01      	subs	r2, #1
 800f000:	2300      	movs	r3, #0
 800f002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f006:	f7ff fe5d 	bl	800ecc4 <__multadd>
 800f00a:	4606      	mov	r6, r0
 800f00c:	10ad      	asrs	r5, r5, #2
 800f00e:	d03d      	beq.n	800f08c <__pow5mult+0xa0>
 800f010:	69fc      	ldr	r4, [r7, #28]
 800f012:	b97c      	cbnz	r4, 800f034 <__pow5mult+0x48>
 800f014:	2010      	movs	r0, #16
 800f016:	f7ff fd3d 	bl	800ea94 <malloc>
 800f01a:	4602      	mov	r2, r0
 800f01c:	61f8      	str	r0, [r7, #28]
 800f01e:	b928      	cbnz	r0, 800f02c <__pow5mult+0x40>
 800f020:	4b1d      	ldr	r3, [pc, #116]	@ (800f098 <__pow5mult+0xac>)
 800f022:	481e      	ldr	r0, [pc, #120]	@ (800f09c <__pow5mult+0xb0>)
 800f024:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f028:	f001 fb62 	bl	80106f0 <__assert_func>
 800f02c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f030:	6004      	str	r4, [r0, #0]
 800f032:	60c4      	str	r4, [r0, #12]
 800f034:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f03c:	b94c      	cbnz	r4, 800f052 <__pow5mult+0x66>
 800f03e:	f240 2171 	movw	r1, #625	@ 0x271
 800f042:	4638      	mov	r0, r7
 800f044:	f7ff ff1a 	bl	800ee7c <__i2b>
 800f048:	2300      	movs	r3, #0
 800f04a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f04e:	4604      	mov	r4, r0
 800f050:	6003      	str	r3, [r0, #0]
 800f052:	f04f 0900 	mov.w	r9, #0
 800f056:	07eb      	lsls	r3, r5, #31
 800f058:	d50a      	bpl.n	800f070 <__pow5mult+0x84>
 800f05a:	4631      	mov	r1, r6
 800f05c:	4622      	mov	r2, r4
 800f05e:	4638      	mov	r0, r7
 800f060:	f7ff ff22 	bl	800eea8 <__multiply>
 800f064:	4631      	mov	r1, r6
 800f066:	4680      	mov	r8, r0
 800f068:	4638      	mov	r0, r7
 800f06a:	f7ff fe09 	bl	800ec80 <_Bfree>
 800f06e:	4646      	mov	r6, r8
 800f070:	106d      	asrs	r5, r5, #1
 800f072:	d00b      	beq.n	800f08c <__pow5mult+0xa0>
 800f074:	6820      	ldr	r0, [r4, #0]
 800f076:	b938      	cbnz	r0, 800f088 <__pow5mult+0x9c>
 800f078:	4622      	mov	r2, r4
 800f07a:	4621      	mov	r1, r4
 800f07c:	4638      	mov	r0, r7
 800f07e:	f7ff ff13 	bl	800eea8 <__multiply>
 800f082:	6020      	str	r0, [r4, #0]
 800f084:	f8c0 9000 	str.w	r9, [r0]
 800f088:	4604      	mov	r4, r0
 800f08a:	e7e4      	b.n	800f056 <__pow5mult+0x6a>
 800f08c:	4630      	mov	r0, r6
 800f08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f092:	bf00      	nop
 800f094:	080138f8 	.word	0x080138f8
 800f098:	08013766 	.word	0x08013766
 800f09c:	080137e6 	.word	0x080137e6

0800f0a0 <__lshift>:
 800f0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	6849      	ldr	r1, [r1, #4]
 800f0a8:	6923      	ldr	r3, [r4, #16]
 800f0aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0ae:	68a3      	ldr	r3, [r4, #8]
 800f0b0:	4607      	mov	r7, r0
 800f0b2:	4691      	mov	r9, r2
 800f0b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0b8:	f108 0601 	add.w	r6, r8, #1
 800f0bc:	42b3      	cmp	r3, r6
 800f0be:	db0b      	blt.n	800f0d8 <__lshift+0x38>
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	f7ff fd9d 	bl	800ec00 <_Balloc>
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	b948      	cbnz	r0, 800f0de <__lshift+0x3e>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	4b28      	ldr	r3, [pc, #160]	@ (800f170 <__lshift+0xd0>)
 800f0ce:	4829      	ldr	r0, [pc, #164]	@ (800f174 <__lshift+0xd4>)
 800f0d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f0d4:	f001 fb0c 	bl	80106f0 <__assert_func>
 800f0d8:	3101      	adds	r1, #1
 800f0da:	005b      	lsls	r3, r3, #1
 800f0dc:	e7ee      	b.n	800f0bc <__lshift+0x1c>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f100 0114 	add.w	r1, r0, #20
 800f0e4:	f100 0210 	add.w	r2, r0, #16
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	4553      	cmp	r3, sl
 800f0ec:	db33      	blt.n	800f156 <__lshift+0xb6>
 800f0ee:	6920      	ldr	r0, [r4, #16]
 800f0f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0f4:	f104 0314 	add.w	r3, r4, #20
 800f0f8:	f019 091f 	ands.w	r9, r9, #31
 800f0fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f104:	d02b      	beq.n	800f15e <__lshift+0xbe>
 800f106:	f1c9 0e20 	rsb	lr, r9, #32
 800f10a:	468a      	mov	sl, r1
 800f10c:	2200      	movs	r2, #0
 800f10e:	6818      	ldr	r0, [r3, #0]
 800f110:	fa00 f009 	lsl.w	r0, r0, r9
 800f114:	4310      	orrs	r0, r2
 800f116:	f84a 0b04 	str.w	r0, [sl], #4
 800f11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11e:	459c      	cmp	ip, r3
 800f120:	fa22 f20e 	lsr.w	r2, r2, lr
 800f124:	d8f3      	bhi.n	800f10e <__lshift+0x6e>
 800f126:	ebac 0304 	sub.w	r3, ip, r4
 800f12a:	3b15      	subs	r3, #21
 800f12c:	f023 0303 	bic.w	r3, r3, #3
 800f130:	3304      	adds	r3, #4
 800f132:	f104 0015 	add.w	r0, r4, #21
 800f136:	4560      	cmp	r0, ip
 800f138:	bf88      	it	hi
 800f13a:	2304      	movhi	r3, #4
 800f13c:	50ca      	str	r2, [r1, r3]
 800f13e:	b10a      	cbz	r2, 800f144 <__lshift+0xa4>
 800f140:	f108 0602 	add.w	r6, r8, #2
 800f144:	3e01      	subs	r6, #1
 800f146:	4638      	mov	r0, r7
 800f148:	612e      	str	r6, [r5, #16]
 800f14a:	4621      	mov	r1, r4
 800f14c:	f7ff fd98 	bl	800ec80 <_Bfree>
 800f150:	4628      	mov	r0, r5
 800f152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f156:	f842 0f04 	str.w	r0, [r2, #4]!
 800f15a:	3301      	adds	r3, #1
 800f15c:	e7c5      	b.n	800f0ea <__lshift+0x4a>
 800f15e:	3904      	subs	r1, #4
 800f160:	f853 2b04 	ldr.w	r2, [r3], #4
 800f164:	f841 2f04 	str.w	r2, [r1, #4]!
 800f168:	459c      	cmp	ip, r3
 800f16a:	d8f9      	bhi.n	800f160 <__lshift+0xc0>
 800f16c:	e7ea      	b.n	800f144 <__lshift+0xa4>
 800f16e:	bf00      	nop
 800f170:	080137d5 	.word	0x080137d5
 800f174:	080137e6 	.word	0x080137e6

0800f178 <__mcmp>:
 800f178:	690a      	ldr	r2, [r1, #16]
 800f17a:	4603      	mov	r3, r0
 800f17c:	6900      	ldr	r0, [r0, #16]
 800f17e:	1a80      	subs	r0, r0, r2
 800f180:	b530      	push	{r4, r5, lr}
 800f182:	d10e      	bne.n	800f1a2 <__mcmp+0x2a>
 800f184:	3314      	adds	r3, #20
 800f186:	3114      	adds	r1, #20
 800f188:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f18c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f190:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f194:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f198:	4295      	cmp	r5, r2
 800f19a:	d003      	beq.n	800f1a4 <__mcmp+0x2c>
 800f19c:	d205      	bcs.n	800f1aa <__mcmp+0x32>
 800f19e:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a2:	bd30      	pop	{r4, r5, pc}
 800f1a4:	42a3      	cmp	r3, r4
 800f1a6:	d3f3      	bcc.n	800f190 <__mcmp+0x18>
 800f1a8:	e7fb      	b.n	800f1a2 <__mcmp+0x2a>
 800f1aa:	2001      	movs	r0, #1
 800f1ac:	e7f9      	b.n	800f1a2 <__mcmp+0x2a>
	...

0800f1b0 <__mdiff>:
 800f1b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b4:	4689      	mov	r9, r1
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	4648      	mov	r0, r9
 800f1bc:	4614      	mov	r4, r2
 800f1be:	f7ff ffdb 	bl	800f178 <__mcmp>
 800f1c2:	1e05      	subs	r5, r0, #0
 800f1c4:	d112      	bne.n	800f1ec <__mdiff+0x3c>
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f7ff fd19 	bl	800ec00 <_Balloc>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	b928      	cbnz	r0, 800f1de <__mdiff+0x2e>
 800f1d2:	4b3f      	ldr	r3, [pc, #252]	@ (800f2d0 <__mdiff+0x120>)
 800f1d4:	f240 2137 	movw	r1, #567	@ 0x237
 800f1d8:	483e      	ldr	r0, [pc, #248]	@ (800f2d4 <__mdiff+0x124>)
 800f1da:	f001 fa89 	bl	80106f0 <__assert_func>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	b003      	add	sp, #12
 800f1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ec:	bfbc      	itt	lt
 800f1ee:	464b      	movlt	r3, r9
 800f1f0:	46a1      	movlt	r9, r4
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f1f8:	bfba      	itte	lt
 800f1fa:	461c      	movlt	r4, r3
 800f1fc:	2501      	movlt	r5, #1
 800f1fe:	2500      	movge	r5, #0
 800f200:	f7ff fcfe 	bl	800ec00 <_Balloc>
 800f204:	4602      	mov	r2, r0
 800f206:	b918      	cbnz	r0, 800f210 <__mdiff+0x60>
 800f208:	4b31      	ldr	r3, [pc, #196]	@ (800f2d0 <__mdiff+0x120>)
 800f20a:	f240 2145 	movw	r1, #581	@ 0x245
 800f20e:	e7e3      	b.n	800f1d8 <__mdiff+0x28>
 800f210:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f214:	6926      	ldr	r6, [r4, #16]
 800f216:	60c5      	str	r5, [r0, #12]
 800f218:	f109 0310 	add.w	r3, r9, #16
 800f21c:	f109 0514 	add.w	r5, r9, #20
 800f220:	f104 0e14 	add.w	lr, r4, #20
 800f224:	f100 0b14 	add.w	fp, r0, #20
 800f228:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f22c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f230:	9301      	str	r3, [sp, #4]
 800f232:	46d9      	mov	r9, fp
 800f234:	f04f 0c00 	mov.w	ip, #0
 800f238:	9b01      	ldr	r3, [sp, #4]
 800f23a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f23e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f242:	9301      	str	r3, [sp, #4]
 800f244:	fa1f f38a 	uxth.w	r3, sl
 800f248:	4619      	mov	r1, r3
 800f24a:	b283      	uxth	r3, r0
 800f24c:	1acb      	subs	r3, r1, r3
 800f24e:	0c00      	lsrs	r0, r0, #16
 800f250:	4463      	add	r3, ip
 800f252:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f256:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f260:	4576      	cmp	r6, lr
 800f262:	f849 3b04 	str.w	r3, [r9], #4
 800f266:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f26a:	d8e5      	bhi.n	800f238 <__mdiff+0x88>
 800f26c:	1b33      	subs	r3, r6, r4
 800f26e:	3b15      	subs	r3, #21
 800f270:	f023 0303 	bic.w	r3, r3, #3
 800f274:	3415      	adds	r4, #21
 800f276:	3304      	adds	r3, #4
 800f278:	42a6      	cmp	r6, r4
 800f27a:	bf38      	it	cc
 800f27c:	2304      	movcc	r3, #4
 800f27e:	441d      	add	r5, r3
 800f280:	445b      	add	r3, fp
 800f282:	461e      	mov	r6, r3
 800f284:	462c      	mov	r4, r5
 800f286:	4544      	cmp	r4, r8
 800f288:	d30e      	bcc.n	800f2a8 <__mdiff+0xf8>
 800f28a:	f108 0103 	add.w	r1, r8, #3
 800f28e:	1b49      	subs	r1, r1, r5
 800f290:	f021 0103 	bic.w	r1, r1, #3
 800f294:	3d03      	subs	r5, #3
 800f296:	45a8      	cmp	r8, r5
 800f298:	bf38      	it	cc
 800f29a:	2100      	movcc	r1, #0
 800f29c:	440b      	add	r3, r1
 800f29e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2a2:	b191      	cbz	r1, 800f2ca <__mdiff+0x11a>
 800f2a4:	6117      	str	r7, [r2, #16]
 800f2a6:	e79d      	b.n	800f1e4 <__mdiff+0x34>
 800f2a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800f2ac:	46e6      	mov	lr, ip
 800f2ae:	0c08      	lsrs	r0, r1, #16
 800f2b0:	fa1c fc81 	uxtah	ip, ip, r1
 800f2b4:	4471      	add	r1, lr
 800f2b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f2ba:	b289      	uxth	r1, r1
 800f2bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f2c0:	f846 1b04 	str.w	r1, [r6], #4
 800f2c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f2c8:	e7dd      	b.n	800f286 <__mdiff+0xd6>
 800f2ca:	3f01      	subs	r7, #1
 800f2cc:	e7e7      	b.n	800f29e <__mdiff+0xee>
 800f2ce:	bf00      	nop
 800f2d0:	080137d5 	.word	0x080137d5
 800f2d4:	080137e6 	.word	0x080137e6

0800f2d8 <__ulp>:
 800f2d8:	b082      	sub	sp, #8
 800f2da:	ed8d 0b00 	vstr	d0, [sp]
 800f2de:	9a01      	ldr	r2, [sp, #4]
 800f2e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f320 <__ulp+0x48>)
 800f2e2:	4013      	ands	r3, r2
 800f2e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	dc08      	bgt.n	800f2fe <__ulp+0x26>
 800f2ec:	425b      	negs	r3, r3
 800f2ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f2f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f2f6:	da04      	bge.n	800f302 <__ulp+0x2a>
 800f2f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f2fc:	4113      	asrs	r3, r2
 800f2fe:	2200      	movs	r2, #0
 800f300:	e008      	b.n	800f314 <__ulp+0x3c>
 800f302:	f1a2 0314 	sub.w	r3, r2, #20
 800f306:	2b1e      	cmp	r3, #30
 800f308:	bfda      	itte	le
 800f30a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f30e:	40da      	lsrle	r2, r3
 800f310:	2201      	movgt	r2, #1
 800f312:	2300      	movs	r3, #0
 800f314:	4619      	mov	r1, r3
 800f316:	4610      	mov	r0, r2
 800f318:	ec41 0b10 	vmov	d0, r0, r1
 800f31c:	b002      	add	sp, #8
 800f31e:	4770      	bx	lr
 800f320:	7ff00000 	.word	0x7ff00000

0800f324 <__b2d>:
 800f324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f328:	6906      	ldr	r6, [r0, #16]
 800f32a:	f100 0814 	add.w	r8, r0, #20
 800f32e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f332:	1f37      	subs	r7, r6, #4
 800f334:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f338:	4610      	mov	r0, r2
 800f33a:	f7ff fd53 	bl	800ede4 <__hi0bits>
 800f33e:	f1c0 0320 	rsb	r3, r0, #32
 800f342:	280a      	cmp	r0, #10
 800f344:	600b      	str	r3, [r1, #0]
 800f346:	491b      	ldr	r1, [pc, #108]	@ (800f3b4 <__b2d+0x90>)
 800f348:	dc15      	bgt.n	800f376 <__b2d+0x52>
 800f34a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f34e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f352:	45b8      	cmp	r8, r7
 800f354:	ea43 0501 	orr.w	r5, r3, r1
 800f358:	bf34      	ite	cc
 800f35a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f35e:	2300      	movcs	r3, #0
 800f360:	3015      	adds	r0, #21
 800f362:	fa02 f000 	lsl.w	r0, r2, r0
 800f366:	fa23 f30c 	lsr.w	r3, r3, ip
 800f36a:	4303      	orrs	r3, r0
 800f36c:	461c      	mov	r4, r3
 800f36e:	ec45 4b10 	vmov	d0, r4, r5
 800f372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f376:	45b8      	cmp	r8, r7
 800f378:	bf3a      	itte	cc
 800f37a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f37e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f382:	2300      	movcs	r3, #0
 800f384:	380b      	subs	r0, #11
 800f386:	d012      	beq.n	800f3ae <__b2d+0x8a>
 800f388:	f1c0 0120 	rsb	r1, r0, #32
 800f38c:	fa23 f401 	lsr.w	r4, r3, r1
 800f390:	4082      	lsls	r2, r0
 800f392:	4322      	orrs	r2, r4
 800f394:	4547      	cmp	r7, r8
 800f396:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f39a:	bf8c      	ite	hi
 800f39c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f3a0:	2200      	movls	r2, #0
 800f3a2:	4083      	lsls	r3, r0
 800f3a4:	40ca      	lsrs	r2, r1
 800f3a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	e7de      	b.n	800f36c <__b2d+0x48>
 800f3ae:	ea42 0501 	orr.w	r5, r2, r1
 800f3b2:	e7db      	b.n	800f36c <__b2d+0x48>
 800f3b4:	3ff00000 	.word	0x3ff00000

0800f3b8 <__d2b>:
 800f3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3bc:	460f      	mov	r7, r1
 800f3be:	2101      	movs	r1, #1
 800f3c0:	ec59 8b10 	vmov	r8, r9, d0
 800f3c4:	4616      	mov	r6, r2
 800f3c6:	f7ff fc1b 	bl	800ec00 <_Balloc>
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	b930      	cbnz	r0, 800f3dc <__d2b+0x24>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	4b23      	ldr	r3, [pc, #140]	@ (800f460 <__d2b+0xa8>)
 800f3d2:	4824      	ldr	r0, [pc, #144]	@ (800f464 <__d2b+0xac>)
 800f3d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800f3d8:	f001 f98a 	bl	80106f0 <__assert_func>
 800f3dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f3e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3e4:	b10d      	cbz	r5, 800f3ea <__d2b+0x32>
 800f3e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f3ea:	9301      	str	r3, [sp, #4]
 800f3ec:	f1b8 0300 	subs.w	r3, r8, #0
 800f3f0:	d023      	beq.n	800f43a <__d2b+0x82>
 800f3f2:	4668      	mov	r0, sp
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	f7ff fd14 	bl	800ee22 <__lo0bits>
 800f3fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f3fe:	b1d0      	cbz	r0, 800f436 <__d2b+0x7e>
 800f400:	f1c0 0320 	rsb	r3, r0, #32
 800f404:	fa02 f303 	lsl.w	r3, r2, r3
 800f408:	430b      	orrs	r3, r1
 800f40a:	40c2      	lsrs	r2, r0
 800f40c:	6163      	str	r3, [r4, #20]
 800f40e:	9201      	str	r2, [sp, #4]
 800f410:	9b01      	ldr	r3, [sp, #4]
 800f412:	61a3      	str	r3, [r4, #24]
 800f414:	2b00      	cmp	r3, #0
 800f416:	bf0c      	ite	eq
 800f418:	2201      	moveq	r2, #1
 800f41a:	2202      	movne	r2, #2
 800f41c:	6122      	str	r2, [r4, #16]
 800f41e:	b1a5      	cbz	r5, 800f44a <__d2b+0x92>
 800f420:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f424:	4405      	add	r5, r0
 800f426:	603d      	str	r5, [r7, #0]
 800f428:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f42c:	6030      	str	r0, [r6, #0]
 800f42e:	4620      	mov	r0, r4
 800f430:	b003      	add	sp, #12
 800f432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f436:	6161      	str	r1, [r4, #20]
 800f438:	e7ea      	b.n	800f410 <__d2b+0x58>
 800f43a:	a801      	add	r0, sp, #4
 800f43c:	f7ff fcf1 	bl	800ee22 <__lo0bits>
 800f440:	9b01      	ldr	r3, [sp, #4]
 800f442:	6163      	str	r3, [r4, #20]
 800f444:	3020      	adds	r0, #32
 800f446:	2201      	movs	r2, #1
 800f448:	e7e8      	b.n	800f41c <__d2b+0x64>
 800f44a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f44e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f452:	6038      	str	r0, [r7, #0]
 800f454:	6918      	ldr	r0, [r3, #16]
 800f456:	f7ff fcc5 	bl	800ede4 <__hi0bits>
 800f45a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f45e:	e7e5      	b.n	800f42c <__d2b+0x74>
 800f460:	080137d5 	.word	0x080137d5
 800f464:	080137e6 	.word	0x080137e6

0800f468 <__ratio>:
 800f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46c:	b085      	sub	sp, #20
 800f46e:	e9cd 1000 	strd	r1, r0, [sp]
 800f472:	a902      	add	r1, sp, #8
 800f474:	f7ff ff56 	bl	800f324 <__b2d>
 800f478:	9800      	ldr	r0, [sp, #0]
 800f47a:	a903      	add	r1, sp, #12
 800f47c:	ec55 4b10 	vmov	r4, r5, d0
 800f480:	f7ff ff50 	bl	800f324 <__b2d>
 800f484:	9b01      	ldr	r3, [sp, #4]
 800f486:	6919      	ldr	r1, [r3, #16]
 800f488:	9b00      	ldr	r3, [sp, #0]
 800f48a:	691b      	ldr	r3, [r3, #16]
 800f48c:	1ac9      	subs	r1, r1, r3
 800f48e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f492:	1a9b      	subs	r3, r3, r2
 800f494:	ec5b ab10 	vmov	sl, fp, d0
 800f498:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	bfce      	itee	gt
 800f4a0:	462a      	movgt	r2, r5
 800f4a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f4a6:	465a      	movle	r2, fp
 800f4a8:	462f      	mov	r7, r5
 800f4aa:	46d9      	mov	r9, fp
 800f4ac:	bfcc      	ite	gt
 800f4ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f4b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f4b6:	464b      	mov	r3, r9
 800f4b8:	4652      	mov	r2, sl
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	4639      	mov	r1, r7
 800f4be:	f7f1 f9e5 	bl	800088c <__aeabi_ddiv>
 800f4c2:	ec41 0b10 	vmov	d0, r0, r1
 800f4c6:	b005      	add	sp, #20
 800f4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4cc <__copybits>:
 800f4cc:	3901      	subs	r1, #1
 800f4ce:	b570      	push	{r4, r5, r6, lr}
 800f4d0:	1149      	asrs	r1, r1, #5
 800f4d2:	6914      	ldr	r4, [r2, #16]
 800f4d4:	3101      	adds	r1, #1
 800f4d6:	f102 0314 	add.w	r3, r2, #20
 800f4da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f4de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f4e2:	1f05      	subs	r5, r0, #4
 800f4e4:	42a3      	cmp	r3, r4
 800f4e6:	d30c      	bcc.n	800f502 <__copybits+0x36>
 800f4e8:	1aa3      	subs	r3, r4, r2
 800f4ea:	3b11      	subs	r3, #17
 800f4ec:	f023 0303 	bic.w	r3, r3, #3
 800f4f0:	3211      	adds	r2, #17
 800f4f2:	42a2      	cmp	r2, r4
 800f4f4:	bf88      	it	hi
 800f4f6:	2300      	movhi	r3, #0
 800f4f8:	4418      	add	r0, r3
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	4288      	cmp	r0, r1
 800f4fe:	d305      	bcc.n	800f50c <__copybits+0x40>
 800f500:	bd70      	pop	{r4, r5, r6, pc}
 800f502:	f853 6b04 	ldr.w	r6, [r3], #4
 800f506:	f845 6f04 	str.w	r6, [r5, #4]!
 800f50a:	e7eb      	b.n	800f4e4 <__copybits+0x18>
 800f50c:	f840 3b04 	str.w	r3, [r0], #4
 800f510:	e7f4      	b.n	800f4fc <__copybits+0x30>

0800f512 <__any_on>:
 800f512:	f100 0214 	add.w	r2, r0, #20
 800f516:	6900      	ldr	r0, [r0, #16]
 800f518:	114b      	asrs	r3, r1, #5
 800f51a:	4298      	cmp	r0, r3
 800f51c:	b510      	push	{r4, lr}
 800f51e:	db11      	blt.n	800f544 <__any_on+0x32>
 800f520:	dd0a      	ble.n	800f538 <__any_on+0x26>
 800f522:	f011 011f 	ands.w	r1, r1, #31
 800f526:	d007      	beq.n	800f538 <__any_on+0x26>
 800f528:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f52c:	fa24 f001 	lsr.w	r0, r4, r1
 800f530:	fa00 f101 	lsl.w	r1, r0, r1
 800f534:	428c      	cmp	r4, r1
 800f536:	d10b      	bne.n	800f550 <__any_on+0x3e>
 800f538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d803      	bhi.n	800f548 <__any_on+0x36>
 800f540:	2000      	movs	r0, #0
 800f542:	bd10      	pop	{r4, pc}
 800f544:	4603      	mov	r3, r0
 800f546:	e7f7      	b.n	800f538 <__any_on+0x26>
 800f548:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f54c:	2900      	cmp	r1, #0
 800f54e:	d0f5      	beq.n	800f53c <__any_on+0x2a>
 800f550:	2001      	movs	r0, #1
 800f552:	e7f6      	b.n	800f542 <__any_on+0x30>

0800f554 <sulp>:
 800f554:	b570      	push	{r4, r5, r6, lr}
 800f556:	4604      	mov	r4, r0
 800f558:	460d      	mov	r5, r1
 800f55a:	ec45 4b10 	vmov	d0, r4, r5
 800f55e:	4616      	mov	r6, r2
 800f560:	f7ff feba 	bl	800f2d8 <__ulp>
 800f564:	ec51 0b10 	vmov	r0, r1, d0
 800f568:	b17e      	cbz	r6, 800f58a <sulp+0x36>
 800f56a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f56e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f572:	2b00      	cmp	r3, #0
 800f574:	dd09      	ble.n	800f58a <sulp+0x36>
 800f576:	051b      	lsls	r3, r3, #20
 800f578:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f57c:	2400      	movs	r4, #0
 800f57e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f582:	4622      	mov	r2, r4
 800f584:	462b      	mov	r3, r5
 800f586:	f7f1 f857 	bl	8000638 <__aeabi_dmul>
 800f58a:	ec41 0b10 	vmov	d0, r0, r1
 800f58e:	bd70      	pop	{r4, r5, r6, pc}

0800f590 <_strtod_l>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	b09f      	sub	sp, #124	@ 0x7c
 800f596:	460c      	mov	r4, r1
 800f598:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f59a:	2200      	movs	r2, #0
 800f59c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f59e:	9005      	str	r0, [sp, #20]
 800f5a0:	f04f 0a00 	mov.w	sl, #0
 800f5a4:	f04f 0b00 	mov.w	fp, #0
 800f5a8:	460a      	mov	r2, r1
 800f5aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800f5ac:	7811      	ldrb	r1, [r2, #0]
 800f5ae:	292b      	cmp	r1, #43	@ 0x2b
 800f5b0:	d04a      	beq.n	800f648 <_strtod_l+0xb8>
 800f5b2:	d838      	bhi.n	800f626 <_strtod_l+0x96>
 800f5b4:	290d      	cmp	r1, #13
 800f5b6:	d832      	bhi.n	800f61e <_strtod_l+0x8e>
 800f5b8:	2908      	cmp	r1, #8
 800f5ba:	d832      	bhi.n	800f622 <_strtod_l+0x92>
 800f5bc:	2900      	cmp	r1, #0
 800f5be:	d03b      	beq.n	800f638 <_strtod_l+0xa8>
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800f5c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f5c6:	782a      	ldrb	r2, [r5, #0]
 800f5c8:	2a30      	cmp	r2, #48	@ 0x30
 800f5ca:	f040 80b2 	bne.w	800f732 <_strtod_l+0x1a2>
 800f5ce:	786a      	ldrb	r2, [r5, #1]
 800f5d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f5d4:	2a58      	cmp	r2, #88	@ 0x58
 800f5d6:	d16e      	bne.n	800f6b6 <_strtod_l+0x126>
 800f5d8:	9302      	str	r3, [sp, #8]
 800f5da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5dc:	9301      	str	r3, [sp, #4]
 800f5de:	ab1a      	add	r3, sp, #104	@ 0x68
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	4a8f      	ldr	r2, [pc, #572]	@ (800f820 <_strtod_l+0x290>)
 800f5e4:	9805      	ldr	r0, [sp, #20]
 800f5e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f5e8:	a919      	add	r1, sp, #100	@ 0x64
 800f5ea:	f001 f91b 	bl	8010824 <__gethex>
 800f5ee:	f010 060f 	ands.w	r6, r0, #15
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	d005      	beq.n	800f602 <_strtod_l+0x72>
 800f5f6:	2e06      	cmp	r6, #6
 800f5f8:	d128      	bne.n	800f64c <_strtod_l+0xbc>
 800f5fa:	3501      	adds	r5, #1
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800f600:	930e      	str	r3, [sp, #56]	@ 0x38
 800f602:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f604:	2b00      	cmp	r3, #0
 800f606:	f040 858e 	bne.w	8010126 <_strtod_l+0xb96>
 800f60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f60c:	b1cb      	cbz	r3, 800f642 <_strtod_l+0xb2>
 800f60e:	4652      	mov	r2, sl
 800f610:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f614:	ec43 2b10 	vmov	d0, r2, r3
 800f618:	b01f      	add	sp, #124	@ 0x7c
 800f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61e:	2920      	cmp	r1, #32
 800f620:	d1ce      	bne.n	800f5c0 <_strtod_l+0x30>
 800f622:	3201      	adds	r2, #1
 800f624:	e7c1      	b.n	800f5aa <_strtod_l+0x1a>
 800f626:	292d      	cmp	r1, #45	@ 0x2d
 800f628:	d1ca      	bne.n	800f5c0 <_strtod_l+0x30>
 800f62a:	2101      	movs	r1, #1
 800f62c:	910e      	str	r1, [sp, #56]	@ 0x38
 800f62e:	1c51      	adds	r1, r2, #1
 800f630:	9119      	str	r1, [sp, #100]	@ 0x64
 800f632:	7852      	ldrb	r2, [r2, #1]
 800f634:	2a00      	cmp	r2, #0
 800f636:	d1c5      	bne.n	800f5c4 <_strtod_l+0x34>
 800f638:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f63a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	f040 8570 	bne.w	8010122 <_strtod_l+0xb92>
 800f642:	4652      	mov	r2, sl
 800f644:	465b      	mov	r3, fp
 800f646:	e7e5      	b.n	800f614 <_strtod_l+0x84>
 800f648:	2100      	movs	r1, #0
 800f64a:	e7ef      	b.n	800f62c <_strtod_l+0x9c>
 800f64c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f64e:	b13a      	cbz	r2, 800f660 <_strtod_l+0xd0>
 800f650:	2135      	movs	r1, #53	@ 0x35
 800f652:	a81c      	add	r0, sp, #112	@ 0x70
 800f654:	f7ff ff3a 	bl	800f4cc <__copybits>
 800f658:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f65a:	9805      	ldr	r0, [sp, #20]
 800f65c:	f7ff fb10 	bl	800ec80 <_Bfree>
 800f660:	3e01      	subs	r6, #1
 800f662:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f664:	2e04      	cmp	r6, #4
 800f666:	d806      	bhi.n	800f676 <_strtod_l+0xe6>
 800f668:	e8df f006 	tbb	[pc, r6]
 800f66c:	201d0314 	.word	0x201d0314
 800f670:	14          	.byte	0x14
 800f671:	00          	.byte	0x00
 800f672:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f676:	05e1      	lsls	r1, r4, #23
 800f678:	bf48      	it	mi
 800f67a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f67e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f682:	0d1b      	lsrs	r3, r3, #20
 800f684:	051b      	lsls	r3, r3, #20
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1bb      	bne.n	800f602 <_strtod_l+0x72>
 800f68a:	f7fe fb1d 	bl	800dcc8 <__errno>
 800f68e:	2322      	movs	r3, #34	@ 0x22
 800f690:	6003      	str	r3, [r0, #0]
 800f692:	e7b6      	b.n	800f602 <_strtod_l+0x72>
 800f694:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f698:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f69c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f6a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f6a4:	e7e7      	b.n	800f676 <_strtod_l+0xe6>
 800f6a6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f828 <_strtod_l+0x298>
 800f6aa:	e7e4      	b.n	800f676 <_strtod_l+0xe6>
 800f6ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f6b0:	f04f 3aff 	mov.w	sl, #4294967295
 800f6b4:	e7df      	b.n	800f676 <_strtod_l+0xe6>
 800f6b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800f6bc:	785b      	ldrb	r3, [r3, #1]
 800f6be:	2b30      	cmp	r3, #48	@ 0x30
 800f6c0:	d0f9      	beq.n	800f6b6 <_strtod_l+0x126>
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d09d      	beq.n	800f602 <_strtod_l+0x72>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	2700      	movs	r7, #0
 800f6ca:	9308      	str	r3, [sp, #32]
 800f6cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6d0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f6d2:	46b9      	mov	r9, r7
 800f6d4:	220a      	movs	r2, #10
 800f6d6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f6d8:	7805      	ldrb	r5, [r0, #0]
 800f6da:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f6de:	b2d9      	uxtb	r1, r3
 800f6e0:	2909      	cmp	r1, #9
 800f6e2:	d928      	bls.n	800f736 <_strtod_l+0x1a6>
 800f6e4:	494f      	ldr	r1, [pc, #316]	@ (800f824 <_strtod_l+0x294>)
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f000 ffd6 	bl	8010698 <strncmp>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d032      	beq.n	800f756 <_strtod_l+0x1c6>
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	462a      	mov	r2, r5
 800f6f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f6f6:	464d      	mov	r5, r9
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	2a65      	cmp	r2, #101	@ 0x65
 800f6fc:	d001      	beq.n	800f702 <_strtod_l+0x172>
 800f6fe:	2a45      	cmp	r2, #69	@ 0x45
 800f700:	d114      	bne.n	800f72c <_strtod_l+0x19c>
 800f702:	b91d      	cbnz	r5, 800f70c <_strtod_l+0x17c>
 800f704:	9a08      	ldr	r2, [sp, #32]
 800f706:	4302      	orrs	r2, r0
 800f708:	d096      	beq.n	800f638 <_strtod_l+0xa8>
 800f70a:	2500      	movs	r5, #0
 800f70c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f70e:	1c62      	adds	r2, r4, #1
 800f710:	9219      	str	r2, [sp, #100]	@ 0x64
 800f712:	7862      	ldrb	r2, [r4, #1]
 800f714:	2a2b      	cmp	r2, #43	@ 0x2b
 800f716:	d07a      	beq.n	800f80e <_strtod_l+0x27e>
 800f718:	2a2d      	cmp	r2, #45	@ 0x2d
 800f71a:	d07e      	beq.n	800f81a <_strtod_l+0x28a>
 800f71c:	f04f 0c00 	mov.w	ip, #0
 800f720:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f724:	2909      	cmp	r1, #9
 800f726:	f240 8085 	bls.w	800f834 <_strtod_l+0x2a4>
 800f72a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f72c:	f04f 0800 	mov.w	r8, #0
 800f730:	e0a5      	b.n	800f87e <_strtod_l+0x2ee>
 800f732:	2300      	movs	r3, #0
 800f734:	e7c8      	b.n	800f6c8 <_strtod_l+0x138>
 800f736:	f1b9 0f08 	cmp.w	r9, #8
 800f73a:	bfd8      	it	le
 800f73c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f73e:	f100 0001 	add.w	r0, r0, #1
 800f742:	bfda      	itte	le
 800f744:	fb02 3301 	mlale	r3, r2, r1, r3
 800f748:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f74a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f74e:	f109 0901 	add.w	r9, r9, #1
 800f752:	9019      	str	r0, [sp, #100]	@ 0x64
 800f754:	e7bf      	b.n	800f6d6 <_strtod_l+0x146>
 800f756:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f758:	1c5a      	adds	r2, r3, #1
 800f75a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f75c:	785a      	ldrb	r2, [r3, #1]
 800f75e:	f1b9 0f00 	cmp.w	r9, #0
 800f762:	d03b      	beq.n	800f7dc <_strtod_l+0x24c>
 800f764:	900a      	str	r0, [sp, #40]	@ 0x28
 800f766:	464d      	mov	r5, r9
 800f768:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f76c:	2b09      	cmp	r3, #9
 800f76e:	d912      	bls.n	800f796 <_strtod_l+0x206>
 800f770:	2301      	movs	r3, #1
 800f772:	e7c2      	b.n	800f6fa <_strtod_l+0x16a>
 800f774:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f776:	1c5a      	adds	r2, r3, #1
 800f778:	9219      	str	r2, [sp, #100]	@ 0x64
 800f77a:	785a      	ldrb	r2, [r3, #1]
 800f77c:	3001      	adds	r0, #1
 800f77e:	2a30      	cmp	r2, #48	@ 0x30
 800f780:	d0f8      	beq.n	800f774 <_strtod_l+0x1e4>
 800f782:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f786:	2b08      	cmp	r3, #8
 800f788:	f200 84d2 	bhi.w	8010130 <_strtod_l+0xba0>
 800f78c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f78e:	900a      	str	r0, [sp, #40]	@ 0x28
 800f790:	2000      	movs	r0, #0
 800f792:	930c      	str	r3, [sp, #48]	@ 0x30
 800f794:	4605      	mov	r5, r0
 800f796:	3a30      	subs	r2, #48	@ 0x30
 800f798:	f100 0301 	add.w	r3, r0, #1
 800f79c:	d018      	beq.n	800f7d0 <_strtod_l+0x240>
 800f79e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7a0:	4419      	add	r1, r3
 800f7a2:	910a      	str	r1, [sp, #40]	@ 0x28
 800f7a4:	462e      	mov	r6, r5
 800f7a6:	f04f 0e0a 	mov.w	lr, #10
 800f7aa:	1c71      	adds	r1, r6, #1
 800f7ac:	eba1 0c05 	sub.w	ip, r1, r5
 800f7b0:	4563      	cmp	r3, ip
 800f7b2:	dc15      	bgt.n	800f7e0 <_strtod_l+0x250>
 800f7b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f7b8:	182b      	adds	r3, r5, r0
 800f7ba:	2b08      	cmp	r3, #8
 800f7bc:	f105 0501 	add.w	r5, r5, #1
 800f7c0:	4405      	add	r5, r0
 800f7c2:	dc1a      	bgt.n	800f7fa <_strtod_l+0x26a>
 800f7c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f7c6:	230a      	movs	r3, #10
 800f7c8:	fb03 2301 	mla	r3, r3, r1, r2
 800f7cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f7d2:	1c51      	adds	r1, r2, #1
 800f7d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800f7d6:	7852      	ldrb	r2, [r2, #1]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	e7c5      	b.n	800f768 <_strtod_l+0x1d8>
 800f7dc:	4648      	mov	r0, r9
 800f7de:	e7ce      	b.n	800f77e <_strtod_l+0x1ee>
 800f7e0:	2e08      	cmp	r6, #8
 800f7e2:	dc05      	bgt.n	800f7f0 <_strtod_l+0x260>
 800f7e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f7e6:	fb0e f606 	mul.w	r6, lr, r6
 800f7ea:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f7ec:	460e      	mov	r6, r1
 800f7ee:	e7dc      	b.n	800f7aa <_strtod_l+0x21a>
 800f7f0:	2910      	cmp	r1, #16
 800f7f2:	bfd8      	it	le
 800f7f4:	fb0e f707 	mulle.w	r7, lr, r7
 800f7f8:	e7f8      	b.n	800f7ec <_strtod_l+0x25c>
 800f7fa:	2b0f      	cmp	r3, #15
 800f7fc:	bfdc      	itt	le
 800f7fe:	230a      	movle	r3, #10
 800f800:	fb03 2707 	mlale	r7, r3, r7, r2
 800f804:	e7e3      	b.n	800f7ce <_strtod_l+0x23e>
 800f806:	2300      	movs	r3, #0
 800f808:	930a      	str	r3, [sp, #40]	@ 0x28
 800f80a:	2301      	movs	r3, #1
 800f80c:	e77a      	b.n	800f704 <_strtod_l+0x174>
 800f80e:	f04f 0c00 	mov.w	ip, #0
 800f812:	1ca2      	adds	r2, r4, #2
 800f814:	9219      	str	r2, [sp, #100]	@ 0x64
 800f816:	78a2      	ldrb	r2, [r4, #2]
 800f818:	e782      	b.n	800f720 <_strtod_l+0x190>
 800f81a:	f04f 0c01 	mov.w	ip, #1
 800f81e:	e7f8      	b.n	800f812 <_strtod_l+0x282>
 800f820:	08013a0c 	.word	0x08013a0c
 800f824:	0801383f 	.word	0x0801383f
 800f828:	7ff00000 	.word	0x7ff00000
 800f82c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f82e:	1c51      	adds	r1, r2, #1
 800f830:	9119      	str	r1, [sp, #100]	@ 0x64
 800f832:	7852      	ldrb	r2, [r2, #1]
 800f834:	2a30      	cmp	r2, #48	@ 0x30
 800f836:	d0f9      	beq.n	800f82c <_strtod_l+0x29c>
 800f838:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f83c:	2908      	cmp	r1, #8
 800f83e:	f63f af75 	bhi.w	800f72c <_strtod_l+0x19c>
 800f842:	3a30      	subs	r2, #48	@ 0x30
 800f844:	9209      	str	r2, [sp, #36]	@ 0x24
 800f846:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f848:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f84a:	f04f 080a 	mov.w	r8, #10
 800f84e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f850:	1c56      	adds	r6, r2, #1
 800f852:	9619      	str	r6, [sp, #100]	@ 0x64
 800f854:	7852      	ldrb	r2, [r2, #1]
 800f856:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f85a:	f1be 0f09 	cmp.w	lr, #9
 800f85e:	d939      	bls.n	800f8d4 <_strtod_l+0x344>
 800f860:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f862:	1a76      	subs	r6, r6, r1
 800f864:	2e08      	cmp	r6, #8
 800f866:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f86a:	dc03      	bgt.n	800f874 <_strtod_l+0x2e4>
 800f86c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f86e:	4588      	cmp	r8, r1
 800f870:	bfa8      	it	ge
 800f872:	4688      	movge	r8, r1
 800f874:	f1bc 0f00 	cmp.w	ip, #0
 800f878:	d001      	beq.n	800f87e <_strtod_l+0x2ee>
 800f87a:	f1c8 0800 	rsb	r8, r8, #0
 800f87e:	2d00      	cmp	r5, #0
 800f880:	d14e      	bne.n	800f920 <_strtod_l+0x390>
 800f882:	9908      	ldr	r1, [sp, #32]
 800f884:	4308      	orrs	r0, r1
 800f886:	f47f aebc 	bne.w	800f602 <_strtod_l+0x72>
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f47f aed4 	bne.w	800f638 <_strtod_l+0xa8>
 800f890:	2a69      	cmp	r2, #105	@ 0x69
 800f892:	d028      	beq.n	800f8e6 <_strtod_l+0x356>
 800f894:	dc25      	bgt.n	800f8e2 <_strtod_l+0x352>
 800f896:	2a49      	cmp	r2, #73	@ 0x49
 800f898:	d025      	beq.n	800f8e6 <_strtod_l+0x356>
 800f89a:	2a4e      	cmp	r2, #78	@ 0x4e
 800f89c:	f47f aecc 	bne.w	800f638 <_strtod_l+0xa8>
 800f8a0:	499a      	ldr	r1, [pc, #616]	@ (800fb0c <_strtod_l+0x57c>)
 800f8a2:	a819      	add	r0, sp, #100	@ 0x64
 800f8a4:	f001 f9e0 	bl	8010c68 <__match>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	f43f aec5 	beq.w	800f638 <_strtod_l+0xa8>
 800f8ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	2b28      	cmp	r3, #40	@ 0x28
 800f8b4:	d12e      	bne.n	800f914 <_strtod_l+0x384>
 800f8b6:	4996      	ldr	r1, [pc, #600]	@ (800fb10 <_strtod_l+0x580>)
 800f8b8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f8ba:	a819      	add	r0, sp, #100	@ 0x64
 800f8bc:	f001 f9e8 	bl	8010c90 <__hexnan>
 800f8c0:	2805      	cmp	r0, #5
 800f8c2:	d127      	bne.n	800f914 <_strtod_l+0x384>
 800f8c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f8c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f8ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f8ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f8d2:	e696      	b.n	800f602 <_strtod_l+0x72>
 800f8d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f8d6:	fb08 2101 	mla	r1, r8, r1, r2
 800f8da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f8de:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8e0:	e7b5      	b.n	800f84e <_strtod_l+0x2be>
 800f8e2:	2a6e      	cmp	r2, #110	@ 0x6e
 800f8e4:	e7da      	b.n	800f89c <_strtod_l+0x30c>
 800f8e6:	498b      	ldr	r1, [pc, #556]	@ (800fb14 <_strtod_l+0x584>)
 800f8e8:	a819      	add	r0, sp, #100	@ 0x64
 800f8ea:	f001 f9bd 	bl	8010c68 <__match>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	f43f aea2 	beq.w	800f638 <_strtod_l+0xa8>
 800f8f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8f6:	4988      	ldr	r1, [pc, #544]	@ (800fb18 <_strtod_l+0x588>)
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	a819      	add	r0, sp, #100	@ 0x64
 800f8fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800f8fe:	f001 f9b3 	bl	8010c68 <__match>
 800f902:	b910      	cbnz	r0, 800f90a <_strtod_l+0x37a>
 800f904:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f906:	3301      	adds	r3, #1
 800f908:	9319      	str	r3, [sp, #100]	@ 0x64
 800f90a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800fb28 <_strtod_l+0x598>
 800f90e:	f04f 0a00 	mov.w	sl, #0
 800f912:	e676      	b.n	800f602 <_strtod_l+0x72>
 800f914:	4881      	ldr	r0, [pc, #516]	@ (800fb1c <_strtod_l+0x58c>)
 800f916:	f000 fee3 	bl	80106e0 <nan>
 800f91a:	ec5b ab10 	vmov	sl, fp, d0
 800f91e:	e670      	b.n	800f602 <_strtod_l+0x72>
 800f920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f922:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f924:	eba8 0303 	sub.w	r3, r8, r3
 800f928:	f1b9 0f00 	cmp.w	r9, #0
 800f92c:	bf08      	it	eq
 800f92e:	46a9      	moveq	r9, r5
 800f930:	2d10      	cmp	r5, #16
 800f932:	9309      	str	r3, [sp, #36]	@ 0x24
 800f934:	462c      	mov	r4, r5
 800f936:	bfa8      	it	ge
 800f938:	2410      	movge	r4, #16
 800f93a:	f7f0 fe03 	bl	8000544 <__aeabi_ui2d>
 800f93e:	2d09      	cmp	r5, #9
 800f940:	4682      	mov	sl, r0
 800f942:	468b      	mov	fp, r1
 800f944:	dc13      	bgt.n	800f96e <_strtod_l+0x3de>
 800f946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f43f ae5a 	beq.w	800f602 <_strtod_l+0x72>
 800f94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f950:	dd78      	ble.n	800fa44 <_strtod_l+0x4b4>
 800f952:	2b16      	cmp	r3, #22
 800f954:	dc5f      	bgt.n	800fa16 <_strtod_l+0x486>
 800f956:	4972      	ldr	r1, [pc, #456]	@ (800fb20 <_strtod_l+0x590>)
 800f958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f960:	4652      	mov	r2, sl
 800f962:	465b      	mov	r3, fp
 800f964:	f7f0 fe68 	bl	8000638 <__aeabi_dmul>
 800f968:	4682      	mov	sl, r0
 800f96a:	468b      	mov	fp, r1
 800f96c:	e649      	b.n	800f602 <_strtod_l+0x72>
 800f96e:	4b6c      	ldr	r3, [pc, #432]	@ (800fb20 <_strtod_l+0x590>)
 800f970:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f974:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f978:	f7f0 fe5e 	bl	8000638 <__aeabi_dmul>
 800f97c:	4682      	mov	sl, r0
 800f97e:	4638      	mov	r0, r7
 800f980:	468b      	mov	fp, r1
 800f982:	f7f0 fddf 	bl	8000544 <__aeabi_ui2d>
 800f986:	4602      	mov	r2, r0
 800f988:	460b      	mov	r3, r1
 800f98a:	4650      	mov	r0, sl
 800f98c:	4659      	mov	r1, fp
 800f98e:	f7f0 fc9d 	bl	80002cc <__adddf3>
 800f992:	2d0f      	cmp	r5, #15
 800f994:	4682      	mov	sl, r0
 800f996:	468b      	mov	fp, r1
 800f998:	ddd5      	ble.n	800f946 <_strtod_l+0x3b6>
 800f99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f99c:	1b2c      	subs	r4, r5, r4
 800f99e:	441c      	add	r4, r3
 800f9a0:	2c00      	cmp	r4, #0
 800f9a2:	f340 8093 	ble.w	800facc <_strtod_l+0x53c>
 800f9a6:	f014 030f 	ands.w	r3, r4, #15
 800f9aa:	d00a      	beq.n	800f9c2 <_strtod_l+0x432>
 800f9ac:	495c      	ldr	r1, [pc, #368]	@ (800fb20 <_strtod_l+0x590>)
 800f9ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f9b2:	4652      	mov	r2, sl
 800f9b4:	465b      	mov	r3, fp
 800f9b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9ba:	f7f0 fe3d 	bl	8000638 <__aeabi_dmul>
 800f9be:	4682      	mov	sl, r0
 800f9c0:	468b      	mov	fp, r1
 800f9c2:	f034 040f 	bics.w	r4, r4, #15
 800f9c6:	d073      	beq.n	800fab0 <_strtod_l+0x520>
 800f9c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f9cc:	dd49      	ble.n	800fa62 <_strtod_l+0x4d2>
 800f9ce:	2400      	movs	r4, #0
 800f9d0:	46a0      	mov	r8, r4
 800f9d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f9d4:	46a1      	mov	r9, r4
 800f9d6:	9a05      	ldr	r2, [sp, #20]
 800f9d8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800fb28 <_strtod_l+0x598>
 800f9dc:	2322      	movs	r3, #34	@ 0x22
 800f9de:	6013      	str	r3, [r2, #0]
 800f9e0:	f04f 0a00 	mov.w	sl, #0
 800f9e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f43f ae0b 	beq.w	800f602 <_strtod_l+0x72>
 800f9ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f9ee:	9805      	ldr	r0, [sp, #20]
 800f9f0:	f7ff f946 	bl	800ec80 <_Bfree>
 800f9f4:	9805      	ldr	r0, [sp, #20]
 800f9f6:	4649      	mov	r1, r9
 800f9f8:	f7ff f942 	bl	800ec80 <_Bfree>
 800f9fc:	9805      	ldr	r0, [sp, #20]
 800f9fe:	4641      	mov	r1, r8
 800fa00:	f7ff f93e 	bl	800ec80 <_Bfree>
 800fa04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fa06:	9805      	ldr	r0, [sp, #20]
 800fa08:	f7ff f93a 	bl	800ec80 <_Bfree>
 800fa0c:	9805      	ldr	r0, [sp, #20]
 800fa0e:	4621      	mov	r1, r4
 800fa10:	f7ff f936 	bl	800ec80 <_Bfree>
 800fa14:	e5f5      	b.n	800f602 <_strtod_l+0x72>
 800fa16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	dbbc      	blt.n	800f99a <_strtod_l+0x40a>
 800fa20:	4c3f      	ldr	r4, [pc, #252]	@ (800fb20 <_strtod_l+0x590>)
 800fa22:	f1c5 050f 	rsb	r5, r5, #15
 800fa26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fa2a:	4652      	mov	r2, sl
 800fa2c:	465b      	mov	r3, fp
 800fa2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa32:	f7f0 fe01 	bl	8000638 <__aeabi_dmul>
 800fa36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa38:	1b5d      	subs	r5, r3, r5
 800fa3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fa3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fa42:	e78f      	b.n	800f964 <_strtod_l+0x3d4>
 800fa44:	3316      	adds	r3, #22
 800fa46:	dba8      	blt.n	800f99a <_strtod_l+0x40a>
 800fa48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa4a:	eba3 0808 	sub.w	r8, r3, r8
 800fa4e:	4b34      	ldr	r3, [pc, #208]	@ (800fb20 <_strtod_l+0x590>)
 800fa50:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fa54:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fa58:	4650      	mov	r0, sl
 800fa5a:	4659      	mov	r1, fp
 800fa5c:	f7f0 ff16 	bl	800088c <__aeabi_ddiv>
 800fa60:	e782      	b.n	800f968 <_strtod_l+0x3d8>
 800fa62:	2300      	movs	r3, #0
 800fa64:	4f2f      	ldr	r7, [pc, #188]	@ (800fb24 <_strtod_l+0x594>)
 800fa66:	1124      	asrs	r4, r4, #4
 800fa68:	4650      	mov	r0, sl
 800fa6a:	4659      	mov	r1, fp
 800fa6c:	461e      	mov	r6, r3
 800fa6e:	2c01      	cmp	r4, #1
 800fa70:	dc21      	bgt.n	800fab6 <_strtod_l+0x526>
 800fa72:	b10b      	cbz	r3, 800fa78 <_strtod_l+0x4e8>
 800fa74:	4682      	mov	sl, r0
 800fa76:	468b      	mov	fp, r1
 800fa78:	492a      	ldr	r1, [pc, #168]	@ (800fb24 <_strtod_l+0x594>)
 800fa7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fa7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fa82:	4652      	mov	r2, sl
 800fa84:	465b      	mov	r3, fp
 800fa86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa8a:	f7f0 fdd5 	bl	8000638 <__aeabi_dmul>
 800fa8e:	4b26      	ldr	r3, [pc, #152]	@ (800fb28 <_strtod_l+0x598>)
 800fa90:	460a      	mov	r2, r1
 800fa92:	400b      	ands	r3, r1
 800fa94:	4925      	ldr	r1, [pc, #148]	@ (800fb2c <_strtod_l+0x59c>)
 800fa96:	428b      	cmp	r3, r1
 800fa98:	4682      	mov	sl, r0
 800fa9a:	d898      	bhi.n	800f9ce <_strtod_l+0x43e>
 800fa9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800faa0:	428b      	cmp	r3, r1
 800faa2:	bf86      	itte	hi
 800faa4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800fb30 <_strtod_l+0x5a0>
 800faa8:	f04f 3aff 	movhi.w	sl, #4294967295
 800faac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fab0:	2300      	movs	r3, #0
 800fab2:	9308      	str	r3, [sp, #32]
 800fab4:	e076      	b.n	800fba4 <_strtod_l+0x614>
 800fab6:	07e2      	lsls	r2, r4, #31
 800fab8:	d504      	bpl.n	800fac4 <_strtod_l+0x534>
 800faba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fabe:	f7f0 fdbb 	bl	8000638 <__aeabi_dmul>
 800fac2:	2301      	movs	r3, #1
 800fac4:	3601      	adds	r6, #1
 800fac6:	1064      	asrs	r4, r4, #1
 800fac8:	3708      	adds	r7, #8
 800faca:	e7d0      	b.n	800fa6e <_strtod_l+0x4de>
 800facc:	d0f0      	beq.n	800fab0 <_strtod_l+0x520>
 800face:	4264      	negs	r4, r4
 800fad0:	f014 020f 	ands.w	r2, r4, #15
 800fad4:	d00a      	beq.n	800faec <_strtod_l+0x55c>
 800fad6:	4b12      	ldr	r3, [pc, #72]	@ (800fb20 <_strtod_l+0x590>)
 800fad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fadc:	4650      	mov	r0, sl
 800fade:	4659      	mov	r1, fp
 800fae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae4:	f7f0 fed2 	bl	800088c <__aeabi_ddiv>
 800fae8:	4682      	mov	sl, r0
 800faea:	468b      	mov	fp, r1
 800faec:	1124      	asrs	r4, r4, #4
 800faee:	d0df      	beq.n	800fab0 <_strtod_l+0x520>
 800faf0:	2c1f      	cmp	r4, #31
 800faf2:	dd1f      	ble.n	800fb34 <_strtod_l+0x5a4>
 800faf4:	2400      	movs	r4, #0
 800faf6:	46a0      	mov	r8, r4
 800faf8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fafa:	46a1      	mov	r9, r4
 800fafc:	9a05      	ldr	r2, [sp, #20]
 800fafe:	2322      	movs	r3, #34	@ 0x22
 800fb00:	f04f 0a00 	mov.w	sl, #0
 800fb04:	f04f 0b00 	mov.w	fp, #0
 800fb08:	6013      	str	r3, [r2, #0]
 800fb0a:	e76b      	b.n	800f9e4 <_strtod_l+0x454>
 800fb0c:	0801372d 	.word	0x0801372d
 800fb10:	080139f8 	.word	0x080139f8
 800fb14:	08013725 	.word	0x08013725
 800fb18:	0801375c 	.word	0x0801375c
 800fb1c:	08013895 	.word	0x08013895
 800fb20:	08013930 	.word	0x08013930
 800fb24:	08013908 	.word	0x08013908
 800fb28:	7ff00000 	.word	0x7ff00000
 800fb2c:	7ca00000 	.word	0x7ca00000
 800fb30:	7fefffff 	.word	0x7fefffff
 800fb34:	f014 0310 	ands.w	r3, r4, #16
 800fb38:	bf18      	it	ne
 800fb3a:	236a      	movne	r3, #106	@ 0x6a
 800fb3c:	4ea9      	ldr	r6, [pc, #676]	@ (800fde4 <_strtod_l+0x854>)
 800fb3e:	9308      	str	r3, [sp, #32]
 800fb40:	4650      	mov	r0, sl
 800fb42:	4659      	mov	r1, fp
 800fb44:	2300      	movs	r3, #0
 800fb46:	07e7      	lsls	r7, r4, #31
 800fb48:	d504      	bpl.n	800fb54 <_strtod_l+0x5c4>
 800fb4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fb4e:	f7f0 fd73 	bl	8000638 <__aeabi_dmul>
 800fb52:	2301      	movs	r3, #1
 800fb54:	1064      	asrs	r4, r4, #1
 800fb56:	f106 0608 	add.w	r6, r6, #8
 800fb5a:	d1f4      	bne.n	800fb46 <_strtod_l+0x5b6>
 800fb5c:	b10b      	cbz	r3, 800fb62 <_strtod_l+0x5d2>
 800fb5e:	4682      	mov	sl, r0
 800fb60:	468b      	mov	fp, r1
 800fb62:	9b08      	ldr	r3, [sp, #32]
 800fb64:	b1b3      	cbz	r3, 800fb94 <_strtod_l+0x604>
 800fb66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fb6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	4659      	mov	r1, fp
 800fb72:	dd0f      	ble.n	800fb94 <_strtod_l+0x604>
 800fb74:	2b1f      	cmp	r3, #31
 800fb76:	dd56      	ble.n	800fc26 <_strtod_l+0x696>
 800fb78:	2b34      	cmp	r3, #52	@ 0x34
 800fb7a:	bfde      	ittt	le
 800fb7c:	f04f 33ff 	movle.w	r3, #4294967295
 800fb80:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fb84:	4093      	lslle	r3, r2
 800fb86:	f04f 0a00 	mov.w	sl, #0
 800fb8a:	bfcc      	ite	gt
 800fb8c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fb90:	ea03 0b01 	andle.w	fp, r3, r1
 800fb94:	2200      	movs	r2, #0
 800fb96:	2300      	movs	r3, #0
 800fb98:	4650      	mov	r0, sl
 800fb9a:	4659      	mov	r1, fp
 800fb9c:	f7f0 ffb4 	bl	8000b08 <__aeabi_dcmpeq>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d1a7      	bne.n	800faf4 <_strtod_l+0x564>
 800fba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fbaa:	9805      	ldr	r0, [sp, #20]
 800fbac:	462b      	mov	r3, r5
 800fbae:	464a      	mov	r2, r9
 800fbb0:	f7ff f8ce 	bl	800ed50 <__s2b>
 800fbb4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	f43f af09 	beq.w	800f9ce <_strtod_l+0x43e>
 800fbbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbc0:	2a00      	cmp	r2, #0
 800fbc2:	eba3 0308 	sub.w	r3, r3, r8
 800fbc6:	bfa8      	it	ge
 800fbc8:	2300      	movge	r3, #0
 800fbca:	9312      	str	r3, [sp, #72]	@ 0x48
 800fbcc:	2400      	movs	r4, #0
 800fbce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fbd2:	9316      	str	r3, [sp, #88]	@ 0x58
 800fbd4:	46a0      	mov	r8, r4
 800fbd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbd8:	9805      	ldr	r0, [sp, #20]
 800fbda:	6859      	ldr	r1, [r3, #4]
 800fbdc:	f7ff f810 	bl	800ec00 <_Balloc>
 800fbe0:	4681      	mov	r9, r0
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	f43f aef7 	beq.w	800f9d6 <_strtod_l+0x446>
 800fbe8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbea:	691a      	ldr	r2, [r3, #16]
 800fbec:	3202      	adds	r2, #2
 800fbee:	f103 010c 	add.w	r1, r3, #12
 800fbf2:	0092      	lsls	r2, r2, #2
 800fbf4:	300c      	adds	r0, #12
 800fbf6:	f7fe f894 	bl	800dd22 <memcpy>
 800fbfa:	ec4b ab10 	vmov	d0, sl, fp
 800fbfe:	9805      	ldr	r0, [sp, #20]
 800fc00:	aa1c      	add	r2, sp, #112	@ 0x70
 800fc02:	a91b      	add	r1, sp, #108	@ 0x6c
 800fc04:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fc08:	f7ff fbd6 	bl	800f3b8 <__d2b>
 800fc0c:	901a      	str	r0, [sp, #104]	@ 0x68
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	f43f aee1 	beq.w	800f9d6 <_strtod_l+0x446>
 800fc14:	9805      	ldr	r0, [sp, #20]
 800fc16:	2101      	movs	r1, #1
 800fc18:	f7ff f930 	bl	800ee7c <__i2b>
 800fc1c:	4680      	mov	r8, r0
 800fc1e:	b948      	cbnz	r0, 800fc34 <_strtod_l+0x6a4>
 800fc20:	f04f 0800 	mov.w	r8, #0
 800fc24:	e6d7      	b.n	800f9d6 <_strtod_l+0x446>
 800fc26:	f04f 32ff 	mov.w	r2, #4294967295
 800fc2a:	fa02 f303 	lsl.w	r3, r2, r3
 800fc2e:	ea03 0a0a 	and.w	sl, r3, sl
 800fc32:	e7af      	b.n	800fb94 <_strtod_l+0x604>
 800fc34:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fc36:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fc38:	2d00      	cmp	r5, #0
 800fc3a:	bfab      	itete	ge
 800fc3c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fc3e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fc40:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fc42:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fc44:	bfac      	ite	ge
 800fc46:	18ef      	addge	r7, r5, r3
 800fc48:	1b5e      	sublt	r6, r3, r5
 800fc4a:	9b08      	ldr	r3, [sp, #32]
 800fc4c:	1aed      	subs	r5, r5, r3
 800fc4e:	4415      	add	r5, r2
 800fc50:	4b65      	ldr	r3, [pc, #404]	@ (800fde8 <_strtod_l+0x858>)
 800fc52:	3d01      	subs	r5, #1
 800fc54:	429d      	cmp	r5, r3
 800fc56:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fc5a:	da50      	bge.n	800fcfe <_strtod_l+0x76e>
 800fc5c:	1b5b      	subs	r3, r3, r5
 800fc5e:	2b1f      	cmp	r3, #31
 800fc60:	eba2 0203 	sub.w	r2, r2, r3
 800fc64:	f04f 0101 	mov.w	r1, #1
 800fc68:	dc3d      	bgt.n	800fce6 <_strtod_l+0x756>
 800fc6a:	fa01 f303 	lsl.w	r3, r1, r3
 800fc6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fc70:	2300      	movs	r3, #0
 800fc72:	9310      	str	r3, [sp, #64]	@ 0x40
 800fc74:	18bd      	adds	r5, r7, r2
 800fc76:	9b08      	ldr	r3, [sp, #32]
 800fc78:	42af      	cmp	r7, r5
 800fc7a:	4416      	add	r6, r2
 800fc7c:	441e      	add	r6, r3
 800fc7e:	463b      	mov	r3, r7
 800fc80:	bfa8      	it	ge
 800fc82:	462b      	movge	r3, r5
 800fc84:	42b3      	cmp	r3, r6
 800fc86:	bfa8      	it	ge
 800fc88:	4633      	movge	r3, r6
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	bfc2      	ittt	gt
 800fc8e:	1aed      	subgt	r5, r5, r3
 800fc90:	1af6      	subgt	r6, r6, r3
 800fc92:	1aff      	subgt	r7, r7, r3
 800fc94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	dd16      	ble.n	800fcc8 <_strtod_l+0x738>
 800fc9a:	4641      	mov	r1, r8
 800fc9c:	9805      	ldr	r0, [sp, #20]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	f7ff f9a4 	bl	800efec <__pow5mult>
 800fca4:	4680      	mov	r8, r0
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d0ba      	beq.n	800fc20 <_strtod_l+0x690>
 800fcaa:	4601      	mov	r1, r0
 800fcac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fcae:	9805      	ldr	r0, [sp, #20]
 800fcb0:	f7ff f8fa 	bl	800eea8 <__multiply>
 800fcb4:	900a      	str	r0, [sp, #40]	@ 0x28
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	f43f ae8d 	beq.w	800f9d6 <_strtod_l+0x446>
 800fcbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fcbe:	9805      	ldr	r0, [sp, #20]
 800fcc0:	f7fe ffde 	bl	800ec80 <_Bfree>
 800fcc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800fcc8:	2d00      	cmp	r5, #0
 800fcca:	dc1d      	bgt.n	800fd08 <_strtod_l+0x778>
 800fccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	dd23      	ble.n	800fd1a <_strtod_l+0x78a>
 800fcd2:	4649      	mov	r1, r9
 800fcd4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fcd6:	9805      	ldr	r0, [sp, #20]
 800fcd8:	f7ff f988 	bl	800efec <__pow5mult>
 800fcdc:	4681      	mov	r9, r0
 800fcde:	b9e0      	cbnz	r0, 800fd1a <_strtod_l+0x78a>
 800fce0:	f04f 0900 	mov.w	r9, #0
 800fce4:	e677      	b.n	800f9d6 <_strtod_l+0x446>
 800fce6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fcea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fcee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fcf2:	35e2      	adds	r5, #226	@ 0xe2
 800fcf4:	fa01 f305 	lsl.w	r3, r1, r5
 800fcf8:	9310      	str	r3, [sp, #64]	@ 0x40
 800fcfa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fcfc:	e7ba      	b.n	800fc74 <_strtod_l+0x6e4>
 800fcfe:	2300      	movs	r3, #0
 800fd00:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd02:	2301      	movs	r3, #1
 800fd04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fd06:	e7b5      	b.n	800fc74 <_strtod_l+0x6e4>
 800fd08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd0a:	9805      	ldr	r0, [sp, #20]
 800fd0c:	462a      	mov	r2, r5
 800fd0e:	f7ff f9c7 	bl	800f0a0 <__lshift>
 800fd12:	901a      	str	r0, [sp, #104]	@ 0x68
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d1d9      	bne.n	800fccc <_strtod_l+0x73c>
 800fd18:	e65d      	b.n	800f9d6 <_strtod_l+0x446>
 800fd1a:	2e00      	cmp	r6, #0
 800fd1c:	dd07      	ble.n	800fd2e <_strtod_l+0x79e>
 800fd1e:	4649      	mov	r1, r9
 800fd20:	9805      	ldr	r0, [sp, #20]
 800fd22:	4632      	mov	r2, r6
 800fd24:	f7ff f9bc 	bl	800f0a0 <__lshift>
 800fd28:	4681      	mov	r9, r0
 800fd2a:	2800      	cmp	r0, #0
 800fd2c:	d0d8      	beq.n	800fce0 <_strtod_l+0x750>
 800fd2e:	2f00      	cmp	r7, #0
 800fd30:	dd08      	ble.n	800fd44 <_strtod_l+0x7b4>
 800fd32:	4641      	mov	r1, r8
 800fd34:	9805      	ldr	r0, [sp, #20]
 800fd36:	463a      	mov	r2, r7
 800fd38:	f7ff f9b2 	bl	800f0a0 <__lshift>
 800fd3c:	4680      	mov	r8, r0
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	f43f ae49 	beq.w	800f9d6 <_strtod_l+0x446>
 800fd44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd46:	9805      	ldr	r0, [sp, #20]
 800fd48:	464a      	mov	r2, r9
 800fd4a:	f7ff fa31 	bl	800f1b0 <__mdiff>
 800fd4e:	4604      	mov	r4, r0
 800fd50:	2800      	cmp	r0, #0
 800fd52:	f43f ae40 	beq.w	800f9d6 <_strtod_l+0x446>
 800fd56:	68c3      	ldr	r3, [r0, #12]
 800fd58:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60c3      	str	r3, [r0, #12]
 800fd5e:	4641      	mov	r1, r8
 800fd60:	f7ff fa0a 	bl	800f178 <__mcmp>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	da45      	bge.n	800fdf4 <_strtod_l+0x864>
 800fd68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd6a:	ea53 030a 	orrs.w	r3, r3, sl
 800fd6e:	d16b      	bne.n	800fe48 <_strtod_l+0x8b8>
 800fd70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d167      	bne.n	800fe48 <_strtod_l+0x8b8>
 800fd78:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fd7c:	0d1b      	lsrs	r3, r3, #20
 800fd7e:	051b      	lsls	r3, r3, #20
 800fd80:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fd84:	d960      	bls.n	800fe48 <_strtod_l+0x8b8>
 800fd86:	6963      	ldr	r3, [r4, #20]
 800fd88:	b913      	cbnz	r3, 800fd90 <_strtod_l+0x800>
 800fd8a:	6923      	ldr	r3, [r4, #16]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	dd5b      	ble.n	800fe48 <_strtod_l+0x8b8>
 800fd90:	4621      	mov	r1, r4
 800fd92:	2201      	movs	r2, #1
 800fd94:	9805      	ldr	r0, [sp, #20]
 800fd96:	f7ff f983 	bl	800f0a0 <__lshift>
 800fd9a:	4641      	mov	r1, r8
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	f7ff f9eb 	bl	800f178 <__mcmp>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	dd50      	ble.n	800fe48 <_strtod_l+0x8b8>
 800fda6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fdaa:	9a08      	ldr	r2, [sp, #32]
 800fdac:	0d1b      	lsrs	r3, r3, #20
 800fdae:	051b      	lsls	r3, r3, #20
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	d06a      	beq.n	800fe8a <_strtod_l+0x8fa>
 800fdb4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fdb8:	d867      	bhi.n	800fe8a <_strtod_l+0x8fa>
 800fdba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fdbe:	f67f ae9d 	bls.w	800fafc <_strtod_l+0x56c>
 800fdc2:	4b0a      	ldr	r3, [pc, #40]	@ (800fdec <_strtod_l+0x85c>)
 800fdc4:	4650      	mov	r0, sl
 800fdc6:	4659      	mov	r1, fp
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f7f0 fc35 	bl	8000638 <__aeabi_dmul>
 800fdce:	4b08      	ldr	r3, [pc, #32]	@ (800fdf0 <_strtod_l+0x860>)
 800fdd0:	400b      	ands	r3, r1
 800fdd2:	4682      	mov	sl, r0
 800fdd4:	468b      	mov	fp, r1
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f47f ae08 	bne.w	800f9ec <_strtod_l+0x45c>
 800fddc:	9a05      	ldr	r2, [sp, #20]
 800fdde:	2322      	movs	r3, #34	@ 0x22
 800fde0:	6013      	str	r3, [r2, #0]
 800fde2:	e603      	b.n	800f9ec <_strtod_l+0x45c>
 800fde4:	08013a20 	.word	0x08013a20
 800fde8:	fffffc02 	.word	0xfffffc02
 800fdec:	39500000 	.word	0x39500000
 800fdf0:	7ff00000 	.word	0x7ff00000
 800fdf4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fdf8:	d165      	bne.n	800fec6 <_strtod_l+0x936>
 800fdfa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fdfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe00:	b35a      	cbz	r2, 800fe5a <_strtod_l+0x8ca>
 800fe02:	4a9f      	ldr	r2, [pc, #636]	@ (8010080 <_strtod_l+0xaf0>)
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d12b      	bne.n	800fe60 <_strtod_l+0x8d0>
 800fe08:	9b08      	ldr	r3, [sp, #32]
 800fe0a:	4651      	mov	r1, sl
 800fe0c:	b303      	cbz	r3, 800fe50 <_strtod_l+0x8c0>
 800fe0e:	4b9d      	ldr	r3, [pc, #628]	@ (8010084 <_strtod_l+0xaf4>)
 800fe10:	465a      	mov	r2, fp
 800fe12:	4013      	ands	r3, r2
 800fe14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fe18:	f04f 32ff 	mov.w	r2, #4294967295
 800fe1c:	d81b      	bhi.n	800fe56 <_strtod_l+0x8c6>
 800fe1e:	0d1b      	lsrs	r3, r3, #20
 800fe20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fe24:	fa02 f303 	lsl.w	r3, r2, r3
 800fe28:	4299      	cmp	r1, r3
 800fe2a:	d119      	bne.n	800fe60 <_strtod_l+0x8d0>
 800fe2c:	4b96      	ldr	r3, [pc, #600]	@ (8010088 <_strtod_l+0xaf8>)
 800fe2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d102      	bne.n	800fe3a <_strtod_l+0x8aa>
 800fe34:	3101      	adds	r1, #1
 800fe36:	f43f adce 	beq.w	800f9d6 <_strtod_l+0x446>
 800fe3a:	4b92      	ldr	r3, [pc, #584]	@ (8010084 <_strtod_l+0xaf4>)
 800fe3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe3e:	401a      	ands	r2, r3
 800fe40:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fe44:	f04f 0a00 	mov.w	sl, #0
 800fe48:	9b08      	ldr	r3, [sp, #32]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d1b9      	bne.n	800fdc2 <_strtod_l+0x832>
 800fe4e:	e5cd      	b.n	800f9ec <_strtod_l+0x45c>
 800fe50:	f04f 33ff 	mov.w	r3, #4294967295
 800fe54:	e7e8      	b.n	800fe28 <_strtod_l+0x898>
 800fe56:	4613      	mov	r3, r2
 800fe58:	e7e6      	b.n	800fe28 <_strtod_l+0x898>
 800fe5a:	ea53 030a 	orrs.w	r3, r3, sl
 800fe5e:	d0a2      	beq.n	800fda6 <_strtod_l+0x816>
 800fe60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fe62:	b1db      	cbz	r3, 800fe9c <_strtod_l+0x90c>
 800fe64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe66:	4213      	tst	r3, r2
 800fe68:	d0ee      	beq.n	800fe48 <_strtod_l+0x8b8>
 800fe6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe6c:	9a08      	ldr	r2, [sp, #32]
 800fe6e:	4650      	mov	r0, sl
 800fe70:	4659      	mov	r1, fp
 800fe72:	b1bb      	cbz	r3, 800fea4 <_strtod_l+0x914>
 800fe74:	f7ff fb6e 	bl	800f554 <sulp>
 800fe78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe7c:	ec53 2b10 	vmov	r2, r3, d0
 800fe80:	f7f0 fa24 	bl	80002cc <__adddf3>
 800fe84:	4682      	mov	sl, r0
 800fe86:	468b      	mov	fp, r1
 800fe88:	e7de      	b.n	800fe48 <_strtod_l+0x8b8>
 800fe8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fe8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fe92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fe96:	f04f 3aff 	mov.w	sl, #4294967295
 800fe9a:	e7d5      	b.n	800fe48 <_strtod_l+0x8b8>
 800fe9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fe9e:	ea13 0f0a 	tst.w	r3, sl
 800fea2:	e7e1      	b.n	800fe68 <_strtod_l+0x8d8>
 800fea4:	f7ff fb56 	bl	800f554 <sulp>
 800fea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800feac:	ec53 2b10 	vmov	r2, r3, d0
 800feb0:	f7f0 fa0a 	bl	80002c8 <__aeabi_dsub>
 800feb4:	2200      	movs	r2, #0
 800feb6:	2300      	movs	r3, #0
 800feb8:	4682      	mov	sl, r0
 800feba:	468b      	mov	fp, r1
 800febc:	f7f0 fe24 	bl	8000b08 <__aeabi_dcmpeq>
 800fec0:	2800      	cmp	r0, #0
 800fec2:	d0c1      	beq.n	800fe48 <_strtod_l+0x8b8>
 800fec4:	e61a      	b.n	800fafc <_strtod_l+0x56c>
 800fec6:	4641      	mov	r1, r8
 800fec8:	4620      	mov	r0, r4
 800feca:	f7ff facd 	bl	800f468 <__ratio>
 800fece:	ec57 6b10 	vmov	r6, r7, d0
 800fed2:	2200      	movs	r2, #0
 800fed4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fed8:	4630      	mov	r0, r6
 800feda:	4639      	mov	r1, r7
 800fedc:	f7f0 fe28 	bl	8000b30 <__aeabi_dcmple>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	d06f      	beq.n	800ffc4 <_strtod_l+0xa34>
 800fee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d17a      	bne.n	800ffe0 <_strtod_l+0xa50>
 800feea:	f1ba 0f00 	cmp.w	sl, #0
 800feee:	d158      	bne.n	800ffa2 <_strtod_l+0xa12>
 800fef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fef2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d15a      	bne.n	800ffb0 <_strtod_l+0xa20>
 800fefa:	4b64      	ldr	r3, [pc, #400]	@ (801008c <_strtod_l+0xafc>)
 800fefc:	2200      	movs	r2, #0
 800fefe:	4630      	mov	r0, r6
 800ff00:	4639      	mov	r1, r7
 800ff02:	f7f0 fe0b 	bl	8000b1c <__aeabi_dcmplt>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d159      	bne.n	800ffbe <_strtod_l+0xa2e>
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	4639      	mov	r1, r7
 800ff0e:	4b60      	ldr	r3, [pc, #384]	@ (8010090 <_strtod_l+0xb00>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	f7f0 fb91 	bl	8000638 <__aeabi_dmul>
 800ff16:	4606      	mov	r6, r0
 800ff18:	460f      	mov	r7, r1
 800ff1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ff1e:	9606      	str	r6, [sp, #24]
 800ff20:	9307      	str	r3, [sp, #28]
 800ff22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff26:	4d57      	ldr	r5, [pc, #348]	@ (8010084 <_strtod_l+0xaf4>)
 800ff28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ff2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff2e:	401d      	ands	r5, r3
 800ff30:	4b58      	ldr	r3, [pc, #352]	@ (8010094 <_strtod_l+0xb04>)
 800ff32:	429d      	cmp	r5, r3
 800ff34:	f040 80b2 	bne.w	801009c <_strtod_l+0xb0c>
 800ff38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ff3e:	ec4b ab10 	vmov	d0, sl, fp
 800ff42:	f7ff f9c9 	bl	800f2d8 <__ulp>
 800ff46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff4a:	ec51 0b10 	vmov	r0, r1, d0
 800ff4e:	f7f0 fb73 	bl	8000638 <__aeabi_dmul>
 800ff52:	4652      	mov	r2, sl
 800ff54:	465b      	mov	r3, fp
 800ff56:	f7f0 f9b9 	bl	80002cc <__adddf3>
 800ff5a:	460b      	mov	r3, r1
 800ff5c:	4949      	ldr	r1, [pc, #292]	@ (8010084 <_strtod_l+0xaf4>)
 800ff5e:	4a4e      	ldr	r2, [pc, #312]	@ (8010098 <_strtod_l+0xb08>)
 800ff60:	4019      	ands	r1, r3
 800ff62:	4291      	cmp	r1, r2
 800ff64:	4682      	mov	sl, r0
 800ff66:	d942      	bls.n	800ffee <_strtod_l+0xa5e>
 800ff68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff6a:	4b47      	ldr	r3, [pc, #284]	@ (8010088 <_strtod_l+0xaf8>)
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d103      	bne.n	800ff78 <_strtod_l+0x9e8>
 800ff70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff72:	3301      	adds	r3, #1
 800ff74:	f43f ad2f 	beq.w	800f9d6 <_strtod_l+0x446>
 800ff78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010088 <_strtod_l+0xaf8>
 800ff7c:	f04f 3aff 	mov.w	sl, #4294967295
 800ff80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ff82:	9805      	ldr	r0, [sp, #20]
 800ff84:	f7fe fe7c 	bl	800ec80 <_Bfree>
 800ff88:	9805      	ldr	r0, [sp, #20]
 800ff8a:	4649      	mov	r1, r9
 800ff8c:	f7fe fe78 	bl	800ec80 <_Bfree>
 800ff90:	9805      	ldr	r0, [sp, #20]
 800ff92:	4641      	mov	r1, r8
 800ff94:	f7fe fe74 	bl	800ec80 <_Bfree>
 800ff98:	9805      	ldr	r0, [sp, #20]
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	f7fe fe70 	bl	800ec80 <_Bfree>
 800ffa0:	e619      	b.n	800fbd6 <_strtod_l+0x646>
 800ffa2:	f1ba 0f01 	cmp.w	sl, #1
 800ffa6:	d103      	bne.n	800ffb0 <_strtod_l+0xa20>
 800ffa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f43f ada6 	beq.w	800fafc <_strtod_l+0x56c>
 800ffb0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010060 <_strtod_l+0xad0>
 800ffb4:	4f35      	ldr	r7, [pc, #212]	@ (801008c <_strtod_l+0xafc>)
 800ffb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ffba:	2600      	movs	r6, #0
 800ffbc:	e7b1      	b.n	800ff22 <_strtod_l+0x992>
 800ffbe:	4f34      	ldr	r7, [pc, #208]	@ (8010090 <_strtod_l+0xb00>)
 800ffc0:	2600      	movs	r6, #0
 800ffc2:	e7aa      	b.n	800ff1a <_strtod_l+0x98a>
 800ffc4:	4b32      	ldr	r3, [pc, #200]	@ (8010090 <_strtod_l+0xb00>)
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	4639      	mov	r1, r7
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f7f0 fb34 	bl	8000638 <__aeabi_dmul>
 800ffd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffd2:	4606      	mov	r6, r0
 800ffd4:	460f      	mov	r7, r1
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d09f      	beq.n	800ff1a <_strtod_l+0x98a>
 800ffda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ffde:	e7a0      	b.n	800ff22 <_strtod_l+0x992>
 800ffe0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010068 <_strtod_l+0xad8>
 800ffe4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ffe8:	ec57 6b17 	vmov	r6, r7, d7
 800ffec:	e799      	b.n	800ff22 <_strtod_l+0x992>
 800ffee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fff2:	9b08      	ldr	r3, [sp, #32]
 800fff4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1c1      	bne.n	800ff80 <_strtod_l+0x9f0>
 800fffc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010000:	0d1b      	lsrs	r3, r3, #20
 8010002:	051b      	lsls	r3, r3, #20
 8010004:	429d      	cmp	r5, r3
 8010006:	d1bb      	bne.n	800ff80 <_strtod_l+0x9f0>
 8010008:	4630      	mov	r0, r6
 801000a:	4639      	mov	r1, r7
 801000c:	f7f0 fe74 	bl	8000cf8 <__aeabi_d2lz>
 8010010:	f7f0 fae4 	bl	80005dc <__aeabi_l2d>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	4630      	mov	r0, r6
 801001a:	4639      	mov	r1, r7
 801001c:	f7f0 f954 	bl	80002c8 <__aeabi_dsub>
 8010020:	460b      	mov	r3, r1
 8010022:	4602      	mov	r2, r0
 8010024:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010028:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801002c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801002e:	ea46 060a 	orr.w	r6, r6, sl
 8010032:	431e      	orrs	r6, r3
 8010034:	d06f      	beq.n	8010116 <_strtod_l+0xb86>
 8010036:	a30e      	add	r3, pc, #56	@ (adr r3, 8010070 <_strtod_l+0xae0>)
 8010038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003c:	f7f0 fd6e 	bl	8000b1c <__aeabi_dcmplt>
 8010040:	2800      	cmp	r0, #0
 8010042:	f47f acd3 	bne.w	800f9ec <_strtod_l+0x45c>
 8010046:	a30c      	add	r3, pc, #48	@ (adr r3, 8010078 <_strtod_l+0xae8>)
 8010048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010050:	f7f0 fd82 	bl	8000b58 <__aeabi_dcmpgt>
 8010054:	2800      	cmp	r0, #0
 8010056:	d093      	beq.n	800ff80 <_strtod_l+0x9f0>
 8010058:	e4c8      	b.n	800f9ec <_strtod_l+0x45c>
 801005a:	bf00      	nop
 801005c:	f3af 8000 	nop.w
 8010060:	00000000 	.word	0x00000000
 8010064:	bff00000 	.word	0xbff00000
 8010068:	00000000 	.word	0x00000000
 801006c:	3ff00000 	.word	0x3ff00000
 8010070:	94a03595 	.word	0x94a03595
 8010074:	3fdfffff 	.word	0x3fdfffff
 8010078:	35afe535 	.word	0x35afe535
 801007c:	3fe00000 	.word	0x3fe00000
 8010080:	000fffff 	.word	0x000fffff
 8010084:	7ff00000 	.word	0x7ff00000
 8010088:	7fefffff 	.word	0x7fefffff
 801008c:	3ff00000 	.word	0x3ff00000
 8010090:	3fe00000 	.word	0x3fe00000
 8010094:	7fe00000 	.word	0x7fe00000
 8010098:	7c9fffff 	.word	0x7c9fffff
 801009c:	9b08      	ldr	r3, [sp, #32]
 801009e:	b323      	cbz	r3, 80100ea <_strtod_l+0xb5a>
 80100a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80100a4:	d821      	bhi.n	80100ea <_strtod_l+0xb5a>
 80100a6:	a328      	add	r3, pc, #160	@ (adr r3, 8010148 <_strtod_l+0xbb8>)
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ac:	4630      	mov	r0, r6
 80100ae:	4639      	mov	r1, r7
 80100b0:	f7f0 fd3e 	bl	8000b30 <__aeabi_dcmple>
 80100b4:	b1a0      	cbz	r0, 80100e0 <_strtod_l+0xb50>
 80100b6:	4639      	mov	r1, r7
 80100b8:	4630      	mov	r0, r6
 80100ba:	f7f0 fd95 	bl	8000be8 <__aeabi_d2uiz>
 80100be:	2801      	cmp	r0, #1
 80100c0:	bf38      	it	cc
 80100c2:	2001      	movcc	r0, #1
 80100c4:	f7f0 fa3e 	bl	8000544 <__aeabi_ui2d>
 80100c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100ca:	4606      	mov	r6, r0
 80100cc:	460f      	mov	r7, r1
 80100ce:	b9fb      	cbnz	r3, 8010110 <_strtod_l+0xb80>
 80100d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80100d4:	9014      	str	r0, [sp, #80]	@ 0x50
 80100d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80100d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80100dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80100e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80100e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80100e6:	1b5b      	subs	r3, r3, r5
 80100e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80100ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80100ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80100f2:	f7ff f8f1 	bl	800f2d8 <__ulp>
 80100f6:	4650      	mov	r0, sl
 80100f8:	ec53 2b10 	vmov	r2, r3, d0
 80100fc:	4659      	mov	r1, fp
 80100fe:	f7f0 fa9b 	bl	8000638 <__aeabi_dmul>
 8010102:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010106:	f7f0 f8e1 	bl	80002cc <__adddf3>
 801010a:	4682      	mov	sl, r0
 801010c:	468b      	mov	fp, r1
 801010e:	e770      	b.n	800fff2 <_strtod_l+0xa62>
 8010110:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010114:	e7e0      	b.n	80100d8 <_strtod_l+0xb48>
 8010116:	a30e      	add	r3, pc, #56	@ (adr r3, 8010150 <_strtod_l+0xbc0>)
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	f7f0 fcfe 	bl	8000b1c <__aeabi_dcmplt>
 8010120:	e798      	b.n	8010054 <_strtod_l+0xac4>
 8010122:	2300      	movs	r3, #0
 8010124:	930e      	str	r3, [sp, #56]	@ 0x38
 8010126:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010128:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801012a:	6013      	str	r3, [r2, #0]
 801012c:	f7ff ba6d 	b.w	800f60a <_strtod_l+0x7a>
 8010130:	2a65      	cmp	r2, #101	@ 0x65
 8010132:	f43f ab68 	beq.w	800f806 <_strtod_l+0x276>
 8010136:	2a45      	cmp	r2, #69	@ 0x45
 8010138:	f43f ab65 	beq.w	800f806 <_strtod_l+0x276>
 801013c:	2301      	movs	r3, #1
 801013e:	f7ff bba0 	b.w	800f882 <_strtod_l+0x2f2>
 8010142:	bf00      	nop
 8010144:	f3af 8000 	nop.w
 8010148:	ffc00000 	.word	0xffc00000
 801014c:	41dfffff 	.word	0x41dfffff
 8010150:	94a03595 	.word	0x94a03595
 8010154:	3fcfffff 	.word	0x3fcfffff

08010158 <_strtod_r>:
 8010158:	4b01      	ldr	r3, [pc, #4]	@ (8010160 <_strtod_r+0x8>)
 801015a:	f7ff ba19 	b.w	800f590 <_strtod_l>
 801015e:	bf00      	nop
 8010160:	20000088 	.word	0x20000088

08010164 <_strtol_l.isra.0>:
 8010164:	2b24      	cmp	r3, #36	@ 0x24
 8010166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801016a:	4686      	mov	lr, r0
 801016c:	4690      	mov	r8, r2
 801016e:	d801      	bhi.n	8010174 <_strtol_l.isra.0+0x10>
 8010170:	2b01      	cmp	r3, #1
 8010172:	d106      	bne.n	8010182 <_strtol_l.isra.0+0x1e>
 8010174:	f7fd fda8 	bl	800dcc8 <__errno>
 8010178:	2316      	movs	r3, #22
 801017a:	6003      	str	r3, [r0, #0]
 801017c:	2000      	movs	r0, #0
 801017e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010182:	4834      	ldr	r0, [pc, #208]	@ (8010254 <_strtol_l.isra.0+0xf0>)
 8010184:	460d      	mov	r5, r1
 8010186:	462a      	mov	r2, r5
 8010188:	f815 4b01 	ldrb.w	r4, [r5], #1
 801018c:	5d06      	ldrb	r6, [r0, r4]
 801018e:	f016 0608 	ands.w	r6, r6, #8
 8010192:	d1f8      	bne.n	8010186 <_strtol_l.isra.0+0x22>
 8010194:	2c2d      	cmp	r4, #45	@ 0x2d
 8010196:	d110      	bne.n	80101ba <_strtol_l.isra.0+0x56>
 8010198:	782c      	ldrb	r4, [r5, #0]
 801019a:	2601      	movs	r6, #1
 801019c:	1c95      	adds	r5, r2, #2
 801019e:	f033 0210 	bics.w	r2, r3, #16
 80101a2:	d115      	bne.n	80101d0 <_strtol_l.isra.0+0x6c>
 80101a4:	2c30      	cmp	r4, #48	@ 0x30
 80101a6:	d10d      	bne.n	80101c4 <_strtol_l.isra.0+0x60>
 80101a8:	782a      	ldrb	r2, [r5, #0]
 80101aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80101ae:	2a58      	cmp	r2, #88	@ 0x58
 80101b0:	d108      	bne.n	80101c4 <_strtol_l.isra.0+0x60>
 80101b2:	786c      	ldrb	r4, [r5, #1]
 80101b4:	3502      	adds	r5, #2
 80101b6:	2310      	movs	r3, #16
 80101b8:	e00a      	b.n	80101d0 <_strtol_l.isra.0+0x6c>
 80101ba:	2c2b      	cmp	r4, #43	@ 0x2b
 80101bc:	bf04      	itt	eq
 80101be:	782c      	ldrbeq	r4, [r5, #0]
 80101c0:	1c95      	addeq	r5, r2, #2
 80101c2:	e7ec      	b.n	801019e <_strtol_l.isra.0+0x3a>
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1f6      	bne.n	80101b6 <_strtol_l.isra.0+0x52>
 80101c8:	2c30      	cmp	r4, #48	@ 0x30
 80101ca:	bf14      	ite	ne
 80101cc:	230a      	movne	r3, #10
 80101ce:	2308      	moveq	r3, #8
 80101d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80101d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80101d8:	2200      	movs	r2, #0
 80101da:	fbbc f9f3 	udiv	r9, ip, r3
 80101de:	4610      	mov	r0, r2
 80101e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80101e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80101e8:	2f09      	cmp	r7, #9
 80101ea:	d80f      	bhi.n	801020c <_strtol_l.isra.0+0xa8>
 80101ec:	463c      	mov	r4, r7
 80101ee:	42a3      	cmp	r3, r4
 80101f0:	dd1b      	ble.n	801022a <_strtol_l.isra.0+0xc6>
 80101f2:	1c57      	adds	r7, r2, #1
 80101f4:	d007      	beq.n	8010206 <_strtol_l.isra.0+0xa2>
 80101f6:	4581      	cmp	r9, r0
 80101f8:	d314      	bcc.n	8010224 <_strtol_l.isra.0+0xc0>
 80101fa:	d101      	bne.n	8010200 <_strtol_l.isra.0+0x9c>
 80101fc:	45a2      	cmp	sl, r4
 80101fe:	db11      	blt.n	8010224 <_strtol_l.isra.0+0xc0>
 8010200:	fb00 4003 	mla	r0, r0, r3, r4
 8010204:	2201      	movs	r2, #1
 8010206:	f815 4b01 	ldrb.w	r4, [r5], #1
 801020a:	e7eb      	b.n	80101e4 <_strtol_l.isra.0+0x80>
 801020c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010210:	2f19      	cmp	r7, #25
 8010212:	d801      	bhi.n	8010218 <_strtol_l.isra.0+0xb4>
 8010214:	3c37      	subs	r4, #55	@ 0x37
 8010216:	e7ea      	b.n	80101ee <_strtol_l.isra.0+0x8a>
 8010218:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801021c:	2f19      	cmp	r7, #25
 801021e:	d804      	bhi.n	801022a <_strtol_l.isra.0+0xc6>
 8010220:	3c57      	subs	r4, #87	@ 0x57
 8010222:	e7e4      	b.n	80101ee <_strtol_l.isra.0+0x8a>
 8010224:	f04f 32ff 	mov.w	r2, #4294967295
 8010228:	e7ed      	b.n	8010206 <_strtol_l.isra.0+0xa2>
 801022a:	1c53      	adds	r3, r2, #1
 801022c:	d108      	bne.n	8010240 <_strtol_l.isra.0+0xdc>
 801022e:	2322      	movs	r3, #34	@ 0x22
 8010230:	f8ce 3000 	str.w	r3, [lr]
 8010234:	4660      	mov	r0, ip
 8010236:	f1b8 0f00 	cmp.w	r8, #0
 801023a:	d0a0      	beq.n	801017e <_strtol_l.isra.0+0x1a>
 801023c:	1e69      	subs	r1, r5, #1
 801023e:	e006      	b.n	801024e <_strtol_l.isra.0+0xea>
 8010240:	b106      	cbz	r6, 8010244 <_strtol_l.isra.0+0xe0>
 8010242:	4240      	negs	r0, r0
 8010244:	f1b8 0f00 	cmp.w	r8, #0
 8010248:	d099      	beq.n	801017e <_strtol_l.isra.0+0x1a>
 801024a:	2a00      	cmp	r2, #0
 801024c:	d1f6      	bne.n	801023c <_strtol_l.isra.0+0xd8>
 801024e:	f8c8 1000 	str.w	r1, [r8]
 8010252:	e794      	b.n	801017e <_strtol_l.isra.0+0x1a>
 8010254:	08013a49 	.word	0x08013a49

08010258 <_strtol_r>:
 8010258:	f7ff bf84 	b.w	8010164 <_strtol_l.isra.0>

0801025c <__ssputs_r>:
 801025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010260:	688e      	ldr	r6, [r1, #8]
 8010262:	461f      	mov	r7, r3
 8010264:	42be      	cmp	r6, r7
 8010266:	680b      	ldr	r3, [r1, #0]
 8010268:	4682      	mov	sl, r0
 801026a:	460c      	mov	r4, r1
 801026c:	4690      	mov	r8, r2
 801026e:	d82d      	bhi.n	80102cc <__ssputs_r+0x70>
 8010270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010278:	d026      	beq.n	80102c8 <__ssputs_r+0x6c>
 801027a:	6965      	ldr	r5, [r4, #20]
 801027c:	6909      	ldr	r1, [r1, #16]
 801027e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010282:	eba3 0901 	sub.w	r9, r3, r1
 8010286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801028a:	1c7b      	adds	r3, r7, #1
 801028c:	444b      	add	r3, r9
 801028e:	106d      	asrs	r5, r5, #1
 8010290:	429d      	cmp	r5, r3
 8010292:	bf38      	it	cc
 8010294:	461d      	movcc	r5, r3
 8010296:	0553      	lsls	r3, r2, #21
 8010298:	d527      	bpl.n	80102ea <__ssputs_r+0x8e>
 801029a:	4629      	mov	r1, r5
 801029c:	f7fe fc24 	bl	800eae8 <_malloc_r>
 80102a0:	4606      	mov	r6, r0
 80102a2:	b360      	cbz	r0, 80102fe <__ssputs_r+0xa2>
 80102a4:	6921      	ldr	r1, [r4, #16]
 80102a6:	464a      	mov	r2, r9
 80102a8:	f7fd fd3b 	bl	800dd22 <memcpy>
 80102ac:	89a3      	ldrh	r3, [r4, #12]
 80102ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80102b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102b6:	81a3      	strh	r3, [r4, #12]
 80102b8:	6126      	str	r6, [r4, #16]
 80102ba:	6165      	str	r5, [r4, #20]
 80102bc:	444e      	add	r6, r9
 80102be:	eba5 0509 	sub.w	r5, r5, r9
 80102c2:	6026      	str	r6, [r4, #0]
 80102c4:	60a5      	str	r5, [r4, #8]
 80102c6:	463e      	mov	r6, r7
 80102c8:	42be      	cmp	r6, r7
 80102ca:	d900      	bls.n	80102ce <__ssputs_r+0x72>
 80102cc:	463e      	mov	r6, r7
 80102ce:	6820      	ldr	r0, [r4, #0]
 80102d0:	4632      	mov	r2, r6
 80102d2:	4641      	mov	r1, r8
 80102d4:	f000 f9c6 	bl	8010664 <memmove>
 80102d8:	68a3      	ldr	r3, [r4, #8]
 80102da:	1b9b      	subs	r3, r3, r6
 80102dc:	60a3      	str	r3, [r4, #8]
 80102de:	6823      	ldr	r3, [r4, #0]
 80102e0:	4433      	add	r3, r6
 80102e2:	6023      	str	r3, [r4, #0]
 80102e4:	2000      	movs	r0, #0
 80102e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ea:	462a      	mov	r2, r5
 80102ec:	f000 fd7d 	bl	8010dea <_realloc_r>
 80102f0:	4606      	mov	r6, r0
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d1e0      	bne.n	80102b8 <__ssputs_r+0x5c>
 80102f6:	6921      	ldr	r1, [r4, #16]
 80102f8:	4650      	mov	r0, sl
 80102fa:	f7fe fb81 	bl	800ea00 <_free_r>
 80102fe:	230c      	movs	r3, #12
 8010300:	f8ca 3000 	str.w	r3, [sl]
 8010304:	89a3      	ldrh	r3, [r4, #12]
 8010306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801030a:	81a3      	strh	r3, [r4, #12]
 801030c:	f04f 30ff 	mov.w	r0, #4294967295
 8010310:	e7e9      	b.n	80102e6 <__ssputs_r+0x8a>
	...

08010314 <_svfiprintf_r>:
 8010314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010318:	4698      	mov	r8, r3
 801031a:	898b      	ldrh	r3, [r1, #12]
 801031c:	061b      	lsls	r3, r3, #24
 801031e:	b09d      	sub	sp, #116	@ 0x74
 8010320:	4607      	mov	r7, r0
 8010322:	460d      	mov	r5, r1
 8010324:	4614      	mov	r4, r2
 8010326:	d510      	bpl.n	801034a <_svfiprintf_r+0x36>
 8010328:	690b      	ldr	r3, [r1, #16]
 801032a:	b973      	cbnz	r3, 801034a <_svfiprintf_r+0x36>
 801032c:	2140      	movs	r1, #64	@ 0x40
 801032e:	f7fe fbdb 	bl	800eae8 <_malloc_r>
 8010332:	6028      	str	r0, [r5, #0]
 8010334:	6128      	str	r0, [r5, #16]
 8010336:	b930      	cbnz	r0, 8010346 <_svfiprintf_r+0x32>
 8010338:	230c      	movs	r3, #12
 801033a:	603b      	str	r3, [r7, #0]
 801033c:	f04f 30ff 	mov.w	r0, #4294967295
 8010340:	b01d      	add	sp, #116	@ 0x74
 8010342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010346:	2340      	movs	r3, #64	@ 0x40
 8010348:	616b      	str	r3, [r5, #20]
 801034a:	2300      	movs	r3, #0
 801034c:	9309      	str	r3, [sp, #36]	@ 0x24
 801034e:	2320      	movs	r3, #32
 8010350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010354:	f8cd 800c 	str.w	r8, [sp, #12]
 8010358:	2330      	movs	r3, #48	@ 0x30
 801035a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80104f8 <_svfiprintf_r+0x1e4>
 801035e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010362:	f04f 0901 	mov.w	r9, #1
 8010366:	4623      	mov	r3, r4
 8010368:	469a      	mov	sl, r3
 801036a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801036e:	b10a      	cbz	r2, 8010374 <_svfiprintf_r+0x60>
 8010370:	2a25      	cmp	r2, #37	@ 0x25
 8010372:	d1f9      	bne.n	8010368 <_svfiprintf_r+0x54>
 8010374:	ebba 0b04 	subs.w	fp, sl, r4
 8010378:	d00b      	beq.n	8010392 <_svfiprintf_r+0x7e>
 801037a:	465b      	mov	r3, fp
 801037c:	4622      	mov	r2, r4
 801037e:	4629      	mov	r1, r5
 8010380:	4638      	mov	r0, r7
 8010382:	f7ff ff6b 	bl	801025c <__ssputs_r>
 8010386:	3001      	adds	r0, #1
 8010388:	f000 80a7 	beq.w	80104da <_svfiprintf_r+0x1c6>
 801038c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801038e:	445a      	add	r2, fp
 8010390:	9209      	str	r2, [sp, #36]	@ 0x24
 8010392:	f89a 3000 	ldrb.w	r3, [sl]
 8010396:	2b00      	cmp	r3, #0
 8010398:	f000 809f 	beq.w	80104da <_svfiprintf_r+0x1c6>
 801039c:	2300      	movs	r3, #0
 801039e:	f04f 32ff 	mov.w	r2, #4294967295
 80103a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103a6:	f10a 0a01 	add.w	sl, sl, #1
 80103aa:	9304      	str	r3, [sp, #16]
 80103ac:	9307      	str	r3, [sp, #28]
 80103ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80103b4:	4654      	mov	r4, sl
 80103b6:	2205      	movs	r2, #5
 80103b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103bc:	484e      	ldr	r0, [pc, #312]	@ (80104f8 <_svfiprintf_r+0x1e4>)
 80103be:	f7ef ff27 	bl	8000210 <memchr>
 80103c2:	9a04      	ldr	r2, [sp, #16]
 80103c4:	b9d8      	cbnz	r0, 80103fe <_svfiprintf_r+0xea>
 80103c6:	06d0      	lsls	r0, r2, #27
 80103c8:	bf44      	itt	mi
 80103ca:	2320      	movmi	r3, #32
 80103cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103d0:	0711      	lsls	r1, r2, #28
 80103d2:	bf44      	itt	mi
 80103d4:	232b      	movmi	r3, #43	@ 0x2b
 80103d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103da:	f89a 3000 	ldrb.w	r3, [sl]
 80103de:	2b2a      	cmp	r3, #42	@ 0x2a
 80103e0:	d015      	beq.n	801040e <_svfiprintf_r+0xfa>
 80103e2:	9a07      	ldr	r2, [sp, #28]
 80103e4:	4654      	mov	r4, sl
 80103e6:	2000      	movs	r0, #0
 80103e8:	f04f 0c0a 	mov.w	ip, #10
 80103ec:	4621      	mov	r1, r4
 80103ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103f2:	3b30      	subs	r3, #48	@ 0x30
 80103f4:	2b09      	cmp	r3, #9
 80103f6:	d94b      	bls.n	8010490 <_svfiprintf_r+0x17c>
 80103f8:	b1b0      	cbz	r0, 8010428 <_svfiprintf_r+0x114>
 80103fa:	9207      	str	r2, [sp, #28]
 80103fc:	e014      	b.n	8010428 <_svfiprintf_r+0x114>
 80103fe:	eba0 0308 	sub.w	r3, r0, r8
 8010402:	fa09 f303 	lsl.w	r3, r9, r3
 8010406:	4313      	orrs	r3, r2
 8010408:	9304      	str	r3, [sp, #16]
 801040a:	46a2      	mov	sl, r4
 801040c:	e7d2      	b.n	80103b4 <_svfiprintf_r+0xa0>
 801040e:	9b03      	ldr	r3, [sp, #12]
 8010410:	1d19      	adds	r1, r3, #4
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	9103      	str	r1, [sp, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	bfbb      	ittet	lt
 801041a:	425b      	neglt	r3, r3
 801041c:	f042 0202 	orrlt.w	r2, r2, #2
 8010420:	9307      	strge	r3, [sp, #28]
 8010422:	9307      	strlt	r3, [sp, #28]
 8010424:	bfb8      	it	lt
 8010426:	9204      	strlt	r2, [sp, #16]
 8010428:	7823      	ldrb	r3, [r4, #0]
 801042a:	2b2e      	cmp	r3, #46	@ 0x2e
 801042c:	d10a      	bne.n	8010444 <_svfiprintf_r+0x130>
 801042e:	7863      	ldrb	r3, [r4, #1]
 8010430:	2b2a      	cmp	r3, #42	@ 0x2a
 8010432:	d132      	bne.n	801049a <_svfiprintf_r+0x186>
 8010434:	9b03      	ldr	r3, [sp, #12]
 8010436:	1d1a      	adds	r2, r3, #4
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	9203      	str	r2, [sp, #12]
 801043c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010440:	3402      	adds	r4, #2
 8010442:	9305      	str	r3, [sp, #20]
 8010444:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010508 <_svfiprintf_r+0x1f4>
 8010448:	7821      	ldrb	r1, [r4, #0]
 801044a:	2203      	movs	r2, #3
 801044c:	4650      	mov	r0, sl
 801044e:	f7ef fedf 	bl	8000210 <memchr>
 8010452:	b138      	cbz	r0, 8010464 <_svfiprintf_r+0x150>
 8010454:	9b04      	ldr	r3, [sp, #16]
 8010456:	eba0 000a 	sub.w	r0, r0, sl
 801045a:	2240      	movs	r2, #64	@ 0x40
 801045c:	4082      	lsls	r2, r0
 801045e:	4313      	orrs	r3, r2
 8010460:	3401      	adds	r4, #1
 8010462:	9304      	str	r3, [sp, #16]
 8010464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010468:	4824      	ldr	r0, [pc, #144]	@ (80104fc <_svfiprintf_r+0x1e8>)
 801046a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801046e:	2206      	movs	r2, #6
 8010470:	f7ef fece 	bl	8000210 <memchr>
 8010474:	2800      	cmp	r0, #0
 8010476:	d036      	beq.n	80104e6 <_svfiprintf_r+0x1d2>
 8010478:	4b21      	ldr	r3, [pc, #132]	@ (8010500 <_svfiprintf_r+0x1ec>)
 801047a:	bb1b      	cbnz	r3, 80104c4 <_svfiprintf_r+0x1b0>
 801047c:	9b03      	ldr	r3, [sp, #12]
 801047e:	3307      	adds	r3, #7
 8010480:	f023 0307 	bic.w	r3, r3, #7
 8010484:	3308      	adds	r3, #8
 8010486:	9303      	str	r3, [sp, #12]
 8010488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801048a:	4433      	add	r3, r6
 801048c:	9309      	str	r3, [sp, #36]	@ 0x24
 801048e:	e76a      	b.n	8010366 <_svfiprintf_r+0x52>
 8010490:	fb0c 3202 	mla	r2, ip, r2, r3
 8010494:	460c      	mov	r4, r1
 8010496:	2001      	movs	r0, #1
 8010498:	e7a8      	b.n	80103ec <_svfiprintf_r+0xd8>
 801049a:	2300      	movs	r3, #0
 801049c:	3401      	adds	r4, #1
 801049e:	9305      	str	r3, [sp, #20]
 80104a0:	4619      	mov	r1, r3
 80104a2:	f04f 0c0a 	mov.w	ip, #10
 80104a6:	4620      	mov	r0, r4
 80104a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104ac:	3a30      	subs	r2, #48	@ 0x30
 80104ae:	2a09      	cmp	r2, #9
 80104b0:	d903      	bls.n	80104ba <_svfiprintf_r+0x1a6>
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d0c6      	beq.n	8010444 <_svfiprintf_r+0x130>
 80104b6:	9105      	str	r1, [sp, #20]
 80104b8:	e7c4      	b.n	8010444 <_svfiprintf_r+0x130>
 80104ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80104be:	4604      	mov	r4, r0
 80104c0:	2301      	movs	r3, #1
 80104c2:	e7f0      	b.n	80104a6 <_svfiprintf_r+0x192>
 80104c4:	ab03      	add	r3, sp, #12
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	462a      	mov	r2, r5
 80104ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010504 <_svfiprintf_r+0x1f0>)
 80104cc:	a904      	add	r1, sp, #16
 80104ce:	4638      	mov	r0, r7
 80104d0:	f7fc fc4a 	bl	800cd68 <_printf_float>
 80104d4:	1c42      	adds	r2, r0, #1
 80104d6:	4606      	mov	r6, r0
 80104d8:	d1d6      	bne.n	8010488 <_svfiprintf_r+0x174>
 80104da:	89ab      	ldrh	r3, [r5, #12]
 80104dc:	065b      	lsls	r3, r3, #25
 80104de:	f53f af2d 	bmi.w	801033c <_svfiprintf_r+0x28>
 80104e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80104e4:	e72c      	b.n	8010340 <_svfiprintf_r+0x2c>
 80104e6:	ab03      	add	r3, sp, #12
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	462a      	mov	r2, r5
 80104ec:	4b05      	ldr	r3, [pc, #20]	@ (8010504 <_svfiprintf_r+0x1f0>)
 80104ee:	a904      	add	r1, sp, #16
 80104f0:	4638      	mov	r0, r7
 80104f2:	f7fc fed1 	bl	800d298 <_printf_i>
 80104f6:	e7ed      	b.n	80104d4 <_svfiprintf_r+0x1c0>
 80104f8:	08013841 	.word	0x08013841
 80104fc:	0801384b 	.word	0x0801384b
 8010500:	0800cd69 	.word	0x0800cd69
 8010504:	0801025d 	.word	0x0801025d
 8010508:	08013847 	.word	0x08013847

0801050c <__sflush_r>:
 801050c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010514:	0716      	lsls	r6, r2, #28
 8010516:	4605      	mov	r5, r0
 8010518:	460c      	mov	r4, r1
 801051a:	d454      	bmi.n	80105c6 <__sflush_r+0xba>
 801051c:	684b      	ldr	r3, [r1, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	dc02      	bgt.n	8010528 <__sflush_r+0x1c>
 8010522:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010524:	2b00      	cmp	r3, #0
 8010526:	dd48      	ble.n	80105ba <__sflush_r+0xae>
 8010528:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801052a:	2e00      	cmp	r6, #0
 801052c:	d045      	beq.n	80105ba <__sflush_r+0xae>
 801052e:	2300      	movs	r3, #0
 8010530:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010534:	682f      	ldr	r7, [r5, #0]
 8010536:	6a21      	ldr	r1, [r4, #32]
 8010538:	602b      	str	r3, [r5, #0]
 801053a:	d030      	beq.n	801059e <__sflush_r+0x92>
 801053c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801053e:	89a3      	ldrh	r3, [r4, #12]
 8010540:	0759      	lsls	r1, r3, #29
 8010542:	d505      	bpl.n	8010550 <__sflush_r+0x44>
 8010544:	6863      	ldr	r3, [r4, #4]
 8010546:	1ad2      	subs	r2, r2, r3
 8010548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801054a:	b10b      	cbz	r3, 8010550 <__sflush_r+0x44>
 801054c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801054e:	1ad2      	subs	r2, r2, r3
 8010550:	2300      	movs	r3, #0
 8010552:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010554:	6a21      	ldr	r1, [r4, #32]
 8010556:	4628      	mov	r0, r5
 8010558:	47b0      	blx	r6
 801055a:	1c43      	adds	r3, r0, #1
 801055c:	89a3      	ldrh	r3, [r4, #12]
 801055e:	d106      	bne.n	801056e <__sflush_r+0x62>
 8010560:	6829      	ldr	r1, [r5, #0]
 8010562:	291d      	cmp	r1, #29
 8010564:	d82b      	bhi.n	80105be <__sflush_r+0xb2>
 8010566:	4a2a      	ldr	r2, [pc, #168]	@ (8010610 <__sflush_r+0x104>)
 8010568:	40ca      	lsrs	r2, r1
 801056a:	07d6      	lsls	r6, r2, #31
 801056c:	d527      	bpl.n	80105be <__sflush_r+0xb2>
 801056e:	2200      	movs	r2, #0
 8010570:	6062      	str	r2, [r4, #4]
 8010572:	04d9      	lsls	r1, r3, #19
 8010574:	6922      	ldr	r2, [r4, #16]
 8010576:	6022      	str	r2, [r4, #0]
 8010578:	d504      	bpl.n	8010584 <__sflush_r+0x78>
 801057a:	1c42      	adds	r2, r0, #1
 801057c:	d101      	bne.n	8010582 <__sflush_r+0x76>
 801057e:	682b      	ldr	r3, [r5, #0]
 8010580:	b903      	cbnz	r3, 8010584 <__sflush_r+0x78>
 8010582:	6560      	str	r0, [r4, #84]	@ 0x54
 8010584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010586:	602f      	str	r7, [r5, #0]
 8010588:	b1b9      	cbz	r1, 80105ba <__sflush_r+0xae>
 801058a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801058e:	4299      	cmp	r1, r3
 8010590:	d002      	beq.n	8010598 <__sflush_r+0x8c>
 8010592:	4628      	mov	r0, r5
 8010594:	f7fe fa34 	bl	800ea00 <_free_r>
 8010598:	2300      	movs	r3, #0
 801059a:	6363      	str	r3, [r4, #52]	@ 0x34
 801059c:	e00d      	b.n	80105ba <__sflush_r+0xae>
 801059e:	2301      	movs	r3, #1
 80105a0:	4628      	mov	r0, r5
 80105a2:	47b0      	blx	r6
 80105a4:	4602      	mov	r2, r0
 80105a6:	1c50      	adds	r0, r2, #1
 80105a8:	d1c9      	bne.n	801053e <__sflush_r+0x32>
 80105aa:	682b      	ldr	r3, [r5, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d0c6      	beq.n	801053e <__sflush_r+0x32>
 80105b0:	2b1d      	cmp	r3, #29
 80105b2:	d001      	beq.n	80105b8 <__sflush_r+0xac>
 80105b4:	2b16      	cmp	r3, #22
 80105b6:	d11e      	bne.n	80105f6 <__sflush_r+0xea>
 80105b8:	602f      	str	r7, [r5, #0]
 80105ba:	2000      	movs	r0, #0
 80105bc:	e022      	b.n	8010604 <__sflush_r+0xf8>
 80105be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105c2:	b21b      	sxth	r3, r3
 80105c4:	e01b      	b.n	80105fe <__sflush_r+0xf2>
 80105c6:	690f      	ldr	r7, [r1, #16]
 80105c8:	2f00      	cmp	r7, #0
 80105ca:	d0f6      	beq.n	80105ba <__sflush_r+0xae>
 80105cc:	0793      	lsls	r3, r2, #30
 80105ce:	680e      	ldr	r6, [r1, #0]
 80105d0:	bf08      	it	eq
 80105d2:	694b      	ldreq	r3, [r1, #20]
 80105d4:	600f      	str	r7, [r1, #0]
 80105d6:	bf18      	it	ne
 80105d8:	2300      	movne	r3, #0
 80105da:	eba6 0807 	sub.w	r8, r6, r7
 80105de:	608b      	str	r3, [r1, #8]
 80105e0:	f1b8 0f00 	cmp.w	r8, #0
 80105e4:	dde9      	ble.n	80105ba <__sflush_r+0xae>
 80105e6:	6a21      	ldr	r1, [r4, #32]
 80105e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80105ea:	4643      	mov	r3, r8
 80105ec:	463a      	mov	r2, r7
 80105ee:	4628      	mov	r0, r5
 80105f0:	47b0      	blx	r6
 80105f2:	2800      	cmp	r0, #0
 80105f4:	dc08      	bgt.n	8010608 <__sflush_r+0xfc>
 80105f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105fe:	81a3      	strh	r3, [r4, #12]
 8010600:	f04f 30ff 	mov.w	r0, #4294967295
 8010604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010608:	4407      	add	r7, r0
 801060a:	eba8 0800 	sub.w	r8, r8, r0
 801060e:	e7e7      	b.n	80105e0 <__sflush_r+0xd4>
 8010610:	20400001 	.word	0x20400001

08010614 <_fflush_r>:
 8010614:	b538      	push	{r3, r4, r5, lr}
 8010616:	690b      	ldr	r3, [r1, #16]
 8010618:	4605      	mov	r5, r0
 801061a:	460c      	mov	r4, r1
 801061c:	b913      	cbnz	r3, 8010624 <_fflush_r+0x10>
 801061e:	2500      	movs	r5, #0
 8010620:	4628      	mov	r0, r5
 8010622:	bd38      	pop	{r3, r4, r5, pc}
 8010624:	b118      	cbz	r0, 801062e <_fflush_r+0x1a>
 8010626:	6a03      	ldr	r3, [r0, #32]
 8010628:	b90b      	cbnz	r3, 801062e <_fflush_r+0x1a>
 801062a:	f7fd f9ed 	bl	800da08 <__sinit>
 801062e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d0f3      	beq.n	801061e <_fflush_r+0xa>
 8010636:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010638:	07d0      	lsls	r0, r2, #31
 801063a:	d404      	bmi.n	8010646 <_fflush_r+0x32>
 801063c:	0599      	lsls	r1, r3, #22
 801063e:	d402      	bmi.n	8010646 <_fflush_r+0x32>
 8010640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010642:	f7fd fb6c 	bl	800dd1e <__retarget_lock_acquire_recursive>
 8010646:	4628      	mov	r0, r5
 8010648:	4621      	mov	r1, r4
 801064a:	f7ff ff5f 	bl	801050c <__sflush_r>
 801064e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010650:	07da      	lsls	r2, r3, #31
 8010652:	4605      	mov	r5, r0
 8010654:	d4e4      	bmi.n	8010620 <_fflush_r+0xc>
 8010656:	89a3      	ldrh	r3, [r4, #12]
 8010658:	059b      	lsls	r3, r3, #22
 801065a:	d4e1      	bmi.n	8010620 <_fflush_r+0xc>
 801065c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801065e:	f7fd fb5f 	bl	800dd20 <__retarget_lock_release_recursive>
 8010662:	e7dd      	b.n	8010620 <_fflush_r+0xc>

08010664 <memmove>:
 8010664:	4288      	cmp	r0, r1
 8010666:	b510      	push	{r4, lr}
 8010668:	eb01 0402 	add.w	r4, r1, r2
 801066c:	d902      	bls.n	8010674 <memmove+0x10>
 801066e:	4284      	cmp	r4, r0
 8010670:	4623      	mov	r3, r4
 8010672:	d807      	bhi.n	8010684 <memmove+0x20>
 8010674:	1e43      	subs	r3, r0, #1
 8010676:	42a1      	cmp	r1, r4
 8010678:	d008      	beq.n	801068c <memmove+0x28>
 801067a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801067e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010682:	e7f8      	b.n	8010676 <memmove+0x12>
 8010684:	4402      	add	r2, r0
 8010686:	4601      	mov	r1, r0
 8010688:	428a      	cmp	r2, r1
 801068a:	d100      	bne.n	801068e <memmove+0x2a>
 801068c:	bd10      	pop	{r4, pc}
 801068e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010696:	e7f7      	b.n	8010688 <memmove+0x24>

08010698 <strncmp>:
 8010698:	b510      	push	{r4, lr}
 801069a:	b16a      	cbz	r2, 80106b8 <strncmp+0x20>
 801069c:	3901      	subs	r1, #1
 801069e:	1884      	adds	r4, r0, r2
 80106a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d103      	bne.n	80106b4 <strncmp+0x1c>
 80106ac:	42a0      	cmp	r0, r4
 80106ae:	d001      	beq.n	80106b4 <strncmp+0x1c>
 80106b0:	2a00      	cmp	r2, #0
 80106b2:	d1f5      	bne.n	80106a0 <strncmp+0x8>
 80106b4:	1ad0      	subs	r0, r2, r3
 80106b6:	bd10      	pop	{r4, pc}
 80106b8:	4610      	mov	r0, r2
 80106ba:	e7fc      	b.n	80106b6 <strncmp+0x1e>

080106bc <_sbrk_r>:
 80106bc:	b538      	push	{r3, r4, r5, lr}
 80106be:	4d06      	ldr	r5, [pc, #24]	@ (80106d8 <_sbrk_r+0x1c>)
 80106c0:	2300      	movs	r3, #0
 80106c2:	4604      	mov	r4, r0
 80106c4:	4608      	mov	r0, r1
 80106c6:	602b      	str	r3, [r5, #0]
 80106c8:	f7f7 fc38 	bl	8007f3c <_sbrk>
 80106cc:	1c43      	adds	r3, r0, #1
 80106ce:	d102      	bne.n	80106d6 <_sbrk_r+0x1a>
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	b103      	cbz	r3, 80106d6 <_sbrk_r+0x1a>
 80106d4:	6023      	str	r3, [r4, #0]
 80106d6:	bd38      	pop	{r3, r4, r5, pc}
 80106d8:	200011e8 	.word	0x200011e8
 80106dc:	00000000 	.word	0x00000000

080106e0 <nan>:
 80106e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80106e8 <nan+0x8>
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop
 80106e8:	00000000 	.word	0x00000000
 80106ec:	7ff80000 	.word	0x7ff80000

080106f0 <__assert_func>:
 80106f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106f2:	4614      	mov	r4, r2
 80106f4:	461a      	mov	r2, r3
 80106f6:	4b09      	ldr	r3, [pc, #36]	@ (801071c <__assert_func+0x2c>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4605      	mov	r5, r0
 80106fc:	68d8      	ldr	r0, [r3, #12]
 80106fe:	b14c      	cbz	r4, 8010714 <__assert_func+0x24>
 8010700:	4b07      	ldr	r3, [pc, #28]	@ (8010720 <__assert_func+0x30>)
 8010702:	9100      	str	r1, [sp, #0]
 8010704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010708:	4906      	ldr	r1, [pc, #24]	@ (8010724 <__assert_func+0x34>)
 801070a:	462b      	mov	r3, r5
 801070c:	f000 fba8 	bl	8010e60 <fiprintf>
 8010710:	f000 fbb8 	bl	8010e84 <abort>
 8010714:	4b04      	ldr	r3, [pc, #16]	@ (8010728 <__assert_func+0x38>)
 8010716:	461c      	mov	r4, r3
 8010718:	e7f3      	b.n	8010702 <__assert_func+0x12>
 801071a:	bf00      	nop
 801071c:	20000038 	.word	0x20000038
 8010720:	0801385a 	.word	0x0801385a
 8010724:	08013867 	.word	0x08013867
 8010728:	08013895 	.word	0x08013895

0801072c <_calloc_r>:
 801072c:	b570      	push	{r4, r5, r6, lr}
 801072e:	fba1 5402 	umull	r5, r4, r1, r2
 8010732:	b934      	cbnz	r4, 8010742 <_calloc_r+0x16>
 8010734:	4629      	mov	r1, r5
 8010736:	f7fe f9d7 	bl	800eae8 <_malloc_r>
 801073a:	4606      	mov	r6, r0
 801073c:	b928      	cbnz	r0, 801074a <_calloc_r+0x1e>
 801073e:	4630      	mov	r0, r6
 8010740:	bd70      	pop	{r4, r5, r6, pc}
 8010742:	220c      	movs	r2, #12
 8010744:	6002      	str	r2, [r0, #0]
 8010746:	2600      	movs	r6, #0
 8010748:	e7f9      	b.n	801073e <_calloc_r+0x12>
 801074a:	462a      	mov	r2, r5
 801074c:	4621      	mov	r1, r4
 801074e:	f7fd fa69 	bl	800dc24 <memset>
 8010752:	e7f4      	b.n	801073e <_calloc_r+0x12>

08010754 <rshift>:
 8010754:	6903      	ldr	r3, [r0, #16]
 8010756:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801075a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801075e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010762:	f100 0414 	add.w	r4, r0, #20
 8010766:	dd45      	ble.n	80107f4 <rshift+0xa0>
 8010768:	f011 011f 	ands.w	r1, r1, #31
 801076c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010770:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010774:	d10c      	bne.n	8010790 <rshift+0x3c>
 8010776:	f100 0710 	add.w	r7, r0, #16
 801077a:	4629      	mov	r1, r5
 801077c:	42b1      	cmp	r1, r6
 801077e:	d334      	bcc.n	80107ea <rshift+0x96>
 8010780:	1a9b      	subs	r3, r3, r2
 8010782:	009b      	lsls	r3, r3, #2
 8010784:	1eea      	subs	r2, r5, #3
 8010786:	4296      	cmp	r6, r2
 8010788:	bf38      	it	cc
 801078a:	2300      	movcc	r3, #0
 801078c:	4423      	add	r3, r4
 801078e:	e015      	b.n	80107bc <rshift+0x68>
 8010790:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010794:	f1c1 0820 	rsb	r8, r1, #32
 8010798:	40cf      	lsrs	r7, r1
 801079a:	f105 0e04 	add.w	lr, r5, #4
 801079e:	46a1      	mov	r9, r4
 80107a0:	4576      	cmp	r6, lr
 80107a2:	46f4      	mov	ip, lr
 80107a4:	d815      	bhi.n	80107d2 <rshift+0x7e>
 80107a6:	1a9a      	subs	r2, r3, r2
 80107a8:	0092      	lsls	r2, r2, #2
 80107aa:	3a04      	subs	r2, #4
 80107ac:	3501      	adds	r5, #1
 80107ae:	42ae      	cmp	r6, r5
 80107b0:	bf38      	it	cc
 80107b2:	2200      	movcc	r2, #0
 80107b4:	18a3      	adds	r3, r4, r2
 80107b6:	50a7      	str	r7, [r4, r2]
 80107b8:	b107      	cbz	r7, 80107bc <rshift+0x68>
 80107ba:	3304      	adds	r3, #4
 80107bc:	1b1a      	subs	r2, r3, r4
 80107be:	42a3      	cmp	r3, r4
 80107c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80107c4:	bf08      	it	eq
 80107c6:	2300      	moveq	r3, #0
 80107c8:	6102      	str	r2, [r0, #16]
 80107ca:	bf08      	it	eq
 80107cc:	6143      	streq	r3, [r0, #20]
 80107ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107d2:	f8dc c000 	ldr.w	ip, [ip]
 80107d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80107da:	ea4c 0707 	orr.w	r7, ip, r7
 80107de:	f849 7b04 	str.w	r7, [r9], #4
 80107e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80107e6:	40cf      	lsrs	r7, r1
 80107e8:	e7da      	b.n	80107a0 <rshift+0x4c>
 80107ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80107ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80107f2:	e7c3      	b.n	801077c <rshift+0x28>
 80107f4:	4623      	mov	r3, r4
 80107f6:	e7e1      	b.n	80107bc <rshift+0x68>

080107f8 <__hexdig_fun>:
 80107f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80107fc:	2b09      	cmp	r3, #9
 80107fe:	d802      	bhi.n	8010806 <__hexdig_fun+0xe>
 8010800:	3820      	subs	r0, #32
 8010802:	b2c0      	uxtb	r0, r0
 8010804:	4770      	bx	lr
 8010806:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801080a:	2b05      	cmp	r3, #5
 801080c:	d801      	bhi.n	8010812 <__hexdig_fun+0x1a>
 801080e:	3847      	subs	r0, #71	@ 0x47
 8010810:	e7f7      	b.n	8010802 <__hexdig_fun+0xa>
 8010812:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010816:	2b05      	cmp	r3, #5
 8010818:	d801      	bhi.n	801081e <__hexdig_fun+0x26>
 801081a:	3827      	subs	r0, #39	@ 0x27
 801081c:	e7f1      	b.n	8010802 <__hexdig_fun+0xa>
 801081e:	2000      	movs	r0, #0
 8010820:	4770      	bx	lr
	...

08010824 <__gethex>:
 8010824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010828:	b085      	sub	sp, #20
 801082a:	468a      	mov	sl, r1
 801082c:	9302      	str	r3, [sp, #8]
 801082e:	680b      	ldr	r3, [r1, #0]
 8010830:	9001      	str	r0, [sp, #4]
 8010832:	4690      	mov	r8, r2
 8010834:	1c9c      	adds	r4, r3, #2
 8010836:	46a1      	mov	r9, r4
 8010838:	f814 0b01 	ldrb.w	r0, [r4], #1
 801083c:	2830      	cmp	r0, #48	@ 0x30
 801083e:	d0fa      	beq.n	8010836 <__gethex+0x12>
 8010840:	eba9 0303 	sub.w	r3, r9, r3
 8010844:	f1a3 0b02 	sub.w	fp, r3, #2
 8010848:	f7ff ffd6 	bl	80107f8 <__hexdig_fun>
 801084c:	4605      	mov	r5, r0
 801084e:	2800      	cmp	r0, #0
 8010850:	d168      	bne.n	8010924 <__gethex+0x100>
 8010852:	49a0      	ldr	r1, [pc, #640]	@ (8010ad4 <__gethex+0x2b0>)
 8010854:	2201      	movs	r2, #1
 8010856:	4648      	mov	r0, r9
 8010858:	f7ff ff1e 	bl	8010698 <strncmp>
 801085c:	4607      	mov	r7, r0
 801085e:	2800      	cmp	r0, #0
 8010860:	d167      	bne.n	8010932 <__gethex+0x10e>
 8010862:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010866:	4626      	mov	r6, r4
 8010868:	f7ff ffc6 	bl	80107f8 <__hexdig_fun>
 801086c:	2800      	cmp	r0, #0
 801086e:	d062      	beq.n	8010936 <__gethex+0x112>
 8010870:	4623      	mov	r3, r4
 8010872:	7818      	ldrb	r0, [r3, #0]
 8010874:	2830      	cmp	r0, #48	@ 0x30
 8010876:	4699      	mov	r9, r3
 8010878:	f103 0301 	add.w	r3, r3, #1
 801087c:	d0f9      	beq.n	8010872 <__gethex+0x4e>
 801087e:	f7ff ffbb 	bl	80107f8 <__hexdig_fun>
 8010882:	fab0 f580 	clz	r5, r0
 8010886:	096d      	lsrs	r5, r5, #5
 8010888:	f04f 0b01 	mov.w	fp, #1
 801088c:	464a      	mov	r2, r9
 801088e:	4616      	mov	r6, r2
 8010890:	3201      	adds	r2, #1
 8010892:	7830      	ldrb	r0, [r6, #0]
 8010894:	f7ff ffb0 	bl	80107f8 <__hexdig_fun>
 8010898:	2800      	cmp	r0, #0
 801089a:	d1f8      	bne.n	801088e <__gethex+0x6a>
 801089c:	498d      	ldr	r1, [pc, #564]	@ (8010ad4 <__gethex+0x2b0>)
 801089e:	2201      	movs	r2, #1
 80108a0:	4630      	mov	r0, r6
 80108a2:	f7ff fef9 	bl	8010698 <strncmp>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d13f      	bne.n	801092a <__gethex+0x106>
 80108aa:	b944      	cbnz	r4, 80108be <__gethex+0x9a>
 80108ac:	1c74      	adds	r4, r6, #1
 80108ae:	4622      	mov	r2, r4
 80108b0:	4616      	mov	r6, r2
 80108b2:	3201      	adds	r2, #1
 80108b4:	7830      	ldrb	r0, [r6, #0]
 80108b6:	f7ff ff9f 	bl	80107f8 <__hexdig_fun>
 80108ba:	2800      	cmp	r0, #0
 80108bc:	d1f8      	bne.n	80108b0 <__gethex+0x8c>
 80108be:	1ba4      	subs	r4, r4, r6
 80108c0:	00a7      	lsls	r7, r4, #2
 80108c2:	7833      	ldrb	r3, [r6, #0]
 80108c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80108c8:	2b50      	cmp	r3, #80	@ 0x50
 80108ca:	d13e      	bne.n	801094a <__gethex+0x126>
 80108cc:	7873      	ldrb	r3, [r6, #1]
 80108ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80108d0:	d033      	beq.n	801093a <__gethex+0x116>
 80108d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80108d4:	d034      	beq.n	8010940 <__gethex+0x11c>
 80108d6:	1c71      	adds	r1, r6, #1
 80108d8:	2400      	movs	r4, #0
 80108da:	7808      	ldrb	r0, [r1, #0]
 80108dc:	f7ff ff8c 	bl	80107f8 <__hexdig_fun>
 80108e0:	1e43      	subs	r3, r0, #1
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	2b18      	cmp	r3, #24
 80108e6:	d830      	bhi.n	801094a <__gethex+0x126>
 80108e8:	f1a0 0210 	sub.w	r2, r0, #16
 80108ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80108f0:	f7ff ff82 	bl	80107f8 <__hexdig_fun>
 80108f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80108f8:	fa5f fc8c 	uxtb.w	ip, ip
 80108fc:	f1bc 0f18 	cmp.w	ip, #24
 8010900:	f04f 030a 	mov.w	r3, #10
 8010904:	d91e      	bls.n	8010944 <__gethex+0x120>
 8010906:	b104      	cbz	r4, 801090a <__gethex+0xe6>
 8010908:	4252      	negs	r2, r2
 801090a:	4417      	add	r7, r2
 801090c:	f8ca 1000 	str.w	r1, [sl]
 8010910:	b1ed      	cbz	r5, 801094e <__gethex+0x12a>
 8010912:	f1bb 0f00 	cmp.w	fp, #0
 8010916:	bf0c      	ite	eq
 8010918:	2506      	moveq	r5, #6
 801091a:	2500      	movne	r5, #0
 801091c:	4628      	mov	r0, r5
 801091e:	b005      	add	sp, #20
 8010920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010924:	2500      	movs	r5, #0
 8010926:	462c      	mov	r4, r5
 8010928:	e7b0      	b.n	801088c <__gethex+0x68>
 801092a:	2c00      	cmp	r4, #0
 801092c:	d1c7      	bne.n	80108be <__gethex+0x9a>
 801092e:	4627      	mov	r7, r4
 8010930:	e7c7      	b.n	80108c2 <__gethex+0x9e>
 8010932:	464e      	mov	r6, r9
 8010934:	462f      	mov	r7, r5
 8010936:	2501      	movs	r5, #1
 8010938:	e7c3      	b.n	80108c2 <__gethex+0x9e>
 801093a:	2400      	movs	r4, #0
 801093c:	1cb1      	adds	r1, r6, #2
 801093e:	e7cc      	b.n	80108da <__gethex+0xb6>
 8010940:	2401      	movs	r4, #1
 8010942:	e7fb      	b.n	801093c <__gethex+0x118>
 8010944:	fb03 0002 	mla	r0, r3, r2, r0
 8010948:	e7ce      	b.n	80108e8 <__gethex+0xc4>
 801094a:	4631      	mov	r1, r6
 801094c:	e7de      	b.n	801090c <__gethex+0xe8>
 801094e:	eba6 0309 	sub.w	r3, r6, r9
 8010952:	3b01      	subs	r3, #1
 8010954:	4629      	mov	r1, r5
 8010956:	2b07      	cmp	r3, #7
 8010958:	dc0a      	bgt.n	8010970 <__gethex+0x14c>
 801095a:	9801      	ldr	r0, [sp, #4]
 801095c:	f7fe f950 	bl	800ec00 <_Balloc>
 8010960:	4604      	mov	r4, r0
 8010962:	b940      	cbnz	r0, 8010976 <__gethex+0x152>
 8010964:	4b5c      	ldr	r3, [pc, #368]	@ (8010ad8 <__gethex+0x2b4>)
 8010966:	4602      	mov	r2, r0
 8010968:	21e4      	movs	r1, #228	@ 0xe4
 801096a:	485c      	ldr	r0, [pc, #368]	@ (8010adc <__gethex+0x2b8>)
 801096c:	f7ff fec0 	bl	80106f0 <__assert_func>
 8010970:	3101      	adds	r1, #1
 8010972:	105b      	asrs	r3, r3, #1
 8010974:	e7ef      	b.n	8010956 <__gethex+0x132>
 8010976:	f100 0a14 	add.w	sl, r0, #20
 801097a:	2300      	movs	r3, #0
 801097c:	4655      	mov	r5, sl
 801097e:	469b      	mov	fp, r3
 8010980:	45b1      	cmp	r9, r6
 8010982:	d337      	bcc.n	80109f4 <__gethex+0x1d0>
 8010984:	f845 bb04 	str.w	fp, [r5], #4
 8010988:	eba5 050a 	sub.w	r5, r5, sl
 801098c:	10ad      	asrs	r5, r5, #2
 801098e:	6125      	str	r5, [r4, #16]
 8010990:	4658      	mov	r0, fp
 8010992:	f7fe fa27 	bl	800ede4 <__hi0bits>
 8010996:	016d      	lsls	r5, r5, #5
 8010998:	f8d8 6000 	ldr.w	r6, [r8]
 801099c:	1a2d      	subs	r5, r5, r0
 801099e:	42b5      	cmp	r5, r6
 80109a0:	dd54      	ble.n	8010a4c <__gethex+0x228>
 80109a2:	1bad      	subs	r5, r5, r6
 80109a4:	4629      	mov	r1, r5
 80109a6:	4620      	mov	r0, r4
 80109a8:	f7fe fdb3 	bl	800f512 <__any_on>
 80109ac:	4681      	mov	r9, r0
 80109ae:	b178      	cbz	r0, 80109d0 <__gethex+0x1ac>
 80109b0:	1e6b      	subs	r3, r5, #1
 80109b2:	1159      	asrs	r1, r3, #5
 80109b4:	f003 021f 	and.w	r2, r3, #31
 80109b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80109bc:	f04f 0901 	mov.w	r9, #1
 80109c0:	fa09 f202 	lsl.w	r2, r9, r2
 80109c4:	420a      	tst	r2, r1
 80109c6:	d003      	beq.n	80109d0 <__gethex+0x1ac>
 80109c8:	454b      	cmp	r3, r9
 80109ca:	dc36      	bgt.n	8010a3a <__gethex+0x216>
 80109cc:	f04f 0902 	mov.w	r9, #2
 80109d0:	4629      	mov	r1, r5
 80109d2:	4620      	mov	r0, r4
 80109d4:	f7ff febe 	bl	8010754 <rshift>
 80109d8:	442f      	add	r7, r5
 80109da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109de:	42bb      	cmp	r3, r7
 80109e0:	da42      	bge.n	8010a68 <__gethex+0x244>
 80109e2:	9801      	ldr	r0, [sp, #4]
 80109e4:	4621      	mov	r1, r4
 80109e6:	f7fe f94b 	bl	800ec80 <_Bfree>
 80109ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109ec:	2300      	movs	r3, #0
 80109ee:	6013      	str	r3, [r2, #0]
 80109f0:	25a3      	movs	r5, #163	@ 0xa3
 80109f2:	e793      	b.n	801091c <__gethex+0xf8>
 80109f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80109f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80109fa:	d012      	beq.n	8010a22 <__gethex+0x1fe>
 80109fc:	2b20      	cmp	r3, #32
 80109fe:	d104      	bne.n	8010a0a <__gethex+0x1e6>
 8010a00:	f845 bb04 	str.w	fp, [r5], #4
 8010a04:	f04f 0b00 	mov.w	fp, #0
 8010a08:	465b      	mov	r3, fp
 8010a0a:	7830      	ldrb	r0, [r6, #0]
 8010a0c:	9303      	str	r3, [sp, #12]
 8010a0e:	f7ff fef3 	bl	80107f8 <__hexdig_fun>
 8010a12:	9b03      	ldr	r3, [sp, #12]
 8010a14:	f000 000f 	and.w	r0, r0, #15
 8010a18:	4098      	lsls	r0, r3
 8010a1a:	ea4b 0b00 	orr.w	fp, fp, r0
 8010a1e:	3304      	adds	r3, #4
 8010a20:	e7ae      	b.n	8010980 <__gethex+0x15c>
 8010a22:	45b1      	cmp	r9, r6
 8010a24:	d8ea      	bhi.n	80109fc <__gethex+0x1d8>
 8010a26:	492b      	ldr	r1, [pc, #172]	@ (8010ad4 <__gethex+0x2b0>)
 8010a28:	9303      	str	r3, [sp, #12]
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	f7ff fe33 	bl	8010698 <strncmp>
 8010a32:	9b03      	ldr	r3, [sp, #12]
 8010a34:	2800      	cmp	r0, #0
 8010a36:	d1e1      	bne.n	80109fc <__gethex+0x1d8>
 8010a38:	e7a2      	b.n	8010980 <__gethex+0x15c>
 8010a3a:	1ea9      	subs	r1, r5, #2
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f7fe fd68 	bl	800f512 <__any_on>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	d0c2      	beq.n	80109cc <__gethex+0x1a8>
 8010a46:	f04f 0903 	mov.w	r9, #3
 8010a4a:	e7c1      	b.n	80109d0 <__gethex+0x1ac>
 8010a4c:	da09      	bge.n	8010a62 <__gethex+0x23e>
 8010a4e:	1b75      	subs	r5, r6, r5
 8010a50:	4621      	mov	r1, r4
 8010a52:	9801      	ldr	r0, [sp, #4]
 8010a54:	462a      	mov	r2, r5
 8010a56:	f7fe fb23 	bl	800f0a0 <__lshift>
 8010a5a:	1b7f      	subs	r7, r7, r5
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	f100 0a14 	add.w	sl, r0, #20
 8010a62:	f04f 0900 	mov.w	r9, #0
 8010a66:	e7b8      	b.n	80109da <__gethex+0x1b6>
 8010a68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010a6c:	42bd      	cmp	r5, r7
 8010a6e:	dd6f      	ble.n	8010b50 <__gethex+0x32c>
 8010a70:	1bed      	subs	r5, r5, r7
 8010a72:	42ae      	cmp	r6, r5
 8010a74:	dc34      	bgt.n	8010ae0 <__gethex+0x2bc>
 8010a76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a7a:	2b02      	cmp	r3, #2
 8010a7c:	d022      	beq.n	8010ac4 <__gethex+0x2a0>
 8010a7e:	2b03      	cmp	r3, #3
 8010a80:	d024      	beq.n	8010acc <__gethex+0x2a8>
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d115      	bne.n	8010ab2 <__gethex+0x28e>
 8010a86:	42ae      	cmp	r6, r5
 8010a88:	d113      	bne.n	8010ab2 <__gethex+0x28e>
 8010a8a:	2e01      	cmp	r6, #1
 8010a8c:	d10b      	bne.n	8010aa6 <__gethex+0x282>
 8010a8e:	9a02      	ldr	r2, [sp, #8]
 8010a90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a94:	6013      	str	r3, [r2, #0]
 8010a96:	2301      	movs	r3, #1
 8010a98:	6123      	str	r3, [r4, #16]
 8010a9a:	f8ca 3000 	str.w	r3, [sl]
 8010a9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010aa0:	2562      	movs	r5, #98	@ 0x62
 8010aa2:	601c      	str	r4, [r3, #0]
 8010aa4:	e73a      	b.n	801091c <__gethex+0xf8>
 8010aa6:	1e71      	subs	r1, r6, #1
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f7fe fd32 	bl	800f512 <__any_on>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d1ed      	bne.n	8010a8e <__gethex+0x26a>
 8010ab2:	9801      	ldr	r0, [sp, #4]
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	f7fe f8e3 	bl	800ec80 <_Bfree>
 8010aba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010abc:	2300      	movs	r3, #0
 8010abe:	6013      	str	r3, [r2, #0]
 8010ac0:	2550      	movs	r5, #80	@ 0x50
 8010ac2:	e72b      	b.n	801091c <__gethex+0xf8>
 8010ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d1f3      	bne.n	8010ab2 <__gethex+0x28e>
 8010aca:	e7e0      	b.n	8010a8e <__gethex+0x26a>
 8010acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1dd      	bne.n	8010a8e <__gethex+0x26a>
 8010ad2:	e7ee      	b.n	8010ab2 <__gethex+0x28e>
 8010ad4:	0801383f 	.word	0x0801383f
 8010ad8:	080137d5 	.word	0x080137d5
 8010adc:	08013896 	.word	0x08013896
 8010ae0:	1e6f      	subs	r7, r5, #1
 8010ae2:	f1b9 0f00 	cmp.w	r9, #0
 8010ae6:	d130      	bne.n	8010b4a <__gethex+0x326>
 8010ae8:	b127      	cbz	r7, 8010af4 <__gethex+0x2d0>
 8010aea:	4639      	mov	r1, r7
 8010aec:	4620      	mov	r0, r4
 8010aee:	f7fe fd10 	bl	800f512 <__any_on>
 8010af2:	4681      	mov	r9, r0
 8010af4:	117a      	asrs	r2, r7, #5
 8010af6:	2301      	movs	r3, #1
 8010af8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010afc:	f007 071f 	and.w	r7, r7, #31
 8010b00:	40bb      	lsls	r3, r7
 8010b02:	4213      	tst	r3, r2
 8010b04:	4629      	mov	r1, r5
 8010b06:	4620      	mov	r0, r4
 8010b08:	bf18      	it	ne
 8010b0a:	f049 0902 	orrne.w	r9, r9, #2
 8010b0e:	f7ff fe21 	bl	8010754 <rshift>
 8010b12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010b16:	1b76      	subs	r6, r6, r5
 8010b18:	2502      	movs	r5, #2
 8010b1a:	f1b9 0f00 	cmp.w	r9, #0
 8010b1e:	d047      	beq.n	8010bb0 <__gethex+0x38c>
 8010b20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b24:	2b02      	cmp	r3, #2
 8010b26:	d015      	beq.n	8010b54 <__gethex+0x330>
 8010b28:	2b03      	cmp	r3, #3
 8010b2a:	d017      	beq.n	8010b5c <__gethex+0x338>
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d109      	bne.n	8010b44 <__gethex+0x320>
 8010b30:	f019 0f02 	tst.w	r9, #2
 8010b34:	d006      	beq.n	8010b44 <__gethex+0x320>
 8010b36:	f8da 3000 	ldr.w	r3, [sl]
 8010b3a:	ea49 0903 	orr.w	r9, r9, r3
 8010b3e:	f019 0f01 	tst.w	r9, #1
 8010b42:	d10e      	bne.n	8010b62 <__gethex+0x33e>
 8010b44:	f045 0510 	orr.w	r5, r5, #16
 8010b48:	e032      	b.n	8010bb0 <__gethex+0x38c>
 8010b4a:	f04f 0901 	mov.w	r9, #1
 8010b4e:	e7d1      	b.n	8010af4 <__gethex+0x2d0>
 8010b50:	2501      	movs	r5, #1
 8010b52:	e7e2      	b.n	8010b1a <__gethex+0x2f6>
 8010b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b56:	f1c3 0301 	rsb	r3, r3, #1
 8010b5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d0f0      	beq.n	8010b44 <__gethex+0x320>
 8010b62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010b66:	f104 0314 	add.w	r3, r4, #20
 8010b6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010b6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010b72:	f04f 0c00 	mov.w	ip, #0
 8010b76:	4618      	mov	r0, r3
 8010b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010b80:	d01b      	beq.n	8010bba <__gethex+0x396>
 8010b82:	3201      	adds	r2, #1
 8010b84:	6002      	str	r2, [r0, #0]
 8010b86:	2d02      	cmp	r5, #2
 8010b88:	f104 0314 	add.w	r3, r4, #20
 8010b8c:	d13c      	bne.n	8010c08 <__gethex+0x3e4>
 8010b8e:	f8d8 2000 	ldr.w	r2, [r8]
 8010b92:	3a01      	subs	r2, #1
 8010b94:	42b2      	cmp	r2, r6
 8010b96:	d109      	bne.n	8010bac <__gethex+0x388>
 8010b98:	1171      	asrs	r1, r6, #5
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ba0:	f006 061f 	and.w	r6, r6, #31
 8010ba4:	fa02 f606 	lsl.w	r6, r2, r6
 8010ba8:	421e      	tst	r6, r3
 8010baa:	d13a      	bne.n	8010c22 <__gethex+0x3fe>
 8010bac:	f045 0520 	orr.w	r5, r5, #32
 8010bb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bb2:	601c      	str	r4, [r3, #0]
 8010bb4:	9b02      	ldr	r3, [sp, #8]
 8010bb6:	601f      	str	r7, [r3, #0]
 8010bb8:	e6b0      	b.n	801091c <__gethex+0xf8>
 8010bba:	4299      	cmp	r1, r3
 8010bbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8010bc0:	d8d9      	bhi.n	8010b76 <__gethex+0x352>
 8010bc2:	68a3      	ldr	r3, [r4, #8]
 8010bc4:	459b      	cmp	fp, r3
 8010bc6:	db17      	blt.n	8010bf8 <__gethex+0x3d4>
 8010bc8:	6861      	ldr	r1, [r4, #4]
 8010bca:	9801      	ldr	r0, [sp, #4]
 8010bcc:	3101      	adds	r1, #1
 8010bce:	f7fe f817 	bl	800ec00 <_Balloc>
 8010bd2:	4681      	mov	r9, r0
 8010bd4:	b918      	cbnz	r0, 8010bde <__gethex+0x3ba>
 8010bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8010c40 <__gethex+0x41c>)
 8010bd8:	4602      	mov	r2, r0
 8010bda:	2184      	movs	r1, #132	@ 0x84
 8010bdc:	e6c5      	b.n	801096a <__gethex+0x146>
 8010bde:	6922      	ldr	r2, [r4, #16]
 8010be0:	3202      	adds	r2, #2
 8010be2:	f104 010c 	add.w	r1, r4, #12
 8010be6:	0092      	lsls	r2, r2, #2
 8010be8:	300c      	adds	r0, #12
 8010bea:	f7fd f89a 	bl	800dd22 <memcpy>
 8010bee:	4621      	mov	r1, r4
 8010bf0:	9801      	ldr	r0, [sp, #4]
 8010bf2:	f7fe f845 	bl	800ec80 <_Bfree>
 8010bf6:	464c      	mov	r4, r9
 8010bf8:	6923      	ldr	r3, [r4, #16]
 8010bfa:	1c5a      	adds	r2, r3, #1
 8010bfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c00:	6122      	str	r2, [r4, #16]
 8010c02:	2201      	movs	r2, #1
 8010c04:	615a      	str	r2, [r3, #20]
 8010c06:	e7be      	b.n	8010b86 <__gethex+0x362>
 8010c08:	6922      	ldr	r2, [r4, #16]
 8010c0a:	455a      	cmp	r2, fp
 8010c0c:	dd0b      	ble.n	8010c26 <__gethex+0x402>
 8010c0e:	2101      	movs	r1, #1
 8010c10:	4620      	mov	r0, r4
 8010c12:	f7ff fd9f 	bl	8010754 <rshift>
 8010c16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c1a:	3701      	adds	r7, #1
 8010c1c:	42bb      	cmp	r3, r7
 8010c1e:	f6ff aee0 	blt.w	80109e2 <__gethex+0x1be>
 8010c22:	2501      	movs	r5, #1
 8010c24:	e7c2      	b.n	8010bac <__gethex+0x388>
 8010c26:	f016 061f 	ands.w	r6, r6, #31
 8010c2a:	d0fa      	beq.n	8010c22 <__gethex+0x3fe>
 8010c2c:	4453      	add	r3, sl
 8010c2e:	f1c6 0620 	rsb	r6, r6, #32
 8010c32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010c36:	f7fe f8d5 	bl	800ede4 <__hi0bits>
 8010c3a:	42b0      	cmp	r0, r6
 8010c3c:	dbe7      	blt.n	8010c0e <__gethex+0x3ea>
 8010c3e:	e7f0      	b.n	8010c22 <__gethex+0x3fe>
 8010c40:	080137d5 	.word	0x080137d5

08010c44 <L_shift>:
 8010c44:	f1c2 0208 	rsb	r2, r2, #8
 8010c48:	0092      	lsls	r2, r2, #2
 8010c4a:	b570      	push	{r4, r5, r6, lr}
 8010c4c:	f1c2 0620 	rsb	r6, r2, #32
 8010c50:	6843      	ldr	r3, [r0, #4]
 8010c52:	6804      	ldr	r4, [r0, #0]
 8010c54:	fa03 f506 	lsl.w	r5, r3, r6
 8010c58:	432c      	orrs	r4, r5
 8010c5a:	40d3      	lsrs	r3, r2
 8010c5c:	6004      	str	r4, [r0, #0]
 8010c5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c62:	4288      	cmp	r0, r1
 8010c64:	d3f4      	bcc.n	8010c50 <L_shift+0xc>
 8010c66:	bd70      	pop	{r4, r5, r6, pc}

08010c68 <__match>:
 8010c68:	b530      	push	{r4, r5, lr}
 8010c6a:	6803      	ldr	r3, [r0, #0]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c72:	b914      	cbnz	r4, 8010c7a <__match+0x12>
 8010c74:	6003      	str	r3, [r0, #0]
 8010c76:	2001      	movs	r0, #1
 8010c78:	bd30      	pop	{r4, r5, pc}
 8010c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010c82:	2d19      	cmp	r5, #25
 8010c84:	bf98      	it	ls
 8010c86:	3220      	addls	r2, #32
 8010c88:	42a2      	cmp	r2, r4
 8010c8a:	d0f0      	beq.n	8010c6e <__match+0x6>
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	e7f3      	b.n	8010c78 <__match+0x10>

08010c90 <__hexnan>:
 8010c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c94:	680b      	ldr	r3, [r1, #0]
 8010c96:	6801      	ldr	r1, [r0, #0]
 8010c98:	115e      	asrs	r6, r3, #5
 8010c9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010c9e:	f013 031f 	ands.w	r3, r3, #31
 8010ca2:	b087      	sub	sp, #28
 8010ca4:	bf18      	it	ne
 8010ca6:	3604      	addne	r6, #4
 8010ca8:	2500      	movs	r5, #0
 8010caa:	1f37      	subs	r7, r6, #4
 8010cac:	4682      	mov	sl, r0
 8010cae:	4690      	mov	r8, r2
 8010cb0:	9301      	str	r3, [sp, #4]
 8010cb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8010cb6:	46b9      	mov	r9, r7
 8010cb8:	463c      	mov	r4, r7
 8010cba:	9502      	str	r5, [sp, #8]
 8010cbc:	46ab      	mov	fp, r5
 8010cbe:	784a      	ldrb	r2, [r1, #1]
 8010cc0:	1c4b      	adds	r3, r1, #1
 8010cc2:	9303      	str	r3, [sp, #12]
 8010cc4:	b342      	cbz	r2, 8010d18 <__hexnan+0x88>
 8010cc6:	4610      	mov	r0, r2
 8010cc8:	9105      	str	r1, [sp, #20]
 8010cca:	9204      	str	r2, [sp, #16]
 8010ccc:	f7ff fd94 	bl	80107f8 <__hexdig_fun>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d151      	bne.n	8010d78 <__hexnan+0xe8>
 8010cd4:	9a04      	ldr	r2, [sp, #16]
 8010cd6:	9905      	ldr	r1, [sp, #20]
 8010cd8:	2a20      	cmp	r2, #32
 8010cda:	d818      	bhi.n	8010d0e <__hexnan+0x7e>
 8010cdc:	9b02      	ldr	r3, [sp, #8]
 8010cde:	459b      	cmp	fp, r3
 8010ce0:	dd13      	ble.n	8010d0a <__hexnan+0x7a>
 8010ce2:	454c      	cmp	r4, r9
 8010ce4:	d206      	bcs.n	8010cf4 <__hexnan+0x64>
 8010ce6:	2d07      	cmp	r5, #7
 8010ce8:	dc04      	bgt.n	8010cf4 <__hexnan+0x64>
 8010cea:	462a      	mov	r2, r5
 8010cec:	4649      	mov	r1, r9
 8010cee:	4620      	mov	r0, r4
 8010cf0:	f7ff ffa8 	bl	8010c44 <L_shift>
 8010cf4:	4544      	cmp	r4, r8
 8010cf6:	d952      	bls.n	8010d9e <__hexnan+0x10e>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	f1a4 0904 	sub.w	r9, r4, #4
 8010cfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d02:	f8cd b008 	str.w	fp, [sp, #8]
 8010d06:	464c      	mov	r4, r9
 8010d08:	461d      	mov	r5, r3
 8010d0a:	9903      	ldr	r1, [sp, #12]
 8010d0c:	e7d7      	b.n	8010cbe <__hexnan+0x2e>
 8010d0e:	2a29      	cmp	r2, #41	@ 0x29
 8010d10:	d157      	bne.n	8010dc2 <__hexnan+0x132>
 8010d12:	3102      	adds	r1, #2
 8010d14:	f8ca 1000 	str.w	r1, [sl]
 8010d18:	f1bb 0f00 	cmp.w	fp, #0
 8010d1c:	d051      	beq.n	8010dc2 <__hexnan+0x132>
 8010d1e:	454c      	cmp	r4, r9
 8010d20:	d206      	bcs.n	8010d30 <__hexnan+0xa0>
 8010d22:	2d07      	cmp	r5, #7
 8010d24:	dc04      	bgt.n	8010d30 <__hexnan+0xa0>
 8010d26:	462a      	mov	r2, r5
 8010d28:	4649      	mov	r1, r9
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f7ff ff8a 	bl	8010c44 <L_shift>
 8010d30:	4544      	cmp	r4, r8
 8010d32:	d936      	bls.n	8010da2 <__hexnan+0x112>
 8010d34:	f1a8 0204 	sub.w	r2, r8, #4
 8010d38:	4623      	mov	r3, r4
 8010d3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8010d3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010d42:	429f      	cmp	r7, r3
 8010d44:	d2f9      	bcs.n	8010d3a <__hexnan+0xaa>
 8010d46:	1b3b      	subs	r3, r7, r4
 8010d48:	f023 0303 	bic.w	r3, r3, #3
 8010d4c:	3304      	adds	r3, #4
 8010d4e:	3401      	adds	r4, #1
 8010d50:	3e03      	subs	r6, #3
 8010d52:	42b4      	cmp	r4, r6
 8010d54:	bf88      	it	hi
 8010d56:	2304      	movhi	r3, #4
 8010d58:	4443      	add	r3, r8
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f843 2b04 	str.w	r2, [r3], #4
 8010d60:	429f      	cmp	r7, r3
 8010d62:	d2fb      	bcs.n	8010d5c <__hexnan+0xcc>
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	b91b      	cbnz	r3, 8010d70 <__hexnan+0xe0>
 8010d68:	4547      	cmp	r7, r8
 8010d6a:	d128      	bne.n	8010dbe <__hexnan+0x12e>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	603b      	str	r3, [r7, #0]
 8010d70:	2005      	movs	r0, #5
 8010d72:	b007      	add	sp, #28
 8010d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d78:	3501      	adds	r5, #1
 8010d7a:	2d08      	cmp	r5, #8
 8010d7c:	f10b 0b01 	add.w	fp, fp, #1
 8010d80:	dd06      	ble.n	8010d90 <__hexnan+0x100>
 8010d82:	4544      	cmp	r4, r8
 8010d84:	d9c1      	bls.n	8010d0a <__hexnan+0x7a>
 8010d86:	2300      	movs	r3, #0
 8010d88:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d8c:	2501      	movs	r5, #1
 8010d8e:	3c04      	subs	r4, #4
 8010d90:	6822      	ldr	r2, [r4, #0]
 8010d92:	f000 000f 	and.w	r0, r0, #15
 8010d96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010d9a:	6020      	str	r0, [r4, #0]
 8010d9c:	e7b5      	b.n	8010d0a <__hexnan+0x7a>
 8010d9e:	2508      	movs	r5, #8
 8010da0:	e7b3      	b.n	8010d0a <__hexnan+0x7a>
 8010da2:	9b01      	ldr	r3, [sp, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d0dd      	beq.n	8010d64 <__hexnan+0xd4>
 8010da8:	f1c3 0320 	rsb	r3, r3, #32
 8010dac:	f04f 32ff 	mov.w	r2, #4294967295
 8010db0:	40da      	lsrs	r2, r3
 8010db2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010db6:	4013      	ands	r3, r2
 8010db8:	f846 3c04 	str.w	r3, [r6, #-4]
 8010dbc:	e7d2      	b.n	8010d64 <__hexnan+0xd4>
 8010dbe:	3f04      	subs	r7, #4
 8010dc0:	e7d0      	b.n	8010d64 <__hexnan+0xd4>
 8010dc2:	2004      	movs	r0, #4
 8010dc4:	e7d5      	b.n	8010d72 <__hexnan+0xe2>

08010dc6 <__ascii_mbtowc>:
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	b901      	cbnz	r1, 8010dcc <__ascii_mbtowc+0x6>
 8010dca:	a901      	add	r1, sp, #4
 8010dcc:	b142      	cbz	r2, 8010de0 <__ascii_mbtowc+0x1a>
 8010dce:	b14b      	cbz	r3, 8010de4 <__ascii_mbtowc+0x1e>
 8010dd0:	7813      	ldrb	r3, [r2, #0]
 8010dd2:	600b      	str	r3, [r1, #0]
 8010dd4:	7812      	ldrb	r2, [r2, #0]
 8010dd6:	1e10      	subs	r0, r2, #0
 8010dd8:	bf18      	it	ne
 8010dda:	2001      	movne	r0, #1
 8010ddc:	b002      	add	sp, #8
 8010dde:	4770      	bx	lr
 8010de0:	4610      	mov	r0, r2
 8010de2:	e7fb      	b.n	8010ddc <__ascii_mbtowc+0x16>
 8010de4:	f06f 0001 	mvn.w	r0, #1
 8010de8:	e7f8      	b.n	8010ddc <__ascii_mbtowc+0x16>

08010dea <_realloc_r>:
 8010dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dee:	4607      	mov	r7, r0
 8010df0:	4614      	mov	r4, r2
 8010df2:	460d      	mov	r5, r1
 8010df4:	b921      	cbnz	r1, 8010e00 <_realloc_r+0x16>
 8010df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dfa:	4611      	mov	r1, r2
 8010dfc:	f7fd be74 	b.w	800eae8 <_malloc_r>
 8010e00:	b92a      	cbnz	r2, 8010e0e <_realloc_r+0x24>
 8010e02:	f7fd fdfd 	bl	800ea00 <_free_r>
 8010e06:	4625      	mov	r5, r4
 8010e08:	4628      	mov	r0, r5
 8010e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e0e:	f000 f840 	bl	8010e92 <_malloc_usable_size_r>
 8010e12:	4284      	cmp	r4, r0
 8010e14:	4606      	mov	r6, r0
 8010e16:	d802      	bhi.n	8010e1e <_realloc_r+0x34>
 8010e18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010e1c:	d8f4      	bhi.n	8010e08 <_realloc_r+0x1e>
 8010e1e:	4621      	mov	r1, r4
 8010e20:	4638      	mov	r0, r7
 8010e22:	f7fd fe61 	bl	800eae8 <_malloc_r>
 8010e26:	4680      	mov	r8, r0
 8010e28:	b908      	cbnz	r0, 8010e2e <_realloc_r+0x44>
 8010e2a:	4645      	mov	r5, r8
 8010e2c:	e7ec      	b.n	8010e08 <_realloc_r+0x1e>
 8010e2e:	42b4      	cmp	r4, r6
 8010e30:	4622      	mov	r2, r4
 8010e32:	4629      	mov	r1, r5
 8010e34:	bf28      	it	cs
 8010e36:	4632      	movcs	r2, r6
 8010e38:	f7fc ff73 	bl	800dd22 <memcpy>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4638      	mov	r0, r7
 8010e40:	f7fd fdde 	bl	800ea00 <_free_r>
 8010e44:	e7f1      	b.n	8010e2a <_realloc_r+0x40>

08010e46 <__ascii_wctomb>:
 8010e46:	4603      	mov	r3, r0
 8010e48:	4608      	mov	r0, r1
 8010e4a:	b141      	cbz	r1, 8010e5e <__ascii_wctomb+0x18>
 8010e4c:	2aff      	cmp	r2, #255	@ 0xff
 8010e4e:	d904      	bls.n	8010e5a <__ascii_wctomb+0x14>
 8010e50:	228a      	movs	r2, #138	@ 0x8a
 8010e52:	601a      	str	r2, [r3, #0]
 8010e54:	f04f 30ff 	mov.w	r0, #4294967295
 8010e58:	4770      	bx	lr
 8010e5a:	700a      	strb	r2, [r1, #0]
 8010e5c:	2001      	movs	r0, #1
 8010e5e:	4770      	bx	lr

08010e60 <fiprintf>:
 8010e60:	b40e      	push	{r1, r2, r3}
 8010e62:	b503      	push	{r0, r1, lr}
 8010e64:	4601      	mov	r1, r0
 8010e66:	ab03      	add	r3, sp, #12
 8010e68:	4805      	ldr	r0, [pc, #20]	@ (8010e80 <fiprintf+0x20>)
 8010e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e6e:	6800      	ldr	r0, [r0, #0]
 8010e70:	9301      	str	r3, [sp, #4]
 8010e72:	f000 f83f 	bl	8010ef4 <_vfiprintf_r>
 8010e76:	b002      	add	sp, #8
 8010e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e7c:	b003      	add	sp, #12
 8010e7e:	4770      	bx	lr
 8010e80:	20000038 	.word	0x20000038

08010e84 <abort>:
 8010e84:	b508      	push	{r3, lr}
 8010e86:	2006      	movs	r0, #6
 8010e88:	f000 fa08 	bl	801129c <raise>
 8010e8c:	2001      	movs	r0, #1
 8010e8e:	f7f6 ffdc 	bl	8007e4a <_exit>

08010e92 <_malloc_usable_size_r>:
 8010e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e96:	1f18      	subs	r0, r3, #4
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	bfbc      	itt	lt
 8010e9c:	580b      	ldrlt	r3, [r1, r0]
 8010e9e:	18c0      	addlt	r0, r0, r3
 8010ea0:	4770      	bx	lr

08010ea2 <__sfputc_r>:
 8010ea2:	6893      	ldr	r3, [r2, #8]
 8010ea4:	3b01      	subs	r3, #1
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	b410      	push	{r4}
 8010eaa:	6093      	str	r3, [r2, #8]
 8010eac:	da08      	bge.n	8010ec0 <__sfputc_r+0x1e>
 8010eae:	6994      	ldr	r4, [r2, #24]
 8010eb0:	42a3      	cmp	r3, r4
 8010eb2:	db01      	blt.n	8010eb8 <__sfputc_r+0x16>
 8010eb4:	290a      	cmp	r1, #10
 8010eb6:	d103      	bne.n	8010ec0 <__sfputc_r+0x1e>
 8010eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ebc:	f000 b932 	b.w	8011124 <__swbuf_r>
 8010ec0:	6813      	ldr	r3, [r2, #0]
 8010ec2:	1c58      	adds	r0, r3, #1
 8010ec4:	6010      	str	r0, [r2, #0]
 8010ec6:	7019      	strb	r1, [r3, #0]
 8010ec8:	4608      	mov	r0, r1
 8010eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ece:	4770      	bx	lr

08010ed0 <__sfputs_r>:
 8010ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	460f      	mov	r7, r1
 8010ed6:	4614      	mov	r4, r2
 8010ed8:	18d5      	adds	r5, r2, r3
 8010eda:	42ac      	cmp	r4, r5
 8010edc:	d101      	bne.n	8010ee2 <__sfputs_r+0x12>
 8010ede:	2000      	movs	r0, #0
 8010ee0:	e007      	b.n	8010ef2 <__sfputs_r+0x22>
 8010ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ee6:	463a      	mov	r2, r7
 8010ee8:	4630      	mov	r0, r6
 8010eea:	f7ff ffda 	bl	8010ea2 <__sfputc_r>
 8010eee:	1c43      	adds	r3, r0, #1
 8010ef0:	d1f3      	bne.n	8010eda <__sfputs_r+0xa>
 8010ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ef4 <_vfiprintf_r>:
 8010ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef8:	460d      	mov	r5, r1
 8010efa:	b09d      	sub	sp, #116	@ 0x74
 8010efc:	4614      	mov	r4, r2
 8010efe:	4698      	mov	r8, r3
 8010f00:	4606      	mov	r6, r0
 8010f02:	b118      	cbz	r0, 8010f0c <_vfiprintf_r+0x18>
 8010f04:	6a03      	ldr	r3, [r0, #32]
 8010f06:	b90b      	cbnz	r3, 8010f0c <_vfiprintf_r+0x18>
 8010f08:	f7fc fd7e 	bl	800da08 <__sinit>
 8010f0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f0e:	07d9      	lsls	r1, r3, #31
 8010f10:	d405      	bmi.n	8010f1e <_vfiprintf_r+0x2a>
 8010f12:	89ab      	ldrh	r3, [r5, #12]
 8010f14:	059a      	lsls	r2, r3, #22
 8010f16:	d402      	bmi.n	8010f1e <_vfiprintf_r+0x2a>
 8010f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f1a:	f7fc ff00 	bl	800dd1e <__retarget_lock_acquire_recursive>
 8010f1e:	89ab      	ldrh	r3, [r5, #12]
 8010f20:	071b      	lsls	r3, r3, #28
 8010f22:	d501      	bpl.n	8010f28 <_vfiprintf_r+0x34>
 8010f24:	692b      	ldr	r3, [r5, #16]
 8010f26:	b99b      	cbnz	r3, 8010f50 <_vfiprintf_r+0x5c>
 8010f28:	4629      	mov	r1, r5
 8010f2a:	4630      	mov	r0, r6
 8010f2c:	f000 f938 	bl	80111a0 <__swsetup_r>
 8010f30:	b170      	cbz	r0, 8010f50 <_vfiprintf_r+0x5c>
 8010f32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f34:	07dc      	lsls	r4, r3, #31
 8010f36:	d504      	bpl.n	8010f42 <_vfiprintf_r+0x4e>
 8010f38:	f04f 30ff 	mov.w	r0, #4294967295
 8010f3c:	b01d      	add	sp, #116	@ 0x74
 8010f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f42:	89ab      	ldrh	r3, [r5, #12]
 8010f44:	0598      	lsls	r0, r3, #22
 8010f46:	d4f7      	bmi.n	8010f38 <_vfiprintf_r+0x44>
 8010f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f4a:	f7fc fee9 	bl	800dd20 <__retarget_lock_release_recursive>
 8010f4e:	e7f3      	b.n	8010f38 <_vfiprintf_r+0x44>
 8010f50:	2300      	movs	r3, #0
 8010f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f54:	2320      	movs	r3, #32
 8010f56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f5e:	2330      	movs	r3, #48	@ 0x30
 8010f60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011110 <_vfiprintf_r+0x21c>
 8010f64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f68:	f04f 0901 	mov.w	r9, #1
 8010f6c:	4623      	mov	r3, r4
 8010f6e:	469a      	mov	sl, r3
 8010f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f74:	b10a      	cbz	r2, 8010f7a <_vfiprintf_r+0x86>
 8010f76:	2a25      	cmp	r2, #37	@ 0x25
 8010f78:	d1f9      	bne.n	8010f6e <_vfiprintf_r+0x7a>
 8010f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8010f7e:	d00b      	beq.n	8010f98 <_vfiprintf_r+0xa4>
 8010f80:	465b      	mov	r3, fp
 8010f82:	4622      	mov	r2, r4
 8010f84:	4629      	mov	r1, r5
 8010f86:	4630      	mov	r0, r6
 8010f88:	f7ff ffa2 	bl	8010ed0 <__sfputs_r>
 8010f8c:	3001      	adds	r0, #1
 8010f8e:	f000 80a7 	beq.w	80110e0 <_vfiprintf_r+0x1ec>
 8010f92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f94:	445a      	add	r2, fp
 8010f96:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f98:	f89a 3000 	ldrb.w	r3, [sl]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f000 809f 	beq.w	80110e0 <_vfiprintf_r+0x1ec>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8010fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fac:	f10a 0a01 	add.w	sl, sl, #1
 8010fb0:	9304      	str	r3, [sp, #16]
 8010fb2:	9307      	str	r3, [sp, #28]
 8010fb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010fb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8010fba:	4654      	mov	r4, sl
 8010fbc:	2205      	movs	r2, #5
 8010fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc2:	4853      	ldr	r0, [pc, #332]	@ (8011110 <_vfiprintf_r+0x21c>)
 8010fc4:	f7ef f924 	bl	8000210 <memchr>
 8010fc8:	9a04      	ldr	r2, [sp, #16]
 8010fca:	b9d8      	cbnz	r0, 8011004 <_vfiprintf_r+0x110>
 8010fcc:	06d1      	lsls	r1, r2, #27
 8010fce:	bf44      	itt	mi
 8010fd0:	2320      	movmi	r3, #32
 8010fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fd6:	0713      	lsls	r3, r2, #28
 8010fd8:	bf44      	itt	mi
 8010fda:	232b      	movmi	r3, #43	@ 0x2b
 8010fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8010fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fe6:	d015      	beq.n	8011014 <_vfiprintf_r+0x120>
 8010fe8:	9a07      	ldr	r2, [sp, #28]
 8010fea:	4654      	mov	r4, sl
 8010fec:	2000      	movs	r0, #0
 8010fee:	f04f 0c0a 	mov.w	ip, #10
 8010ff2:	4621      	mov	r1, r4
 8010ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ff8:	3b30      	subs	r3, #48	@ 0x30
 8010ffa:	2b09      	cmp	r3, #9
 8010ffc:	d94b      	bls.n	8011096 <_vfiprintf_r+0x1a2>
 8010ffe:	b1b0      	cbz	r0, 801102e <_vfiprintf_r+0x13a>
 8011000:	9207      	str	r2, [sp, #28]
 8011002:	e014      	b.n	801102e <_vfiprintf_r+0x13a>
 8011004:	eba0 0308 	sub.w	r3, r0, r8
 8011008:	fa09 f303 	lsl.w	r3, r9, r3
 801100c:	4313      	orrs	r3, r2
 801100e:	9304      	str	r3, [sp, #16]
 8011010:	46a2      	mov	sl, r4
 8011012:	e7d2      	b.n	8010fba <_vfiprintf_r+0xc6>
 8011014:	9b03      	ldr	r3, [sp, #12]
 8011016:	1d19      	adds	r1, r3, #4
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	9103      	str	r1, [sp, #12]
 801101c:	2b00      	cmp	r3, #0
 801101e:	bfbb      	ittet	lt
 8011020:	425b      	neglt	r3, r3
 8011022:	f042 0202 	orrlt.w	r2, r2, #2
 8011026:	9307      	strge	r3, [sp, #28]
 8011028:	9307      	strlt	r3, [sp, #28]
 801102a:	bfb8      	it	lt
 801102c:	9204      	strlt	r2, [sp, #16]
 801102e:	7823      	ldrb	r3, [r4, #0]
 8011030:	2b2e      	cmp	r3, #46	@ 0x2e
 8011032:	d10a      	bne.n	801104a <_vfiprintf_r+0x156>
 8011034:	7863      	ldrb	r3, [r4, #1]
 8011036:	2b2a      	cmp	r3, #42	@ 0x2a
 8011038:	d132      	bne.n	80110a0 <_vfiprintf_r+0x1ac>
 801103a:	9b03      	ldr	r3, [sp, #12]
 801103c:	1d1a      	adds	r2, r3, #4
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	9203      	str	r2, [sp, #12]
 8011042:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011046:	3402      	adds	r4, #2
 8011048:	9305      	str	r3, [sp, #20]
 801104a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011120 <_vfiprintf_r+0x22c>
 801104e:	7821      	ldrb	r1, [r4, #0]
 8011050:	2203      	movs	r2, #3
 8011052:	4650      	mov	r0, sl
 8011054:	f7ef f8dc 	bl	8000210 <memchr>
 8011058:	b138      	cbz	r0, 801106a <_vfiprintf_r+0x176>
 801105a:	9b04      	ldr	r3, [sp, #16]
 801105c:	eba0 000a 	sub.w	r0, r0, sl
 8011060:	2240      	movs	r2, #64	@ 0x40
 8011062:	4082      	lsls	r2, r0
 8011064:	4313      	orrs	r3, r2
 8011066:	3401      	adds	r4, #1
 8011068:	9304      	str	r3, [sp, #16]
 801106a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801106e:	4829      	ldr	r0, [pc, #164]	@ (8011114 <_vfiprintf_r+0x220>)
 8011070:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011074:	2206      	movs	r2, #6
 8011076:	f7ef f8cb 	bl	8000210 <memchr>
 801107a:	2800      	cmp	r0, #0
 801107c:	d03f      	beq.n	80110fe <_vfiprintf_r+0x20a>
 801107e:	4b26      	ldr	r3, [pc, #152]	@ (8011118 <_vfiprintf_r+0x224>)
 8011080:	bb1b      	cbnz	r3, 80110ca <_vfiprintf_r+0x1d6>
 8011082:	9b03      	ldr	r3, [sp, #12]
 8011084:	3307      	adds	r3, #7
 8011086:	f023 0307 	bic.w	r3, r3, #7
 801108a:	3308      	adds	r3, #8
 801108c:	9303      	str	r3, [sp, #12]
 801108e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011090:	443b      	add	r3, r7
 8011092:	9309      	str	r3, [sp, #36]	@ 0x24
 8011094:	e76a      	b.n	8010f6c <_vfiprintf_r+0x78>
 8011096:	fb0c 3202 	mla	r2, ip, r2, r3
 801109a:	460c      	mov	r4, r1
 801109c:	2001      	movs	r0, #1
 801109e:	e7a8      	b.n	8010ff2 <_vfiprintf_r+0xfe>
 80110a0:	2300      	movs	r3, #0
 80110a2:	3401      	adds	r4, #1
 80110a4:	9305      	str	r3, [sp, #20]
 80110a6:	4619      	mov	r1, r3
 80110a8:	f04f 0c0a 	mov.w	ip, #10
 80110ac:	4620      	mov	r0, r4
 80110ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110b2:	3a30      	subs	r2, #48	@ 0x30
 80110b4:	2a09      	cmp	r2, #9
 80110b6:	d903      	bls.n	80110c0 <_vfiprintf_r+0x1cc>
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d0c6      	beq.n	801104a <_vfiprintf_r+0x156>
 80110bc:	9105      	str	r1, [sp, #20]
 80110be:	e7c4      	b.n	801104a <_vfiprintf_r+0x156>
 80110c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80110c4:	4604      	mov	r4, r0
 80110c6:	2301      	movs	r3, #1
 80110c8:	e7f0      	b.n	80110ac <_vfiprintf_r+0x1b8>
 80110ca:	ab03      	add	r3, sp, #12
 80110cc:	9300      	str	r3, [sp, #0]
 80110ce:	462a      	mov	r2, r5
 80110d0:	4b12      	ldr	r3, [pc, #72]	@ (801111c <_vfiprintf_r+0x228>)
 80110d2:	a904      	add	r1, sp, #16
 80110d4:	4630      	mov	r0, r6
 80110d6:	f7fb fe47 	bl	800cd68 <_printf_float>
 80110da:	4607      	mov	r7, r0
 80110dc:	1c78      	adds	r0, r7, #1
 80110de:	d1d6      	bne.n	801108e <_vfiprintf_r+0x19a>
 80110e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110e2:	07d9      	lsls	r1, r3, #31
 80110e4:	d405      	bmi.n	80110f2 <_vfiprintf_r+0x1fe>
 80110e6:	89ab      	ldrh	r3, [r5, #12]
 80110e8:	059a      	lsls	r2, r3, #22
 80110ea:	d402      	bmi.n	80110f2 <_vfiprintf_r+0x1fe>
 80110ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110ee:	f7fc fe17 	bl	800dd20 <__retarget_lock_release_recursive>
 80110f2:	89ab      	ldrh	r3, [r5, #12]
 80110f4:	065b      	lsls	r3, r3, #25
 80110f6:	f53f af1f 	bmi.w	8010f38 <_vfiprintf_r+0x44>
 80110fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80110fc:	e71e      	b.n	8010f3c <_vfiprintf_r+0x48>
 80110fe:	ab03      	add	r3, sp, #12
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	462a      	mov	r2, r5
 8011104:	4b05      	ldr	r3, [pc, #20]	@ (801111c <_vfiprintf_r+0x228>)
 8011106:	a904      	add	r1, sp, #16
 8011108:	4630      	mov	r0, r6
 801110a:	f7fc f8c5 	bl	800d298 <_printf_i>
 801110e:	e7e4      	b.n	80110da <_vfiprintf_r+0x1e6>
 8011110:	08013841 	.word	0x08013841
 8011114:	0801384b 	.word	0x0801384b
 8011118:	0800cd69 	.word	0x0800cd69
 801111c:	08010ed1 	.word	0x08010ed1
 8011120:	08013847 	.word	0x08013847

08011124 <__swbuf_r>:
 8011124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011126:	460e      	mov	r6, r1
 8011128:	4614      	mov	r4, r2
 801112a:	4605      	mov	r5, r0
 801112c:	b118      	cbz	r0, 8011136 <__swbuf_r+0x12>
 801112e:	6a03      	ldr	r3, [r0, #32]
 8011130:	b90b      	cbnz	r3, 8011136 <__swbuf_r+0x12>
 8011132:	f7fc fc69 	bl	800da08 <__sinit>
 8011136:	69a3      	ldr	r3, [r4, #24]
 8011138:	60a3      	str	r3, [r4, #8]
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	071a      	lsls	r2, r3, #28
 801113e:	d501      	bpl.n	8011144 <__swbuf_r+0x20>
 8011140:	6923      	ldr	r3, [r4, #16]
 8011142:	b943      	cbnz	r3, 8011156 <__swbuf_r+0x32>
 8011144:	4621      	mov	r1, r4
 8011146:	4628      	mov	r0, r5
 8011148:	f000 f82a 	bl	80111a0 <__swsetup_r>
 801114c:	b118      	cbz	r0, 8011156 <__swbuf_r+0x32>
 801114e:	f04f 37ff 	mov.w	r7, #4294967295
 8011152:	4638      	mov	r0, r7
 8011154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	6922      	ldr	r2, [r4, #16]
 801115a:	1a98      	subs	r0, r3, r2
 801115c:	6963      	ldr	r3, [r4, #20]
 801115e:	b2f6      	uxtb	r6, r6
 8011160:	4283      	cmp	r3, r0
 8011162:	4637      	mov	r7, r6
 8011164:	dc05      	bgt.n	8011172 <__swbuf_r+0x4e>
 8011166:	4621      	mov	r1, r4
 8011168:	4628      	mov	r0, r5
 801116a:	f7ff fa53 	bl	8010614 <_fflush_r>
 801116e:	2800      	cmp	r0, #0
 8011170:	d1ed      	bne.n	801114e <__swbuf_r+0x2a>
 8011172:	68a3      	ldr	r3, [r4, #8]
 8011174:	3b01      	subs	r3, #1
 8011176:	60a3      	str	r3, [r4, #8]
 8011178:	6823      	ldr	r3, [r4, #0]
 801117a:	1c5a      	adds	r2, r3, #1
 801117c:	6022      	str	r2, [r4, #0]
 801117e:	701e      	strb	r6, [r3, #0]
 8011180:	6962      	ldr	r2, [r4, #20]
 8011182:	1c43      	adds	r3, r0, #1
 8011184:	429a      	cmp	r2, r3
 8011186:	d004      	beq.n	8011192 <__swbuf_r+0x6e>
 8011188:	89a3      	ldrh	r3, [r4, #12]
 801118a:	07db      	lsls	r3, r3, #31
 801118c:	d5e1      	bpl.n	8011152 <__swbuf_r+0x2e>
 801118e:	2e0a      	cmp	r6, #10
 8011190:	d1df      	bne.n	8011152 <__swbuf_r+0x2e>
 8011192:	4621      	mov	r1, r4
 8011194:	4628      	mov	r0, r5
 8011196:	f7ff fa3d 	bl	8010614 <_fflush_r>
 801119a:	2800      	cmp	r0, #0
 801119c:	d0d9      	beq.n	8011152 <__swbuf_r+0x2e>
 801119e:	e7d6      	b.n	801114e <__swbuf_r+0x2a>

080111a0 <__swsetup_r>:
 80111a0:	b538      	push	{r3, r4, r5, lr}
 80111a2:	4b29      	ldr	r3, [pc, #164]	@ (8011248 <__swsetup_r+0xa8>)
 80111a4:	4605      	mov	r5, r0
 80111a6:	6818      	ldr	r0, [r3, #0]
 80111a8:	460c      	mov	r4, r1
 80111aa:	b118      	cbz	r0, 80111b4 <__swsetup_r+0x14>
 80111ac:	6a03      	ldr	r3, [r0, #32]
 80111ae:	b90b      	cbnz	r3, 80111b4 <__swsetup_r+0x14>
 80111b0:	f7fc fc2a 	bl	800da08 <__sinit>
 80111b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111b8:	0719      	lsls	r1, r3, #28
 80111ba:	d422      	bmi.n	8011202 <__swsetup_r+0x62>
 80111bc:	06da      	lsls	r2, r3, #27
 80111be:	d407      	bmi.n	80111d0 <__swsetup_r+0x30>
 80111c0:	2209      	movs	r2, #9
 80111c2:	602a      	str	r2, [r5, #0]
 80111c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111c8:	81a3      	strh	r3, [r4, #12]
 80111ca:	f04f 30ff 	mov.w	r0, #4294967295
 80111ce:	e033      	b.n	8011238 <__swsetup_r+0x98>
 80111d0:	0758      	lsls	r0, r3, #29
 80111d2:	d512      	bpl.n	80111fa <__swsetup_r+0x5a>
 80111d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80111d6:	b141      	cbz	r1, 80111ea <__swsetup_r+0x4a>
 80111d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80111dc:	4299      	cmp	r1, r3
 80111de:	d002      	beq.n	80111e6 <__swsetup_r+0x46>
 80111e0:	4628      	mov	r0, r5
 80111e2:	f7fd fc0d 	bl	800ea00 <_free_r>
 80111e6:	2300      	movs	r3, #0
 80111e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80111ea:	89a3      	ldrh	r3, [r4, #12]
 80111ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80111f0:	81a3      	strh	r3, [r4, #12]
 80111f2:	2300      	movs	r3, #0
 80111f4:	6063      	str	r3, [r4, #4]
 80111f6:	6923      	ldr	r3, [r4, #16]
 80111f8:	6023      	str	r3, [r4, #0]
 80111fa:	89a3      	ldrh	r3, [r4, #12]
 80111fc:	f043 0308 	orr.w	r3, r3, #8
 8011200:	81a3      	strh	r3, [r4, #12]
 8011202:	6923      	ldr	r3, [r4, #16]
 8011204:	b94b      	cbnz	r3, 801121a <__swsetup_r+0x7a>
 8011206:	89a3      	ldrh	r3, [r4, #12]
 8011208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801120c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011210:	d003      	beq.n	801121a <__swsetup_r+0x7a>
 8011212:	4621      	mov	r1, r4
 8011214:	4628      	mov	r0, r5
 8011216:	f000 f883 	bl	8011320 <__smakebuf_r>
 801121a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801121e:	f013 0201 	ands.w	r2, r3, #1
 8011222:	d00a      	beq.n	801123a <__swsetup_r+0x9a>
 8011224:	2200      	movs	r2, #0
 8011226:	60a2      	str	r2, [r4, #8]
 8011228:	6962      	ldr	r2, [r4, #20]
 801122a:	4252      	negs	r2, r2
 801122c:	61a2      	str	r2, [r4, #24]
 801122e:	6922      	ldr	r2, [r4, #16]
 8011230:	b942      	cbnz	r2, 8011244 <__swsetup_r+0xa4>
 8011232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011236:	d1c5      	bne.n	80111c4 <__swsetup_r+0x24>
 8011238:	bd38      	pop	{r3, r4, r5, pc}
 801123a:	0799      	lsls	r1, r3, #30
 801123c:	bf58      	it	pl
 801123e:	6962      	ldrpl	r2, [r4, #20]
 8011240:	60a2      	str	r2, [r4, #8]
 8011242:	e7f4      	b.n	801122e <__swsetup_r+0x8e>
 8011244:	2000      	movs	r0, #0
 8011246:	e7f7      	b.n	8011238 <__swsetup_r+0x98>
 8011248:	20000038 	.word	0x20000038

0801124c <_raise_r>:
 801124c:	291f      	cmp	r1, #31
 801124e:	b538      	push	{r3, r4, r5, lr}
 8011250:	4605      	mov	r5, r0
 8011252:	460c      	mov	r4, r1
 8011254:	d904      	bls.n	8011260 <_raise_r+0x14>
 8011256:	2316      	movs	r3, #22
 8011258:	6003      	str	r3, [r0, #0]
 801125a:	f04f 30ff 	mov.w	r0, #4294967295
 801125e:	bd38      	pop	{r3, r4, r5, pc}
 8011260:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011262:	b112      	cbz	r2, 801126a <_raise_r+0x1e>
 8011264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011268:	b94b      	cbnz	r3, 801127e <_raise_r+0x32>
 801126a:	4628      	mov	r0, r5
 801126c:	f000 f830 	bl	80112d0 <_getpid_r>
 8011270:	4622      	mov	r2, r4
 8011272:	4601      	mov	r1, r0
 8011274:	4628      	mov	r0, r5
 8011276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801127a:	f000 b817 	b.w	80112ac <_kill_r>
 801127e:	2b01      	cmp	r3, #1
 8011280:	d00a      	beq.n	8011298 <_raise_r+0x4c>
 8011282:	1c59      	adds	r1, r3, #1
 8011284:	d103      	bne.n	801128e <_raise_r+0x42>
 8011286:	2316      	movs	r3, #22
 8011288:	6003      	str	r3, [r0, #0]
 801128a:	2001      	movs	r0, #1
 801128c:	e7e7      	b.n	801125e <_raise_r+0x12>
 801128e:	2100      	movs	r1, #0
 8011290:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011294:	4620      	mov	r0, r4
 8011296:	4798      	blx	r3
 8011298:	2000      	movs	r0, #0
 801129a:	e7e0      	b.n	801125e <_raise_r+0x12>

0801129c <raise>:
 801129c:	4b02      	ldr	r3, [pc, #8]	@ (80112a8 <raise+0xc>)
 801129e:	4601      	mov	r1, r0
 80112a0:	6818      	ldr	r0, [r3, #0]
 80112a2:	f7ff bfd3 	b.w	801124c <_raise_r>
 80112a6:	bf00      	nop
 80112a8:	20000038 	.word	0x20000038

080112ac <_kill_r>:
 80112ac:	b538      	push	{r3, r4, r5, lr}
 80112ae:	4d07      	ldr	r5, [pc, #28]	@ (80112cc <_kill_r+0x20>)
 80112b0:	2300      	movs	r3, #0
 80112b2:	4604      	mov	r4, r0
 80112b4:	4608      	mov	r0, r1
 80112b6:	4611      	mov	r1, r2
 80112b8:	602b      	str	r3, [r5, #0]
 80112ba:	f7f6 fdb6 	bl	8007e2a <_kill>
 80112be:	1c43      	adds	r3, r0, #1
 80112c0:	d102      	bne.n	80112c8 <_kill_r+0x1c>
 80112c2:	682b      	ldr	r3, [r5, #0]
 80112c4:	b103      	cbz	r3, 80112c8 <_kill_r+0x1c>
 80112c6:	6023      	str	r3, [r4, #0]
 80112c8:	bd38      	pop	{r3, r4, r5, pc}
 80112ca:	bf00      	nop
 80112cc:	200011e8 	.word	0x200011e8

080112d0 <_getpid_r>:
 80112d0:	f7f6 bda3 	b.w	8007e1a <_getpid>

080112d4 <__swhatbuf_r>:
 80112d4:	b570      	push	{r4, r5, r6, lr}
 80112d6:	460c      	mov	r4, r1
 80112d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112dc:	2900      	cmp	r1, #0
 80112de:	b096      	sub	sp, #88	@ 0x58
 80112e0:	4615      	mov	r5, r2
 80112e2:	461e      	mov	r6, r3
 80112e4:	da0d      	bge.n	8011302 <__swhatbuf_r+0x2e>
 80112e6:	89a3      	ldrh	r3, [r4, #12]
 80112e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80112ec:	f04f 0100 	mov.w	r1, #0
 80112f0:	bf14      	ite	ne
 80112f2:	2340      	movne	r3, #64	@ 0x40
 80112f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80112f8:	2000      	movs	r0, #0
 80112fa:	6031      	str	r1, [r6, #0]
 80112fc:	602b      	str	r3, [r5, #0]
 80112fe:	b016      	add	sp, #88	@ 0x58
 8011300:	bd70      	pop	{r4, r5, r6, pc}
 8011302:	466a      	mov	r2, sp
 8011304:	f000 f848 	bl	8011398 <_fstat_r>
 8011308:	2800      	cmp	r0, #0
 801130a:	dbec      	blt.n	80112e6 <__swhatbuf_r+0x12>
 801130c:	9901      	ldr	r1, [sp, #4]
 801130e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011312:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011316:	4259      	negs	r1, r3
 8011318:	4159      	adcs	r1, r3
 801131a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801131e:	e7eb      	b.n	80112f8 <__swhatbuf_r+0x24>

08011320 <__smakebuf_r>:
 8011320:	898b      	ldrh	r3, [r1, #12]
 8011322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011324:	079d      	lsls	r5, r3, #30
 8011326:	4606      	mov	r6, r0
 8011328:	460c      	mov	r4, r1
 801132a:	d507      	bpl.n	801133c <__smakebuf_r+0x1c>
 801132c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011330:	6023      	str	r3, [r4, #0]
 8011332:	6123      	str	r3, [r4, #16]
 8011334:	2301      	movs	r3, #1
 8011336:	6163      	str	r3, [r4, #20]
 8011338:	b003      	add	sp, #12
 801133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801133c:	ab01      	add	r3, sp, #4
 801133e:	466a      	mov	r2, sp
 8011340:	f7ff ffc8 	bl	80112d4 <__swhatbuf_r>
 8011344:	9f00      	ldr	r7, [sp, #0]
 8011346:	4605      	mov	r5, r0
 8011348:	4639      	mov	r1, r7
 801134a:	4630      	mov	r0, r6
 801134c:	f7fd fbcc 	bl	800eae8 <_malloc_r>
 8011350:	b948      	cbnz	r0, 8011366 <__smakebuf_r+0x46>
 8011352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011356:	059a      	lsls	r2, r3, #22
 8011358:	d4ee      	bmi.n	8011338 <__smakebuf_r+0x18>
 801135a:	f023 0303 	bic.w	r3, r3, #3
 801135e:	f043 0302 	orr.w	r3, r3, #2
 8011362:	81a3      	strh	r3, [r4, #12]
 8011364:	e7e2      	b.n	801132c <__smakebuf_r+0xc>
 8011366:	89a3      	ldrh	r3, [r4, #12]
 8011368:	6020      	str	r0, [r4, #0]
 801136a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801136e:	81a3      	strh	r3, [r4, #12]
 8011370:	9b01      	ldr	r3, [sp, #4]
 8011372:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011376:	b15b      	cbz	r3, 8011390 <__smakebuf_r+0x70>
 8011378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801137c:	4630      	mov	r0, r6
 801137e:	f000 f81d 	bl	80113bc <_isatty_r>
 8011382:	b128      	cbz	r0, 8011390 <__smakebuf_r+0x70>
 8011384:	89a3      	ldrh	r3, [r4, #12]
 8011386:	f023 0303 	bic.w	r3, r3, #3
 801138a:	f043 0301 	orr.w	r3, r3, #1
 801138e:	81a3      	strh	r3, [r4, #12]
 8011390:	89a3      	ldrh	r3, [r4, #12]
 8011392:	431d      	orrs	r5, r3
 8011394:	81a5      	strh	r5, [r4, #12]
 8011396:	e7cf      	b.n	8011338 <__smakebuf_r+0x18>

08011398 <_fstat_r>:
 8011398:	b538      	push	{r3, r4, r5, lr}
 801139a:	4d07      	ldr	r5, [pc, #28]	@ (80113b8 <_fstat_r+0x20>)
 801139c:	2300      	movs	r3, #0
 801139e:	4604      	mov	r4, r0
 80113a0:	4608      	mov	r0, r1
 80113a2:	4611      	mov	r1, r2
 80113a4:	602b      	str	r3, [r5, #0]
 80113a6:	f7f6 fda0 	bl	8007eea <_fstat>
 80113aa:	1c43      	adds	r3, r0, #1
 80113ac:	d102      	bne.n	80113b4 <_fstat_r+0x1c>
 80113ae:	682b      	ldr	r3, [r5, #0]
 80113b0:	b103      	cbz	r3, 80113b4 <_fstat_r+0x1c>
 80113b2:	6023      	str	r3, [r4, #0]
 80113b4:	bd38      	pop	{r3, r4, r5, pc}
 80113b6:	bf00      	nop
 80113b8:	200011e8 	.word	0x200011e8

080113bc <_isatty_r>:
 80113bc:	b538      	push	{r3, r4, r5, lr}
 80113be:	4d06      	ldr	r5, [pc, #24]	@ (80113d8 <_isatty_r+0x1c>)
 80113c0:	2300      	movs	r3, #0
 80113c2:	4604      	mov	r4, r0
 80113c4:	4608      	mov	r0, r1
 80113c6:	602b      	str	r3, [r5, #0]
 80113c8:	f7f6 fd9f 	bl	8007f0a <_isatty>
 80113cc:	1c43      	adds	r3, r0, #1
 80113ce:	d102      	bne.n	80113d6 <_isatty_r+0x1a>
 80113d0:	682b      	ldr	r3, [r5, #0]
 80113d2:	b103      	cbz	r3, 80113d6 <_isatty_r+0x1a>
 80113d4:	6023      	str	r3, [r4, #0]
 80113d6:	bd38      	pop	{r3, r4, r5, pc}
 80113d8:	200011e8 	.word	0x200011e8

080113dc <powf>:
 80113dc:	b508      	push	{r3, lr}
 80113de:	ed2d 8b04 	vpush	{d8-d9}
 80113e2:	eeb0 8a60 	vmov.f32	s16, s1
 80113e6:	eeb0 9a40 	vmov.f32	s18, s0
 80113ea:	f000 f881 	bl	80114f0 <__ieee754_powf>
 80113ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80113f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f6:	eef0 8a40 	vmov.f32	s17, s0
 80113fa:	d63e      	bvs.n	801147a <powf+0x9e>
 80113fc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011404:	d112      	bne.n	801142c <powf+0x50>
 8011406:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140e:	d039      	beq.n	8011484 <powf+0xa8>
 8011410:	eeb0 0a48 	vmov.f32	s0, s16
 8011414:	f000 f85f 	bl	80114d6 <finitef>
 8011418:	b378      	cbz	r0, 801147a <powf+0x9e>
 801141a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011422:	d52a      	bpl.n	801147a <powf+0x9e>
 8011424:	f7fc fc50 	bl	800dcc8 <__errno>
 8011428:	2322      	movs	r3, #34	@ 0x22
 801142a:	e014      	b.n	8011456 <powf+0x7a>
 801142c:	f000 f853 	bl	80114d6 <finitef>
 8011430:	b998      	cbnz	r0, 801145a <powf+0x7e>
 8011432:	eeb0 0a49 	vmov.f32	s0, s18
 8011436:	f000 f84e 	bl	80114d6 <finitef>
 801143a:	b170      	cbz	r0, 801145a <powf+0x7e>
 801143c:	eeb0 0a48 	vmov.f32	s0, s16
 8011440:	f000 f849 	bl	80114d6 <finitef>
 8011444:	b148      	cbz	r0, 801145a <powf+0x7e>
 8011446:	eef4 8a68 	vcmp.f32	s17, s17
 801144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801144e:	d7e9      	bvc.n	8011424 <powf+0x48>
 8011450:	f7fc fc3a 	bl	800dcc8 <__errno>
 8011454:	2321      	movs	r3, #33	@ 0x21
 8011456:	6003      	str	r3, [r0, #0]
 8011458:	e00f      	b.n	801147a <powf+0x9e>
 801145a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011462:	d10a      	bne.n	801147a <powf+0x9e>
 8011464:	eeb0 0a49 	vmov.f32	s0, s18
 8011468:	f000 f835 	bl	80114d6 <finitef>
 801146c:	b128      	cbz	r0, 801147a <powf+0x9e>
 801146e:	eeb0 0a48 	vmov.f32	s0, s16
 8011472:	f000 f830 	bl	80114d6 <finitef>
 8011476:	2800      	cmp	r0, #0
 8011478:	d1d4      	bne.n	8011424 <powf+0x48>
 801147a:	eeb0 0a68 	vmov.f32	s0, s17
 801147e:	ecbd 8b04 	vpop	{d8-d9}
 8011482:	bd08      	pop	{r3, pc}
 8011484:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011488:	e7f7      	b.n	801147a <powf+0x9e>
	...

0801148c <sqrtf>:
 801148c:	b508      	push	{r3, lr}
 801148e:	ed2d 8b02 	vpush	{d8}
 8011492:	eeb0 8a40 	vmov.f32	s16, s0
 8011496:	f000 f828 	bl	80114ea <__ieee754_sqrtf>
 801149a:	eeb4 8a48 	vcmp.f32	s16, s16
 801149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a2:	d60c      	bvs.n	80114be <sqrtf+0x32>
 80114a4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80114c4 <sqrtf+0x38>
 80114a8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80114ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b0:	d505      	bpl.n	80114be <sqrtf+0x32>
 80114b2:	f7fc fc09 	bl	800dcc8 <__errno>
 80114b6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80114ba:	2321      	movs	r3, #33	@ 0x21
 80114bc:	6003      	str	r3, [r0, #0]
 80114be:	ecbd 8b02 	vpop	{d8}
 80114c2:	bd08      	pop	{r3, pc}
 80114c4:	00000000 	.word	0x00000000

080114c8 <fabsf>:
 80114c8:	ee10 3a10 	vmov	r3, s0
 80114cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80114d0:	ee00 3a10 	vmov	s0, r3
 80114d4:	4770      	bx	lr

080114d6 <finitef>:
 80114d6:	ee10 3a10 	vmov	r3, s0
 80114da:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80114de:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80114e2:	bfac      	ite	ge
 80114e4:	2000      	movge	r0, #0
 80114e6:	2001      	movlt	r0, #1
 80114e8:	4770      	bx	lr

080114ea <__ieee754_sqrtf>:
 80114ea:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80114ee:	4770      	bx	lr

080114f0 <__ieee754_powf>:
 80114f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114f4:	ee10 4a90 	vmov	r4, s1
 80114f8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80114fc:	ed2d 8b02 	vpush	{d8}
 8011500:	ee10 6a10 	vmov	r6, s0
 8011504:	eeb0 8a40 	vmov.f32	s16, s0
 8011508:	eef0 8a60 	vmov.f32	s17, s1
 801150c:	d10c      	bne.n	8011528 <__ieee754_powf+0x38>
 801150e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8011512:	0076      	lsls	r6, r6, #1
 8011514:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8011518:	f240 8274 	bls.w	8011a04 <__ieee754_powf+0x514>
 801151c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011520:	ecbd 8b02 	vpop	{d8}
 8011524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011528:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801152c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8011530:	d802      	bhi.n	8011538 <__ieee754_powf+0x48>
 8011532:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011536:	d908      	bls.n	801154a <__ieee754_powf+0x5a>
 8011538:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801153c:	d1ee      	bne.n	801151c <__ieee754_powf+0x2c>
 801153e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8011542:	0064      	lsls	r4, r4, #1
 8011544:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8011548:	e7e6      	b.n	8011518 <__ieee754_powf+0x28>
 801154a:	2e00      	cmp	r6, #0
 801154c:	da1f      	bge.n	801158e <__ieee754_powf+0x9e>
 801154e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8011552:	f080 8260 	bcs.w	8011a16 <__ieee754_powf+0x526>
 8011556:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801155a:	d32f      	bcc.n	80115bc <__ieee754_powf+0xcc>
 801155c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8011560:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8011564:	fa49 f503 	asr.w	r5, r9, r3
 8011568:	fa05 f303 	lsl.w	r3, r5, r3
 801156c:	454b      	cmp	r3, r9
 801156e:	d123      	bne.n	80115b8 <__ieee754_powf+0xc8>
 8011570:	f005 0501 	and.w	r5, r5, #1
 8011574:	f1c5 0502 	rsb	r5, r5, #2
 8011578:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801157c:	d11f      	bne.n	80115be <__ieee754_powf+0xce>
 801157e:	2c00      	cmp	r4, #0
 8011580:	f280 8246 	bge.w	8011a10 <__ieee754_powf+0x520>
 8011584:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011588:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801158c:	e7c8      	b.n	8011520 <__ieee754_powf+0x30>
 801158e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011592:	d111      	bne.n	80115b8 <__ieee754_powf+0xc8>
 8011594:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8011598:	f000 8234 	beq.w	8011a04 <__ieee754_powf+0x514>
 801159c:	d906      	bls.n	80115ac <__ieee754_powf+0xbc>
 801159e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80118b4 <__ieee754_powf+0x3c4>
 80115a2:	2c00      	cmp	r4, #0
 80115a4:	bfa8      	it	ge
 80115a6:	eeb0 0a68 	vmovge.f32	s0, s17
 80115aa:	e7b9      	b.n	8011520 <__ieee754_powf+0x30>
 80115ac:	2c00      	cmp	r4, #0
 80115ae:	f280 822c 	bge.w	8011a0a <__ieee754_powf+0x51a>
 80115b2:	eeb1 0a68 	vneg.f32	s0, s17
 80115b6:	e7b3      	b.n	8011520 <__ieee754_powf+0x30>
 80115b8:	2500      	movs	r5, #0
 80115ba:	e7dd      	b.n	8011578 <__ieee754_powf+0x88>
 80115bc:	2500      	movs	r5, #0
 80115be:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80115c2:	d102      	bne.n	80115ca <__ieee754_powf+0xda>
 80115c4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80115c8:	e7aa      	b.n	8011520 <__ieee754_powf+0x30>
 80115ca:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80115ce:	f040 8227 	bne.w	8011a20 <__ieee754_powf+0x530>
 80115d2:	2e00      	cmp	r6, #0
 80115d4:	f2c0 8224 	blt.w	8011a20 <__ieee754_powf+0x530>
 80115d8:	eeb0 0a48 	vmov.f32	s0, s16
 80115dc:	ecbd 8b02 	vpop	{d8}
 80115e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115e4:	f7ff bf81 	b.w	80114ea <__ieee754_sqrtf>
 80115e8:	2d01      	cmp	r5, #1
 80115ea:	d199      	bne.n	8011520 <__ieee754_powf+0x30>
 80115ec:	eeb1 0a40 	vneg.f32	s0, s0
 80115f0:	e796      	b.n	8011520 <__ieee754_powf+0x30>
 80115f2:	0ff0      	lsrs	r0, r6, #31
 80115f4:	3801      	subs	r0, #1
 80115f6:	ea55 0300 	orrs.w	r3, r5, r0
 80115fa:	d104      	bne.n	8011606 <__ieee754_powf+0x116>
 80115fc:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011600:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011604:	e78c      	b.n	8011520 <__ieee754_powf+0x30>
 8011606:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801160a:	d96d      	bls.n	80116e8 <__ieee754_powf+0x1f8>
 801160c:	4baa      	ldr	r3, [pc, #680]	@ (80118b8 <__ieee754_powf+0x3c8>)
 801160e:	4598      	cmp	r8, r3
 8011610:	d808      	bhi.n	8011624 <__ieee754_powf+0x134>
 8011612:	2c00      	cmp	r4, #0
 8011614:	da0b      	bge.n	801162e <__ieee754_powf+0x13e>
 8011616:	2000      	movs	r0, #0
 8011618:	ecbd 8b02 	vpop	{d8}
 801161c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011620:	f000 baba 	b.w	8011b98 <__math_oflowf>
 8011624:	4ba5      	ldr	r3, [pc, #660]	@ (80118bc <__ieee754_powf+0x3cc>)
 8011626:	4598      	cmp	r8, r3
 8011628:	d908      	bls.n	801163c <__ieee754_powf+0x14c>
 801162a:	2c00      	cmp	r4, #0
 801162c:	dcf3      	bgt.n	8011616 <__ieee754_powf+0x126>
 801162e:	2000      	movs	r0, #0
 8011630:	ecbd 8b02 	vpop	{d8}
 8011634:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011638:	f000 baa8 	b.w	8011b8c <__math_uflowf>
 801163c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011640:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011644:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80118c0 <__ieee754_powf+0x3d0>
 8011648:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801164c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011650:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011654:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011658:	ee20 7a00 	vmul.f32	s14, s0, s0
 801165c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80118c4 <__ieee754_powf+0x3d4>
 8011660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011664:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80118c8 <__ieee754_powf+0x3d8>
 8011668:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801166c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80118cc <__ieee754_powf+0x3dc>
 8011670:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011674:	eeb0 7a67 	vmov.f32	s14, s15
 8011678:	eea0 7a26 	vfma.f32	s14, s0, s13
 801167c:	ee17 3a10 	vmov	r3, s14
 8011680:	f36f 030b 	bfc	r3, #0, #12
 8011684:	ee07 3a10 	vmov	s14, r3
 8011688:	eeb0 6a47 	vmov.f32	s12, s14
 801168c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8011690:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011694:	3d01      	subs	r5, #1
 8011696:	4305      	orrs	r5, r0
 8011698:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801169c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80116a0:	f36f 040b 	bfc	r4, #0, #12
 80116a4:	bf18      	it	ne
 80116a6:	eeb0 8a66 	vmovne.f32	s16, s13
 80116aa:	ee06 4a90 	vmov	s13, r4
 80116ae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80116b2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80116b6:	ee67 7a26 	vmul.f32	s15, s14, s13
 80116ba:	eee6 0a07 	vfma.f32	s1, s12, s14
 80116be:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80116c2:	ee17 1a10 	vmov	r1, s14
 80116c6:	2900      	cmp	r1, #0
 80116c8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80116cc:	f340 80dd 	ble.w	801188a <__ieee754_powf+0x39a>
 80116d0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80116d4:	f240 80ca 	bls.w	801186c <__ieee754_powf+0x37c>
 80116d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80116dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e0:	bf4c      	ite	mi
 80116e2:	2001      	movmi	r0, #1
 80116e4:	2000      	movpl	r0, #0
 80116e6:	e797      	b.n	8011618 <__ieee754_powf+0x128>
 80116e8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80116ec:	bf01      	itttt	eq
 80116ee:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80118d0 <__ieee754_powf+0x3e0>
 80116f2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80116f6:	f06f 0317 	mvneq.w	r3, #23
 80116fa:	ee17 7a90 	vmoveq	r7, s15
 80116fe:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8011702:	bf18      	it	ne
 8011704:	2300      	movne	r3, #0
 8011706:	3a7f      	subs	r2, #127	@ 0x7f
 8011708:	441a      	add	r2, r3
 801170a:	4b72      	ldr	r3, [pc, #456]	@ (80118d4 <__ieee754_powf+0x3e4>)
 801170c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8011710:	429f      	cmp	r7, r3
 8011712:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8011716:	dd06      	ble.n	8011726 <__ieee754_powf+0x236>
 8011718:	4b6f      	ldr	r3, [pc, #444]	@ (80118d8 <__ieee754_powf+0x3e8>)
 801171a:	429f      	cmp	r7, r3
 801171c:	f340 80a4 	ble.w	8011868 <__ieee754_powf+0x378>
 8011720:	3201      	adds	r2, #1
 8011722:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8011726:	2600      	movs	r6, #0
 8011728:	4b6c      	ldr	r3, [pc, #432]	@ (80118dc <__ieee754_powf+0x3ec>)
 801172a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801172e:	ee07 1a10 	vmov	s14, r1
 8011732:	edd3 5a00 	vldr	s11, [r3]
 8011736:	4b6a      	ldr	r3, [pc, #424]	@ (80118e0 <__ieee754_powf+0x3f0>)
 8011738:	ee75 7a87 	vadd.f32	s15, s11, s14
 801173c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011740:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8011744:	1049      	asrs	r1, r1, #1
 8011746:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801174a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801174e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8011752:	ee37 6a65 	vsub.f32	s12, s14, s11
 8011756:	ee07 1a90 	vmov	s15, r1
 801175a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801175e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8011762:	ee15 7a10 	vmov	r7, s10
 8011766:	401f      	ands	r7, r3
 8011768:	ee06 7a90 	vmov	s13, r7
 801176c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8011770:	ee37 7a65 	vsub.f32	s14, s14, s11
 8011774:	ee65 7a05 	vmul.f32	s15, s10, s10
 8011778:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801177c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80118e4 <__ieee754_powf+0x3f4>
 8011780:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80118e8 <__ieee754_powf+0x3f8>
 8011784:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011788:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80118ec <__ieee754_powf+0x3fc>
 801178c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011790:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80118c0 <__ieee754_powf+0x3d0>
 8011794:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011798:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80118f0 <__ieee754_powf+0x400>
 801179c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80117a0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80118f4 <__ieee754_powf+0x404>
 80117a4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80117a8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80117ac:	ee35 7a26 	vadd.f32	s14, s10, s13
 80117b0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80117b4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80117b8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80117bc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80117c0:	eef0 5a67 	vmov.f32	s11, s15
 80117c4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80117c8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80117cc:	ee15 1a90 	vmov	r1, s11
 80117d0:	4019      	ands	r1, r3
 80117d2:	ee05 1a90 	vmov	s11, r1
 80117d6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80117da:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80117de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117e2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80117e6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80117ea:	eeb0 6a67 	vmov.f32	s12, s15
 80117ee:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80117f2:	ee16 1a10 	vmov	r1, s12
 80117f6:	4019      	ands	r1, r3
 80117f8:	ee06 1a10 	vmov	s12, r1
 80117fc:	eeb0 7a46 	vmov.f32	s14, s12
 8011800:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8011804:	493c      	ldr	r1, [pc, #240]	@ (80118f8 <__ieee754_powf+0x408>)
 8011806:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801180a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801180e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80118fc <__ieee754_powf+0x40c>
 8011812:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8011900 <__ieee754_powf+0x410>
 8011816:	ee67 7a87 	vmul.f32	s15, s15, s14
 801181a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8011904 <__ieee754_powf+0x414>
 801181e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011822:	ed91 7a00 	vldr	s14, [r1]
 8011826:	ee77 7a87 	vadd.f32	s15, s15, s14
 801182a:	ee07 2a10 	vmov	s14, r2
 801182e:	4a36      	ldr	r2, [pc, #216]	@ (8011908 <__ieee754_powf+0x418>)
 8011830:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8011834:	eeb0 7a67 	vmov.f32	s14, s15
 8011838:	eea6 7a25 	vfma.f32	s14, s12, s11
 801183c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8011840:	ed92 5a00 	vldr	s10, [r2]
 8011844:	ee37 7a05 	vadd.f32	s14, s14, s10
 8011848:	ee37 7a26 	vadd.f32	s14, s14, s13
 801184c:	ee17 2a10 	vmov	r2, s14
 8011850:	401a      	ands	r2, r3
 8011852:	ee07 2a10 	vmov	s14, r2
 8011856:	ee77 6a66 	vsub.f32	s13, s14, s13
 801185a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801185e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8011862:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011866:	e715      	b.n	8011694 <__ieee754_powf+0x1a4>
 8011868:	2601      	movs	r6, #1
 801186a:	e75d      	b.n	8011728 <__ieee754_powf+0x238>
 801186c:	d152      	bne.n	8011914 <__ieee754_powf+0x424>
 801186e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801190c <__ieee754_powf+0x41c>
 8011872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011876:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801187a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011882:	f73f af29 	bgt.w	80116d8 <__ieee754_powf+0x1e8>
 8011886:	2386      	movs	r3, #134	@ 0x86
 8011888:	e048      	b.n	801191c <__ieee754_powf+0x42c>
 801188a:	4a21      	ldr	r2, [pc, #132]	@ (8011910 <__ieee754_powf+0x420>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d907      	bls.n	80118a0 <__ieee754_powf+0x3b0>
 8011890:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011898:	bf4c      	ite	mi
 801189a:	2001      	movmi	r0, #1
 801189c:	2000      	movpl	r0, #0
 801189e:	e6c7      	b.n	8011630 <__ieee754_powf+0x140>
 80118a0:	d138      	bne.n	8011914 <__ieee754_powf+0x424>
 80118a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80118a6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80118aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ae:	dbea      	blt.n	8011886 <__ieee754_powf+0x396>
 80118b0:	e7ee      	b.n	8011890 <__ieee754_powf+0x3a0>
 80118b2:	bf00      	nop
 80118b4:	00000000 	.word	0x00000000
 80118b8:	3f7ffff3 	.word	0x3f7ffff3
 80118bc:	3f800007 	.word	0x3f800007
 80118c0:	3eaaaaab 	.word	0x3eaaaaab
 80118c4:	3fb8aa00 	.word	0x3fb8aa00
 80118c8:	3fb8aa3b 	.word	0x3fb8aa3b
 80118cc:	36eca570 	.word	0x36eca570
 80118d0:	4b800000 	.word	0x4b800000
 80118d4:	001cc471 	.word	0x001cc471
 80118d8:	005db3d6 	.word	0x005db3d6
 80118dc:	08013b5c 	.word	0x08013b5c
 80118e0:	fffff000 	.word	0xfffff000
 80118e4:	3e6c3255 	.word	0x3e6c3255
 80118e8:	3e53f142 	.word	0x3e53f142
 80118ec:	3e8ba305 	.word	0x3e8ba305
 80118f0:	3edb6db7 	.word	0x3edb6db7
 80118f4:	3f19999a 	.word	0x3f19999a
 80118f8:	08013b4c 	.word	0x08013b4c
 80118fc:	3f76384f 	.word	0x3f76384f
 8011900:	3f763800 	.word	0x3f763800
 8011904:	369dc3a0 	.word	0x369dc3a0
 8011908:	08013b54 	.word	0x08013b54
 801190c:	3338aa3c 	.word	0x3338aa3c
 8011910:	43160000 	.word	0x43160000
 8011914:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8011918:	d96f      	bls.n	80119fa <__ieee754_powf+0x50a>
 801191a:	15db      	asrs	r3, r3, #23
 801191c:	3b7e      	subs	r3, #126	@ 0x7e
 801191e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8011922:	4118      	asrs	r0, r3
 8011924:	4408      	add	r0, r1
 8011926:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801192a:	4a4e      	ldr	r2, [pc, #312]	@ (8011a64 <__ieee754_powf+0x574>)
 801192c:	3b7f      	subs	r3, #127	@ 0x7f
 801192e:	411a      	asrs	r2, r3
 8011930:	4002      	ands	r2, r0
 8011932:	ee07 2a10 	vmov	s14, r2
 8011936:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801193a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801193e:	f1c3 0317 	rsb	r3, r3, #23
 8011942:	4118      	asrs	r0, r3
 8011944:	2900      	cmp	r1, #0
 8011946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801194a:	bfb8      	it	lt
 801194c:	4240      	neglt	r0, r0
 801194e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8011952:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8011a68 <__ieee754_powf+0x578>
 8011956:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8011a6c <__ieee754_powf+0x57c>
 801195a:	ee16 3a90 	vmov	r3, s13
 801195e:	f36f 030b 	bfc	r3, #0, #12
 8011962:	ee06 3a90 	vmov	s13, r3
 8011966:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801196a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801196e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8011972:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8011a70 <__ieee754_powf+0x580>
 8011976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801197a:	eee0 7a87 	vfma.f32	s15, s1, s14
 801197e:	eeb0 7a67 	vmov.f32	s14, s15
 8011982:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011986:	eef0 5a47 	vmov.f32	s11, s14
 801198a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801198e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8011992:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011996:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8011a74 <__ieee754_powf+0x584>
 801199a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8011a78 <__ieee754_powf+0x588>
 801199e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80119a2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8011a7c <__ieee754_powf+0x58c>
 80119a6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80119aa:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8011a80 <__ieee754_powf+0x590>
 80119ae:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80119b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011a84 <__ieee754_powf+0x594>
 80119b6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80119ba:	eeb0 6a47 	vmov.f32	s12, s14
 80119be:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80119c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80119c6:	ee67 5a06 	vmul.f32	s11, s14, s12
 80119ca:	ee36 6a66 	vsub.f32	s12, s12, s13
 80119ce:	eee7 7a27 	vfma.f32	s15, s14, s15
 80119d2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80119d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80119da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80119e2:	ee10 3a10 	vmov	r3, s0
 80119e6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80119ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80119ee:	da06      	bge.n	80119fe <__ieee754_powf+0x50e>
 80119f0:	f000 f84c 	bl	8011a8c <scalbnf>
 80119f4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80119f8:	e592      	b.n	8011520 <__ieee754_powf+0x30>
 80119fa:	2000      	movs	r0, #0
 80119fc:	e7a7      	b.n	801194e <__ieee754_powf+0x45e>
 80119fe:	ee00 3a10 	vmov	s0, r3
 8011a02:	e7f7      	b.n	80119f4 <__ieee754_powf+0x504>
 8011a04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011a08:	e58a      	b.n	8011520 <__ieee754_powf+0x30>
 8011a0a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8011a88 <__ieee754_powf+0x598>
 8011a0e:	e587      	b.n	8011520 <__ieee754_powf+0x30>
 8011a10:	eeb0 0a48 	vmov.f32	s0, s16
 8011a14:	e584      	b.n	8011520 <__ieee754_powf+0x30>
 8011a16:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011a1a:	f43f adbb 	beq.w	8011594 <__ieee754_powf+0xa4>
 8011a1e:	2502      	movs	r5, #2
 8011a20:	eeb0 0a48 	vmov.f32	s0, s16
 8011a24:	f7ff fd50 	bl	80114c8 <fabsf>
 8011a28:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8011a2c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8011a30:	4647      	mov	r7, r8
 8011a32:	d003      	beq.n	8011a3c <__ieee754_powf+0x54c>
 8011a34:	f1b8 0f00 	cmp.w	r8, #0
 8011a38:	f47f addb 	bne.w	80115f2 <__ieee754_powf+0x102>
 8011a3c:	2c00      	cmp	r4, #0
 8011a3e:	bfbc      	itt	lt
 8011a40:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8011a44:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011a48:	2e00      	cmp	r6, #0
 8011a4a:	f6bf ad69 	bge.w	8011520 <__ieee754_powf+0x30>
 8011a4e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8011a52:	ea58 0805 	orrs.w	r8, r8, r5
 8011a56:	f47f adc7 	bne.w	80115e8 <__ieee754_powf+0xf8>
 8011a5a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011a5e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011a62:	e55d      	b.n	8011520 <__ieee754_powf+0x30>
 8011a64:	ff800000 	.word	0xff800000
 8011a68:	3f317218 	.word	0x3f317218
 8011a6c:	3f317200 	.word	0x3f317200
 8011a70:	35bfbe8c 	.word	0x35bfbe8c
 8011a74:	b5ddea0e 	.word	0xb5ddea0e
 8011a78:	3331bb4c 	.word	0x3331bb4c
 8011a7c:	388ab355 	.word	0x388ab355
 8011a80:	bb360b61 	.word	0xbb360b61
 8011a84:	3e2aaaab 	.word	0x3e2aaaab
 8011a88:	00000000 	.word	0x00000000

08011a8c <scalbnf>:
 8011a8c:	ee10 3a10 	vmov	r3, s0
 8011a90:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011a94:	d02b      	beq.n	8011aee <scalbnf+0x62>
 8011a96:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011a9a:	d302      	bcc.n	8011aa2 <scalbnf+0x16>
 8011a9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011aa0:	4770      	bx	lr
 8011aa2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011aa6:	d123      	bne.n	8011af0 <scalbnf+0x64>
 8011aa8:	4b24      	ldr	r3, [pc, #144]	@ (8011b3c <scalbnf+0xb0>)
 8011aaa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011b40 <scalbnf+0xb4>
 8011aae:	4298      	cmp	r0, r3
 8011ab0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011ab4:	db17      	blt.n	8011ae6 <scalbnf+0x5a>
 8011ab6:	ee10 3a10 	vmov	r3, s0
 8011aba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011abe:	3a19      	subs	r2, #25
 8011ac0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011ac4:	4288      	cmp	r0, r1
 8011ac6:	dd15      	ble.n	8011af4 <scalbnf+0x68>
 8011ac8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011b44 <scalbnf+0xb8>
 8011acc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011b48 <scalbnf+0xbc>
 8011ad0:	ee10 3a10 	vmov	r3, s0
 8011ad4:	eeb0 7a67 	vmov.f32	s14, s15
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	bfb8      	it	lt
 8011adc:	eef0 7a66 	vmovlt.f32	s15, s13
 8011ae0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011ae4:	4770      	bx	lr
 8011ae6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011b4c <scalbnf+0xc0>
 8011aea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011aee:	4770      	bx	lr
 8011af0:	0dd2      	lsrs	r2, r2, #23
 8011af2:	e7e5      	b.n	8011ac0 <scalbnf+0x34>
 8011af4:	4410      	add	r0, r2
 8011af6:	28fe      	cmp	r0, #254	@ 0xfe
 8011af8:	dce6      	bgt.n	8011ac8 <scalbnf+0x3c>
 8011afa:	2800      	cmp	r0, #0
 8011afc:	dd06      	ble.n	8011b0c <scalbnf+0x80>
 8011afe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011b02:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011b06:	ee00 3a10 	vmov	s0, r3
 8011b0a:	4770      	bx	lr
 8011b0c:	f110 0f16 	cmn.w	r0, #22
 8011b10:	da09      	bge.n	8011b26 <scalbnf+0x9a>
 8011b12:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011b4c <scalbnf+0xc0>
 8011b16:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011b50 <scalbnf+0xc4>
 8011b1a:	ee10 3a10 	vmov	r3, s0
 8011b1e:	eeb0 7a67 	vmov.f32	s14, s15
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	e7d9      	b.n	8011ada <scalbnf+0x4e>
 8011b26:	3019      	adds	r0, #25
 8011b28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011b2c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011b30:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011b54 <scalbnf+0xc8>
 8011b34:	ee07 3a90 	vmov	s15, r3
 8011b38:	e7d7      	b.n	8011aea <scalbnf+0x5e>
 8011b3a:	bf00      	nop
 8011b3c:	ffff3cb0 	.word	0xffff3cb0
 8011b40:	4c000000 	.word	0x4c000000
 8011b44:	7149f2ca 	.word	0x7149f2ca
 8011b48:	f149f2ca 	.word	0xf149f2ca
 8011b4c:	0da24260 	.word	0x0da24260
 8011b50:	8da24260 	.word	0x8da24260
 8011b54:	33000000 	.word	0x33000000

08011b58 <with_errnof>:
 8011b58:	b510      	push	{r4, lr}
 8011b5a:	ed2d 8b02 	vpush	{d8}
 8011b5e:	eeb0 8a40 	vmov.f32	s16, s0
 8011b62:	4604      	mov	r4, r0
 8011b64:	f7fc f8b0 	bl	800dcc8 <__errno>
 8011b68:	eeb0 0a48 	vmov.f32	s0, s16
 8011b6c:	ecbd 8b02 	vpop	{d8}
 8011b70:	6004      	str	r4, [r0, #0]
 8011b72:	bd10      	pop	{r4, pc}

08011b74 <xflowf>:
 8011b74:	b130      	cbz	r0, 8011b84 <xflowf+0x10>
 8011b76:	eef1 7a40 	vneg.f32	s15, s0
 8011b7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011b7e:	2022      	movs	r0, #34	@ 0x22
 8011b80:	f7ff bfea 	b.w	8011b58 <with_errnof>
 8011b84:	eef0 7a40 	vmov.f32	s15, s0
 8011b88:	e7f7      	b.n	8011b7a <xflowf+0x6>
	...

08011b8c <__math_uflowf>:
 8011b8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011b94 <__math_uflowf+0x8>
 8011b90:	f7ff bff0 	b.w	8011b74 <xflowf>
 8011b94:	10000000 	.word	0x10000000

08011b98 <__math_oflowf>:
 8011b98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011ba0 <__math_oflowf+0x8>
 8011b9c:	f7ff bfea 	b.w	8011b74 <xflowf>
 8011ba0:	70000000 	.word	0x70000000

08011ba4 <_init>:
 8011ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ba6:	bf00      	nop
 8011ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011baa:	bc08      	pop	{r3}
 8011bac:	469e      	mov	lr, r3
 8011bae:	4770      	bx	lr

08011bb0 <_fini>:
 8011bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bb2:	bf00      	nop
 8011bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bb6:	bc08      	pop	{r3}
 8011bb8:	469e      	mov	lr, r3
 8011bba:	4770      	bx	lr
