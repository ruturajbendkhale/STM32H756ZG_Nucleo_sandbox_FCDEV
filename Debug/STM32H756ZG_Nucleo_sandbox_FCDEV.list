
STM32H756ZG_Nucleo_sandbox_FCDEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e93c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f4  0800eb10  0800eb10  0000fb10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff04  0800ff04  00011320  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ff04  0800ff04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff0c  0800ff0c  00011320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff0c  0800ff0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff10  0800ff10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ff14  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e0  080100f4  000111e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000280  08010194  00011280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000bb8  20000320  08010234  00011320  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000ed8  08010234  00011ed8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00011320  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024b2b  00000000  00000000  00011350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032d4  00000000  00000000  00035e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e78  00000000  00000000  00039150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000179b  00000000  00000000  0003afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029588  00000000  00000000  0003c763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e1a1  00000000  00000000  00065ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fe346  00000000  00000000  00083e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001821d2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009c1c  00000000  00000000  00182218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  0018be34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000320 	.word	0x20000320
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800eaf4 	.word	0x0800eaf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000324 	.word	0x20000324
 800020c:	0800eaf4 	.word	0x0800eaf4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b09c      	sub	sp, #112	@ 0x70
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a05 	vstr	s0, [r7, #20]
 800106a:	edc7 0a04 	vstr	s1, [r7, #16]
 800106e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001072:	edc7 1a02 	vstr	s3, [r7, #8]
 8001076:	ed87 2a01 	vstr	s4, [r7, #4]
 800107a:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800107e:	4bec      	ldr	r3, [pc, #944]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eeb1 7a67 	vneg.f32	s14, s15
 8001088:	edd7 7a05 	vldr	s15, [r7, #20]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	4be8      	ldr	r3, [pc, #928]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001092:	edd3 6a00 	vldr	s13, [r3]
 8001096:	edd7 7a04 	vldr	s15, [r7, #16]
 800109a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a2:	4be5      	ldr	r3, [pc, #916]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80010a4:	edd3 6a00 	vldr	s13, [r3]
 80010a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010bc:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80010c0:	4bde      	ldr	r3, [pc, #888]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ce:	4bd9      	ldr	r3, [pc, #868]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80010d0:	edd3 6a00 	vldr	s13, [r3]
 80010d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e0:	4bd5      	ldr	r3, [pc, #852]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80010e2:	edd3 6a00 	vldr	s13, [r3]
 80010e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80010fe:	4bcf      	ldr	r3, [pc, #828]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 8001100:	ed93 7a00 	vldr	s14, [r3]
 8001104:	edd7 7a04 	vldr	s15, [r7, #16]
 8001108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110c:	4bc8      	ldr	r3, [pc, #800]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800110e:	edd3 6a00 	vldr	s13, [r3]
 8001112:	edd7 7a03 	vldr	s15, [r7, #12]
 8001116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800111e:	4bc6      	ldr	r3, [pc, #792]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 8001120:	edd3 6a00 	vldr	s13, [r3]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001130:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001138:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800113c:	4bbf      	ldr	r3, [pc, #764]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	edd7 7a03 	vldr	s15, [r7, #12]
 8001146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114a:	4bb9      	ldr	r3, [pc, #740]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800114c:	edd3 6a00 	vldr	s13, [r3]
 8001150:	edd7 7a04 	vldr	s15, [r7, #16]
 8001154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800115c:	4bb5      	ldr	r3, [pc, #724]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 800115e:	edd3 6a00 	vldr	s13, [r3]
 8001162:	edd7 7a05 	vldr	s15, [r7, #20]
 8001166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001176:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800117a:	edd7 7a02 	vldr	s15, [r7, #8]
 800117e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d10e      	bne.n	80011a6 <MadgwickAHRSupdateIMU+0x146>
 8001188:	edd7 7a01 	vldr	s15, [r7, #4]
 800118c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d107      	bne.n	80011a6 <MadgwickAHRSupdateIMU+0x146>
 8001196:	edd7 7a00 	vldr	s15, [r7]
 800119a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	f000 81e5 	beq.w	8001570 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80011a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80011ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ba:	edd7 7a00 	vldr	s15, [r7]
 80011be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	f000 fa6d 	bl	80016a8 <invSqrt>
 80011ce:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		ax *= recipNorm;
 80011d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011d6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80011e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80011e6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 80011f2:	ed97 7a00 	vldr	s14, [r7]
 80011f6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fe:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001202:	4b8e      	ldr	r3, [pc, #568]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800120c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q1 = 2.0f * q1;
 8001210:	4b87      	ldr	r3, [pc, #540]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800121a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_2q2 = 2.0f * q2;
 800121e:	4b85      	ldr	r3, [pc, #532]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001228:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_2q3 = 2.0f * q3;
 800122c:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001236:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q0 = 4.0f * q0;
 800123a:	4b80      	ldr	r3, [pc, #512]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_4q1 = 4.0f * q1;
 800124c:	4b78      	ldr	r3, [pc, #480]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_4q2 = 4.0f * q2;
 800125e:	4b75      	ldr	r3, [pc, #468]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		_8q1 = 8.0f * q1;
 8001270:	4b6f      	ldr	r3, [pc, #444]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800127a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		_8q2 = 8.0f * q2;
 8001282:	4b6c      	ldr	r3, [pc, #432]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800128c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001290:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q0q0 = q0 * q0;
 8001294:	4b69      	ldr	r3, [pc, #420]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 8001296:	ed93 7a00 	vldr	s14, [r3]
 800129a:	4b68      	ldr	r3, [pc, #416]	@ (800143c <MadgwickAHRSupdateIMU+0x3dc>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q1q1 = q1 * q1;
 80012a8:	4b61      	ldr	r3, [pc, #388]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 80012aa:	ed93 7a00 	vldr	s14, [r3]
 80012ae:	4b60      	ldr	r3, [pc, #384]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		q2q2 = q2 * q2;
 80012bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80012be:	ed93 7a00 	vldr	s14, [r3]
 80012c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		q3q3 = q3 * q3;
 80012d0:	4b59      	ldr	r3, [pc, #356]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80012d2:	ed93 7a00 	vldr	s14, [r3]
 80012d6:	4b58      	ldr	r3, [pc, #352]	@ (8001438 <MadgwickAHRSupdateIMU+0x3d8>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80012e4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80012e8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f0:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80012f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001300:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001304:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001310:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001314:	edd7 7a01 	vldr	s15, [r7, #4]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001320:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001324:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001328:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800132c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001330:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001334:	edd7 7a02 	vldr	s15, [r7, #8]
 8001338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001340:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001344:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001348:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800134c:	4b38      	ldr	r3, [pc, #224]	@ (8001430 <MadgwickAHRSupdateIMU+0x3d0>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135a:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee37 7a67 	vsub.f32	s14, s14, s15
 800136a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800136e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001372:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001376:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800137a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001382:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001386:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800138a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001392:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001396:	edd7 7a00 	vldr	s15, [r7]
 800139a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80013a6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80013aa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80013ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <MadgwickAHRSupdateIMU+0x3d4>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013bc:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80013c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013cc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80013d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013dc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80013e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ec:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f4:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80013f8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001404:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001408:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800140c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001414:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001418:	edd7 7a00 	vldr	s15, [r7]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001428:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800142c:	e008      	b.n	8001440 <MadgwickAHRSupdateIMU+0x3e0>
 800142e:	bf00      	nop
 8001430:	2000033c 	.word	0x2000033c
 8001434:	20000340 	.word	0x20000340
 8001438:	20000344 	.word	0x20000344
 800143c:	20000004 	.word	0x20000004
 8001440:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001444:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001448:	4b91      	ldr	r3, [pc, #580]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001452:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001456:	edd7 7a02 	vldr	s15, [r7, #8]
 800145a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001462:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001466:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800146a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800146e:	4b88      	ldr	r3, [pc, #544]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001480:	edd7 7a01 	vldr	s15, [r7, #4]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001490:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001494:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001498:	edd7 7a08 	vldr	s15, [r7, #32]
 800149c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	f000 f8f2 	bl	80016a8 <invSqrt>
 80014c4:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		s0 *= recipNorm;
 80014c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014cc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 *= recipNorm;
 80014d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80014dc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80014e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ec:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80014f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80014fc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8001508:	4b62      	ldr	r3, [pc, #392]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 800150a:	ed93 7a00 	vldr	s14, [r3]
 800150e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800151a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot2 -= beta * s1;
 8001522:	4b5c      	ldr	r3, [pc, #368]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 8001524:	ed93 7a00 	vldr	s14, [r3]
 8001528:	edd7 7a08 	vldr	s15, [r7, #32]
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		qDot3 -= beta * s2;
 800153c:	4b55      	ldr	r3, [pc, #340]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	edd7 7a07 	vldr	s15, [r7, #28]
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		qDot4 -= beta * s3;
 8001556:	4b4f      	ldr	r3, [pc, #316]	@ (8001694 <MadgwickAHRSupdateIMU+0x634>)
 8001558:	ed93 7a00 	vldr	s14, [r3]
 800155c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001570:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001574:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 8001578:	ee27 7a87 	vmul.f32	s14, s15, s14
 800157c:	4b47      	ldr	r3, [pc, #284]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001586:	4b45      	ldr	r3, [pc, #276]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 8001588:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800158c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001590:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 8001594:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001598:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a2:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80015a8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80015ac:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 80015b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015b4:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 80015c0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80015c4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80015c8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001698 <MadgwickAHRSupdateIMU+0x638>
 80015cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80015e0:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 80015f2:	edd3 6a00 	vldr	s13, [r3]
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001604:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 8001606:	edd3 6a00 	vldr	s13, [r3]
 800160a:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 800161a:	edd3 6a00 	vldr	s13, [r3]
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f000 f83a 	bl	80016a8 <invSqrt>
 8001634:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
	q0 *= recipNorm;
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MadgwickAHRSupdateIMU+0x63c>)
 8001648:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MadgwickAHRSupdateIMU+0x640>)
 800165c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001660:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <MadgwickAHRSupdateIMU+0x644>)
 8001670:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001682:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <MadgwickAHRSupdateIMU+0x630>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
}
 8001688:	bf00      	nop
 800168a:	3770      	adds	r7, #112	@ 0x70
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000344 	.word	0x20000344
 8001694:	20000000 	.word	0x20000000
 8001698:	3c23d70a 	.word	0x3c23d70a
 800169c:	20000004 	.word	0x20000004
 80016a0:	2000033c 	.word	0x2000033c
 80016a4:	20000340 	.word	0x20000340

080016a8 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0a01 	vstr	s0, [r7, #4]
	if (instability_fix == 0)
 80016b2:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <invSqrt+0xdc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d12d      	bne.n	8001716 <invSqrt+0x6e>
	{
		/* original code */
		float halfx = 0.5f * x;
 80016ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80016be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c6:	edc7 7a06 	vstr	s15, [r7, #24]
		float y = x;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	617b      	str	r3, [r7, #20]
		long i = *(long*)&y;
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
		i = 0x5f3759df - (i>>1);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	105a      	asrs	r2, r3, #1
 80016da:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <invSqrt+0xe0>)
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	613b      	str	r3, [r7, #16]
		y = *(float*)&i;
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	617b      	str	r3, [r7, #20]
		y = y * (1.5f - (halfx * y * y));
 80016e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80016ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001704:	edd7 7a05 	vldr	s15, [r7, #20]
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	edc7 7a05 	vstr	s15, [r7, #20]
		return y;
 8001710:	edd7 7a05 	vldr	s15, [r7, #20]
 8001714:	e030      	b.n	8001778 <invSqrt+0xd0>
	}
	else if (instability_fix == 1)
 8001716:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <invSqrt+0xdc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d120      	bne.n	8001760 <invSqrt+0xb8>
	{
		/* close-to-optimal  method with low cost from http://pizer.wordpress.com/2008/10/12/fast-inverse-square-root */
		unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	085a      	lsrs	r2, r3, #1
 8001724:	4b19      	ldr	r3, [pc, #100]	@ (800178c <invSqrt+0xe4>)
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
		float tmp = *(float*)&i;
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61fb      	str	r3, [r7, #28]
		return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
 8001732:	edd7 7a01 	vldr	s15, [r7, #4]
 8001736:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001790 <invSqrt+0xe8>
 800173a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001746:	edd7 7a07 	vldr	s15, [r7, #28]
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001794 <invSqrt+0xec>
 8001752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001756:	edd7 7a07 	vldr	s15, [r7, #28]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	e00b      	b.n	8001778 <invSqrt+0xd0>
	}
	else
	{
		/* optimal but expensive method: */
		return 1.0f / sqrtf(x);
 8001760:	edd7 7a01 	vldr	s15, [r7, #4]
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	f00c fe38 	bl	800e3dc <sqrtf>
 800176c:	eeb0 7a40 	vmov.f32	s14, s0
 8001770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001774:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}
}
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	5f3759df 	.word	0x5f3759df
 800178c:	5f1f1412 	.word	0x5f1f1412
 8001790:	3f36d312 	.word	0x3f36d312
 8001794:	3fd851ff 	.word	0x3fd851ff

08001798 <adxl375_write>:

// Optional: for serial debug display
char x_char[6], y_char[6], z_char[6];

void adxl375_write(uint8_t reg, uint8_t value)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = reg;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, ADXL375_ADDRESS, data, 2, HAL_MAX_DELAY);
 80017b0:	f107 020c 	add.w	r2, r7, #12
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2302      	movs	r3, #2
 80017bc:	21a6      	movs	r1, #166	@ 0xa6
 80017be:	4803      	ldr	r0, [pc, #12]	@ (80017cc <adxl375_write+0x34>)
 80017c0:	f005 f834 	bl	800682c <HAL_I2C_Master_Transmit>
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000438 	.word	0x20000438

080017d0 <adxl375_read>:

uint8_t adxl375_read(uint8_t reg)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af04      	add	r7, sp, #16
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	f107 030f 	add.w	r3, r7, #15
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	21a6      	movs	r1, #166	@ 0xa6
 80017f6:	4804      	ldr	r0, [pc, #16]	@ (8001808 <adxl375_read+0x38>)
 80017f8:	f005 fa44 	bl	8006c84 <HAL_I2C_Mem_Read>
    return value;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000438 	.word	0x20000438

0800180c <adxl375_read_xyz>:

void adxl375_read_xyz(int16_t *x, int16_t *y, int16_t *z)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af04      	add	r7, sp, #16
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, ADXL375_REG_DATAX0, I2C_MEMADD_SIZE_8BIT, data_rec, 6, HAL_MAX_DELAY);
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	2306      	movs	r3, #6
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <adxl375_read_xyz+0x78>)
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	2232      	movs	r2, #50	@ 0x32
 800182a:	21a6      	movs	r1, #166	@ 0xa6
 800182c:	4816      	ldr	r0, [pc, #88]	@ (8001888 <adxl375_read_xyz+0x7c>)
 800182e:	f005 fa29 	bl	8006c84 <HAL_I2C_Mem_Read>

    *x = (int16_t)((data_rec[1] << 8) | data_rec[0]);
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <adxl375_read_xyz+0x78>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	b21b      	sxth	r3, r3
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b21a      	sxth	r2, r3
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <adxl375_read_xyz+0x78>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b21b      	sxth	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b21a      	sxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data_rec[3] << 8) | data_rec[2]);
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <adxl375_read_xyz+0x78>)
 800184c:	78db      	ldrb	r3, [r3, #3]
 800184e:	b21b      	sxth	r3, r3
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <adxl375_read_xyz+0x78>)
 8001856:	789b      	ldrb	r3, [r3, #2]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21a      	sxth	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data_rec[5] << 8) | data_rec[4]);
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <adxl375_read_xyz+0x78>)
 8001864:	795b      	ldrb	r3, [r3, #5]
 8001866:	b21b      	sxth	r3, r3
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <adxl375_read_xyz+0x78>)
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	b21b      	sxth	r3, r3
 8001872:	4313      	orrs	r3, r2
 8001874:	b21a      	sxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	801a      	strh	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000348 	.word	0x20000348
 8001888:	20000438 	.word	0x20000438

0800188c <adxl375_init>:

void adxl375_init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
    chipid = adxl375_read(ADXL375_REG_DEVID);  // Read device ID (should be 0xE5)
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff ff9d 	bl	80017d0 <adxl375_read>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <adxl375_init+0x30>)
 800189c:	701a      	strb	r2, [r3, #0]

    adxl375_write(ADXL375_REG_DATA_FORMAT, 0x0B); // (0x0B = 00001011)
 800189e:	210b      	movs	r1, #11
 80018a0:	2031      	movs	r0, #49	@ 0x31
 80018a2:	f7ff ff79 	bl	8001798 <adxl375_write>
    adxl375_write(ADXL375_REG_BW_RATE, 0x0A);     // Set Output Data Rate to 100 Hz (0x0A = 00001010)
 80018a6:	210a      	movs	r1, #10
 80018a8:	202c      	movs	r0, #44	@ 0x2c
 80018aa:	f7ff ff75 	bl	8001798 <adxl375_write>
    adxl375_write(ADXL375_REG_POWER_CTL, 0x08);   // Set Measure bit (00001000)
 80018ae:	2108      	movs	r1, #8
 80018b0:	202d      	movs	r0, #45	@ 0x2d
 80018b2:	f7ff ff71 	bl	8001798 <adxl375_write>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000034e 	.word	0x2000034e

080018c0 <adxl375_write_offsets>:
    }
}

// New functions for offset registers
void adxl375_write_offsets(int8_t ofx, int8_t ofy, int8_t ofz)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	460b      	mov	r3, r1
 80018cc:	71bb      	strb	r3, [r7, #6]
 80018ce:	4613      	mov	r3, r2
 80018d0:	717b      	strb	r3, [r7, #5]
    adxl375_write(ADXL375_REG_OFSX, (uint8_t)ofx);
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4619      	mov	r1, r3
 80018d6:	201e      	movs	r0, #30
 80018d8:	f7ff ff5e 	bl	8001798 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSY, (uint8_t)ofy);
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	4619      	mov	r1, r3
 80018e0:	201f      	movs	r0, #31
 80018e2:	f7ff ff59 	bl	8001798 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSZ, (uint8_t)ofz);
 80018e6:	797b      	ldrb	r3, [r7, #5]
 80018e8:	4619      	mov	r1, r3
 80018ea:	2020      	movs	r0, #32
 80018ec:	f7ff ff54 	bl	8001798 <adxl375_write>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <adxl375_read_offsets>:

void adxl375_read_offsets(int8_t *ofx, int8_t *ofy, int8_t *ofz)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
    if (ofx != NULL) {
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <adxl375_read_offsets+0x20>
        *ofx = (int8_t)adxl375_read(ADXL375_REG_OFSX);
 800190a:	201e      	movs	r0, #30
 800190c:	f7ff ff60 	bl	80017d0 <adxl375_read>
 8001910:	4603      	mov	r3, r0
 8001912:	b25a      	sxtb	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	701a      	strb	r2, [r3, #0]
    }
    if (ofy != NULL) {
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <adxl375_read_offsets+0x34>
        *ofy = (int8_t)adxl375_read(ADXL375_REG_OFSY);
 800191e:	201f      	movs	r0, #31
 8001920:	f7ff ff56 	bl	80017d0 <adxl375_read>
 8001924:	4603      	mov	r3, r0
 8001926:	b25a      	sxtb	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	701a      	strb	r2, [r3, #0]
    }
    if (ofz != NULL) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <adxl375_read_offsets+0x48>
        *ofz = (int8_t)adxl375_read(ADXL375_REG_OFSZ);
 8001932:	2020      	movs	r0, #32
 8001934:	f7ff ff4c 	bl	80017d0 <adxl375_read>
 8001938:	4603      	mov	r3, r0
 800193a:	b25a      	sxtb	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	701a      	strb	r2, [r3, #0]
    }
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <a_bmp390_iic_spi_read>:
 *             - 0 success
 *             - 1 iic spi read failed
 * @note       none
 */
static uint8_t a_bmp390_iic_spi_read(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	461a      	mov	r2, r3
 8001954:	460b      	mov	r3, r1
 8001956:	72fb      	strb	r3, [r7, #11]
 8001958:	4613      	mov	r3, r2
 800195a:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                      /* iic interface */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10f      	bne.n	8001986 <a_bmp390_iic_spi_read+0x3e>
    {
        if (handle->iic_read(handle->iic_addr, reg, buf, len) != 0)                   /* iic read */
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	7818      	ldrb	r0, [r3, #0]
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	7af9      	ldrb	r1, [r7, #11]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	47a0      	blx	r4
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <a_bmp390_iic_spi_read+0x3a>
        {
            return 1;                                                                 /* return error */
 800197e:	2301      	movs	r3, #1
 8001980:	e029      	b.n	80019d6 <a_bmp390_iic_spi_read+0x8e>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8001982:	2300      	movs	r3, #0
 8001984:	e027      	b.n	80019d6 <a_bmp390_iic_spi_read+0x8e>
        }
    }
    else                                                                              /* spi interface */
    {
        reg |= 1 << 7;                                                                /* set read mode */
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800198c:	72fb      	strb	r3, [r7, #11]
        if (handle->spi_read(reg, handle->buf, 
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	1c51      	adds	r1, r2, #1
 8001998:	893a      	ldrh	r2, [r7, #8]
 800199a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800199e:	bf28      	it	cs
 80019a0:	f44f 7200 	movcs.w	r2, #512	@ 0x200
 80019a4:	b292      	uxth	r2, r2
 80019a6:	3201      	adds	r2, #1
 80019a8:	b292      	uxth	r2, r2
 80019aa:	7af8      	ldrb	r0, [r7, #11]
 80019ac:	4798      	blx	r3
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <a_bmp390_iic_spi_read+0x70>
                             len > 512 ? (512 + 1) : (len + 1)) != 0)                 /* spi read */
        {
            return 1;                                                                 /* return error */
 80019b4:	2301      	movs	r3, #1
 80019b6:	e00e      	b.n	80019d6 <a_bmp390_iic_spi_read+0x8e>
        }
        memcpy(buf, handle->buf+1, (len > 512) ? 512 : len);                          /* copy data */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	1c59      	adds	r1, r3, #1
 80019be:	893b      	ldrh	r3, [r7, #8]
 80019c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019c4:	bf28      	it	cs
 80019c6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f009 f94f 	bl	800ac72 <memcpy>
        
        return 0;                                                                     /* success return 0 */
 80019d4:	2300      	movs	r3, #0
    }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd90      	pop	{r4, r7, pc}

080019de <a_bmp390_iic_spi_write>:
 *            - 0 success
 *            - 1 iic spi write failed
 * @note      none
 */
static uint8_t a_bmp390_iic_spi_write(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80019de:	b590      	push	{r4, r7, lr}
 80019e0:	b087      	sub	sp, #28
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	461a      	mov	r2, r3
 80019ea:	460b      	mov	r3, r1
 80019ec:	72fb      	strb	r3, [r7, #11]
 80019ee:	4613      	mov	r3, r2
 80019f0:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                             /* iic interface */
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d11f      	bne.n	8001a3c <a_bmp390_iic_spi_write+0x5e>
    {
        uint16_t i;
        
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 80019fc:	2300      	movs	r3, #0
 80019fe:	82fb      	strh	r3, [r7, #22]
 8001a00:	e016      	b.n	8001a30 <a_bmp390_iic_spi_write+0x52>
        {
            if (handle->iic_write(handle->iic_addr, 
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f8d3 4210 	ldr.w	r4, [r3, #528]	@ 0x210
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	7818      	ldrb	r0, [r3, #0]
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	4413      	add	r3, r2
 8001a14:	b2d9      	uxtb	r1, r3
 8001a16:	8afb      	ldrh	r3, [r7, #22]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	441a      	add	r2, r3
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	47a0      	blx	r4
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <a_bmp390_iic_spi_write+0x4c>
                                  (uint8_t)(reg + i), buf + i, 1) != 0)      /* iic write */
            {
                return 1;                                                    /* return error */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e029      	b.n	8001a7e <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001a2a:	8afb      	ldrh	r3, [r7, #22]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	82fb      	strh	r3, [r7, #22]
 8001a30:	8afa      	ldrh	r2, [r7, #22]
 8001a32:	893b      	ldrh	r3, [r7, #8]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3e4      	bcc.n	8001a02 <a_bmp390_iic_spi_write+0x24>
            }
        }
        
        return 0;                                                            /* success return 0 */
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e020      	b.n	8001a7e <a_bmp390_iic_spi_write+0xa0>
    }
    else
    {
        uint16_t i;
        
        reg &= ~(1 << 7);                                                    /* write mode */
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a42:	72fb      	strb	r3, [r7, #11]
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001a44:	2300      	movs	r3, #0
 8001a46:	82bb      	strh	r3, [r7, #20]
 8001a48:	e014      	b.n	8001a74 <a_bmp390_iic_spi_write+0x96>
        {
            if (handle->spi_write((uint8_t)(reg + i), buf + i, 1) != 0)      /* spi write */
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8001a50:	8aba      	ldrh	r2, [r7, #20]
 8001a52:	b2d1      	uxtb	r1, r2
 8001a54:	7afa      	ldrb	r2, [r7, #11]
 8001a56:	440a      	add	r2, r1
 8001a58:	b2d0      	uxtb	r0, r2
 8001a5a:	8aba      	ldrh	r2, [r7, #20]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4411      	add	r1, r2
 8001a60:	2201      	movs	r2, #1
 8001a62:	4798      	blx	r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <a_bmp390_iic_spi_write+0x90>
            {
                return 1;                                                    /* return error */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e007      	b.n	8001a7e <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001a6e:	8abb      	ldrh	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	82bb      	strh	r3, [r7, #20]
 8001a74:	8aba      	ldrh	r2, [r7, #20]
 8001a76:	893b      	ldrh	r3, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d3e6      	bcc.n	8001a4a <a_bmp390_iic_spi_write+0x6c>
            }
        }
        
        return 0;                                                            /* success return 0 */
 8001a7c:	2300      	movs	r3, #0
    }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
	...

08001a88 <a_bmp390_get_calibration_data>:
 *            - 0 success
 *            - 1 get calibration data failed
 * @note      none
 */
static uint8_t a_bmp390_get_calibration_data(bmp390_handle_t *handle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    uint8_t buf[2];
    
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T1_L, (uint8_t *)buf, 2) != 0)  /* read t1 */
 8001a90:	f107 020c 	add.w	r2, r7, #12
 8001a94:	2302      	movs	r3, #2
 8001a96:	2131      	movs	r1, #49	@ 0x31
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff55 	bl	8001948 <a_bmp390_iic_spi_read>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <a_bmp390_get_calibration_data+0x2a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001aaa:	48a8      	ldr	r0, [pc, #672]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001aac:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e154      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t1 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t1 */
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	7b3b      	ldrb	r3, [r7, #12]
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8a3 2232 	strh.w	r2, [r3, #562]	@ 0x232
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T2_L, (uint8_t *)buf, 2) != 0)  /* read t2 */
 8001aca:	f107 020c 	add.w	r2, r7, #12
 8001ace:	2302      	movs	r3, #2
 8001ad0:	2133      	movs	r1, #51	@ 0x33
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff38 	bl	8001948 <a_bmp390_iic_spi_read>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <a_bmp390_get_calibration_data+0x64>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001ae4:	4899      	ldr	r0, [pc, #612]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001ae6:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e137      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t2 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t2 */
 8001aec:	7b7b      	ldrb	r3, [r7, #13]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	7b3b      	ldrb	r3, [r7, #12]
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f8a3 2234 	strh.w	r2, [r3, #564]	@ 0x234
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T3, (uint8_t *)buf, 1) != 0)    /* read t3 */
 8001b04:	f107 020c 	add.w	r2, r7, #12
 8001b08:	2301      	movs	r3, #1
 8001b0a:	2135      	movs	r1, #53	@ 0x35
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff1b 	bl	8001948 <a_bmp390_iic_spi_read>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <a_bmp390_get_calibration_data+0x9e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001b1e:	488b      	ldr	r0, [pc, #556]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001b20:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e11a      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t3 = (int8_t)(buf[0]);                                                       /* set t3 */
 8001b26:	7b3b      	ldrb	r3, [r7, #12]
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P1_L, (uint8_t *)buf, 2) != 0)  /* read p1 */
 8001b30:	f107 020c 	add.w	r2, r7, #12
 8001b34:	2302      	movs	r3, #2
 8001b36:	2136      	movs	r1, #54	@ 0x36
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff05 	bl	8001948 <a_bmp390_iic_spi_read>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <a_bmp390_get_calibration_data+0xca>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001b4a:	4880      	ldr	r0, [pc, #512]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001b4c:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e104      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p1 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p1 */
 8001b52:	7b7b      	ldrb	r3, [r7, #13]
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	7b3b      	ldrb	r3, [r7, #12]
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P2_L, (uint8_t *)buf, 2) != 0)  /* read p2 */
 8001b68:	f107 020c 	add.w	r2, r7, #12
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	2138      	movs	r1, #56	@ 0x38
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fee9 	bl	8001948 <a_bmp390_iic_spi_read>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <a_bmp390_get_calibration_data+0x102>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001b82:	4872      	ldr	r0, [pc, #456]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001b84:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0e8      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p2 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p2 */
 8001b8a:	7b7b      	ldrb	r3, [r7, #13]
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	7b3b      	ldrb	r3, [r7, #12]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8a3 223a 	strh.w	r2, [r3, #570]	@ 0x23a
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P3, (uint8_t *)buf, 1) != 0)    /* read p3 */
 8001ba0:	f107 020c 	add.w	r2, r7, #12
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	213a      	movs	r1, #58	@ 0x3a
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fecd 	bl	8001948 <a_bmp390_iic_spi_read>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <a_bmp390_get_calibration_data+0x13a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001bba:	4864      	ldr	r0, [pc, #400]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001bbc:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0cc      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p3 = (int8_t)(buf[0]);                                                       /* set p3 */
 8001bc2:	7b3b      	ldrb	r3, [r7, #12]
 8001bc4:	b25a      	sxtb	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P4, (uint8_t *)buf, 1) != 0)    /* read p4 */
 8001bcc:	f107 020c 	add.w	r2, r7, #12
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	213b      	movs	r1, #59	@ 0x3b
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff feb7 	bl	8001948 <a_bmp390_iic_spi_read>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <a_bmp390_get_calibration_data+0x166>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001be6:	4859      	ldr	r0, [pc, #356]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001be8:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0b6      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p4 = (int8_t)(buf[0]);                                                       /* set p4 */
 8001bee:	7b3b      	ldrb	r3, [r7, #12]
 8001bf0:	b25a      	sxtb	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P5_L, (uint8_t *)buf, 2) != 0)  /* read p5 */
 8001bf8:	f107 020c 	add.w	r2, r7, #12
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	213c      	movs	r1, #60	@ 0x3c
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fea1 	bl	8001948 <a_bmp390_iic_spi_read>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <a_bmp390_get_calibration_data+0x192>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001c12:	484e      	ldr	r0, [pc, #312]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001c14:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0a0      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p5 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p5 */
 8001c1a:	7b7b      	ldrb	r3, [r7, #13]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	7b3b      	ldrb	r3, [r7, #12]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8a3 223e 	strh.w	r2, [r3, #574]	@ 0x23e
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P6_L, (uint8_t *)buf, 2) != 0)  /* read p6l */
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	2302      	movs	r3, #2
 8001c38:	213e      	movs	r1, #62	@ 0x3e
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fe84 	bl	8001948 <a_bmp390_iic_spi_read>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <a_bmp390_get_calibration_data+0x1cc>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001c4c:	483f      	ldr	r0, [pc, #252]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001c4e:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001c50:	2301      	movs	r3, #1
 8001c52:	e083      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p6 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p6 */
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	7b3b      	ldrb	r3, [r7, #12]
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P7, (uint8_t *)buf, 1) != 0)    /* read p7 */
 8001c6c:	f107 020c 	add.w	r2, r7, #12
 8001c70:	2301      	movs	r3, #1
 8001c72:	2140      	movs	r1, #64	@ 0x40
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fe67 	bl	8001948 <a_bmp390_iic_spi_read>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <a_bmp390_get_calibration_data+0x206>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001c86:	4831      	ldr	r0, [pc, #196]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001c88:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e066      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p7 = (int8_t)(buf[0]);                                                       /* set p7 */
 8001c8e:	7b3b      	ldrb	r3, [r7, #12]
 8001c90:	b25a      	sxtb	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P8, (uint8_t *)buf, 1) != 0)    /* read p8 */
 8001c98:	f107 020c 	add.w	r2, r7, #12
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2141      	movs	r1, #65	@ 0x41
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fe51 	bl	8001948 <a_bmp390_iic_spi_read>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <a_bmp390_get_calibration_data+0x232>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001cb2:	4826      	ldr	r0, [pc, #152]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001cb4:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e050      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p8 = (int8_t)(buf[0]);                                                       /* set p8 */
 8001cba:	7b3b      	ldrb	r3, [r7, #12]
 8001cbc:	b25a      	sxtb	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P9_L, (uint8_t *)buf, 2) != 0)  /* read p9l */
 8001cc4:	f107 020c 	add.w	r2, r7, #12
 8001cc8:	2302      	movs	r3, #2
 8001cca:	2142      	movs	r1, #66	@ 0x42
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fe3b 	bl	8001948 <a_bmp390_iic_spi_read>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <a_bmp390_get_calibration_data+0x25e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001cde:	481b      	ldr	r0, [pc, #108]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001ce0:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e03a      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p9 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p9 */
 8001ce6:	7b7b      	ldrb	r3, [r7, #13]
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P10, (uint8_t *)buf, 1) != 0)   /* read p10 */
 8001cfc:	f107 020c 	add.w	r2, r7, #12
 8001d00:	2301      	movs	r3, #1
 8001d02:	2144      	movs	r1, #68	@ 0x44
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fe1f 	bl	8001948 <a_bmp390_iic_spi_read>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <a_bmp390_get_calibration_data+0x296>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001d18:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e01e      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p10 = (int8_t)(buf[0]);                                                      /* set p10 */
 8001d1e:	7b3b      	ldrb	r3, [r7, #12]
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f883 2246 	strb.w	r2, [r3, #582]	@ 0x246
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P11, (uint8_t *)buf, 1) != 0)   /* read p11 */
 8001d28:	f107 020c 	add.w	r2, r7, #12
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2145      	movs	r1, #69	@ 0x45
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fe09 	bl	8001948 <a_bmp390_iic_spi_read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <a_bmp390_get_calibration_data+0x2c8>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001d42:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <a_bmp390_get_calibration_data+0x2c4>)
 8001d44:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e008      	b.n	8001d5c <a_bmp390_get_calibration_data+0x2d4>
 8001d4a:	bf00      	nop
 8001d4c:	0800eb10 	.word	0x0800eb10
    }
    handle->p11 = (int8_t)(buf[0]);                                                      /* set p11 */
 8001d50:	7b3b      	ldrb	r3, [r7, #12]
 8001d52:	b25a      	sxtb	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247

    return 0;                                                                            /* success return 0 */
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <a_bmp390_compensate_temperature>:
 * @param[in] data raw temperature
 * @return    compensated temperature
 * @note      none
 */
static int64_t a_bmp390_compensate_temperature(bmp390_handle_t *handle, uint32_t data)
{ 
 8001d64:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d68:	b0a5      	sub	sp, #148	@ 0x94
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6578      	str	r0, [r7, #84]	@ 0x54
 8001d6e:	6539      	str	r1, [r7, #80]	@ 0x50
    int64_t partial_data5;
    int64_t partial_data6;
    int64_t comp_temp;

    /* calculate compensate temperature */
    partial_data1 = (uint64_t)(data - (256 * (uint64_t)(handle->t1)));
 8001d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d72:	2200      	movs	r2, #0
 8001d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d76:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7a:	f8b3 3232 	ldrh.w	r3, [r3, #562]	@ 0x232
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	461c      	mov	r4, r3
 8001d84:	4615      	mov	r5, r2
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	022b      	lsls	r3, r5, #8
 8001d90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001d94:	0222      	lsls	r2, r4, #8
 8001d96:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	1a89      	subs	r1, r1, r2
 8001d9e:	61b9      	str	r1, [r7, #24]
 8001da0:	4629      	mov	r1, r5
 8001da2:	eb61 0303 	sbc.w	r3, r1, r3
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001dac:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    partial_data2 = (uint64_t)(handle->t2 * partial_data1);
 8001db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db2:	f8b3 3234 	ldrh.w	r3, [r3, #564]	@ 0x234
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2200      	movs	r2, #0
 8001dba:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dbc:	637a      	str	r2, [r7, #52]	@ 0x34
 8001dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	fb02 f203 	mul.w	r2, r2, r3
 8001dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	441a      	add	r2, r3
 8001dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ddc:	4621      	mov	r1, r4
 8001dde:	fba3 ab01 	umull	sl, fp, r3, r1
 8001de2:	eb02 030b 	add.w	r3, r2, fp
 8001de6:	469b      	mov	fp, r3
 8001de8:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
 8001dec:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
    partial_data3 = (uint64_t)(partial_data1 * partial_data1);
 8001df0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001df8:	fb03 f102 	mul.w	r1, r3, r2
 8001dfc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	18ca      	adds	r2, r1, r3
 8001e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e0e:	fba3 1303 	umull	r1, r3, r3, r3
 8001e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e14:	460b      	mov	r3, r1
 8001e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e1a:	18d3      	adds	r3, r2, r3
 8001e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e1e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001e22:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8001e26:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    partial_data4 = (int64_t)(((int64_t)partial_data3) * ((int64_t)handle->t3));
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2c:	f993 3236 	ldrsb.w	r3, [r3, #566]	@ 0x236
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	17da      	asrs	r2, r3, #31
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e3c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001e40:	4629      	mov	r1, r5
 8001e42:	fb02 f001 	mul.w	r0, r2, r1
 8001e46:	4621      	mov	r1, r4
 8001e48:	fb01 f103 	mul.w	r1, r1, r3
 8001e4c:	4401      	add	r1, r0
 8001e4e:	4620      	mov	r0, r4
 8001e50:	fba0 2302 	umull	r2, r3, r0, r2
 8001e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e56:	4613      	mov	r3, r2
 8001e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5c:	18cb      	adds	r3, r1, r3
 8001e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e60:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001e64:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8001e68:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    partial_data5 = ((int64_t)(((int64_t)partial_data2) * 262144) + (int64_t)partial_data4);
 8001e6c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	048b      	lsls	r3, r1, #18
 8001e7a:	ea43 3390 	orr.w	r3, r3, r0, lsr #14
 8001e7e:	0482      	lsls	r2, r0, #18
 8001e80:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001e84:	1884      	adds	r4, r0, r2
 8001e86:	613c      	str	r4, [r7, #16]
 8001e88:	eb41 0303 	adc.w	r3, r1, r3
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e92:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    partial_data6 = (int64_t)(((int64_t)partial_data5) / 4294967296U);
 8001e96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    handle->t_fine = partial_data6;
 8001eaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001eac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001eb0:	e9c1 2392 	strd	r2, r3, [r1, #584]	@ 0x248
    comp_temp = (int64_t)((partial_data6 * 25)  / 16384);
 8001eb4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	1894      	adds	r4, r2, r2
 8001ebe:	60bc      	str	r4, [r7, #8]
 8001ec0:	415b      	adcs	r3, r3
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ec8:	eb12 0800 	adds.w	r8, r2, r0
 8001ecc:	eb43 0901 	adc.w	r9, r3, r1
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001edc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee4:	4690      	mov	r8, r2
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	eb18 0300 	adds.w	r3, r8, r0
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	eb49 0301 	adc.w	r3, r9, r1
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da08      	bge.n	8001f0e <a_bmp390_compensate_temperature+0x1aa>
 8001efc:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8001f00:	1851      	adds	r1, r2, r1
 8001f02:	6039      	str	r1, [r7, #0]
 8001f04:	f143 0300 	adc.w	r3, r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f0e:	f04f 0000 	mov.w	r0, #0
 8001f12:	f04f 0100 	mov.w	r1, #0
 8001f16:	0b90      	lsrs	r0, r2, #14
 8001f18:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
 8001f1c:	1399      	asrs	r1, r3, #14
 8001f1e:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
    
    return comp_temp;
 8001f22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	3794      	adds	r7, #148	@ 0x94
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f32:	4770      	bx	lr

08001f34 <a_bmp390_compensate_pressure>:
 * @param[in] data raw pressure
 * @return    compensated pressure
 * @note      none
 */
static int64_t a_bmp390_compensate_pressure(bmp390_handle_t *handle, uint32_t data)
{
 8001f34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f38:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
 8001f42:	f8c7 11b8 	str.w	r1, [r7, #440]	@ 0x1b8
    int64_t offset;
    int64_t sensitivity;
    uint64_t comp_press;

    /* calculate compensate pressure */
    partial_data1 = handle->t_fine * handle->t_fine;
 8001f46:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001f4a:	e9d3 0192 	ldrd	r0, r1, [r3, #584]	@ 0x248
 8001f4e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001f52:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8001f56:	fb02 f501 	mul.w	r5, r2, r1
 8001f5a:	fb00 f403 	mul.w	r4, r0, r3
 8001f5e:	442c      	add	r4, r5
 8001f60:	fba0 8902 	umull	r8, r9, r0, r2
 8001f64:	eb04 0309 	add.w	r3, r4, r9
 8001f68:	4699      	mov	r9, r3
 8001f6a:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
 8001f6e:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
    partial_data2 = partial_data1 / 64;
 8001f72:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da07      	bge.n	8001f8a <a_bmp390_compensate_pressure+0x56>
 8001f7a:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 8001f7e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001f80:	f143 0300 	adc.w	r3, r3, #0
 8001f84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f86:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001f8a:	f04f 0000 	mov.w	r0, #0
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	0990      	lsrs	r0, r2, #6
 8001f94:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8001f98:	1199      	asrs	r1, r3, #6
 8001f9a:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * handle->t_fine) / 256;
 8001f9e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001fa2:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8001fa6:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8001faa:	fb03 f001 	mul.w	r0, r3, r1
 8001fae:	f8d7 11fc 	ldr.w	r1, [r7, #508]	@ 0x1fc
 8001fb2:	fb02 f101 	mul.w	r1, r2, r1
 8001fb6:	4408      	add	r0, r1
 8001fb8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8001fbc:	fba1 ab02 	umull	sl, fp, r1, r2
 8001fc0:	eb00 030b 	add.w	r3, r0, fp
 8001fc4:	469b      	mov	fp, r3
 8001fc6:	4652      	mov	r2, sl
 8001fc8:	465b      	mov	r3, fp
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da07      	bge.n	8001fde <a_bmp390_compensate_pressure+0xaa>
 8001fce:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001fd2:	6739      	str	r1, [r7, #112]	@ 0x70
 8001fd4:	f143 0300 	adc.w	r3, r3, #0
 8001fd8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fde:	f04f 0000 	mov.w	r0, #0
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	0a10      	lsrs	r0, r2, #8
 8001fe8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fec:	1219      	asrs	r1, r3, #8
 8001fee:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (handle->p8 * partial_data3) / 32;
 8001ff2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001ff6:	f993 3243 	ldrsb.w	r3, [r3, #579]	@ 0x243
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	17da      	asrs	r2, r3, #31
 8001ffe:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002002:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002006:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800200a:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 800200e:	462a      	mov	r2, r5
 8002010:	fb02 f203 	mul.w	r2, r2, r3
 8002014:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002018:	4621      	mov	r1, r4
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	441a      	add	r2, r3
 8002020:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002024:	4621      	mov	r1, r4
 8002026:	fba3 1301 	umull	r1, r3, r3, r1
 800202a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800202e:	460b      	mov	r3, r1
 8002030:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002034:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002038:	18d3      	adds	r3, r2, r3
 800203a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800203e:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8002042:	2b00      	cmp	r3, #0
 8002044:	da07      	bge.n	8002056 <a_bmp390_compensate_pressure+0x122>
 8002046:	f112 011f 	adds.w	r1, r2, #31
 800204a:	66b9      	str	r1, [r7, #104]	@ 0x68
 800204c:	f143 0300 	adc.w	r3, r3, #0
 8002050:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002052:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002056:	f04f 0000 	mov.w	r0, #0
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	0950      	lsrs	r0, r2, #5
 8002060:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8002064:	1159      	asrs	r1, r3, #5
 8002066:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (handle->p7 * partial_data1) * 16;
 800206a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800206e:	f993 3242 	ldrsb.w	r3, [r3, #578]	@ 0x242
 8002072:	b25b      	sxtb	r3, r3
 8002074:	17da      	asrs	r2, r3, #31
 8002076:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800207a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800207e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002082:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8002086:	462a      	mov	r2, r5
 8002088:	fb02 f203 	mul.w	r2, r2, r3
 800208c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002090:	4621      	mov	r1, r4
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	441a      	add	r2, r3
 8002098:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800209c:	4621      	mov	r1, r4
 800209e:	fba3 1301 	umull	r1, r3, r3, r1
 80020a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80020a6:	460b      	mov	r3, r1
 80020a8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80020ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80020b0:	18d3      	adds	r3, r2, r3
 80020b2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 80020c2:	4629      	mov	r1, r5
 80020c4:	010b      	lsls	r3, r1, #4
 80020c6:	4621      	mov	r1, r4
 80020c8:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80020cc:	4621      	mov	r1, r4
 80020ce:	010a      	lsls	r2, r1, #4
 80020d0:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    partial_data6 = (handle->p6 * handle->t_fine) * 4194304;
 80020d4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80020d8:	f8b3 3240 	ldrh.w	r3, [r3, #576]	@ 0x240
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80020e4:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80020e8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80020ec:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 80020f0:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 80020f4:	4629      	mov	r1, r5
 80020f6:	fb02 f001 	mul.w	r0, r2, r1
 80020fa:	4621      	mov	r1, r4
 80020fc:	fb01 f103 	mul.w	r1, r1, r3
 8002100:	4401      	add	r1, r0
 8002102:	4620      	mov	r0, r4
 8002104:	fba0 2302 	umull	r2, r3, r0, r2
 8002108:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800210c:	4613      	mov	r3, r2
 800210e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002112:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002116:	18cb      	adds	r3, r1, r3
 8002118:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8002128:	4629      	mov	r1, r5
 800212a:	058b      	lsls	r3, r1, #22
 800212c:	4621      	mov	r1, r4
 800212e:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8002132:	4621      	mov	r1, r4
 8002134:	058a      	lsls	r2, r1, #22
 8002136:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    offset = (int64_t)((int64_t)(handle->p5) * (int64_t)140737488355328U) + partial_data4 + partial_data5 + partial_data6;
 800213a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800213e:	f8b3 323e 	ldrh.w	r3, [r3, #574]	@ 0x23e
 8002142:	b29b      	uxth	r3, r3
 8002144:	2200      	movs	r2, #0
 8002146:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800214a:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800214e:	f04f 0000 	mov.w	r0, #0
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800215a:	03d9      	lsls	r1, r3, #15
 800215c:	2000      	movs	r0, #0
 800215e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8002162:	1884      	adds	r4, r0, r2
 8002164:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 8002168:	eb41 0303 	adc.w	r3, r1, r3
 800216c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002170:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8002174:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8002178:	4621      	mov	r1, r4
 800217a:	1889      	adds	r1, r1, r2
 800217c:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8002180:	4629      	mov	r1, r5
 8002182:	eb43 0101 	adc.w	r1, r3, r1
 8002186:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 800218a:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 800218e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8002192:	4621      	mov	r1, r4
 8002194:	1851      	adds	r1, r2, r1
 8002196:	6639      	str	r1, [r7, #96]	@ 0x60
 8002198:	4629      	mov	r1, r5
 800219a:	eb43 0101 	adc.w	r1, r3, r1
 800219e:	6679      	str	r1, [r7, #100]	@ 0x64
 80021a0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80021a4:	e9c7 3474 	strd	r3, r4, [r7, #464]	@ 0x1d0
    partial_data2 = (((int64_t)handle->p4) * partial_data3) / 32;
 80021a8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80021ac:	f993 323d 	ldrsb.w	r3, [r3, #573]	@ 0x23d
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	17da      	asrs	r2, r3, #31
 80021b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80021b8:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80021bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021c0:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80021c4:	462a      	mov	r2, r5
 80021c6:	fb02 f203 	mul.w	r2, r2, r3
 80021ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80021ce:	4621      	mov	r1, r4
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	441a      	add	r2, r3
 80021d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021da:	4621      	mov	r1, r4
 80021dc:	fba3 1301 	umull	r1, r3, r3, r1
 80021e0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80021e4:	460b      	mov	r3, r1
 80021e6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80021ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80021ee:	18d3      	adds	r3, r2, r3
 80021f0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80021f4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	da07      	bge.n	800220c <a_bmp390_compensate_pressure+0x2d8>
 80021fc:	f112 011f 	adds.w	r1, r2, #31
 8002200:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002202:	f143 0300 	adc.w	r3, r3, #0
 8002206:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002208:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800220c:	f04f 0000 	mov.w	r0, #0
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	0950      	lsrs	r0, r2, #5
 8002216:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800221a:	1159      	asrs	r1, r3, #5
 800221c:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data4 = (handle->p3 * partial_data1) * 4;
 8002220:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002224:	f993 323c 	ldrsb.w	r3, [r3, #572]	@ 0x23c
 8002228:	b25b      	sxtb	r3, r3
 800222a:	17da      	asrs	r2, r3, #31
 800222c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002230:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8002234:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002238:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 800223c:	462a      	mov	r2, r5
 800223e:	fb02 f203 	mul.w	r2, r2, r3
 8002242:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002246:	4621      	mov	r1, r4
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	441a      	add	r2, r3
 800224e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002252:	4621      	mov	r1, r4
 8002254:	fba3 1301 	umull	r1, r3, r3, r1
 8002258:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800225c:	460b      	mov	r3, r1
 800225e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002262:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002266:	18d3      	adds	r3, r2, r3
 8002268:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8002278:	4629      	mov	r1, r5
 800227a:	008b      	lsls	r3, r1, #2
 800227c:	4621      	mov	r1, r4
 800227e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002282:	4621      	mov	r1, r4
 8002284:	008a      	lsls	r2, r1, #2
 8002286:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
    partial_data5 = ((int64_t)(handle->p2) - 16384) * ((int64_t)handle->t_fine) * 2097152;
 800228a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800228e:	f9b3 323a 	ldrsh.w	r3, [r3, #570]	@ 0x23a
 8002292:	b21b      	sxth	r3, r3
 8002294:	17da      	asrs	r2, r3, #31
 8002296:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800229a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800229e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80022a2:	460b      	mov	r3, r1
 80022a4:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 80022a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80022ac:	4613      	mov	r3, r2
 80022ae:	f143 33ff 	adc.w	r3, r3, #4294967295
 80022b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80022b6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022ba:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 80022be:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80022c2:	4629      	mov	r1, r5
 80022c4:	fb02 f001 	mul.w	r0, r2, r1
 80022c8:	4621      	mov	r1, r4
 80022ca:	fb01 f103 	mul.w	r1, r1, r3
 80022ce:	4401      	add	r1, r0
 80022d0:	4620      	mov	r0, r4
 80022d2:	fba0 2302 	umull	r2, r3, r0, r2
 80022d6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80022da:	4613      	mov	r3, r2
 80022dc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80022e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80022e4:	18cb      	adds	r3, r1, r3
 80022e6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 80022f6:	4629      	mov	r1, r5
 80022f8:	054b      	lsls	r3, r1, #21
 80022fa:	4621      	mov	r1, r4
 80022fc:	ea43 23d1 	orr.w	r3, r3, r1, lsr #11
 8002300:	4621      	mov	r1, r4
 8002302:	054a      	lsls	r2, r1, #21
 8002304:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    sensitivity = (((int64_t)(handle->p1) - 16384) * (int64_t)70368744177664U) + partial_data2 + partial_data4 + partial_data5;
 8002308:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800230c:	f9b3 3238 	ldrsh.w	r3, [r3, #568]	@ 0x238
 8002310:	b21b      	sxth	r3, r3
 8002312:	17da      	asrs	r2, r3, #31
 8002314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002318:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800231c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002320:	460b      	mov	r3, r1
 8002322:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 8002326:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800232a:	4613      	mov	r3, r2
 800232c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002330:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002334:	f04f 0000 	mov.w	r0, #0
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002340:	0399      	lsls	r1, r3, #14
 8002342:	2000      	movs	r0, #0
 8002344:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8002348:	1884      	adds	r4, r0, r2
 800234a:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 800234e:	eb41 0303 	adc.w	r3, r1, r3
 8002352:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002356:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 800235a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800235e:	4621      	mov	r1, r4
 8002360:	1889      	adds	r1, r1, r2
 8002362:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8002366:	4629      	mov	r1, r5
 8002368:	eb43 0101 	adc.w	r1, r3, r1
 800236c:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8002370:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8002374:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002378:	4621      	mov	r1, r4
 800237a:	1851      	adds	r1, r2, r1
 800237c:	6539      	str	r1, [r7, #80]	@ 0x50
 800237e:	4629      	mov	r1, r5
 8002380:	eb43 0101 	adc.w	r1, r3, r1
 8002384:	6579      	str	r1, [r7, #84]	@ 0x54
 8002386:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800238a:	e9c7 3472 	strd	r3, r4, [r7, #456]	@ 0x1c8
    partial_data1 = (sensitivity / 16777216) * data;
 800238e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8002392:	2b00      	cmp	r3, #0
 8002394:	da08      	bge.n	80023a8 <a_bmp390_compensate_pressure+0x474>
 8002396:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800239a:	1851      	adds	r1, r2, r1
 800239c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800239e:	f143 0300 	adc.w	r3, r3, #0
 80023a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023a8:	f04f 0000 	mov.w	r0, #0
 80023ac:	f04f 0100 	mov.w	r1, #0
 80023b0:	0e10      	lsrs	r0, r2, #24
 80023b2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80023b6:	1619      	asrs	r1, r3, #24
 80023b8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80023bc:	2200      	movs	r2, #0
 80023be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023c6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80023ca:	4623      	mov	r3, r4
 80023cc:	fb03 f201 	mul.w	r2, r3, r1
 80023d0:	462b      	mov	r3, r5
 80023d2:	fb00 f303 	mul.w	r3, r0, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	4622      	mov	r2, r4
 80023da:	fba0 1202 	umull	r1, r2, r0, r2
 80023de:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80023e2:	460a      	mov	r2, r1
 80023e4:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 80023e8:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80023ec:	4413      	add	r3, r2
 80023ee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80023f2:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 80023f6:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
 80023fa:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
    partial_data2 = (int64_t)(handle->p10) * (int64_t)(handle->t_fine);
 80023fe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002402:	f993 3246 	ldrsb.w	r3, [r3, #582]	@ 0x246
 8002406:	b25b      	sxtb	r3, r3
 8002408:	17da      	asrs	r2, r3, #31
 800240a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800240e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002412:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002416:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800241a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800241e:	4629      	mov	r1, r5
 8002420:	fb02 f001 	mul.w	r0, r2, r1
 8002424:	4621      	mov	r1, r4
 8002426:	fb01 f103 	mul.w	r1, r1, r3
 800242a:	4401      	add	r1, r0
 800242c:	4620      	mov	r0, r4
 800242e:	fba0 2302 	umull	r2, r3, r0, r2
 8002432:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002436:	4613      	mov	r3, r2
 8002438:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800243c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002440:	18cb      	adds	r3, r1, r3
 8002442:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002446:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 800244a:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
 800244e:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
    partial_data3 = partial_data2 + (65536 * (int64_t)(handle->p9));
 8002452:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002456:	f9b3 3244 	ldrsh.w	r3, [r3, #580]	@ 0x244
 800245a:	b21b      	sxth	r3, r3
 800245c:	17da      	asrs	r2, r3, #31
 800245e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002462:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002466:	f04f 0000 	mov.w	r0, #0
 800246a:	f04f 0100 	mov.w	r1, #0
 800246e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002472:	462b      	mov	r3, r5
 8002474:	0419      	lsls	r1, r3, #16
 8002476:	4623      	mov	r3, r4
 8002478:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800247c:	4623      	mov	r3, r4
 800247e:	0418      	lsls	r0, r3, #16
 8002480:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8002484:	1814      	adds	r4, r2, r0
 8002486:	643c      	str	r4, [r7, #64]	@ 0x40
 8002488:	414b      	adcs	r3, r1
 800248a:	647b      	str	r3, [r7, #68]	@ 0x44
 800248c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002490:	e9c7 347c 	strd	r3, r4, [r7, #496]	@ 0x1f0
    partial_data4 = (partial_data3 * data) / 8192;
 8002494:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002498:	2200      	movs	r2, #0
 800249a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800249e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80024a6:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 80024aa:	462a      	mov	r2, r5
 80024ac:	fb02 f203 	mul.w	r2, r2, r3
 80024b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80024b4:	4621      	mov	r1, r4
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	441a      	add	r2, r3
 80024bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80024c0:	4621      	mov	r1, r4
 80024c2:	fba3 1301 	umull	r1, r3, r3, r1
 80024c6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80024ca:	460b      	mov	r3, r1
 80024cc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80024d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80024d4:	18d3      	adds	r3, r2, r3
 80024d6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80024da:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da08      	bge.n	80024f4 <a_bmp390_compensate_pressure+0x5c0>
 80024e2:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80024e6:	1851      	adds	r1, r2, r1
 80024e8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024ea:	f143 0300 	adc.w	r3, r3, #0
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024f4:	f04f 0000 	mov.w	r0, #0
 80024f8:	f04f 0100 	mov.w	r1, #0
 80024fc:	0b50      	lsrs	r0, r2, #13
 80024fe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002502:	1359      	asrs	r1, r3, #13
 8002504:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (partial_data4 * data) / 512;
 8002508:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800250c:	2200      	movs	r2, #0
 800250e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002512:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002516:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800251a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800251e:	462a      	mov	r2, r5
 8002520:	fb02 f203 	mul.w	r2, r2, r3
 8002524:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002528:	4621      	mov	r1, r4
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	441a      	add	r2, r3
 8002530:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002534:	4621      	mov	r1, r4
 8002536:	fba3 1301 	umull	r1, r3, r3, r1
 800253a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800253e:	460b      	mov	r3, r1
 8002540:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002544:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800254e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8002552:	2b00      	cmp	r3, #0
 8002554:	da08      	bge.n	8002568 <a_bmp390_compensate_pressure+0x634>
 8002556:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800255a:	1851      	adds	r1, r2, r1
 800255c:	6339      	str	r1, [r7, #48]	@ 0x30
 800255e:	f143 0300 	adc.w	r3, r3, #0
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
 8002564:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002568:	f04f 0000 	mov.w	r0, #0
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	0a50      	lsrs	r0, r2, #9
 8002572:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8002576:	1259      	asrs	r1, r3, #9
 8002578:	e9c7 0178 	strd	r0, r1, [r7, #480]	@ 0x1e0
    partial_data6 = (int64_t)((uint64_t)data * (uint64_t)data);
 800257c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002580:	2200      	movs	r2, #0
 8002582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002586:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800258a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002594:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002598:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800259c:	462b      	mov	r3, r5
 800259e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80025a2:	4642      	mov	r2, r8
 80025a4:	fb02 f203 	mul.w	r2, r2, r3
 80025a8:	464b      	mov	r3, r9
 80025aa:	4621      	mov	r1, r4
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	4622      	mov	r2, r4
 80025b4:	4641      	mov	r1, r8
 80025b6:	fba2 1201 	umull	r1, r2, r2, r1
 80025ba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80025be:	460a      	mov	r2, r1
 80025c0:	f8c7 2170 	str.w	r2, [r7, #368]	@ 0x170
 80025c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80025c8:	4413      	add	r3, r2
 80025ca:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80025ce:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 80025d2:	e9c7 3476 	strd	r3, r4, [r7, #472]	@ 0x1d8
    partial_data2 = ((int64_t)(handle->p11) * (int64_t)(partial_data6)) / 65536;
 80025d6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80025da:	f993 3247 	ldrsb.w	r3, [r3, #583]	@ 0x247
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	17da      	asrs	r2, r3, #31
 80025e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025ea:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80025ee:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80025f2:	462a      	mov	r2, r5
 80025f4:	fb02 f203 	mul.w	r2, r2, r3
 80025f8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80025fc:	4621      	mov	r1, r4
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	441a      	add	r2, r3
 8002604:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8002608:	4621      	mov	r1, r4
 800260a:	fba3 1301 	umull	r1, r3, r3, r1
 800260e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002612:	460b      	mov	r3, r1
 8002614:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002618:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800261c:	18d3      	adds	r3, r2, r3
 800261e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002622:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8002626:	2b00      	cmp	r3, #0
 8002628:	da08      	bge.n	800263c <a_bmp390_compensate_pressure+0x708>
 800262a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800262e:	1851      	adds	r1, r2, r1
 8002630:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002632:	f143 0300 	adc.w	r3, r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800263c:	f04f 0000 	mov.w	r0, #0
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	0c10      	lsrs	r0, r2, #16
 8002646:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800264a:	1419      	asrs	r1, r3, #16
 800264c:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * data) / 128;
 8002650:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002654:	2200      	movs	r2, #0
 8002656:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800265a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800265e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002662:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002666:	462a      	mov	r2, r5
 8002668:	fb02 f203 	mul.w	r2, r2, r3
 800266c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002670:	4621      	mov	r1, r4
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	441a      	add	r2, r3
 8002678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800267c:	4621      	mov	r1, r4
 800267e:	fba3 1301 	umull	r1, r3, r3, r1
 8002682:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002686:	460b      	mov	r3, r1
 8002688:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800268c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002696:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800269a:	2b00      	cmp	r3, #0
 800269c:	da07      	bge.n	80026ae <a_bmp390_compensate_pressure+0x77a>
 800269e:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 80026a2:	6239      	str	r1, [r7, #32]
 80026a4:	f143 0300 	adc.w	r3, r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ae:	f04f 0000 	mov.w	r0, #0
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	09d0      	lsrs	r0, r2, #7
 80026b8:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80026bc:	11d9      	asrs	r1, r3, #7
 80026be:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (offset / 4) + partial_data1 + partial_data5 + partial_data3;
 80026c2:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da06      	bge.n	80026d8 <a_bmp390_compensate_pressure+0x7a4>
 80026ca:	1cd1      	adds	r1, r2, #3
 80026cc:	61b9      	str	r1, [r7, #24]
 80026ce:	f143 0300 	adc.w	r3, r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d8:	f04f 0000 	mov.w	r0, #0
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	0890      	lsrs	r0, r2, #2
 80026e2:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80026e6:	1099      	asrs	r1, r3, #2
 80026e8:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80026ec:	1884      	adds	r4, r0, r2
 80026ee:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 80026f2:	eb41 0303 	adc.w	r3, r1, r3
 80026f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026fa:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80026fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002702:	4621      	mov	r1, r4
 8002704:	1889      	adds	r1, r1, r2
 8002706:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800270a:	4629      	mov	r1, r5
 800270c:	eb43 0101 	adc.w	r1, r3, r1
 8002710:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8002714:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8002718:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800271c:	4621      	mov	r1, r4
 800271e:	1851      	adds	r1, r2, r1
 8002720:	6139      	str	r1, [r7, #16]
 8002722:	4629      	mov	r1, r5
 8002724:	eb43 0101 	adc.w	r1, r3, r1
 8002728:	6179      	str	r1, [r7, #20]
 800272a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800272e:	e9c7 347a 	strd	r3, r4, [r7, #488]	@ 0x1e8
    comp_press = (((uint64_t)partial_data4 * 25) / (uint64_t)1099511627776U);
 8002732:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	1894      	adds	r4, r2, r2
 800273c:	60bc      	str	r4, [r7, #8]
 800273e:	415b      	adcs	r3, r3
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002746:	1814      	adds	r4, r2, r0
 8002748:	603c      	str	r4, [r7, #0]
 800274a:	414b      	adcs	r3, r1
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	e9d7 8900 	ldrd	r8, r9, [r7]
 800275a:	464c      	mov	r4, r9
 800275c:	00e3      	lsls	r3, r4, #3
 800275e:	4644      	mov	r4, r8
 8002760:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002764:	4644      	mov	r4, r8
 8002766:	00e2      	lsls	r2, r4, #3
 8002768:	4614      	mov	r4, r2
 800276a:	461d      	mov	r5, r3
 800276c:	4623      	mov	r3, r4
 800276e:	181b      	adds	r3, r3, r0
 8002770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002774:	462b      	mov	r3, r5
 8002776:	eb41 0303 	adc.w	r3, r1, r3
 800277a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800278a:	0a0a      	lsrs	r2, r1, #8
 800278c:	2300      	movs	r3, #0
 800278e:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    
    return comp_press;
 8002792:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
}
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 800279e:	46bd      	mov	sp, r7
 80027a0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027a4:	4770      	bx	lr
	...

080027a8 <bmp390_set_pressure>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <bmp390_set_pressure+0x16>
    {
        return 2;                                                                         /* return error */
 80027ba:	2302      	movs	r3, #2
 80027bc:	e037      	b.n	800282e <bmp390_set_pressure+0x86>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d001      	beq.n	80027cc <bmp390_set_pressure+0x24>
    {
        return 3;                                                                         /* return error */
 80027c8:	2303      	movs	r3, #3
 80027ca:	e030      	b.n	800282e <bmp390_set_pressure+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80027cc:	f107 020e 	add.w	r2, r7, #14
 80027d0:	2301      	movs	r3, #1
 80027d2:	211b      	movs	r1, #27
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff f8b7 	bl	8001948 <a_bmp390_iic_spi_read>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <bmp390_set_pressure+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80027ea:	4813      	ldr	r0, [pc, #76]	@ (8002838 <bmp390_set_pressure+0x90>)
 80027ec:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e01d      	b.n	800282e <bmp390_set_pressure+0x86>
    }
    prev &= ~(1 << 0);                                                                    /* clear config */
 80027f2:	7bbb      	ldrb	r3, [r7, #14]
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 0;                                                                  /* set config */
 80027fc:	7bba      	ldrb	r2, [r7, #14]
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	4313      	orrs	r3, r2
 8002802:	b2db      	uxtb	r3, r3
 8002804:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002806:	f107 020e 	add.w	r2, r7, #14
 800280a:	2301      	movs	r3, #1
 800280c:	211b      	movs	r1, #27
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff f8e5 	bl	80019de <a_bmp390_iic_spi_write>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <bmp390_set_pressure+0x84>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002824:	4805      	ldr	r0, [pc, #20]	@ (800283c <bmp390_set_pressure+0x94>)
 8002826:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <bmp390_set_pressure+0x86>
    }
    
    return 0;                                                                             /* success return 0 */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	0800ee54 	.word	0x0800ee54
 800283c:	0800ee7c 	.word	0x0800ee7c

08002840 <bmp390_set_temperature>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <bmp390_set_temperature+0x16>
    {
        return 2;                                                                         /* return error */
 8002852:	2302      	movs	r3, #2
 8002854:	e03c      	b.n	80028d0 <bmp390_set_temperature+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <bmp390_set_temperature+0x24>
    {
        return 3;                                                                         /* return error */
 8002860:	2303      	movs	r3, #3
 8002862:	e035      	b.n	80028d0 <bmp390_set_temperature+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002864:	f107 020e 	add.w	r2, r7, #14
 8002868:	2301      	movs	r3, #1
 800286a:	211b      	movs	r1, #27
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff f86b 	bl	8001948 <a_bmp390_iic_spi_read>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <bmp390_set_temperature+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002882:	4815      	ldr	r0, [pc, #84]	@ (80028d8 <bmp390_set_temperature+0x98>)
 8002884:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8002886:	2301      	movs	r3, #1
 8002888:	e022      	b.n	80028d0 <bmp390_set_temperature+0x90>
    }
    prev &= ~(1 << 1);                                                                    /* clear config */
 800288a:	7bbb      	ldrb	r3, [r7, #14]
 800288c:	f023 0302 	bic.w	r3, r3, #2
 8002890:	b2db      	uxtb	r3, r3
 8002892:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                  /* set config */
 8002894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	b25a      	sxtb	r2, r3
 800289c:	7bbb      	ldrb	r3, [r7, #14]
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80028a8:	f107 020e 	add.w	r2, r7, #14
 80028ac:	2301      	movs	r3, #1
 80028ae:	211b      	movs	r1, #27
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff f894 	bl	80019de <a_bmp390_iic_spi_write>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <bmp390_set_temperature+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80028c6:	4805      	ldr	r0, [pc, #20]	@ (80028dc <bmp390_set_temperature+0x9c>)
 80028c8:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <bmp390_set_temperature+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	0800ee54 	.word	0x0800ee54
 80028dc:	0800ee7c 	.word	0x0800ee7c

080028e0 <bmp390_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_mode(bmp390_handle_t *handle, bmp390_mode_t mode)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <bmp390_set_mode+0x16>
    {
        return 2;                                                                         /* return error */
 80028f2:	2302      	movs	r3, #2
 80028f4:	e03c      	b.n	8002970 <bmp390_set_mode+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d001      	beq.n	8002904 <bmp390_set_mode+0x24>
    {
        return 3;                                                                         /* return error */
 8002900:	2303      	movs	r3, #3
 8002902:	e035      	b.n	8002970 <bmp390_set_mode+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002904:	f107 020e 	add.w	r2, r7, #14
 8002908:	2301      	movs	r3, #1
 800290a:	211b      	movs	r1, #27
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff f81b 	bl	8001948 <a_bmp390_iic_spi_read>
 8002912:	4603      	mov	r3, r0
 8002914:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <bmp390_set_mode+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002922:	4815      	ldr	r0, [pc, #84]	@ (8002978 <bmp390_set_mode+0x98>)
 8002924:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8002926:	2301      	movs	r3, #1
 8002928:	e022      	b.n	8002970 <bmp390_set_mode+0x90>
    }
    prev &= ~(3 << 4);                                                                    /* clear config */
 800292a:	7bbb      	ldrb	r3, [r7, #14]
 800292c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002930:	b2db      	uxtb	r3, r3
 8002932:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 4;                                                                    /* set config */
 8002934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	b25a      	sxtb	r2, r3
 800293c:	7bbb      	ldrb	r3, [r7, #14]
 800293e:	b25b      	sxtb	r3, r3
 8002940:	4313      	orrs	r3, r2
 8002942:	b25b      	sxtb	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002948:	f107 020e 	add.w	r2, r7, #14
 800294c:	2301      	movs	r3, #1
 800294e:	211b      	movs	r1, #27
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff f844 	bl	80019de <a_bmp390_iic_spi_write>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <bmp390_set_mode+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <bmp390_set_mode+0x9c>)
 8002968:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <bmp390_set_mode+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	0800ee54 	.word	0x0800ee54
 800297c:	0800ee7c 	.word	0x0800ee7c

08002980 <bmp390_set_pressure_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <bmp390_set_pressure_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 8002992:	2302      	movs	r3, #2
 8002994:	e037      	b.n	8002a06 <bmp390_set_pressure_oversampling+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <bmp390_set_pressure_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 80029a0:	2303      	movs	r3, #3
 80029a2:	e030      	b.n	8002a06 <bmp390_set_pressure_oversampling+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 80029a4:	f107 020e 	add.w	r2, r7, #14
 80029a8:	2301      	movs	r3, #1
 80029aa:	211c      	movs	r1, #28
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7fe ffcb 	bl	8001948 <a_bmp390_iic_spi_read>
 80029b2:	4603      	mov	r3, r0
 80029b4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <bmp390_set_pressure_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80029c2:	4813      	ldr	r0, [pc, #76]	@ (8002a10 <bmp390_set_pressure_oversampling+0x90>)
 80029c4:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01d      	b.n	8002a06 <bmp390_set_pressure_oversampling+0x86>
    }
    prev &= ~(7 << 0);                                                               /* clear config */
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	f023 0307 	bic.w	r3, r3, #7
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 0;                                                       /* set config */
 80029d4:	7bba      	ldrb	r2, [r7, #14]
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	4313      	orrs	r3, r2
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 80029de:	f107 020e 	add.w	r2, r7, #14
 80029e2:	2301      	movs	r3, #1
 80029e4:	211c      	movs	r1, #28
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe fff9 	bl	80019de <a_bmp390_iic_spi_write>
 80029ec:	4603      	mov	r3, r0
 80029ee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <bmp390_set_pressure_oversampling+0x84>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80029fc:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <bmp390_set_pressure_oversampling+0x94>)
 80029fe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <bmp390_set_pressure_oversampling+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	0800eea4 	.word	0x0800eea4
 8002a14:	0800eec8 	.word	0x0800eec8

08002a18 <bmp390_set_temperature_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <bmp390_set_temperature_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e03c      	b.n	8002aa8 <bmp390_set_temperature_oversampling+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d001      	beq.n	8002a3c <bmp390_set_temperature_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e035      	b.n	8002aa8 <bmp390_set_temperature_oversampling+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 8002a3c:	f107 020e 	add.w	r2, r7, #14
 8002a40:	2301      	movs	r3, #1
 8002a42:	211c      	movs	r1, #28
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fe ff7f 	bl	8001948 <a_bmp390_iic_spi_read>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <bmp390_set_temperature_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002a5a:	4815      	ldr	r0, [pc, #84]	@ (8002ab0 <bmp390_set_temperature_oversampling+0x98>)
 8002a5c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e022      	b.n	8002aa8 <bmp390_set_temperature_oversampling+0x90>
    }
    prev &= ~(7 << 3);                                                               /* clear config */
 8002a62:	7bbb      	ldrb	r3, [r7, #14]
 8002a64:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 3;                                                       /* set config */
 8002a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	b25a      	sxtb	r2, r3
 8002a74:	7bbb      	ldrb	r3, [r7, #14]
 8002a76:	b25b      	sxtb	r3, r3
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 8002a80:	f107 020e 	add.w	r2, r7, #14
 8002a84:	2301      	movs	r3, #1
 8002a86:	211c      	movs	r1, #28
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe ffa8 	bl	80019de <a_bmp390_iic_spi_write>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <bmp390_set_temperature_oversampling+0x8e>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002a9e:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <bmp390_set_temperature_oversampling+0x9c>)
 8002aa0:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <bmp390_set_temperature_oversampling+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	0800eea4 	.word	0x0800eea4
 8002ab4:	0800eec8 	.word	0x0800eec8

08002ab8 <bmp390_set_odr>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_odr(bmp390_handle_t *handle, bmp390_odr_t odr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <bmp390_set_odr+0x16>
    {
        return 2;                                                                    /* return error */
 8002aca:	2302      	movs	r3, #2
 8002acc:	e037      	b.n	8002b3e <bmp390_set_odr+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d001      	beq.n	8002adc <bmp390_set_odr+0x24>
    {
        return 3;                                                                    /* return error */
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e030      	b.n	8002b3e <bmp390_set_odr+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);        /* read config */
 8002adc:	f107 020e 	add.w	r2, r7, #14
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	211d      	movs	r1, #29
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7fe ff2f 	bl	8001948 <a_bmp390_iic_spi_read>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <bmp390_set_odr+0x4a>
    {
        handle->debug_print("bmp390: get odr register failed.\n");                   /* get odr register failed */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002afa:	4813      	ldr	r0, [pc, #76]	@ (8002b48 <bmp390_set_odr+0x90>)
 8002afc:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002afe:	2301      	movs	r3, #1
 8002b00:	e01d      	b.n	8002b3e <bmp390_set_odr+0x86>
    }
    
    prev &= ~(31 << 0);                                                              /* clear config */
 8002b02:	7bbb      	ldrb	r3, [r7, #14]
 8002b04:	f023 031f 	bic.w	r3, r3, #31
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	73bb      	strb	r3, [r7, #14]
    prev |= odr << 0;                                                                /* set config */
 8002b0c:	7bba      	ldrb	r2, [r7, #14]
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);       /* write config */
 8002b16:	f107 020e 	add.w	r2, r7, #14
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	211d      	movs	r1, #29
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe ff5d 	bl	80019de <a_bmp390_iic_spi_write>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <bmp390_set_odr+0x84>
    {
        handle->debug_print("bmp390: set odr register failed.\n");                   /* set odr register failed */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b34:	4805      	ldr	r0, [pc, #20]	@ (8002b4c <bmp390_set_odr+0x94>)
 8002b36:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <bmp390_set_odr+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	0800eeec 	.word	0x0800eeec
 8002b4c:	0800ef10 	.word	0x0800ef10

08002b50 <a_bmp390_close>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
static uint8_t a_bmp390_close(bmp390_handle_t *handle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                        /* if iic interface */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10f      	bne.n	8002b82 <a_bmp390_close+0x32>
    {
        if (handle->iic_deinit() != 0)                                  /* close iic */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8002b68:	4798      	blx	r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <a_bmp390_close+0x2e>
        {
            handle->debug_print("bmp390: iic deinit failed.\n");        /* iic deinit failed */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b76:	480c      	ldr	r0, [pc, #48]	@ (8002ba8 <a_bmp390_close+0x58>)
 8002b78:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e010      	b.n	8002ba0 <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e00e      	b.n	8002ba0 <a_bmp390_close+0x50>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                                  /* close spi */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002b88:	4798      	blx	r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d006      	beq.n	8002b9e <a_bmp390_close+0x4e>
        {
            handle->debug_print("bmp390: spi deinit failed.\n");        /* spi deinit failed */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002b96:	4805      	ldr	r0, [pc, #20]	@ (8002bac <a_bmp390_close+0x5c>)
 8002b98:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 8002b9e:	2300      	movs	r3, #0
        }
    }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	0800efa8 	.word	0x0800efa8
 8002bac:	0800efc4 	.word	0x0800efc4

08002bb0 <bmp390_init>:
 *            - 5 reset failed
 *            - 6 get calibration failed
 * @note      none
 */
uint8_t bmp390_init(bmp390_handle_t *handle)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
    uint8_t id;
    uint8_t reg;
  
    if (handle == NULL)                                                              /* check handle */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <bmp390_init+0x12>
    {
        return 2;                                                                    /* return error */
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e107      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->debug_print == NULL)                                                 /* check debug_print */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <bmp390_init+0x20>
    {
        return 3;                                                                    /* return error */
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e100      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->iic_init == NULL)                                                    /* check iic_init */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <bmp390_init+0x38>
    {
        handle->debug_print("bmp390: iic_init is null.\n");                          /* iic_init is null */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002be0:	487e      	ldr	r0, [pc, #504]	@ (8002ddc <bmp390_init+0x22c>)
 8002be2:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0f4      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->iic_deinit == NULL)                                                  /* check iic_init */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <bmp390_init+0x50>
    {
        handle->debug_print("bmp390: iic_deinit is null.\n");                        /* iic_deinit is null */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002bf8:	4879      	ldr	r0, [pc, #484]	@ (8002de0 <bmp390_init+0x230>)
 8002bfa:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0e8      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->iic_read == NULL)                                                    /* check iic_read */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <bmp390_init+0x68>
    {
        handle->debug_print("bmp390: iic_read is null.\n");                          /* iic_read is null */
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c10:	4874      	ldr	r0, [pc, #464]	@ (8002de4 <bmp390_init+0x234>)
 8002c12:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0dc      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->iic_write == NULL)                                                   /* check iic_write */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <bmp390_init+0x80>
    {
        handle->debug_print("bmp390: iic_write is null.\n");                         /* iic_write is null */
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c28:	486f      	ldr	r0, [pc, #444]	@ (8002de8 <bmp390_init+0x238>)
 8002c2a:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0d0      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->spi_init == NULL)                                                    /* check spi_init */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <bmp390_init+0x98>
    {
        handle->debug_print("bmp390: spi_init is null.\n");                          /* spi_init is null */
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c40:	486a      	ldr	r0, [pc, #424]	@ (8002dec <bmp390_init+0x23c>)
 8002c42:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0c4      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->spi_deinit == NULL)                                                  /* check spi_deinit */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <bmp390_init+0xb0>
    {
        handle->debug_print("bmp390: spi_deinit is null.\n");                        /* spi_deinit is null */
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c58:	4865      	ldr	r0, [pc, #404]	@ (8002df0 <bmp390_init+0x240>)
 8002c5a:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0b8      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->spi_read == NULL)                                                    /* check spi_read */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <bmp390_init+0xc8>
    {
        handle->debug_print("bmp390: spi_read is null.\n");                          /* spi_read is null */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c70:	4860      	ldr	r0, [pc, #384]	@ (8002df4 <bmp390_init+0x244>)
 8002c72:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0ac      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->spi_write == NULL)                                                   /* check spi_write */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <bmp390_init+0xe0>
    {
        handle->debug_print("bmp390: spi_write is null.\n");                         /* spi_write is null */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c88:	485b      	ldr	r0, [pc, #364]	@ (8002df8 <bmp390_init+0x248>)
 8002c8a:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0a0      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (handle->delay_ms == NULL)                                                    /* check delay_ms */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <bmp390_init+0xf8>
    {
        handle->debug_print("bmp390: delay_ms is null.\n");                          /* delay_ms is null */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002ca0:	4856      	ldr	r0, [pc, #344]	@ (8002dfc <bmp390_init+0x24c>)
 8002ca2:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e094      	b.n	8002dd2 <bmp390_init+0x222>
    }
    
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                     /* if iic interface */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <bmp390_init+0x11e>
    {
        if (handle->iic_init() != 0)                                                 /* initialize iic bus */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002cb8:	4798      	blx	r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d014      	beq.n	8002cea <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: iic init failed.\n");                       /* iic init failed */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002cc6:	484e      	ldr	r0, [pc, #312]	@ (8002e00 <bmp390_init+0x250>)
 8002cc8:	4798      	blx	r3
            
            return 1;                                                                /* return error */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e081      	b.n	8002dd2 <bmp390_init+0x222>
        }
    }
    else
    {
        if (handle->spi_init() != 0)                                                 /* initialize spi bus */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002cd4:	4798      	blx	r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: spi init failed.\n");                       /* spi init failed */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002ce2:	4848      	ldr	r0, [pc, #288]	@ (8002e04 <bmp390_init+0x254>)
 8002ce4:	4798      	blx	r3
           
            return 1;                                                                /* return error */
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e073      	b.n	8002dd2 <bmp390_init+0x222>
        }
    }
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_CHIP_ID, (uint8_t *)&id, 1) != 0)   /* read chip id */
 8002cea:	f107 020f 	add.w	r2, r7, #15
 8002cee:	2301      	movs	r3, #1
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fe28 	bl	8001948 <a_bmp390_iic_spi_read>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <bmp390_init+0x162>
    {
        handle->debug_print("bmp390: read chip id failed.\n");                       /* read chip id failed */
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d04:	4840      	ldr	r0, [pc, #256]	@ (8002e08 <bmp390_init+0x258>)
 8002d06:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff21 	bl	8002b50 <a_bmp390_close>
        
        return 4;                                                                    /* return error */
 8002d0e:	2304      	movs	r3, #4
 8002d10:	e05f      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (id != 0x60)                                                                  /* check chip id */
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b60      	cmp	r3, #96	@ 0x60
 8002d16:	d009      	beq.n	8002d2c <bmp390_init+0x17c>
    {
        handle->debug_print("bmp390: id is invalid.\n");                             /* id is invalid */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d1e:	483b      	ldr	r0, [pc, #236]	@ (8002e0c <bmp390_init+0x25c>)
 8002d20:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff14 	bl	8002b50 <a_bmp390_close>
        
        return 4;         
 8002d28:	2304      	movs	r3, #4
 8002d2a:	e052      	b.n	8002dd2 <bmp390_init+0x222>
    }                                                                                /* return error */
    reg = 0xB6;                                                                      /* set command */
 8002d2c:	23b6      	movs	r3, #182	@ 0xb6
 8002d2e:	73bb      	strb	r3, [r7, #14]
    if (a_bmp390_iic_spi_write(handle, BMP390_REG_CMD, (uint8_t *)&reg, 1) != 0)     /* write command */
 8002d30:	f107 020e 	add.w	r2, r7, #14
 8002d34:	2301      	movs	r3, #1
 8002d36:	217e      	movs	r1, #126	@ 0x7e
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fe fe50 	bl	80019de <a_bmp390_iic_spi_write>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <bmp390_init+0x1a8>
    {
        handle->debug_print("bmp390: soft rest failed.\n");                          /* soft rest failed */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d4a:	4831      	ldr	r0, [pc, #196]	@ (8002e10 <bmp390_init+0x260>)
 8002d4c:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fefe 	bl	8002b50 <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8002d54:	2305      	movs	r3, #5
 8002d56:	e03c      	b.n	8002dd2 <bmp390_init+0x222>
    }
    handle->delay_ms(10);                                                            /* delay 10 ms */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8002d5e:	200a      	movs	r0, #10
 8002d60:	4798      	blx	r3
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_ERR_REG, (uint8_t *)&reg, 1) != 0)  /* read reg */
 8002d62:	f107 020e 	add.w	r2, r7, #14
 8002d66:	2301      	movs	r3, #1
 8002d68:	2102      	movs	r1, #2
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fdec 	bl	8001948 <a_bmp390_iic_spi_read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <bmp390_init+0x1da>
    {
        handle->debug_print("bmp390: get err reg failed.\n");                        /* return error */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d7c:	4825      	ldr	r0, [pc, #148]	@ (8002e14 <bmp390_init+0x264>)
 8002d7e:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff fee5 	bl	8002b50 <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8002d86:	2305      	movs	r3, #5
 8002d88:	e023      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if ((reg & 0x07) != 0)                                                           /* check running status */
 8002d8a:	7bbb      	ldrb	r3, [r7, #14]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <bmp390_init+0x1f8>
    {
        handle->debug_print("bmp390: find running error.\n");                        /* find running error */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002d9a:	481f      	ldr	r0, [pc, #124]	@ (8002e18 <bmp390_init+0x268>)
 8002d9c:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fed6 	bl	8002b50 <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8002da4:	2305      	movs	r3, #5
 8002da6:	e014      	b.n	8002dd2 <bmp390_init+0x222>
    }
    if (a_bmp390_get_calibration_data(handle) != 0)                                  /* get calibration data */
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fe fe6d 	bl	8001a88 <a_bmp390_get_calibration_data>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <bmp390_init+0x218>
    {
        handle->debug_print("bmp390: get calibration data error.\n");                /* get calibration data error */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002dba:	4818      	ldr	r0, [pc, #96]	@ (8002e1c <bmp390_init+0x26c>)
 8002dbc:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fec6 	bl	8002b50 <a_bmp390_close>
        
        return 6;                                                                    /* return error */
 8002dc4:	2306      	movs	r3, #6
 8002dc6:	e004      	b.n	8002dd2 <bmp390_init+0x222>
    }
    handle->inited = 1;                                                              /* flag finish initialization */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
     
    return 0;                                                                        /* success return 0 */
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	0800efe0 	.word	0x0800efe0
 8002de0:	0800effc 	.word	0x0800effc
 8002de4:	0800f01c 	.word	0x0800f01c
 8002de8:	0800f038 	.word	0x0800f038
 8002dec:	0800f054 	.word	0x0800f054
 8002df0:	0800f070 	.word	0x0800f070
 8002df4:	0800f090 	.word	0x0800f090
 8002df8:	0800f0ac 	.word	0x0800f0ac
 8002dfc:	0800f0c8 	.word	0x0800f0c8
 8002e00:	0800f0e4 	.word	0x0800f0e4
 8002e04:	0800f100 	.word	0x0800f100
 8002e08:	0800f11c 	.word	0x0800f11c
 8002e0c:	0800f13c 	.word	0x0800f13c
 8002e10:	0800f154 	.word	0x0800f154
 8002e14:	0800f170 	.word	0x0800f170
 8002e18:	0800f190 	.word	0x0800f190
 8002e1c:	0800f1b0 	.word	0x0800f1b0

08002e20 <bmp390_read_temperature_pressure>:
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t bmp390_read_temperature_pressure(bmp390_handle_t *handle, uint32_t *temperature_raw, float *temperature_c, 
                                         uint32_t *pressure_raw, float *pressure_pa)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b090      	sub	sp, #64	@ 0x40
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t buf[3];
    
    if (handle == NULL)                                                                       /* check handle */
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <bmp390_read_temperature_pressure+0x18>
    {
        return 2;                                                                             /* return error */
 8002e34:	2302      	movs	r3, #2
 8002e36:	e1fa      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    if (handle->inited != 1)                                                                  /* check handle initialization */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <bmp390_read_temperature_pressure+0x26>
    {
        return 3;                                                                             /* return error */
 8002e42:	2303      	movs	r3, #3
 8002e44:	e1f3      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_FIFO_CONFIG_1, (uint8_t *)&prev, 1);       /* read config */
 8002e46:	f107 0217 	add.w	r2, r7, #23
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	2117      	movs	r1, #23
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7fe fd7a 	bl	8001948 <a_bmp390_iic_spi_read>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 8002e5a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <bmp390_read_temperature_pressure+0x50>
    {
        handle->debug_print("bmp390: get fifo config 1 register failed.\n");                  /* get fifo config 1 register failed */
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002e68:	48b1      	ldr	r0, [pc, #708]	@ (8003130 <bmp390_read_temperature_pressure+0x310>)
 8002e6a:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e1de      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    if ((prev & 0x01) != 0)                                                                   /* check fifo mode */
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <bmp390_read_temperature_pressure+0x68>
    {
        handle->debug_print("bmp390: fifo mode can't use this function.\n");                  /* fifo mode can't use this function */
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002e80:	48ac      	ldr	r0, [pc, #688]	@ (8003134 <bmp390_read_temperature_pressure+0x314>)
 8002e82:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8002e84:	2301      	movs	r3, #1
 8002e86:	e1d2      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);            /* read config */
 8002e88:	f107 0217 	add.w	r2, r7, #23
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	211b      	movs	r1, #27
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7fe fd59 	bl	8001948 <a_bmp390_iic_spi_read>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 8002e9c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <bmp390_read_temperature_pressure+0x92>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                       /* get pwr ctrl register failed */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002eaa:	48a3      	ldr	r0, [pc, #652]	@ (8003138 <bmp390_read_temperature_pressure+0x318>)
 8002eac:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1bd      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
    }
    if (((prev >> 4) & 0x03) == 0x03)                                                         /* normal mode */
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	f040 80a0 	bne.w	8003002 <bmp390_read_temperature_pressure+0x1e2>
    {
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);          /* read config */
 8002ec2:	f107 0217 	add.w	r2, r7, #23
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	2103      	movs	r1, #3
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7fe fd3c 	bl	8001948 <a_bmp390_iic_spi_read>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 8002ed6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <bmp390_read_temperature_pressure+0xcc>
        {
            handle->debug_print("bmp390: get status register failed.\n");                     /* get status register failed */
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002ee4:	4895      	ldr	r0, [pc, #596]	@ (800313c <bmp390_read_temperature_pressure+0x31c>)
 8002ee6:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e1a0      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
        if ((prev & (1 << 6)) != 0)                                                           /* data is ready */
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03d      	beq.n	8002f72 <bmp390_read_temperature_pressure+0x152>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);        /* read raw data */
 8002ef6:	f107 0214 	add.w	r2, r7, #20
 8002efa:	2303      	movs	r3, #3
 8002efc:	2107      	movs	r1, #7
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7fe fd22 	bl	8001948 <a_bmp390_iic_spi_read>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8002f0a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <bmp390_read_temperature_pressure+0x100>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002f18:	4889      	ldr	r0, [pc, #548]	@ (8003140 <bmp390_read_temperature_pressure+0x320>)
 8002f1a:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e186      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            }
            *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];       /* get data */
 8002f20:	7dbb      	ldrb	r3, [r7, #22]
 8002f22:	041a      	lsls	r2, r3, #16
 8002f24:	7d7b      	ldrb	r3, [r7, #21]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	7d3a      	ldrb	r2, [r7, #20]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_temperature(handle, *temperature_raw);               /* compensate temperature */
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4619      	mov	r1, r3
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7fe ff13 	bl	8001d64 <a_bmp390_compensate_temperature>
 8002f3e:	e9c7 0108 	strd	r0, r1, [r7, #32]
            *temperature_c = (float)((double)output / 100.0);                                 /* get converted temperature */
 8002f42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f46:	f7fd fb49 	bl	80005dc <__aeabi_l2d>
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8003144 <bmp390_read_temperature_pressure+0x324>)
 8002f50:	f7fd fc9c 	bl	800088c <__aeabi_ddiv>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7fd fe64 	bl	8000c28 <__aeabi_d2f>
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
        {
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
           
            return 1;                                                                         /* return error */
        }
        if ((prev & (1 << 5)) != 0)                                                           /* data is ready */
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d041      	beq.n	8002ff4 <bmp390_read_temperature_pressure+0x1d4>
 8002f70:	e006      	b.n	8002f80 <bmp390_read_temperature_pressure+0x160>
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002f78:	4873      	ldr	r0, [pc, #460]	@ (8003148 <bmp390_read_temperature_pressure+0x328>)
 8002f7a:	4798      	blx	r3
            return 1;                                                                         /* return error */
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e156      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);        /* read data */
 8002f80:	f107 0214 	add.w	r2, r7, #20
 8002f84:	2303      	movs	r3, #3
 8002f86:	2104      	movs	r1, #4
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7fe fcdd 	bl	8001948 <a_bmp390_iic_spi_read>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8002f94:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <bmp390_read_temperature_pressure+0x18a>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002fa2:	4867      	ldr	r0, [pc, #412]	@ (8003140 <bmp390_read_temperature_pressure+0x320>)
 8002fa4:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e141      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            }
            *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];          /* get data */
 8002faa:	7dbb      	ldrb	r3, [r7, #22]
 8002fac:	041a      	lsls	r2, r3, #16
 8002fae:	7d7b      	ldrb	r3, [r7, #21]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	7d3a      	ldrb	r2, [r7, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_pressure(handle, *pressure_raw);                     /* compensate pressure */
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7fe ffb6 	bl	8001f34 <a_bmp390_compensate_pressure>
 8002fc8:	e9c7 0106 	strd	r0, r1, [r7, #24]
            *pressure_pa = (float)((double)output / 100.0);                                   /* get converted pressure */
 8002fcc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fd0:	f7fd fb04 	bl	80005dc <__aeabi_l2d>
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8003144 <bmp390_read_temperature_pressure+0x324>)
 8002fda:	f7fd fc57 	bl	800088c <__aeabi_ddiv>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f7fd fe1f 	bl	8000c28 <__aeabi_d2f>
 8002fea:	4602      	mov	r2, r0
 8002fec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fee:	601a      	str	r2, [r3, #0]
            
            return 0;                                                                         /* success return 0 */
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e11c      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
        else
        {
            handle->debug_print("bmp390: pressure data is not ready.\n");                     /* pressure data is not ready */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002ffa:	4854      	ldr	r0, [pc, #336]	@ (800314c <bmp390_read_temperature_pressure+0x32c>)
 8002ffc:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8002ffe:	2301      	movs	r3, #1
 8003000:	e115      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
    }
    else if (((prev >> 4) & 0x03) == 0x00)                                                    /* force mode */
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 8108 	bne.w	8003222 <bmp390_read_temperature_pressure+0x402>
    {
        uint16_t cnt = 5000;
 8003012:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003016:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8003018:	f107 0217 	add.w	r2, r7, #23
 800301c:	2301      	movs	r3, #1
 800301e:	211b      	movs	r1, #27
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7fe fc91 	bl	8001948 <a_bmp390_iic_spi_read>
 8003026:	4603      	mov	r3, r0
 8003028:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 800302c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <bmp390_read_temperature_pressure+0x222>
        {
            handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800303a:	483f      	ldr	r0, [pc, #252]	@ (8003138 <bmp390_read_temperature_pressure+0x318>)
 800303c:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 800303e:	2301      	movs	r3, #1
 8003040:	e0f5      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
        prev &= ~(0x03 << 4);                                                                 /* clear 4-5 bits */
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003048:	b2db      	uxtb	r3, r3
 800304a:	75fb      	strb	r3, [r7, #23]
        prev |= 0x01 << 4;                                                                    /* set bit 4 */
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	f043 0310 	orr.w	r3, r3, #16
 8003052:	b2db      	uxtb	r3, r3
 8003054:	75fb      	strb	r3, [r7, #23]
        res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8003056:	f107 0217 	add.w	r2, r7, #23
 800305a:	2301      	movs	r3, #1
 800305c:	211b      	movs	r1, #27
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7fe fcbd 	bl	80019de <a_bmp390_iic_spi_write>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 800306a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <bmp390_read_temperature_pressure+0x260>
        {
            handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003078:	4835      	ldr	r0, [pc, #212]	@ (8003150 <bmp390_read_temperature_pressure+0x330>)
 800307a:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 800307c:	2301      	movs	r3, #1
 800307e:	e0d6      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
        }
        
        while (1)                                                                             /* loop */
        {
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 8003080:	f107 0217 	add.w	r2, r7, #23
 8003084:	2301      	movs	r3, #1
 8003086:	2103      	movs	r1, #3
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7fe fc5d 	bl	8001948 <a_bmp390_iic_spi_read>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8003094:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <bmp390_read_temperature_pressure+0x28a>
            {
                handle->debug_print("bmp390: get status register failed.\n");                 /* get status register failed */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80030a2:	4826      	ldr	r0, [pc, #152]	@ (800313c <bmp390_read_temperature_pressure+0x31c>)
 80030a4:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0c1      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            }
            if ((prev & (1 << 6)) != 0)                                                       /* data is ready */
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d04f      	beq.n	8003154 <bmp390_read_temperature_pressure+0x334>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);    /* read raw data */
 80030b4:	f107 0214 	add.w	r2, r7, #20
 80030b8:	2303      	movs	r3, #3
 80030ba:	2107      	movs	r1, #7
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7fe fc43 	bl	8001948 <a_bmp390_iic_spi_read>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 80030c8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <bmp390_read_temperature_pressure+0x2be>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80030d6:	481a      	ldr	r0, [pc, #104]	@ (8003140 <bmp390_read_temperature_pressure+0x320>)
 80030d8:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 80030da:	2301      	movs	r3, #1
 80030dc:	e0a7      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
                }
                *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];   /* get data */
 80030de:	7dbb      	ldrb	r3, [r7, #22]
 80030e0:	041a      	lsls	r2, r3, #16
 80030e2:	7d7b      	ldrb	r3, [r7, #21]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	4313      	orrs	r3, r2
 80030e8:	7d3a      	ldrb	r2, [r7, #20]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_temperature(handle, *temperature_raw);           /* compensate temperature */
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7fe fe34 	bl	8001d64 <a_bmp390_compensate_temperature>
 80030fc:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                *temperature_c = (float)((double)output / 100.0);                             /* get converted temperature */
 8003100:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003104:	f7fd fa6a 	bl	80005dc <__aeabi_l2d>
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <bmp390_read_temperature_pressure+0x324>)
 800310e:	f7fd fbbd 	bl	800088c <__aeabi_ddiv>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7fd fd85 	bl	8000c28 <__aeabi_d2f>
 800311e:	4602      	mov	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	601a      	str	r2, [r3, #0]
                
                break;                                                                        /* break */
 8003124:	bf00      	nop
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
               
                return 1;                                                                     /* return error */
            }
        }
        cnt = 5000;                                                                           /* set cnt */
 8003126:	f241 3388 	movw	r3, #5000	@ 0x1388
 800312a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800312c:	e026      	b.n	800317c <bmp390_read_temperature_pressure+0x35c>
 800312e:	bf00      	nop
 8003130:	0800ece4 	.word	0x0800ece4
 8003134:	0800f1d8 	.word	0x0800f1d8
 8003138:	0800ee54 	.word	0x0800ee54
 800313c:	0800eb88 	.word	0x0800eb88
 8003140:	0800f204 	.word	0x0800f204
 8003144:	40590000 	.word	0x40590000
 8003148:	0800f228 	.word	0x0800f228
 800314c:	0800f26c 	.word	0x0800f26c
 8003150:	0800ee7c 	.word	0x0800ee7c
                if (cnt != 0)                                                                 /* check cnt */
 8003154:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <bmp390_read_temperature_pressure+0x34c>
                    cnt--;                                                                    /* cnt-- */
 800315a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800315c:	3b01      	subs	r3, #1
 800315e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003166:	2001      	movs	r0, #1
 8003168:	4798      	blx	r3
                    continue;                                                                 /* continue */
 800316a:	e006      	b.n	800317a <bmp390_read_temperature_pressure+0x35a>
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003172:	4831      	ldr	r0, [pc, #196]	@ (8003238 <bmp390_read_temperature_pressure+0x418>)
 8003174:	4798      	blx	r3
                return 1;                                                                     /* return error */
 8003176:	2301      	movs	r3, #1
 8003178:	e059      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 800317a:	e781      	b.n	8003080 <bmp390_read_temperature_pressure+0x260>
        
        while (1)                                                                             /* loop */
        {
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d039      	beq.n	80031fa <bmp390_read_temperature_pressure+0x3da>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);    /* read raw data */
 8003186:	f107 0214 	add.w	r2, r7, #20
 800318a:	2303      	movs	r3, #3
 800318c:	2104      	movs	r1, #4
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7fe fbda 	bl	8001948 <a_bmp390_iic_spi_read>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 800319a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <bmp390_read_temperature_pressure+0x390>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80031a8:	4824      	ldr	r0, [pc, #144]	@ (800323c <bmp390_read_temperature_pressure+0x41c>)
 80031aa:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 80031ac:	2301      	movs	r3, #1
 80031ae:	e03e      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
                }
                *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];      /* get data */
 80031b0:	7dbb      	ldrb	r3, [r7, #22]
 80031b2:	041a      	lsls	r2, r3, #16
 80031b4:	7d7b      	ldrb	r3, [r7, #21]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	4313      	orrs	r3, r2
 80031ba:	7d3a      	ldrb	r2, [r7, #20]
 80031bc:	431a      	orrs	r2, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_pressure(handle, *pressure_raw);                 /* compensate pressure */
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7fe feb3 	bl	8001f34 <a_bmp390_compensate_pressure>
 80031ce:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                *pressure_pa = (float)((double)output / 100.0);                               /* get converted pressure */
 80031d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031d6:	f7fd fa01 	bl	80005dc <__aeabi_l2d>
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <bmp390_read_temperature_pressure+0x420>)
 80031e0:	f7fd fb54 	bl	800088c <__aeabi_ddiv>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fd1c 	bl	8000c28 <__aeabi_d2f>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f4:	601a      	str	r2, [r3, #0]
                
                return 0;                                                                     /* success return 0 */
 80031f6:	2300      	movs	r3, #0
 80031f8:	e019      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            }
            else
            {
                if (cnt != 0)                                                                 /* check cnt */
 80031fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <bmp390_read_temperature_pressure+0x3f2>
                {
                    cnt--;                                                                    /* cnt-- */
 8003200:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003202:	3b01      	subs	r3, #1
 8003204:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800320c:	2001      	movs	r0, #1
 800320e:	4798      	blx	r3
                    
                    continue;                                                                 /* continue */
 8003210:	e006      	b.n	8003220 <bmp390_read_temperature_pressure+0x400>
                }
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003218:	4807      	ldr	r0, [pc, #28]	@ (8003238 <bmp390_read_temperature_pressure+0x418>)
 800321a:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 800321c:	2301      	movs	r3, #1
 800321e:	e006      	b.n	800322e <bmp390_read_temperature_pressure+0x40e>
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 8003220:	e7ac      	b.n	800317c <bmp390_read_temperature_pressure+0x35c>
            }
        }
    }
    else
    {
        handle->debug_print("bmp390: mode is invalid.\n");                                    /* mode is invalid */
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8003228:	4806      	ldr	r0, [pc, #24]	@ (8003244 <bmp390_read_temperature_pressure+0x424>)
 800322a:	4798      	blx	r3
           
        return 1;                                                                             /* return error */
 800322c:	2301      	movs	r3, #1
    }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3740      	adds	r7, #64	@ 0x40
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	0800f228 	.word	0x0800f228
 800323c:	0800f204 	.word	0x0800f204
 8003240:	40590000 	.word	0x40590000
 8003244:	0800f250 	.word	0x0800f250

08003248 <bmp390_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_addr_pin(bmp390_handle_t *handle, bmp390_address_t addr_pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <bmp390_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 800325a:	2302      	movs	r3, #2
 800325c:	e003      	b.n	8003266 <bmp390_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set iic address */
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <bmp390_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_interface(bmp390_handle_t *handle, bmp390_interface_t interface) 
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                        /* check handle */
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <bmp390_set_interface+0x16>
    {
        return 2;                              /* return error */
 8003284:	2302      	movs	r3, #2
 8003286:	e004      	b.n	8003292 <bmp390_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;      /* set interface */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
    
    return 0;                                  /* success return 0 */
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800329e:	b590      	push	{r4, r7, lr}
 80032a0:	b087      	sub	sp, #28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	461a      	mov	r2, r3
 80032aa:	460b      	mov	r3, r1
 80032ac:	72fb      	strb	r3, [r7, #11]
 80032ae:	4613      	mov	r3, r2
 80032b0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685c      	ldr	r4, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68d8      	ldr	r0, [r3, #12]
 80032ba:	893b      	ldrh	r3, [r7, #8]
 80032bc:	7af9      	ldrb	r1, [r7, #11]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	47a0      	blx	r4
 80032c2:	6178      	str	r0, [r7, #20]

  return ret;
 80032c4:	697b      	ldr	r3, [r7, #20]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}

080032ce <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80032ce:	b590      	push	{r4, r7, lr}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	461a      	mov	r2, r3
 80032da:	460b      	mov	r3, r1
 80032dc:	72fb      	strb	r3, [r7, #11]
 80032de:	4613      	mov	r3, r2
 80032e0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681c      	ldr	r4, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	68d8      	ldr	r0, [r3, #12]
 80032ea:	893b      	ldrh	r3, [r7, #8]
 80032ec:	7af9      	ldrb	r1, [r7, #11]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	47a0      	blx	r4
 80032f2:	6178      	str	r0, [r7, #20]

  return ret;
 80032f4:	697b      	ldr	r3, [r7, #20]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}

080032fe <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800330a:	f107 0208 	add.w	r2, r7, #8
 800330e:	2301      	movs	r3, #1
 8003310:	2110      	movs	r1, #16
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ffc3 	bl	800329e <lsm6dso_read_reg>
 8003318:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10f      	bne.n	8003340 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	b2da      	uxtb	r2, r3
 8003328:	7a3b      	ldrb	r3, [r7, #8]
 800332a:	f362 0383 	bfi	r3, r2, #2, #2
 800332e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003330:	f107 0208 	add.w	r2, r7, #8
 8003334:	2301      	movs	r3, #1
 8003336:	2110      	movs	r1, #16
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffc8 	bl	80032ce <lsm6dso_write_reg>
 800333e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003340:	68fb      	ldr	r3, [r7, #12]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb49 	bl	80039fa <lsm6dso_fsm_enable_get>
 8003368:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f040 80c4 	bne.w	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003372:	7b3b      	ldrb	r3, [r7, #12]
 8003374:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003378:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800337a:	7b3b      	ldrb	r3, [r7, #12]
 800337c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003380:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003382:	4313      	orrs	r3, r2
 8003384:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003386:	7b3b      	ldrb	r3, [r7, #12]
 8003388:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800338c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800338e:	4313      	orrs	r3, r2
 8003390:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003392:	7b3b      	ldrb	r3, [r7, #12]
 8003394:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003398:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800339a:	4313      	orrs	r3, r2
 800339c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800339e:	7b3b      	ldrb	r3, [r7, #12]
 80033a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80033a6:	4313      	orrs	r3, r2
 80033a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80033aa:	7b3b      	ldrb	r3, [r7, #12]
 80033ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80033b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80033b6:	7b3b      	ldrb	r3, [r7, #12]
 80033b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80033bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80033be:	4313      	orrs	r3, r2
 80033c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80033c2:	7b3b      	ldrb	r3, [r7, #12]
 80033c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80033c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80033ca:	4313      	orrs	r3, r2
 80033cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80033ce:	7b7b      	ldrb	r3, [r7, #13]
 80033d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80033d6:	4313      	orrs	r3, r2
 80033d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80033da:	7b7b      	ldrb	r3, [r7, #13]
 80033dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80033e2:	4313      	orrs	r3, r2
 80033e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80033e6:	7b7b      	ldrb	r3, [r7, #13]
 80033e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80033ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80033f2:	7b7b      	ldrb	r3, [r7, #13]
 80033f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80033fe:	7b7b      	ldrb	r3, [r7, #13]
 8003400:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003404:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003406:	4313      	orrs	r3, r2
 8003408:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800340a:	7b7b      	ldrb	r3, [r7, #13]
 800340c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003410:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003412:	4313      	orrs	r3, r2
 8003414:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003416:	7b7b      	ldrb	r3, [r7, #13]
 8003418:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800341c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800341e:	4313      	orrs	r3, r2
 8003420:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003422:	7b7b      	ldrb	r3, [r7, #13]
 8003424:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003428:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800342a:	4313      	orrs	r3, r2
 800342c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800342e:	2b01      	cmp	r3, #1
 8003430:	d163      	bne.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8003432:	f107 030b 	add.w	r3, r7, #11
 8003436:	4619      	mov	r1, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 faff 	bl	8003a3c <lsm6dso_fsm_data_rate_get>
 800343e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d159      	bne.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d853      	bhi.n	80034f4 <lsm6dso_xl_data_rate_set+0x1a8>
 800344c:	a201      	add	r2, pc, #4	@ (adr r2, 8003454 <lsm6dso_xl_data_rate_set+0x108>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003465 	.word	0x08003465
 8003458:	08003477 	.word	0x08003477
 800345c:	08003495 	.word	0x08003495
 8003460:	080034bf 	.word	0x080034bf
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800346e:	e044      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	75fb      	strb	r3, [r7, #23]
            break;
 8003474:	e041      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d102      	bne.n	8003482 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800347c:	2302      	movs	r3, #2
 800347e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003480:	e03b      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d102      	bne.n	800348e <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8003488:	2302      	movs	r3, #2
 800348a:	75fb      	strb	r3, [r7, #23]
            break;
 800348c:	e035      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	75fb      	strb	r3, [r7, #23]
            break;
 8003492:	e032      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800349a:	2303      	movs	r3, #3
 800349c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800349e:	e02c      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80034a6:	2303      	movs	r3, #3
 80034a8:	75fb      	strb	r3, [r7, #23]
            break;
 80034aa:	e026      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d102      	bne.n	80034b8 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80034b2:	2303      	movs	r3, #3
 80034b4:	75fb      	strb	r3, [r7, #23]
            break;
 80034b6:	e020      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	75fb      	strb	r3, [r7, #23]
            break;
 80034bc:	e01d      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80034c4:	2304      	movs	r3, #4
 80034c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80034c8:	e017      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d102      	bne.n	80034d6 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80034d0:	2304      	movs	r3, #4
 80034d2:	75fb      	strb	r3, [r7, #23]
            break;
 80034d4:	e011      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d102      	bne.n	80034e2 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80034dc:	2304      	movs	r3, #4
 80034de:	75fb      	strb	r3, [r7, #23]
            break;
 80034e0:	e00b      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d102      	bne.n	80034ee <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80034e8:	2304      	movs	r3, #4
 80034ea:	75fb      	strb	r3, [r7, #23]
            break;
 80034ec:	e005      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	75fb      	strb	r3, [r7, #23]
            break;
 80034f2:	e002      	b.n	80034fa <lsm6dso_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	75fb      	strb	r3, [r7, #23]
            break;
 80034f8:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d107      	bne.n	8003510 <lsm6dso_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003500:	f107 0208 	add.w	r2, r7, #8
 8003504:	2301      	movs	r3, #1
 8003506:	2110      	movs	r1, #16
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff fec8 	bl	800329e <lsm6dso_read_reg>
 800350e:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <lsm6dso_xl_data_rate_set+0x1ea>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8003516:	7dfb      	ldrb	r3, [r7, #23]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	b2da      	uxtb	r2, r3
 800351e:	7a3b      	ldrb	r3, [r7, #8]
 8003520:	f362 1307 	bfi	r3, r2, #4, #4
 8003524:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003526:	f107 0208 	add.w	r2, r7, #8
 800352a:	2301      	movs	r3, #1
 800352c:	2110      	movs	r1, #16
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff fecd 	bl	80032ce <lsm6dso_write_reg>
 8003534:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8003536:	693b      	ldr	r3, [r7, #16]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800354c:	f107 0208 	add.w	r2, r7, #8
 8003550:	2301      	movs	r3, #1
 8003552:	2111      	movs	r1, #17
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fea2 	bl	800329e <lsm6dso_read_reg>
 800355a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10f      	bne.n	8003582 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	b2da      	uxtb	r2, r3
 800356a:	7a3b      	ldrb	r3, [r7, #8]
 800356c:	f362 0343 	bfi	r3, r2, #1, #3
 8003570:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003572:	f107 0208 	add.w	r2, r7, #8
 8003576:	2301      	movs	r3, #1
 8003578:	2111      	movs	r1, #17
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fea7 	bl	80032ce <lsm6dso_write_reg>
 8003580:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003582:	68fb      	ldr	r3, [r7, #12]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa29 	bl	80039fa <lsm6dso_fsm_enable_get>
 80035a8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 80c4 	bne.w	800373a <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80035b2:	7b3b      	ldrb	r3, [r7, #12]
 80035b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80035b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80035ba:	7b3b      	ldrb	r3, [r7, #12]
 80035bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80035c0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80035c6:	7b3b      	ldrb	r3, [r7, #12]
 80035c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80035cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80035ce:	4313      	orrs	r3, r2
 80035d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80035d2:	7b3b      	ldrb	r3, [r7, #12]
 80035d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80035d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80035da:	4313      	orrs	r3, r2
 80035dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80035de:	7b3b      	ldrb	r3, [r7, #12]
 80035e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80035e6:	4313      	orrs	r3, r2
 80035e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80035ea:	7b3b      	ldrb	r3, [r7, #12]
 80035ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80035f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80035f2:	4313      	orrs	r3, r2
 80035f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80035f6:	7b3b      	ldrb	r3, [r7, #12]
 80035f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80035fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80035fe:	4313      	orrs	r3, r2
 8003600:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003602:	7b3b      	ldrb	r3, [r7, #12]
 8003604:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003608:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800360a:	4313      	orrs	r3, r2
 800360c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800360e:	7b7b      	ldrb	r3, [r7, #13]
 8003610:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003614:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003616:	4313      	orrs	r3, r2
 8003618:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800361a:	7b7b      	ldrb	r3, [r7, #13]
 800361c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003620:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003622:	4313      	orrs	r3, r2
 8003624:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003626:	7b7b      	ldrb	r3, [r7, #13]
 8003628:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800362c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800362e:	4313      	orrs	r3, r2
 8003630:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003632:	7b7b      	ldrb	r3, [r7, #13]
 8003634:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003638:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800363a:	4313      	orrs	r3, r2
 800363c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800363e:	7b7b      	ldrb	r3, [r7, #13]
 8003640:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003644:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003646:	4313      	orrs	r3, r2
 8003648:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800364a:	7b7b      	ldrb	r3, [r7, #13]
 800364c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003650:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003652:	4313      	orrs	r3, r2
 8003654:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003656:	7b7b      	ldrb	r3, [r7, #13]
 8003658:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800365c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800365e:	4313      	orrs	r3, r2
 8003660:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003662:	7b7b      	ldrb	r3, [r7, #13]
 8003664:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003668:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800366a:	4313      	orrs	r3, r2
 800366c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800366e:	2b01      	cmp	r3, #1
 8003670:	d163      	bne.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8003672:	f107 030b 	add.w	r3, r7, #11
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f9df 	bl	8003a3c <lsm6dso_fsm_data_rate_get>
 800367e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d159      	bne.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003686:	7afb      	ldrb	r3, [r7, #11]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d853      	bhi.n	8003734 <lsm6dso_gy_data_rate_set+0x1a8>
 800368c:	a201      	add	r2, pc, #4	@ (adr r2, 8003694 <lsm6dso_gy_data_rate_set+0x108>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036a5 	.word	0x080036a5
 8003698:	080036b7 	.word	0x080036b7
 800369c:	080036d5 	.word	0x080036d5
 80036a0:	080036ff 	.word	0x080036ff
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80036ae:	e044      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	75fb      	strb	r3, [r7, #23]
            break;
 80036b4:	e041      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80036bc:	2302      	movs	r3, #2
 80036be:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80036c0:	e03b      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d102      	bne.n	80036ce <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80036c8:	2302      	movs	r3, #2
 80036ca:	75fb      	strb	r3, [r7, #23]
            break;
 80036cc:	e035      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	75fb      	strb	r3, [r7, #23]
            break;
 80036d2:	e032      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80036da:	2303      	movs	r3, #3
 80036dc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80036de:	e02c      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80036e6:	2303      	movs	r3, #3
 80036e8:	75fb      	strb	r3, [r7, #23]
            break;
 80036ea:	e026      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d102      	bne.n	80036f8 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80036f2:	2303      	movs	r3, #3
 80036f4:	75fb      	strb	r3, [r7, #23]
            break;
 80036f6:	e020      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	75fb      	strb	r3, [r7, #23]
            break;
 80036fc:	e01d      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003704:	2304      	movs	r3, #4
 8003706:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003708:	e017      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d102      	bne.n	8003716 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003710:	2304      	movs	r3, #4
 8003712:	75fb      	strb	r3, [r7, #23]
            break;
 8003714:	e011      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d102      	bne.n	8003722 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800371c:	2304      	movs	r3, #4
 800371e:	75fb      	strb	r3, [r7, #23]
            break;
 8003720:	e00b      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d102      	bne.n	800372e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8003728:	2304      	movs	r3, #4
 800372a:	75fb      	strb	r3, [r7, #23]
            break;
 800372c:	e005      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	75fb      	strb	r3, [r7, #23]
            break;
 8003732:	e002      	b.n	800373a <lsm6dso_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	75fb      	strb	r3, [r7, #23]
            break;
 8003738:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <lsm6dso_gy_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003740:	f107 0208 	add.w	r2, r7, #8
 8003744:	2301      	movs	r3, #1
 8003746:	2111      	movs	r1, #17
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fda8 	bl	800329e <lsm6dso_read_reg>
 800374e:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <lsm6dso_gy_data_rate_set+0x1ea>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	b2da      	uxtb	r2, r3
 800375e:	7a3b      	ldrb	r3, [r7, #8]
 8003760:	f362 1307 	bfi	r3, r2, #4, #4
 8003764:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003766:	f107 0208 	add.w	r2, r7, #8
 800376a:	2301      	movs	r3, #1
 800376c:	2111      	movs	r1, #17
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff fdad 	bl	80032ce <lsm6dso_write_reg>
 8003774:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8003776:	693b      	ldr	r3, [r7, #16]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800378c:	f107 0208 	add.w	r2, r7, #8
 8003790:	2301      	movs	r3, #1
 8003792:	2112      	movs	r1, #18
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fd82 	bl	800329e <lsm6dso_read_reg>
 800379a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	7a3b      	ldrb	r3, [r7, #8]
 80037ac:	f362 1386 	bfi	r3, r2, #6, #1
 80037b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80037b2:	f107 0208 	add.w	r2, r7, #8
 80037b6:	2301      	movs	r3, #1
 80037b8:	2112      	movs	r1, #18
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff fd87 	bl	80032ce <lsm6dso_write_reg>
 80037c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <lsm6dso_status_reg_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_status_reg_get(stmdev_ctx_t *ctx,
                               lsm6dso_status_reg_t *val)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) val, 1);
 80037d6:	2301      	movs	r3, #1
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	211e      	movs	r1, #30
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fd5e 	bl	800329e <lsm6dso_read_reg>
 80037e2:	60f8      	str	r0, [r7, #12]

  return ret;
 80037e4:	68fb      	ldr	r3, [r7, #12]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80037f8:	f107 020c 	add.w	r2, r7, #12
 80037fc:	2306      	movs	r3, #6
 80037fe:	2122      	movs	r1, #34	@ 0x22
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fd4c 	bl	800329e <lsm6dso_read_reg>
 8003806:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003808:	7b7b      	ldrb	r3, [r7, #13]
 800380a:	b21a      	sxth	r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003816:	b29b      	uxth	r3, r3
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	b29b      	uxth	r3, r3
 800381c:	7b3a      	ldrb	r2, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	b29b      	uxth	r3, r3
 8003822:	b21a      	sxth	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	3302      	adds	r3, #2
 800382e:	b212      	sxth	r2, r2
 8003830:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	3302      	adds	r3, #2
 8003836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800383a:	b29b      	uxth	r3, r3
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	b29b      	uxth	r3, r3
 8003840:	7bba      	ldrb	r2, [r7, #14]
 8003842:	4413      	add	r3, r2
 8003844:	b29a      	uxth	r2, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	3302      	adds	r3, #2
 800384a:	b212      	sxth	r2, r2
 800384c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800384e:	7c7a      	ldrb	r2, [r7, #17]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	3304      	adds	r3, #4
 8003854:	b212      	sxth	r2, r2
 8003856:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	3304      	adds	r3, #4
 800385c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003860:	b29b      	uxth	r3, r3
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	b29b      	uxth	r3, r3
 8003866:	7c3a      	ldrb	r2, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	b29a      	uxth	r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	3304      	adds	r3, #4
 8003870:	b212      	sxth	r2, r2
 8003872:	801a      	strh	r2, [r3, #0]

  return ret;
 8003874:	697b      	ldr	r3, [r7, #20]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8003888:	f107 020c 	add.w	r2, r7, #12
 800388c:	2306      	movs	r3, #6
 800388e:	2128      	movs	r1, #40	@ 0x28
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff fd04 	bl	800329e <lsm6dso_read_reg>
 8003896:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003898:	7b7b      	ldrb	r3, [r7, #13]
 800389a:	b21a      	sxth	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	7b3a      	ldrb	r2, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	b21a      	sxth	r2, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	3302      	adds	r3, #2
 80038be:	b212      	sxth	r2, r2
 80038c0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	3302      	adds	r3, #2
 80038c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	7bba      	ldrb	r2, [r7, #14]
 80038d2:	4413      	add	r3, r2
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	3302      	adds	r3, #2
 80038da:	b212      	sxth	r2, r2
 80038dc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80038de:	7c7a      	ldrb	r2, [r7, #17]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	3304      	adds	r3, #4
 80038e4:	b212      	sxth	r2, r2
 80038e6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	3304      	adds	r3, #4
 80038ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	7c3a      	ldrb	r2, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	3304      	adds	r3, #4
 8003900:	b212      	sxth	r2, r2
 8003902:	801a      	strh	r2, [r3, #0]

  return ret;
 8003904:	697b      	ldr	r3, [r7, #20]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800391a:	f107 0208 	add.w	r2, r7, #8
 800391e:	2301      	movs	r3, #1
 8003920:	2101      	movs	r1, #1
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fcbb 	bl	800329e <lsm6dso_read_reg>
 8003928:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	b2da      	uxtb	r2, r3
 8003938:	7a3b      	ldrb	r3, [r7, #8]
 800393a:	f362 1387 	bfi	r3, r2, #6, #2
 800393e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8003940:	f107 0208 	add.w	r2, r7, #8
 8003944:	2301      	movs	r3, #1
 8003946:	2101      	movs	r1, #1
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fcc0 	bl	80032ce <lsm6dso_write_reg>
 800394e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003950:	68fb      	ldr	r3, [r7, #12]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8003964:	2301      	movs	r3, #1
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	210f      	movs	r1, #15
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fc97 	bl	800329e <lsm6dso_read_reg>
 8003970:	60f8      	str	r0, [r7, #12]

  return ret;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8003988:	f107 0208 	add.w	r2, r7, #8
 800398c:	2301      	movs	r3, #1
 800398e:	2112      	movs	r1, #18
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fc84 	bl	800329e <lsm6dso_read_reg>
 8003996:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	7a3b      	ldrb	r3, [r7, #8]
 80039a8:	f362 0300 	bfi	r3, r2, #0, #1
 80039ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80039ae:	f107 0208 	add.w	r2, r7, #8
 80039b2:	2301      	movs	r3, #1
 80039b4:	2112      	movs	r1, #18
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fc89 	bl	80032ce <lsm6dso_write_reg>
 80039bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80039d2:	f107 0208 	add.w	r2, r7, #8
 80039d6:	2301      	movs	r3, #1
 80039d8:	2112      	movs	r1, #18
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fc5f 	bl	800329e <lsm6dso_read_reg>
 80039e0:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 80039e2:	7a3b      	ldrb	r3, [r7, #8]
 80039e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	701a      	strb	r2, [r3, #0]

  return ret;
 80039f0:	68fb      	ldr	r3, [r7, #12]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003a04:	2102      	movs	r1, #2
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ff81 	bl	800390e <lsm6dso_mem_bank_set>
 8003a0c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8003a14:	2302      	movs	r3, #2
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	2146      	movs	r1, #70	@ 0x46
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fc3f 	bl	800329e <lsm6dso_read_reg>
 8003a20:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d104      	bne.n	8003a32 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003a28:	2100      	movs	r1, #0
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ff6f 	bl	800390e <lsm6dso_mem_bank_set>
 8003a30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a32:	68fb      	ldr	r3, [r7, #12]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003a46:	2102      	movs	r1, #2
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff60 	bl	800390e <lsm6dso_mem_bank_set>
 8003a4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8003a56:	f107 0208 	add.w	r2, r7, #8
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	215f      	movs	r1, #95	@ 0x5f
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fc1d 	bl	800329e <lsm6dso_read_reg>
 8003a64:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d12a      	bne.n	8003ac2 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8003a6c:	7a3b      	ldrb	r3, [r7, #8]
 8003a6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d81b      	bhi.n	8003ab0 <lsm6dso_fsm_data_rate_get+0x74>
 8003a78:	a201      	add	r2, pc, #4	@ (adr r2, 8003a80 <lsm6dso_fsm_data_rate_get+0x44>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003a99 	.word	0x08003a99
 8003a88:	08003aa1 	.word	0x08003aa1
 8003a8c:	08003aa9 	.word	0x08003aa9
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
        break;
 8003a96:	e00f      	b.n	8003ab8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
        break;
 8003a9e:	e00b      	b.n	8003ab8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	701a      	strb	r2, [r3, #0]
        break;
 8003aa6:	e007      	b.n	8003ab8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2203      	movs	r2, #3
 8003aac:	701a      	strb	r2, [r3, #0]
        break;
 8003aae:	e003      	b.n	8003ab8 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
        break;
 8003ab6:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003ab8:	2100      	movs	r1, #0
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ff27 	bl	800390e <lsm6dso_mem_bank_set>
 8003ac0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <platform_write>:
static float persistent_bmp_pres_pa = 0.0f;
static float persistent_bmp_alt_m = 0.0f;

// LSM6DSO functions re-enabled and corrected
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af04      	add	r7, sp, #16
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	72fb      	strb	r3, [r7, #11]
 8003adc:	4613      	mov	r3, r2
 8003ade:	813b      	strh	r3, [r7, #8]
  // Note: LSM6DSO_I2C_ADD_L is the 7-bit address. HAL functions expect the 8-bit address (7-bit shifted left).
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef*)handle, (LSM6DSO_I2C_ADD_L << 1), reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000) == HAL_OK) {
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ae8:	9302      	str	r3, [sp, #8]
 8003aea:	893b      	ldrh	r3, [r7, #8]
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2301      	movs	r3, #1
 8003af4:	21d4      	movs	r1, #212	@ 0xd4
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f002 ffb0 	bl	8006a5c <HAL_I2C_Mem_Write>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <platform_write+0x3a>
    return 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e001      	b.n	8003b0a <platform_write+0x3e>
  }
  return -1; // Return non-zero for error
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b088      	sub	sp, #32
 8003b16:	af04      	add	r7, sp, #16
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	460b      	mov	r3, r1
 8003b20:	72fb      	strb	r3, [r7, #11]
 8003b22:	4613      	mov	r3, r2
 8003b24:	813b      	strh	r3, [r7, #8]
  // Note: LSM6DSO_I2C_ADD_L is the 7-bit address. HAL functions expect the 8-bit address (7-bit shifted left).
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef*)handle, (LSM6DSO_I2C_ADD_L << 1), reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000) == HAL_OK) {
 8003b26:	7afb      	ldrb	r3, [r7, #11]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b2e:	9302      	str	r3, [sp, #8]
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2301      	movs	r3, #1
 8003b3a:	21d4      	movs	r1, #212	@ 0xd4
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f003 f8a1 	bl	8006c84 <HAL_I2C_Mem_Read>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <platform_read+0x3a>
    return 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e001      	b.n	8003b50 <platform_read+0x3e>
  }
  return -1; // Return non-zero for error
 8003b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <bmp390_i2c_interface_init>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */

// Wrapper functions for BMP390 driver
uint8_t bmp390_i2c_interface_init(void) {
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  // MX_I2C1_Init() is called before this, so I2C hardware is already initialized.
  // This function can be a no-op or ensure I2C1 is ready.
  return 0; // Success
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <bmp390_i2c_interface_deinit>:

uint8_t bmp390_i2c_interface_deinit(void) {
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  // Optional: HAL_I2C_DeInit(&hi2c1); if necessary for power down
  return 0; // Success
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <bmp390_i2c_read>:

uint8_t bmp390_i2c_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af04      	add	r7, sp, #16
 8003b7e:	603a      	str	r2, [r7, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
 8003b86:	460b      	mov	r3, r1
 8003b88:	71bb      	strb	r3, [r7, #6]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_read calls this with addr = handle->iic_addr
    if (HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	b299      	uxth	r1, r3
 8003b92:	79bb      	ldrb	r3, [r7, #6]
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	88bb      	ldrh	r3, [r7, #4]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4806      	ldr	r0, [pc, #24]	@ (8003bc0 <bmp390_i2c_read+0x48>)
 8003ba8:	f003 f86c 	bl	8006c84 <HAL_I2C_Mem_Read>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <bmp390_i2c_read+0x3e>
        return 0; // Success
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <bmp390_i2c_read+0x40>
    }
    return 1; // Failure
 8003bb6:	2301      	movs	r3, #1
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000438 	.word	0x20000438

08003bc4 <bmp390_i2c_write>:

uint8_t bmp390_i2c_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af04      	add	r7, sp, #16
 8003bca:	603a      	str	r2, [r7, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	71bb      	strb	r3, [r7, #6]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_write calls this in a loop with len=1 for multi-byte writes.
    // So, this function will effectively be called to write one byte at a time.
    if (HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	b299      	uxth	r1, r3
 8003bde:	79bb      	ldrb	r3, [r7, #6]
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	9302      	str	r3, [sp, #8]
 8003be8:	88bb      	ldrh	r3, [r7, #4]
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4806      	ldr	r0, [pc, #24]	@ (8003c0c <bmp390_i2c_write+0x48>)
 8003bf4:	f002 ff32 	bl	8006a5c <HAL_I2C_Mem_Write>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <bmp390_i2c_write+0x3e>
        return 0; // Success
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <bmp390_i2c_write+0x40>
    }
    return 1; // Failure
 8003c02:	2301      	movs	r3, #1
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000438 	.word	0x20000438

08003c10 <bmp390_delay_ms>:

void bmp390_delay_ms(uint32_t ms) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f001 ff33 	bl	8005a84 <HAL_Delay>
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <bmp390_spi_interface_init>:

// Dummy SPI functions to satisfy driver checks when using I2C
uint8_t bmp390_spi_interface_init(void) {
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <bmp390_spi_interface_deinit>:

uint8_t bmp390_spi_interface_deinit(void) {
 8003c36:	b480      	push	{r7}
 8003c38:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <bmp390_spi_read>:

uint8_t bmp390_spi_read(uint8_t reg, uint8_t *buf, uint16_t len) {
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	6039      	str	r1, [r7, #0]
 8003c50:	71fb      	strb	r3, [r7, #7]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8003c56:	2301      	movs	r3, #1
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <bmp390_spi_write>:

uint8_t bmp390_spi_write(uint8_t reg, uint8_t *buf, uint16_t len) {
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	71fb      	strb	r3, [r7, #7]
 8003c70:	4613      	mov	r3, r2
 8003c72:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8003c74:	2301      	movs	r3, #1
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <bmp390_debug_print>:

void bmp390_debug_print(const char *const fmt, ...) {
 8003c82:	b40f      	push	{r0, r1, r2, r3}
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b0a2      	sub	sp, #136	@ 0x88
 8003c88:	af00      	add	r7, sp, #0
    char dbg_buffer[128]; // Buffer for debug messages
    va_list args;
    va_start(args, fmt);
 8003c8a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c8e:	607b      	str	r3, [r7, #4]
    vsnprintf(dbg_buffer, sizeof(dbg_buffer), fmt, args);
 8003c90:	f107 0008 	add.w	r0, r7, #8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003c9a:	2180      	movs	r1, #128	@ 0x80
 8003c9c:	f006 ff5c 	bl	800ab58 <vsniprintf>
    va_end(args);
    // Direct transmit is simpler if buffer is managed carefully
    // HAL_UART_Transmit(&huart3, (uint8_t*)"BMP390_DBG: ", 12, HAL_MAX_DELAY);
    // HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buffer, strlen(dbg_buffer), HAL_MAX_DELAY);
    (void)dbg_buffer; // Suppress unused variable warning if UART lines are commented
}
 8003ca0:	bf00      	nop
 8003ca2:	3788      	adds	r7, #136	@ 0x88
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003caa:	b004      	add	sp, #16
 8003cac:	4770      	bx	lr
	...

08003cb0 <calibrate_sea_level_pressure_hpa>:


// Altitude calculation functions
// pressure_hpa: current measured pressure in hPa
// known_altitude_meters: current known altitude in meters
void calibrate_sea_level_pressure_hpa(float current_pressure_hpa, float known_altitude_meters) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8003cba:	edc7 0a00 	vstr	s1, [r7]
  sea_level_pressure_hpa = current_pressure_hpa / powf((1.0f - (known_altitude_meters * 0.0000225577f)), 5.255877f);
 8003cbe:	edd7 7a00 	vldr	s15, [r7]
 8003cc2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003cf8 <calibrate_sea_level_pressure_hpa+0x48>
 8003cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd2:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8003cfc <calibrate_sea_level_pressure_hpa+0x4c>
 8003cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cda:	f00a fb27 	bl	800e32c <powf>
 8003cde:	eef0 6a40 	vmov.f32	s13, s0
 8003ce2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cea:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <calibrate_sea_level_pressure_hpa+0x50>)
 8003cec:	edc3 7a00 	vstr	s15, [r3]
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	37bd3a4b 	.word	0x37bd3a4b
 8003cfc:	40a83025 	.word	0x40a83025
 8003d00:	20000d58 	.word	0x20000d58

08003d04 <calculate_altitude_hpa>:

// pressure_hpa: current measured pressure in hPa
// returns altitude in meters
float calculate_altitude_hpa(float pressure_hpa) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (sea_level_pressure_hpa <= 0) return 0.0f; // Avoid division by zero or log of non-positive
 8003d0e:	4b13      	ldr	r3, [pc, #76]	@ (8003d5c <calculate_altitude_hpa+0x58>)
 8003d10:	edd3 7a00 	vldr	s15, [r3]
 8003d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1c:	d802      	bhi.n	8003d24 <calculate_altitude_hpa+0x20>
 8003d1e:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8003d60 <calculate_altitude_hpa+0x5c>
 8003d22:	e016      	b.n	8003d52 <calculate_altitude_hpa+0x4e>
  return 44330.0f * (1.0f - powf(pressure_hpa / sea_level_pressure_hpa, 0.1903f));
 8003d24:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <calculate_altitude_hpa+0x58>)
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d32:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8003d64 <calculate_altitude_hpa+0x60>
 8003d36:	eeb0 0a66 	vmov.f32	s0, s13
 8003d3a:	f00a faf7 	bl	800e32c <powf>
 8003d3e:	eef0 7a40 	vmov.f32	s15, s0
 8003d42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d4a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003d68 <calculate_altitude_hpa+0x64>
 8003d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003d52:	eeb0 0a67 	vmov.f32	s0, s15
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20000d58 	.word	0x20000d58
 8003d60:	00000000 	.word	0x00000000
 8003d64:	3e42de01 	.word	0x3e42de01
 8003d68:	472d2a00 	.word	0x472d2a00

08003d6c <lsm6dso_from_fs16g_to_mg>:
  * @brief  Converts raw accelerometer data from LSM6DSO to mg.
  * @param  lsb Raw data from the sensor.
  * @retval Acceleration in mg.
  */
static float lsm6dso_from_fs16g_to_mg(int16_t lsb)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	80fb      	strh	r3, [r7, #6]
  // Apply a 2x correction factor - the sensor is reporting ~half the expected values
  return (float)lsb * 0.488f * 2.0f; // Sensitivity for +/-16g full scale with 2x correction
 8003d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d82:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003d9c <lsm6dso_from_fs16g_to_mg+0x30>
 8003d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 8003d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	3ef9db23 	.word	0x3ef9db23

08003da0 <lsm6dso_from_fs2000dps_to_mdps>:
  * @brief  Converts raw gyroscope data from LSM6DSO to mdps.
  * @param  lsb Raw data from the sensor.
  * @retval Angular rate in mdps.
  */
static float lsm6dso_from_fs2000dps_to_mdps(int16_t lsb)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	80fb      	strh	r3, [r7, #6]
  return (float)lsb * 70.0f; // Sensitivity for +/-2000dps full scale (70 mdps/LSB)
 8003daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003dcc <lsm6dso_from_fs2000dps_to_mdps+0x2c>
 8003dba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	428c0000 	.word	0x428c0000

08003dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	b0cd      	sub	sp, #308	@ 0x134
 8003dd6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dd8:	f001 fdf7 	bl	80059ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ddc:	f001 f8b2 	bl	8004f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003de0:	f001 fa04 	bl	80051ec <MX_GPIO_Init>
  MX_ETH_Init();
 8003de4:	f001 f916 	bl	8005014 <MX_ETH_Init>
  MX_I2C1_Init();
 8003de8:	f001 f962 	bl	80050b0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003dec:	f001 f9a0 	bl	8005130 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003df0:	f001 f9ce 	bl	8005190 <MX_USB_OTG_FS_PCD_Init>
  // Initialize I2C (already called by HAL_Init system, but good to ensure)
  // MX_I2C1_Init(); // Called above in peripheral init sequence

  // char uart_buffer[100]; // Moved global and resized
  
  sprintf(uart_buffer, "System Initialized. UART OK.\r\n");
 8003df4:	4997      	ldr	r1, [pc, #604]	@ (8004054 <main+0x284>)
 8003df6:	4898      	ldr	r0, [pc, #608]	@ (8004058 <main+0x288>)
 8003df8:	f006 fe1a 	bl	800aa30 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003dfc:	4896      	ldr	r0, [pc, #600]	@ (8004058 <main+0x288>)
 8003dfe:	f7fc fa57 	bl	80002b0 <strlen>
 8003e02:	4603      	mov	r3, r0
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	4993      	ldr	r1, [pc, #588]	@ (8004058 <main+0x288>)
 8003e0c:	4893      	ldr	r0, [pc, #588]	@ (800405c <main+0x28c>)
 8003e0e:	f004 ff05 	bl	8008c1c <HAL_UART_Transmit>
  
  // Scan the I2C bus first to see what devices are present
  sprintf(uart_buffer, "Scanning I2C bus for devices...\r\n");
 8003e12:	4993      	ldr	r1, [pc, #588]	@ (8004060 <main+0x290>)
 8003e14:	4890      	ldr	r0, [pc, #576]	@ (8004058 <main+0x288>)
 8003e16:	f006 fe0b 	bl	800aa30 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003e1a:	488f      	ldr	r0, [pc, #572]	@ (8004058 <main+0x288>)
 8003e1c:	f7fc fa48 	bl	80002b0 <strlen>
 8003e20:	4603      	mov	r3, r0
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	498b      	ldr	r1, [pc, #556]	@ (8004058 <main+0x288>)
 8003e2a:	488c      	ldr	r0, [pc, #560]	@ (800405c <main+0x28c>)
 8003e2c:	f004 fef6 	bl	8008c1c <HAL_UART_Transmit>
  
  uint8_t i2c_devices_found = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  for (uint8_t i = 1; i < 128; i++) {
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8003e3c:	e04d      	b.n	8003eda <main+0x10a>
    if (i < 0x08 || i > 0x77) continue;
 8003e3e:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8003e42:	2b07      	cmp	r3, #7
 8003e44:	d943      	bls.n	8003ece <main+0xfe>
 8003e46:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8003e4a:	2b77      	cmp	r3, #119	@ 0x77
 8003e4c:	d83f      	bhi.n	8003ece <main+0xfe>

    HAL_StatusTypeDef i2c_result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 2, 10); // Use 2 trials, 10ms timeout
 8003e4e:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	b299      	uxth	r1, r3
 8003e58:	230a      	movs	r3, #10
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	4881      	ldr	r0, [pc, #516]	@ (8004064 <main+0x294>)
 8003e5e:	f003 f82b 	bl	8006eb8 <HAL_I2C_IsDeviceReady>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    
    if (i2c_result == HAL_OK) {
 8003e68:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d12f      	bne.n	8003ed0 <main+0x100>
      i2c_devices_found++;
 8003e70:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003e74:	3301      	adds	r3, #1
 8003e76:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      sprintf(uart_buffer, "Found I2C device at address: 0x%02X\r\n", i);
 8003e7a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4979      	ldr	r1, [pc, #484]	@ (8004068 <main+0x298>)
 8003e82:	4875      	ldr	r0, [pc, #468]	@ (8004058 <main+0x288>)
 8003e84:	f006 fdd4 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003e88:	4873      	ldr	r0, [pc, #460]	@ (8004058 <main+0x288>)
 8003e8a:	f7fc fa11 	bl	80002b0 <strlen>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
 8003e96:	4970      	ldr	r1, [pc, #448]	@ (8004058 <main+0x288>)
 8003e98:	4870      	ldr	r0, [pc, #448]	@ (800405c <main+0x28c>)
 8003e9a:	f004 febf 	bl	8008c1c <HAL_UART_Transmit>
      
      if (i == (BMP390_I2C_ADDRESS_LOW >> 1) || i == (BMP390_I2C_ADDRESS_HIGH >> 1)) {
 8003e9e:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8003ea2:	2b76      	cmp	r3, #118	@ 0x76
 8003ea4:	d003      	beq.n	8003eae <main+0xde>
 8003ea6:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8003eaa:	2b77      	cmp	r3, #119	@ 0x77
 8003eac:	d110      	bne.n	8003ed0 <main+0x100>
        sprintf(uart_buffer, "  --> This could be a BMP390 sensor!\r\n");
 8003eae:	496f      	ldr	r1, [pc, #444]	@ (800406c <main+0x29c>)
 8003eb0:	4869      	ldr	r0, [pc, #420]	@ (8004058 <main+0x288>)
 8003eb2:	f006 fdbd 	bl	800aa30 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003eb6:	4868      	ldr	r0, [pc, #416]	@ (8004058 <main+0x288>)
 8003eb8:	f7fc f9fa 	bl	80002b0 <strlen>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec4:	4964      	ldr	r1, [pc, #400]	@ (8004058 <main+0x288>)
 8003ec6:	4865      	ldr	r0, [pc, #404]	@ (800405c <main+0x28c>)
 8003ec8:	f004 fea8 	bl	8008c1c <HAL_UART_Transmit>
 8003ecc:	e000      	b.n	8003ed0 <main+0x100>
    if (i < 0x08 || i > 0x77) continue;
 8003ece:	bf00      	nop
  for (uint8_t i = 1; i < 128; i++) {
 8003ed0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8003eda:	f997 310e 	ldrsb.w	r3, [r7, #270]	@ 0x10e
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	daad      	bge.n	8003e3e <main+0x6e>
      }
    }
  }
  
  if (i2c_devices_found == 0) {
 8003ee2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <main+0x13a>
    sprintf(uart_buffer, "No I2C devices found! Check wiring/pull-ups.\r\n");
 8003eea:	4961      	ldr	r1, [pc, #388]	@ (8004070 <main+0x2a0>)
 8003eec:	485a      	ldr	r0, [pc, #360]	@ (8004058 <main+0x288>)
 8003eee:	f006 fd9f 	bl	800aa30 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003ef2:	4859      	ldr	r0, [pc, #356]	@ (8004058 <main+0x288>)
 8003ef4:	f7fc f9dc 	bl	80002b0 <strlen>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	f04f 33ff 	mov.w	r3, #4294967295
 8003f00:	4955      	ldr	r1, [pc, #340]	@ (8004058 <main+0x288>)
 8003f02:	4856      	ldr	r0, [pc, #344]	@ (800405c <main+0x28c>)
 8003f04:	f004 fe8a 	bl	8008c1c <HAL_UART_Transmit>
 8003f08:	e011      	b.n	8003f2e <main+0x15e>
  } else {
    sprintf(uart_buffer, "Found %d I2C devices in total.\r\n", i2c_devices_found);
 8003f0a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4958      	ldr	r1, [pc, #352]	@ (8004074 <main+0x2a4>)
 8003f12:	4851      	ldr	r0, [pc, #324]	@ (8004058 <main+0x288>)
 8003f14:	f006 fd8c 	bl	800aa30 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003f18:	484f      	ldr	r0, [pc, #316]	@ (8004058 <main+0x288>)
 8003f1a:	f7fc f9c9 	bl	80002b0 <strlen>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	494c      	ldr	r1, [pc, #304]	@ (8004058 <main+0x288>)
 8003f28:	484c      	ldr	r0, [pc, #304]	@ (800405c <main+0x28c>)
 8003f2a:	f004 fe77 	bl	8008c1c <HAL_UART_Transmit>
  }

  // Initialize LSM6DSO
  sprintf(uart_buffer, "Initializing LSM6DSO...\r\n");
 8003f2e:	4952      	ldr	r1, [pc, #328]	@ (8004078 <main+0x2a8>)
 8003f30:	4849      	ldr	r0, [pc, #292]	@ (8004058 <main+0x288>)
 8003f32:	f006 fd7d 	bl	800aa30 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003f36:	4848      	ldr	r0, [pc, #288]	@ (8004058 <main+0x288>)
 8003f38:	f7fc f9ba 	bl	80002b0 <strlen>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	f04f 33ff 	mov.w	r3, #4294967295
 8003f44:	4944      	ldr	r1, [pc, #272]	@ (8004058 <main+0x288>)
 8003f46:	4845      	ldr	r0, [pc, #276]	@ (800405c <main+0x28c>)
 8003f48:	f004 fe68 	bl	8008c1c <HAL_UART_Transmit>

  dev_ctx.write_reg = platform_write;
 8003f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800407c <main+0x2ac>)
 8003f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004080 <main+0x2b0>)
 8003f50:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8003f52:	4b4a      	ldr	r3, [pc, #296]	@ (800407c <main+0x2ac>)
 8003f54:	4a4b      	ldr	r2, [pc, #300]	@ (8004084 <main+0x2b4>)
 8003f56:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 8003f58:	4b48      	ldr	r3, [pc, #288]	@ (800407c <main+0x2ac>)
 8003f5a:	4a42      	ldr	r2, [pc, #264]	@ (8004064 <main+0x294>)
 8003f5c:	60da      	str	r2, [r3, #12]

  // Check device ID
  lsm6dso_device_id_get(&dev_ctx, &whoamI_lsm);
 8003f5e:	494a      	ldr	r1, [pc, #296]	@ (8004088 <main+0x2b8>)
 8003f60:	4846      	ldr	r0, [pc, #280]	@ (800407c <main+0x2ac>)
 8003f62:	f7ff fcfa 	bl	800395a <lsm6dso_device_id_get>
  if (whoamI_lsm == LSM6DSO_WHO_AM_I) {
 8003f66:	4b48      	ldr	r3, [pc, #288]	@ (8004088 <main+0x2b8>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d112      	bne.n	8003f94 <main+0x1c4>
    sprintf(uart_buffer, "LSM6DSO WHO_AM_I is OK: 0x%02X\r\n", whoamI_lsm);
 8003f6e:	4b46      	ldr	r3, [pc, #280]	@ (8004088 <main+0x2b8>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	4945      	ldr	r1, [pc, #276]	@ (800408c <main+0x2bc>)
 8003f76:	4838      	ldr	r0, [pc, #224]	@ (8004058 <main+0x288>)
 8003f78:	f006 fd5a 	bl	800aa30 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003f7c:	4836      	ldr	r0, [pc, #216]	@ (8004058 <main+0x288>)
 8003f7e:	f7fc f997 	bl	80002b0 <strlen>
 8003f82:	4603      	mov	r3, r0
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	4933      	ldr	r1, [pc, #204]	@ (8004058 <main+0x288>)
 8003f8c:	4833      	ldr	r0, [pc, #204]	@ (800405c <main+0x28c>)
 8003f8e:	f004 fe45 	bl	8008c1c <HAL_UART_Transmit>
 8003f92:	e011      	b.n	8003fb8 <main+0x1e8>
  } else {
    sprintf(uart_buffer, "LSM6DSO WHO_AM_I FAILED! Expected 0x%02X, got 0x%02X\r\n", LSM6DSO_WHO_AM_I, whoamI_lsm);
 8003f94:	4b3c      	ldr	r3, [pc, #240]	@ (8004088 <main+0x2b8>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	220f      	movs	r2, #15
 8003f9a:	493d      	ldr	r1, [pc, #244]	@ (8004090 <main+0x2c0>)
 8003f9c:	482e      	ldr	r0, [pc, #184]	@ (8004058 <main+0x288>)
 8003f9e:	f006 fd47 	bl	800aa30 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003fa2:	482d      	ldr	r0, [pc, #180]	@ (8004058 <main+0x288>)
 8003fa4:	f7fc f984 	bl	80002b0 <strlen>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb0:	4929      	ldr	r1, [pc, #164]	@ (8004058 <main+0x288>)
 8003fb2:	482a      	ldr	r0, [pc, #168]	@ (800405c <main+0x28c>)
 8003fb4:	f004 fe32 	bl	8008c1c <HAL_UART_Transmit>
    // Error_Handler(); // Decide if this is fatal
  }

  // Restore default configuration
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4830      	ldr	r0, [pc, #192]	@ (800407c <main+0x2ac>)
 8003fbc:	f7ff fcde 	bl	800397c <lsm6dso_reset_set>
  do {
    lsm6dso_reset_get(&dev_ctx, &rst_lsm);
 8003fc0:	4934      	ldr	r1, [pc, #208]	@ (8004094 <main+0x2c4>)
 8003fc2:	482e      	ldr	r0, [pc, #184]	@ (800407c <main+0x2ac>)
 8003fc4:	f7ff fd00 	bl	80039c8 <lsm6dso_reset_get>
  } while (rst_lsm);
 8003fc8:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <main+0x2c4>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f7      	bne.n	8003fc0 <main+0x1f0>

  // Enable Block Data Update
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	482a      	ldr	r0, [pc, #168]	@ (800407c <main+0x2ac>)
 8003fd4:	f7ff fbd4 	bl	8003780 <lsm6dso_block_data_update_set>

  // Set Output Data Rate for Accelerometer and Gyroscope
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_104Hz); // 104 Hz ODR for Accelerometer
 8003fd8:	2104      	movs	r1, #4
 8003fda:	4828      	ldr	r0, [pc, #160]	@ (800407c <main+0x2ac>)
 8003fdc:	f7ff f9b6 	bl	800334c <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_104Hz); // 104 Hz ODR for Gyroscope
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	4826      	ldr	r0, [pc, #152]	@ (800407c <main+0x2ac>)
 8003fe4:	f7ff fad2 	bl	800358c <lsm6dso_gy_data_rate_set>

  // Set Full Scale for Accelerometer and Gyroscope
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_16g);    // +/- 16g Full Scale for Accelerometer
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4824      	ldr	r0, [pc, #144]	@ (800407c <main+0x2ac>)
 8003fec:	f7ff f987 	bl	80032fe <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps); // +/- 2000 dps Full Scale for Gyroscope
 8003ff0:	2106      	movs	r1, #6
 8003ff2:	4822      	ldr	r0, [pc, #136]	@ (800407c <main+0x2ac>)
 8003ff4:	f7ff faa4 	bl	8003540 <lsm6dso_gy_full_scale_set>

  // Make sure xl_fs_mode is set to 0 to ensure 16g works correctly
  uint8_t ctrl8_xl_val = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
  lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 8003ffe:	f107 0272 	add.w	r2, r7, #114	@ 0x72
 8004002:	2301      	movs	r3, #1
 8004004:	2117      	movs	r1, #23
 8004006:	481d      	ldr	r0, [pc, #116]	@ (800407c <main+0x2ac>)
 8004008:	f7ff f949 	bl	800329e <lsm6dso_read_reg>
  // Clear the xl_fs_mode bit (bit 1) to ensure proper 16g operation
  ctrl8_xl_val &= ~(1 << 1);
 800400c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8004010:	f023 0302 	bic.w	r3, r3, #2
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
  lsm6dso_write_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 800401a:	f107 0272 	add.w	r2, r7, #114	@ 0x72
 800401e:	2301      	movs	r3, #1
 8004020:	2117      	movs	r1, #23
 8004022:	4816      	ldr	r0, [pc, #88]	@ (800407c <main+0x2ac>)
 8004024:	f7ff f953 	bl	80032ce <lsm6dso_write_reg>
  
  // ---- START DEBUG: Read back CTRL1_XL and CTRL8_XL ----
  uint8_t ctrl1_xl_val = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  if (lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL1_XL, &ctrl1_xl_val, 1) == 0) {
 800402e:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 8004032:	2301      	movs	r3, #1
 8004034:	2110      	movs	r1, #16
 8004036:	4811      	ldr	r0, [pc, #68]	@ (800407c <main+0x2ac>)
 8004038:	f7ff f931 	bl	800329e <lsm6dso_read_reg>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d12c      	bne.n	800409c <main+0x2cc>
    sprintf(uart_buffer, "LSM6DSO CTRL1_XL after set: 0x%02X\r\n", ctrl1_xl_val);
 8004042:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8004046:	461a      	mov	r2, r3
 8004048:	4913      	ldr	r1, [pc, #76]	@ (8004098 <main+0x2c8>)
 800404a:	4803      	ldr	r0, [pc, #12]	@ (8004058 <main+0x288>)
 800404c:	f006 fcf0 	bl	800aa30 <siprintf>
 8004050:	e028      	b.n	80040a4 <main+0x2d4>
 8004052:	bf00      	nop
 8004054:	0800f354 	.word	0x0800f354
 8004058:	20000c58 	.word	0x20000c58
 800405c:	2000048c 	.word	0x2000048c
 8004060:	0800f374 	.word	0x0800f374
 8004064:	20000438 	.word	0x20000438
 8004068:	0800f398 	.word	0x0800f398
 800406c:	0800f3c0 	.word	0x0800f3c0
 8004070:	0800f3e8 	.word	0x0800f3e8
 8004074:	0800f418 	.word	0x0800f418
 8004078:	0800f43c 	.word	0x0800f43c
 800407c:	200009f4 	.word	0x200009f4
 8004080:	08003acd 	.word	0x08003acd
 8004084:	08003b13 	.word	0x08003b13
 8004088:	20000d6a 	.word	0x20000d6a
 800408c:	0800f458 	.word	0x0800f458
 8004090:	0800f47c 	.word	0x0800f47c
 8004094:	20000d6b 	.word	0x20000d6b
 8004098:	0800f4b4 	.word	0x0800f4b4
  } else {
    sprintf(uart_buffer, "LSM6DSO Failed to read CTRL1_XL\r\n");
 800409c:	49a1      	ldr	r1, [pc, #644]	@ (8004324 <main+0x554>)
 800409e:	48a2      	ldr	r0, [pc, #648]	@ (8004328 <main+0x558>)
 80040a0:	f006 fcc6 	bl	800aa30 <siprintf>
  }
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80040a4:	48a0      	ldr	r0, [pc, #640]	@ (8004328 <main+0x558>)
 80040a6:	f7fc f903 	bl	80002b0 <strlen>
 80040aa:	4603      	mov	r3, r0
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	499d      	ldr	r1, [pc, #628]	@ (8004328 <main+0x558>)
 80040b4:	489d      	ldr	r0, [pc, #628]	@ (800432c <main+0x55c>)
 80040b6:	f004 fdb1 	bl	8008c1c <HAL_UART_Transmit>
  
  lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 80040ba:	f107 0272 	add.w	r2, r7, #114	@ 0x72
 80040be:	2301      	movs	r3, #1
 80040c0:	2117      	movs	r1, #23
 80040c2:	489b      	ldr	r0, [pc, #620]	@ (8004330 <main+0x560>)
 80040c4:	f7ff f8eb 	bl	800329e <lsm6dso_read_reg>
  sprintf(uart_buffer, "LSM6DSO CTRL8_XL after set: 0x%02X\r\n", ctrl8_xl_val);
 80040c8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80040cc:	461a      	mov	r2, r3
 80040ce:	4999      	ldr	r1, [pc, #612]	@ (8004334 <main+0x564>)
 80040d0:	4895      	ldr	r0, [pc, #596]	@ (8004328 <main+0x558>)
 80040d2:	f006 fcad 	bl	800aa30 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80040d6:	4894      	ldr	r0, [pc, #592]	@ (8004328 <main+0x558>)
 80040d8:	f7fc f8ea 	bl	80002b0 <strlen>
 80040dc:	4603      	mov	r3, r0
 80040de:	b29a      	uxth	r2, r3
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	4990      	ldr	r1, [pc, #576]	@ (8004328 <main+0x558>)
 80040e6:	4891      	ldr	r0, [pc, #580]	@ (800432c <main+0x55c>)
 80040e8:	f004 fd98 	bl	8008c1c <HAL_UART_Transmit>
  // ---- END DEBUG ----

  sprintf(uart_buffer, "LSM6DSO Initialized and Configured (XL:104Hz/16g, GY:104Hz/2000dps).\r\n");
 80040ec:	4992      	ldr	r1, [pc, #584]	@ (8004338 <main+0x568>)
 80040ee:	488e      	ldr	r0, [pc, #568]	@ (8004328 <main+0x558>)
 80040f0:	f006 fc9e 	bl	800aa30 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80040f4:	488c      	ldr	r0, [pc, #560]	@ (8004328 <main+0x558>)
 80040f6:	f7fc f8db 	bl	80002b0 <strlen>
 80040fa:	4603      	mov	r3, r0
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004102:	4989      	ldr	r1, [pc, #548]	@ (8004328 <main+0x558>)
 8004104:	4889      	ldr	r0, [pc, #548]	@ (800432c <main+0x55c>)
 8004106:	f004 fd89 	bl	8008c1c <HAL_UART_Transmit>


  // Initialize BMP390 using the new driver
  DRIVER_BMP390_LINK_INIT(&bmp390_handle, bmp390_handle_t);
 800410a:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800410e:	2100      	movs	r1, #0
 8004110:	488a      	ldr	r0, [pc, #552]	@ (800433c <main+0x56c>)
 8004112:	f006 fd2f 	bl	800ab74 <memset>
  DRIVER_BMP390_LINK_IIC_INIT(&bmp390_handle, bmp390_i2c_interface_init);
 8004116:	4b89      	ldr	r3, [pc, #548]	@ (800433c <main+0x56c>)
 8004118:	4a89      	ldr	r2, [pc, #548]	@ (8004340 <main+0x570>)
 800411a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  DRIVER_BMP390_LINK_IIC_DEINIT(&bmp390_handle, bmp390_i2c_interface_deinit);
 800411e:	4b87      	ldr	r3, [pc, #540]	@ (800433c <main+0x56c>)
 8004120:	4a88      	ldr	r2, [pc, #544]	@ (8004344 <main+0x574>)
 8004122:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  DRIVER_BMP390_LINK_IIC_READ(&bmp390_handle, bmp390_i2c_read);
 8004126:	4b85      	ldr	r3, [pc, #532]	@ (800433c <main+0x56c>)
 8004128:	4a87      	ldr	r2, [pc, #540]	@ (8004348 <main+0x578>)
 800412a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  DRIVER_BMP390_LINK_IIC_WRITE(&bmp390_handle, bmp390_i2c_write);
 800412e:	4b83      	ldr	r3, [pc, #524]	@ (800433c <main+0x56c>)
 8004130:	4a86      	ldr	r2, [pc, #536]	@ (800434c <main+0x57c>)
 8004132:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  DRIVER_BMP390_LINK_DELAY_MS(&bmp390_handle, bmp390_delay_ms);
 8004136:	4b81      	ldr	r3, [pc, #516]	@ (800433c <main+0x56c>)
 8004138:	4a85      	ldr	r2, [pc, #532]	@ (8004350 <main+0x580>)
 800413a:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
  DRIVER_BMP390_LINK_DEBUG_PRINT(&bmp390_handle, bmp390_debug_print);
 800413e:	4b7f      	ldr	r3, [pc, #508]	@ (800433c <main+0x56c>)
 8004140:	4a84      	ldr	r2, [pc, #528]	@ (8004354 <main+0x584>)
 8004142:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c

  // Link dummy SPI functions as well, even if not used, to satisfy driver checks
  DRIVER_BMP390_LINK_SPI_INIT(&bmp390_handle, bmp390_spi_interface_init);
 8004146:	4b7d      	ldr	r3, [pc, #500]	@ (800433c <main+0x56c>)
 8004148:	4a83      	ldr	r2, [pc, #524]	@ (8004358 <main+0x588>)
 800414a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  DRIVER_BMP390_LINK_SPI_DEINIT(&bmp390_handle, bmp390_spi_interface_deinit);
 800414e:	4b7b      	ldr	r3, [pc, #492]	@ (800433c <main+0x56c>)
 8004150:	4a82      	ldr	r2, [pc, #520]	@ (800435c <main+0x58c>)
 8004152:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  DRIVER_BMP390_LINK_SPI_READ(&bmp390_handle, bmp390_spi_read);
 8004156:	4b79      	ldr	r3, [pc, #484]	@ (800433c <main+0x56c>)
 8004158:	4a81      	ldr	r2, [pc, #516]	@ (8004360 <main+0x590>)
 800415a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
  DRIVER_BMP390_LINK_SPI_WRITE(&bmp390_handle, bmp390_spi_write);
 800415e:	4b77      	ldr	r3, [pc, #476]	@ (800433c <main+0x56c>)
 8004160:	4a80      	ldr	r2, [pc, #512]	@ (8004364 <main+0x594>)
 8004162:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

  bmp390_set_interface(&bmp390_handle, BMP390_INTERFACE_IIC);
 8004166:	2100      	movs	r1, #0
 8004168:	4874      	ldr	r0, [pc, #464]	@ (800433c <main+0x56c>)
 800416a:	f7ff f882 	bl	8003272 <bmp390_set_interface>
  // IMPORTANT: Set the correct I2C address based on your SDO/AD0 pin connection
  bmp390_set_addr_pin(&bmp390_handle, BMP390_ADDRESS_ADO_HIGH); // Corrected: Use 0x77 as detected by scan
 800416e:	21ee      	movs	r1, #238	@ 0xee
 8004170:	4872      	ldr	r0, [pc, #456]	@ (800433c <main+0x56c>)
 8004172:	f7ff f869 	bl	8003248 <bmp390_set_addr_pin>

  sprintf(uart_buffer, "Initializing BMP390 (new driver)...\r\n");
 8004176:	497c      	ldr	r1, [pc, #496]	@ (8004368 <main+0x598>)
 8004178:	486b      	ldr	r0, [pc, #428]	@ (8004328 <main+0x558>)
 800417a:	f006 fc59 	bl	800aa30 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800417e:	486a      	ldr	r0, [pc, #424]	@ (8004328 <main+0x558>)
 8004180:	f7fc f896 	bl	80002b0 <strlen>
 8004184:	4603      	mov	r3, r0
 8004186:	b29a      	uxth	r2, r3
 8004188:	f04f 33ff 	mov.w	r3, #4294967295
 800418c:	4966      	ldr	r1, [pc, #408]	@ (8004328 <main+0x558>)
 800418e:	4867      	ldr	r0, [pc, #412]	@ (800432c <main+0x55c>)
 8004190:	f004 fd44 	bl	8008c1c <HAL_UART_Transmit>

  if (bmp390_init(&bmp390_handle) != 0) {
 8004194:	4869      	ldr	r0, [pc, #420]	@ (800433c <main+0x56c>)
 8004196:	f7fe fd0b 	bl	8002bb0 <bmp390_init>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d011      	beq.n	80041c4 <main+0x3f4>
      sprintf(uart_buffer, "BMP390 new driver initialization FAILED!\r\n");
 80041a0:	4972      	ldr	r1, [pc, #456]	@ (800436c <main+0x59c>)
 80041a2:	4861      	ldr	r0, [pc, #388]	@ (8004328 <main+0x558>)
 80041a4:	f006 fc44 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80041a8:	485f      	ldr	r0, [pc, #380]	@ (8004328 <main+0x558>)
 80041aa:	f7fc f881 	bl	80002b0 <strlen>
 80041ae:	4603      	mov	r3, r0
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	495c      	ldr	r1, [pc, #368]	@ (8004328 <main+0x558>)
 80041b8:	485c      	ldr	r0, [pc, #368]	@ (800432c <main+0x55c>)
 80041ba:	f004 fd2f 	bl	8008c1c <HAL_UART_Transmit>
      Error_Handler();
 80041be:	f001 f8b7 	bl	8005330 <Error_Handler>
 80041c2:	e0f4      	b.n	80043ae <main+0x5de>
  } else {
      sprintf(uart_buffer, "BMP390 new driver initialized successfully!\r\n");
 80041c4:	496a      	ldr	r1, [pc, #424]	@ (8004370 <main+0x5a0>)
 80041c6:	4858      	ldr	r0, [pc, #352]	@ (8004328 <main+0x558>)
 80041c8:	f006 fc32 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80041cc:	4856      	ldr	r0, [pc, #344]	@ (8004328 <main+0x558>)
 80041ce:	f7fc f86f 	bl	80002b0 <strlen>
 80041d2:	4603      	mov	r3, r0
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	4953      	ldr	r1, [pc, #332]	@ (8004328 <main+0x558>)
 80041dc:	4853      	ldr	r0, [pc, #332]	@ (800432c <main+0x55c>)
 80041de:	f004 fd1d 	bl	8008c1c <HAL_UART_Transmit>

      // Configure sensor settings
      sprintf(uart_buffer, "Configuring BMP390...\r\n");
 80041e2:	4964      	ldr	r1, [pc, #400]	@ (8004374 <main+0x5a4>)
 80041e4:	4850      	ldr	r0, [pc, #320]	@ (8004328 <main+0x558>)
 80041e6:	f006 fc23 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80041ea:	484f      	ldr	r0, [pc, #316]	@ (8004328 <main+0x558>)
 80041ec:	f7fc f860 	bl	80002b0 <strlen>
 80041f0:	4603      	mov	r3, r0
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295
 80041f8:	494b      	ldr	r1, [pc, #300]	@ (8004328 <main+0x558>)
 80041fa:	484c      	ldr	r0, [pc, #304]	@ (800432c <main+0x55c>)
 80041fc:	f004 fd0e 	bl	8008c1c <HAL_UART_Transmit>

      if (bmp390_set_pressure_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x8) != 0) {
 8004200:	2103      	movs	r1, #3
 8004202:	484e      	ldr	r0, [pc, #312]	@ (800433c <main+0x56c>)
 8004204:	f7fe fbbc 	bl	8002980 <bmp390_set_pressure_oversampling>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <main+0x460>
          sprintf(uart_buffer, "BMP390: Failed to set pressure oversampling\r\n");
 800420e:	495a      	ldr	r1, [pc, #360]	@ (8004378 <main+0x5a8>)
 8004210:	4845      	ldr	r0, [pc, #276]	@ (8004328 <main+0x558>)
 8004212:	f006 fc0d 	bl	800aa30 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8004216:	4844      	ldr	r0, [pc, #272]	@ (8004328 <main+0x558>)
 8004218:	f7fc f84a 	bl	80002b0 <strlen>
 800421c:	4603      	mov	r3, r0
 800421e:	b29a      	uxth	r2, r3
 8004220:	f04f 33ff 	mov.w	r3, #4294967295
 8004224:	4940      	ldr	r1, [pc, #256]	@ (8004328 <main+0x558>)
 8004226:	4841      	ldr	r0, [pc, #260]	@ (800432c <main+0x55c>)
 8004228:	f004 fcf8 	bl	8008c1c <HAL_UART_Transmit>
 800422c:	f001 f880 	bl	8005330 <Error_Handler>
      }
      if (bmp390_set_temperature_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x1) != 0) {
 8004230:	2100      	movs	r1, #0
 8004232:	4842      	ldr	r0, [pc, #264]	@ (800433c <main+0x56c>)
 8004234:	f7fe fbf0 	bl	8002a18 <bmp390_set_temperature_oversampling>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d010      	beq.n	8004260 <main+0x490>
          sprintf(uart_buffer, "BMP390: Failed to set temperature oversampling\r\n");
 800423e:	494f      	ldr	r1, [pc, #316]	@ (800437c <main+0x5ac>)
 8004240:	4839      	ldr	r0, [pc, #228]	@ (8004328 <main+0x558>)
 8004242:	f006 fbf5 	bl	800aa30 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8004246:	4838      	ldr	r0, [pc, #224]	@ (8004328 <main+0x558>)
 8004248:	f7fc f832 	bl	80002b0 <strlen>
 800424c:	4603      	mov	r3, r0
 800424e:	b29a      	uxth	r2, r3
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	4934      	ldr	r1, [pc, #208]	@ (8004328 <main+0x558>)
 8004256:	4835      	ldr	r0, [pc, #212]	@ (800432c <main+0x55c>)
 8004258:	f004 fce0 	bl	8008c1c <HAL_UART_Transmit>
 800425c:	f001 f868 	bl	8005330 <Error_Handler>
      }
      if (bmp390_set_odr(&bmp390_handle, BMP390_ODR_25_HZ) != 0) { // Revert to 25 Hz ODR
 8004260:	2103      	movs	r1, #3
 8004262:	4836      	ldr	r0, [pc, #216]	@ (800433c <main+0x56c>)
 8004264:	f7fe fc28 	bl	8002ab8 <bmp390_set_odr>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d010      	beq.n	8004290 <main+0x4c0>
          sprintf(uart_buffer, "BMP390: Failed to set ODR to 25Hz\r\n");
 800426e:	4944      	ldr	r1, [pc, #272]	@ (8004380 <main+0x5b0>)
 8004270:	482d      	ldr	r0, [pc, #180]	@ (8004328 <main+0x558>)
 8004272:	f006 fbdd 	bl	800aa30 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8004276:	482c      	ldr	r0, [pc, #176]	@ (8004328 <main+0x558>)
 8004278:	f7fc f81a 	bl	80002b0 <strlen>
 800427c:	4603      	mov	r3, r0
 800427e:	b29a      	uxth	r2, r3
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
 8004284:	4928      	ldr	r1, [pc, #160]	@ (8004328 <main+0x558>)
 8004286:	4829      	ldr	r0, [pc, #164]	@ (800432c <main+0x55c>)
 8004288:	f004 fcc8 	bl	8008c1c <HAL_UART_Transmit>
 800428c:	f001 f850 	bl	8005330 <Error_Handler>
      }
      if (bmp390_set_pressure(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable pressure
 8004290:	2101      	movs	r1, #1
 8004292:	482a      	ldr	r0, [pc, #168]	@ (800433c <main+0x56c>)
 8004294:	f7fe fa88 	bl	80027a8 <bmp390_set_pressure>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d010      	beq.n	80042c0 <main+0x4f0>
          sprintf(uart_buffer, "BMP390: Failed to enable pressure measurement\r\n");
 800429e:	4939      	ldr	r1, [pc, #228]	@ (8004384 <main+0x5b4>)
 80042a0:	4821      	ldr	r0, [pc, #132]	@ (8004328 <main+0x558>)
 80042a2:	f006 fbc5 	bl	800aa30 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 80042a6:	4820      	ldr	r0, [pc, #128]	@ (8004328 <main+0x558>)
 80042a8:	f7fc f802 	bl	80002b0 <strlen>
 80042ac:	4603      	mov	r3, r0
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	491c      	ldr	r1, [pc, #112]	@ (8004328 <main+0x558>)
 80042b6:	481d      	ldr	r0, [pc, #116]	@ (800432c <main+0x55c>)
 80042b8:	f004 fcb0 	bl	8008c1c <HAL_UART_Transmit>
 80042bc:	f001 f838 	bl	8005330 <Error_Handler>
      }
      if (bmp390_set_temperature(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable temperature
 80042c0:	2101      	movs	r1, #1
 80042c2:	481e      	ldr	r0, [pc, #120]	@ (800433c <main+0x56c>)
 80042c4:	f7fe fabc 	bl	8002840 <bmp390_set_temperature>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <main+0x520>
          sprintf(uart_buffer, "BMP390: Failed to enable temperature measurement\r\n");
 80042ce:	492e      	ldr	r1, [pc, #184]	@ (8004388 <main+0x5b8>)
 80042d0:	4815      	ldr	r0, [pc, #84]	@ (8004328 <main+0x558>)
 80042d2:	f006 fbad 	bl	800aa30 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 80042d6:	4814      	ldr	r0, [pc, #80]	@ (8004328 <main+0x558>)
 80042d8:	f7fb ffea 	bl	80002b0 <strlen>
 80042dc:	4603      	mov	r3, r0
 80042de:	b29a      	uxth	r2, r3
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
 80042e4:	4910      	ldr	r1, [pc, #64]	@ (8004328 <main+0x558>)
 80042e6:	4811      	ldr	r0, [pc, #68]	@ (800432c <main+0x55c>)
 80042e8:	f004 fc98 	bl	8008c1c <HAL_UART_Transmit>
 80042ec:	f001 f820 	bl	8005330 <Error_Handler>
      }
      if (bmp390_set_mode(&bmp390_handle, BMP390_MODE_NORMAL_MODE) != 0) {
 80042f0:	2103      	movs	r1, #3
 80042f2:	4812      	ldr	r0, [pc, #72]	@ (800433c <main+0x56c>)
 80042f4:	f7fe faf4 	bl	80028e0 <bmp390_set_mode>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d048      	beq.n	8004390 <main+0x5c0>
          sprintf(uart_buffer, "BMP390: Failed to set normal mode!\r\n");
 80042fe:	4923      	ldr	r1, [pc, #140]	@ (800438c <main+0x5bc>)
 8004300:	4809      	ldr	r0, [pc, #36]	@ (8004328 <main+0x558>)
 8004302:	f006 fb95 	bl	800aa30 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8004306:	4808      	ldr	r0, [pc, #32]	@ (8004328 <main+0x558>)
 8004308:	f7fb ffd2 	bl	80002b0 <strlen>
 800430c:	4603      	mov	r3, r0
 800430e:	b29a      	uxth	r2, r3
 8004310:	f04f 33ff 	mov.w	r3, #4294967295
 8004314:	4904      	ldr	r1, [pc, #16]	@ (8004328 <main+0x558>)
 8004316:	4805      	ldr	r0, [pc, #20]	@ (800432c <main+0x55c>)
 8004318:	f004 fc80 	bl	8008c1c <HAL_UART_Transmit>
 800431c:	f001 f808 	bl	8005330 <Error_Handler>
 8004320:	e045      	b.n	80043ae <main+0x5de>
 8004322:	bf00      	nop
 8004324:	0800f4dc 	.word	0x0800f4dc
 8004328:	20000c58 	.word	0x20000c58
 800432c:	2000048c 	.word	0x2000048c
 8004330:	200009f4 	.word	0x200009f4
 8004334:	0800f500 	.word	0x0800f500
 8004338:	0800f528 	.word	0x0800f528
 800433c:	20000a08 	.word	0x20000a08
 8004340:	08003b59 	.word	0x08003b59
 8004344:	08003b69 	.word	0x08003b69
 8004348:	08003b79 	.word	0x08003b79
 800434c:	08003bc5 	.word	0x08003bc5
 8004350:	08003c11 	.word	0x08003c11
 8004354:	08003c83 	.word	0x08003c83
 8004358:	08003c27 	.word	0x08003c27
 800435c:	08003c37 	.word	0x08003c37
 8004360:	08003c47 	.word	0x08003c47
 8004364:	08003c65 	.word	0x08003c65
 8004368:	0800f570 	.word	0x0800f570
 800436c:	0800f598 	.word	0x0800f598
 8004370:	0800f5c4 	.word	0x0800f5c4
 8004374:	0800f5f4 	.word	0x0800f5f4
 8004378:	0800f60c 	.word	0x0800f60c
 800437c:	0800f63c 	.word	0x0800f63c
 8004380:	0800f670 	.word	0x0800f670
 8004384:	0800f694 	.word	0x0800f694
 8004388:	0800f6c4 	.word	0x0800f6c4
 800438c:	0800f6f8 	.word	0x0800f6f8
      } else {
          sprintf(uart_buffer, "BMP390 configured for Normal Mode (P_OSR_x8, T_OSR_x1, ODR_25Hz).\r\n");
 8004390:	49a5      	ldr	r1, [pc, #660]	@ (8004628 <main+0x858>)
 8004392:	48a6      	ldr	r0, [pc, #664]	@ (800462c <main+0x85c>)
 8004394:	f006 fb4c 	bl	800aa30 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004398:	48a4      	ldr	r0, [pc, #656]	@ (800462c <main+0x85c>)
 800439a:	f7fb ff89 	bl	80002b0 <strlen>
 800439e:	4603      	mov	r3, r0
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	49a1      	ldr	r1, [pc, #644]	@ (800462c <main+0x85c>)
 80043a8:	48a1      	ldr	r0, [pc, #644]	@ (8004630 <main+0x860>)
 80043aa:	f004 fc37 	bl	8008c1c <HAL_UART_Transmit>
      }
  }

  HAL_Delay(200); // Wait for sensor to stabilize and take first readings after mode set
 80043ae:	20c8      	movs	r0, #200	@ 0xc8
 80043b0:	f001 fb68 	bl	8005a84 <HAL_Delay>

  float initial_pressure_pa_sum = 0;
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  float initial_temperature_c_sum = 0;
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  int valid_calibration_readings = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  uint32_t cal_raw_p, cal_raw_t;
  float cal_p_pa, cal_t_c; // Pressure in Pa, Temp in Celsius

  sprintf(uart_buffer, "Calibrating BMP390 for altitude (takes a few readings)...\r\n");
 80043ca:	499a      	ldr	r1, [pc, #616]	@ (8004634 <main+0x864>)
 80043cc:	4897      	ldr	r0, [pc, #604]	@ (800462c <main+0x85c>)
 80043ce:	f006 fb2f 	bl	800aa30 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80043d2:	4896      	ldr	r0, [pc, #600]	@ (800462c <main+0x85c>)
 80043d4:	f7fb ff6c 	bl	80002b0 <strlen>
 80043d8:	4603      	mov	r3, r0
 80043da:	b29a      	uxth	r2, r3
 80043dc:	f04f 33ff 	mov.w	r3, #4294967295
 80043e0:	4992      	ldr	r1, [pc, #584]	@ (800462c <main+0x85c>)
 80043e2:	4893      	ldr	r0, [pc, #588]	@ (8004630 <main+0x860>)
 80043e4:	f004 fc1a 	bl	8008c1c <HAL_UART_Transmit>

  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80043ee:	e063      	b.n	80044b8 <main+0x6e8>
      if (bmp390_read_temperature_pressure(&bmp390_handle, &cal_raw_t, &cal_t_c, &cal_raw_p, &cal_p_pa) == 0) {
 80043f0:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80043f4:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80043f8:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80043fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	4603      	mov	r3, r0
 8004404:	488c      	ldr	r0, [pc, #560]	@ (8004638 <main+0x868>)
 8004406:	f7fe fd0b 	bl	8002e20 <bmp390_read_temperature_pressure>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d138      	bne.n	8004482 <main+0x6b2>
          initial_pressure_pa_sum += cal_p_pa;
 8004410:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004414:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8004418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800441c:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
          initial_temperature_c_sum += cal_t_c;
 8004420:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004424:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8004428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800442c:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
          valid_calibration_readings++;
 8004430:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004434:	3301      	adds	r3, #1
 8004436:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
          sprintf(uart_buffer, "Calib reading %d: P=%.2f Pa, T=%.2f C\r\n", i + 1, cal_p_pa, cal_t_c);
 800443a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800443e:	1c5e      	adds	r6, r3, #1
 8004440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004442:	4618      	mov	r0, r3
 8004444:	f7fc f8a0 	bl	8000588 <__aeabi_f2d>
 8004448:	4604      	mov	r4, r0
 800444a:	460d      	mov	r5, r1
 800444c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800444e:	4618      	mov	r0, r3
 8004450:	f7fc f89a 	bl	8000588 <__aeabi_f2d>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800445c:	e9cd 4500 	strd	r4, r5, [sp]
 8004460:	4632      	mov	r2, r6
 8004462:	4976      	ldr	r1, [pc, #472]	@ (800463c <main+0x86c>)
 8004464:	4871      	ldr	r0, [pc, #452]	@ (800462c <main+0x85c>)
 8004466:	f006 fae3 	bl	800aa30 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800446a:	4870      	ldr	r0, [pc, #448]	@ (800462c <main+0x85c>)
 800446c:	f7fb ff20 	bl	80002b0 <strlen>
 8004470:	4603      	mov	r3, r0
 8004472:	b29a      	uxth	r2, r3
 8004474:	f04f 33ff 	mov.w	r3, #4294967295
 8004478:	496c      	ldr	r1, [pc, #432]	@ (800462c <main+0x85c>)
 800447a:	486d      	ldr	r0, [pc, #436]	@ (8004630 <main+0x860>)
 800447c:	f004 fbce 	bl	8008c1c <HAL_UART_Transmit>
 8004480:	e012      	b.n	80044a8 <main+0x6d8>
      } else {
          sprintf(uart_buffer, "Calibration reading %d failed.\r\n", i + 1);
 8004482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004486:	3301      	adds	r3, #1
 8004488:	461a      	mov	r2, r3
 800448a:	496d      	ldr	r1, [pc, #436]	@ (8004640 <main+0x870>)
 800448c:	4867      	ldr	r0, [pc, #412]	@ (800462c <main+0x85c>)
 800448e:	f006 facf 	bl	800aa30 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004492:	4866      	ldr	r0, [pc, #408]	@ (800462c <main+0x85c>)
 8004494:	f7fb ff0c 	bl	80002b0 <strlen>
 8004498:	4603      	mov	r3, r0
 800449a:	b29a      	uxth	r2, r3
 800449c:	f04f 33ff 	mov.w	r3, #4294967295
 80044a0:	4962      	ldr	r1, [pc, #392]	@ (800462c <main+0x85c>)
 80044a2:	4863      	ldr	r0, [pc, #396]	@ (8004630 <main+0x860>)
 80044a4:	f004 fbba 	bl	8008c1c <HAL_UART_Transmit>
      }
      HAL_Delay(100); // Delay between readings (adjust based on ODR if necessary)
 80044a8:	2064      	movs	r0, #100	@ 0x64
 80044aa:	f001 faeb 	bl	8005a84 <HAL_Delay>
  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044b2:	3301      	adds	r3, #1
 80044b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80044b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044bc:	2b04      	cmp	r3, #4
 80044be:	dd97      	ble.n	80043f0 <main+0x620>
  }

  if (valid_calibration_readings > 0) {
 80044c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dd50      	ble.n	800456a <main+0x79a>
      float avg_initial_pressure_pa = initial_pressure_pa_sum / valid_calibration_readings;
 80044c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044d4:	edd7 6a42 	vldr	s13, [r7, #264]	@ 0x108
 80044d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044dc:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
      float avg_initial_temperature_c = initial_temperature_c_sum / valid_calibration_readings;
 80044e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80044e4:	ee07 3a90 	vmov	s15, r3
 80044e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044ec:	edd7 6a41 	vldr	s13, [r7, #260]	@ 0x104
 80044f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f4:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
      float known_initial_altitude_m = 0.0f; // Assume starting at 0m altitude for calibration
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      calibrate_sea_level_pressure_hpa(avg_initial_pressure_pa / 100.0f, known_initial_altitude_m); // Convert Pa to hPa
 8004500:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004504:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004644 <main+0x874>
 8004508:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800450c:	edd7 0a33 	vldr	s1, [r7, #204]	@ 0xcc
 8004510:	eeb0 0a47 	vmov.f32	s0, s14
 8004514:	f7ff fbcc 	bl	8003cb0 <calibrate_sea_level_pressure_hpa>

      sprintf(uart_buffer, "BMP390 Calibrated. Avg P: %.2f Pa, Avg T: %.2f C. Sea Level P: %.2f hPa\r\n",
 8004518:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800451c:	f7fc f834 	bl	8000588 <__aeabi_f2d>
 8004520:	4680      	mov	r8, r0
 8004522:	4689      	mov	r9, r1
 8004524:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8004528:	f7fc f82e 	bl	8000588 <__aeabi_f2d>
 800452c:	4604      	mov	r4, r0
 800452e:	460d      	mov	r5, r1
 8004530:	4b45      	ldr	r3, [pc, #276]	@ (8004648 <main+0x878>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc f827 	bl	8000588 <__aeabi_f2d>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004542:	e9cd 4500 	strd	r4, r5, [sp]
 8004546:	4642      	mov	r2, r8
 8004548:	464b      	mov	r3, r9
 800454a:	4940      	ldr	r1, [pc, #256]	@ (800464c <main+0x87c>)
 800454c:	4837      	ldr	r0, [pc, #220]	@ (800462c <main+0x85c>)
 800454e:	f006 fa6f 	bl	800aa30 <siprintf>
              avg_initial_pressure_pa, avg_initial_temperature_c, sea_level_pressure_hpa);
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004552:	4836      	ldr	r0, [pc, #216]	@ (800462c <main+0x85c>)
 8004554:	f7fb feac 	bl	80002b0 <strlen>
 8004558:	4603      	mov	r3, r0
 800455a:	b29a      	uxth	r2, r3
 800455c:	f04f 33ff 	mov.w	r3, #4294967295
 8004560:	4932      	ldr	r1, [pc, #200]	@ (800462c <main+0x85c>)
 8004562:	4833      	ldr	r0, [pc, #204]	@ (8004630 <main+0x860>)
 8004564:	f004 fb5a 	bl	8008c1c <HAL_UART_Transmit>
 8004568:	e011      	b.n	800458e <main+0x7be>
  } else {
      sprintf(uart_buffer, "BMP390 Calibration failed. Using default sea level pressure (1013.25 hPa).\r\n");
 800456a:	4939      	ldr	r1, [pc, #228]	@ (8004650 <main+0x880>)
 800456c:	482f      	ldr	r0, [pc, #188]	@ (800462c <main+0x85c>)
 800456e:	f006 fa5f 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004572:	482e      	ldr	r0, [pc, #184]	@ (800462c <main+0x85c>)
 8004574:	f7fb fe9c 	bl	80002b0 <strlen>
 8004578:	4603      	mov	r3, r0
 800457a:	b29a      	uxth	r2, r3
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	492a      	ldr	r1, [pc, #168]	@ (800462c <main+0x85c>)
 8004582:	482b      	ldr	r0, [pc, #172]	@ (8004630 <main+0x860>)
 8004584:	f004 fb4a 	bl	8008c1c <HAL_UART_Transmit>
      sea_level_pressure_hpa = 1013.25f; // Default
 8004588:	4b2f      	ldr	r3, [pc, #188]	@ (8004648 <main+0x878>)
 800458a:	4a32      	ldr	r2, [pc, #200]	@ (8004654 <main+0x884>)
 800458c:	601a      	str	r2, [r3, #0]
  }
  
  // Initialize ADXL375 high-g accelerometer
  sprintf(uart_buffer, "Initializing ADXL375 high-g accelerometer...\r\n");
 800458e:	4932      	ldr	r1, [pc, #200]	@ (8004658 <main+0x888>)
 8004590:	4826      	ldr	r0, [pc, #152]	@ (800462c <main+0x85c>)
 8004592:	f006 fa4d 	bl	800aa30 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004596:	4825      	ldr	r0, [pc, #148]	@ (800462c <main+0x85c>)
 8004598:	f7fb fe8a 	bl	80002b0 <strlen>
 800459c:	4603      	mov	r3, r0
 800459e:	b29a      	uxth	r2, r3
 80045a0:	f04f 33ff 	mov.w	r3, #4294967295
 80045a4:	4921      	ldr	r1, [pc, #132]	@ (800462c <main+0x85c>)
 80045a6:	4822      	ldr	r0, [pc, #136]	@ (8004630 <main+0x860>)
 80045a8:	f004 fb38 	bl	8008c1c <HAL_UART_Transmit>
  
  adxl375_init();
 80045ac:	f7fd f96e 	bl	800188c <adxl375_init>
  
  uint8_t adxl_id = adxl375_read(ADXL375_REG_DEVID);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7fd f90d 	bl	80017d0 <adxl375_read>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
  if (adxl_id == 0xE5) {
 80045bc:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80045c0:	2be5      	cmp	r3, #229	@ 0xe5
 80045c2:	f040 819b 	bne.w	80048fc <main+0xb2c>
      sprintf(uart_buffer, "ADXL375 initialized successfully. DEVID: 0x%02X (expected 0xE5)\r\n", adxl_id);
 80045c6:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80045ca:	461a      	mov	r2, r3
 80045cc:	4923      	ldr	r1, [pc, #140]	@ (800465c <main+0x88c>)
 80045ce:	4817      	ldr	r0, [pc, #92]	@ (800462c <main+0x85c>)
 80045d0:	f006 fa2e 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80045d4:	4815      	ldr	r0, [pc, #84]	@ (800462c <main+0x85c>)
 80045d6:	f7fb fe6b 	bl	80002b0 <strlen>
 80045da:	4603      	mov	r3, r0
 80045dc:	b29a      	uxth	r2, r3
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
 80045e2:	4912      	ldr	r1, [pc, #72]	@ (800462c <main+0x85c>)
 80045e4:	4812      	ldr	r0, [pc, #72]	@ (8004630 <main+0x860>)
 80045e6:	f004 fb19 	bl	8008c1c <HAL_UART_Transmit>
      
      // Calibrate ADXL375 - assume device is positioned so Z reads 1G, X/Y read 0G
      sprintf(uart_buffer, "Calibrating ADXL375... Please keep device still with Z-axis up.\r\n");
 80045ea:	491d      	ldr	r1, [pc, #116]	@ (8004660 <main+0x890>)
 80045ec:	480f      	ldr	r0, [pc, #60]	@ (800462c <main+0x85c>)
 80045ee:	f006 fa1f 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80045f2:	480e      	ldr	r0, [pc, #56]	@ (800462c <main+0x85c>)
 80045f4:	f7fb fe5c 	bl	80002b0 <strlen>
 80045f8:	4603      	mov	r3, r0
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004600:	490a      	ldr	r1, [pc, #40]	@ (800462c <main+0x85c>)
 8004602:	480b      	ldr	r0, [pc, #44]	@ (8004630 <main+0x860>)
 8004604:	f004 fb0a 	bl	8008c1c <HAL_UART_Transmit>
      
      // Take 50 samples and average them
      int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800460e:	2300      	movs	r3, #0
 8004610:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004614:	2300      	movs	r3, #0
 8004616:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      int16_t raw_x, raw_y, raw_z;
      const int cal_samples = 50;
 800461a:	2332      	movs	r3, #50	@ 0x32
 800461c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      
      for (int i = 0; i < cal_samples; i++) {
 8004620:	2300      	movs	r3, #0
 8004622:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004626:	e059      	b.n	80046dc <main+0x90c>
 8004628:	0800f720 	.word	0x0800f720
 800462c:	20000c58 	.word	0x20000c58
 8004630:	2000048c 	.word	0x2000048c
 8004634:	0800f764 	.word	0x0800f764
 8004638:	20000a08 	.word	0x20000a08
 800463c:	0800f7a0 	.word	0x0800f7a0
 8004640:	0800f7c8 	.word	0x0800f7c8
 8004644:	42c80000 	.word	0x42c80000
 8004648:	20000d58 	.word	0x20000d58
 800464c:	0800f7ec 	.word	0x0800f7ec
 8004650:	0800f838 	.word	0x0800f838
 8004654:	447d5000 	.word	0x447d5000
 8004658:	0800f888 	.word	0x0800f888
 800465c:	0800f8b8 	.word	0x0800f8b8
 8004660:	0800f8fc 	.word	0x0800f8fc
          adxl375_read_xyz(&raw_x, &raw_y, &raw_z);
 8004664:	f107 025a 	add.w	r2, r7, #90	@ 0x5a
 8004668:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800466c:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd f8cb 	bl	800180c <adxl375_read_xyz>
          sum_x += raw_x;
 8004676:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800467a:	461a      	mov	r2, r3
 800467c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004680:	4413      	add	r3, r2
 8004682:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
          sum_y += raw_y;
 8004686:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800468a:	461a      	mov	r2, r3
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004690:	4413      	add	r3, r2
 8004692:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
          sum_z += raw_z;
 8004696:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800469a:	461a      	mov	r2, r3
 800469c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046a0:	4413      	add	r3, r2
 80046a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          
          // Flash LED to show calibration in progress
          if (i % 10 == 0) {
 80046a6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80046aa:	4b8a      	ldr	r3, [pc, #552]	@ (80048d4 <main+0xb04>)
 80046ac:	fb83 2301 	smull	r2, r3, r3, r1
 80046b0:	109a      	asrs	r2, r3, #2
 80046b2:	17cb      	asrs	r3, r1, #31
 80046b4:	1ad2      	subs	r2, r2, r3
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	1aca      	subs	r2, r1, r3
 80046c0:	2a00      	cmp	r2, #0
 80046c2:	d103      	bne.n	80046cc <main+0x8fc>
              HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80046c4:	2101      	movs	r1, #1
 80046c6:	4884      	ldr	r0, [pc, #528]	@ (80048d8 <main+0xb08>)
 80046c8:	f001 fff9 	bl	80066be <HAL_GPIO_TogglePin>
          }
          HAL_Delay(10);
 80046cc:	200a      	movs	r0, #10
 80046ce:	f001 f9d9 	bl	8005a84 <HAL_Delay>
      for (int i = 0; i < cal_samples; i++) {
 80046d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80046d6:	3301      	adds	r3, #1
 80046d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80046dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80046e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046e4:	429a      	cmp	r2, r3
 80046e6:	dbbd      	blt.n	8004664 <main+0x894>
      }
      
      // Calculate average readings
      float avg_x = (float)sum_x / cal_samples;
 80046e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004704:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
      float avg_y = (float)sum_y / cal_samples;
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004724:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
      float avg_z = (float)sum_z / cal_samples;
 8004728:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004744:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
      
      // Calculate offsets needed to make Z read 1G and X/Y read 0G
      // First, determine the expected 1G raw reading based on sensitivity
      float expected_1g_raw = 1000.0f / ADXL375_SENSITIVITY_MG_PER_LSB; // 1g = 1000mg
 8004748:	4b64      	ldr	r3, [pc, #400]	@ (80048dc <main+0xb0c>)
 800474a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      
      // Calculate the offset values (signed 8-bit, so max ±127)
      // Offset registers act in the opposite direction of the measurement
      int8_t offset_x = -(int8_t)(avg_x / 4.0f); // ADXL375 datasheet specifies 15.6mg per LSB for offset registers
 800474e:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8004752:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800475a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800475e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004762:	793b      	ldrb	r3, [r7, #4]
 8004764:	b25b      	sxtb	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	425b      	negs	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
      int8_t offset_y = -(int8_t)(avg_y / 4.0f);
 8004770:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8004774:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800477c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004780:	edc7 7a01 	vstr	s15, [r7, #4]
 8004784:	793b      	ldrb	r3, [r7, #4]
 8004786:	b25b      	sxtb	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	425b      	negs	r3, r3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
      int8_t offset_z = -(int8_t)((avg_z - expected_1g_raw) / 4.0f);
 8004792:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004796:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800479a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800479e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80047a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80047ae:	793b      	ldrb	r3, [r7, #4]
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	425b      	negs	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
      offset_x = (offset_x > 127) ? 127 : ((offset_x < -128) ? -128 : offset_x);
      offset_y = (offset_y > 127) ? 127 : ((offset_y < -128) ? -128 : offset_y);
      offset_z = (offset_z > 127) ? 127 : ((offset_z < -128) ? -128 : offset_z);
      
      // Write the offsets to the ADXL375
      adxl375_write_offsets(offset_x, offset_y, offset_z);
 80047bc:	f997 20b1 	ldrsb.w	r2, [r7, #177]	@ 0xb1
 80047c0:	f997 10b2 	ldrsb.w	r1, [r7, #178]	@ 0xb2
 80047c4:	f997 30b3 	ldrsb.w	r3, [r7, #179]	@ 0xb3
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fd f879 	bl	80018c0 <adxl375_write_offsets>
      
      // Read back and verify the offsets
      int8_t read_offset_x, read_offset_y, read_offset_z;
      adxl375_read_offsets(&read_offset_x, &read_offset_y, &read_offset_z);
 80047ce:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 80047d2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80047d6:	f107 0359 	add.w	r3, r7, #89	@ 0x59
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd f88c 	bl	80018f8 <adxl375_read_offsets>
      
      sprintf(uart_buffer, "ADXL375 Calibration Complete.\r\n");
 80047e0:	493f      	ldr	r1, [pc, #252]	@ (80048e0 <main+0xb10>)
 80047e2:	4840      	ldr	r0, [pc, #256]	@ (80048e4 <main+0xb14>)
 80047e4:	f006 f924 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80047e8:	483e      	ldr	r0, [pc, #248]	@ (80048e4 <main+0xb14>)
 80047ea:	f7fb fd61 	bl	80002b0 <strlen>
 80047ee:	4603      	mov	r3, r0
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295
 80047f6:	493b      	ldr	r1, [pc, #236]	@ (80048e4 <main+0xb14>)
 80047f8:	483b      	ldr	r0, [pc, #236]	@ (80048e8 <main+0xb18>)
 80047fa:	f004 fa0f 	bl	8008c1c <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
              avg_x * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f),
 80047fe:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8004802:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80048ec <main+0xb1c>
 8004806:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
 800480a:	ee17 0a90 	vmov	r0, s15
 800480e:	f7fb febb 	bl	8000588 <__aeabi_f2d>
 8004812:	4680      	mov	r8, r0
 8004814:	4689      	mov	r9, r1
              avg_y * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f),
 8004816:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800481a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80048ec <main+0xb1c>
 800481e:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
 8004822:	ee17 0a90 	vmov	r0, s15
 8004826:	f7fb feaf 	bl	8000588 <__aeabi_f2d>
 800482a:	4604      	mov	r4, r0
 800482c:	460d      	mov	r5, r1
              avg_z * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f));
 800482e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004832:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80048ec <main+0xb1c>
 8004836:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
 800483a:	ee17 0a90 	vmov	r0, s15
 800483e:	f7fb fea3 	bl	8000588 <__aeabi_f2d>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800484a:	e9cd 4500 	strd	r4, r5, [sp]
 800484e:	4642      	mov	r2, r8
 8004850:	464b      	mov	r3, r9
 8004852:	4927      	ldr	r1, [pc, #156]	@ (80048f0 <main+0xb20>)
 8004854:	4823      	ldr	r0, [pc, #140]	@ (80048e4 <main+0xb14>)
 8004856:	f006 f8eb 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800485a:	4822      	ldr	r0, [pc, #136]	@ (80048e4 <main+0xb14>)
 800485c:	f7fb fd28 	bl	80002b0 <strlen>
 8004860:	4603      	mov	r3, r0
 8004862:	b29a      	uxth	r2, r3
 8004864:	f04f 33ff 	mov.w	r3, #4294967295
 8004868:	491e      	ldr	r1, [pc, #120]	@ (80048e4 <main+0xb14>)
 800486a:	481f      	ldr	r0, [pc, #124]	@ (80048e8 <main+0xb18>)
 800486c:	f004 f9d6 	bl	8008c1c <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Applied Offsets: X=%d, Y=%d, Z=%d\r\n", offset_x, offset_y, offset_z);
 8004870:	f997 20b3 	ldrsb.w	r2, [r7, #179]	@ 0xb3
 8004874:	f997 10b2 	ldrsb.w	r1, [r7, #178]	@ 0xb2
 8004878:	f997 30b1 	ldrsb.w	r3, [r7, #177]	@ 0xb1
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	460b      	mov	r3, r1
 8004880:	491c      	ldr	r1, [pc, #112]	@ (80048f4 <main+0xb24>)
 8004882:	4818      	ldr	r0, [pc, #96]	@ (80048e4 <main+0xb14>)
 8004884:	f006 f8d4 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004888:	4816      	ldr	r0, [pc, #88]	@ (80048e4 <main+0xb14>)
 800488a:	f7fb fd11 	bl	80002b0 <strlen>
 800488e:	4603      	mov	r3, r0
 8004890:	b29a      	uxth	r2, r3
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
 8004896:	4913      	ldr	r1, [pc, #76]	@ (80048e4 <main+0xb14>)
 8004898:	4813      	ldr	r0, [pc, #76]	@ (80048e8 <main+0xb18>)
 800489a:	f004 f9bf 	bl	8008c1c <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Readback Offsets: X=%d, Y=%d, Z=%d\r\n", read_offset_x, read_offset_y, read_offset_z);
 800489e:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 80048a2:	461a      	mov	r2, r3
 80048a4:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80048a8:	4619      	mov	r1, r3
 80048aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	460b      	mov	r3, r1
 80048b2:	4911      	ldr	r1, [pc, #68]	@ (80048f8 <main+0xb28>)
 80048b4:	480b      	ldr	r0, [pc, #44]	@ (80048e4 <main+0xb14>)
 80048b6:	f006 f8bb 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80048ba:	480a      	ldr	r0, [pc, #40]	@ (80048e4 <main+0xb14>)
 80048bc:	f7fb fcf8 	bl	80002b0 <strlen>
 80048c0:	4603      	mov	r3, r0
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	4906      	ldr	r1, [pc, #24]	@ (80048e4 <main+0xb14>)
 80048ca:	4807      	ldr	r0, [pc, #28]	@ (80048e8 <main+0xb18>)
 80048cc:	f004 f9a6 	bl	8008c1c <HAL_UART_Transmit>
 80048d0:	e026      	b.n	8004920 <main+0xb50>
 80048d2:	bf00      	nop
 80048d4:	66666667 	.word	0x66666667
 80048d8:	40020400 	.word	0x40020400
 80048dc:	41a343eb 	.word	0x41a343eb
 80048e0:	0800f940 	.word	0x0800f940
 80048e4:	20000c58 	.word	0x20000c58
 80048e8:	2000048c 	.word	0x2000048c
 80048ec:	3d48b439 	.word	0x3d48b439
 80048f0:	0800f960 	.word	0x0800f960
 80048f4:	0800f98c 	.word	0x0800f98c
 80048f8:	0800f9b4 	.word	0x0800f9b4
      
  } else {
      sprintf(uart_buffer, "ADXL375 initialization FAILED! DEVID: 0x%02X (expected 0xE5)\r\n", adxl_id);
 80048fc:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8004900:	461a      	mov	r2, r3
 8004902:	499d      	ldr	r1, [pc, #628]	@ (8004b78 <main+0xda8>)
 8004904:	489d      	ldr	r0, [pc, #628]	@ (8004b7c <main+0xdac>)
 8004906:	f006 f893 	bl	800aa30 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800490a:	489c      	ldr	r0, [pc, #624]	@ (8004b7c <main+0xdac>)
 800490c:	f7fb fcd0 	bl	80002b0 <strlen>
 8004910:	4603      	mov	r3, r0
 8004912:	b29a      	uxth	r2, r3
 8004914:	f04f 33ff 	mov.w	r3, #4294967295
 8004918:	4998      	ldr	r1, [pc, #608]	@ (8004b7c <main+0xdac>)
 800491a:	4899      	ldr	r0, [pc, #612]	@ (8004b80 <main+0xdb0>)
 800491c:	f004 f97e 	bl	8008c1c <HAL_UART_Transmit>
  }
  
  // Turn on LED to indicate ready state
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET); // LD2 is usually green or yellow.
 8004920:	2201      	movs	r2, #1
 8004922:	2180      	movs	r1, #128	@ 0x80
 8004924:	4897      	ldr	r0, [pc, #604]	@ (8004b84 <main+0xdb4>)
 8004926:	f001 feb1 	bl	800668c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t loop_start_tick = HAL_GetTick(); // Record start time of the loop
 800492a:	f001 f89f 	bl	8005a6c <HAL_GetTick>
 800492e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

    uint32_t raw_pressure; // raw_temperature is still needed for the function call
    uint32_t local_raw_temperature; // Use a distinct local variable for the raw temperature param

    // Sensor values
    float lsm_acc_x = 0.0f, lsm_acc_y = 0.0f, lsm_acc_z = 0.0f;
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    float lsm_gyr_x = 0.0f, lsm_gyr_y = 0.0f, lsm_gyr_z = 0.0f;
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float bmp_temp_c = 0.0f, bmp_pres_pa = 0.0f, bmp_alt_m = 0.0f;
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    float adxl_hi_g_x = 0.0f, adxl_hi_g_y = 0.0f, adxl_hi_g_z = 0.0f;
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    // Madgwick inputs
    float acc_g[3];  // Acceleration in g
    float gyro_rps[3]; // Gyroscope in rad/s

    bool lsm_accel_data_ready = false;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
    bool lsm_gyro_data_ready = false;
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    bool bmp_data_ok = false; // Initialize to false for this cycle
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    // Read LSM6DSO data
    uint8_t reg_lsm;
    lsm6dso_status_reg_get(&dev_ctx, &reg_lsm);
 80049a4:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80049a8:	4619      	mov	r1, r3
 80049aa:	4877      	ldr	r0, [pc, #476]	@ (8004b88 <main+0xdb8>)
 80049ac:	f7fe ff0e 	bl	80037cc <lsm6dso_status_reg_get>

    if (reg_lsm & 0x01) { // Check XLDA bit
 80049b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d036      	beq.n	8004a2a <main+0xc5a>
      lsm_accel_data_ready = true;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
      lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80049c2:	4972      	ldr	r1, [pc, #456]	@ (8004b8c <main+0xdbc>)
 80049c4:	4870      	ldr	r0, [pc, #448]	@ (8004b88 <main+0xdb8>)
 80049c6:	f7fe ff5a 	bl	800387e <lsm6dso_acceleration_raw_get>
      lsm_acc_x = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[0]);
 80049ca:	4b70      	ldr	r3, [pc, #448]	@ (8004b8c <main+0xdbc>)
 80049cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff f9cb 	bl	8003d6c <lsm6dso_from_fs16g_to_mg>
 80049d6:	ed87 0a3a 	vstr	s0, [r7, #232]	@ 0xe8
      lsm_acc_y = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[1]);
 80049da:	4b6c      	ldr	r3, [pc, #432]	@ (8004b8c <main+0xdbc>)
 80049dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff f9c3 	bl	8003d6c <lsm6dso_from_fs16g_to_mg>
 80049e6:	ed87 0a39 	vstr	s0, [r7, #228]	@ 0xe4
      lsm_acc_z = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[2]);
 80049ea:	4b68      	ldr	r3, [pc, #416]	@ (8004b8c <main+0xdbc>)
 80049ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff f9bb 	bl	8003d6c <lsm6dso_from_fs16g_to_mg>
 80049f6:	ed87 0a38 	vstr	s0, [r7, #224]	@ 0xe0

      // Convert accelerometer data from mg to g for Madgwick
      acc_g[0] = lsm_acc_x / 1000.0f;
 80049fa:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 80049fe:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8004b90 <main+0xdc0>
 8004a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a06:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      acc_g[1] = lsm_acc_y / 1000.0f;
 8004a0a:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 8004a0e:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8004b90 <main+0xdc0>
 8004a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a16:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      acc_g[2] = lsm_acc_z / 1000.0f;
 8004a1a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8004a1e:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8004b90 <main+0xdc0>
 8004a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a26:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    }

      if (reg_lsm & 0x02) { // Check GDA (Gyroscope Data Available) bit
 8004a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d051      	beq.n	8004ada <main+0xd0a>
      lsm_gyro_data_ready = true;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
          lsm6dso_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8004a3c:	4955      	ldr	r1, [pc, #340]	@ (8004b94 <main+0xdc4>)
 8004a3e:	4852      	ldr	r0, [pc, #328]	@ (8004b88 <main+0xdb8>)
 8004a40:	f7fe fed5 	bl	80037ee <lsm6dso_angular_rate_raw_get>
      lsm_gyr_x = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004a44:	4b53      	ldr	r3, [pc, #332]	@ (8004b94 <main+0xdc4>)
 8004a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff f9a8 	bl	8003da0 <lsm6dso_from_fs2000dps_to_mdps>
 8004a50:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8
      lsm_gyr_y = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004a54:	4b4f      	ldr	r3, [pc, #316]	@ (8004b94 <main+0xdc4>)
 8004a56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff f9a0 	bl	8003da0 <lsm6dso_from_fs2000dps_to_mdps>
 8004a60:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
      lsm_gyr_z = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004a64:	4b4b      	ldr	r3, [pc, #300]	@ (8004b94 <main+0xdc4>)
 8004a66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff f998 	bl	8003da0 <lsm6dso_from_fs2000dps_to_mdps>
 8004a70:	ed87 0a28 	vstr	s0, [r7, #160]	@ 0xa0

      // Convert gyroscope data from mdps to rad/s for Madgwick
      // PI is defined in Madgwick_filter.h
      gyro_rps[0] = lsm_gyr_x * (PI / 180.0f / 1000.0f);
 8004a74:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8004a78:	f7fb fd86 	bl	8000588 <__aeabi_f2d>
 8004a7c:	a33c      	add	r3, pc, #240	@ (adr r3, 8004b70 <main+0xda0>)
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f7fb fdd9 	bl	8000638 <__aeabi_dmul>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f7fc f8cb 	bl	8000c28 <__aeabi_d2f>
 8004a92:	4603      	mov	r3, r0
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
      gyro_rps[1] = lsm_gyr_y * (PI / 180.0f / 1000.0f);
 8004a96:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8004a9a:	f7fb fd75 	bl	8000588 <__aeabi_f2d>
 8004a9e:	a334      	add	r3, pc, #208	@ (adr r3, 8004b70 <main+0xda0>)
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f7fb fdc8 	bl	8000638 <__aeabi_dmul>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f7fc f8ba 	bl	8000c28 <__aeabi_d2f>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
      gyro_rps[2] = lsm_gyr_z * (PI / 180.0f / 1000.0f);
 8004ab8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8004abc:	f7fb fd64 	bl	8000588 <__aeabi_f2d>
 8004ac0:	a32b      	add	r3, pc, #172	@ (adr r3, 8004b70 <main+0xda0>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb fdb7 	bl	8000638 <__aeabi_dmul>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f7fc f8a9 	bl	8000c28 <__aeabi_d2f>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Update Madgwick filter (call this every 10ms)
    // Ensure acc_g and gyro_rps are updated if data is ready, otherwise, decide on behavior
    // (e.g., use last known, or skip update if critical data missing)
    // For now, assume data is usually ready. If not, filter might get stale inputs from previous loop.
    MadgwickAHRSupdateIMU(gyro_rps[0], gyro_rps[1], gyro_rps[2], acc_g[0], acc_g[1], acc_g[2]);
 8004ada:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004ade:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8004ae2:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8004ae6:	ed97 6a10 	vldr	s12, [r7, #64]	@ 0x40
 8004aea:	edd7 5a11 	vldr	s11, [r7, #68]	@ 0x44
 8004aee:	ed97 5a12 	vldr	s10, [r7, #72]	@ 0x48
 8004af2:	eef0 2a45 	vmov.f32	s5, s10
 8004af6:	eeb0 2a65 	vmov.f32	s4, s11
 8004afa:	eef0 1a46 	vmov.f32	s3, s12
 8004afe:	eeb0 1a66 	vmov.f32	s2, s13
 8004b02:	eef0 0a47 	vmov.f32	s1, s14
 8004b06:	eeb0 0a67 	vmov.f32	s0, s15
 8004b0a:	f7fc faa9 	bl	8001060 <MadgwickAHRSupdateIMU>

    // Read BMP390 data only every other cycle (20ms interval if loop is 10ms)
    if (bmp390_read_scheduler == 0) {
 8004b0e:	4b22      	ldr	r3, [pc, #136]	@ (8004b98 <main+0xdc8>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d156      	bne.n	8004bc4 <main+0xdf4>
        float func_temp_c, func_pres_pa; // Local variables for the values read from the function
        if (bmp390_read_temperature_pressure(&bmp390_handle, &local_raw_temperature, &func_temp_c, &raw_pressure, &func_pres_pa) == 0) {
 8004b16:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004b1a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004b1e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8004b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	4603      	mov	r3, r0
 8004b2a:	481c      	ldr	r0, [pc, #112]	@ (8004b9c <main+0xdcc>)
 8004b2c:	f7fe f978 	bl	8002e20 <bmp390_read_temperature_pressure>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d13a      	bne.n	8004bac <main+0xddc>
            bmp_data_ok = true; // Indicates data read attempt was successful for this cycle
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
            persistent_bmp_pres_pa = func_pres_pa; // Update persistent pressure
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ba0 <main+0xdd0>)
 8004b40:	6013      	str	r3, [r2, #0]
            float current_pressure_hpa = persistent_bmp_pres_pa / 100.0f;
 8004b42:	4b17      	ldr	r3, [pc, #92]	@ (8004ba0 <main+0xdd0>)
 8004b44:	ed93 7a00 	vldr	s14, [r3]
 8004b48:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8004ba4 <main+0xdd4>
 8004b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b50:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            persistent_bmp_alt_m = calculate_altitude_hpa(current_pressure_hpa); // Update persistent altitude
 8004b54:	ed97 0a20 	vldr	s0, [r7, #128]	@ 0x80
 8004b58:	f7ff f8d4 	bl	8003d04 <calculate_altitude_hpa>
 8004b5c:	eef0 7a40 	vmov.f32	s15, s0
 8004b60:	4b11      	ldr	r3, [pc, #68]	@ (8004ba8 <main+0xdd8>)
 8004b62:	edc3 7a00 	vstr	s15, [r3]

            // Temperature reading is no longer updated or used here actively
        HAL_GPIO_TogglePin(GPIOB, LD1_Pin); // Toggle LD1 (usually green) to show activity
 8004b66:	2101      	movs	r1, #1
 8004b68:	4806      	ldr	r0, [pc, #24]	@ (8004b84 <main+0xdb4>)
 8004b6a:	f001 fda8 	bl	80066be <HAL_GPIO_TogglePin>
 8004b6e:	e029      	b.n	8004bc4 <main+0xdf4>
 8004b70:	e13863be 	.word	0xe13863be
 8004b74:	3ef24d14 	.word	0x3ef24d14
 8004b78:	0800f9dc 	.word	0x0800f9dc
 8004b7c:	20000c58 	.word	0x20000c58
 8004b80:	2000048c 	.word	0x2000048c
 8004b84:	40020400 	.word	0x40020400
 8004b88:	200009f4 	.word	0x200009f4
 8004b8c:	20000d5c 	.word	0x20000d5c
 8004b90:	447a0000 	.word	0x447a0000
 8004b94:	20000d64 	.word	0x20000d64
 8004b98:	20000d6c 	.word	0x20000d6c
 8004b9c:	20000a08 	.word	0x20000a08
 8004ba0:	20000d70 	.word	0x20000d70
 8004ba4:	42c80000 	.word	0x42c80000
 8004ba8:	20000d74 	.word	0x20000d74
    } else {
            // bmp_data_ok remains false, set by initialization
        HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET); // Turn on LD3 (usually red) for error
 8004bac:	2201      	movs	r2, #1
 8004bae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bb2:	48b7      	ldr	r0, [pc, #732]	@ (8004e90 <main+0x10c0>)
 8004bb4:	f001 fd6a 	bl	800668c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET); // Blink error LED
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bbe:	48b4      	ldr	r0, [pc, #720]	@ (8004e90 <main+0x10c0>)
 8004bc0:	f001 fd64 	bl	800668c <HAL_GPIO_WritePin>
        }
    }
    // On other cycles, bmp_data_ok remains false, and old bmp_pres_pa, bmp_alt_m are used if printed.

    bmp390_read_scheduler++;
 8004bc4:	4bb3      	ldr	r3, [pc, #716]	@ (8004e94 <main+0x10c4>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	4bb1      	ldr	r3, [pc, #708]	@ (8004e94 <main+0x10c4>)
 8004bce:	701a      	strb	r2, [r3, #0]
    if (bmp390_read_scheduler >= 2) { // Reset every 2 cycles
 8004bd0:	4bb0      	ldr	r3, [pc, #704]	@ (8004e94 <main+0x10c4>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d902      	bls.n	8004bde <main+0xe0e>
        bmp390_read_scheduler = 0;
 8004bd8:	4bae      	ldr	r3, [pc, #696]	@ (8004e94 <main+0x10c4>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
    }
    
    // Read ADXL375 high-g accelerometer (±200g range)
    int16_t adxl_raw_x, adxl_raw_y, adxl_raw_z;
    adxl375_read_xyz(&adxl_raw_x, &adxl_raw_y, &adxl_raw_z);
 8004bde:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004be2:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 8004be6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fe0e 	bl	800180c <adxl375_read_xyz>
    adxl_hi_g_x = (float)adxl_raw_x * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f); 
 8004bf0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bfc:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8004e98 <main+0x10c8>
 8004c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c04:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    adxl_hi_g_y = (float)adxl_raw_y * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f);
 8004c08:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8004c0c:	ee07 3a90 	vmov	s15, r3
 8004c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c14:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004e98 <main+0x10c8>
 8004c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c1c:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    adxl_hi_g_z = (float)adxl_raw_z * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f);
 8004c20:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c2c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8004e98 <main+0x10c8>
 8004c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c34:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    
    uint32_t loop_end_tick = HAL_GetTick();
 8004c38:	f000 ff18 	bl	8005a6c <HAL_GetTick>
 8004c3c:	67f8      	str	r0, [r7, #124]	@ 0x7c
    uint32_t execution_time_ms = loop_end_tick - loop_start_tick;
 8004c3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Check if execution time exceeds 10ms
    if (execution_time_ms >= TARGET_LOOP_PERIOD_MS) {
 8004c48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	d912      	bls.n	8004c74 <main+0xea4>
        // Blink LED3 if the execution time exceeds 10ms
        if (HAL_GetTick() - led3_last_toggle_time >= led3_blink_interval) {
 8004c4e:	f000 ff0d 	bl	8005a6c <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	4b91      	ldr	r3, [pc, #580]	@ (8004e9c <main+0x10cc>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	22c8      	movs	r2, #200	@ 0xc8
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d309      	bcc.n	8004c74 <main+0xea4>
            HAL_GPIO_TogglePin(GPIOB, LD3_Pin); // Toggle LED3
 8004c60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c64:	488a      	ldr	r0, [pc, #552]	@ (8004e90 <main+0x10c0>)
 8004c66:	f001 fd2a 	bl	80066be <HAL_GPIO_TogglePin>
            led3_last_toggle_time = HAL_GetTick(); // Update last toggle time
 8004c6a:	f000 feff 	bl	8005a6c <HAL_GetTick>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4a8a      	ldr	r2, [pc, #552]	@ (8004e9c <main+0x10cc>)
 8004c72:	6013      	str	r3, [r2, #0]
        }
    }

    // Consolidate UART output
    int_fast16_t current_len = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

#ifdef PRINT_ACCEL_DATA
// LSM6DSO Output
current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "A:");
 8004c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c7e:	4a88      	ldr	r2, [pc, #544]	@ (8004ea0 <main+0x10d0>)
 8004c80:	1898      	adds	r0, r3, r2
 8004c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c86:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004c8a:	4a86      	ldr	r2, [pc, #536]	@ (8004ea4 <main+0x10d4>)
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f005 fe99 	bl	800a9c4 <sniprintf>
 8004c92:	4602      	mov	r2, r0
 8004c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c98:	4413      	add	r3, r2
 8004c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
if (lsm_accel_data_ready) {
 8004c9e:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d02b      	beq.n	8004cfe <main+0xf2e>
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "%.1f,%.1f,%.1f", lsm_acc_x, lsm_acc_y, lsm_acc_z);
 8004ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004caa:	4a7d      	ldr	r2, [pc, #500]	@ (8004ea0 <main+0x10d0>)
 8004cac:	189e      	adds	r6, r3, r2
 8004cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cb2:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8004cb6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8004cba:	f7fb fc65 	bl	8000588 <__aeabi_f2d>
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	460d      	mov	r5, r1
 8004cc2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8004cc6:	f7fb fc5f 	bl	8000588 <__aeabi_f2d>
 8004cca:	4680      	mov	r8, r0
 8004ccc:	4689      	mov	r9, r1
 8004cce:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8004cd2:	f7fb fc59 	bl	8000588 <__aeabi_f2d>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cde:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004ce2:	e9cd 4500 	strd	r4, r5, [sp]
 8004ce6:	4a70      	ldr	r2, [pc, #448]	@ (8004ea8 <main+0x10d8>)
 8004ce8:	4651      	mov	r1, sl
 8004cea:	4630      	mov	r0, r6
 8004cec:	f005 fe6a 	bl	800a9c4 <sniprintf>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cfc:	e011      	b.n	8004d22 <main+0xf52>
} else {
    current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "NR,NR,NR");
 8004cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d02:	4a67      	ldr	r2, [pc, #412]	@ (8004ea0 <main+0x10d0>)
 8004d04:	1898      	adds	r0, r3, r2
 8004d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d0a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004d0e:	4a67      	ldr	r2, [pc, #412]	@ (8004eac <main+0x10dc>)
 8004d10:	4619      	mov	r1, r3
 8004d12:	f005 fe57 	bl	800a9c4 <sniprintf>
 8004d16:	4602      	mov	r2, r0
 8004d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
}
#endif // PRINT_ACCEL_DATA

#ifdef PRINT_HGACC_DATA
// ADXL375 Output
current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|H:%.1f,%.1f,%.1f", adxl_hi_g_x, adxl_hi_g_y, adxl_hi_g_z);
 8004d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d26:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea0 <main+0x10d0>)
 8004d28:	189e      	adds	r6, r3, r2
 8004d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d2e:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8004d32:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8004d36:	f7fb fc27 	bl	8000588 <__aeabi_f2d>
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8004d42:	f7fb fc21 	bl	8000588 <__aeabi_f2d>
 8004d46:	4680      	mov	r8, r0
 8004d48:	4689      	mov	r9, r1
 8004d4a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8004d4e:	f7fb fc1b 	bl	8000588 <__aeabi_f2d>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d5a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004d5e:	e9cd 4500 	strd	r4, r5, [sp]
 8004d62:	4a53      	ldr	r2, [pc, #332]	@ (8004eb0 <main+0x10e0>)
 8004d64:	4651      	mov	r1, sl
 8004d66:	4630      	mov	r0, r6
 8004d68:	f005 fe2c 	bl	800a9c4 <sniprintf>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d72:	4413      	add	r3, r2
 8004d74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
#endif // PRINT_HGACC_DATA

#ifdef PRINT_BARO_DATA
// BMP390 Output
current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|B:P%.0f,Alt%.1f", persistent_bmp_pres_pa, persistent_bmp_alt_m);
 8004d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d7c:	4a48      	ldr	r2, [pc, #288]	@ (8004ea0 <main+0x10d0>)
 8004d7e:	189e      	adds	r6, r3, r2
 8004d80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d84:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8004d88:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb4 <main+0x10e4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fb fbfb 	bl	8000588 <__aeabi_f2d>
 8004d92:	4604      	mov	r4, r0
 8004d94:	460d      	mov	r5, r1
 8004d96:	4b48      	ldr	r3, [pc, #288]	@ (8004eb8 <main+0x10e8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb fbf4 	bl	8000588 <__aeabi_f2d>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004da8:	e9cd 4500 	strd	r4, r5, [sp]
 8004dac:	4a43      	ldr	r2, [pc, #268]	@ (8004ebc <main+0x10ec>)
 8004dae:	4641      	mov	r1, r8
 8004db0:	4630      	mov	r0, r6
 8004db2:	f005 fe07 	bl	800a9c4 <sniprintf>
 8004db6:	4602      	mov	r2, r0
 8004db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
#endif // PRINT_BARO_DATA

#ifdef PRINT_ORIENTATION_DATA
// Quaternion Output
current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "|Q:%.2f,%.2f,%.2f,%.2f", q0, q1, q2, q3);
 8004dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dc6:	4a36      	ldr	r2, [pc, #216]	@ (8004ea0 <main+0x10d0>)
 8004dc8:	189e      	adds	r6, r3, r2
 8004dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dce:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec0 <main+0x10f0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fbd5 	bl	8000588 <__aeabi_f2d>
 8004dde:	4604      	mov	r4, r0
 8004de0:	460d      	mov	r5, r1
 8004de2:	4b38      	ldr	r3, [pc, #224]	@ (8004ec4 <main+0x10f4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fb fbce 	bl	8000588 <__aeabi_f2d>
 8004dec:	4680      	mov	r8, r0
 8004dee:	4689      	mov	r9, r1
 8004df0:	4b35      	ldr	r3, [pc, #212]	@ (8004ec8 <main+0x10f8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fb fbc7 	bl	8000588 <__aeabi_f2d>
 8004dfa:	4682      	mov	sl, r0
 8004dfc:	468b      	mov	fp, r1
 8004dfe:	4b33      	ldr	r3, [pc, #204]	@ (8004ecc <main+0x10fc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fb fbc0 	bl	8000588 <__aeabi_f2d>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004e10:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004e14:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004e18:	e9cd 4500 	strd	r4, r5, [sp]
 8004e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed0 <main+0x1100>)
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4630      	mov	r0, r6
 8004e22:	f005 fdcf 	bl	800a9c4 <sniprintf>
 8004e26:	4602      	mov	r2, r0
 8004e28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
#endif // PRINT_ORIENTATION_DATA

#ifdef PRINT_LOOP_TIME
// Loop Time Output (always printed)
current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "L:%lums%s\r\n",
 8004e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e36:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea0 <main+0x10d0>)
 8004e38:	1898      	adds	r0, r3, r2
 8004e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e3e:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8004e42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d904      	bls.n	8004e52 <main+0x1082>
                        execution_time_ms,
                        (execution_time_ms >= TARGET_LOOP_PERIOD_MS && execution_time_ms != 0) ? " OV!" : "");
 8004e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <main+0x1082>
current_len += snprintf(uart_buffer + current_len, sizeof(uart_buffer) - current_len, "L:%lums%s\r\n",
 8004e4e:	4b21      	ldr	r3, [pc, #132]	@ (8004ed4 <main+0x1104>)
 8004e50:	e000      	b.n	8004e54 <main+0x1084>
 8004e52:	4b21      	ldr	r3, [pc, #132]	@ (8004ed8 <main+0x1108>)
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e58:	4a20      	ldr	r2, [pc, #128]	@ (8004edc <main+0x110c>)
 8004e5a:	f005 fdb3 	bl	800a9c4 <sniprintf>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e64:	4413      	add	r3, r2
 8004e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
#endif // PRINT_LOOP_TIME

if (current_len > 0 && (size_t)current_len < sizeof(uart_buffer)) {
 8004e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	dd38      	ble.n	8004ee4 <main+0x1114>
 8004e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e76:	2bff      	cmp	r3, #255	@ 0xff
 8004e78:	d834      	bhi.n	8004ee4 <main+0x1114>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, current_len, HAL_MAX_DELAY);
 8004e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f04f 33ff 	mov.w	r3, #4294967295
 8004e84:	4906      	ldr	r1, [pc, #24]	@ (8004ea0 <main+0x10d0>)
 8004e86:	4816      	ldr	r0, [pc, #88]	@ (8004ee0 <main+0x1110>)
 8004e88:	f003 fec8 	bl	8008c1c <HAL_UART_Transmit>
 8004e8c:	e049      	b.n	8004f22 <main+0x1152>
 8004e8e:	bf00      	nop
 8004e90:	40020400 	.word	0x40020400
 8004e94:	20000d6c 	.word	0x20000d6c
 8004e98:	3d48b439 	.word	0x3d48b439
 8004e9c:	20000d78 	.word	0x20000d78
 8004ea0:	20000c58 	.word	0x20000c58
 8004ea4:	0800fa1c 	.word	0x0800fa1c
 8004ea8:	0800fa20 	.word	0x0800fa20
 8004eac:	0800fa30 	.word	0x0800fa30
 8004eb0:	0800fa3c 	.word	0x0800fa3c
 8004eb4:	20000d70 	.word	0x20000d70
 8004eb8:	20000d74 	.word	0x20000d74
 8004ebc:	0800fa50 	.word	0x0800fa50
 8004ec0:	20000004 	.word	0x20000004
 8004ec4:	2000033c 	.word	0x2000033c
 8004ec8:	20000340 	.word	0x20000340
 8004ecc:	20000344 	.word	0x20000344
 8004ed0:	0800fa64 	.word	0x0800fa64
 8004ed4:	0800fa7c 	.word	0x0800fa7c
 8004ed8:	0800fa84 	.word	0x0800fa84
 8004edc:	0800fa88 	.word	0x0800fa88
 8004ee0:	2000048c 	.word	0x2000048c
} else if ((size_t)current_len >= sizeof(uart_buffer)) {
 8004ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ee8:	2bff      	cmp	r3, #255	@ 0xff
 8004eea:	d91a      	bls.n	8004f22 <main+0x1152>
    // Handle potential truncation / error in string formatting if buffer was too small
    char err_msg[] = "UART buffer overflow!\r\n";
 8004eec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ef4:	4a11      	ldr	r2, [pc, #68]	@ (8004f3c <main+0x116c>)
 8004ef6:	461c      	mov	r4, r3
 8004ef8:	4615      	mov	r5, r2
 8004efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004efe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004f02:	e884 0003 	stmia.w	r4, {r0, r1}
    HAL_UART_Transmit(&huart3, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 8004f06:	f107 030c 	add.w	r3, r7, #12
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb f9d0 	bl	80002b0 <strlen>
 8004f10:	4603      	mov	r3, r0
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	f107 010c 	add.w	r1, r7, #12
 8004f18:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1c:	4808      	ldr	r0, [pc, #32]	@ (8004f40 <main+0x1170>)
 8004f1e:	f003 fe7d 	bl	8008c1c <HAL_UART_Transmit>
}


    if (execution_time_ms < TARGET_LOOP_PERIOD_MS) {
 8004f22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	f63f ad00 	bhi.w	800492a <main+0xb5a>
      uint32_t delay_ms = TARGET_LOOP_PERIOD_MS - execution_time_ms;
 8004f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f2c:	f1c3 030a 	rsb	r3, r3, #10
 8004f30:	677b      	str	r3, [r7, #116]	@ 0x74
      HAL_Delay(delay_ms);
 8004f32:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004f34:	f000 fda6 	bl	8005a84 <HAL_Delay>
  {
 8004f38:	e4f7      	b.n	800492a <main+0xb5a>
 8004f3a:	bf00      	nop
 8004f3c:	0800fa94 	.word	0x0800fa94
 8004f40:	2000048c 	.word	0x2000048c

08004f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b094      	sub	sp, #80	@ 0x50
 8004f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f4a:	f107 0320 	add.w	r3, r7, #32
 8004f4e:	2230      	movs	r2, #48	@ 0x30
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f005 fe0e 	bl	800ab74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	609a      	str	r2, [r3, #8]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004f68:	f002 fd40 	bl	80079ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f6c:	4b27      	ldr	r3, [pc, #156]	@ (800500c <SystemClock_Config+0xc8>)
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	4a26      	ldr	r2, [pc, #152]	@ (800500c <SystemClock_Config+0xc8>)
 8004f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f76:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f78:	4b24      	ldr	r3, [pc, #144]	@ (800500c <SystemClock_Config+0xc8>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004f84:	4b22      	ldr	r3, [pc, #136]	@ (8005010 <SystemClock_Config+0xcc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004f8c:	4a20      	ldr	r2, [pc, #128]	@ (8005010 <SystemClock_Config+0xcc>)
 8004f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	4b1e      	ldr	r3, [pc, #120]	@ (8005010 <SystemClock_Config+0xcc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004fa4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004faa:	2302      	movs	r3, #2
 8004fac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004fae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004fb8:	2348      	movs	r3, #72	@ 0x48
 8004fba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fc4:	f107 0320 	add.w	r3, r7, #32
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f002 fd1f 	bl	8007a0c <HAL_RCC_OscConfig>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004fd4:	f000 f9ac 	bl	8005330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fd8:	230f      	movs	r3, #15
 8004fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004fee:	f107 030c 	add.w	r3, r7, #12
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f002 ffad 	bl	8007f54 <HAL_RCC_ClockConfig>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005000:	f000 f996 	bl	8005330 <Error_Handler>
  }
}
 8005004:	bf00      	nop
 8005006:	3750      	adds	r7, #80	@ 0x50
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40023800 	.word	0x40023800
 8005010:	40007000 	.word	0x40007000

08005014 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8005018:	4b1f      	ldr	r3, [pc, #124]	@ (8005098 <MX_ETH_Init+0x84>)
 800501a:	4a20      	ldr	r2, [pc, #128]	@ (800509c <MX_ETH_Init+0x88>)
 800501c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800501e:	4b20      	ldr	r3, [pc, #128]	@ (80050a0 <MX_ETH_Init+0x8c>)
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8005024:	4b1e      	ldr	r3, [pc, #120]	@ (80050a0 <MX_ETH_Init+0x8c>)
 8005026:	2280      	movs	r2, #128	@ 0x80
 8005028:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800502a:	4b1d      	ldr	r3, [pc, #116]	@ (80050a0 <MX_ETH_Init+0x8c>)
 800502c:	22e1      	movs	r2, #225	@ 0xe1
 800502e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8005030:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <MX_ETH_Init+0x8c>)
 8005032:	2200      	movs	r2, #0
 8005034:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8005036:	4b1a      	ldr	r3, [pc, #104]	@ (80050a0 <MX_ETH_Init+0x8c>)
 8005038:	2200      	movs	r2, #0
 800503a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800503c:	4b18      	ldr	r3, [pc, #96]	@ (80050a0 <MX_ETH_Init+0x8c>)
 800503e:	2200      	movs	r2, #0
 8005040:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8005042:	4b15      	ldr	r3, [pc, #84]	@ (8005098 <MX_ETH_Init+0x84>)
 8005044:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <MX_ETH_Init+0x8c>)
 8005046:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005048:	4b13      	ldr	r3, [pc, #76]	@ (8005098 <MX_ETH_Init+0x84>)
 800504a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800504e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005050:	4b11      	ldr	r3, [pc, #68]	@ (8005098 <MX_ETH_Init+0x84>)
 8005052:	4a14      	ldr	r2, [pc, #80]	@ (80050a4 <MX_ETH_Init+0x90>)
 8005054:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005056:	4b10      	ldr	r3, [pc, #64]	@ (8005098 <MX_ETH_Init+0x84>)
 8005058:	4a13      	ldr	r2, [pc, #76]	@ (80050a8 <MX_ETH_Init+0x94>)
 800505a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800505c:	4b0e      	ldr	r3, [pc, #56]	@ (8005098 <MX_ETH_Init+0x84>)
 800505e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8005062:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8005064:	480c      	ldr	r0, [pc, #48]	@ (8005098 <MX_ETH_Init+0x84>)
 8005066:	f000 fe17 	bl	8005c98 <HAL_ETH_Init>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8005070:	f000 f95e 	bl	8005330 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005074:	2238      	movs	r2, #56	@ 0x38
 8005076:	2100      	movs	r1, #0
 8005078:	480c      	ldr	r0, [pc, #48]	@ (80050ac <MX_ETH_Init+0x98>)
 800507a:	f005 fd7b 	bl	800ab74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800507e:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <MX_ETH_Init+0x98>)
 8005080:	2221      	movs	r2, #33	@ 0x21
 8005082:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <MX_ETH_Init+0x98>)
 8005086:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800508a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800508c:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <MX_ETH_Init+0x98>)
 800508e:	2200      	movs	r2, #0
 8005090:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000388 	.word	0x20000388
 800509c:	40028000 	.word	0x40028000
 80050a0:	20000d7c 	.word	0x20000d7c
 80050a4:	20000280 	.word	0x20000280
 80050a8:	200001e0 	.word	0x200001e0
 80050ac:	20000350 	.word	0x20000350

080050b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80050b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <MX_I2C1_Init+0x78>)
 80050b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80050ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050bc:	4a1b      	ldr	r2, [pc, #108]	@ (800512c <MX_I2C1_Init+0x7c>)
 80050be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80050c0:	4b18      	ldr	r3, [pc, #96]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050c6:	4b17      	ldr	r3, [pc, #92]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050cc:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80050d2:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80050d8:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050da:	2200      	movs	r2, #0
 80050dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050de:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050ea:	480e      	ldr	r0, [pc, #56]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050ec:	f001 fb02 	bl	80066f4 <HAL_I2C_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80050f6:	f000 f91b 	bl	8005330 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050fa:	2100      	movs	r1, #0
 80050fc:	4809      	ldr	r0, [pc, #36]	@ (8005124 <MX_I2C1_Init+0x74>)
 80050fe:	f002 faa3 	bl	8007648 <HAL_I2CEx_ConfigAnalogFilter>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005108:	f000 f912 	bl	8005330 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800510c:	2100      	movs	r1, #0
 800510e:	4805      	ldr	r0, [pc, #20]	@ (8005124 <MX_I2C1_Init+0x74>)
 8005110:	f002 fae5 	bl	80076de <HAL_I2CEx_ConfigDigitalFilter>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800511a:	f000 f909 	bl	8005330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000438 	.word	0x20000438
 8005128:	40005400 	.word	0x40005400
 800512c:	00808cd2 	.word	0x00808cd2

08005130 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005134:	4b14      	ldr	r3, [pc, #80]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 8005136:	4a15      	ldr	r2, [pc, #84]	@ (800518c <MX_USART3_UART_Init+0x5c>)
 8005138:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800513a:	4b13      	ldr	r3, [pc, #76]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 800513c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005140:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005142:	4b11      	ldr	r3, [pc, #68]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005148:	4b0f      	ldr	r3, [pc, #60]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 800514a:	2200      	movs	r2, #0
 800514c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800514e:	4b0e      	ldr	r3, [pc, #56]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 8005150:	2200      	movs	r2, #0
 8005152:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 8005156:	220c      	movs	r2, #12
 8005158:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800515a:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 800515c:	2200      	movs	r2, #0
 800515e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005160:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 8005162:	2200      	movs	r2, #0
 8005164:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005166:	4b08      	ldr	r3, [pc, #32]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 8005168:	2200      	movs	r2, #0
 800516a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800516c:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 800516e:	2200      	movs	r2, #0
 8005170:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005172:	4805      	ldr	r0, [pc, #20]	@ (8005188 <MX_USART3_UART_Init+0x58>)
 8005174:	f003 fd04 	bl	8008b80 <HAL_UART_Init>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800517e:	f000 f8d7 	bl	8005330 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005182:	bf00      	nop
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	2000048c 	.word	0x2000048c
 800518c:	40004800 	.word	0x40004800

08005190 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005194:	4b14      	ldr	r3, [pc, #80]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005196:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800519a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800519c:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800519e:	2206      	movs	r2, #6
 80051a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80051a2:	4b11      	ldr	r3, [pc, #68]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80051a4:	2202      	movs	r2, #2
 80051a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80051a8:	4b0f      	ldr	r3, [pc, #60]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80051ae:	4b0e      	ldr	r3, [pc, #56]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80051b0:	2202      	movs	r2, #2
 80051b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80051b4:	4b0c      	ldr	r3, [pc, #48]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80051ba:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80051bc:	2200      	movs	r2, #0
 80051be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80051c0:	4b09      	ldr	r3, [pc, #36]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80051c6:	4b08      	ldr	r3, [pc, #32]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80051d2:	4805      	ldr	r0, [pc, #20]	@ (80051e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80051d4:	f002 facf 	bl	8007776 <HAL_PCD_Init>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80051de:	f000 f8a7 	bl	8005330 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000514 	.word	0x20000514

080051ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08c      	sub	sp, #48	@ 0x30
 80051f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f2:	f107 031c 	add.w	r3, r7, #28
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	609a      	str	r2, [r3, #8]
 80051fe:	60da      	str	r2, [r3, #12]
 8005200:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005202:	4b47      	ldr	r3, [pc, #284]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	4a46      	ldr	r2, [pc, #280]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	6313      	str	r3, [r2, #48]	@ 0x30
 800520e:	4b44      	ldr	r3, [pc, #272]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800521a:	4b41      	ldr	r3, [pc, #260]	@ (8005320 <MX_GPIO_Init+0x134>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	4a40      	ldr	r2, [pc, #256]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005224:	6313      	str	r3, [r2, #48]	@ 0x30
 8005226:	4b3e      	ldr	r3, [pc, #248]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005232:	4b3b      	ldr	r3, [pc, #236]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005236:	4a3a      	ldr	r2, [pc, #232]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	6313      	str	r3, [r2, #48]	@ 0x30
 800523e:	4b38      	ldr	r3, [pc, #224]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800524a:	4b35      	ldr	r3, [pc, #212]	@ (8005320 <MX_GPIO_Init+0x134>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	4a34      	ldr	r2, [pc, #208]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	6313      	str	r3, [r2, #48]	@ 0x30
 8005256:	4b32      	ldr	r3, [pc, #200]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005262:	4b2f      	ldr	r3, [pc, #188]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005266:	4a2e      	ldr	r2, [pc, #184]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005268:	f043 0308 	orr.w	r3, r3, #8
 800526c:	6313      	str	r3, [r2, #48]	@ 0x30
 800526e:	4b2c      	ldr	r3, [pc, #176]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800527a:	4b29      	ldr	r3, [pc, #164]	@ (8005320 <MX_GPIO_Init+0x134>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527e:	4a28      	ldr	r2, [pc, #160]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005284:	6313      	str	r3, [r2, #48]	@ 0x30
 8005286:	4b26      	ldr	r3, [pc, #152]	@ (8005320 <MX_GPIO_Init+0x134>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528e:	607b      	str	r3, [r7, #4]
 8005290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005292:	2200      	movs	r2, #0
 8005294:	f244 0181 	movw	r1, #16513	@ 0x4081
 8005298:	4822      	ldr	r0, [pc, #136]	@ (8005324 <MX_GPIO_Init+0x138>)
 800529a:	f001 f9f7 	bl	800668c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800529e:	2200      	movs	r2, #0
 80052a0:	2140      	movs	r1, #64	@ 0x40
 80052a2:	4821      	ldr	r0, [pc, #132]	@ (8005328 <MX_GPIO_Init+0x13c>)
 80052a4:	f001 f9f2 	bl	800668c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80052a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80052ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80052b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80052b8:	f107 031c 	add.w	r3, r7, #28
 80052bc:	4619      	mov	r1, r3
 80052be:	481b      	ldr	r0, [pc, #108]	@ (800532c <MX_GPIO_Init+0x140>)
 80052c0:	f001 f838 	bl	8006334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80052c4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80052c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052ca:	2301      	movs	r3, #1
 80052cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d2:	2300      	movs	r3, #0
 80052d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d6:	f107 031c 	add.w	r3, r7, #28
 80052da:	4619      	mov	r1, r3
 80052dc:	4811      	ldr	r0, [pc, #68]	@ (8005324 <MX_GPIO_Init+0x138>)
 80052de:	f001 f829 	bl	8006334 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80052e2:	2340      	movs	r3, #64	@ 0x40
 80052e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052e6:	2301      	movs	r3, #1
 80052e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ee:	2300      	movs	r3, #0
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80052f2:	f107 031c 	add.w	r3, r7, #28
 80052f6:	4619      	mov	r1, r3
 80052f8:	480b      	ldr	r0, [pc, #44]	@ (8005328 <MX_GPIO_Init+0x13c>)
 80052fa:	f001 f81b 	bl	8006334 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80052fe:	2380      	movs	r3, #128	@ 0x80
 8005300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005302:	2300      	movs	r3, #0
 8005304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005306:	2300      	movs	r3, #0
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800530a:	f107 031c 	add.w	r3, r7, #28
 800530e:	4619      	mov	r1, r3
 8005310:	4805      	ldr	r0, [pc, #20]	@ (8005328 <MX_GPIO_Init+0x13c>)
 8005312:	f001 f80f 	bl	8006334 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005316:	bf00      	nop
 8005318:	3730      	adds	r7, #48	@ 0x30
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800
 8005324:	40020400 	.word	0x40020400
 8005328:	40021800 	.word	0x40021800
 800532c:	40020800 	.word	0x40020800

08005330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005334:	b672      	cpsid	i
}
 8005336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <Error_Handler+0x8>

0800533c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	4b0f      	ldr	r3, [pc, #60]	@ (8005380 <HAL_MspInit+0x44>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	4a0e      	ldr	r2, [pc, #56]	@ (8005380 <HAL_MspInit+0x44>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534c:	6413      	str	r3, [r2, #64]	@ 0x40
 800534e:	4b0c      	ldr	r3, [pc, #48]	@ (8005380 <HAL_MspInit+0x44>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800535a:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <HAL_MspInit+0x44>)
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	4a08      	ldr	r2, [pc, #32]	@ (8005380 <HAL_MspInit+0x44>)
 8005360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005364:	6453      	str	r3, [r2, #68]	@ 0x44
 8005366:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <HAL_MspInit+0x44>)
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40023800 	.word	0x40023800

08005384 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08e      	sub	sp, #56	@ 0x38
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800538c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4e      	ldr	r2, [pc, #312]	@ (80054dc <HAL_ETH_MspInit+0x158>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	f040 8096 	bne.w	80054d4 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80053a8:	4b4d      	ldr	r3, [pc, #308]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ac:	4a4c      	ldr	r2, [pc, #304]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80053b4:	4b4a      	ldr	r3, [pc, #296]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	4b47      	ldr	r3, [pc, #284]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c4:	4a46      	ldr	r2, [pc, #280]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80053cc:	4b44      	ldr	r3, [pc, #272]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4b41      	ldr	r3, [pc, #260]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	4a40      	ldr	r2, [pc, #256]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80053e4:	4b3e      	ldr	r3, [pc, #248]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f0:	4b3b      	ldr	r3, [pc, #236]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f4:	4a3a      	ldr	r2, [pc, #232]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053f6:	f043 0304 	orr.w	r3, r3, #4
 80053fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80053fc:	4b38      	ldr	r3, [pc, #224]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005408:	4b35      	ldr	r3, [pc, #212]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540c:	4a34      	ldr	r2, [pc, #208]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6313      	str	r3, [r2, #48]	@ 0x30
 8005414:	4b32      	ldr	r3, [pc, #200]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005420:	4b2f      	ldr	r3, [pc, #188]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	4a2e      	ldr	r2, [pc, #184]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 8005426:	f043 0302 	orr.w	r3, r3, #2
 800542a:	6313      	str	r3, [r2, #48]	@ 0x30
 800542c:	4b2c      	ldr	r3, [pc, #176]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005438:	4b29      	ldr	r3, [pc, #164]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	4a28      	ldr	r2, [pc, #160]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 800543e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005442:	6313      	str	r3, [r2, #48]	@ 0x30
 8005444:	4b26      	ldr	r3, [pc, #152]	@ (80054e0 <HAL_ETH_MspInit+0x15c>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005450:	2332      	movs	r3, #50	@ 0x32
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005454:	2302      	movs	r3, #2
 8005456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005458:	2300      	movs	r3, #0
 800545a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800545c:	2303      	movs	r3, #3
 800545e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005460:	230b      	movs	r3, #11
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005468:	4619      	mov	r1, r3
 800546a:	481e      	ldr	r0, [pc, #120]	@ (80054e4 <HAL_ETH_MspInit+0x160>)
 800546c:	f000 ff62 	bl	8006334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005470:	2386      	movs	r3, #134	@ 0x86
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800547c:	2303      	movs	r3, #3
 800547e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005480:	230b      	movs	r3, #11
 8005482:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005488:	4619      	mov	r1, r3
 800548a:	4817      	ldr	r0, [pc, #92]	@ (80054e8 <HAL_ETH_MspInit+0x164>)
 800548c:	f000 ff52 	bl	8006334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005496:	2302      	movs	r3, #2
 8005498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549a:	2300      	movs	r3, #0
 800549c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800549e:	2303      	movs	r3, #3
 80054a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054a2:	230b      	movs	r3, #11
 80054a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80054a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054aa:	4619      	mov	r1, r3
 80054ac:	480f      	ldr	r0, [pc, #60]	@ (80054ec <HAL_ETH_MspInit+0x168>)
 80054ae:	f000 ff41 	bl	8006334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80054b2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b8:	2302      	movs	r3, #2
 80054ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c0:	2303      	movs	r3, #3
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054c4:	230b      	movs	r3, #11
 80054c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80054c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054cc:	4619      	mov	r1, r3
 80054ce:	4808      	ldr	r0, [pc, #32]	@ (80054f0 <HAL_ETH_MspInit+0x16c>)
 80054d0:	f000 ff30 	bl	8006334 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80054d4:	bf00      	nop
 80054d6:	3738      	adds	r7, #56	@ 0x38
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40028000 	.word	0x40028000
 80054e0:	40023800 	.word	0x40023800
 80054e4:	40020800 	.word	0x40020800
 80054e8:	40020000 	.word	0x40020000
 80054ec:	40020400 	.word	0x40020400
 80054f0:	40021800 	.word	0x40021800

080054f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b0aa      	sub	sp, #168	@ 0xa8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054fc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800550c:	f107 0310 	add.w	r3, r7, #16
 8005510:	2284      	movs	r2, #132	@ 0x84
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f005 fb2d 	bl	800ab74 <memset>
  if(hi2c->Instance==I2C1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a22      	ldr	r2, [pc, #136]	@ (80055a8 <HAL_I2C_MspInit+0xb4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d13c      	bne.n	800559e <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005524:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005528:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800552a:	2300      	movs	r3, #0
 800552c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	4618      	mov	r0, r3
 8005534:	f002 ff34 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800553e:	f7ff fef7 	bl	8005330 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005542:	4b1a      	ldr	r3, [pc, #104]	@ (80055ac <HAL_I2C_MspInit+0xb8>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	4a19      	ldr	r2, [pc, #100]	@ (80055ac <HAL_I2C_MspInit+0xb8>)
 8005548:	f043 0302 	orr.w	r3, r3, #2
 800554c:	6313      	str	r3, [r2, #48]	@ 0x30
 800554e:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <HAL_I2C_MspInit+0xb8>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800555a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800555e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005562:	2312      	movs	r3, #18
 8005564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005568:	2300      	movs	r3, #0
 800556a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800556e:	2303      	movs	r3, #3
 8005570:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005574:	2304      	movs	r3, #4
 8005576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800557e:	4619      	mov	r1, r3
 8005580:	480b      	ldr	r0, [pc, #44]	@ (80055b0 <HAL_I2C_MspInit+0xbc>)
 8005582:	f000 fed7 	bl	8006334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005586:	4b09      	ldr	r3, [pc, #36]	@ (80055ac <HAL_I2C_MspInit+0xb8>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	4a08      	ldr	r2, [pc, #32]	@ (80055ac <HAL_I2C_MspInit+0xb8>)
 800558c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005590:	6413      	str	r3, [r2, #64]	@ 0x40
 8005592:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <HAL_I2C_MspInit+0xb8>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800559a:	60bb      	str	r3, [r7, #8]
 800559c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800559e:	bf00      	nop
 80055a0:	37a8      	adds	r7, #168	@ 0xa8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40005400 	.word	0x40005400
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40020400 	.word	0x40020400

080055b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b0aa      	sub	sp, #168	@ 0xa8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055bc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055cc:	f107 0310 	add.w	r3, r7, #16
 80055d0:	2284      	movs	r2, #132	@ 0x84
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f005 facd 	bl	800ab74 <memset>
  if(huart->Instance==USART3)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a22      	ldr	r2, [pc, #136]	@ (8005668 <HAL_UART_MspInit+0xb4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d13c      	bne.n	800565e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80055e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80055ea:	2300      	movs	r3, #0
 80055ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055ee:	f107 0310 	add.w	r3, r7, #16
 80055f2:	4618      	mov	r0, r3
 80055f4:	f002 fed4 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80055fe:	f7ff fe97 	bl	8005330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005602:	4b1a      	ldr	r3, [pc, #104]	@ (800566c <HAL_UART_MspInit+0xb8>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	4a19      	ldr	r2, [pc, #100]	@ (800566c <HAL_UART_MspInit+0xb8>)
 8005608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800560c:	6413      	str	r3, [r2, #64]	@ 0x40
 800560e:	4b17      	ldr	r3, [pc, #92]	@ (800566c <HAL_UART_MspInit+0xb8>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800561a:	4b14      	ldr	r3, [pc, #80]	@ (800566c <HAL_UART_MspInit+0xb8>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561e:	4a13      	ldr	r2, [pc, #76]	@ (800566c <HAL_UART_MspInit+0xb8>)
 8005620:	f043 0308 	orr.w	r3, r3, #8
 8005624:	6313      	str	r3, [r2, #48]	@ 0x30
 8005626:	4b11      	ldr	r3, [pc, #68]	@ (800566c <HAL_UART_MspInit+0xb8>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	60bb      	str	r3, [r7, #8]
 8005630:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005632:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563a:	2302      	movs	r3, #2
 800563c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005640:	2300      	movs	r3, #0
 8005642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005646:	2303      	movs	r3, #3
 8005648:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800564c:	2307      	movs	r3, #7
 800564e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005652:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005656:	4619      	mov	r1, r3
 8005658:	4805      	ldr	r0, [pc, #20]	@ (8005670 <HAL_UART_MspInit+0xbc>)
 800565a:	f000 fe6b 	bl	8006334 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800565e:	bf00      	nop
 8005660:	37a8      	adds	r7, #168	@ 0xa8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40004800 	.word	0x40004800
 800566c:	40023800 	.word	0x40023800
 8005670:	40020c00 	.word	0x40020c00

08005674 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b0ac      	sub	sp, #176	@ 0xb0
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800567c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	609a      	str	r2, [r3, #8]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800568c:	f107 0318 	add.w	r3, r7, #24
 8005690:	2284      	movs	r2, #132	@ 0x84
 8005692:	2100      	movs	r1, #0
 8005694:	4618      	mov	r0, r3
 8005696:	f005 fa6d 	bl	800ab74 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056a2:	d159      	bne.n	8005758 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80056a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056b0:	f107 0318 	add.w	r3, r7, #24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f002 fe73 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80056c0:	f7ff fe36 	bl	8005330 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056c4:	4b26      	ldr	r3, [pc, #152]	@ (8005760 <HAL_PCD_MspInit+0xec>)
 80056c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c8:	4a25      	ldr	r2, [pc, #148]	@ (8005760 <HAL_PCD_MspInit+0xec>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80056d0:	4b23      	ldr	r3, [pc, #140]	@ (8005760 <HAL_PCD_MspInit+0xec>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80056dc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80056e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e4:	2302      	movs	r3, #2
 80056e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f0:	2303      	movs	r3, #3
 80056f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80056f6:	230a      	movs	r3, #10
 80056f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005700:	4619      	mov	r1, r3
 8005702:	4818      	ldr	r0, [pc, #96]	@ (8005764 <HAL_PCD_MspInit+0xf0>)
 8005704:	f000 fe16 	bl	8006334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800570c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005710:	2300      	movs	r3, #0
 8005712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005716:	2300      	movs	r3, #0
 8005718:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800571c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005720:	4619      	mov	r1, r3
 8005722:	4810      	ldr	r0, [pc, #64]	@ (8005764 <HAL_PCD_MspInit+0xf0>)
 8005724:	f000 fe06 	bl	8006334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005728:	4b0d      	ldr	r3, [pc, #52]	@ (8005760 <HAL_PCD_MspInit+0xec>)
 800572a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572c:	4a0c      	ldr	r2, [pc, #48]	@ (8005760 <HAL_PCD_MspInit+0xec>)
 800572e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005732:	6353      	str	r3, [r2, #52]	@ 0x34
 8005734:	4b0a      	ldr	r3, [pc, #40]	@ (8005760 <HAL_PCD_MspInit+0xec>)
 8005736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4b07      	ldr	r3, [pc, #28]	@ (8005760 <HAL_PCD_MspInit+0xec>)
 8005742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005744:	4a06      	ldr	r2, [pc, #24]	@ (8005760 <HAL_PCD_MspInit+0xec>)
 8005746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800574a:	6453      	str	r3, [r2, #68]	@ 0x44
 800574c:	4b04      	ldr	r3, [pc, #16]	@ (8005760 <HAL_PCD_MspInit+0xec>)
 800574e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8005758:	bf00      	nop
 800575a:	37b0      	adds	r7, #176	@ 0xb0
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40023800 	.word	0x40023800
 8005764:	40020000 	.word	0x40020000

08005768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <NMI_Handler+0x4>

08005770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <HardFault_Handler+0x4>

08005778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800577c:	bf00      	nop
 800577e:	e7fd      	b.n	800577c <MemManage_Handler+0x4>

08005780 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005784:	bf00      	nop
 8005786:	e7fd      	b.n	8005784 <BusFault_Handler+0x4>

08005788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800578c:	bf00      	nop
 800578e:	e7fd      	b.n	800578c <UsageFault_Handler+0x4>

08005790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800579e:	b480      	push	{r7}
 80057a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057a2:	bf00      	nop
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057b0:	bf00      	nop
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057be:	f000 f941 	bl	8005a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057c2:	bf00      	nop
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057c6:	b480      	push	{r7}
 80057c8:	af00      	add	r7, sp, #0
  return 1;
 80057ca:	2301      	movs	r3, #1
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <_kill>:

int _kill(int pid, int sig)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80057e0:	f005 fa1a 	bl	800ac18 <__errno>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2216      	movs	r2, #22
 80057e8:	601a      	str	r2, [r3, #0]
  return -1;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_exit>:

void _exit (int status)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80057fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff ffe7 	bl	80057d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <_exit+0x12>

0800580c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e00a      	b.n	8005834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800581e:	f3af 8000 	nop.w
 8005822:	4601      	mov	r1, r0
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	60ba      	str	r2, [r7, #8]
 800582a:	b2ca      	uxtb	r2, r1
 800582c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	3301      	adds	r3, #1
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	dbf0      	blt.n	800581e <_read+0x12>
  }

  return len;
 800583c:	687b      	ldr	r3, [r7, #4]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b086      	sub	sp, #24
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e009      	b.n	800586c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	60ba      	str	r2, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3301      	adds	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	dbf1      	blt.n	8005858 <_write+0x12>
  }
  return len;
 8005874:	687b      	ldr	r3, [r7, #4]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <_close>:

int _close(int file)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058a6:	605a      	str	r2, [r3, #4]
  return 0;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <_isatty>:

int _isatty(int file)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80058be:	2301      	movs	r3, #1
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058f0:	4a14      	ldr	r2, [pc, #80]	@ (8005944 <_sbrk+0x5c>)
 80058f2:	4b15      	ldr	r3, [pc, #84]	@ (8005948 <_sbrk+0x60>)
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058fc:	4b13      	ldr	r3, [pc, #76]	@ (800594c <_sbrk+0x64>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005904:	4b11      	ldr	r3, [pc, #68]	@ (800594c <_sbrk+0x64>)
 8005906:	4a12      	ldr	r2, [pc, #72]	@ (8005950 <_sbrk+0x68>)
 8005908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800590a:	4b10      	ldr	r3, [pc, #64]	@ (800594c <_sbrk+0x64>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	d207      	bcs.n	8005928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005918:	f005 f97e 	bl	800ac18 <__errno>
 800591c:	4603      	mov	r3, r0
 800591e:	220c      	movs	r2, #12
 8005920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	e009      	b.n	800593c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005928:	4b08      	ldr	r3, [pc, #32]	@ (800594c <_sbrk+0x64>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800592e:	4b07      	ldr	r3, [pc, #28]	@ (800594c <_sbrk+0x64>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	4a05      	ldr	r2, [pc, #20]	@ (800594c <_sbrk+0x64>)
 8005938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800593a:	68fb      	ldr	r3, [r7, #12]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20050000 	.word	0x20050000
 8005948:	00000400 	.word	0x00000400
 800594c:	20000d84 	.word	0x20000d84
 8005950:	20000ed8 	.word	0x20000ed8

08005954 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005958:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <SystemInit+0x20>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595e:	4a05      	ldr	r2, [pc, #20]	@ (8005974 <SystemInit+0x20>)
 8005960:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	e000ed00 	.word	0xe000ed00

08005978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005978:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80059b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800597c:	f7ff ffea 	bl	8005954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005980:	480c      	ldr	r0, [pc, #48]	@ (80059b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005982:	490d      	ldr	r1, [pc, #52]	@ (80059b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005984:	4a0d      	ldr	r2, [pc, #52]	@ (80059bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005988:	e002      	b.n	8005990 <LoopCopyDataInit>

0800598a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800598a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800598c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800598e:	3304      	adds	r3, #4

08005990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005994:	d3f9      	bcc.n	800598a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005996:	4a0a      	ldr	r2, [pc, #40]	@ (80059c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005998:	4c0a      	ldr	r4, [pc, #40]	@ (80059c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800599a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800599c:	e001      	b.n	80059a2 <LoopFillZerobss>

0800599e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800599e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059a0:	3204      	adds	r2, #4

080059a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059a4:	d3fb      	bcc.n	800599e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80059a6:	f005 f93d 	bl	800ac24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059aa:	f7fe fa11 	bl	8003dd0 <main>
  bx  lr    
 80059ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80059b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80059b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80059bc:	0800ff14 	.word	0x0800ff14
  ldr r2, =_sbss
 80059c0:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 80059c4:	20000ed8 	.word	0x20000ed8

080059c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059c8:	e7fe      	b.n	80059c8 <ADC_IRQHandler>

080059ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059ce:	2003      	movs	r0, #3
 80059d0:	f000 f92e 	bl	8005c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059d4:	2000      	movs	r0, #0
 80059d6:	f000 f805 	bl	80059e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059da:	f7ff fcaf 	bl	800533c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80059ec:	4b12      	ldr	r3, [pc, #72]	@ (8005a38 <HAL_InitTick+0x54>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b12      	ldr	r3, [pc, #72]	@ (8005a3c <HAL_InitTick+0x58>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	4619      	mov	r1, r3
 80059f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80059fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f93b 	bl	8005c7e <HAL_SYSTICK_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e00e      	b.n	8005a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b0f      	cmp	r3, #15
 8005a16:	d80a      	bhi.n	8005a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a18:	2200      	movs	r2, #0
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	f000 f911 	bl	8005c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a24:	4a06      	ldr	r2, [pc, #24]	@ (8005a40 <HAL_InitTick+0x5c>)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e000      	b.n	8005a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	2000000c 	.word	0x2000000c
 8005a3c:	20000014 	.word	0x20000014
 8005a40:	20000010 	.word	0x20000010

08005a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a48:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <HAL_IncTick+0x20>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <HAL_IncTick+0x24>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4413      	add	r3, r2
 8005a54:	4a04      	ldr	r2, [pc, #16]	@ (8005a68 <HAL_IncTick+0x24>)
 8005a56:	6013      	str	r3, [r2, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000014 	.word	0x20000014
 8005a68:	20000d88 	.word	0x20000d88

08005a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a70:	4b03      	ldr	r3, [pc, #12]	@ (8005a80 <HAL_GetTick+0x14>)
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000d88 	.word	0x20000d88

08005a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a8c:	f7ff ffee 	bl	8005a6c <HAL_GetTick>
 8005a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d005      	beq.n	8005aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac8 <HAL_Delay+0x44>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005aaa:	bf00      	nop
 8005aac:	f7ff ffde 	bl	8005a6c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d8f7      	bhi.n	8005aac <HAL_Delay+0x28>
  {
  }
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000014 	.word	0x20000014

08005acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005adc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b0c <__NVIC_SetPriorityGrouping+0x40>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005af4:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <__NVIC_SetPriorityGrouping+0x44>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005afa:	4a04      	ldr	r2, [pc, #16]	@ (8005b0c <__NVIC_SetPriorityGrouping+0x40>)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	60d3      	str	r3, [r2, #12]
}
 8005b00:	bf00      	nop
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	e000ed00 	.word	0xe000ed00
 8005b10:	05fa0000 	.word	0x05fa0000

08005b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b18:	4b04      	ldr	r3, [pc, #16]	@ (8005b2c <__NVIC_GetPriorityGrouping+0x18>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	f003 0307 	and.w	r3, r3, #7
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	e000ed00 	.word	0xe000ed00

08005b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	6039      	str	r1, [r7, #0]
 8005b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db0a      	blt.n	8005b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	490c      	ldr	r1, [pc, #48]	@ (8005b7c <__NVIC_SetPriority+0x4c>)
 8005b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4e:	0112      	lsls	r2, r2, #4
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	440b      	add	r3, r1
 8005b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b58:	e00a      	b.n	8005b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	4908      	ldr	r1, [pc, #32]	@ (8005b80 <__NVIC_SetPriority+0x50>)
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	3b04      	subs	r3, #4
 8005b68:	0112      	lsls	r2, r2, #4
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	761a      	strb	r2, [r3, #24]
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	e000e100 	.word	0xe000e100
 8005b80:	e000ed00 	.word	0xe000ed00

08005b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b089      	sub	sp, #36	@ 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f1c3 0307 	rsb	r3, r3, #7
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	bf28      	it	cs
 8005ba2:	2304      	movcs	r3, #4
 8005ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d902      	bls.n	8005bb4 <NVIC_EncodePriority+0x30>
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3b03      	subs	r3, #3
 8005bb2:	e000      	b.n	8005bb6 <NVIC_EncodePriority+0x32>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43da      	mvns	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	401a      	ands	r2, r3
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd6:	43d9      	mvns	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bdc:	4313      	orrs	r3, r2
         );
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3724      	adds	r7, #36	@ 0x24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bfc:	d301      	bcc.n	8005c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e00f      	b.n	8005c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c02:	4a0a      	ldr	r2, [pc, #40]	@ (8005c2c <SysTick_Config+0x40>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c0a:	210f      	movs	r1, #15
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	f7ff ff8e 	bl	8005b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c14:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <SysTick_Config+0x40>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c1a:	4b04      	ldr	r3, [pc, #16]	@ (8005c2c <SysTick_Config+0x40>)
 8005c1c:	2207      	movs	r2, #7
 8005c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	e000e010 	.word	0xe000e010

08005c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ff47 	bl	8005acc <__NVIC_SetPriorityGrouping>
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b086      	sub	sp, #24
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c58:	f7ff ff5c 	bl	8005b14 <__NVIC_GetPriorityGrouping>
 8005c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	6978      	ldr	r0, [r7, #20]
 8005c64:	f7ff ff8e 	bl	8005b84 <NVIC_EncodePriority>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ff5d 	bl	8005b30 <__NVIC_SetPriority>
}
 8005c76:	bf00      	nop
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ffb0 	bl	8005bec <SysTick_Config>
 8005c8c:	4603      	mov	r3, r0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e086      	b.n	8005db8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff fb61 	bl	8005384 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8005dc0 <HAL_ETH_Init+0x128>)
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8005dc0 <HAL_ETH_Init+0x128>)
 8005cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cce:	4b3c      	ldr	r3, [pc, #240]	@ (8005dc0 <HAL_ETH_Init+0x128>)
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005cda:	4b3a      	ldr	r3, [pc, #232]	@ (8005dc4 <HAL_ETH_Init+0x12c>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	4a39      	ldr	r2, [pc, #228]	@ (8005dc4 <HAL_ETH_Init+0x12c>)
 8005ce0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005ce4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005ce6:	4b37      	ldr	r3, [pc, #220]	@ (8005dc4 <HAL_ETH_Init+0x12c>)
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	4935      	ldr	r1, [pc, #212]	@ (8005dc4 <HAL_ETH_Init+0x12c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8005cf4:	4b33      	ldr	r3, [pc, #204]	@ (8005dc4 <HAL_ETH_Init+0x12c>)
 8005cf6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d10:	f7ff feac 	bl	8005a6c <HAL_GetTick>
 8005d14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005d16:	e011      	b.n	8005d3c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005d18:	f7ff fea8 	bl	8005a6c <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005d26:	d909      	bls.n	8005d3c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	22e0      	movs	r2, #224	@ 0xe0
 8005d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e03d      	b.n	8005db8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e4      	bne.n	8005d18 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f97a 	bl	8006048 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fa25 	bl	80061a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa7b 	bl	8006256 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	461a      	mov	r2, r3
 8005d66:	2100      	movs	r1, #0
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f9e3 	bl	8006134 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <HAL_ETH_Init+0x130>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005da2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2210      	movs	r2, #16
 8005db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	40013800 	.word	0x40013800
 8005dc8:	00020060 	.word	0x00020060

08005dcc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4b53      	ldr	r3, [pc, #332]	@ (8005f30 <ETH_SetMACConfig+0x164>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	7b9b      	ldrb	r3, [r3, #14]
 8005dea:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	7c12      	ldrb	r2, [r2, #16]
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d102      	bne.n	8005dfa <ETH_SetMACConfig+0x2e>
 8005df4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005df8:	e000      	b.n	8005dfc <ETH_SetMACConfig+0x30>
 8005dfa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005dfc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	7c52      	ldrb	r2, [r2, #17]
 8005e02:	2a00      	cmp	r2, #0
 8005e04:	d102      	bne.n	8005e0c <ETH_SetMACConfig+0x40>
 8005e06:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005e0a:	e000      	b.n	8005e0e <ETH_SetMACConfig+0x42>
 8005e0c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005e0e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005e14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	7fdb      	ldrb	r3, [r3, #31]
 8005e1a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005e1c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005e22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	7f92      	ldrb	r2, [r2, #30]
 8005e28:	2a00      	cmp	r2, #0
 8005e2a:	d102      	bne.n	8005e32 <ETH_SetMACConfig+0x66>
 8005e2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005e30:	e000      	b.n	8005e34 <ETH_SetMACConfig+0x68>
 8005e32:	2200      	movs	r2, #0
                        macconf->Speed |
 8005e34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	7f1b      	ldrb	r3, [r3, #28]
 8005e3a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005e3c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005e42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	791b      	ldrb	r3, [r3, #4]
 8005e48:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005e4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005e52:	2a00      	cmp	r2, #0
 8005e54:	d102      	bne.n	8005e5c <ETH_SetMACConfig+0x90>
 8005e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e5a:	e000      	b.n	8005e5e <ETH_SetMACConfig+0x92>
 8005e5c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005e5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	7bdb      	ldrb	r3, [r3, #15]
 8005e64:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005e66:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005e6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e74:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005e76:	4313      	orrs	r3, r2
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e8e:	2001      	movs	r0, #1
 8005e90:	f7ff fdf8 	bl	8005a84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005eba:	2a00      	cmp	r2, #0
 8005ebc:	d101      	bne.n	8005ec2 <ETH_SetMACConfig+0xf6>
 8005ebe:	2280      	movs	r2, #128	@ 0x80
 8005ec0:	e000      	b.n	8005ec4 <ETH_SetMACConfig+0xf8>
 8005ec2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005ec4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005eca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005ed2:	2a01      	cmp	r2, #1
 8005ed4:	d101      	bne.n	8005eda <ETH_SetMACConfig+0x10e>
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	e000      	b.n	8005edc <ETH_SetMACConfig+0x110>
 8005eda:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005edc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005ee4:	2a01      	cmp	r2, #1
 8005ee6:	d101      	bne.n	8005eec <ETH_SetMACConfig+0x120>
 8005ee8:	2204      	movs	r2, #4
 8005eea:	e000      	b.n	8005eee <ETH_SetMACConfig+0x122>
 8005eec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005eee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005ef6:	2a01      	cmp	r2, #1
 8005ef8:	d101      	bne.n	8005efe <ETH_SetMACConfig+0x132>
 8005efa:	2202      	movs	r2, #2
 8005efc:	e000      	b.n	8005f00 <ETH_SetMACConfig+0x134>
 8005efe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005f00:	4313      	orrs	r3, r2
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f18:	2001      	movs	r0, #1
 8005f1a:	f7ff fdb3 	bl	8005a84 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	619a      	str	r2, [r3, #24]
}
 8005f26:	bf00      	nop
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	fd20810f 	.word	0xfd20810f

08005f34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8006044 <ETH_SetDMAConfig+0x110>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	7b1b      	ldrb	r3, [r3, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <ETH_SetDMAConfig+0x2c>
 8005f5a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005f5e:	e000      	b.n	8005f62 <ETH_SetDMAConfig+0x2e>
 8005f60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	7b5b      	ldrb	r3, [r3, #13]
 8005f66:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005f68:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	7f52      	ldrb	r2, [r2, #29]
 8005f6e:	2a00      	cmp	r2, #0
 8005f70:	d102      	bne.n	8005f78 <ETH_SetDMAConfig+0x44>
 8005f72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f76:	e000      	b.n	8005f7a <ETH_SetDMAConfig+0x46>
 8005f78:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005f7a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	7b9b      	ldrb	r3, [r3, #14]
 8005f80:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005f82:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005f88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	7f1b      	ldrb	r3, [r3, #28]
 8005f8e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005f90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	7f9b      	ldrb	r3, [r3, #30]
 8005f96:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005f98:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005f9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005fa6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005fca:	2001      	movs	r0, #1
 8005fcc:	f7ff fd5a 	bl	8005a84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	791b      	ldrb	r3, [r3, #4]
 8005fe2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005fe8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005fee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005ff4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ffc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005ffe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006006:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800600c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006016:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800601a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006028:	2001      	movs	r0, #1
 800602a:	f7ff fd2b 	bl	8005a84 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006036:	461a      	mov	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6013      	str	r3, [r2, #0]
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	f8de3f23 	.word	0xf8de3f23

08006048 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b0a6      	sub	sp, #152	@ 0x98
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800605c:	2300      	movs	r3, #0
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006060:	2300      	movs	r3, #0
 8006062:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800606c:	2300      	movs	r3, #0
 800606e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006072:	2301      	movs	r3, #1
 8006074:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800607e:	2300      	movs	r3, #0
 8006080:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006084:	2300      	movs	r3, #0
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800608a:	2300      	movs	r3, #0
 800608c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800608e:	2300      	movs	r3, #0
 8006090:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006094:	2300      	movs	r3, #0
 8006096:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006098:	2300      	movs	r3, #0
 800609a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800609e:	2300      	movs	r3, #0
 80060a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80060b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80060b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80060ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80060c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff fe7f 	bl	8005dcc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80060ce:	2301      	movs	r3, #1
 80060d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80060d2:	2301      	movs	r3, #1
 80060d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80060dc:	2301      	movs	r3, #1
 80060de:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80060f0:	2300      	movs	r3, #0
 80060f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80060fa:	2301      	movs	r3, #1
 80060fc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80060fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006102:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006104:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006108:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800610a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800610e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006116:	2300      	movs	r3, #0
 8006118:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800611e:	f107 0308 	add.w	r3, r7, #8
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff ff05 	bl	8005f34 <ETH_SetDMAConfig>
}
 800612a:	bf00      	nop
 800612c:	3798      	adds	r7, #152	@ 0x98
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3305      	adds	r3, #5
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	3204      	adds	r2, #4
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	4b11      	ldr	r3, [pc, #68]	@ (800619c <ETH_MACAddressConfig+0x68>)
 8006156:	4413      	add	r3, r2
 8006158:	461a      	mov	r2, r3
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3303      	adds	r3, #3
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	061a      	lsls	r2, r3, #24
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3302      	adds	r3, #2
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3301      	adds	r3, #1
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	4313      	orrs	r3, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	4b06      	ldr	r3, [pc, #24]	@ (80061a0 <ETH_MACAddressConfig+0x6c>)
 8006186:	4413      	add	r3, r2
 8006188:	461a      	mov	r2, r3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	6013      	str	r3, [r2, #0]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40028040 	.word	0x40028040
 80061a0:	40028044 	.word	0x40028044

080061a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e03e      	b.n	8006230 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68d9      	ldr	r1, [r3, #12]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	440b      	add	r3, r1
 80061c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2200      	movs	r2, #0
 80061d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2200      	movs	r2, #0
 80061da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	3206      	adds	r2, #6
 80061e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d80c      	bhi.n	8006214 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68d9      	ldr	r1, [r3, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	440b      	add	r3, r1
 800620c:	461a      	mov	r2, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	e004      	b.n	800621e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	461a      	mov	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b03      	cmp	r3, #3
 8006234:	d9bd      	bls.n	80061b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006248:	611a      	str	r2, [r3, #16]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e048      	b.n	80062f6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6919      	ldr	r1, [r3, #16]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	440b      	add	r3, r1
 8006274:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2200      	movs	r2, #0
 8006280:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2200      	movs	r2, #0
 8006286:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2200      	movs	r2, #0
 8006292:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2200      	movs	r2, #0
 8006298:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	3212      	adds	r2, #18
 80062c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d80c      	bhi.n	80062e6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6919      	ldr	r1, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	440b      	add	r3, r1
 80062de:	461a      	mov	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	e004      	b.n	80062f0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	461a      	mov	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d9b3      	bls.n	8006264 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006326:	60da      	str	r2, [r3, #12]
}
 8006328:	bf00      	nop
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	@ 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800634e:	2300      	movs	r3, #0
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	e175      	b.n	8006640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006354:	2201      	movs	r2, #1
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4013      	ands	r3, r2
 8006366:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	429a      	cmp	r2, r3
 800636e:	f040 8164 	bne.w	800663a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b01      	cmp	r3, #1
 800637c:	d005      	beq.n	800638a <HAL_GPIO_Init+0x56>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d130      	bne.n	80063ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	2203      	movs	r2, #3
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	43db      	mvns	r3, r3
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	4013      	ands	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063c0:	2201      	movs	r2, #1
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	43db      	mvns	r3, r3
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	4013      	ands	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	091b      	lsrs	r3, r3, #4
 80063d6:	f003 0201 	and.w	r2, r3, #1
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d017      	beq.n	8006428 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	2203      	movs	r2, #3
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	43db      	mvns	r3, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4013      	ands	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	4313      	orrs	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d123      	bne.n	800647c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	08da      	lsrs	r2, r3, #3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3208      	adds	r2, #8
 800643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	220f      	movs	r2, #15
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	43db      	mvns	r3, r3
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	4013      	ands	r3, r2
 8006456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4313      	orrs	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	08da      	lsrs	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3208      	adds	r2, #8
 8006476:	69b9      	ldr	r1, [r7, #24]
 8006478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	2203      	movs	r2, #3
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	43db      	mvns	r3, r3
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	4013      	ands	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f003 0203 	and.w	r2, r3, #3
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80be 	beq.w	800663a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064be:	4b66      	ldr	r3, [pc, #408]	@ (8006658 <HAL_GPIO_Init+0x324>)
 80064c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c2:	4a65      	ldr	r2, [pc, #404]	@ (8006658 <HAL_GPIO_Init+0x324>)
 80064c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80064ca:	4b63      	ldr	r3, [pc, #396]	@ (8006658 <HAL_GPIO_Init+0x324>)
 80064cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80064d6:	4a61      	ldr	r2, [pc, #388]	@ (800665c <HAL_GPIO_Init+0x328>)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	3302      	adds	r3, #2
 80064de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	220f      	movs	r2, #15
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a58      	ldr	r2, [pc, #352]	@ (8006660 <HAL_GPIO_Init+0x32c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d037      	beq.n	8006572 <HAL_GPIO_Init+0x23e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a57      	ldr	r2, [pc, #348]	@ (8006664 <HAL_GPIO_Init+0x330>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d031      	beq.n	800656e <HAL_GPIO_Init+0x23a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a56      	ldr	r2, [pc, #344]	@ (8006668 <HAL_GPIO_Init+0x334>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d02b      	beq.n	800656a <HAL_GPIO_Init+0x236>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a55      	ldr	r2, [pc, #340]	@ (800666c <HAL_GPIO_Init+0x338>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d025      	beq.n	8006566 <HAL_GPIO_Init+0x232>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a54      	ldr	r2, [pc, #336]	@ (8006670 <HAL_GPIO_Init+0x33c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01f      	beq.n	8006562 <HAL_GPIO_Init+0x22e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a53      	ldr	r2, [pc, #332]	@ (8006674 <HAL_GPIO_Init+0x340>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d019      	beq.n	800655e <HAL_GPIO_Init+0x22a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a52      	ldr	r2, [pc, #328]	@ (8006678 <HAL_GPIO_Init+0x344>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_GPIO_Init+0x226>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a51      	ldr	r2, [pc, #324]	@ (800667c <HAL_GPIO_Init+0x348>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00d      	beq.n	8006556 <HAL_GPIO_Init+0x222>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a50      	ldr	r2, [pc, #320]	@ (8006680 <HAL_GPIO_Init+0x34c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d007      	beq.n	8006552 <HAL_GPIO_Init+0x21e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a4f      	ldr	r2, [pc, #316]	@ (8006684 <HAL_GPIO_Init+0x350>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d101      	bne.n	800654e <HAL_GPIO_Init+0x21a>
 800654a:	2309      	movs	r3, #9
 800654c:	e012      	b.n	8006574 <HAL_GPIO_Init+0x240>
 800654e:	230a      	movs	r3, #10
 8006550:	e010      	b.n	8006574 <HAL_GPIO_Init+0x240>
 8006552:	2308      	movs	r3, #8
 8006554:	e00e      	b.n	8006574 <HAL_GPIO_Init+0x240>
 8006556:	2307      	movs	r3, #7
 8006558:	e00c      	b.n	8006574 <HAL_GPIO_Init+0x240>
 800655a:	2306      	movs	r3, #6
 800655c:	e00a      	b.n	8006574 <HAL_GPIO_Init+0x240>
 800655e:	2305      	movs	r3, #5
 8006560:	e008      	b.n	8006574 <HAL_GPIO_Init+0x240>
 8006562:	2304      	movs	r3, #4
 8006564:	e006      	b.n	8006574 <HAL_GPIO_Init+0x240>
 8006566:	2303      	movs	r3, #3
 8006568:	e004      	b.n	8006574 <HAL_GPIO_Init+0x240>
 800656a:	2302      	movs	r3, #2
 800656c:	e002      	b.n	8006574 <HAL_GPIO_Init+0x240>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <HAL_GPIO_Init+0x240>
 8006572:	2300      	movs	r3, #0
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	f002 0203 	and.w	r2, r2, #3
 800657a:	0092      	lsls	r2, r2, #2
 800657c:	4093      	lsls	r3, r2
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4313      	orrs	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006584:	4935      	ldr	r1, [pc, #212]	@ (800665c <HAL_GPIO_Init+0x328>)
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	089b      	lsrs	r3, r3, #2
 800658a:	3302      	adds	r3, #2
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006592:	4b3d      	ldr	r3, [pc, #244]	@ (8006688 <HAL_GPIO_Init+0x354>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	43db      	mvns	r3, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4013      	ands	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065b6:	4a34      	ldr	r2, [pc, #208]	@ (8006688 <HAL_GPIO_Init+0x354>)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065bc:	4b32      	ldr	r3, [pc, #200]	@ (8006688 <HAL_GPIO_Init+0x354>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065e0:	4a29      	ldr	r2, [pc, #164]	@ (8006688 <HAL_GPIO_Init+0x354>)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065e6:	4b28      	ldr	r3, [pc, #160]	@ (8006688 <HAL_GPIO_Init+0x354>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4013      	ands	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800660a:	4a1f      	ldr	r2, [pc, #124]	@ (8006688 <HAL_GPIO_Init+0x354>)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006610:	4b1d      	ldr	r3, [pc, #116]	@ (8006688 <HAL_GPIO_Init+0x354>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006634:	4a14      	ldr	r2, [pc, #80]	@ (8006688 <HAL_GPIO_Init+0x354>)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	3301      	adds	r3, #1
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b0f      	cmp	r3, #15
 8006644:	f67f ae86 	bls.w	8006354 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	3724      	adds	r7, #36	@ 0x24
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40023800 	.word	0x40023800
 800665c:	40013800 	.word	0x40013800
 8006660:	40020000 	.word	0x40020000
 8006664:	40020400 	.word	0x40020400
 8006668:	40020800 	.word	0x40020800
 800666c:	40020c00 	.word	0x40020c00
 8006670:	40021000 	.word	0x40021000
 8006674:	40021400 	.word	0x40021400
 8006678:	40021800 	.word	0x40021800
 800667c:	40021c00 	.word	0x40021c00
 8006680:	40022000 	.word	0x40022000
 8006684:	40022400 	.word	0x40022400
 8006688:	40013c00 	.word	0x40013c00

0800668c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	807b      	strh	r3, [r7, #2]
 8006698:	4613      	mov	r3, r2
 800669a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800669c:	787b      	ldrb	r3, [r7, #1]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066a2:	887a      	ldrh	r2, [r7, #2]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80066a8:	e003      	b.n	80066b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80066aa:	887b      	ldrh	r3, [r7, #2]
 80066ac:	041a      	lsls	r2, r3, #16
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	619a      	str	r2, [r3, #24]
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066d0:	887a      	ldrh	r2, [r7, #2]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4013      	ands	r3, r2
 80066d6:	041a      	lsls	r2, r3, #16
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	43d9      	mvns	r1, r3
 80066dc:	887b      	ldrh	r3, [r7, #2]
 80066de:	400b      	ands	r3, r1
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	619a      	str	r2, [r3, #24]
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
	...

080066f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e08b      	b.n	800681e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fe feea 	bl	80054f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2224      	movs	r2, #36	@ 0x24
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0201 	bic.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006744:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006754:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d107      	bne.n	800676e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800676a:	609a      	str	r2, [r3, #8]
 800676c:	e006      	b.n	800677c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800677a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d108      	bne.n	8006796 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006792:	605a      	str	r2, [r3, #4]
 8006794:	e007      	b.n	80067a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6859      	ldr	r1, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006828 <HAL_I2C_Init+0x134>)
 80067b2:	430b      	orrs	r3, r1
 80067b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69d9      	ldr	r1, [r3, #28]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1a      	ldr	r2, [r3, #32]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	02008000 	.word	0x02008000

0800682c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af02      	add	r7, sp, #8
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	461a      	mov	r2, r3
 8006838:	460b      	mov	r3, r1
 800683a:	817b      	strh	r3, [r7, #10]
 800683c:	4613      	mov	r3, r2
 800683e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b20      	cmp	r3, #32
 800684a:	f040 80fd 	bne.w	8006a48 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_I2C_Master_Transmit+0x30>
 8006858:	2302      	movs	r3, #2
 800685a:	e0f6      	b.n	8006a4a <HAL_I2C_Master_Transmit+0x21e>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006864:	f7ff f902 	bl	8005a6c <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	2319      	movs	r3, #25
 8006870:	2201      	movs	r2, #1
 8006872:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fcf0 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e0e1      	b.n	8006a4a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2221      	movs	r2, #33	@ 0x21
 800688a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2210      	movs	r2, #16
 8006892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	893a      	ldrh	r2, [r7, #8]
 80068a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2bff      	cmp	r3, #255	@ 0xff
 80068b6:	d906      	bls.n	80068c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	22ff      	movs	r2, #255	@ 0xff
 80068bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80068be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	e007      	b.n	80068d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80068d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d024      	beq.n	8006928 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	781a      	ldrb	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006912:	b2db      	uxtb	r3, r3
 8006914:	3301      	adds	r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	8979      	ldrh	r1, [r7, #10]
 800691a:	4b4e      	ldr	r3, [pc, #312]	@ (8006a54 <HAL_I2C_Master_Transmit+0x228>)
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fe5f 	bl	80075e4 <I2C_TransferConfig>
 8006926:	e066      	b.n	80069f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692c:	b2da      	uxtb	r2, r3
 800692e:	8979      	ldrh	r1, [r7, #10]
 8006930:	4b48      	ldr	r3, [pc, #288]	@ (8006a54 <HAL_I2C_Master_Transmit+0x228>)
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fe54 	bl	80075e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800693c:	e05b      	b.n	80069f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	6a39      	ldr	r1, [r7, #32]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fce3 	bl	800730e <I2C_WaitOnTXISFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e07b      	b.n	8006a4a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	781a      	ldrb	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d034      	beq.n	80069f6 <HAL_I2C_Master_Transmit+0x1ca>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006990:	2b00      	cmp	r3, #0
 8006992:	d130      	bne.n	80069f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	2200      	movs	r2, #0
 800699c:	2180      	movs	r1, #128	@ 0x80
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fc5c 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e04d      	b.n	8006a4a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2bff      	cmp	r3, #255	@ 0xff
 80069b6:	d90e      	bls.n	80069d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	22ff      	movs	r2, #255	@ 0xff
 80069bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	8979      	ldrh	r1, [r7, #10]
 80069c6:	2300      	movs	r3, #0
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fe08 	bl	80075e4 <I2C_TransferConfig>
 80069d4:	e00f      	b.n	80069f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	8979      	ldrh	r1, [r7, #10]
 80069e8:	2300      	movs	r3, #0
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fdf7 	bl	80075e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d19e      	bne.n	800693e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	6a39      	ldr	r1, [r7, #32]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fcc9 	bl	800739c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e01a      	b.n	8006a4a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6859      	ldr	r1, [r3, #4]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	4b0c      	ldr	r3, [pc, #48]	@ (8006a58 <HAL_I2C_Master_Transmit+0x22c>)
 8006a28:	400b      	ands	r3, r1
 8006a2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	80002000 	.word	0x80002000
 8006a58:	fe00e800 	.word	0xfe00e800

08006a5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	4608      	mov	r0, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	817b      	strh	r3, [r7, #10]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	813b      	strh	r3, [r7, #8]
 8006a72:	4613      	mov	r3, r2
 8006a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	f040 80f9 	bne.w	8006c76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_I2C_Mem_Write+0x34>
 8006a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a96:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e0ed      	b.n	8006c78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_I2C_Mem_Write+0x4e>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0e6      	b.n	8006c78 <HAL_I2C_Mem_Write+0x21c>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ab2:	f7fe ffdb 	bl	8005a6c <HAL_GetTick>
 8006ab6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	2319      	movs	r3, #25
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fbc9 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0d1      	b.n	8006c78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2221      	movs	r2, #33	@ 0x21
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2240      	movs	r2, #64	@ 0x40
 8006ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a3a      	ldr	r2, [r7, #32]
 8006aee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006afc:	88f8      	ldrh	r0, [r7, #6]
 8006afe:	893a      	ldrh	r2, [r7, #8]
 8006b00:	8979      	ldrh	r1, [r7, #10]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fad9 	bl	80070c4 <I2C_RequestMemoryWrite>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0a9      	b.n	8006c78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2bff      	cmp	r3, #255	@ 0xff
 8006b2c:	d90e      	bls.n	8006b4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	22ff      	movs	r2, #255	@ 0xff
 8006b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	8979      	ldrh	r1, [r7, #10]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fd4d 	bl	80075e4 <I2C_TransferConfig>
 8006b4a:	e00f      	b.n	8006b6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	8979      	ldrh	r1, [r7, #10]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fd3c 	bl	80075e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fbcc 	bl	800730e <I2C_WaitOnTXISFlagUntilTimeout>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e07b      	b.n	8006c78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d034      	beq.n	8006c24 <HAL_I2C_Mem_Write+0x1c8>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d130      	bne.n	8006c24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2180      	movs	r1, #128	@ 0x80
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fb45 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e04d      	b.n	8006c78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2bff      	cmp	r3, #255	@ 0xff
 8006be4:	d90e      	bls.n	8006c04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	22ff      	movs	r2, #255	@ 0xff
 8006bea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	8979      	ldrh	r1, [r7, #10]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fcf1 	bl	80075e4 <I2C_TransferConfig>
 8006c02:	e00f      	b.n	8006c24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	8979      	ldrh	r1, [r7, #10]
 8006c16:	2300      	movs	r3, #0
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fce0 	bl	80075e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d19e      	bne.n	8006b6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 fbb2 	bl	800739c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e01a      	b.n	8006c78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2220      	movs	r2, #32
 8006c48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6859      	ldr	r1, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b0a      	ldr	r3, [pc, #40]	@ (8006c80 <HAL_I2C_Mem_Write+0x224>)
 8006c56:	400b      	ands	r3, r1
 8006c58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e000      	b.n	8006c78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c76:	2302      	movs	r3, #2
  }
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	fe00e800 	.word	0xfe00e800

08006c84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	817b      	strh	r3, [r7, #10]
 8006c96:	460b      	mov	r3, r1
 8006c98:	813b      	strh	r3, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	f040 80fd 	bne.w	8006ea6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0x34>
 8006cb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d105      	bne.n	8006cc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0f1      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_I2C_Mem_Read+0x4e>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e0ea      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x224>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cda:	f7fe fec7 	bl	8005a6c <HAL_GetTick>
 8006cde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	2319      	movs	r3, #25
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fab5 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e0d5      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2222      	movs	r2, #34	@ 0x22
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2240      	movs	r2, #64	@ 0x40
 8006d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d24:	88f8      	ldrh	r0, [r7, #6]
 8006d26:	893a      	ldrh	r2, [r7, #8]
 8006d28:	8979      	ldrh	r1, [r7, #10]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	4603      	mov	r3, r0
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 fa19 	bl	800716c <I2C_RequestMemoryRead>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e0ad      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2bff      	cmp	r3, #255	@ 0xff
 8006d54:	d90e      	bls.n	8006d74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	8979      	ldrh	r1, [r7, #10]
 8006d64:	4b52      	ldr	r3, [pc, #328]	@ (8006eb0 <HAL_I2C_Mem_Read+0x22c>)
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fc39 	bl	80075e4 <I2C_TransferConfig>
 8006d72:	e00f      	b.n	8006d94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	8979      	ldrh	r1, [r7, #10]
 8006d86:	4b4a      	ldr	r3, [pc, #296]	@ (8006eb0 <HAL_I2C_Mem_Read+0x22c>)
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fc28 	bl	80075e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2104      	movs	r1, #4
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fa5c 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e07c      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d034      	beq.n	8006e54 <HAL_I2C_Mem_Read+0x1d0>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d130      	bne.n	8006e54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2180      	movs	r1, #128	@ 0x80
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 fa2d 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e04d      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2bff      	cmp	r3, #255	@ 0xff
 8006e14:	d90e      	bls.n	8006e34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	8979      	ldrh	r1, [r7, #10]
 8006e24:	2300      	movs	r3, #0
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fbd9 	bl	80075e4 <I2C_TransferConfig>
 8006e32:	e00f      	b.n	8006e54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	8979      	ldrh	r1, [r7, #10]
 8006e46:	2300      	movs	r3, #0
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fbc8 	bl	80075e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d19a      	bne.n	8006d94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fa9a 	bl	800739c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e01a      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2220      	movs	r2, #32
 8006e78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6859      	ldr	r1, [r3, #4]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb4 <HAL_I2C_Mem_Read+0x230>)
 8006e86:	400b      	ands	r3, r1
 8006e88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e000      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006ea6:	2302      	movs	r3, #2
  }
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	80002400 	.word	0x80002400
 8006eb4:	fe00e800 	.word	0xfe00e800

08006eb8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	@ 0x28
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	607a      	str	r2, [r7, #4]
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	f040 80e9 	bne.w	80070b0 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eec:	d101      	bne.n	8006ef2 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e0df      	b.n	80070b2 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_I2C_IsDeviceReady+0x48>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e0d8      	b.n	80070b2 <HAL_I2C_IsDeviceReady+0x1fa>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2224      	movs	r2, #36	@ 0x24
 8006f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d105      	bne.n	8006f2a <HAL_I2C_IsDeviceReady+0x72>
 8006f1e:	897b      	ldrh	r3, [r7, #10]
 8006f20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f24:	4b65      	ldr	r3, [pc, #404]	@ (80070bc <HAL_I2C_IsDeviceReady+0x204>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	e004      	b.n	8006f34 <HAL_I2C_IsDeviceReady+0x7c>
 8006f2a:	897b      	ldrh	r3, [r7, #10]
 8006f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f30:	4b63      	ldr	r3, [pc, #396]	@ (80070c0 <HAL_I2C_IsDeviceReady+0x208>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006f3a:	f7fe fd97 	bl	8005a6c <HAL_GetTick>
 8006f3e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	bf0c      	ite	eq
 8006f4e:	2301      	moveq	r3, #1
 8006f50:	2300      	movne	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b10      	cmp	r3, #16
 8006f62:	bf0c      	ite	eq
 8006f64:	2301      	moveq	r3, #1
 8006f66:	2300      	movne	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006f6c:	e034      	b.n	8006fd8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f74:	d01a      	beq.n	8006fac <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f76:	f7fe fd79 	bl	8005a6c <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d302      	bcc.n	8006f8c <HAL_I2C_IsDeviceReady+0xd4>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10f      	bne.n	8006fac <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f98:	f043 0220 	orr.w	r2, r3, #32
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e082      	b.n	80070b2 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	bf0c      	ite	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	2300      	movne	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	bf0c      	ite	eq
 8006fd0:	2301      	moveq	r3, #1
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006fd8:	7fbb      	ldrb	r3, [r7, #30]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d102      	bne.n	8006fe4 <HAL_I2C_IsDeviceReady+0x12c>
 8006fde:	7f7b      	ldrb	r3, [r7, #29]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0c4      	beq.n	8006f6e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d027      	beq.n	8007042 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2120      	movs	r1, #32
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f92d 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00e      	beq.n	8007026 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800700c:	2b04      	cmp	r3, #4
 800700e:	d107      	bne.n	8007020 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2220      	movs	r2, #32
 8007016:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	645a      	str	r2, [r3, #68]	@ 0x44
 800701e:	e026      	b.n	800706e <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	77fb      	strb	r3, [r7, #31]
 8007024:	e023      	b.n	800706e <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2220      	movs	r2, #32
 800702c:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2220      	movs	r2, #32
 8007032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	e037      	b.n	80070b2 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2210      	movs	r2, #16
 8007048:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2200      	movs	r2, #0
 8007052:	2120      	movs	r1, #32
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f901 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e003      	b.n	800706e <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2220      	movs	r2, #32
 800706c:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	3301      	adds	r3, #1
 8007072:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d904      	bls.n	8007086 <HAL_I2C_IsDeviceReady+0x1ce>
 800707c:	7ffb      	ldrb	r3, [r7, #31]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	429a      	cmp	r2, r3
 800708c:	f63f af43 	bhi.w	8006f16 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80070b0:	2302      	movs	r3, #2
  }
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3720      	adds	r7, #32
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	02002000 	.word	0x02002000
 80070c0:	02002800 	.word	0x02002800

080070c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	4608      	mov	r0, r1
 80070ce:	4611      	mov	r1, r2
 80070d0:	461a      	mov	r2, r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	817b      	strh	r3, [r7, #10]
 80070d6:	460b      	mov	r3, r1
 80070d8:	813b      	strh	r3, [r7, #8]
 80070da:	4613      	mov	r3, r2
 80070dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80070de:	88fb      	ldrh	r3, [r7, #6]
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	8979      	ldrh	r1, [r7, #10]
 80070e4:	4b20      	ldr	r3, [pc, #128]	@ (8007168 <I2C_RequestMemoryWrite+0xa4>)
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fa79 	bl	80075e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	69b9      	ldr	r1, [r7, #24]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f909 	bl	800730e <I2C_WaitOnTXISFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e02c      	b.n	8007160 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d105      	bne.n	8007118 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800710c:	893b      	ldrh	r3, [r7, #8]
 800710e:	b2da      	uxtb	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	629a      	str	r2, [r3, #40]	@ 0x28
 8007116:	e015      	b.n	8007144 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007118:	893b      	ldrh	r3, [r7, #8]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b29b      	uxth	r3, r3
 800711e:	b2da      	uxtb	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	69b9      	ldr	r1, [r7, #24]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f8ef 	bl	800730e <I2C_WaitOnTXISFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e012      	b.n	8007160 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800713a:	893b      	ldrh	r3, [r7, #8]
 800713c:	b2da      	uxtb	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2200      	movs	r2, #0
 800714c:	2180      	movs	r1, #128	@ 0x80
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f884 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	80002000 	.word	0x80002000

0800716c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af02      	add	r7, sp, #8
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	461a      	mov	r2, r3
 800717a:	4603      	mov	r3, r0
 800717c:	817b      	strh	r3, [r7, #10]
 800717e:	460b      	mov	r3, r1
 8007180:	813b      	strh	r3, [r7, #8]
 8007182:	4613      	mov	r3, r2
 8007184:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007186:	88fb      	ldrh	r3, [r7, #6]
 8007188:	b2da      	uxtb	r2, r3
 800718a:	8979      	ldrh	r1, [r7, #10]
 800718c:	4b20      	ldr	r3, [pc, #128]	@ (8007210 <I2C_RequestMemoryRead+0xa4>)
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fa26 	bl	80075e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	69b9      	ldr	r1, [r7, #24]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f8b6 	bl	800730e <I2C_WaitOnTXISFlagUntilTimeout>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e02c      	b.n	8007206 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d105      	bne.n	80071be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071b2:	893b      	ldrh	r3, [r7, #8]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80071bc:	e015      	b.n	80071ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071be:	893b      	ldrh	r3, [r7, #8]
 80071c0:	0a1b      	lsrs	r3, r3, #8
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071cc:	69fa      	ldr	r2, [r7, #28]
 80071ce:	69b9      	ldr	r1, [r7, #24]
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f89c 	bl	800730e <I2C_WaitOnTXISFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e012      	b.n	8007206 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071e0:	893b      	ldrh	r3, [r7, #8]
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	2200      	movs	r2, #0
 80071f2:	2140      	movs	r1, #64	@ 0x40
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f831 	bl	800725c <I2C_WaitOnFlagUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	80002000 	.word	0x80002000

08007214 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b02      	cmp	r3, #2
 8007228:	d103      	bne.n	8007232 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b01      	cmp	r3, #1
 800723e:	d007      	beq.n	8007250 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	619a      	str	r2, [r3, #24]
  }
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	4613      	mov	r3, r2
 800726a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800726c:	e03b      	b.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 f8d6 	bl	8007424 <I2C_IsErrorOccurred>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e041      	b.n	8007306 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d02d      	beq.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728a:	f7fe fbef 	bl	8005a6c <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d302      	bcc.n	80072a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d122      	bne.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	bf0c      	ite	eq
 80072b0:	2301      	moveq	r3, #1
 80072b2:	2300      	movne	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d113      	bne.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c2:	f043 0220 	orr.w	r2, r3, #32
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e00f      	b.n	8007306 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4013      	ands	r3, r2
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	bf0c      	ite	eq
 80072f6:	2301      	moveq	r3, #1
 80072f8:	2300      	movne	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	429a      	cmp	r2, r3
 8007302:	d0b4      	beq.n	800726e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800731a:	e033      	b.n	8007384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f87f 	bl	8007424 <I2C_IsErrorOccurred>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e031      	b.n	8007394 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d025      	beq.n	8007384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007338:	f7fe fb98 	bl	8005a6c <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	429a      	cmp	r2, r3
 8007346:	d302      	bcc.n	800734e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d11a      	bne.n	8007384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b02      	cmp	r3, #2
 800735a:	d013      	beq.n	8007384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007360:	f043 0220 	orr.w	r2, r3, #32
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e007      	b.n	8007394 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b02      	cmp	r3, #2
 8007390:	d1c4      	bne.n	800731c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073a8:	e02f      	b.n	800740a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 f838 	bl	8007424 <I2C_IsErrorOccurred>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e02d      	b.n	800741a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073be:	f7fe fb55 	bl	8005a6c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d302      	bcc.n	80073d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d11a      	bne.n	800740a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d013      	beq.n	800740a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e6:	f043 0220 	orr.w	r2, r3, #32
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e007      	b.n	800741a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b20      	cmp	r3, #32
 8007416:	d1c8      	bne.n	80073aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	@ 0x28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d068      	beq.n	8007522 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2210      	movs	r2, #16
 8007456:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007458:	e049      	b.n	80074ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d045      	beq.n	80074ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007462:	f7fe fb03 	bl	8005a6c <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	429a      	cmp	r2, r3
 8007470:	d302      	bcc.n	8007478 <I2C_IsErrorOccurred+0x54>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d13a      	bne.n	80074ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007482:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800748a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800749a:	d121      	bne.n	80074e0 <I2C_IsErrorOccurred+0xbc>
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074a2:	d01d      	beq.n	80074e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80074a4:	7cfb      	ldrb	r3, [r7, #19]
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d01a      	beq.n	80074e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80074ba:	f7fe fad7 	bl	8005a6c <HAL_GetTick>
 80074be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074c0:	e00e      	b.n	80074e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80074c2:	f7fe fad3 	bl	8005a6c <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b19      	cmp	r3, #25
 80074ce:	d907      	bls.n	80074e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f043 0320 	orr.w	r3, r3, #32
 80074d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80074de:	e006      	b.n	80074ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d1e9      	bne.n	80074c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	d003      	beq.n	8007504 <I2C_IsErrorOccurred+0xe0>
 80074fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0aa      	beq.n	800745a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2220      	movs	r2, #32
 8007512:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	f043 0304 	orr.w	r3, r3, #4
 800751a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	f043 0301 	orr.w	r3, r3, #1
 800753a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007544:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	f043 0308 	orr.w	r3, r3, #8
 800755c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007566:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00b      	beq.n	8007590 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	f043 0302 	orr.w	r3, r3, #2
 800757e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01c      	beq.n	80075d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7ff fe3b 	bl	8007214 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6859      	ldr	r1, [r3, #4]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	4b0d      	ldr	r3, [pc, #52]	@ (80075e0 <I2C_IsErrorOccurred+0x1bc>)
 80075aa:	400b      	ands	r3, r1
 80075ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80075d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3728      	adds	r7, #40	@ 0x28
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	fe00e800 	.word	0xfe00e800

080075e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	607b      	str	r3, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	817b      	strh	r3, [r7, #10]
 80075f2:	4613      	mov	r3, r2
 80075f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075f6:	897b      	ldrh	r3, [r7, #10]
 80075f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075fc:	7a7b      	ldrb	r3, [r7, #9]
 80075fe:	041b      	lsls	r3, r3, #16
 8007600:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007604:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	4313      	orrs	r3, r2
 800760e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007612:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	0d5b      	lsrs	r3, r3, #21
 800761e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007622:	4b08      	ldr	r3, [pc, #32]	@ (8007644 <I2C_TransferConfig+0x60>)
 8007624:	430b      	orrs	r3, r1
 8007626:	43db      	mvns	r3, r3
 8007628:	ea02 0103 	and.w	r1, r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	03ff63ff 	.word	0x03ff63ff

08007648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b20      	cmp	r3, #32
 800765c:	d138      	bne.n	80076d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007668:	2302      	movs	r3, #2
 800766a:	e032      	b.n	80076d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2224      	movs	r2, #36	@ 0x24
 8007678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0201 	bic.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800769a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6819      	ldr	r1, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	e000      	b.n	80076d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d139      	bne.n	8007768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076fe:	2302      	movs	r3, #2
 8007700:	e033      	b.n	800776a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2224      	movs	r2, #36	@ 0x24
 800770e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0201 	bic.w	r2, r2, #1
 8007720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0201 	orr.w	r2, r2, #1
 8007752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	e000      	b.n	800776a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007768:	2302      	movs	r3, #2
  }
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b086      	sub	sp, #24
 800777a:	af02      	add	r7, sp, #8
 800777c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e108      	b.n	800799a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d106      	bne.n	80077a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fd ff66 	bl	8005674 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2203      	movs	r2, #3
 80077ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077b6:	d102      	bne.n	80077be <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f001 ff3c 	bl	8009640 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7c1a      	ldrb	r2, [r3, #16]
 80077d0:	f88d 2000 	strb.w	r2, [sp]
 80077d4:	3304      	adds	r3, #4
 80077d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077d8:	f001 fed8 	bl	800958c <USB_CoreInit>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2202      	movs	r2, #2
 80077e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e0d5      	b.n	800799a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2100      	movs	r1, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 ff34 	bl	8009662 <USB_SetCurrentMode>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e0c6      	b.n	800799a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
 8007810:	e04a      	b.n	80078a8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007812:	7bfa      	ldrb	r2, [r7, #15]
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	3315      	adds	r3, #21
 8007822:	2201      	movs	r2, #1
 8007824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007826:	7bfa      	ldrb	r2, [r7, #15]
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	3314      	adds	r3, #20
 8007836:	7bfa      	ldrb	r2, [r7, #15]
 8007838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800783a:	7bfa      	ldrb	r2, [r7, #15]
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	b298      	uxth	r0, r3
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	332e      	adds	r3, #46	@ 0x2e
 800784e:	4602      	mov	r2, r0
 8007850:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	3318      	adds	r3, #24
 8007862:	2200      	movs	r2, #0
 8007864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007866:	7bfa      	ldrb	r2, [r7, #15]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	331c      	adds	r3, #28
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800787a:	7bfa      	ldrb	r2, [r7, #15]
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	4613      	mov	r3, r2
 8007880:	00db      	lsls	r3, r3, #3
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	3320      	adds	r3, #32
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800788e:	7bfa      	ldrb	r2, [r7, #15]
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	3324      	adds	r3, #36	@ 0x24
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	3301      	adds	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	791b      	ldrb	r3, [r3, #4]
 80078ac:	7bfa      	ldrb	r2, [r7, #15]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d3af      	bcc.n	8007812 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078b2:	2300      	movs	r3, #0
 80078b4:	73fb      	strb	r3, [r7, #15]
 80078b6:	e044      	b.n	8007942 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80078b8:	7bfa      	ldrb	r2, [r7, #15]
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80078ce:	7bfa      	ldrb	r2, [r7, #15]
 80078d0:	6879      	ldr	r1, [r7, #4]
 80078d2:	4613      	mov	r3, r2
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	440b      	add	r3, r1
 80078dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80078e0:	7bfa      	ldrb	r2, [r7, #15]
 80078e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80078e4:	7bfa      	ldrb	r2, [r7, #15]
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80078f6:	2200      	movs	r2, #0
 80078f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80078fa:	7bfa      	ldrb	r2, [r7, #15]
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	4613      	mov	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	440b      	add	r3, r1
 8007908:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007910:	7bfa      	ldrb	r2, [r7, #15]
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	4613      	mov	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007926:	7bfa      	ldrb	r2, [r7, #15]
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	4613      	mov	r3, r2
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	440b      	add	r3, r1
 8007934:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	3301      	adds	r3, #1
 8007940:	73fb      	strb	r3, [r7, #15]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	791b      	ldrb	r3, [r3, #4]
 8007946:	7bfa      	ldrb	r2, [r7, #15]
 8007948:	429a      	cmp	r2, r3
 800794a:	d3b5      	bcc.n	80078b8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7c1a      	ldrb	r2, [r3, #16]
 8007954:	f88d 2000 	strb.w	r2, [sp]
 8007958:	3304      	adds	r3, #4
 800795a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800795c:	f001 fece 	bl	80096fc <USB_DevInit>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2202      	movs	r2, #2
 800796a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e013      	b.n	800799a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	7b1b      	ldrb	r3, [r3, #12]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d102      	bne.n	800798e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f80b 	bl	80079a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f002 f889 	bl	8009aaa <USB_DevDisconnect>

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079d2:	4b05      	ldr	r3, [pc, #20]	@ (80079e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	10000003 	.word	0x10000003

080079ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079f0:	4b05      	ldr	r3, [pc, #20]	@ (8007a08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a04      	ldr	r2, [pc, #16]	@ (8007a08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079fa:	6013      	str	r3, [r2, #0]
}
 80079fc:	bf00      	nop
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40007000 	.word	0x40007000

08007a0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a14:	2300      	movs	r3, #0
 8007a16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e291      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8087 	beq.w	8007b3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a30:	4b96      	ldr	r3, [pc, #600]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 030c 	and.w	r3, r3, #12
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d00c      	beq.n	8007a56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a3c:	4b93      	ldr	r3, [pc, #588]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f003 030c 	and.w	r3, r3, #12
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d112      	bne.n	8007a6e <HAL_RCC_OscConfig+0x62>
 8007a48:	4b90      	ldr	r3, [pc, #576]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a54:	d10b      	bne.n	8007a6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a56:	4b8d      	ldr	r3, [pc, #564]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d06c      	beq.n	8007b3c <HAL_RCC_OscConfig+0x130>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d168      	bne.n	8007b3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e26b      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a76:	d106      	bne.n	8007a86 <HAL_RCC_OscConfig+0x7a>
 8007a78:	4b84      	ldr	r3, [pc, #528]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a83      	ldr	r2, [pc, #524]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	e02e      	b.n	8007ae4 <HAL_RCC_OscConfig+0xd8>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10c      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x9c>
 8007a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a7e      	ldr	r2, [pc, #504]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a7b      	ldr	r2, [pc, #492]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	e01d      	b.n	8007ae4 <HAL_RCC_OscConfig+0xd8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ab0:	d10c      	bne.n	8007acc <HAL_RCC_OscConfig+0xc0>
 8007ab2:	4b76      	ldr	r3, [pc, #472]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a75      	ldr	r2, [pc, #468]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	4b73      	ldr	r3, [pc, #460]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a72      	ldr	r2, [pc, #456]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	e00b      	b.n	8007ae4 <HAL_RCC_OscConfig+0xd8>
 8007acc:	4b6f      	ldr	r3, [pc, #444]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a6e      	ldr	r2, [pc, #440]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a6b      	ldr	r2, [pc, #428]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d013      	beq.n	8007b14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aec:	f7fd ffbe 	bl	8005a6c <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007af2:	e008      	b.n	8007b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007af4:	f7fd ffba 	bl	8005a6c <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b64      	cmp	r3, #100	@ 0x64
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e21f      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b06:	4b61      	ldr	r3, [pc, #388]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0f0      	beq.n	8007af4 <HAL_RCC_OscConfig+0xe8>
 8007b12:	e014      	b.n	8007b3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b14:	f7fd ffaa 	bl	8005a6c <HAL_GetTick>
 8007b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b1a:	e008      	b.n	8007b2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b1c:	f7fd ffa6 	bl	8005a6c <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b64      	cmp	r3, #100	@ 0x64
 8007b28:	d901      	bls.n	8007b2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e20b      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b2e:	4b57      	ldr	r3, [pc, #348]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1f0      	bne.n	8007b1c <HAL_RCC_OscConfig+0x110>
 8007b3a:	e000      	b.n	8007b3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d069      	beq.n	8007c1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b4a:	4b50      	ldr	r3, [pc, #320]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 030c 	and.w	r3, r3, #12
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b56:	4b4d      	ldr	r3, [pc, #308]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 030c 	and.w	r3, r3, #12
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d11c      	bne.n	8007b9c <HAL_RCC_OscConfig+0x190>
 8007b62:	4b4a      	ldr	r3, [pc, #296]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d116      	bne.n	8007b9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b6e:	4b47      	ldr	r3, [pc, #284]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <HAL_RCC_OscConfig+0x17a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d001      	beq.n	8007b86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e1df      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b86:	4b41      	ldr	r3, [pc, #260]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	493d      	ldr	r1, [pc, #244]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b9a:	e040      	b.n	8007c1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d023      	beq.n	8007bec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ba4:	4b39      	ldr	r3, [pc, #228]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a38      	ldr	r2, [pc, #224]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007baa:	f043 0301 	orr.w	r3, r3, #1
 8007bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb0:	f7fd ff5c 	bl	8005a6c <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bb8:	f7fd ff58 	bl	8005a6c <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e1bd      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bca:	4b30      	ldr	r3, [pc, #192]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	4929      	ldr	r1, [pc, #164]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	600b      	str	r3, [r1, #0]
 8007bea:	e018      	b.n	8007c1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bec:	4b27      	ldr	r3, [pc, #156]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a26      	ldr	r2, [pc, #152]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007bf2:	f023 0301 	bic.w	r3, r3, #1
 8007bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf8:	f7fd ff38 	bl	8005a6c <HAL_GetTick>
 8007bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bfe:	e008      	b.n	8007c12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c00:	f7fd ff34 	bl	8005a6c <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d901      	bls.n	8007c12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e199      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c12:	4b1e      	ldr	r3, [pc, #120]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1f0      	bne.n	8007c00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0308 	and.w	r3, r3, #8
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d038      	beq.n	8007c9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d019      	beq.n	8007c66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c32:	4b16      	ldr	r3, [pc, #88]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c36:	4a15      	ldr	r2, [pc, #84]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007c38:	f043 0301 	orr.w	r3, r3, #1
 8007c3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c3e:	f7fd ff15 	bl	8005a6c <HAL_GetTick>
 8007c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c44:	e008      	b.n	8007c58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c46:	f7fd ff11 	bl	8005a6c <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d901      	bls.n	8007c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e176      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c58:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0f0      	beq.n	8007c46 <HAL_RCC_OscConfig+0x23a>
 8007c64:	e01a      	b.n	8007c9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c66:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c6a:	4a08      	ldr	r2, [pc, #32]	@ (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007c6c:	f023 0301 	bic.w	r3, r3, #1
 8007c70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c72:	f7fd fefb 	bl	8005a6c <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c78:	e00a      	b.n	8007c90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c7a:	f7fd fef7 	bl	8005a6c <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d903      	bls.n	8007c90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e15c      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
 8007c8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c90:	4b91      	ldr	r3, [pc, #580]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1ee      	bne.n	8007c7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80a4 	beq.w	8007df2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007caa:	4b8b      	ldr	r3, [pc, #556]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10d      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cb6:	4b88      	ldr	r3, [pc, #544]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cba:	4a87      	ldr	r2, [pc, #540]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007cc2:	4b85      	ldr	r3, [pc, #532]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cca:	60bb      	str	r3, [r7, #8]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cd2:	4b82      	ldr	r3, [pc, #520]	@ (8007edc <HAL_RCC_OscConfig+0x4d0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d118      	bne.n	8007d10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007cde:	4b7f      	ldr	r3, [pc, #508]	@ (8007edc <HAL_RCC_OscConfig+0x4d0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a7e      	ldr	r2, [pc, #504]	@ (8007edc <HAL_RCC_OscConfig+0x4d0>)
 8007ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cea:	f7fd febf 	bl	8005a6c <HAL_GetTick>
 8007cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cf0:	e008      	b.n	8007d04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cf2:	f7fd febb 	bl	8005a6c <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b64      	cmp	r3, #100	@ 0x64
 8007cfe:	d901      	bls.n	8007d04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e120      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d04:	4b75      	ldr	r3, [pc, #468]	@ (8007edc <HAL_RCC_OscConfig+0x4d0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0f0      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d106      	bne.n	8007d26 <HAL_RCC_OscConfig+0x31a>
 8007d18:	4b6f      	ldr	r3, [pc, #444]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d24:	e02d      	b.n	8007d82 <HAL_RCC_OscConfig+0x376>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10c      	bne.n	8007d48 <HAL_RCC_OscConfig+0x33c>
 8007d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d32:	4a69      	ldr	r2, [pc, #420]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d34:	f023 0301 	bic.w	r3, r3, #1
 8007d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d3a:	4b67      	ldr	r3, [pc, #412]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d3e:	4a66      	ldr	r2, [pc, #408]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d40:	f023 0304 	bic.w	r3, r3, #4
 8007d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d46:	e01c      	b.n	8007d82 <HAL_RCC_OscConfig+0x376>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b05      	cmp	r3, #5
 8007d4e:	d10c      	bne.n	8007d6a <HAL_RCC_OscConfig+0x35e>
 8007d50:	4b61      	ldr	r3, [pc, #388]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d54:	4a60      	ldr	r2, [pc, #384]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d56:	f043 0304 	orr.w	r3, r3, #4
 8007d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d60:	4a5d      	ldr	r2, [pc, #372]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d68:	e00b      	b.n	8007d82 <HAL_RCC_OscConfig+0x376>
 8007d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6e:	4a5a      	ldr	r2, [pc, #360]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d70:	f023 0301 	bic.w	r3, r3, #1
 8007d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d76:	4b58      	ldr	r3, [pc, #352]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d7a:	4a57      	ldr	r2, [pc, #348]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007d7c:	f023 0304 	bic.w	r3, r3, #4
 8007d80:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d015      	beq.n	8007db6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d8a:	f7fd fe6f 	bl	8005a6c <HAL_GetTick>
 8007d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d90:	e00a      	b.n	8007da8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d92:	f7fd fe6b 	bl	8005a6c <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e0ce      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007da8:	4b4b      	ldr	r3, [pc, #300]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0ee      	beq.n	8007d92 <HAL_RCC_OscConfig+0x386>
 8007db4:	e014      	b.n	8007de0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db6:	f7fd fe59 	bl	8005a6c <HAL_GetTick>
 8007dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dbc:	e00a      	b.n	8007dd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dbe:	f7fd fe55 	bl	8005a6c <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e0b8      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dd4:	4b40      	ldr	r3, [pc, #256]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1ee      	bne.n	8007dbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d105      	bne.n	8007df2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007de6:	4b3c      	ldr	r3, [pc, #240]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dea:	4a3b      	ldr	r2, [pc, #236]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007df0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 80a4 	beq.w	8007f44 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dfc:	4b36      	ldr	r3, [pc, #216]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 030c 	and.w	r3, r3, #12
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d06b      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d149      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e10:	4b31      	ldr	r3, [pc, #196]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a30      	ldr	r2, [pc, #192]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1c:	f7fd fe26 	bl	8005a6c <HAL_GetTick>
 8007e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e22:	e008      	b.n	8007e36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e24:	f7fd fe22 	bl	8005a6c <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e087      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e36:	4b28      	ldr	r3, [pc, #160]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1f0      	bne.n	8007e24 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69da      	ldr	r2, [r3, #28]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e50:	019b      	lsls	r3, r3, #6
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	085b      	lsrs	r3, r3, #1
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	041b      	lsls	r3, r3, #16
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	061b      	lsls	r3, r3, #24
 8007e66:	4313      	orrs	r3, r2
 8007e68:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007e6a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e6e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e70:	4b19      	ldr	r3, [pc, #100]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a18      	ldr	r2, [pc, #96]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e7c:	f7fd fdf6 	bl	8005a6c <HAL_GetTick>
 8007e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e84:	f7fd fdf2 	bl	8005a6c <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e057      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e96:	4b10      	ldr	r3, [pc, #64]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f0      	beq.n	8007e84 <HAL_RCC_OscConfig+0x478>
 8007ea2:	e04f      	b.n	8007f44 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb0:	f7fd fddc 	bl	8005a6c <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eb6:	e008      	b.n	8007eca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eb8:	f7fd fdd8 	bl	8005a6c <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e03d      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eca:	4b03      	ldr	r3, [pc, #12]	@ (8007ed8 <HAL_RCC_OscConfig+0x4cc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1f0      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x4ac>
 8007ed6:	e035      	b.n	8007f44 <HAL_RCC_OscConfig+0x538>
 8007ed8:	40023800 	.word	0x40023800
 8007edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8007f50 <HAL_RCC_OscConfig+0x544>)
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d028      	beq.n	8007f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d121      	bne.n	8007f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d11a      	bne.n	8007f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007f10:	4013      	ands	r3, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d111      	bne.n	8007f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d107      	bne.n	8007f40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d001      	beq.n	8007f44 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e000      	b.n	8007f46 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	40023800 	.word	0x40023800

08007f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e0d0      	b.n	800810e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8008118 <HAL_RCC_ClockConfig+0x1c4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d910      	bls.n	8007f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f7a:	4b67      	ldr	r3, [pc, #412]	@ (8008118 <HAL_RCC_ClockConfig+0x1c4>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f023 020f 	bic.w	r2, r3, #15
 8007f82:	4965      	ldr	r1, [pc, #404]	@ (8008118 <HAL_RCC_ClockConfig+0x1c4>)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f8a:	4b63      	ldr	r3, [pc, #396]	@ (8008118 <HAL_RCC_ClockConfig+0x1c4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d001      	beq.n	8007f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e0b8      	b.n	800810e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d020      	beq.n	8007fea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fb4:	4b59      	ldr	r3, [pc, #356]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	4a58      	ldr	r2, [pc, #352]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8007fba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007fbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fcc:	4b53      	ldr	r3, [pc, #332]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	4a52      	ldr	r2, [pc, #328]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8007fd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007fd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fd8:	4b50      	ldr	r3, [pc, #320]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	494d      	ldr	r1, [pc, #308]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d040      	beq.n	8008078 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d107      	bne.n	800800e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ffe:	4b47      	ldr	r3, [pc, #284]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d115      	bne.n	8008036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e07f      	b.n	800810e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2b02      	cmp	r3, #2
 8008014:	d107      	bne.n	8008026 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008016:	4b41      	ldr	r3, [pc, #260]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d109      	bne.n	8008036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e073      	b.n	800810e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008026:	4b3d      	ldr	r3, [pc, #244]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e06b      	b.n	800810e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008036:	4b39      	ldr	r3, [pc, #228]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f023 0203 	bic.w	r2, r3, #3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	4936      	ldr	r1, [pc, #216]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8008044:	4313      	orrs	r3, r2
 8008046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008048:	f7fd fd10 	bl	8005a6c <HAL_GetTick>
 800804c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800804e:	e00a      	b.n	8008066 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008050:	f7fd fd0c 	bl	8005a6c <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800805e:	4293      	cmp	r3, r2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e053      	b.n	800810e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008066:	4b2d      	ldr	r3, [pc, #180]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 020c 	and.w	r2, r3, #12
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	429a      	cmp	r2, r3
 8008076:	d1eb      	bne.n	8008050 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008078:	4b27      	ldr	r3, [pc, #156]	@ (8008118 <HAL_RCC_ClockConfig+0x1c4>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	429a      	cmp	r2, r3
 8008084:	d210      	bcs.n	80080a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008086:	4b24      	ldr	r3, [pc, #144]	@ (8008118 <HAL_RCC_ClockConfig+0x1c4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f023 020f 	bic.w	r2, r3, #15
 800808e:	4922      	ldr	r1, [pc, #136]	@ (8008118 <HAL_RCC_ClockConfig+0x1c4>)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	4313      	orrs	r3, r2
 8008094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008096:	4b20      	ldr	r3, [pc, #128]	@ (8008118 <HAL_RCC_ClockConfig+0x1c4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d001      	beq.n	80080a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e032      	b.n	800810e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d008      	beq.n	80080c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080b4:	4b19      	ldr	r3, [pc, #100]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	4916      	ldr	r1, [pc, #88]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080d2:	4b12      	ldr	r3, [pc, #72]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	490e      	ldr	r1, [pc, #56]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80080e6:	f000 f821 	bl	800812c <HAL_RCC_GetSysClockFreq>
 80080ea:	4602      	mov	r2, r0
 80080ec:	4b0b      	ldr	r3, [pc, #44]	@ (800811c <HAL_RCC_ClockConfig+0x1c8>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	091b      	lsrs	r3, r3, #4
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	490a      	ldr	r1, [pc, #40]	@ (8008120 <HAL_RCC_ClockConfig+0x1cc>)
 80080f8:	5ccb      	ldrb	r3, [r1, r3]
 80080fa:	fa22 f303 	lsr.w	r3, r2, r3
 80080fe:	4a09      	ldr	r2, [pc, #36]	@ (8008124 <HAL_RCC_ClockConfig+0x1d0>)
 8008100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008102:	4b09      	ldr	r3, [pc, #36]	@ (8008128 <HAL_RCC_ClockConfig+0x1d4>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f7fd fc6c 	bl	80059e4 <HAL_InitTick>

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	40023c00 	.word	0x40023c00
 800811c:	40023800 	.word	0x40023800
 8008120:	0800faac 	.word	0x0800faac
 8008124:	2000000c 	.word	0x2000000c
 8008128:	20000010 	.word	0x20000010

0800812c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800812c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008130:	b094      	sub	sp, #80	@ 0x50
 8008132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	647b      	str	r3, [r7, #68]	@ 0x44
 8008138:	2300      	movs	r3, #0
 800813a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800813c:	2300      	movs	r3, #0
 800813e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008144:	4b79      	ldr	r3, [pc, #484]	@ (800832c <HAL_RCC_GetSysClockFreq+0x200>)
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f003 030c 	and.w	r3, r3, #12
 800814c:	2b08      	cmp	r3, #8
 800814e:	d00d      	beq.n	800816c <HAL_RCC_GetSysClockFreq+0x40>
 8008150:	2b08      	cmp	r3, #8
 8008152:	f200 80e1 	bhi.w	8008318 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <HAL_RCC_GetSysClockFreq+0x34>
 800815a:	2b04      	cmp	r3, #4
 800815c:	d003      	beq.n	8008166 <HAL_RCC_GetSysClockFreq+0x3a>
 800815e:	e0db      	b.n	8008318 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008160:	4b73      	ldr	r3, [pc, #460]	@ (8008330 <HAL_RCC_GetSysClockFreq+0x204>)
 8008162:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008164:	e0db      	b.n	800831e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008166:	4b73      	ldr	r3, [pc, #460]	@ (8008334 <HAL_RCC_GetSysClockFreq+0x208>)
 8008168:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800816a:	e0d8      	b.n	800831e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800816c:	4b6f      	ldr	r3, [pc, #444]	@ (800832c <HAL_RCC_GetSysClockFreq+0x200>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008174:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008176:	4b6d      	ldr	r3, [pc, #436]	@ (800832c <HAL_RCC_GetSysClockFreq+0x200>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d063      	beq.n	800824a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008182:	4b6a      	ldr	r3, [pc, #424]	@ (800832c <HAL_RCC_GetSysClockFreq+0x200>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	099b      	lsrs	r3, r3, #6
 8008188:	2200      	movs	r2, #0
 800818a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800818c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800818e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008194:	633b      	str	r3, [r7, #48]	@ 0x30
 8008196:	2300      	movs	r3, #0
 8008198:	637b      	str	r3, [r7, #52]	@ 0x34
 800819a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800819e:	4622      	mov	r2, r4
 80081a0:	462b      	mov	r3, r5
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f04f 0100 	mov.w	r1, #0
 80081aa:	0159      	lsls	r1, r3, #5
 80081ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081b0:	0150      	lsls	r0, r2, #5
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4621      	mov	r1, r4
 80081b8:	1a51      	subs	r1, r2, r1
 80081ba:	6139      	str	r1, [r7, #16]
 80081bc:	4629      	mov	r1, r5
 80081be:	eb63 0301 	sbc.w	r3, r3, r1
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	f04f 0200 	mov.w	r2, #0
 80081c8:	f04f 0300 	mov.w	r3, #0
 80081cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081d0:	4659      	mov	r1, fp
 80081d2:	018b      	lsls	r3, r1, #6
 80081d4:	4651      	mov	r1, sl
 80081d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081da:	4651      	mov	r1, sl
 80081dc:	018a      	lsls	r2, r1, #6
 80081de:	4651      	mov	r1, sl
 80081e0:	ebb2 0801 	subs.w	r8, r2, r1
 80081e4:	4659      	mov	r1, fp
 80081e6:	eb63 0901 	sbc.w	r9, r3, r1
 80081ea:	f04f 0200 	mov.w	r2, #0
 80081ee:	f04f 0300 	mov.w	r3, #0
 80081f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081fe:	4690      	mov	r8, r2
 8008200:	4699      	mov	r9, r3
 8008202:	4623      	mov	r3, r4
 8008204:	eb18 0303 	adds.w	r3, r8, r3
 8008208:	60bb      	str	r3, [r7, #8]
 800820a:	462b      	mov	r3, r5
 800820c:	eb49 0303 	adc.w	r3, r9, r3
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	f04f 0200 	mov.w	r2, #0
 8008216:	f04f 0300 	mov.w	r3, #0
 800821a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800821e:	4629      	mov	r1, r5
 8008220:	024b      	lsls	r3, r1, #9
 8008222:	4621      	mov	r1, r4
 8008224:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008228:	4621      	mov	r1, r4
 800822a:	024a      	lsls	r2, r1, #9
 800822c:	4610      	mov	r0, r2
 800822e:	4619      	mov	r1, r3
 8008230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008232:	2200      	movs	r2, #0
 8008234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800823c:	f7f8 fd44 	bl	8000cc8 <__aeabi_uldivmod>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4613      	mov	r3, r2
 8008246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008248:	e058      	b.n	80082fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800824a:	4b38      	ldr	r3, [pc, #224]	@ (800832c <HAL_RCC_GetSysClockFreq+0x200>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	099b      	lsrs	r3, r3, #6
 8008250:	2200      	movs	r2, #0
 8008252:	4618      	mov	r0, r3
 8008254:	4611      	mov	r1, r2
 8008256:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800825a:	623b      	str	r3, [r7, #32]
 800825c:	2300      	movs	r3, #0
 800825e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008260:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008264:	4642      	mov	r2, r8
 8008266:	464b      	mov	r3, r9
 8008268:	f04f 0000 	mov.w	r0, #0
 800826c:	f04f 0100 	mov.w	r1, #0
 8008270:	0159      	lsls	r1, r3, #5
 8008272:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008276:	0150      	lsls	r0, r2, #5
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4641      	mov	r1, r8
 800827e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008282:	4649      	mov	r1, r9
 8008284:	eb63 0b01 	sbc.w	fp, r3, r1
 8008288:	f04f 0200 	mov.w	r2, #0
 800828c:	f04f 0300 	mov.w	r3, #0
 8008290:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008294:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008298:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800829c:	ebb2 040a 	subs.w	r4, r2, sl
 80082a0:	eb63 050b 	sbc.w	r5, r3, fp
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	f04f 0300 	mov.w	r3, #0
 80082ac:	00eb      	lsls	r3, r5, #3
 80082ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082b2:	00e2      	lsls	r2, r4, #3
 80082b4:	4614      	mov	r4, r2
 80082b6:	461d      	mov	r5, r3
 80082b8:	4643      	mov	r3, r8
 80082ba:	18e3      	adds	r3, r4, r3
 80082bc:	603b      	str	r3, [r7, #0]
 80082be:	464b      	mov	r3, r9
 80082c0:	eb45 0303 	adc.w	r3, r5, r3
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80082d2:	4629      	mov	r1, r5
 80082d4:	028b      	lsls	r3, r1, #10
 80082d6:	4621      	mov	r1, r4
 80082d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082dc:	4621      	mov	r1, r4
 80082de:	028a      	lsls	r2, r1, #10
 80082e0:	4610      	mov	r0, r2
 80082e2:	4619      	mov	r1, r3
 80082e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082e6:	2200      	movs	r2, #0
 80082e8:	61bb      	str	r3, [r7, #24]
 80082ea:	61fa      	str	r2, [r7, #28]
 80082ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082f0:	f7f8 fcea 	bl	8000cc8 <__aeabi_uldivmod>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4613      	mov	r3, r2
 80082fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80082fc:	4b0b      	ldr	r3, [pc, #44]	@ (800832c <HAL_RCC_GetSysClockFreq+0x200>)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	0c1b      	lsrs	r3, r3, #16
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	3301      	adds	r3, #1
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800830c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800830e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008310:	fbb2 f3f3 	udiv	r3, r2, r3
 8008314:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008316:	e002      	b.n	800831e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008318:	4b05      	ldr	r3, [pc, #20]	@ (8008330 <HAL_RCC_GetSysClockFreq+0x204>)
 800831a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800831c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800831e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008320:	4618      	mov	r0, r3
 8008322:	3750      	adds	r7, #80	@ 0x50
 8008324:	46bd      	mov	sp, r7
 8008326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800832a:	bf00      	nop
 800832c:	40023800 	.word	0x40023800
 8008330:	00f42400 	.word	0x00f42400
 8008334:	007a1200 	.word	0x007a1200

08008338 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800833c:	4b03      	ldr	r3, [pc, #12]	@ (800834c <HAL_RCC_GetHCLKFreq+0x14>)
 800833e:	681b      	ldr	r3, [r3, #0]
}
 8008340:	4618      	mov	r0, r3
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	2000000c 	.word	0x2000000c

08008350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008354:	f7ff fff0 	bl	8008338 <HAL_RCC_GetHCLKFreq>
 8008358:	4602      	mov	r2, r0
 800835a:	4b05      	ldr	r3, [pc, #20]	@ (8008370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	0a9b      	lsrs	r3, r3, #10
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	4903      	ldr	r1, [pc, #12]	@ (8008374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008366:	5ccb      	ldrb	r3, [r1, r3]
 8008368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800836c:	4618      	mov	r0, r3
 800836e:	bd80      	pop	{r7, pc}
 8008370:	40023800 	.word	0x40023800
 8008374:	0800fabc 	.word	0x0800fabc

08008378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800837c:	f7ff ffdc 	bl	8008338 <HAL_RCC_GetHCLKFreq>
 8008380:	4602      	mov	r2, r0
 8008382:	4b05      	ldr	r3, [pc, #20]	@ (8008398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	0b5b      	lsrs	r3, r3, #13
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	4903      	ldr	r1, [pc, #12]	@ (800839c <HAL_RCC_GetPCLK2Freq+0x24>)
 800838e:	5ccb      	ldrb	r3, [r1, r3]
 8008390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008394:	4618      	mov	r0, r3
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40023800 	.word	0x40023800
 800839c:	0800fabc 	.word	0x0800fabc

080083a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d012      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083c8:	4b69      	ldr	r3, [pc, #420]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	4a68      	ldr	r2, [pc, #416]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80083d2:	6093      	str	r3, [r2, #8]
 80083d4:	4b66      	ldr	r3, [pc, #408]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083dc:	4964      	ldr	r1, [pc, #400]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80083ea:	2301      	movs	r3, #1
 80083ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d017      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083fa:	4b5d      	ldr	r3, [pc, #372]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008400:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008408:	4959      	ldr	r1, [pc, #356]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008418:	d101      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800841a:	2301      	movs	r3, #1
 800841c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008426:	2301      	movs	r3, #1
 8008428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d017      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008436:	4b4e      	ldr	r3, [pc, #312]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800843c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	494a      	ldr	r1, [pc, #296]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008446:	4313      	orrs	r3, r2
 8008448:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008450:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008454:	d101      	bne.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008456:	2301      	movs	r3, #1
 8008458:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008462:	2301      	movs	r3, #1
 8008464:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008472:	2301      	movs	r3, #1
 8008474:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 808b 	beq.w	800859a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008484:	4b3a      	ldr	r3, [pc, #232]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008488:	4a39      	ldr	r2, [pc, #228]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800848e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008490:	4b37      	ldr	r3, [pc, #220]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008498:	60bb      	str	r3, [r7, #8]
 800849a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800849c:	4b35      	ldr	r3, [pc, #212]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a34      	ldr	r2, [pc, #208]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a8:	f7fd fae0 	bl	8005a6c <HAL_GetTick>
 80084ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084ae:	e008      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084b0:	f7fd fadc 	bl	8005a6c <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b64      	cmp	r3, #100	@ 0x64
 80084bc:	d901      	bls.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e357      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084c2:	4b2c      	ldr	r3, [pc, #176]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0f0      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084ce:	4b28      	ldr	r3, [pc, #160]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d035      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d02e      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084ec:	4b20      	ldr	r3, [pc, #128]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008500:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008502:	4b1b      	ldr	r3, [pc, #108]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008506:	4a1a      	ldr	r2, [pc, #104]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800850c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800850e:	4a18      	ldr	r2, [pc, #96]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008514:	4b16      	ldr	r3, [pc, #88]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b01      	cmp	r3, #1
 800851e:	d114      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008520:	f7fd faa4 	bl	8005a6c <HAL_GetTick>
 8008524:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008526:	e00a      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008528:	f7fd faa0 	bl	8005a6c <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008536:	4293      	cmp	r3, r2
 8008538:	d901      	bls.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e319      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800853e:	4b0c      	ldr	r3, [pc, #48]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0ee      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008556:	d111      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008558:	4b05      	ldr	r3, [pc, #20]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008564:	4b04      	ldr	r3, [pc, #16]	@ (8008578 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008566:	400b      	ands	r3, r1
 8008568:	4901      	ldr	r1, [pc, #4]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800856a:	4313      	orrs	r3, r2
 800856c:	608b      	str	r3, [r1, #8]
 800856e:	e00b      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008570:	40023800 	.word	0x40023800
 8008574:	40007000 	.word	0x40007000
 8008578:	0ffffcff 	.word	0x0ffffcff
 800857c:	4baa      	ldr	r3, [pc, #680]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	4aa9      	ldr	r2, [pc, #676]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008582:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008586:	6093      	str	r3, [r2, #8]
 8008588:	4ba7      	ldr	r3, [pc, #668]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800858a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008594:	49a4      	ldr	r1, [pc, #656]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008596:	4313      	orrs	r3, r2
 8008598:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0310 	and.w	r3, r3, #16
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d010      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085a6:	4ba0      	ldr	r3, [pc, #640]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ac:	4a9e      	ldr	r2, [pc, #632]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80085b6:	4b9c      	ldr	r3, [pc, #624]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c0:	4999      	ldr	r1, [pc, #612]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085d4:	4b94      	ldr	r3, [pc, #592]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085e2:	4991      	ldr	r1, [pc, #580]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085f6:	4b8c      	ldr	r3, [pc, #560]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008604:	4988      	ldr	r1, [pc, #544]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008606:	4313      	orrs	r3, r2
 8008608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008618:	4b83      	ldr	r3, [pc, #524]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008626:	4980      	ldr	r1, [pc, #512]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008628:	4313      	orrs	r3, r2
 800862a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800863a:	4b7b      	ldr	r3, [pc, #492]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008640:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008648:	4977      	ldr	r1, [pc, #476]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800864a:	4313      	orrs	r3, r2
 800864c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800865c:	4b72      	ldr	r3, [pc, #456]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008662:	f023 0203 	bic.w	r2, r3, #3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800866a:	496f      	ldr	r1, [pc, #444]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866c:	4313      	orrs	r3, r2
 800866e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800867e:	4b6a      	ldr	r3, [pc, #424]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008684:	f023 020c 	bic.w	r2, r3, #12
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800868c:	4966      	ldr	r1, [pc, #408]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868e:	4313      	orrs	r3, r2
 8008690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086a0:	4b61      	ldr	r3, [pc, #388]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ae:	495e      	ldr	r1, [pc, #376]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086c2:	4b59      	ldr	r3, [pc, #356]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086d0:	4955      	ldr	r1, [pc, #340]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086e4:	4b50      	ldr	r3, [pc, #320]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f2:	494d      	ldr	r1, [pc, #308]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00a      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008706:	4b48      	ldr	r3, [pc, #288]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800870c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008714:	4944      	ldr	r1, [pc, #272]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008716:	4313      	orrs	r3, r2
 8008718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00a      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008728:	4b3f      	ldr	r3, [pc, #252]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800872e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008736:	493c      	ldr	r1, [pc, #240]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008738:	4313      	orrs	r3, r2
 800873a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800874a:	4b37      	ldr	r3, [pc, #220]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800874c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008750:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008758:	4933      	ldr	r1, [pc, #204]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800875a:	4313      	orrs	r3, r2
 800875c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800876c:	4b2e      	ldr	r3, [pc, #184]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800876e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008772:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800877a:	492b      	ldr	r1, [pc, #172]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800877c:	4313      	orrs	r3, r2
 800877e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d011      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800878e:	4b26      	ldr	r3, [pc, #152]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008794:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800879c:	4922      	ldr	r1, [pc, #136]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087ac:	d101      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80087ae:	2301      	movs	r3, #1
 80087b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0308 	and.w	r3, r3, #8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80087be:	2301      	movs	r3, #1
 80087c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ce:	4b16      	ldr	r3, [pc, #88]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087dc:	4912      	ldr	r1, [pc, #72]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008800:	4909      	ldr	r1, [pc, #36]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008802:	4313      	orrs	r3, r2
 8008804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d006      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80d9 	beq.w	80089ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800881c:	4b02      	ldr	r3, [pc, #8]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a01      	ldr	r2, [pc, #4]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008822:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008826:	e001      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008828:	40023800 	.word	0x40023800
 800882c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882e:	f7fd f91d 	bl	8005a6c <HAL_GetTick>
 8008832:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008834:	e008      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008836:	f7fd f919 	bl	8005a6c <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b64      	cmp	r3, #100	@ 0x64
 8008842:	d901      	bls.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e194      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008848:	4b6c      	ldr	r3, [pc, #432]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f0      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d021      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008864:	2b00      	cmp	r3, #0
 8008866:	d11d      	bne.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008868:	4b64      	ldr	r3, [pc, #400]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800886a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	f003 0303 	and.w	r3, r3, #3
 8008874:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008876:	4b61      	ldr	r3, [pc, #388]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800887c:	0e1b      	lsrs	r3, r3, #24
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	019a      	lsls	r2, r3, #6
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	041b      	lsls	r3, r3, #16
 800888e:	431a      	orrs	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	061b      	lsls	r3, r3, #24
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	071b      	lsls	r3, r3, #28
 800889c:	4957      	ldr	r1, [pc, #348]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d004      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088b8:	d00a      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d02e      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ce:	d129      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088d0:	4b4a      	ldr	r3, [pc, #296]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088d6:	0c1b      	lsrs	r3, r3, #16
 80088d8:	f003 0303 	and.w	r3, r3, #3
 80088dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088de:	4b47      	ldr	r3, [pc, #284]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088e4:	0f1b      	lsrs	r3, r3, #28
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	019a      	lsls	r2, r3, #6
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	041b      	lsls	r3, r3, #16
 80088f6:	431a      	orrs	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	061b      	lsls	r3, r3, #24
 80088fe:	431a      	orrs	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	071b      	lsls	r3, r3, #28
 8008904:	493d      	ldr	r1, [pc, #244]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008906:	4313      	orrs	r3, r2
 8008908:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800890c:	4b3b      	ldr	r3, [pc, #236]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800890e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008912:	f023 021f 	bic.w	r2, r3, #31
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891a:	3b01      	subs	r3, #1
 800891c:	4937      	ldr	r1, [pc, #220]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01d      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008930:	4b32      	ldr	r3, [pc, #200]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008936:	0e1b      	lsrs	r3, r3, #24
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800893e:	4b2f      	ldr	r3, [pc, #188]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008944:	0f1b      	lsrs	r3, r3, #28
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	019a      	lsls	r2, r3, #6
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	041b      	lsls	r3, r3, #16
 8008958:	431a      	orrs	r2, r3
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	061b      	lsls	r3, r3, #24
 800895e:	431a      	orrs	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	071b      	lsls	r3, r3, #28
 8008964:	4925      	ldr	r1, [pc, #148]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008966:	4313      	orrs	r3, r2
 8008968:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d011      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	019a      	lsls	r2, r3, #6
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	061b      	lsls	r3, r3, #24
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	071b      	lsls	r3, r3, #28
 8008994:	4919      	ldr	r1, [pc, #100]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800899c:	4b17      	ldr	r3, [pc, #92]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a16      	ldr	r2, [pc, #88]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a8:	f7fd f860 	bl	8005a6c <HAL_GetTick>
 80089ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089ae:	e008      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089b0:	f7fd f85c 	bl	8005a6c <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b64      	cmp	r3, #100	@ 0x64
 80089bc:	d901      	bls.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e0d7      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089c2:	4b0e      	ldr	r3, [pc, #56]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0f0      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	f040 80cd 	bne.w	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089d6:	4b09      	ldr	r3, [pc, #36]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a08      	ldr	r2, [pc, #32]	@ (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e2:	f7fd f843 	bl	8005a6c <HAL_GetTick>
 80089e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089e8:	e00a      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089ea:	f7fd f83f 	bl	8005a6c <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b64      	cmp	r3, #100	@ 0x64
 80089f6:	d903      	bls.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e0ba      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80089fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a00:	4b5e      	ldr	r3, [pc, #376]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a0c:	d0ed      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d02e      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d12a      	bne.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a36:	4b51      	ldr	r3, [pc, #324]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a3c:	0c1b      	lsrs	r3, r3, #16
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a44:	4b4d      	ldr	r3, [pc, #308]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a4a:	0f1b      	lsrs	r3, r3, #28
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	019a      	lsls	r2, r3, #6
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	041b      	lsls	r3, r3, #16
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	061b      	lsls	r3, r3, #24
 8008a64:	431a      	orrs	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	071b      	lsls	r3, r3, #28
 8008a6a:	4944      	ldr	r1, [pc, #272]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a72:	4b42      	ldr	r3, [pc, #264]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a80:	3b01      	subs	r3, #1
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	493d      	ldr	r1, [pc, #244]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d022      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aa0:	d11d      	bne.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008aa2:	4b36      	ldr	r3, [pc, #216]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa8:	0e1b      	lsrs	r3, r3, #24
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ab0:	4b32      	ldr	r3, [pc, #200]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab6:	0f1b      	lsrs	r3, r3, #28
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	019a      	lsls	r2, r3, #6
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	041b      	lsls	r3, r3, #16
 8008aca:	431a      	orrs	r2, r3
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	061b      	lsls	r3, r3, #24
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	071b      	lsls	r3, r3, #28
 8008ad6:	4929      	ldr	r1, [pc, #164]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0308 	and.w	r3, r3, #8
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d028      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008aea:	4b24      	ldr	r3, [pc, #144]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af0:	0e1b      	lsrs	r3, r3, #24
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008af8:	4b20      	ldr	r3, [pc, #128]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008afe:	0c1b      	lsrs	r3, r3, #16
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	019a      	lsls	r2, r3, #6
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	041b      	lsls	r3, r3, #16
 8008b10:	431a      	orrs	r2, r3
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	061b      	lsls	r3, r3, #24
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	071b      	lsls	r3, r3, #28
 8008b1e:	4917      	ldr	r1, [pc, #92]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b26:	4b15      	ldr	r3, [pc, #84]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b34:	4911      	ldr	r1, [pc, #68]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a0e      	ldr	r2, [pc, #56]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b48:	f7fc ff90 	bl	8005a6c <HAL_GetTick>
 8008b4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b50:	f7fc ff8c 	bl	8005a6c <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b64      	cmp	r3, #100	@ 0x64
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e007      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b62:	4b06      	ldr	r3, [pc, #24]	@ (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6e:	d1ef      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3720      	adds	r7, #32
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	40023800 	.word	0x40023800

08008b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e040      	b.n	8008c14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d106      	bne.n	8008ba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7fc fd06 	bl	80055b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2224      	movs	r2, #36	@ 0x24
 8008bac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0201 	bic.w	r2, r2, #1
 8008bbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fb16 	bl	80091f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f8af 	bl	8008d30 <UART_SetConfig>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d101      	bne.n	8008bdc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e01b      	b.n	8008c14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0201 	orr.w	r2, r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fb95 	bl	800933c <UART_CheckIdleState>
 8008c12:	4603      	mov	r3, r0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08a      	sub	sp, #40	@ 0x28
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c30:	2b20      	cmp	r3, #32
 8008c32:	d177      	bne.n	8008d24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <HAL_UART_Transmit+0x24>
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e070      	b.n	8008d26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2221      	movs	r2, #33	@ 0x21
 8008c50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c52:	f7fc ff0b 	bl	8005a6c <HAL_GetTick>
 8008c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	88fa      	ldrh	r2, [r7, #6]
 8008c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	88fa      	ldrh	r2, [r7, #6]
 8008c64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c70:	d108      	bne.n	8008c84 <HAL_UART_Transmit+0x68>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d104      	bne.n	8008c84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	61bb      	str	r3, [r7, #24]
 8008c82:	e003      	b.n	8008c8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c8c:	e02f      	b.n	8008cee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2200      	movs	r2, #0
 8008c96:	2180      	movs	r1, #128	@ 0x80
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 fba6 	bl	80093ea <UART_WaitOnFlagUntilTimeout>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d004      	beq.n	8008cae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e03b      	b.n	8008d26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10b      	bne.n	8008ccc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cc2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	3302      	adds	r3, #2
 8008cc8:	61bb      	str	r3, [r7, #24]
 8008cca:	e007      	b.n	8008cdc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	781a      	ldrb	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1c9      	bne.n	8008c8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2200      	movs	r2, #0
 8008d02:	2140      	movs	r1, #64	@ 0x40
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 fb70 	bl	80093ea <UART_WaitOnFlagUntilTimeout>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d004      	beq.n	8008d1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2220      	movs	r2, #32
 8008d14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e005      	b.n	8008d26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	e000      	b.n	8008d26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008d24:	2302      	movs	r3, #2
  }
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	431a      	orrs	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4ba6      	ldr	r3, [pc, #664]	@ (8008ff4 <UART_SetConfig+0x2c4>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	6979      	ldr	r1, [r7, #20]
 8008d64:	430b      	orrs	r3, r1
 8008d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68da      	ldr	r2, [r3, #12]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a94      	ldr	r2, [pc, #592]	@ (8008ff8 <UART_SetConfig+0x2c8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d120      	bne.n	8008dee <UART_SetConfig+0xbe>
 8008dac:	4b93      	ldr	r3, [pc, #588]	@ (8008ffc <UART_SetConfig+0x2cc>)
 8008dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db2:	f003 0303 	and.w	r3, r3, #3
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d816      	bhi.n	8008de8 <UART_SetConfig+0xb8>
 8008dba:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc0 <UART_SetConfig+0x90>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008ddd 	.word	0x08008ddd
 8008dc8:	08008dd7 	.word	0x08008dd7
 8008dcc:	08008de3 	.word	0x08008de3
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	77fb      	strb	r3, [r7, #31]
 8008dd4:	e150      	b.n	8009078 <UART_SetConfig+0x348>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	77fb      	strb	r3, [r7, #31]
 8008dda:	e14d      	b.n	8009078 <UART_SetConfig+0x348>
 8008ddc:	2304      	movs	r3, #4
 8008dde:	77fb      	strb	r3, [r7, #31]
 8008de0:	e14a      	b.n	8009078 <UART_SetConfig+0x348>
 8008de2:	2308      	movs	r3, #8
 8008de4:	77fb      	strb	r3, [r7, #31]
 8008de6:	e147      	b.n	8009078 <UART_SetConfig+0x348>
 8008de8:	2310      	movs	r3, #16
 8008dea:	77fb      	strb	r3, [r7, #31]
 8008dec:	e144      	b.n	8009078 <UART_SetConfig+0x348>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a83      	ldr	r2, [pc, #524]	@ (8009000 <UART_SetConfig+0x2d0>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d132      	bne.n	8008e5e <UART_SetConfig+0x12e>
 8008df8:	4b80      	ldr	r3, [pc, #512]	@ (8008ffc <UART_SetConfig+0x2cc>)
 8008dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dfe:	f003 030c 	and.w	r3, r3, #12
 8008e02:	2b0c      	cmp	r3, #12
 8008e04:	d828      	bhi.n	8008e58 <UART_SetConfig+0x128>
 8008e06:	a201      	add	r2, pc, #4	@ (adr r2, 8008e0c <UART_SetConfig+0xdc>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e41 	.word	0x08008e41
 8008e10:	08008e59 	.word	0x08008e59
 8008e14:	08008e59 	.word	0x08008e59
 8008e18:	08008e59 	.word	0x08008e59
 8008e1c:	08008e4d 	.word	0x08008e4d
 8008e20:	08008e59 	.word	0x08008e59
 8008e24:	08008e59 	.word	0x08008e59
 8008e28:	08008e59 	.word	0x08008e59
 8008e2c:	08008e47 	.word	0x08008e47
 8008e30:	08008e59 	.word	0x08008e59
 8008e34:	08008e59 	.word	0x08008e59
 8008e38:	08008e59 	.word	0x08008e59
 8008e3c:	08008e53 	.word	0x08008e53
 8008e40:	2300      	movs	r3, #0
 8008e42:	77fb      	strb	r3, [r7, #31]
 8008e44:	e118      	b.n	8009078 <UART_SetConfig+0x348>
 8008e46:	2302      	movs	r3, #2
 8008e48:	77fb      	strb	r3, [r7, #31]
 8008e4a:	e115      	b.n	8009078 <UART_SetConfig+0x348>
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	77fb      	strb	r3, [r7, #31]
 8008e50:	e112      	b.n	8009078 <UART_SetConfig+0x348>
 8008e52:	2308      	movs	r3, #8
 8008e54:	77fb      	strb	r3, [r7, #31]
 8008e56:	e10f      	b.n	8009078 <UART_SetConfig+0x348>
 8008e58:	2310      	movs	r3, #16
 8008e5a:	77fb      	strb	r3, [r7, #31]
 8008e5c:	e10c      	b.n	8009078 <UART_SetConfig+0x348>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a68      	ldr	r2, [pc, #416]	@ (8009004 <UART_SetConfig+0x2d4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d120      	bne.n	8008eaa <UART_SetConfig+0x17a>
 8008e68:	4b64      	ldr	r3, [pc, #400]	@ (8008ffc <UART_SetConfig+0x2cc>)
 8008e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e6e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e72:	2b30      	cmp	r3, #48	@ 0x30
 8008e74:	d013      	beq.n	8008e9e <UART_SetConfig+0x16e>
 8008e76:	2b30      	cmp	r3, #48	@ 0x30
 8008e78:	d814      	bhi.n	8008ea4 <UART_SetConfig+0x174>
 8008e7a:	2b20      	cmp	r3, #32
 8008e7c:	d009      	beq.n	8008e92 <UART_SetConfig+0x162>
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d810      	bhi.n	8008ea4 <UART_SetConfig+0x174>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <UART_SetConfig+0x15c>
 8008e86:	2b10      	cmp	r3, #16
 8008e88:	d006      	beq.n	8008e98 <UART_SetConfig+0x168>
 8008e8a:	e00b      	b.n	8008ea4 <UART_SetConfig+0x174>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	77fb      	strb	r3, [r7, #31]
 8008e90:	e0f2      	b.n	8009078 <UART_SetConfig+0x348>
 8008e92:	2302      	movs	r3, #2
 8008e94:	77fb      	strb	r3, [r7, #31]
 8008e96:	e0ef      	b.n	8009078 <UART_SetConfig+0x348>
 8008e98:	2304      	movs	r3, #4
 8008e9a:	77fb      	strb	r3, [r7, #31]
 8008e9c:	e0ec      	b.n	8009078 <UART_SetConfig+0x348>
 8008e9e:	2308      	movs	r3, #8
 8008ea0:	77fb      	strb	r3, [r7, #31]
 8008ea2:	e0e9      	b.n	8009078 <UART_SetConfig+0x348>
 8008ea4:	2310      	movs	r3, #16
 8008ea6:	77fb      	strb	r3, [r7, #31]
 8008ea8:	e0e6      	b.n	8009078 <UART_SetConfig+0x348>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a56      	ldr	r2, [pc, #344]	@ (8009008 <UART_SetConfig+0x2d8>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d120      	bne.n	8008ef6 <UART_SetConfig+0x1c6>
 8008eb4:	4b51      	ldr	r3, [pc, #324]	@ (8008ffc <UART_SetConfig+0x2cc>)
 8008eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ebe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ec0:	d013      	beq.n	8008eea <UART_SetConfig+0x1ba>
 8008ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ec4:	d814      	bhi.n	8008ef0 <UART_SetConfig+0x1c0>
 8008ec6:	2b80      	cmp	r3, #128	@ 0x80
 8008ec8:	d009      	beq.n	8008ede <UART_SetConfig+0x1ae>
 8008eca:	2b80      	cmp	r3, #128	@ 0x80
 8008ecc:	d810      	bhi.n	8008ef0 <UART_SetConfig+0x1c0>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d002      	beq.n	8008ed8 <UART_SetConfig+0x1a8>
 8008ed2:	2b40      	cmp	r3, #64	@ 0x40
 8008ed4:	d006      	beq.n	8008ee4 <UART_SetConfig+0x1b4>
 8008ed6:	e00b      	b.n	8008ef0 <UART_SetConfig+0x1c0>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	e0cc      	b.n	8009078 <UART_SetConfig+0x348>
 8008ede:	2302      	movs	r3, #2
 8008ee0:	77fb      	strb	r3, [r7, #31]
 8008ee2:	e0c9      	b.n	8009078 <UART_SetConfig+0x348>
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	77fb      	strb	r3, [r7, #31]
 8008ee8:	e0c6      	b.n	8009078 <UART_SetConfig+0x348>
 8008eea:	2308      	movs	r3, #8
 8008eec:	77fb      	strb	r3, [r7, #31]
 8008eee:	e0c3      	b.n	8009078 <UART_SetConfig+0x348>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	77fb      	strb	r3, [r7, #31]
 8008ef4:	e0c0      	b.n	8009078 <UART_SetConfig+0x348>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a44      	ldr	r2, [pc, #272]	@ (800900c <UART_SetConfig+0x2dc>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d125      	bne.n	8008f4c <UART_SetConfig+0x21c>
 8008f00:	4b3e      	ldr	r3, [pc, #248]	@ (8008ffc <UART_SetConfig+0x2cc>)
 8008f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f0e:	d017      	beq.n	8008f40 <UART_SetConfig+0x210>
 8008f10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f14:	d817      	bhi.n	8008f46 <UART_SetConfig+0x216>
 8008f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f1a:	d00b      	beq.n	8008f34 <UART_SetConfig+0x204>
 8008f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f20:	d811      	bhi.n	8008f46 <UART_SetConfig+0x216>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <UART_SetConfig+0x1fe>
 8008f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f2a:	d006      	beq.n	8008f3a <UART_SetConfig+0x20a>
 8008f2c:	e00b      	b.n	8008f46 <UART_SetConfig+0x216>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	77fb      	strb	r3, [r7, #31]
 8008f32:	e0a1      	b.n	8009078 <UART_SetConfig+0x348>
 8008f34:	2302      	movs	r3, #2
 8008f36:	77fb      	strb	r3, [r7, #31]
 8008f38:	e09e      	b.n	8009078 <UART_SetConfig+0x348>
 8008f3a:	2304      	movs	r3, #4
 8008f3c:	77fb      	strb	r3, [r7, #31]
 8008f3e:	e09b      	b.n	8009078 <UART_SetConfig+0x348>
 8008f40:	2308      	movs	r3, #8
 8008f42:	77fb      	strb	r3, [r7, #31]
 8008f44:	e098      	b.n	8009078 <UART_SetConfig+0x348>
 8008f46:	2310      	movs	r3, #16
 8008f48:	77fb      	strb	r3, [r7, #31]
 8008f4a:	e095      	b.n	8009078 <UART_SetConfig+0x348>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a2f      	ldr	r2, [pc, #188]	@ (8009010 <UART_SetConfig+0x2e0>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d125      	bne.n	8008fa2 <UART_SetConfig+0x272>
 8008f56:	4b29      	ldr	r3, [pc, #164]	@ (8008ffc <UART_SetConfig+0x2cc>)
 8008f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f64:	d017      	beq.n	8008f96 <UART_SetConfig+0x266>
 8008f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f6a:	d817      	bhi.n	8008f9c <UART_SetConfig+0x26c>
 8008f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f70:	d00b      	beq.n	8008f8a <UART_SetConfig+0x25a>
 8008f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f76:	d811      	bhi.n	8008f9c <UART_SetConfig+0x26c>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <UART_SetConfig+0x254>
 8008f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f80:	d006      	beq.n	8008f90 <UART_SetConfig+0x260>
 8008f82:	e00b      	b.n	8008f9c <UART_SetConfig+0x26c>
 8008f84:	2301      	movs	r3, #1
 8008f86:	77fb      	strb	r3, [r7, #31]
 8008f88:	e076      	b.n	8009078 <UART_SetConfig+0x348>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	77fb      	strb	r3, [r7, #31]
 8008f8e:	e073      	b.n	8009078 <UART_SetConfig+0x348>
 8008f90:	2304      	movs	r3, #4
 8008f92:	77fb      	strb	r3, [r7, #31]
 8008f94:	e070      	b.n	8009078 <UART_SetConfig+0x348>
 8008f96:	2308      	movs	r3, #8
 8008f98:	77fb      	strb	r3, [r7, #31]
 8008f9a:	e06d      	b.n	8009078 <UART_SetConfig+0x348>
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	77fb      	strb	r3, [r7, #31]
 8008fa0:	e06a      	b.n	8009078 <UART_SetConfig+0x348>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8009014 <UART_SetConfig+0x2e4>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d138      	bne.n	800901e <UART_SetConfig+0x2ee>
 8008fac:	4b13      	ldr	r3, [pc, #76]	@ (8008ffc <UART_SetConfig+0x2cc>)
 8008fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fb2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008fb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fba:	d017      	beq.n	8008fec <UART_SetConfig+0x2bc>
 8008fbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fc0:	d82a      	bhi.n	8009018 <UART_SetConfig+0x2e8>
 8008fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fc6:	d00b      	beq.n	8008fe0 <UART_SetConfig+0x2b0>
 8008fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fcc:	d824      	bhi.n	8009018 <UART_SetConfig+0x2e8>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <UART_SetConfig+0x2aa>
 8008fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fd6:	d006      	beq.n	8008fe6 <UART_SetConfig+0x2b6>
 8008fd8:	e01e      	b.n	8009018 <UART_SetConfig+0x2e8>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	77fb      	strb	r3, [r7, #31]
 8008fde:	e04b      	b.n	8009078 <UART_SetConfig+0x348>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	77fb      	strb	r3, [r7, #31]
 8008fe4:	e048      	b.n	8009078 <UART_SetConfig+0x348>
 8008fe6:	2304      	movs	r3, #4
 8008fe8:	77fb      	strb	r3, [r7, #31]
 8008fea:	e045      	b.n	8009078 <UART_SetConfig+0x348>
 8008fec:	2308      	movs	r3, #8
 8008fee:	77fb      	strb	r3, [r7, #31]
 8008ff0:	e042      	b.n	8009078 <UART_SetConfig+0x348>
 8008ff2:	bf00      	nop
 8008ff4:	efff69f3 	.word	0xefff69f3
 8008ff8:	40011000 	.word	0x40011000
 8008ffc:	40023800 	.word	0x40023800
 8009000:	40004400 	.word	0x40004400
 8009004:	40004800 	.word	0x40004800
 8009008:	40004c00 	.word	0x40004c00
 800900c:	40005000 	.word	0x40005000
 8009010:	40011400 	.word	0x40011400
 8009014:	40007800 	.word	0x40007800
 8009018:	2310      	movs	r3, #16
 800901a:	77fb      	strb	r3, [r7, #31]
 800901c:	e02c      	b.n	8009078 <UART_SetConfig+0x348>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a72      	ldr	r2, [pc, #456]	@ (80091ec <UART_SetConfig+0x4bc>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d125      	bne.n	8009074 <UART_SetConfig+0x344>
 8009028:	4b71      	ldr	r3, [pc, #452]	@ (80091f0 <UART_SetConfig+0x4c0>)
 800902a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800902e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009032:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009036:	d017      	beq.n	8009068 <UART_SetConfig+0x338>
 8009038:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800903c:	d817      	bhi.n	800906e <UART_SetConfig+0x33e>
 800903e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009042:	d00b      	beq.n	800905c <UART_SetConfig+0x32c>
 8009044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009048:	d811      	bhi.n	800906e <UART_SetConfig+0x33e>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <UART_SetConfig+0x326>
 800904e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009052:	d006      	beq.n	8009062 <UART_SetConfig+0x332>
 8009054:	e00b      	b.n	800906e <UART_SetConfig+0x33e>
 8009056:	2300      	movs	r3, #0
 8009058:	77fb      	strb	r3, [r7, #31]
 800905a:	e00d      	b.n	8009078 <UART_SetConfig+0x348>
 800905c:	2302      	movs	r3, #2
 800905e:	77fb      	strb	r3, [r7, #31]
 8009060:	e00a      	b.n	8009078 <UART_SetConfig+0x348>
 8009062:	2304      	movs	r3, #4
 8009064:	77fb      	strb	r3, [r7, #31]
 8009066:	e007      	b.n	8009078 <UART_SetConfig+0x348>
 8009068:	2308      	movs	r3, #8
 800906a:	77fb      	strb	r3, [r7, #31]
 800906c:	e004      	b.n	8009078 <UART_SetConfig+0x348>
 800906e:	2310      	movs	r3, #16
 8009070:	77fb      	strb	r3, [r7, #31]
 8009072:	e001      	b.n	8009078 <UART_SetConfig+0x348>
 8009074:	2310      	movs	r3, #16
 8009076:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009080:	d15b      	bne.n	800913a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009082:	7ffb      	ldrb	r3, [r7, #31]
 8009084:	2b08      	cmp	r3, #8
 8009086:	d828      	bhi.n	80090da <UART_SetConfig+0x3aa>
 8009088:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <UART_SetConfig+0x360>)
 800908a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908e:	bf00      	nop
 8009090:	080090b5 	.word	0x080090b5
 8009094:	080090bd 	.word	0x080090bd
 8009098:	080090c5 	.word	0x080090c5
 800909c:	080090db 	.word	0x080090db
 80090a0:	080090cb 	.word	0x080090cb
 80090a4:	080090db 	.word	0x080090db
 80090a8:	080090db 	.word	0x080090db
 80090ac:	080090db 	.word	0x080090db
 80090b0:	080090d3 	.word	0x080090d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090b4:	f7ff f94c 	bl	8008350 <HAL_RCC_GetPCLK1Freq>
 80090b8:	61b8      	str	r0, [r7, #24]
        break;
 80090ba:	e013      	b.n	80090e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090bc:	f7ff f95c 	bl	8008378 <HAL_RCC_GetPCLK2Freq>
 80090c0:	61b8      	str	r0, [r7, #24]
        break;
 80090c2:	e00f      	b.n	80090e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090c4:	4b4b      	ldr	r3, [pc, #300]	@ (80091f4 <UART_SetConfig+0x4c4>)
 80090c6:	61bb      	str	r3, [r7, #24]
        break;
 80090c8:	e00c      	b.n	80090e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090ca:	f7ff f82f 	bl	800812c <HAL_RCC_GetSysClockFreq>
 80090ce:	61b8      	str	r0, [r7, #24]
        break;
 80090d0:	e008      	b.n	80090e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090d6:	61bb      	str	r3, [r7, #24]
        break;
 80090d8:	e004      	b.n	80090e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	77bb      	strb	r3, [r7, #30]
        break;
 80090e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d074      	beq.n	80091d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	005a      	lsls	r2, r3, #1
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	085b      	lsrs	r3, r3, #1
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b0f      	cmp	r3, #15
 8009104:	d916      	bls.n	8009134 <UART_SetConfig+0x404>
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800910c:	d212      	bcs.n	8009134 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	b29b      	uxth	r3, r3
 8009112:	f023 030f 	bic.w	r3, r3, #15
 8009116:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	085b      	lsrs	r3, r3, #1
 800911c:	b29b      	uxth	r3, r3
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	b29a      	uxth	r2, r3
 8009124:	89fb      	ldrh	r3, [r7, #14]
 8009126:	4313      	orrs	r3, r2
 8009128:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	89fa      	ldrh	r2, [r7, #14]
 8009130:	60da      	str	r2, [r3, #12]
 8009132:	e04f      	b.n	80091d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	77bb      	strb	r3, [r7, #30]
 8009138:	e04c      	b.n	80091d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800913a:	7ffb      	ldrb	r3, [r7, #31]
 800913c:	2b08      	cmp	r3, #8
 800913e:	d828      	bhi.n	8009192 <UART_SetConfig+0x462>
 8009140:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <UART_SetConfig+0x418>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	0800916d 	.word	0x0800916d
 800914c:	08009175 	.word	0x08009175
 8009150:	0800917d 	.word	0x0800917d
 8009154:	08009193 	.word	0x08009193
 8009158:	08009183 	.word	0x08009183
 800915c:	08009193 	.word	0x08009193
 8009160:	08009193 	.word	0x08009193
 8009164:	08009193 	.word	0x08009193
 8009168:	0800918b 	.word	0x0800918b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800916c:	f7ff f8f0 	bl	8008350 <HAL_RCC_GetPCLK1Freq>
 8009170:	61b8      	str	r0, [r7, #24]
        break;
 8009172:	e013      	b.n	800919c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009174:	f7ff f900 	bl	8008378 <HAL_RCC_GetPCLK2Freq>
 8009178:	61b8      	str	r0, [r7, #24]
        break;
 800917a:	e00f      	b.n	800919c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800917c:	4b1d      	ldr	r3, [pc, #116]	@ (80091f4 <UART_SetConfig+0x4c4>)
 800917e:	61bb      	str	r3, [r7, #24]
        break;
 8009180:	e00c      	b.n	800919c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009182:	f7fe ffd3 	bl	800812c <HAL_RCC_GetSysClockFreq>
 8009186:	61b8      	str	r0, [r7, #24]
        break;
 8009188:	e008      	b.n	800919c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800918a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800918e:	61bb      	str	r3, [r7, #24]
        break;
 8009190:	e004      	b.n	800919c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	77bb      	strb	r3, [r7, #30]
        break;
 800919a:	bf00      	nop
    }

    if (pclk != 0U)
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d018      	beq.n	80091d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	085a      	lsrs	r2, r3, #1
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	441a      	add	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b0f      	cmp	r3, #15
 80091ba:	d909      	bls.n	80091d0 <UART_SetConfig+0x4a0>
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091c2:	d205      	bcs.n	80091d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60da      	str	r2, [r3, #12]
 80091ce:	e001      	b.n	80091d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80091e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3720      	adds	r7, #32
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	40007c00 	.word	0x40007c00
 80091f0:	40023800 	.word	0x40023800
 80091f4:	00f42400 	.word	0x00f42400

080091f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009204:	f003 0308 	and.w	r3, r3, #8
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00a      	beq.n	8009244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00a      	beq.n	8009266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926a:	f003 0304 	and.w	r3, r3, #4
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928c:	f003 0310 	and.w	r3, r3, #16
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d01a      	beq.n	800930e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092f6:	d10a      	bne.n	800930e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	605a      	str	r2, [r3, #4]
  }
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08c      	sub	sp, #48	@ 0x30
 8009340:	af02      	add	r7, sp, #8
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800934c:	f7fc fb8e 	bl	8005a6c <HAL_GetTick>
 8009350:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0308 	and.w	r3, r3, #8
 800935c:	2b08      	cmp	r3, #8
 800935e:	d12e      	bne.n	80093be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009368:	2200      	movs	r2, #0
 800936a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f83b 	bl	80093ea <UART_WaitOnFlagUntilTimeout>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d021      	beq.n	80093be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	60fb      	str	r3, [r7, #12]
   return(result);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800938e:	623b      	str	r3, [r7, #32]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	61fb      	str	r3, [r7, #28]
 800939a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	69b9      	ldr	r1, [r7, #24]
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	617b      	str	r3, [r7, #20]
   return(result);
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e6      	bne.n	800937a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2220      	movs	r2, #32
 80093b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e011      	b.n	80093e2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2220      	movs	r2, #32
 80093c2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3728      	adds	r7, #40	@ 0x28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	603b      	str	r3, [r7, #0]
 80093f6:	4613      	mov	r3, r2
 80093f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093fa:	e04f      	b.n	800949c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009402:	d04b      	beq.n	800949c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009404:	f7fc fb32 	bl	8005a6c <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	429a      	cmp	r2, r3
 8009412:	d302      	bcc.n	800941a <UART_WaitOnFlagUntilTimeout+0x30>
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e04e      	b.n	80094bc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b00      	cmp	r3, #0
 800942a:	d037      	beq.n	800949c <UART_WaitOnFlagUntilTimeout+0xb2>
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b80      	cmp	r3, #128	@ 0x80
 8009430:	d034      	beq.n	800949c <UART_WaitOnFlagUntilTimeout+0xb2>
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2b40      	cmp	r3, #64	@ 0x40
 8009436:	d031      	beq.n	800949c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f003 0308 	and.w	r3, r3, #8
 8009442:	2b08      	cmp	r3, #8
 8009444:	d110      	bne.n	8009468 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2208      	movs	r2, #8
 800944c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f838 	bl	80094c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2208      	movs	r2, #8
 8009458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e029      	b.n	80094bc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009472:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009476:	d111      	bne.n	800949c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009480:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 f81e 	bl	80094c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2220      	movs	r2, #32
 800948c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e00f      	b.n	80094bc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69da      	ldr	r2, [r3, #28]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	4013      	ands	r3, r2
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	bf0c      	ite	eq
 80094ac:	2301      	moveq	r3, #1
 80094ae:	2300      	movne	r3, #0
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	461a      	mov	r2, r3
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d0a0      	beq.n	80093fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b095      	sub	sp, #84	@ 0x54
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80094ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e6      	bne.n	80094cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3308      	adds	r3, #8
 8009504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	61fb      	str	r3, [r7, #28]
   return(result);
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	f023 0301 	bic.w	r3, r3, #1
 8009514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3308      	adds	r3, #8
 800951c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800951e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009520:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e5      	bne.n	80094fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009536:	2b01      	cmp	r3, #1
 8009538:	d118      	bne.n	800956c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	60bb      	str	r3, [r7, #8]
   return(result);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f023 0310 	bic.w	r3, r3, #16
 800954e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009558:	61bb      	str	r3, [r7, #24]
 800955a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6979      	ldr	r1, [r7, #20]
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	613b      	str	r3, [r7, #16]
   return(result);
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e6      	bne.n	800953a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009580:	bf00      	nop
 8009582:	3754      	adds	r7, #84	@ 0x54
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800958c:	b084      	sub	sp, #16
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	f107 001c 	add.w	r0, r7, #28
 800959a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800959e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d121      	bne.n	80095ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	4b21      	ldr	r3, [pc, #132]	@ (800963c <USB_CoreInit+0xb0>)
 80095b8:	4013      	ands	r3, r2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d105      	bne.n	80095de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fa92 	bl	8009b08 <USB_CoreReset>
 80095e4:	4603      	mov	r3, r0
 80095e6:	73fb      	strb	r3, [r7, #15]
 80095e8:	e010      	b.n	800960c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fa86 	bl	8009b08 <USB_CoreReset>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009604:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800960c:	7fbb      	ldrb	r3, [r7, #30]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d10b      	bne.n	800962a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f043 0206 	orr.w	r2, r3, #6
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f043 0220 	orr.w	r2, r3, #32
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800962a:	7bfb      	ldrb	r3, [r7, #15]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009636:	b004      	add	sp, #16
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	ffbdffbf 	.word	0xffbdffbf

08009640 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f023 0201 	bic.w	r2, r3, #1
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d115      	bne.n	80096b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009690:	200a      	movs	r0, #10
 8009692:	f7fc f9f7 	bl	8005a84 <HAL_Delay>
      ms += 10U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	330a      	adds	r3, #10
 800969a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fa25 	bl	8009aec <USB_GetMode>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d01e      	beq.n	80096e6 <USB_SetCurrentMode+0x84>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80096ac:	d9f0      	bls.n	8009690 <USB_SetCurrentMode+0x2e>
 80096ae:	e01a      	b.n	80096e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d115      	bne.n	80096e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096c2:	200a      	movs	r0, #10
 80096c4:	f7fc f9de 	bl	8005a84 <HAL_Delay>
      ms += 10U;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	330a      	adds	r3, #10
 80096cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa0c 	bl	8009aec <USB_GetMode>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d005      	beq.n	80096e6 <USB_SetCurrentMode+0x84>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80096de:	d9f0      	bls.n	80096c2 <USB_SetCurrentMode+0x60>
 80096e0:	e001      	b.n	80096e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e005      	b.n	80096f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80096ea:	d101      	bne.n	80096f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096fc:	b084      	sub	sp, #16
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800970a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009716:	2300      	movs	r3, #0
 8009718:	613b      	str	r3, [r7, #16]
 800971a:	e009      	b.n	8009730 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3340      	adds	r3, #64	@ 0x40
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	2200      	movs	r2, #0
 8009728:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	3301      	adds	r3, #1
 800972e:	613b      	str	r3, [r7, #16]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	2b0e      	cmp	r3, #14
 8009734:	d9f2      	bls.n	800971c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009736:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800973a:	2b00      	cmp	r3, #0
 800973c:	d11c      	bne.n	8009778 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800974c:	f043 0302 	orr.w	r3, r3, #2
 8009750:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009756:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	e005      	b.n	8009784 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800978a:	461a      	mov	r2, r3
 800978c:	2300      	movs	r3, #0
 800978e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009790:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009794:	2b01      	cmp	r3, #1
 8009796:	d10d      	bne.n	80097b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097a0:	2100      	movs	r1, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f968 	bl	8009a78 <USB_SetDevSpeed>
 80097a8:	e008      	b.n	80097bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80097aa:	2101      	movs	r1, #1
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f963 	bl	8009a78 <USB_SetDevSpeed>
 80097b2:	e003      	b.n	80097bc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097b4:	2103      	movs	r1, #3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f95e 	bl	8009a78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097bc:	2110      	movs	r1, #16
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f8fa 	bl	80099b8 <USB_FlushTxFifo>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f924 	bl	8009a1c <USB_FlushRxFifo>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097e4:	461a      	mov	r2, r3
 80097e6:	2300      	movs	r3, #0
 80097e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f0:	461a      	mov	r2, r3
 80097f2:	2300      	movs	r3, #0
 80097f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fc:	461a      	mov	r2, r3
 80097fe:	2300      	movs	r3, #0
 8009800:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009802:	2300      	movs	r3, #0
 8009804:	613b      	str	r3, [r7, #16]
 8009806:	e043      	b.n	8009890 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800981a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800981e:	d118      	bne.n	8009852 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10a      	bne.n	800983c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009832:	461a      	mov	r2, r3
 8009834:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	e013      	b.n	8009864 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009848:	461a      	mov	r2, r3
 800984a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	e008      	b.n	8009864 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800985e:	461a      	mov	r2, r3
 8009860:	2300      	movs	r3, #0
 8009862:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009870:	461a      	mov	r2, r3
 8009872:	2300      	movs	r3, #0
 8009874:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009882:	461a      	mov	r2, r3
 8009884:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009888:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	3301      	adds	r3, #1
 800988e:	613b      	str	r3, [r7, #16]
 8009890:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009894:	461a      	mov	r2, r3
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	4293      	cmp	r3, r2
 800989a:	d3b5      	bcc.n	8009808 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800989c:	2300      	movs	r3, #0
 800989e:	613b      	str	r3, [r7, #16]
 80098a0:	e043      	b.n	800992a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098b8:	d118      	bne.n	80098ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10a      	bne.n	80098d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098cc:	461a      	mov	r2, r3
 80098ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	e013      	b.n	80098fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	015a      	lsls	r2, r3, #5
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e2:	461a      	mov	r2, r3
 80098e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	e008      	b.n	80098fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f8:	461a      	mov	r2, r3
 80098fa:	2300      	movs	r3, #0
 80098fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800990a:	461a      	mov	r2, r3
 800990c:	2300      	movs	r3, #0
 800990e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800991c:	461a      	mov	r2, r3
 800991e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009922:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	3301      	adds	r3, #1
 8009928:	613b      	str	r3, [r7, #16]
 800992a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800992e:	461a      	mov	r2, r3
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	4293      	cmp	r3, r2
 8009934:	d3b5      	bcc.n	80098a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009948:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009956:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009958:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	f043 0210 	orr.w	r2, r3, #16
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	699a      	ldr	r2, [r3, #24]
 8009970:	4b0f      	ldr	r3, [pc, #60]	@ (80099b0 <USB_DevInit+0x2b4>)
 8009972:	4313      	orrs	r3, r2
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009978:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	f043 0208 	orr.w	r2, r3, #8
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800998c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009990:	2b01      	cmp	r3, #1
 8009992:	d105      	bne.n	80099a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699a      	ldr	r2, [r3, #24]
 8009998:	4b06      	ldr	r3, [pc, #24]	@ (80099b4 <USB_DevInit+0x2b8>)
 800999a:	4313      	orrs	r3, r2
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099ac:	b004      	add	sp, #16
 80099ae:	4770      	bx	lr
 80099b0:	803c3800 	.word	0x803c3800
 80099b4:	40000004 	.word	0x40000004

080099b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3301      	adds	r3, #1
 80099ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099d2:	d901      	bls.n	80099d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e01b      	b.n	8009a10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	daf2      	bge.n	80099c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	019b      	lsls	r3, r3, #6
 80099e8:	f043 0220 	orr.w	r2, r3, #32
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3301      	adds	r3, #1
 80099f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099fc:	d901      	bls.n	8009a02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e006      	b.n	8009a10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	d0f0      	beq.n	80099f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a34:	d901      	bls.n	8009a3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e018      	b.n	8009a6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	daf2      	bge.n	8009a28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2210      	movs	r2, #16
 8009a4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a58:	d901      	bls.n	8009a5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e006      	b.n	8009a6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	f003 0310 	and.w	r3, r3, #16
 8009a66:	2b10      	cmp	r3, #16
 8009a68:	d0f0      	beq.n	8009a4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	68f9      	ldr	r1, [r7, #12]
 8009a94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009ac4:	f023 0303 	bic.w	r3, r3, #3
 8009ac8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ad8:	f043 0302 	orr.w	r3, r3, #2
 8009adc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	f003 0301 	and.w	r3, r3, #1
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3301      	adds	r3, #1
 8009b18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b20:	d901      	bls.n	8009b26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e022      	b.n	8009b6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	daf2      	bge.n	8009b14 <USB_CoreReset+0xc>

  count = 10U;
 8009b2e:	230a      	movs	r3, #10
 8009b30:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009b32:	e002      	b.n	8009b3a <USB_CoreReset+0x32>
  {
    count--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1f9      	bne.n	8009b34 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	f043 0201 	orr.w	r2, r3, #1
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b58:	d901      	bls.n	8009b5e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e006      	b.n	8009b6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d0f0      	beq.n	8009b4c <USB_CoreReset+0x44>

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <__cvt>:
 8009b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b7c:	ec57 6b10 	vmov	r6, r7, d0
 8009b80:	2f00      	cmp	r7, #0
 8009b82:	460c      	mov	r4, r1
 8009b84:	4619      	mov	r1, r3
 8009b86:	463b      	mov	r3, r7
 8009b88:	bfbb      	ittet	lt
 8009b8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009b8e:	461f      	movlt	r7, r3
 8009b90:	2300      	movge	r3, #0
 8009b92:	232d      	movlt	r3, #45	@ 0x2d
 8009b94:	700b      	strb	r3, [r1, #0]
 8009b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009b9c:	4691      	mov	r9, r2
 8009b9e:	f023 0820 	bic.w	r8, r3, #32
 8009ba2:	bfbc      	itt	lt
 8009ba4:	4632      	movlt	r2, r6
 8009ba6:	4616      	movlt	r6, r2
 8009ba8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bac:	d005      	beq.n	8009bba <__cvt+0x42>
 8009bae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009bb2:	d100      	bne.n	8009bb6 <__cvt+0x3e>
 8009bb4:	3401      	adds	r4, #1
 8009bb6:	2102      	movs	r1, #2
 8009bb8:	e000      	b.n	8009bbc <__cvt+0x44>
 8009bba:	2103      	movs	r1, #3
 8009bbc:	ab03      	add	r3, sp, #12
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	ab02      	add	r3, sp, #8
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	ec47 6b10 	vmov	d0, r6, r7
 8009bc8:	4653      	mov	r3, sl
 8009bca:	4622      	mov	r2, r4
 8009bcc:	f001 f8f0 	bl	800adb0 <_dtoa_r>
 8009bd0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	d119      	bne.n	8009c0c <__cvt+0x94>
 8009bd8:	f019 0f01 	tst.w	r9, #1
 8009bdc:	d00e      	beq.n	8009bfc <__cvt+0x84>
 8009bde:	eb00 0904 	add.w	r9, r0, r4
 8009be2:	2200      	movs	r2, #0
 8009be4:	2300      	movs	r3, #0
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	f7f6 ff8d 	bl	8000b08 <__aeabi_dcmpeq>
 8009bee:	b108      	cbz	r0, 8009bf4 <__cvt+0x7c>
 8009bf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bf4:	2230      	movs	r2, #48	@ 0x30
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	454b      	cmp	r3, r9
 8009bfa:	d31e      	bcc.n	8009c3a <__cvt+0xc2>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c00:	1b5b      	subs	r3, r3, r5
 8009c02:	4628      	mov	r0, r5
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	b004      	add	sp, #16
 8009c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c10:	eb00 0904 	add.w	r9, r0, r4
 8009c14:	d1e5      	bne.n	8009be2 <__cvt+0x6a>
 8009c16:	7803      	ldrb	r3, [r0, #0]
 8009c18:	2b30      	cmp	r3, #48	@ 0x30
 8009c1a:	d10a      	bne.n	8009c32 <__cvt+0xba>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2300      	movs	r3, #0
 8009c20:	4630      	mov	r0, r6
 8009c22:	4639      	mov	r1, r7
 8009c24:	f7f6 ff70 	bl	8000b08 <__aeabi_dcmpeq>
 8009c28:	b918      	cbnz	r0, 8009c32 <__cvt+0xba>
 8009c2a:	f1c4 0401 	rsb	r4, r4, #1
 8009c2e:	f8ca 4000 	str.w	r4, [sl]
 8009c32:	f8da 3000 	ldr.w	r3, [sl]
 8009c36:	4499      	add	r9, r3
 8009c38:	e7d3      	b.n	8009be2 <__cvt+0x6a>
 8009c3a:	1c59      	adds	r1, r3, #1
 8009c3c:	9103      	str	r1, [sp, #12]
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	e7d9      	b.n	8009bf6 <__cvt+0x7e>

08009c42 <__exponent>:
 8009c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c44:	2900      	cmp	r1, #0
 8009c46:	bfba      	itte	lt
 8009c48:	4249      	neglt	r1, r1
 8009c4a:	232d      	movlt	r3, #45	@ 0x2d
 8009c4c:	232b      	movge	r3, #43	@ 0x2b
 8009c4e:	2909      	cmp	r1, #9
 8009c50:	7002      	strb	r2, [r0, #0]
 8009c52:	7043      	strb	r3, [r0, #1]
 8009c54:	dd29      	ble.n	8009caa <__exponent+0x68>
 8009c56:	f10d 0307 	add.w	r3, sp, #7
 8009c5a:	461d      	mov	r5, r3
 8009c5c:	270a      	movs	r7, #10
 8009c5e:	461a      	mov	r2, r3
 8009c60:	fbb1 f6f7 	udiv	r6, r1, r7
 8009c64:	fb07 1416 	mls	r4, r7, r6, r1
 8009c68:	3430      	adds	r4, #48	@ 0x30
 8009c6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c6e:	460c      	mov	r4, r1
 8009c70:	2c63      	cmp	r4, #99	@ 0x63
 8009c72:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c76:	4631      	mov	r1, r6
 8009c78:	dcf1      	bgt.n	8009c5e <__exponent+0x1c>
 8009c7a:	3130      	adds	r1, #48	@ 0x30
 8009c7c:	1e94      	subs	r4, r2, #2
 8009c7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c82:	1c41      	adds	r1, r0, #1
 8009c84:	4623      	mov	r3, r4
 8009c86:	42ab      	cmp	r3, r5
 8009c88:	d30a      	bcc.n	8009ca0 <__exponent+0x5e>
 8009c8a:	f10d 0309 	add.w	r3, sp, #9
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	42ac      	cmp	r4, r5
 8009c92:	bf88      	it	hi
 8009c94:	2300      	movhi	r3, #0
 8009c96:	3302      	adds	r3, #2
 8009c98:	4403      	add	r3, r0
 8009c9a:	1a18      	subs	r0, r3, r0
 8009c9c:	b003      	add	sp, #12
 8009c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ca4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ca8:	e7ed      	b.n	8009c86 <__exponent+0x44>
 8009caa:	2330      	movs	r3, #48	@ 0x30
 8009cac:	3130      	adds	r1, #48	@ 0x30
 8009cae:	7083      	strb	r3, [r0, #2]
 8009cb0:	70c1      	strb	r1, [r0, #3]
 8009cb2:	1d03      	adds	r3, r0, #4
 8009cb4:	e7f1      	b.n	8009c9a <__exponent+0x58>
	...

08009cb8 <_printf_float>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	b08d      	sub	sp, #52	@ 0x34
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	461f      	mov	r7, r3
 8009cc8:	4605      	mov	r5, r0
 8009cca:	f000 ff5b 	bl	800ab84 <_localeconv_r>
 8009cce:	6803      	ldr	r3, [r0, #0]
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7f6 faec 	bl	80002b0 <strlen>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ce0:	9005      	str	r0, [sp, #20]
 8009ce2:	3307      	adds	r3, #7
 8009ce4:	f023 0307 	bic.w	r3, r3, #7
 8009ce8:	f103 0208 	add.w	r2, r3, #8
 8009cec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009cf0:	f8d4 b000 	ldr.w	fp, [r4]
 8009cf4:	f8c8 2000 	str.w	r2, [r8]
 8009cf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009d00:	9307      	str	r3, [sp, #28]
 8009d02:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d0e:	4b9c      	ldr	r3, [pc, #624]	@ (8009f80 <_printf_float+0x2c8>)
 8009d10:	f04f 32ff 	mov.w	r2, #4294967295
 8009d14:	f7f6 ff2a 	bl	8000b6c <__aeabi_dcmpun>
 8009d18:	bb70      	cbnz	r0, 8009d78 <_printf_float+0xc0>
 8009d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d1e:	4b98      	ldr	r3, [pc, #608]	@ (8009f80 <_printf_float+0x2c8>)
 8009d20:	f04f 32ff 	mov.w	r2, #4294967295
 8009d24:	f7f6 ff04 	bl	8000b30 <__aeabi_dcmple>
 8009d28:	bb30      	cbnz	r0, 8009d78 <_printf_float+0xc0>
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4649      	mov	r1, r9
 8009d32:	f7f6 fef3 	bl	8000b1c <__aeabi_dcmplt>
 8009d36:	b110      	cbz	r0, 8009d3e <_printf_float+0x86>
 8009d38:	232d      	movs	r3, #45	@ 0x2d
 8009d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d3e:	4a91      	ldr	r2, [pc, #580]	@ (8009f84 <_printf_float+0x2cc>)
 8009d40:	4b91      	ldr	r3, [pc, #580]	@ (8009f88 <_printf_float+0x2d0>)
 8009d42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d46:	bf8c      	ite	hi
 8009d48:	4690      	movhi	r8, r2
 8009d4a:	4698      	movls	r8, r3
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	6123      	str	r3, [r4, #16]
 8009d50:	f02b 0304 	bic.w	r3, fp, #4
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	f04f 0900 	mov.w	r9, #0
 8009d5a:	9700      	str	r7, [sp, #0]
 8009d5c:	4633      	mov	r3, r6
 8009d5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009d60:	4621      	mov	r1, r4
 8009d62:	4628      	mov	r0, r5
 8009d64:	f000 f9d2 	bl	800a10c <_printf_common>
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f040 808d 	bne.w	8009e88 <_printf_float+0x1d0>
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	b00d      	add	sp, #52	@ 0x34
 8009d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d78:	4642      	mov	r2, r8
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	4649      	mov	r1, r9
 8009d80:	f7f6 fef4 	bl	8000b6c <__aeabi_dcmpun>
 8009d84:	b140      	cbz	r0, 8009d98 <_printf_float+0xe0>
 8009d86:	464b      	mov	r3, r9
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	bfbc      	itt	lt
 8009d8c:	232d      	movlt	r3, #45	@ 0x2d
 8009d8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d92:	4a7e      	ldr	r2, [pc, #504]	@ (8009f8c <_printf_float+0x2d4>)
 8009d94:	4b7e      	ldr	r3, [pc, #504]	@ (8009f90 <_printf_float+0x2d8>)
 8009d96:	e7d4      	b.n	8009d42 <_printf_float+0x8a>
 8009d98:	6863      	ldr	r3, [r4, #4]
 8009d9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009d9e:	9206      	str	r2, [sp, #24]
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	d13b      	bne.n	8009e1c <_printf_float+0x164>
 8009da4:	2306      	movs	r3, #6
 8009da6:	6063      	str	r3, [r4, #4]
 8009da8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009dac:	2300      	movs	r3, #0
 8009dae:	6022      	str	r2, [r4, #0]
 8009db0:	9303      	str	r3, [sp, #12]
 8009db2:	ab0a      	add	r3, sp, #40	@ 0x28
 8009db4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009db8:	ab09      	add	r3, sp, #36	@ 0x24
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	6861      	ldr	r1, [r4, #4]
 8009dbe:	ec49 8b10 	vmov	d0, r8, r9
 8009dc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7ff fed6 	bl	8009b78 <__cvt>
 8009dcc:	9b06      	ldr	r3, [sp, #24]
 8009dce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dd0:	2b47      	cmp	r3, #71	@ 0x47
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	d129      	bne.n	8009e2a <_printf_float+0x172>
 8009dd6:	1cc8      	adds	r0, r1, #3
 8009dd8:	db02      	blt.n	8009de0 <_printf_float+0x128>
 8009dda:	6863      	ldr	r3, [r4, #4]
 8009ddc:	4299      	cmp	r1, r3
 8009dde:	dd41      	ble.n	8009e64 <_printf_float+0x1ac>
 8009de0:	f1aa 0a02 	sub.w	sl, sl, #2
 8009de4:	fa5f fa8a 	uxtb.w	sl, sl
 8009de8:	3901      	subs	r1, #1
 8009dea:	4652      	mov	r2, sl
 8009dec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009df0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009df2:	f7ff ff26 	bl	8009c42 <__exponent>
 8009df6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009df8:	1813      	adds	r3, r2, r0
 8009dfa:	2a01      	cmp	r2, #1
 8009dfc:	4681      	mov	r9, r0
 8009dfe:	6123      	str	r3, [r4, #16]
 8009e00:	dc02      	bgt.n	8009e08 <_printf_float+0x150>
 8009e02:	6822      	ldr	r2, [r4, #0]
 8009e04:	07d2      	lsls	r2, r2, #31
 8009e06:	d501      	bpl.n	8009e0c <_printf_float+0x154>
 8009e08:	3301      	adds	r3, #1
 8009e0a:	6123      	str	r3, [r4, #16]
 8009e0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0a2      	beq.n	8009d5a <_printf_float+0xa2>
 8009e14:	232d      	movs	r3, #45	@ 0x2d
 8009e16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e1a:	e79e      	b.n	8009d5a <_printf_float+0xa2>
 8009e1c:	9a06      	ldr	r2, [sp, #24]
 8009e1e:	2a47      	cmp	r2, #71	@ 0x47
 8009e20:	d1c2      	bne.n	8009da8 <_printf_float+0xf0>
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1c0      	bne.n	8009da8 <_printf_float+0xf0>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e7bd      	b.n	8009da6 <_printf_float+0xee>
 8009e2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e2e:	d9db      	bls.n	8009de8 <_printf_float+0x130>
 8009e30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e34:	d118      	bne.n	8009e68 <_printf_float+0x1b0>
 8009e36:	2900      	cmp	r1, #0
 8009e38:	6863      	ldr	r3, [r4, #4]
 8009e3a:	dd0b      	ble.n	8009e54 <_printf_float+0x19c>
 8009e3c:	6121      	str	r1, [r4, #16]
 8009e3e:	b913      	cbnz	r3, 8009e46 <_printf_float+0x18e>
 8009e40:	6822      	ldr	r2, [r4, #0]
 8009e42:	07d0      	lsls	r0, r2, #31
 8009e44:	d502      	bpl.n	8009e4c <_printf_float+0x194>
 8009e46:	3301      	adds	r3, #1
 8009e48:	440b      	add	r3, r1
 8009e4a:	6123      	str	r3, [r4, #16]
 8009e4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e4e:	f04f 0900 	mov.w	r9, #0
 8009e52:	e7db      	b.n	8009e0c <_printf_float+0x154>
 8009e54:	b913      	cbnz	r3, 8009e5c <_printf_float+0x1a4>
 8009e56:	6822      	ldr	r2, [r4, #0]
 8009e58:	07d2      	lsls	r2, r2, #31
 8009e5a:	d501      	bpl.n	8009e60 <_printf_float+0x1a8>
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	e7f4      	b.n	8009e4a <_printf_float+0x192>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e7f2      	b.n	8009e4a <_printf_float+0x192>
 8009e64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009e68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e6a:	4299      	cmp	r1, r3
 8009e6c:	db05      	blt.n	8009e7a <_printf_float+0x1c2>
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	6121      	str	r1, [r4, #16]
 8009e72:	07d8      	lsls	r0, r3, #31
 8009e74:	d5ea      	bpl.n	8009e4c <_printf_float+0x194>
 8009e76:	1c4b      	adds	r3, r1, #1
 8009e78:	e7e7      	b.n	8009e4a <_printf_float+0x192>
 8009e7a:	2900      	cmp	r1, #0
 8009e7c:	bfd4      	ite	le
 8009e7e:	f1c1 0202 	rsble	r2, r1, #2
 8009e82:	2201      	movgt	r2, #1
 8009e84:	4413      	add	r3, r2
 8009e86:	e7e0      	b.n	8009e4a <_printf_float+0x192>
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	055a      	lsls	r2, r3, #21
 8009e8c:	d407      	bmi.n	8009e9e <_printf_float+0x1e6>
 8009e8e:	6923      	ldr	r3, [r4, #16]
 8009e90:	4642      	mov	r2, r8
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d12b      	bne.n	8009ef4 <_printf_float+0x23c>
 8009e9c:	e767      	b.n	8009d6e <_printf_float+0xb6>
 8009e9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ea2:	f240 80dd 	bls.w	800a060 <_printf_float+0x3a8>
 8009ea6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2300      	movs	r3, #0
 8009eae:	f7f6 fe2b 	bl	8000b08 <__aeabi_dcmpeq>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d033      	beq.n	8009f1e <_printf_float+0x266>
 8009eb6:	4a37      	ldr	r2, [pc, #220]	@ (8009f94 <_printf_float+0x2dc>)
 8009eb8:	2301      	movs	r3, #1
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b8      	blx	r7
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	f43f af54 	beq.w	8009d6e <_printf_float+0xb6>
 8009ec6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009eca:	4543      	cmp	r3, r8
 8009ecc:	db02      	blt.n	8009ed4 <_printf_float+0x21c>
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	07d8      	lsls	r0, r3, #31
 8009ed2:	d50f      	bpl.n	8009ef4 <_printf_float+0x23c>
 8009ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ed8:	4631      	mov	r1, r6
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b8      	blx	r7
 8009ede:	3001      	adds	r0, #1
 8009ee0:	f43f af45 	beq.w	8009d6e <_printf_float+0xb6>
 8009ee4:	f04f 0900 	mov.w	r9, #0
 8009ee8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eec:	f104 0a1a 	add.w	sl, r4, #26
 8009ef0:	45c8      	cmp	r8, r9
 8009ef2:	dc09      	bgt.n	8009f08 <_printf_float+0x250>
 8009ef4:	6823      	ldr	r3, [r4, #0]
 8009ef6:	079b      	lsls	r3, r3, #30
 8009ef8:	f100 8103 	bmi.w	800a102 <_printf_float+0x44a>
 8009efc:	68e0      	ldr	r0, [r4, #12]
 8009efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f00:	4298      	cmp	r0, r3
 8009f02:	bfb8      	it	lt
 8009f04:	4618      	movlt	r0, r3
 8009f06:	e734      	b.n	8009d72 <_printf_float+0xba>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4652      	mov	r2, sl
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4628      	mov	r0, r5
 8009f10:	47b8      	blx	r7
 8009f12:	3001      	adds	r0, #1
 8009f14:	f43f af2b 	beq.w	8009d6e <_printf_float+0xb6>
 8009f18:	f109 0901 	add.w	r9, r9, #1
 8009f1c:	e7e8      	b.n	8009ef0 <_printf_float+0x238>
 8009f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	dc39      	bgt.n	8009f98 <_printf_float+0x2e0>
 8009f24:	4a1b      	ldr	r2, [pc, #108]	@ (8009f94 <_printf_float+0x2dc>)
 8009f26:	2301      	movs	r3, #1
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	f43f af1d 	beq.w	8009d6e <_printf_float+0xb6>
 8009f34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f38:	ea59 0303 	orrs.w	r3, r9, r3
 8009f3c:	d102      	bne.n	8009f44 <_printf_float+0x28c>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	07d9      	lsls	r1, r3, #31
 8009f42:	d5d7      	bpl.n	8009ef4 <_printf_float+0x23c>
 8009f44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f af0d 	beq.w	8009d6e <_printf_float+0xb6>
 8009f54:	f04f 0a00 	mov.w	sl, #0
 8009f58:	f104 0b1a 	add.w	fp, r4, #26
 8009f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f5e:	425b      	negs	r3, r3
 8009f60:	4553      	cmp	r3, sl
 8009f62:	dc01      	bgt.n	8009f68 <_printf_float+0x2b0>
 8009f64:	464b      	mov	r3, r9
 8009f66:	e793      	b.n	8009e90 <_printf_float+0x1d8>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	465a      	mov	r2, fp
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	4628      	mov	r0, r5
 8009f70:	47b8      	blx	r7
 8009f72:	3001      	adds	r0, #1
 8009f74:	f43f aefb 	beq.w	8009d6e <_printf_float+0xb6>
 8009f78:	f10a 0a01 	add.w	sl, sl, #1
 8009f7c:	e7ee      	b.n	8009f5c <_printf_float+0x2a4>
 8009f7e:	bf00      	nop
 8009f80:	7fefffff 	.word	0x7fefffff
 8009f84:	0800fac8 	.word	0x0800fac8
 8009f88:	0800fac4 	.word	0x0800fac4
 8009f8c:	0800fad0 	.word	0x0800fad0
 8009f90:	0800facc 	.word	0x0800facc
 8009f94:	0800fad4 	.word	0x0800fad4
 8009f98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f9e:	4553      	cmp	r3, sl
 8009fa0:	bfa8      	it	ge
 8009fa2:	4653      	movge	r3, sl
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	4699      	mov	r9, r3
 8009fa8:	dc36      	bgt.n	800a018 <_printf_float+0x360>
 8009faa:	f04f 0b00 	mov.w	fp, #0
 8009fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fb2:	f104 021a 	add.w	r2, r4, #26
 8009fb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fb8:	9306      	str	r3, [sp, #24]
 8009fba:	eba3 0309 	sub.w	r3, r3, r9
 8009fbe:	455b      	cmp	r3, fp
 8009fc0:	dc31      	bgt.n	800a026 <_printf_float+0x36e>
 8009fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc4:	459a      	cmp	sl, r3
 8009fc6:	dc3a      	bgt.n	800a03e <_printf_float+0x386>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	07da      	lsls	r2, r3, #31
 8009fcc:	d437      	bmi.n	800a03e <_printf_float+0x386>
 8009fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd0:	ebaa 0903 	sub.w	r9, sl, r3
 8009fd4:	9b06      	ldr	r3, [sp, #24]
 8009fd6:	ebaa 0303 	sub.w	r3, sl, r3
 8009fda:	4599      	cmp	r9, r3
 8009fdc:	bfa8      	it	ge
 8009fde:	4699      	movge	r9, r3
 8009fe0:	f1b9 0f00 	cmp.w	r9, #0
 8009fe4:	dc33      	bgt.n	800a04e <_printf_float+0x396>
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fee:	f104 0b1a 	add.w	fp, r4, #26
 8009ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ff8:	eba3 0309 	sub.w	r3, r3, r9
 8009ffc:	4543      	cmp	r3, r8
 8009ffe:	f77f af79 	ble.w	8009ef4 <_printf_float+0x23c>
 800a002:	2301      	movs	r3, #1
 800a004:	465a      	mov	r2, fp
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	47b8      	blx	r7
 800a00c:	3001      	adds	r0, #1
 800a00e:	f43f aeae 	beq.w	8009d6e <_printf_float+0xb6>
 800a012:	f108 0801 	add.w	r8, r8, #1
 800a016:	e7ec      	b.n	8009ff2 <_printf_float+0x33a>
 800a018:	4642      	mov	r2, r8
 800a01a:	4631      	mov	r1, r6
 800a01c:	4628      	mov	r0, r5
 800a01e:	47b8      	blx	r7
 800a020:	3001      	adds	r0, #1
 800a022:	d1c2      	bne.n	8009faa <_printf_float+0x2f2>
 800a024:	e6a3      	b.n	8009d6e <_printf_float+0xb6>
 800a026:	2301      	movs	r3, #1
 800a028:	4631      	mov	r1, r6
 800a02a:	4628      	mov	r0, r5
 800a02c:	9206      	str	r2, [sp, #24]
 800a02e:	47b8      	blx	r7
 800a030:	3001      	adds	r0, #1
 800a032:	f43f ae9c 	beq.w	8009d6e <_printf_float+0xb6>
 800a036:	9a06      	ldr	r2, [sp, #24]
 800a038:	f10b 0b01 	add.w	fp, fp, #1
 800a03c:	e7bb      	b.n	8009fb6 <_printf_float+0x2fe>
 800a03e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a042:	4631      	mov	r1, r6
 800a044:	4628      	mov	r0, r5
 800a046:	47b8      	blx	r7
 800a048:	3001      	adds	r0, #1
 800a04a:	d1c0      	bne.n	8009fce <_printf_float+0x316>
 800a04c:	e68f      	b.n	8009d6e <_printf_float+0xb6>
 800a04e:	9a06      	ldr	r2, [sp, #24]
 800a050:	464b      	mov	r3, r9
 800a052:	4442      	add	r2, r8
 800a054:	4631      	mov	r1, r6
 800a056:	4628      	mov	r0, r5
 800a058:	47b8      	blx	r7
 800a05a:	3001      	adds	r0, #1
 800a05c:	d1c3      	bne.n	8009fe6 <_printf_float+0x32e>
 800a05e:	e686      	b.n	8009d6e <_printf_float+0xb6>
 800a060:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a064:	f1ba 0f01 	cmp.w	sl, #1
 800a068:	dc01      	bgt.n	800a06e <_printf_float+0x3b6>
 800a06a:	07db      	lsls	r3, r3, #31
 800a06c:	d536      	bpl.n	800a0dc <_printf_float+0x424>
 800a06e:	2301      	movs	r3, #1
 800a070:	4642      	mov	r2, r8
 800a072:	4631      	mov	r1, r6
 800a074:	4628      	mov	r0, r5
 800a076:	47b8      	blx	r7
 800a078:	3001      	adds	r0, #1
 800a07a:	f43f ae78 	beq.w	8009d6e <_printf_float+0xb6>
 800a07e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a082:	4631      	mov	r1, r6
 800a084:	4628      	mov	r0, r5
 800a086:	47b8      	blx	r7
 800a088:	3001      	adds	r0, #1
 800a08a:	f43f ae70 	beq.w	8009d6e <_printf_float+0xb6>
 800a08e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a092:	2200      	movs	r2, #0
 800a094:	2300      	movs	r3, #0
 800a096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a09a:	f7f6 fd35 	bl	8000b08 <__aeabi_dcmpeq>
 800a09e:	b9c0      	cbnz	r0, 800a0d2 <_printf_float+0x41a>
 800a0a0:	4653      	mov	r3, sl
 800a0a2:	f108 0201 	add.w	r2, r8, #1
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b8      	blx	r7
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d10c      	bne.n	800a0ca <_printf_float+0x412>
 800a0b0:	e65d      	b.n	8009d6e <_printf_float+0xb6>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	465a      	mov	r2, fp
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	47b8      	blx	r7
 800a0bc:	3001      	adds	r0, #1
 800a0be:	f43f ae56 	beq.w	8009d6e <_printf_float+0xb6>
 800a0c2:	f108 0801 	add.w	r8, r8, #1
 800a0c6:	45d0      	cmp	r8, sl
 800a0c8:	dbf3      	blt.n	800a0b2 <_printf_float+0x3fa>
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a0d0:	e6df      	b.n	8009e92 <_printf_float+0x1da>
 800a0d2:	f04f 0800 	mov.w	r8, #0
 800a0d6:	f104 0b1a 	add.w	fp, r4, #26
 800a0da:	e7f4      	b.n	800a0c6 <_printf_float+0x40e>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4642      	mov	r2, r8
 800a0e0:	e7e1      	b.n	800a0a6 <_printf_float+0x3ee>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	464a      	mov	r2, r9
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b8      	blx	r7
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	f43f ae3e 	beq.w	8009d6e <_printf_float+0xb6>
 800a0f2:	f108 0801 	add.w	r8, r8, #1
 800a0f6:	68e3      	ldr	r3, [r4, #12]
 800a0f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0fa:	1a5b      	subs	r3, r3, r1
 800a0fc:	4543      	cmp	r3, r8
 800a0fe:	dcf0      	bgt.n	800a0e2 <_printf_float+0x42a>
 800a100:	e6fc      	b.n	8009efc <_printf_float+0x244>
 800a102:	f04f 0800 	mov.w	r8, #0
 800a106:	f104 0919 	add.w	r9, r4, #25
 800a10a:	e7f4      	b.n	800a0f6 <_printf_float+0x43e>

0800a10c <_printf_common>:
 800a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	4616      	mov	r6, r2
 800a112:	4698      	mov	r8, r3
 800a114:	688a      	ldr	r2, [r1, #8]
 800a116:	690b      	ldr	r3, [r1, #16]
 800a118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a11c:	4293      	cmp	r3, r2
 800a11e:	bfb8      	it	lt
 800a120:	4613      	movlt	r3, r2
 800a122:	6033      	str	r3, [r6, #0]
 800a124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a128:	4607      	mov	r7, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	b10a      	cbz	r2, 800a132 <_printf_common+0x26>
 800a12e:	3301      	adds	r3, #1
 800a130:	6033      	str	r3, [r6, #0]
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	0699      	lsls	r1, r3, #26
 800a136:	bf42      	ittt	mi
 800a138:	6833      	ldrmi	r3, [r6, #0]
 800a13a:	3302      	addmi	r3, #2
 800a13c:	6033      	strmi	r3, [r6, #0]
 800a13e:	6825      	ldr	r5, [r4, #0]
 800a140:	f015 0506 	ands.w	r5, r5, #6
 800a144:	d106      	bne.n	800a154 <_printf_common+0x48>
 800a146:	f104 0a19 	add.w	sl, r4, #25
 800a14a:	68e3      	ldr	r3, [r4, #12]
 800a14c:	6832      	ldr	r2, [r6, #0]
 800a14e:	1a9b      	subs	r3, r3, r2
 800a150:	42ab      	cmp	r3, r5
 800a152:	dc26      	bgt.n	800a1a2 <_printf_common+0x96>
 800a154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a158:	6822      	ldr	r2, [r4, #0]
 800a15a:	3b00      	subs	r3, #0
 800a15c:	bf18      	it	ne
 800a15e:	2301      	movne	r3, #1
 800a160:	0692      	lsls	r2, r2, #26
 800a162:	d42b      	bmi.n	800a1bc <_printf_common+0xb0>
 800a164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a168:	4641      	mov	r1, r8
 800a16a:	4638      	mov	r0, r7
 800a16c:	47c8      	blx	r9
 800a16e:	3001      	adds	r0, #1
 800a170:	d01e      	beq.n	800a1b0 <_printf_common+0xa4>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	6922      	ldr	r2, [r4, #16]
 800a176:	f003 0306 	and.w	r3, r3, #6
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	bf02      	ittt	eq
 800a17e:	68e5      	ldreq	r5, [r4, #12]
 800a180:	6833      	ldreq	r3, [r6, #0]
 800a182:	1aed      	subeq	r5, r5, r3
 800a184:	68a3      	ldr	r3, [r4, #8]
 800a186:	bf0c      	ite	eq
 800a188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a18c:	2500      	movne	r5, #0
 800a18e:	4293      	cmp	r3, r2
 800a190:	bfc4      	itt	gt
 800a192:	1a9b      	subgt	r3, r3, r2
 800a194:	18ed      	addgt	r5, r5, r3
 800a196:	2600      	movs	r6, #0
 800a198:	341a      	adds	r4, #26
 800a19a:	42b5      	cmp	r5, r6
 800a19c:	d11a      	bne.n	800a1d4 <_printf_common+0xc8>
 800a19e:	2000      	movs	r0, #0
 800a1a0:	e008      	b.n	800a1b4 <_printf_common+0xa8>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	4652      	mov	r2, sl
 800a1a6:	4641      	mov	r1, r8
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	47c8      	blx	r9
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d103      	bne.n	800a1b8 <_printf_common+0xac>
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b8:	3501      	adds	r5, #1
 800a1ba:	e7c6      	b.n	800a14a <_printf_common+0x3e>
 800a1bc:	18e1      	adds	r1, r4, r3
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	2030      	movs	r0, #48	@ 0x30
 800a1c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1c6:	4422      	add	r2, r4
 800a1c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	e7c7      	b.n	800a164 <_printf_common+0x58>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4641      	mov	r1, r8
 800a1da:	4638      	mov	r0, r7
 800a1dc:	47c8      	blx	r9
 800a1de:	3001      	adds	r0, #1
 800a1e0:	d0e6      	beq.n	800a1b0 <_printf_common+0xa4>
 800a1e2:	3601      	adds	r6, #1
 800a1e4:	e7d9      	b.n	800a19a <_printf_common+0x8e>
	...

0800a1e8 <_printf_i>:
 800a1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ec:	7e0f      	ldrb	r7, [r1, #24]
 800a1ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1f0:	2f78      	cmp	r7, #120	@ 0x78
 800a1f2:	4691      	mov	r9, r2
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	469a      	mov	sl, r3
 800a1fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1fe:	d807      	bhi.n	800a210 <_printf_i+0x28>
 800a200:	2f62      	cmp	r7, #98	@ 0x62
 800a202:	d80a      	bhi.n	800a21a <_printf_i+0x32>
 800a204:	2f00      	cmp	r7, #0
 800a206:	f000 80d1 	beq.w	800a3ac <_printf_i+0x1c4>
 800a20a:	2f58      	cmp	r7, #88	@ 0x58
 800a20c:	f000 80b8 	beq.w	800a380 <_printf_i+0x198>
 800a210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a218:	e03a      	b.n	800a290 <_printf_i+0xa8>
 800a21a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a21e:	2b15      	cmp	r3, #21
 800a220:	d8f6      	bhi.n	800a210 <_printf_i+0x28>
 800a222:	a101      	add	r1, pc, #4	@ (adr r1, 800a228 <_printf_i+0x40>)
 800a224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a228:	0800a281 	.word	0x0800a281
 800a22c:	0800a295 	.word	0x0800a295
 800a230:	0800a211 	.word	0x0800a211
 800a234:	0800a211 	.word	0x0800a211
 800a238:	0800a211 	.word	0x0800a211
 800a23c:	0800a211 	.word	0x0800a211
 800a240:	0800a295 	.word	0x0800a295
 800a244:	0800a211 	.word	0x0800a211
 800a248:	0800a211 	.word	0x0800a211
 800a24c:	0800a211 	.word	0x0800a211
 800a250:	0800a211 	.word	0x0800a211
 800a254:	0800a393 	.word	0x0800a393
 800a258:	0800a2bf 	.word	0x0800a2bf
 800a25c:	0800a34d 	.word	0x0800a34d
 800a260:	0800a211 	.word	0x0800a211
 800a264:	0800a211 	.word	0x0800a211
 800a268:	0800a3b5 	.word	0x0800a3b5
 800a26c:	0800a211 	.word	0x0800a211
 800a270:	0800a2bf 	.word	0x0800a2bf
 800a274:	0800a211 	.word	0x0800a211
 800a278:	0800a211 	.word	0x0800a211
 800a27c:	0800a355 	.word	0x0800a355
 800a280:	6833      	ldr	r3, [r6, #0]
 800a282:	1d1a      	adds	r2, r3, #4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6032      	str	r2, [r6, #0]
 800a288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a28c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a290:	2301      	movs	r3, #1
 800a292:	e09c      	b.n	800a3ce <_printf_i+0x1e6>
 800a294:	6833      	ldr	r3, [r6, #0]
 800a296:	6820      	ldr	r0, [r4, #0]
 800a298:	1d19      	adds	r1, r3, #4
 800a29a:	6031      	str	r1, [r6, #0]
 800a29c:	0606      	lsls	r6, r0, #24
 800a29e:	d501      	bpl.n	800a2a4 <_printf_i+0xbc>
 800a2a0:	681d      	ldr	r5, [r3, #0]
 800a2a2:	e003      	b.n	800a2ac <_printf_i+0xc4>
 800a2a4:	0645      	lsls	r5, r0, #25
 800a2a6:	d5fb      	bpl.n	800a2a0 <_printf_i+0xb8>
 800a2a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	da03      	bge.n	800a2b8 <_printf_i+0xd0>
 800a2b0:	232d      	movs	r3, #45	@ 0x2d
 800a2b2:	426d      	negs	r5, r5
 800a2b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2b8:	4858      	ldr	r0, [pc, #352]	@ (800a41c <_printf_i+0x234>)
 800a2ba:	230a      	movs	r3, #10
 800a2bc:	e011      	b.n	800a2e2 <_printf_i+0xfa>
 800a2be:	6821      	ldr	r1, [r4, #0]
 800a2c0:	6833      	ldr	r3, [r6, #0]
 800a2c2:	0608      	lsls	r0, r1, #24
 800a2c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2c8:	d402      	bmi.n	800a2d0 <_printf_i+0xe8>
 800a2ca:	0649      	lsls	r1, r1, #25
 800a2cc:	bf48      	it	mi
 800a2ce:	b2ad      	uxthmi	r5, r5
 800a2d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2d2:	4852      	ldr	r0, [pc, #328]	@ (800a41c <_printf_i+0x234>)
 800a2d4:	6033      	str	r3, [r6, #0]
 800a2d6:	bf14      	ite	ne
 800a2d8:	230a      	movne	r3, #10
 800a2da:	2308      	moveq	r3, #8
 800a2dc:	2100      	movs	r1, #0
 800a2de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2e2:	6866      	ldr	r6, [r4, #4]
 800a2e4:	60a6      	str	r6, [r4, #8]
 800a2e6:	2e00      	cmp	r6, #0
 800a2e8:	db05      	blt.n	800a2f6 <_printf_i+0x10e>
 800a2ea:	6821      	ldr	r1, [r4, #0]
 800a2ec:	432e      	orrs	r6, r5
 800a2ee:	f021 0104 	bic.w	r1, r1, #4
 800a2f2:	6021      	str	r1, [r4, #0]
 800a2f4:	d04b      	beq.n	800a38e <_printf_i+0x1a6>
 800a2f6:	4616      	mov	r6, r2
 800a2f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2fc:	fb03 5711 	mls	r7, r3, r1, r5
 800a300:	5dc7      	ldrb	r7, [r0, r7]
 800a302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a306:	462f      	mov	r7, r5
 800a308:	42bb      	cmp	r3, r7
 800a30a:	460d      	mov	r5, r1
 800a30c:	d9f4      	bls.n	800a2f8 <_printf_i+0x110>
 800a30e:	2b08      	cmp	r3, #8
 800a310:	d10b      	bne.n	800a32a <_printf_i+0x142>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	07df      	lsls	r7, r3, #31
 800a316:	d508      	bpl.n	800a32a <_printf_i+0x142>
 800a318:	6923      	ldr	r3, [r4, #16]
 800a31a:	6861      	ldr	r1, [r4, #4]
 800a31c:	4299      	cmp	r1, r3
 800a31e:	bfde      	ittt	le
 800a320:	2330      	movle	r3, #48	@ 0x30
 800a322:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a326:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a32a:	1b92      	subs	r2, r2, r6
 800a32c:	6122      	str	r2, [r4, #16]
 800a32e:	f8cd a000 	str.w	sl, [sp]
 800a332:	464b      	mov	r3, r9
 800a334:	aa03      	add	r2, sp, #12
 800a336:	4621      	mov	r1, r4
 800a338:	4640      	mov	r0, r8
 800a33a:	f7ff fee7 	bl	800a10c <_printf_common>
 800a33e:	3001      	adds	r0, #1
 800a340:	d14a      	bne.n	800a3d8 <_printf_i+0x1f0>
 800a342:	f04f 30ff 	mov.w	r0, #4294967295
 800a346:	b004      	add	sp, #16
 800a348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	f043 0320 	orr.w	r3, r3, #32
 800a352:	6023      	str	r3, [r4, #0]
 800a354:	4832      	ldr	r0, [pc, #200]	@ (800a420 <_printf_i+0x238>)
 800a356:	2778      	movs	r7, #120	@ 0x78
 800a358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	6831      	ldr	r1, [r6, #0]
 800a360:	061f      	lsls	r7, r3, #24
 800a362:	f851 5b04 	ldr.w	r5, [r1], #4
 800a366:	d402      	bmi.n	800a36e <_printf_i+0x186>
 800a368:	065f      	lsls	r7, r3, #25
 800a36a:	bf48      	it	mi
 800a36c:	b2ad      	uxthmi	r5, r5
 800a36e:	6031      	str	r1, [r6, #0]
 800a370:	07d9      	lsls	r1, r3, #31
 800a372:	bf44      	itt	mi
 800a374:	f043 0320 	orrmi.w	r3, r3, #32
 800a378:	6023      	strmi	r3, [r4, #0]
 800a37a:	b11d      	cbz	r5, 800a384 <_printf_i+0x19c>
 800a37c:	2310      	movs	r3, #16
 800a37e:	e7ad      	b.n	800a2dc <_printf_i+0xf4>
 800a380:	4826      	ldr	r0, [pc, #152]	@ (800a41c <_printf_i+0x234>)
 800a382:	e7e9      	b.n	800a358 <_printf_i+0x170>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	f023 0320 	bic.w	r3, r3, #32
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	e7f6      	b.n	800a37c <_printf_i+0x194>
 800a38e:	4616      	mov	r6, r2
 800a390:	e7bd      	b.n	800a30e <_printf_i+0x126>
 800a392:	6833      	ldr	r3, [r6, #0]
 800a394:	6825      	ldr	r5, [r4, #0]
 800a396:	6961      	ldr	r1, [r4, #20]
 800a398:	1d18      	adds	r0, r3, #4
 800a39a:	6030      	str	r0, [r6, #0]
 800a39c:	062e      	lsls	r6, r5, #24
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	d501      	bpl.n	800a3a6 <_printf_i+0x1be>
 800a3a2:	6019      	str	r1, [r3, #0]
 800a3a4:	e002      	b.n	800a3ac <_printf_i+0x1c4>
 800a3a6:	0668      	lsls	r0, r5, #25
 800a3a8:	d5fb      	bpl.n	800a3a2 <_printf_i+0x1ba>
 800a3aa:	8019      	strh	r1, [r3, #0]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	6123      	str	r3, [r4, #16]
 800a3b0:	4616      	mov	r6, r2
 800a3b2:	e7bc      	b.n	800a32e <_printf_i+0x146>
 800a3b4:	6833      	ldr	r3, [r6, #0]
 800a3b6:	1d1a      	adds	r2, r3, #4
 800a3b8:	6032      	str	r2, [r6, #0]
 800a3ba:	681e      	ldr	r6, [r3, #0]
 800a3bc:	6862      	ldr	r2, [r4, #4]
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f7f5 ff25 	bl	8000210 <memchr>
 800a3c6:	b108      	cbz	r0, 800a3cc <_printf_i+0x1e4>
 800a3c8:	1b80      	subs	r0, r0, r6
 800a3ca:	6060      	str	r0, [r4, #4]
 800a3cc:	6863      	ldr	r3, [r4, #4]
 800a3ce:	6123      	str	r3, [r4, #16]
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3d6:	e7aa      	b.n	800a32e <_printf_i+0x146>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	4632      	mov	r2, r6
 800a3dc:	4649      	mov	r1, r9
 800a3de:	4640      	mov	r0, r8
 800a3e0:	47d0      	blx	sl
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	d0ad      	beq.n	800a342 <_printf_i+0x15a>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	079b      	lsls	r3, r3, #30
 800a3ea:	d413      	bmi.n	800a414 <_printf_i+0x22c>
 800a3ec:	68e0      	ldr	r0, [r4, #12]
 800a3ee:	9b03      	ldr	r3, [sp, #12]
 800a3f0:	4298      	cmp	r0, r3
 800a3f2:	bfb8      	it	lt
 800a3f4:	4618      	movlt	r0, r3
 800a3f6:	e7a6      	b.n	800a346 <_printf_i+0x15e>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	4632      	mov	r2, r6
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	4640      	mov	r0, r8
 800a400:	47d0      	blx	sl
 800a402:	3001      	adds	r0, #1
 800a404:	d09d      	beq.n	800a342 <_printf_i+0x15a>
 800a406:	3501      	adds	r5, #1
 800a408:	68e3      	ldr	r3, [r4, #12]
 800a40a:	9903      	ldr	r1, [sp, #12]
 800a40c:	1a5b      	subs	r3, r3, r1
 800a40e:	42ab      	cmp	r3, r5
 800a410:	dcf2      	bgt.n	800a3f8 <_printf_i+0x210>
 800a412:	e7eb      	b.n	800a3ec <_printf_i+0x204>
 800a414:	2500      	movs	r5, #0
 800a416:	f104 0619 	add.w	r6, r4, #25
 800a41a:	e7f5      	b.n	800a408 <_printf_i+0x220>
 800a41c:	0800fad6 	.word	0x0800fad6
 800a420:	0800fae7 	.word	0x0800fae7

0800a424 <_scanf_float>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	b087      	sub	sp, #28
 800a42a:	4691      	mov	r9, r2
 800a42c:	9303      	str	r3, [sp, #12]
 800a42e:	688b      	ldr	r3, [r1, #8]
 800a430:	1e5a      	subs	r2, r3, #1
 800a432:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a436:	bf81      	itttt	hi
 800a438:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a43c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a440:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a444:	608b      	strhi	r3, [r1, #8]
 800a446:	680b      	ldr	r3, [r1, #0]
 800a448:	460a      	mov	r2, r1
 800a44a:	f04f 0500 	mov.w	r5, #0
 800a44e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a452:	f842 3b1c 	str.w	r3, [r2], #28
 800a456:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a45a:	4680      	mov	r8, r0
 800a45c:	460c      	mov	r4, r1
 800a45e:	bf98      	it	ls
 800a460:	f04f 0b00 	movls.w	fp, #0
 800a464:	9201      	str	r2, [sp, #4]
 800a466:	4616      	mov	r6, r2
 800a468:	46aa      	mov	sl, r5
 800a46a:	462f      	mov	r7, r5
 800a46c:	9502      	str	r5, [sp, #8]
 800a46e:	68a2      	ldr	r2, [r4, #8]
 800a470:	b15a      	cbz	r2, 800a48a <_scanf_float+0x66>
 800a472:	f8d9 3000 	ldr.w	r3, [r9]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b4e      	cmp	r3, #78	@ 0x4e
 800a47a:	d863      	bhi.n	800a544 <_scanf_float+0x120>
 800a47c:	2b40      	cmp	r3, #64	@ 0x40
 800a47e:	d83b      	bhi.n	800a4f8 <_scanf_float+0xd4>
 800a480:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a484:	b2c8      	uxtb	r0, r1
 800a486:	280e      	cmp	r0, #14
 800a488:	d939      	bls.n	800a4fe <_scanf_float+0xda>
 800a48a:	b11f      	cbz	r7, 800a494 <_scanf_float+0x70>
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a498:	f1ba 0f01 	cmp.w	sl, #1
 800a49c:	f200 8114 	bhi.w	800a6c8 <_scanf_float+0x2a4>
 800a4a0:	9b01      	ldr	r3, [sp, #4]
 800a4a2:	429e      	cmp	r6, r3
 800a4a4:	f200 8105 	bhi.w	800a6b2 <_scanf_float+0x28e>
 800a4a8:	2001      	movs	r0, #1
 800a4aa:	b007      	add	sp, #28
 800a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a4b4:	2a0d      	cmp	r2, #13
 800a4b6:	d8e8      	bhi.n	800a48a <_scanf_float+0x66>
 800a4b8:	a101      	add	r1, pc, #4	@ (adr r1, 800a4c0 <_scanf_float+0x9c>)
 800a4ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4be:	bf00      	nop
 800a4c0:	0800a609 	.word	0x0800a609
 800a4c4:	0800a48b 	.word	0x0800a48b
 800a4c8:	0800a48b 	.word	0x0800a48b
 800a4cc:	0800a48b 	.word	0x0800a48b
 800a4d0:	0800a665 	.word	0x0800a665
 800a4d4:	0800a63f 	.word	0x0800a63f
 800a4d8:	0800a48b 	.word	0x0800a48b
 800a4dc:	0800a48b 	.word	0x0800a48b
 800a4e0:	0800a617 	.word	0x0800a617
 800a4e4:	0800a48b 	.word	0x0800a48b
 800a4e8:	0800a48b 	.word	0x0800a48b
 800a4ec:	0800a48b 	.word	0x0800a48b
 800a4f0:	0800a48b 	.word	0x0800a48b
 800a4f4:	0800a5d3 	.word	0x0800a5d3
 800a4f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a4fc:	e7da      	b.n	800a4b4 <_scanf_float+0x90>
 800a4fe:	290e      	cmp	r1, #14
 800a500:	d8c3      	bhi.n	800a48a <_scanf_float+0x66>
 800a502:	a001      	add	r0, pc, #4	@ (adr r0, 800a508 <_scanf_float+0xe4>)
 800a504:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a508:	0800a5c3 	.word	0x0800a5c3
 800a50c:	0800a48b 	.word	0x0800a48b
 800a510:	0800a5c3 	.word	0x0800a5c3
 800a514:	0800a653 	.word	0x0800a653
 800a518:	0800a48b 	.word	0x0800a48b
 800a51c:	0800a565 	.word	0x0800a565
 800a520:	0800a5a9 	.word	0x0800a5a9
 800a524:	0800a5a9 	.word	0x0800a5a9
 800a528:	0800a5a9 	.word	0x0800a5a9
 800a52c:	0800a5a9 	.word	0x0800a5a9
 800a530:	0800a5a9 	.word	0x0800a5a9
 800a534:	0800a5a9 	.word	0x0800a5a9
 800a538:	0800a5a9 	.word	0x0800a5a9
 800a53c:	0800a5a9 	.word	0x0800a5a9
 800a540:	0800a5a9 	.word	0x0800a5a9
 800a544:	2b6e      	cmp	r3, #110	@ 0x6e
 800a546:	d809      	bhi.n	800a55c <_scanf_float+0x138>
 800a548:	2b60      	cmp	r3, #96	@ 0x60
 800a54a:	d8b1      	bhi.n	800a4b0 <_scanf_float+0x8c>
 800a54c:	2b54      	cmp	r3, #84	@ 0x54
 800a54e:	d07b      	beq.n	800a648 <_scanf_float+0x224>
 800a550:	2b59      	cmp	r3, #89	@ 0x59
 800a552:	d19a      	bne.n	800a48a <_scanf_float+0x66>
 800a554:	2d07      	cmp	r5, #7
 800a556:	d198      	bne.n	800a48a <_scanf_float+0x66>
 800a558:	2508      	movs	r5, #8
 800a55a:	e02f      	b.n	800a5bc <_scanf_float+0x198>
 800a55c:	2b74      	cmp	r3, #116	@ 0x74
 800a55e:	d073      	beq.n	800a648 <_scanf_float+0x224>
 800a560:	2b79      	cmp	r3, #121	@ 0x79
 800a562:	e7f6      	b.n	800a552 <_scanf_float+0x12e>
 800a564:	6821      	ldr	r1, [r4, #0]
 800a566:	05c8      	lsls	r0, r1, #23
 800a568:	d51e      	bpl.n	800a5a8 <_scanf_float+0x184>
 800a56a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a56e:	6021      	str	r1, [r4, #0]
 800a570:	3701      	adds	r7, #1
 800a572:	f1bb 0f00 	cmp.w	fp, #0
 800a576:	d003      	beq.n	800a580 <_scanf_float+0x15c>
 800a578:	3201      	adds	r2, #1
 800a57a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a57e:	60a2      	str	r2, [r4, #8]
 800a580:	68a3      	ldr	r3, [r4, #8]
 800a582:	3b01      	subs	r3, #1
 800a584:	60a3      	str	r3, [r4, #8]
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	3301      	adds	r3, #1
 800a58a:	6123      	str	r3, [r4, #16]
 800a58c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a590:	3b01      	subs	r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	f8c9 3004 	str.w	r3, [r9, #4]
 800a598:	f340 8082 	ble.w	800a6a0 <_scanf_float+0x27c>
 800a59c:	f8d9 3000 	ldr.w	r3, [r9]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	f8c9 3000 	str.w	r3, [r9]
 800a5a6:	e762      	b.n	800a46e <_scanf_float+0x4a>
 800a5a8:	eb1a 0105 	adds.w	r1, sl, r5
 800a5ac:	f47f af6d 	bne.w	800a48a <_scanf_float+0x66>
 800a5b0:	6822      	ldr	r2, [r4, #0]
 800a5b2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a5b6:	6022      	str	r2, [r4, #0]
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	468a      	mov	sl, r1
 800a5bc:	f806 3b01 	strb.w	r3, [r6], #1
 800a5c0:	e7de      	b.n	800a580 <_scanf_float+0x15c>
 800a5c2:	6822      	ldr	r2, [r4, #0]
 800a5c4:	0610      	lsls	r0, r2, #24
 800a5c6:	f57f af60 	bpl.w	800a48a <_scanf_float+0x66>
 800a5ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5ce:	6022      	str	r2, [r4, #0]
 800a5d0:	e7f4      	b.n	800a5bc <_scanf_float+0x198>
 800a5d2:	f1ba 0f00 	cmp.w	sl, #0
 800a5d6:	d10c      	bne.n	800a5f2 <_scanf_float+0x1ce>
 800a5d8:	b977      	cbnz	r7, 800a5f8 <_scanf_float+0x1d4>
 800a5da:	6822      	ldr	r2, [r4, #0]
 800a5dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a5e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a5e4:	d108      	bne.n	800a5f8 <_scanf_float+0x1d4>
 800a5e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a5ea:	6022      	str	r2, [r4, #0]
 800a5ec:	f04f 0a01 	mov.w	sl, #1
 800a5f0:	e7e4      	b.n	800a5bc <_scanf_float+0x198>
 800a5f2:	f1ba 0f02 	cmp.w	sl, #2
 800a5f6:	d050      	beq.n	800a69a <_scanf_float+0x276>
 800a5f8:	2d01      	cmp	r5, #1
 800a5fa:	d002      	beq.n	800a602 <_scanf_float+0x1de>
 800a5fc:	2d04      	cmp	r5, #4
 800a5fe:	f47f af44 	bne.w	800a48a <_scanf_float+0x66>
 800a602:	3501      	adds	r5, #1
 800a604:	b2ed      	uxtb	r5, r5
 800a606:	e7d9      	b.n	800a5bc <_scanf_float+0x198>
 800a608:	f1ba 0f01 	cmp.w	sl, #1
 800a60c:	f47f af3d 	bne.w	800a48a <_scanf_float+0x66>
 800a610:	f04f 0a02 	mov.w	sl, #2
 800a614:	e7d2      	b.n	800a5bc <_scanf_float+0x198>
 800a616:	b975      	cbnz	r5, 800a636 <_scanf_float+0x212>
 800a618:	2f00      	cmp	r7, #0
 800a61a:	f47f af37 	bne.w	800a48c <_scanf_float+0x68>
 800a61e:	6822      	ldr	r2, [r4, #0]
 800a620:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a624:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a628:	f040 8103 	bne.w	800a832 <_scanf_float+0x40e>
 800a62c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a630:	6022      	str	r2, [r4, #0]
 800a632:	2501      	movs	r5, #1
 800a634:	e7c2      	b.n	800a5bc <_scanf_float+0x198>
 800a636:	2d03      	cmp	r5, #3
 800a638:	d0e3      	beq.n	800a602 <_scanf_float+0x1de>
 800a63a:	2d05      	cmp	r5, #5
 800a63c:	e7df      	b.n	800a5fe <_scanf_float+0x1da>
 800a63e:	2d02      	cmp	r5, #2
 800a640:	f47f af23 	bne.w	800a48a <_scanf_float+0x66>
 800a644:	2503      	movs	r5, #3
 800a646:	e7b9      	b.n	800a5bc <_scanf_float+0x198>
 800a648:	2d06      	cmp	r5, #6
 800a64a:	f47f af1e 	bne.w	800a48a <_scanf_float+0x66>
 800a64e:	2507      	movs	r5, #7
 800a650:	e7b4      	b.n	800a5bc <_scanf_float+0x198>
 800a652:	6822      	ldr	r2, [r4, #0]
 800a654:	0591      	lsls	r1, r2, #22
 800a656:	f57f af18 	bpl.w	800a48a <_scanf_float+0x66>
 800a65a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a65e:	6022      	str	r2, [r4, #0]
 800a660:	9702      	str	r7, [sp, #8]
 800a662:	e7ab      	b.n	800a5bc <_scanf_float+0x198>
 800a664:	6822      	ldr	r2, [r4, #0]
 800a666:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a66a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a66e:	d005      	beq.n	800a67c <_scanf_float+0x258>
 800a670:	0550      	lsls	r0, r2, #21
 800a672:	f57f af0a 	bpl.w	800a48a <_scanf_float+0x66>
 800a676:	2f00      	cmp	r7, #0
 800a678:	f000 80db 	beq.w	800a832 <_scanf_float+0x40e>
 800a67c:	0591      	lsls	r1, r2, #22
 800a67e:	bf58      	it	pl
 800a680:	9902      	ldrpl	r1, [sp, #8]
 800a682:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a686:	bf58      	it	pl
 800a688:	1a79      	subpl	r1, r7, r1
 800a68a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a68e:	bf58      	it	pl
 800a690:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a694:	6022      	str	r2, [r4, #0]
 800a696:	2700      	movs	r7, #0
 800a698:	e790      	b.n	800a5bc <_scanf_float+0x198>
 800a69a:	f04f 0a03 	mov.w	sl, #3
 800a69e:	e78d      	b.n	800a5bc <_scanf_float+0x198>
 800a6a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	4798      	blx	r3
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f43f aedf 	beq.w	800a46e <_scanf_float+0x4a>
 800a6b0:	e6eb      	b.n	800a48a <_scanf_float+0x66>
 800a6b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6ba:	464a      	mov	r2, r9
 800a6bc:	4640      	mov	r0, r8
 800a6be:	4798      	blx	r3
 800a6c0:	6923      	ldr	r3, [r4, #16]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	6123      	str	r3, [r4, #16]
 800a6c6:	e6eb      	b.n	800a4a0 <_scanf_float+0x7c>
 800a6c8:	1e6b      	subs	r3, r5, #1
 800a6ca:	2b06      	cmp	r3, #6
 800a6cc:	d824      	bhi.n	800a718 <_scanf_float+0x2f4>
 800a6ce:	2d02      	cmp	r5, #2
 800a6d0:	d836      	bhi.n	800a740 <_scanf_float+0x31c>
 800a6d2:	9b01      	ldr	r3, [sp, #4]
 800a6d4:	429e      	cmp	r6, r3
 800a6d6:	f67f aee7 	bls.w	800a4a8 <_scanf_float+0x84>
 800a6da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6e2:	464a      	mov	r2, r9
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	4798      	blx	r3
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	e7f0      	b.n	800a6d2 <_scanf_float+0x2ae>
 800a6f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6f4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a6f8:	464a      	mov	r2, r9
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4798      	blx	r3
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	3b01      	subs	r3, #1
 800a702:	6123      	str	r3, [r4, #16]
 800a704:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a708:	fa5f fa8a 	uxtb.w	sl, sl
 800a70c:	f1ba 0f02 	cmp.w	sl, #2
 800a710:	d1ee      	bne.n	800a6f0 <_scanf_float+0x2cc>
 800a712:	3d03      	subs	r5, #3
 800a714:	b2ed      	uxtb	r5, r5
 800a716:	1b76      	subs	r6, r6, r5
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	05da      	lsls	r2, r3, #23
 800a71c:	d530      	bpl.n	800a780 <_scanf_float+0x35c>
 800a71e:	055b      	lsls	r3, r3, #21
 800a720:	d511      	bpl.n	800a746 <_scanf_float+0x322>
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	429e      	cmp	r6, r3
 800a726:	f67f aebf 	bls.w	800a4a8 <_scanf_float+0x84>
 800a72a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a72e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a732:	464a      	mov	r2, r9
 800a734:	4640      	mov	r0, r8
 800a736:	4798      	blx	r3
 800a738:	6923      	ldr	r3, [r4, #16]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	6123      	str	r3, [r4, #16]
 800a73e:	e7f0      	b.n	800a722 <_scanf_float+0x2fe>
 800a740:	46aa      	mov	sl, r5
 800a742:	46b3      	mov	fp, r6
 800a744:	e7de      	b.n	800a704 <_scanf_float+0x2e0>
 800a746:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	2965      	cmp	r1, #101	@ 0x65
 800a74e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a752:	f106 35ff 	add.w	r5, r6, #4294967295
 800a756:	6123      	str	r3, [r4, #16]
 800a758:	d00c      	beq.n	800a774 <_scanf_float+0x350>
 800a75a:	2945      	cmp	r1, #69	@ 0x45
 800a75c:	d00a      	beq.n	800a774 <_scanf_float+0x350>
 800a75e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a762:	464a      	mov	r2, r9
 800a764:	4640      	mov	r0, r8
 800a766:	4798      	blx	r3
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a76e:	3b01      	subs	r3, #1
 800a770:	1eb5      	subs	r5, r6, #2
 800a772:	6123      	str	r3, [r4, #16]
 800a774:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a778:	464a      	mov	r2, r9
 800a77a:	4640      	mov	r0, r8
 800a77c:	4798      	blx	r3
 800a77e:	462e      	mov	r6, r5
 800a780:	6822      	ldr	r2, [r4, #0]
 800a782:	f012 0210 	ands.w	r2, r2, #16
 800a786:	d001      	beq.n	800a78c <_scanf_float+0x368>
 800a788:	2000      	movs	r0, #0
 800a78a:	e68e      	b.n	800a4aa <_scanf_float+0x86>
 800a78c:	7032      	strb	r2, [r6, #0]
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a798:	d125      	bne.n	800a7e6 <_scanf_float+0x3c2>
 800a79a:	9b02      	ldr	r3, [sp, #8]
 800a79c:	429f      	cmp	r7, r3
 800a79e:	d00a      	beq.n	800a7b6 <_scanf_float+0x392>
 800a7a0:	1bda      	subs	r2, r3, r7
 800a7a2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a7a6:	429e      	cmp	r6, r3
 800a7a8:	bf28      	it	cs
 800a7aa:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a7ae:	4922      	ldr	r1, [pc, #136]	@ (800a838 <_scanf_float+0x414>)
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 f93d 	bl	800aa30 <siprintf>
 800a7b6:	9901      	ldr	r1, [sp, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	f002 fc74 	bl	800d0a8 <_strtod_r>
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	6821      	ldr	r1, [r4, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f011 0f02 	tst.w	r1, #2
 800a7ca:	ec57 6b10 	vmov	r6, r7, d0
 800a7ce:	f103 0204 	add.w	r2, r3, #4
 800a7d2:	d015      	beq.n	800a800 <_scanf_float+0x3dc>
 800a7d4:	9903      	ldr	r1, [sp, #12]
 800a7d6:	600a      	str	r2, [r1, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	e9c3 6700 	strd	r6, r7, [r3]
 800a7de:	68e3      	ldr	r3, [r4, #12]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	60e3      	str	r3, [r4, #12]
 800a7e4:	e7d0      	b.n	800a788 <_scanf_float+0x364>
 800a7e6:	9b04      	ldr	r3, [sp, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d0e4      	beq.n	800a7b6 <_scanf_float+0x392>
 800a7ec:	9905      	ldr	r1, [sp, #20]
 800a7ee:	230a      	movs	r3, #10
 800a7f0:	3101      	adds	r1, #1
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	f002 fcd8 	bl	800d1a8 <_strtol_r>
 800a7f8:	9b04      	ldr	r3, [sp, #16]
 800a7fa:	9e05      	ldr	r6, [sp, #20]
 800a7fc:	1ac2      	subs	r2, r0, r3
 800a7fe:	e7d0      	b.n	800a7a2 <_scanf_float+0x37e>
 800a800:	f011 0f04 	tst.w	r1, #4
 800a804:	9903      	ldr	r1, [sp, #12]
 800a806:	600a      	str	r2, [r1, #0]
 800a808:	d1e6      	bne.n	800a7d8 <_scanf_float+0x3b4>
 800a80a:	681d      	ldr	r5, [r3, #0]
 800a80c:	4632      	mov	r2, r6
 800a80e:	463b      	mov	r3, r7
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f6 f9aa 	bl	8000b6c <__aeabi_dcmpun>
 800a818:	b128      	cbz	r0, 800a826 <_scanf_float+0x402>
 800a81a:	4808      	ldr	r0, [pc, #32]	@ (800a83c <_scanf_float+0x418>)
 800a81c:	f000 fa38 	bl	800ac90 <nanf>
 800a820:	ed85 0a00 	vstr	s0, [r5]
 800a824:	e7db      	b.n	800a7de <_scanf_float+0x3ba>
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f6 f9fd 	bl	8000c28 <__aeabi_d2f>
 800a82e:	6028      	str	r0, [r5, #0]
 800a830:	e7d5      	b.n	800a7de <_scanf_float+0x3ba>
 800a832:	2700      	movs	r7, #0
 800a834:	e62e      	b.n	800a494 <_scanf_float+0x70>
 800a836:	bf00      	nop
 800a838:	0800faf8 	.word	0x0800faf8
 800a83c:	0800fc39 	.word	0x0800fc39

0800a840 <std>:
 800a840:	2300      	movs	r3, #0
 800a842:	b510      	push	{r4, lr}
 800a844:	4604      	mov	r4, r0
 800a846:	e9c0 3300 	strd	r3, r3, [r0]
 800a84a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a84e:	6083      	str	r3, [r0, #8]
 800a850:	8181      	strh	r1, [r0, #12]
 800a852:	6643      	str	r3, [r0, #100]	@ 0x64
 800a854:	81c2      	strh	r2, [r0, #14]
 800a856:	6183      	str	r3, [r0, #24]
 800a858:	4619      	mov	r1, r3
 800a85a:	2208      	movs	r2, #8
 800a85c:	305c      	adds	r0, #92	@ 0x5c
 800a85e:	f000 f989 	bl	800ab74 <memset>
 800a862:	4b0d      	ldr	r3, [pc, #52]	@ (800a898 <std+0x58>)
 800a864:	6263      	str	r3, [r4, #36]	@ 0x24
 800a866:	4b0d      	ldr	r3, [pc, #52]	@ (800a89c <std+0x5c>)
 800a868:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a86a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a0 <std+0x60>)
 800a86c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a86e:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a4 <std+0x64>)
 800a870:	6323      	str	r3, [r4, #48]	@ 0x30
 800a872:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a8 <std+0x68>)
 800a874:	6224      	str	r4, [r4, #32]
 800a876:	429c      	cmp	r4, r3
 800a878:	d006      	beq.n	800a888 <std+0x48>
 800a87a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a87e:	4294      	cmp	r4, r2
 800a880:	d002      	beq.n	800a888 <std+0x48>
 800a882:	33d0      	adds	r3, #208	@ 0xd0
 800a884:	429c      	cmp	r4, r3
 800a886:	d105      	bne.n	800a894 <std+0x54>
 800a888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a890:	f000 b9ec 	b.w	800ac6c <__retarget_lock_init_recursive>
 800a894:	bd10      	pop	{r4, pc}
 800a896:	bf00      	nop
 800a898:	0800aa75 	.word	0x0800aa75
 800a89c:	0800aa97 	.word	0x0800aa97
 800a8a0:	0800aacf 	.word	0x0800aacf
 800a8a4:	0800aaf3 	.word	0x0800aaf3
 800a8a8:	20000d8c 	.word	0x20000d8c

0800a8ac <stdio_exit_handler>:
 800a8ac:	4a02      	ldr	r2, [pc, #8]	@ (800a8b8 <stdio_exit_handler+0xc>)
 800a8ae:	4903      	ldr	r1, [pc, #12]	@ (800a8bc <stdio_exit_handler+0x10>)
 800a8b0:	4803      	ldr	r0, [pc, #12]	@ (800a8c0 <stdio_exit_handler+0x14>)
 800a8b2:	f000 b869 	b.w	800a988 <_fwalk_sglue>
 800a8b6:	bf00      	nop
 800a8b8:	20000018 	.word	0x20000018
 800a8bc:	0800d565 	.word	0x0800d565
 800a8c0:	20000028 	.word	0x20000028

0800a8c4 <cleanup_stdio>:
 800a8c4:	6841      	ldr	r1, [r0, #4]
 800a8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f8 <cleanup_stdio+0x34>)
 800a8c8:	4299      	cmp	r1, r3
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	d001      	beq.n	800a8d4 <cleanup_stdio+0x10>
 800a8d0:	f002 fe48 	bl	800d564 <_fflush_r>
 800a8d4:	68a1      	ldr	r1, [r4, #8]
 800a8d6:	4b09      	ldr	r3, [pc, #36]	@ (800a8fc <cleanup_stdio+0x38>)
 800a8d8:	4299      	cmp	r1, r3
 800a8da:	d002      	beq.n	800a8e2 <cleanup_stdio+0x1e>
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f002 fe41 	bl	800d564 <_fflush_r>
 800a8e2:	68e1      	ldr	r1, [r4, #12]
 800a8e4:	4b06      	ldr	r3, [pc, #24]	@ (800a900 <cleanup_stdio+0x3c>)
 800a8e6:	4299      	cmp	r1, r3
 800a8e8:	d004      	beq.n	800a8f4 <cleanup_stdio+0x30>
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8f0:	f002 be38 	b.w	800d564 <_fflush_r>
 800a8f4:	bd10      	pop	{r4, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20000d8c 	.word	0x20000d8c
 800a8fc:	20000df4 	.word	0x20000df4
 800a900:	20000e5c 	.word	0x20000e5c

0800a904 <global_stdio_init.part.0>:
 800a904:	b510      	push	{r4, lr}
 800a906:	4b0b      	ldr	r3, [pc, #44]	@ (800a934 <global_stdio_init.part.0+0x30>)
 800a908:	4c0b      	ldr	r4, [pc, #44]	@ (800a938 <global_stdio_init.part.0+0x34>)
 800a90a:	4a0c      	ldr	r2, [pc, #48]	@ (800a93c <global_stdio_init.part.0+0x38>)
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	4620      	mov	r0, r4
 800a910:	2200      	movs	r2, #0
 800a912:	2104      	movs	r1, #4
 800a914:	f7ff ff94 	bl	800a840 <std>
 800a918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a91c:	2201      	movs	r2, #1
 800a91e:	2109      	movs	r1, #9
 800a920:	f7ff ff8e 	bl	800a840 <std>
 800a924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a928:	2202      	movs	r2, #2
 800a92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a92e:	2112      	movs	r1, #18
 800a930:	f7ff bf86 	b.w	800a840 <std>
 800a934:	20000ec4 	.word	0x20000ec4
 800a938:	20000d8c 	.word	0x20000d8c
 800a93c:	0800a8ad 	.word	0x0800a8ad

0800a940 <__sfp_lock_acquire>:
 800a940:	4801      	ldr	r0, [pc, #4]	@ (800a948 <__sfp_lock_acquire+0x8>)
 800a942:	f000 b994 	b.w	800ac6e <__retarget_lock_acquire_recursive>
 800a946:	bf00      	nop
 800a948:	20000ecd 	.word	0x20000ecd

0800a94c <__sfp_lock_release>:
 800a94c:	4801      	ldr	r0, [pc, #4]	@ (800a954 <__sfp_lock_release+0x8>)
 800a94e:	f000 b98f 	b.w	800ac70 <__retarget_lock_release_recursive>
 800a952:	bf00      	nop
 800a954:	20000ecd 	.word	0x20000ecd

0800a958 <__sinit>:
 800a958:	b510      	push	{r4, lr}
 800a95a:	4604      	mov	r4, r0
 800a95c:	f7ff fff0 	bl	800a940 <__sfp_lock_acquire>
 800a960:	6a23      	ldr	r3, [r4, #32]
 800a962:	b11b      	cbz	r3, 800a96c <__sinit+0x14>
 800a964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a968:	f7ff bff0 	b.w	800a94c <__sfp_lock_release>
 800a96c:	4b04      	ldr	r3, [pc, #16]	@ (800a980 <__sinit+0x28>)
 800a96e:	6223      	str	r3, [r4, #32]
 800a970:	4b04      	ldr	r3, [pc, #16]	@ (800a984 <__sinit+0x2c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1f5      	bne.n	800a964 <__sinit+0xc>
 800a978:	f7ff ffc4 	bl	800a904 <global_stdio_init.part.0>
 800a97c:	e7f2      	b.n	800a964 <__sinit+0xc>
 800a97e:	bf00      	nop
 800a980:	0800a8c5 	.word	0x0800a8c5
 800a984:	20000ec4 	.word	0x20000ec4

0800a988 <_fwalk_sglue>:
 800a988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a98c:	4607      	mov	r7, r0
 800a98e:	4688      	mov	r8, r1
 800a990:	4614      	mov	r4, r2
 800a992:	2600      	movs	r6, #0
 800a994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a998:	f1b9 0901 	subs.w	r9, r9, #1
 800a99c:	d505      	bpl.n	800a9aa <_fwalk_sglue+0x22>
 800a99e:	6824      	ldr	r4, [r4, #0]
 800a9a0:	2c00      	cmp	r4, #0
 800a9a2:	d1f7      	bne.n	800a994 <_fwalk_sglue+0xc>
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d907      	bls.n	800a9c0 <_fwalk_sglue+0x38>
 800a9b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	d003      	beq.n	800a9c0 <_fwalk_sglue+0x38>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	47c0      	blx	r8
 800a9be:	4306      	orrs	r6, r0
 800a9c0:	3568      	adds	r5, #104	@ 0x68
 800a9c2:	e7e9      	b.n	800a998 <_fwalk_sglue+0x10>

0800a9c4 <sniprintf>:
 800a9c4:	b40c      	push	{r2, r3}
 800a9c6:	b530      	push	{r4, r5, lr}
 800a9c8:	4b18      	ldr	r3, [pc, #96]	@ (800aa2c <sniprintf+0x68>)
 800a9ca:	1e0c      	subs	r4, r1, #0
 800a9cc:	681d      	ldr	r5, [r3, #0]
 800a9ce:	b09d      	sub	sp, #116	@ 0x74
 800a9d0:	da08      	bge.n	800a9e4 <sniprintf+0x20>
 800a9d2:	238b      	movs	r3, #139	@ 0x8b
 800a9d4:	602b      	str	r3, [r5, #0]
 800a9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9da:	b01d      	add	sp, #116	@ 0x74
 800a9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9e0:	b002      	add	sp, #8
 800a9e2:	4770      	bx	lr
 800a9e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a9e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a9ec:	f04f 0300 	mov.w	r3, #0
 800a9f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a9f2:	bf14      	ite	ne
 800a9f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a9f8:	4623      	moveq	r3, r4
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	9307      	str	r3, [sp, #28]
 800a9fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa02:	9002      	str	r0, [sp, #8]
 800aa04:	9006      	str	r0, [sp, #24]
 800aa06:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aa0c:	ab21      	add	r3, sp, #132	@ 0x84
 800aa0e:	a902      	add	r1, sp, #8
 800aa10:	4628      	mov	r0, r5
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	f002 fc26 	bl	800d264 <_svfiprintf_r>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	bfbc      	itt	lt
 800aa1c:	238b      	movlt	r3, #139	@ 0x8b
 800aa1e:	602b      	strlt	r3, [r5, #0]
 800aa20:	2c00      	cmp	r4, #0
 800aa22:	d0da      	beq.n	800a9da <sniprintf+0x16>
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	2200      	movs	r2, #0
 800aa28:	701a      	strb	r2, [r3, #0]
 800aa2a:	e7d6      	b.n	800a9da <sniprintf+0x16>
 800aa2c:	20000024 	.word	0x20000024

0800aa30 <siprintf>:
 800aa30:	b40e      	push	{r1, r2, r3}
 800aa32:	b510      	push	{r4, lr}
 800aa34:	b09d      	sub	sp, #116	@ 0x74
 800aa36:	ab1f      	add	r3, sp, #124	@ 0x7c
 800aa38:	9002      	str	r0, [sp, #8]
 800aa3a:	9006      	str	r0, [sp, #24]
 800aa3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa40:	480a      	ldr	r0, [pc, #40]	@ (800aa6c <siprintf+0x3c>)
 800aa42:	9107      	str	r1, [sp, #28]
 800aa44:	9104      	str	r1, [sp, #16]
 800aa46:	490a      	ldr	r1, [pc, #40]	@ (800aa70 <siprintf+0x40>)
 800aa48:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4c:	9105      	str	r1, [sp, #20]
 800aa4e:	2400      	movs	r4, #0
 800aa50:	a902      	add	r1, sp, #8
 800aa52:	6800      	ldr	r0, [r0, #0]
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	941b      	str	r4, [sp, #108]	@ 0x6c
 800aa58:	f002 fc04 	bl	800d264 <_svfiprintf_r>
 800aa5c:	9b02      	ldr	r3, [sp, #8]
 800aa5e:	701c      	strb	r4, [r3, #0]
 800aa60:	b01d      	add	sp, #116	@ 0x74
 800aa62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa66:	b003      	add	sp, #12
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	20000024 	.word	0x20000024
 800aa70:	ffff0208 	.word	0xffff0208

0800aa74 <__sread>:
 800aa74:	b510      	push	{r4, lr}
 800aa76:	460c      	mov	r4, r1
 800aa78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7c:	f000 f8a8 	bl	800abd0 <_read_r>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	bfab      	itete	ge
 800aa84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa86:	89a3      	ldrhlt	r3, [r4, #12]
 800aa88:	181b      	addge	r3, r3, r0
 800aa8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa8e:	bfac      	ite	ge
 800aa90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa92:	81a3      	strhlt	r3, [r4, #12]
 800aa94:	bd10      	pop	{r4, pc}

0800aa96 <__swrite>:
 800aa96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9a:	461f      	mov	r7, r3
 800aa9c:	898b      	ldrh	r3, [r1, #12]
 800aa9e:	05db      	lsls	r3, r3, #23
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	4616      	mov	r6, r2
 800aaa6:	d505      	bpl.n	800aab4 <__swrite+0x1e>
 800aaa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaac:	2302      	movs	r3, #2
 800aaae:	2200      	movs	r2, #0
 800aab0:	f000 f87c 	bl	800abac <_lseek_r>
 800aab4:	89a3      	ldrh	r3, [r4, #12]
 800aab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aabe:	81a3      	strh	r3, [r4, #12]
 800aac0:	4632      	mov	r2, r6
 800aac2:	463b      	mov	r3, r7
 800aac4:	4628      	mov	r0, r5
 800aac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaca:	f000 b893 	b.w	800abf4 <_write_r>

0800aace <__sseek>:
 800aace:	b510      	push	{r4, lr}
 800aad0:	460c      	mov	r4, r1
 800aad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad6:	f000 f869 	bl	800abac <_lseek_r>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	bf15      	itete	ne
 800aae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aaea:	81a3      	strheq	r3, [r4, #12]
 800aaec:	bf18      	it	ne
 800aaee:	81a3      	strhne	r3, [r4, #12]
 800aaf0:	bd10      	pop	{r4, pc}

0800aaf2 <__sclose>:
 800aaf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf6:	f000 b849 	b.w	800ab8c <_close_r>

0800aafa <_vsniprintf_r>:
 800aafa:	b530      	push	{r4, r5, lr}
 800aafc:	4614      	mov	r4, r2
 800aafe:	2c00      	cmp	r4, #0
 800ab00:	b09b      	sub	sp, #108	@ 0x6c
 800ab02:	4605      	mov	r5, r0
 800ab04:	461a      	mov	r2, r3
 800ab06:	da05      	bge.n	800ab14 <_vsniprintf_r+0x1a>
 800ab08:	238b      	movs	r3, #139	@ 0x8b
 800ab0a:	6003      	str	r3, [r0, #0]
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab10:	b01b      	add	sp, #108	@ 0x6c
 800ab12:	bd30      	pop	{r4, r5, pc}
 800ab14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ab18:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ab1c:	f04f 0300 	mov.w	r3, #0
 800ab20:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab22:	bf14      	ite	ne
 800ab24:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab28:	4623      	moveq	r3, r4
 800ab2a:	9302      	str	r3, [sp, #8]
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab32:	9100      	str	r1, [sp, #0]
 800ab34:	9104      	str	r1, [sp, #16]
 800ab36:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ab3a:	4669      	mov	r1, sp
 800ab3c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ab3e:	f002 fb91 	bl	800d264 <_svfiprintf_r>
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	bfbc      	itt	lt
 800ab46:	238b      	movlt	r3, #139	@ 0x8b
 800ab48:	602b      	strlt	r3, [r5, #0]
 800ab4a:	2c00      	cmp	r4, #0
 800ab4c:	d0e0      	beq.n	800ab10 <_vsniprintf_r+0x16>
 800ab4e:	9b00      	ldr	r3, [sp, #0]
 800ab50:	2200      	movs	r2, #0
 800ab52:	701a      	strb	r2, [r3, #0]
 800ab54:	e7dc      	b.n	800ab10 <_vsniprintf_r+0x16>
	...

0800ab58 <vsniprintf>:
 800ab58:	b507      	push	{r0, r1, r2, lr}
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	460a      	mov	r2, r1
 800ab60:	4601      	mov	r1, r0
 800ab62:	4803      	ldr	r0, [pc, #12]	@ (800ab70 <vsniprintf+0x18>)
 800ab64:	6800      	ldr	r0, [r0, #0]
 800ab66:	f7ff ffc8 	bl	800aafa <_vsniprintf_r>
 800ab6a:	b003      	add	sp, #12
 800ab6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab70:	20000024 	.word	0x20000024

0800ab74 <memset>:
 800ab74:	4402      	add	r2, r0
 800ab76:	4603      	mov	r3, r0
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d100      	bne.n	800ab7e <memset+0xa>
 800ab7c:	4770      	bx	lr
 800ab7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab82:	e7f9      	b.n	800ab78 <memset+0x4>

0800ab84 <_localeconv_r>:
 800ab84:	4800      	ldr	r0, [pc, #0]	@ (800ab88 <_localeconv_r+0x4>)
 800ab86:	4770      	bx	lr
 800ab88:	20000164 	.word	0x20000164

0800ab8c <_close_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4d06      	ldr	r5, [pc, #24]	@ (800aba8 <_close_r+0x1c>)
 800ab90:	2300      	movs	r3, #0
 800ab92:	4604      	mov	r4, r0
 800ab94:	4608      	mov	r0, r1
 800ab96:	602b      	str	r3, [r5, #0]
 800ab98:	f7fa fe71 	bl	800587e <_close>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d102      	bne.n	800aba6 <_close_r+0x1a>
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	b103      	cbz	r3, 800aba6 <_close_r+0x1a>
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	20000ec8 	.word	0x20000ec8

0800abac <_lseek_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4d07      	ldr	r5, [pc, #28]	@ (800abcc <_lseek_r+0x20>)
 800abb0:	4604      	mov	r4, r0
 800abb2:	4608      	mov	r0, r1
 800abb4:	4611      	mov	r1, r2
 800abb6:	2200      	movs	r2, #0
 800abb8:	602a      	str	r2, [r5, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	f7fa fe86 	bl	80058cc <_lseek>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <_lseek_r+0x1e>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b103      	cbz	r3, 800abca <_lseek_r+0x1e>
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	bd38      	pop	{r3, r4, r5, pc}
 800abcc:	20000ec8 	.word	0x20000ec8

0800abd0 <_read_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4d07      	ldr	r5, [pc, #28]	@ (800abf0 <_read_r+0x20>)
 800abd4:	4604      	mov	r4, r0
 800abd6:	4608      	mov	r0, r1
 800abd8:	4611      	mov	r1, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	602a      	str	r2, [r5, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	f7fa fe14 	bl	800580c <_read>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_read_r+0x1e>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_read_r+0x1e>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	20000ec8 	.word	0x20000ec8

0800abf4 <_write_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4d07      	ldr	r5, [pc, #28]	@ (800ac14 <_write_r+0x20>)
 800abf8:	4604      	mov	r4, r0
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	602a      	str	r2, [r5, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f7fa fe1f 	bl	8005846 <_write>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_write_r+0x1e>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_write_r+0x1e>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20000ec8 	.word	0x20000ec8

0800ac18 <__errno>:
 800ac18:	4b01      	ldr	r3, [pc, #4]	@ (800ac20 <__errno+0x8>)
 800ac1a:	6818      	ldr	r0, [r3, #0]
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	20000024 	.word	0x20000024

0800ac24 <__libc_init_array>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	4d0d      	ldr	r5, [pc, #52]	@ (800ac5c <__libc_init_array+0x38>)
 800ac28:	4c0d      	ldr	r4, [pc, #52]	@ (800ac60 <__libc_init_array+0x3c>)
 800ac2a:	1b64      	subs	r4, r4, r5
 800ac2c:	10a4      	asrs	r4, r4, #2
 800ac2e:	2600      	movs	r6, #0
 800ac30:	42a6      	cmp	r6, r4
 800ac32:	d109      	bne.n	800ac48 <__libc_init_array+0x24>
 800ac34:	4d0b      	ldr	r5, [pc, #44]	@ (800ac64 <__libc_init_array+0x40>)
 800ac36:	4c0c      	ldr	r4, [pc, #48]	@ (800ac68 <__libc_init_array+0x44>)
 800ac38:	f003 ff5c 	bl	800eaf4 <_init>
 800ac3c:	1b64      	subs	r4, r4, r5
 800ac3e:	10a4      	asrs	r4, r4, #2
 800ac40:	2600      	movs	r6, #0
 800ac42:	42a6      	cmp	r6, r4
 800ac44:	d105      	bne.n	800ac52 <__libc_init_array+0x2e>
 800ac46:	bd70      	pop	{r4, r5, r6, pc}
 800ac48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac4c:	4798      	blx	r3
 800ac4e:	3601      	adds	r6, #1
 800ac50:	e7ee      	b.n	800ac30 <__libc_init_array+0xc>
 800ac52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac56:	4798      	blx	r3
 800ac58:	3601      	adds	r6, #1
 800ac5a:	e7f2      	b.n	800ac42 <__libc_init_array+0x1e>
 800ac5c:	0800ff0c 	.word	0x0800ff0c
 800ac60:	0800ff0c 	.word	0x0800ff0c
 800ac64:	0800ff0c 	.word	0x0800ff0c
 800ac68:	0800ff10 	.word	0x0800ff10

0800ac6c <__retarget_lock_init_recursive>:
 800ac6c:	4770      	bx	lr

0800ac6e <__retarget_lock_acquire_recursive>:
 800ac6e:	4770      	bx	lr

0800ac70 <__retarget_lock_release_recursive>:
 800ac70:	4770      	bx	lr

0800ac72 <memcpy>:
 800ac72:	440a      	add	r2, r1
 800ac74:	4291      	cmp	r1, r2
 800ac76:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac7a:	d100      	bne.n	800ac7e <memcpy+0xc>
 800ac7c:	4770      	bx	lr
 800ac7e:	b510      	push	{r4, lr}
 800ac80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac88:	4291      	cmp	r1, r2
 800ac8a:	d1f9      	bne.n	800ac80 <memcpy+0xe>
 800ac8c:	bd10      	pop	{r4, pc}
	...

0800ac90 <nanf>:
 800ac90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ac98 <nanf+0x8>
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	7fc00000 	.word	0x7fc00000

0800ac9c <quorem>:
 800ac9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	6903      	ldr	r3, [r0, #16]
 800aca2:	690c      	ldr	r4, [r1, #16]
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	4607      	mov	r7, r0
 800aca8:	db7e      	blt.n	800ada8 <quorem+0x10c>
 800acaa:	3c01      	subs	r4, #1
 800acac:	f101 0814 	add.w	r8, r1, #20
 800acb0:	00a3      	lsls	r3, r4, #2
 800acb2:	f100 0514 	add.w	r5, r0, #20
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acc6:	3301      	adds	r3, #1
 800acc8:	429a      	cmp	r2, r3
 800acca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800acce:	fbb2 f6f3 	udiv	r6, r2, r3
 800acd2:	d32e      	bcc.n	800ad32 <quorem+0x96>
 800acd4:	f04f 0a00 	mov.w	sl, #0
 800acd8:	46c4      	mov	ip, r8
 800acda:	46ae      	mov	lr, r5
 800acdc:	46d3      	mov	fp, sl
 800acde:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ace2:	b298      	uxth	r0, r3
 800ace4:	fb06 a000 	mla	r0, r6, r0, sl
 800ace8:	0c02      	lsrs	r2, r0, #16
 800acea:	0c1b      	lsrs	r3, r3, #16
 800acec:	fb06 2303 	mla	r3, r6, r3, r2
 800acf0:	f8de 2000 	ldr.w	r2, [lr]
 800acf4:	b280      	uxth	r0, r0
 800acf6:	b292      	uxth	r2, r2
 800acf8:	1a12      	subs	r2, r2, r0
 800acfa:	445a      	add	r2, fp
 800acfc:	f8de 0000 	ldr.w	r0, [lr]
 800ad00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad0e:	b292      	uxth	r2, r2
 800ad10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad14:	45e1      	cmp	r9, ip
 800ad16:	f84e 2b04 	str.w	r2, [lr], #4
 800ad1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ad1e:	d2de      	bcs.n	800acde <quorem+0x42>
 800ad20:	9b00      	ldr	r3, [sp, #0]
 800ad22:	58eb      	ldr	r3, [r5, r3]
 800ad24:	b92b      	cbnz	r3, 800ad32 <quorem+0x96>
 800ad26:	9b01      	ldr	r3, [sp, #4]
 800ad28:	3b04      	subs	r3, #4
 800ad2a:	429d      	cmp	r5, r3
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	d32f      	bcc.n	800ad90 <quorem+0xf4>
 800ad30:	613c      	str	r4, [r7, #16]
 800ad32:	4638      	mov	r0, r7
 800ad34:	f001 f9c8 	bl	800c0c8 <__mcmp>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	db25      	blt.n	800ad88 <quorem+0xec>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	2000      	movs	r0, #0
 800ad40:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad44:	f8d1 c000 	ldr.w	ip, [r1]
 800ad48:	fa1f fe82 	uxth.w	lr, r2
 800ad4c:	fa1f f38c 	uxth.w	r3, ip
 800ad50:	eba3 030e 	sub.w	r3, r3, lr
 800ad54:	4403      	add	r3, r0
 800ad56:	0c12      	lsrs	r2, r2, #16
 800ad58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ad5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad66:	45c1      	cmp	r9, r8
 800ad68:	f841 3b04 	str.w	r3, [r1], #4
 800ad6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad70:	d2e6      	bcs.n	800ad40 <quorem+0xa4>
 800ad72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad7a:	b922      	cbnz	r2, 800ad86 <quorem+0xea>
 800ad7c:	3b04      	subs	r3, #4
 800ad7e:	429d      	cmp	r5, r3
 800ad80:	461a      	mov	r2, r3
 800ad82:	d30b      	bcc.n	800ad9c <quorem+0x100>
 800ad84:	613c      	str	r4, [r7, #16]
 800ad86:	3601      	adds	r6, #1
 800ad88:	4630      	mov	r0, r6
 800ad8a:	b003      	add	sp, #12
 800ad8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad90:	6812      	ldr	r2, [r2, #0]
 800ad92:	3b04      	subs	r3, #4
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	d1cb      	bne.n	800ad30 <quorem+0x94>
 800ad98:	3c01      	subs	r4, #1
 800ad9a:	e7c6      	b.n	800ad2a <quorem+0x8e>
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	3b04      	subs	r3, #4
 800ada0:	2a00      	cmp	r2, #0
 800ada2:	d1ef      	bne.n	800ad84 <quorem+0xe8>
 800ada4:	3c01      	subs	r4, #1
 800ada6:	e7ea      	b.n	800ad7e <quorem+0xe2>
 800ada8:	2000      	movs	r0, #0
 800adaa:	e7ee      	b.n	800ad8a <quorem+0xee>
 800adac:	0000      	movs	r0, r0
	...

0800adb0 <_dtoa_r>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	69c7      	ldr	r7, [r0, #28]
 800adb6:	b097      	sub	sp, #92	@ 0x5c
 800adb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800adbc:	ec55 4b10 	vmov	r4, r5, d0
 800adc0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800adc2:	9107      	str	r1, [sp, #28]
 800adc4:	4681      	mov	r9, r0
 800adc6:	920c      	str	r2, [sp, #48]	@ 0x30
 800adc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800adca:	b97f      	cbnz	r7, 800adec <_dtoa_r+0x3c>
 800adcc:	2010      	movs	r0, #16
 800adce:	f000 fe09 	bl	800b9e4 <malloc>
 800add2:	4602      	mov	r2, r0
 800add4:	f8c9 001c 	str.w	r0, [r9, #28]
 800add8:	b920      	cbnz	r0, 800ade4 <_dtoa_r+0x34>
 800adda:	4ba9      	ldr	r3, [pc, #676]	@ (800b080 <_dtoa_r+0x2d0>)
 800addc:	21ef      	movs	r1, #239	@ 0xef
 800adde:	48a9      	ldr	r0, [pc, #676]	@ (800b084 <_dtoa_r+0x2d4>)
 800ade0:	f002 fc2e 	bl	800d640 <__assert_func>
 800ade4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ade8:	6007      	str	r7, [r0, #0]
 800adea:	60c7      	str	r7, [r0, #12]
 800adec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800adf0:	6819      	ldr	r1, [r3, #0]
 800adf2:	b159      	cbz	r1, 800ae0c <_dtoa_r+0x5c>
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	604a      	str	r2, [r1, #4]
 800adf8:	2301      	movs	r3, #1
 800adfa:	4093      	lsls	r3, r2
 800adfc:	608b      	str	r3, [r1, #8]
 800adfe:	4648      	mov	r0, r9
 800ae00:	f000 fee6 	bl	800bbd0 <_Bfree>
 800ae04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	1e2b      	subs	r3, r5, #0
 800ae0e:	bfb9      	ittee	lt
 800ae10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae14:	9305      	strlt	r3, [sp, #20]
 800ae16:	2300      	movge	r3, #0
 800ae18:	6033      	strge	r3, [r6, #0]
 800ae1a:	9f05      	ldr	r7, [sp, #20]
 800ae1c:	4b9a      	ldr	r3, [pc, #616]	@ (800b088 <_dtoa_r+0x2d8>)
 800ae1e:	bfbc      	itt	lt
 800ae20:	2201      	movlt	r2, #1
 800ae22:	6032      	strlt	r2, [r6, #0]
 800ae24:	43bb      	bics	r3, r7
 800ae26:	d112      	bne.n	800ae4e <_dtoa_r+0x9e>
 800ae28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ae2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae34:	4323      	orrs	r3, r4
 800ae36:	f000 855a 	beq.w	800b8ee <_dtoa_r+0xb3e>
 800ae3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b09c <_dtoa_r+0x2ec>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f000 855c 	beq.w	800b8fe <_dtoa_r+0xb4e>
 800ae46:	f10a 0303 	add.w	r3, sl, #3
 800ae4a:	f000 bd56 	b.w	800b8fa <_dtoa_r+0xb4a>
 800ae4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ae52:	2200      	movs	r2, #0
 800ae54:	ec51 0b17 	vmov	r0, r1, d7
 800ae58:	2300      	movs	r3, #0
 800ae5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ae5e:	f7f5 fe53 	bl	8000b08 <__aeabi_dcmpeq>
 800ae62:	4680      	mov	r8, r0
 800ae64:	b158      	cbz	r0, 800ae7e <_dtoa_r+0xce>
 800ae66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ae68:	2301      	movs	r3, #1
 800ae6a:	6013      	str	r3, [r2, #0]
 800ae6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae6e:	b113      	cbz	r3, 800ae76 <_dtoa_r+0xc6>
 800ae70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ae72:	4b86      	ldr	r3, [pc, #536]	@ (800b08c <_dtoa_r+0x2dc>)
 800ae74:	6013      	str	r3, [r2, #0]
 800ae76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b0a0 <_dtoa_r+0x2f0>
 800ae7a:	f000 bd40 	b.w	800b8fe <_dtoa_r+0xb4e>
 800ae7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ae82:	aa14      	add	r2, sp, #80	@ 0x50
 800ae84:	a915      	add	r1, sp, #84	@ 0x54
 800ae86:	4648      	mov	r0, r9
 800ae88:	f001 fa3e 	bl	800c308 <__d2b>
 800ae8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ae90:	9002      	str	r0, [sp, #8]
 800ae92:	2e00      	cmp	r6, #0
 800ae94:	d078      	beq.n	800af88 <_dtoa_r+0x1d8>
 800ae96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ae9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aea0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aea4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aea8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aeac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	4b76      	ldr	r3, [pc, #472]	@ (800b090 <_dtoa_r+0x2e0>)
 800aeb6:	f7f5 fa07 	bl	80002c8 <__aeabi_dsub>
 800aeba:	a36b      	add	r3, pc, #428	@ (adr r3, 800b068 <_dtoa_r+0x2b8>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 fbba 	bl	8000638 <__aeabi_dmul>
 800aec4:	a36a      	add	r3, pc, #424	@ (adr r3, 800b070 <_dtoa_r+0x2c0>)
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	f7f5 f9ff 	bl	80002cc <__adddf3>
 800aece:	4604      	mov	r4, r0
 800aed0:	4630      	mov	r0, r6
 800aed2:	460d      	mov	r5, r1
 800aed4:	f7f5 fb46 	bl	8000564 <__aeabi_i2d>
 800aed8:	a367      	add	r3, pc, #412	@ (adr r3, 800b078 <_dtoa_r+0x2c8>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 fbab 	bl	8000638 <__aeabi_dmul>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 f9ef 	bl	80002cc <__adddf3>
 800aeee:	4604      	mov	r4, r0
 800aef0:	460d      	mov	r5, r1
 800aef2:	f7f5 fe51 	bl	8000b98 <__aeabi_d2iz>
 800aef6:	2200      	movs	r2, #0
 800aef8:	4607      	mov	r7, r0
 800aefa:	2300      	movs	r3, #0
 800aefc:	4620      	mov	r0, r4
 800aefe:	4629      	mov	r1, r5
 800af00:	f7f5 fe0c 	bl	8000b1c <__aeabi_dcmplt>
 800af04:	b140      	cbz	r0, 800af18 <_dtoa_r+0x168>
 800af06:	4638      	mov	r0, r7
 800af08:	f7f5 fb2c 	bl	8000564 <__aeabi_i2d>
 800af0c:	4622      	mov	r2, r4
 800af0e:	462b      	mov	r3, r5
 800af10:	f7f5 fdfa 	bl	8000b08 <__aeabi_dcmpeq>
 800af14:	b900      	cbnz	r0, 800af18 <_dtoa_r+0x168>
 800af16:	3f01      	subs	r7, #1
 800af18:	2f16      	cmp	r7, #22
 800af1a:	d852      	bhi.n	800afc2 <_dtoa_r+0x212>
 800af1c:	4b5d      	ldr	r3, [pc, #372]	@ (800b094 <_dtoa_r+0x2e4>)
 800af1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af2a:	f7f5 fdf7 	bl	8000b1c <__aeabi_dcmplt>
 800af2e:	2800      	cmp	r0, #0
 800af30:	d049      	beq.n	800afc6 <_dtoa_r+0x216>
 800af32:	3f01      	subs	r7, #1
 800af34:	2300      	movs	r3, #0
 800af36:	9310      	str	r3, [sp, #64]	@ 0x40
 800af38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af3a:	1b9b      	subs	r3, r3, r6
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	bf45      	ittet	mi
 800af40:	f1c3 0301 	rsbmi	r3, r3, #1
 800af44:	9300      	strmi	r3, [sp, #0]
 800af46:	2300      	movpl	r3, #0
 800af48:	2300      	movmi	r3, #0
 800af4a:	9206      	str	r2, [sp, #24]
 800af4c:	bf54      	ite	pl
 800af4e:	9300      	strpl	r3, [sp, #0]
 800af50:	9306      	strmi	r3, [sp, #24]
 800af52:	2f00      	cmp	r7, #0
 800af54:	db39      	blt.n	800afca <_dtoa_r+0x21a>
 800af56:	9b06      	ldr	r3, [sp, #24]
 800af58:	970d      	str	r7, [sp, #52]	@ 0x34
 800af5a:	443b      	add	r3, r7
 800af5c:	9306      	str	r3, [sp, #24]
 800af5e:	2300      	movs	r3, #0
 800af60:	9308      	str	r3, [sp, #32]
 800af62:	9b07      	ldr	r3, [sp, #28]
 800af64:	2b09      	cmp	r3, #9
 800af66:	d863      	bhi.n	800b030 <_dtoa_r+0x280>
 800af68:	2b05      	cmp	r3, #5
 800af6a:	bfc4      	itt	gt
 800af6c:	3b04      	subgt	r3, #4
 800af6e:	9307      	strgt	r3, [sp, #28]
 800af70:	9b07      	ldr	r3, [sp, #28]
 800af72:	f1a3 0302 	sub.w	r3, r3, #2
 800af76:	bfcc      	ite	gt
 800af78:	2400      	movgt	r4, #0
 800af7a:	2401      	movle	r4, #1
 800af7c:	2b03      	cmp	r3, #3
 800af7e:	d863      	bhi.n	800b048 <_dtoa_r+0x298>
 800af80:	e8df f003 	tbb	[pc, r3]
 800af84:	2b375452 	.word	0x2b375452
 800af88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800af8c:	441e      	add	r6, r3
 800af8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800af92:	2b20      	cmp	r3, #32
 800af94:	bfc1      	itttt	gt
 800af96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800af9a:	409f      	lslgt	r7, r3
 800af9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800afa0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800afa4:	bfd6      	itet	le
 800afa6:	f1c3 0320 	rsble	r3, r3, #32
 800afaa:	ea47 0003 	orrgt.w	r0, r7, r3
 800afae:	fa04 f003 	lslle.w	r0, r4, r3
 800afb2:	f7f5 fac7 	bl	8000544 <__aeabi_ui2d>
 800afb6:	2201      	movs	r2, #1
 800afb8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800afbc:	3e01      	subs	r6, #1
 800afbe:	9212      	str	r2, [sp, #72]	@ 0x48
 800afc0:	e776      	b.n	800aeb0 <_dtoa_r+0x100>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e7b7      	b.n	800af36 <_dtoa_r+0x186>
 800afc6:	9010      	str	r0, [sp, #64]	@ 0x40
 800afc8:	e7b6      	b.n	800af38 <_dtoa_r+0x188>
 800afca:	9b00      	ldr	r3, [sp, #0]
 800afcc:	1bdb      	subs	r3, r3, r7
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	427b      	negs	r3, r7
 800afd2:	9308      	str	r3, [sp, #32]
 800afd4:	2300      	movs	r3, #0
 800afd6:	930d      	str	r3, [sp, #52]	@ 0x34
 800afd8:	e7c3      	b.n	800af62 <_dtoa_r+0x1b2>
 800afda:	2301      	movs	r3, #1
 800afdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afe0:	eb07 0b03 	add.w	fp, r7, r3
 800afe4:	f10b 0301 	add.w	r3, fp, #1
 800afe8:	2b01      	cmp	r3, #1
 800afea:	9303      	str	r3, [sp, #12]
 800afec:	bfb8      	it	lt
 800afee:	2301      	movlt	r3, #1
 800aff0:	e006      	b.n	800b000 <_dtoa_r+0x250>
 800aff2:	2301      	movs	r3, #1
 800aff4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aff6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aff8:	2b00      	cmp	r3, #0
 800affa:	dd28      	ble.n	800b04e <_dtoa_r+0x29e>
 800affc:	469b      	mov	fp, r3
 800affe:	9303      	str	r3, [sp, #12]
 800b000:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b004:	2100      	movs	r1, #0
 800b006:	2204      	movs	r2, #4
 800b008:	f102 0514 	add.w	r5, r2, #20
 800b00c:	429d      	cmp	r5, r3
 800b00e:	d926      	bls.n	800b05e <_dtoa_r+0x2ae>
 800b010:	6041      	str	r1, [r0, #4]
 800b012:	4648      	mov	r0, r9
 800b014:	f000 fd9c 	bl	800bb50 <_Balloc>
 800b018:	4682      	mov	sl, r0
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d142      	bne.n	800b0a4 <_dtoa_r+0x2f4>
 800b01e:	4b1e      	ldr	r3, [pc, #120]	@ (800b098 <_dtoa_r+0x2e8>)
 800b020:	4602      	mov	r2, r0
 800b022:	f240 11af 	movw	r1, #431	@ 0x1af
 800b026:	e6da      	b.n	800adde <_dtoa_r+0x2e>
 800b028:	2300      	movs	r3, #0
 800b02a:	e7e3      	b.n	800aff4 <_dtoa_r+0x244>
 800b02c:	2300      	movs	r3, #0
 800b02e:	e7d5      	b.n	800afdc <_dtoa_r+0x22c>
 800b030:	2401      	movs	r4, #1
 800b032:	2300      	movs	r3, #0
 800b034:	9307      	str	r3, [sp, #28]
 800b036:	9409      	str	r4, [sp, #36]	@ 0x24
 800b038:	f04f 3bff 	mov.w	fp, #4294967295
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8cd b00c 	str.w	fp, [sp, #12]
 800b042:	2312      	movs	r3, #18
 800b044:	920c      	str	r2, [sp, #48]	@ 0x30
 800b046:	e7db      	b.n	800b000 <_dtoa_r+0x250>
 800b048:	2301      	movs	r3, #1
 800b04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b04c:	e7f4      	b.n	800b038 <_dtoa_r+0x288>
 800b04e:	f04f 0b01 	mov.w	fp, #1
 800b052:	f8cd b00c 	str.w	fp, [sp, #12]
 800b056:	465b      	mov	r3, fp
 800b058:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b05c:	e7d0      	b.n	800b000 <_dtoa_r+0x250>
 800b05e:	3101      	adds	r1, #1
 800b060:	0052      	lsls	r2, r2, #1
 800b062:	e7d1      	b.n	800b008 <_dtoa_r+0x258>
 800b064:	f3af 8000 	nop.w
 800b068:	636f4361 	.word	0x636f4361
 800b06c:	3fd287a7 	.word	0x3fd287a7
 800b070:	8b60c8b3 	.word	0x8b60c8b3
 800b074:	3fc68a28 	.word	0x3fc68a28
 800b078:	509f79fb 	.word	0x509f79fb
 800b07c:	3fd34413 	.word	0x3fd34413
 800b080:	0800fb0a 	.word	0x0800fb0a
 800b084:	0800fb21 	.word	0x0800fb21
 800b088:	7ff00000 	.word	0x7ff00000
 800b08c:	0800fad5 	.word	0x0800fad5
 800b090:	3ff80000 	.word	0x3ff80000
 800b094:	0800fcd0 	.word	0x0800fcd0
 800b098:	0800fb79 	.word	0x0800fb79
 800b09c:	0800fb06 	.word	0x0800fb06
 800b0a0:	0800fad4 	.word	0x0800fad4
 800b0a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b0a8:	6018      	str	r0, [r3, #0]
 800b0aa:	9b03      	ldr	r3, [sp, #12]
 800b0ac:	2b0e      	cmp	r3, #14
 800b0ae:	f200 80a1 	bhi.w	800b1f4 <_dtoa_r+0x444>
 800b0b2:	2c00      	cmp	r4, #0
 800b0b4:	f000 809e 	beq.w	800b1f4 <_dtoa_r+0x444>
 800b0b8:	2f00      	cmp	r7, #0
 800b0ba:	dd33      	ble.n	800b124 <_dtoa_r+0x374>
 800b0bc:	4b9c      	ldr	r3, [pc, #624]	@ (800b330 <_dtoa_r+0x580>)
 800b0be:	f007 020f 	and.w	r2, r7, #15
 800b0c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0c6:	ed93 7b00 	vldr	d7, [r3]
 800b0ca:	05f8      	lsls	r0, r7, #23
 800b0cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b0d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b0d4:	d516      	bpl.n	800b104 <_dtoa_r+0x354>
 800b0d6:	4b97      	ldr	r3, [pc, #604]	@ (800b334 <_dtoa_r+0x584>)
 800b0d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0e0:	f7f5 fbd4 	bl	800088c <__aeabi_ddiv>
 800b0e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0e8:	f004 040f 	and.w	r4, r4, #15
 800b0ec:	2603      	movs	r6, #3
 800b0ee:	4d91      	ldr	r5, [pc, #580]	@ (800b334 <_dtoa_r+0x584>)
 800b0f0:	b954      	cbnz	r4, 800b108 <_dtoa_r+0x358>
 800b0f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0fa:	f7f5 fbc7 	bl	800088c <__aeabi_ddiv>
 800b0fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b102:	e028      	b.n	800b156 <_dtoa_r+0x3a6>
 800b104:	2602      	movs	r6, #2
 800b106:	e7f2      	b.n	800b0ee <_dtoa_r+0x33e>
 800b108:	07e1      	lsls	r1, r4, #31
 800b10a:	d508      	bpl.n	800b11e <_dtoa_r+0x36e>
 800b10c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b110:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b114:	f7f5 fa90 	bl	8000638 <__aeabi_dmul>
 800b118:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b11c:	3601      	adds	r6, #1
 800b11e:	1064      	asrs	r4, r4, #1
 800b120:	3508      	adds	r5, #8
 800b122:	e7e5      	b.n	800b0f0 <_dtoa_r+0x340>
 800b124:	f000 80af 	beq.w	800b286 <_dtoa_r+0x4d6>
 800b128:	427c      	negs	r4, r7
 800b12a:	4b81      	ldr	r3, [pc, #516]	@ (800b330 <_dtoa_r+0x580>)
 800b12c:	4d81      	ldr	r5, [pc, #516]	@ (800b334 <_dtoa_r+0x584>)
 800b12e:	f004 020f 	and.w	r2, r4, #15
 800b132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b13e:	f7f5 fa7b 	bl	8000638 <__aeabi_dmul>
 800b142:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b146:	1124      	asrs	r4, r4, #4
 800b148:	2300      	movs	r3, #0
 800b14a:	2602      	movs	r6, #2
 800b14c:	2c00      	cmp	r4, #0
 800b14e:	f040 808f 	bne.w	800b270 <_dtoa_r+0x4c0>
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1d3      	bne.n	800b0fe <_dtoa_r+0x34e>
 800b156:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b158:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 8094 	beq.w	800b28a <_dtoa_r+0x4da>
 800b162:	4b75      	ldr	r3, [pc, #468]	@ (800b338 <_dtoa_r+0x588>)
 800b164:	2200      	movs	r2, #0
 800b166:	4620      	mov	r0, r4
 800b168:	4629      	mov	r1, r5
 800b16a:	f7f5 fcd7 	bl	8000b1c <__aeabi_dcmplt>
 800b16e:	2800      	cmp	r0, #0
 800b170:	f000 808b 	beq.w	800b28a <_dtoa_r+0x4da>
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 8087 	beq.w	800b28a <_dtoa_r+0x4da>
 800b17c:	f1bb 0f00 	cmp.w	fp, #0
 800b180:	dd34      	ble.n	800b1ec <_dtoa_r+0x43c>
 800b182:	4620      	mov	r0, r4
 800b184:	4b6d      	ldr	r3, [pc, #436]	@ (800b33c <_dtoa_r+0x58c>)
 800b186:	2200      	movs	r2, #0
 800b188:	4629      	mov	r1, r5
 800b18a:	f7f5 fa55 	bl	8000638 <__aeabi_dmul>
 800b18e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b192:	f107 38ff 	add.w	r8, r7, #4294967295
 800b196:	3601      	adds	r6, #1
 800b198:	465c      	mov	r4, fp
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7f5 f9e2 	bl	8000564 <__aeabi_i2d>
 800b1a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1a4:	f7f5 fa48 	bl	8000638 <__aeabi_dmul>
 800b1a8:	4b65      	ldr	r3, [pc, #404]	@ (800b340 <_dtoa_r+0x590>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f7f5 f88e 	bl	80002cc <__adddf3>
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b1b6:	2c00      	cmp	r4, #0
 800b1b8:	d16a      	bne.n	800b290 <_dtoa_r+0x4e0>
 800b1ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1be:	4b61      	ldr	r3, [pc, #388]	@ (800b344 <_dtoa_r+0x594>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f7f5 f881 	bl	80002c8 <__aeabi_dsub>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1ce:	462a      	mov	r2, r5
 800b1d0:	4633      	mov	r3, r6
 800b1d2:	f7f5 fcc1 	bl	8000b58 <__aeabi_dcmpgt>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f040 8298 	bne.w	800b70c <_dtoa_r+0x95c>
 800b1dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b1e6:	f7f5 fc99 	bl	8000b1c <__aeabi_dcmplt>
 800b1ea:	bb38      	cbnz	r0, 800b23c <_dtoa_r+0x48c>
 800b1ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b1f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b1f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f2c0 8157 	blt.w	800b4aa <_dtoa_r+0x6fa>
 800b1fc:	2f0e      	cmp	r7, #14
 800b1fe:	f300 8154 	bgt.w	800b4aa <_dtoa_r+0x6fa>
 800b202:	4b4b      	ldr	r3, [pc, #300]	@ (800b330 <_dtoa_r+0x580>)
 800b204:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b208:	ed93 7b00 	vldr	d7, [r3]
 800b20c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b20e:	2b00      	cmp	r3, #0
 800b210:	ed8d 7b00 	vstr	d7, [sp]
 800b214:	f280 80e5 	bge.w	800b3e2 <_dtoa_r+0x632>
 800b218:	9b03      	ldr	r3, [sp, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f300 80e1 	bgt.w	800b3e2 <_dtoa_r+0x632>
 800b220:	d10c      	bne.n	800b23c <_dtoa_r+0x48c>
 800b222:	4b48      	ldr	r3, [pc, #288]	@ (800b344 <_dtoa_r+0x594>)
 800b224:	2200      	movs	r2, #0
 800b226:	ec51 0b17 	vmov	r0, r1, d7
 800b22a:	f7f5 fa05 	bl	8000638 <__aeabi_dmul>
 800b22e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b232:	f7f5 fc87 	bl	8000b44 <__aeabi_dcmpge>
 800b236:	2800      	cmp	r0, #0
 800b238:	f000 8266 	beq.w	800b708 <_dtoa_r+0x958>
 800b23c:	2400      	movs	r4, #0
 800b23e:	4625      	mov	r5, r4
 800b240:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b242:	4656      	mov	r6, sl
 800b244:	ea6f 0803 	mvn.w	r8, r3
 800b248:	2700      	movs	r7, #0
 800b24a:	4621      	mov	r1, r4
 800b24c:	4648      	mov	r0, r9
 800b24e:	f000 fcbf 	bl	800bbd0 <_Bfree>
 800b252:	2d00      	cmp	r5, #0
 800b254:	f000 80bd 	beq.w	800b3d2 <_dtoa_r+0x622>
 800b258:	b12f      	cbz	r7, 800b266 <_dtoa_r+0x4b6>
 800b25a:	42af      	cmp	r7, r5
 800b25c:	d003      	beq.n	800b266 <_dtoa_r+0x4b6>
 800b25e:	4639      	mov	r1, r7
 800b260:	4648      	mov	r0, r9
 800b262:	f000 fcb5 	bl	800bbd0 <_Bfree>
 800b266:	4629      	mov	r1, r5
 800b268:	4648      	mov	r0, r9
 800b26a:	f000 fcb1 	bl	800bbd0 <_Bfree>
 800b26e:	e0b0      	b.n	800b3d2 <_dtoa_r+0x622>
 800b270:	07e2      	lsls	r2, r4, #31
 800b272:	d505      	bpl.n	800b280 <_dtoa_r+0x4d0>
 800b274:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b278:	f7f5 f9de 	bl	8000638 <__aeabi_dmul>
 800b27c:	3601      	adds	r6, #1
 800b27e:	2301      	movs	r3, #1
 800b280:	1064      	asrs	r4, r4, #1
 800b282:	3508      	adds	r5, #8
 800b284:	e762      	b.n	800b14c <_dtoa_r+0x39c>
 800b286:	2602      	movs	r6, #2
 800b288:	e765      	b.n	800b156 <_dtoa_r+0x3a6>
 800b28a:	9c03      	ldr	r4, [sp, #12]
 800b28c:	46b8      	mov	r8, r7
 800b28e:	e784      	b.n	800b19a <_dtoa_r+0x3ea>
 800b290:	4b27      	ldr	r3, [pc, #156]	@ (800b330 <_dtoa_r+0x580>)
 800b292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b294:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b29c:	4454      	add	r4, sl
 800b29e:	2900      	cmp	r1, #0
 800b2a0:	d054      	beq.n	800b34c <_dtoa_r+0x59c>
 800b2a2:	4929      	ldr	r1, [pc, #164]	@ (800b348 <_dtoa_r+0x598>)
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	f7f5 faf1 	bl	800088c <__aeabi_ddiv>
 800b2aa:	4633      	mov	r3, r6
 800b2ac:	462a      	mov	r2, r5
 800b2ae:	f7f5 f80b 	bl	80002c8 <__aeabi_dsub>
 800b2b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b2b6:	4656      	mov	r6, sl
 800b2b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2bc:	f7f5 fc6c 	bl	8000b98 <__aeabi_d2iz>
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	f7f5 f94f 	bl	8000564 <__aeabi_i2d>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2ce:	f7f4 fffb 	bl	80002c8 <__aeabi_dsub>
 800b2d2:	3530      	adds	r5, #48	@ 0x30
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2dc:	f806 5b01 	strb.w	r5, [r6], #1
 800b2e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2e4:	f7f5 fc1a 	bl	8000b1c <__aeabi_dcmplt>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d172      	bne.n	800b3d2 <_dtoa_r+0x622>
 800b2ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2f0:	4911      	ldr	r1, [pc, #68]	@ (800b338 <_dtoa_r+0x588>)
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	f7f4 ffe8 	bl	80002c8 <__aeabi_dsub>
 800b2f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2fc:	f7f5 fc0e 	bl	8000b1c <__aeabi_dcmplt>
 800b300:	2800      	cmp	r0, #0
 800b302:	f040 80b4 	bne.w	800b46e <_dtoa_r+0x6be>
 800b306:	42a6      	cmp	r6, r4
 800b308:	f43f af70 	beq.w	800b1ec <_dtoa_r+0x43c>
 800b30c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b310:	4b0a      	ldr	r3, [pc, #40]	@ (800b33c <_dtoa_r+0x58c>)
 800b312:	2200      	movs	r2, #0
 800b314:	f7f5 f990 	bl	8000638 <__aeabi_dmul>
 800b318:	4b08      	ldr	r3, [pc, #32]	@ (800b33c <_dtoa_r+0x58c>)
 800b31a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b31e:	2200      	movs	r2, #0
 800b320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b324:	f7f5 f988 	bl	8000638 <__aeabi_dmul>
 800b328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b32c:	e7c4      	b.n	800b2b8 <_dtoa_r+0x508>
 800b32e:	bf00      	nop
 800b330:	0800fcd0 	.word	0x0800fcd0
 800b334:	0800fca8 	.word	0x0800fca8
 800b338:	3ff00000 	.word	0x3ff00000
 800b33c:	40240000 	.word	0x40240000
 800b340:	401c0000 	.word	0x401c0000
 800b344:	40140000 	.word	0x40140000
 800b348:	3fe00000 	.word	0x3fe00000
 800b34c:	4631      	mov	r1, r6
 800b34e:	4628      	mov	r0, r5
 800b350:	f7f5 f972 	bl	8000638 <__aeabi_dmul>
 800b354:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b358:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b35a:	4656      	mov	r6, sl
 800b35c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b360:	f7f5 fc1a 	bl	8000b98 <__aeabi_d2iz>
 800b364:	4605      	mov	r5, r0
 800b366:	f7f5 f8fd 	bl	8000564 <__aeabi_i2d>
 800b36a:	4602      	mov	r2, r0
 800b36c:	460b      	mov	r3, r1
 800b36e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b372:	f7f4 ffa9 	bl	80002c8 <__aeabi_dsub>
 800b376:	3530      	adds	r5, #48	@ 0x30
 800b378:	f806 5b01 	strb.w	r5, [r6], #1
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	42a6      	cmp	r6, r4
 800b382:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b386:	f04f 0200 	mov.w	r2, #0
 800b38a:	d124      	bne.n	800b3d6 <_dtoa_r+0x626>
 800b38c:	4baf      	ldr	r3, [pc, #700]	@ (800b64c <_dtoa_r+0x89c>)
 800b38e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b392:	f7f4 ff9b 	bl	80002cc <__adddf3>
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b39e:	f7f5 fbdb 	bl	8000b58 <__aeabi_dcmpgt>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d163      	bne.n	800b46e <_dtoa_r+0x6be>
 800b3a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b3aa:	49a8      	ldr	r1, [pc, #672]	@ (800b64c <_dtoa_r+0x89c>)
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	f7f4 ff8b 	bl	80002c8 <__aeabi_dsub>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3ba:	f7f5 fbaf 	bl	8000b1c <__aeabi_dcmplt>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	f43f af14 	beq.w	800b1ec <_dtoa_r+0x43c>
 800b3c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b3c6:	1e73      	subs	r3, r6, #1
 800b3c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3ce:	2b30      	cmp	r3, #48	@ 0x30
 800b3d0:	d0f8      	beq.n	800b3c4 <_dtoa_r+0x614>
 800b3d2:	4647      	mov	r7, r8
 800b3d4:	e03b      	b.n	800b44e <_dtoa_r+0x69e>
 800b3d6:	4b9e      	ldr	r3, [pc, #632]	@ (800b650 <_dtoa_r+0x8a0>)
 800b3d8:	f7f5 f92e 	bl	8000638 <__aeabi_dmul>
 800b3dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3e0:	e7bc      	b.n	800b35c <_dtoa_r+0x5ac>
 800b3e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b3e6:	4656      	mov	r6, sl
 800b3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f7f5 fa4c 	bl	800088c <__aeabi_ddiv>
 800b3f4:	f7f5 fbd0 	bl	8000b98 <__aeabi_d2iz>
 800b3f8:	4680      	mov	r8, r0
 800b3fa:	f7f5 f8b3 	bl	8000564 <__aeabi_i2d>
 800b3fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b402:	f7f5 f919 	bl	8000638 <__aeabi_dmul>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4620      	mov	r0, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b412:	f7f4 ff59 	bl	80002c8 <__aeabi_dsub>
 800b416:	f806 4b01 	strb.w	r4, [r6], #1
 800b41a:	9d03      	ldr	r5, [sp, #12]
 800b41c:	eba6 040a 	sub.w	r4, r6, sl
 800b420:	42a5      	cmp	r5, r4
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	d133      	bne.n	800b490 <_dtoa_r+0x6e0>
 800b428:	f7f4 ff50 	bl	80002cc <__adddf3>
 800b42c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	f7f5 fb90 	bl	8000b58 <__aeabi_dcmpgt>
 800b438:	b9c0      	cbnz	r0, 800b46c <_dtoa_r+0x6bc>
 800b43a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f5 fb61 	bl	8000b08 <__aeabi_dcmpeq>
 800b446:	b110      	cbz	r0, 800b44e <_dtoa_r+0x69e>
 800b448:	f018 0f01 	tst.w	r8, #1
 800b44c:	d10e      	bne.n	800b46c <_dtoa_r+0x6bc>
 800b44e:	9902      	ldr	r1, [sp, #8]
 800b450:	4648      	mov	r0, r9
 800b452:	f000 fbbd 	bl	800bbd0 <_Bfree>
 800b456:	2300      	movs	r3, #0
 800b458:	7033      	strb	r3, [r6, #0]
 800b45a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b45c:	3701      	adds	r7, #1
 800b45e:	601f      	str	r7, [r3, #0]
 800b460:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b462:	2b00      	cmp	r3, #0
 800b464:	f000 824b 	beq.w	800b8fe <_dtoa_r+0xb4e>
 800b468:	601e      	str	r6, [r3, #0]
 800b46a:	e248      	b.n	800b8fe <_dtoa_r+0xb4e>
 800b46c:	46b8      	mov	r8, r7
 800b46e:	4633      	mov	r3, r6
 800b470:	461e      	mov	r6, r3
 800b472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b476:	2a39      	cmp	r2, #57	@ 0x39
 800b478:	d106      	bne.n	800b488 <_dtoa_r+0x6d8>
 800b47a:	459a      	cmp	sl, r3
 800b47c:	d1f8      	bne.n	800b470 <_dtoa_r+0x6c0>
 800b47e:	2230      	movs	r2, #48	@ 0x30
 800b480:	f108 0801 	add.w	r8, r8, #1
 800b484:	f88a 2000 	strb.w	r2, [sl]
 800b488:	781a      	ldrb	r2, [r3, #0]
 800b48a:	3201      	adds	r2, #1
 800b48c:	701a      	strb	r2, [r3, #0]
 800b48e:	e7a0      	b.n	800b3d2 <_dtoa_r+0x622>
 800b490:	4b6f      	ldr	r3, [pc, #444]	@ (800b650 <_dtoa_r+0x8a0>)
 800b492:	2200      	movs	r2, #0
 800b494:	f7f5 f8d0 	bl	8000638 <__aeabi_dmul>
 800b498:	2200      	movs	r2, #0
 800b49a:	2300      	movs	r3, #0
 800b49c:	4604      	mov	r4, r0
 800b49e:	460d      	mov	r5, r1
 800b4a0:	f7f5 fb32 	bl	8000b08 <__aeabi_dcmpeq>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d09f      	beq.n	800b3e8 <_dtoa_r+0x638>
 800b4a8:	e7d1      	b.n	800b44e <_dtoa_r+0x69e>
 800b4aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4ac:	2a00      	cmp	r2, #0
 800b4ae:	f000 80ea 	beq.w	800b686 <_dtoa_r+0x8d6>
 800b4b2:	9a07      	ldr	r2, [sp, #28]
 800b4b4:	2a01      	cmp	r2, #1
 800b4b6:	f300 80cd 	bgt.w	800b654 <_dtoa_r+0x8a4>
 800b4ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b4bc:	2a00      	cmp	r2, #0
 800b4be:	f000 80c1 	beq.w	800b644 <_dtoa_r+0x894>
 800b4c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b4c6:	9c08      	ldr	r4, [sp, #32]
 800b4c8:	9e00      	ldr	r6, [sp, #0]
 800b4ca:	9a00      	ldr	r2, [sp, #0]
 800b4cc:	441a      	add	r2, r3
 800b4ce:	9200      	str	r2, [sp, #0]
 800b4d0:	9a06      	ldr	r2, [sp, #24]
 800b4d2:	2101      	movs	r1, #1
 800b4d4:	441a      	add	r2, r3
 800b4d6:	4648      	mov	r0, r9
 800b4d8:	9206      	str	r2, [sp, #24]
 800b4da:	f000 fc77 	bl	800bdcc <__i2b>
 800b4de:	4605      	mov	r5, r0
 800b4e0:	b166      	cbz	r6, 800b4fc <_dtoa_r+0x74c>
 800b4e2:	9b06      	ldr	r3, [sp, #24]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	dd09      	ble.n	800b4fc <_dtoa_r+0x74c>
 800b4e8:	42b3      	cmp	r3, r6
 800b4ea:	9a00      	ldr	r2, [sp, #0]
 800b4ec:	bfa8      	it	ge
 800b4ee:	4633      	movge	r3, r6
 800b4f0:	1ad2      	subs	r2, r2, r3
 800b4f2:	9200      	str	r2, [sp, #0]
 800b4f4:	9a06      	ldr	r2, [sp, #24]
 800b4f6:	1af6      	subs	r6, r6, r3
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	9306      	str	r3, [sp, #24]
 800b4fc:	9b08      	ldr	r3, [sp, #32]
 800b4fe:	b30b      	cbz	r3, 800b544 <_dtoa_r+0x794>
 800b500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 80c6 	beq.w	800b694 <_dtoa_r+0x8e4>
 800b508:	2c00      	cmp	r4, #0
 800b50a:	f000 80c0 	beq.w	800b68e <_dtoa_r+0x8de>
 800b50e:	4629      	mov	r1, r5
 800b510:	4622      	mov	r2, r4
 800b512:	4648      	mov	r0, r9
 800b514:	f000 fd12 	bl	800bf3c <__pow5mult>
 800b518:	9a02      	ldr	r2, [sp, #8]
 800b51a:	4601      	mov	r1, r0
 800b51c:	4605      	mov	r5, r0
 800b51e:	4648      	mov	r0, r9
 800b520:	f000 fc6a 	bl	800bdf8 <__multiply>
 800b524:	9902      	ldr	r1, [sp, #8]
 800b526:	4680      	mov	r8, r0
 800b528:	4648      	mov	r0, r9
 800b52a:	f000 fb51 	bl	800bbd0 <_Bfree>
 800b52e:	9b08      	ldr	r3, [sp, #32]
 800b530:	1b1b      	subs	r3, r3, r4
 800b532:	9308      	str	r3, [sp, #32]
 800b534:	f000 80b1 	beq.w	800b69a <_dtoa_r+0x8ea>
 800b538:	9a08      	ldr	r2, [sp, #32]
 800b53a:	4641      	mov	r1, r8
 800b53c:	4648      	mov	r0, r9
 800b53e:	f000 fcfd 	bl	800bf3c <__pow5mult>
 800b542:	9002      	str	r0, [sp, #8]
 800b544:	2101      	movs	r1, #1
 800b546:	4648      	mov	r0, r9
 800b548:	f000 fc40 	bl	800bdcc <__i2b>
 800b54c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b54e:	4604      	mov	r4, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 81d8 	beq.w	800b906 <_dtoa_r+0xb56>
 800b556:	461a      	mov	r2, r3
 800b558:	4601      	mov	r1, r0
 800b55a:	4648      	mov	r0, r9
 800b55c:	f000 fcee 	bl	800bf3c <__pow5mult>
 800b560:	9b07      	ldr	r3, [sp, #28]
 800b562:	2b01      	cmp	r3, #1
 800b564:	4604      	mov	r4, r0
 800b566:	f300 809f 	bgt.w	800b6a8 <_dtoa_r+0x8f8>
 800b56a:	9b04      	ldr	r3, [sp, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f040 8097 	bne.w	800b6a0 <_dtoa_r+0x8f0>
 800b572:	9b05      	ldr	r3, [sp, #20]
 800b574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f040 8093 	bne.w	800b6a4 <_dtoa_r+0x8f4>
 800b57e:	9b05      	ldr	r3, [sp, #20]
 800b580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b584:	0d1b      	lsrs	r3, r3, #20
 800b586:	051b      	lsls	r3, r3, #20
 800b588:	b133      	cbz	r3, 800b598 <_dtoa_r+0x7e8>
 800b58a:	9b00      	ldr	r3, [sp, #0]
 800b58c:	3301      	adds	r3, #1
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	9b06      	ldr	r3, [sp, #24]
 800b592:	3301      	adds	r3, #1
 800b594:	9306      	str	r3, [sp, #24]
 800b596:	2301      	movs	r3, #1
 800b598:	9308      	str	r3, [sp, #32]
 800b59a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 81b8 	beq.w	800b912 <_dtoa_r+0xb62>
 800b5a2:	6923      	ldr	r3, [r4, #16]
 800b5a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5a8:	6918      	ldr	r0, [r3, #16]
 800b5aa:	f000 fbc3 	bl	800bd34 <__hi0bits>
 800b5ae:	f1c0 0020 	rsb	r0, r0, #32
 800b5b2:	9b06      	ldr	r3, [sp, #24]
 800b5b4:	4418      	add	r0, r3
 800b5b6:	f010 001f 	ands.w	r0, r0, #31
 800b5ba:	f000 8082 	beq.w	800b6c2 <_dtoa_r+0x912>
 800b5be:	f1c0 0320 	rsb	r3, r0, #32
 800b5c2:	2b04      	cmp	r3, #4
 800b5c4:	dd73      	ble.n	800b6ae <_dtoa_r+0x8fe>
 800b5c6:	9b00      	ldr	r3, [sp, #0]
 800b5c8:	f1c0 001c 	rsb	r0, r0, #28
 800b5cc:	4403      	add	r3, r0
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	9b06      	ldr	r3, [sp, #24]
 800b5d2:	4403      	add	r3, r0
 800b5d4:	4406      	add	r6, r0
 800b5d6:	9306      	str	r3, [sp, #24]
 800b5d8:	9b00      	ldr	r3, [sp, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	dd05      	ble.n	800b5ea <_dtoa_r+0x83a>
 800b5de:	9902      	ldr	r1, [sp, #8]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	4648      	mov	r0, r9
 800b5e4:	f000 fd04 	bl	800bff0 <__lshift>
 800b5e8:	9002      	str	r0, [sp, #8]
 800b5ea:	9b06      	ldr	r3, [sp, #24]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	dd05      	ble.n	800b5fc <_dtoa_r+0x84c>
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	4648      	mov	r0, r9
 800b5f6:	f000 fcfb 	bl	800bff0 <__lshift>
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d061      	beq.n	800b6c6 <_dtoa_r+0x916>
 800b602:	9802      	ldr	r0, [sp, #8]
 800b604:	4621      	mov	r1, r4
 800b606:	f000 fd5f 	bl	800c0c8 <__mcmp>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	da5b      	bge.n	800b6c6 <_dtoa_r+0x916>
 800b60e:	2300      	movs	r3, #0
 800b610:	9902      	ldr	r1, [sp, #8]
 800b612:	220a      	movs	r2, #10
 800b614:	4648      	mov	r0, r9
 800b616:	f000 fafd 	bl	800bc14 <__multadd>
 800b61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b61c:	9002      	str	r0, [sp, #8]
 800b61e:	f107 38ff 	add.w	r8, r7, #4294967295
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 8177 	beq.w	800b916 <_dtoa_r+0xb66>
 800b628:	4629      	mov	r1, r5
 800b62a:	2300      	movs	r3, #0
 800b62c:	220a      	movs	r2, #10
 800b62e:	4648      	mov	r0, r9
 800b630:	f000 faf0 	bl	800bc14 <__multadd>
 800b634:	f1bb 0f00 	cmp.w	fp, #0
 800b638:	4605      	mov	r5, r0
 800b63a:	dc6f      	bgt.n	800b71c <_dtoa_r+0x96c>
 800b63c:	9b07      	ldr	r3, [sp, #28]
 800b63e:	2b02      	cmp	r3, #2
 800b640:	dc49      	bgt.n	800b6d6 <_dtoa_r+0x926>
 800b642:	e06b      	b.n	800b71c <_dtoa_r+0x96c>
 800b644:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b646:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b64a:	e73c      	b.n	800b4c6 <_dtoa_r+0x716>
 800b64c:	3fe00000 	.word	0x3fe00000
 800b650:	40240000 	.word	0x40240000
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	1e5c      	subs	r4, r3, #1
 800b658:	9b08      	ldr	r3, [sp, #32]
 800b65a:	42a3      	cmp	r3, r4
 800b65c:	db09      	blt.n	800b672 <_dtoa_r+0x8c2>
 800b65e:	1b1c      	subs	r4, r3, r4
 800b660:	9b03      	ldr	r3, [sp, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f6bf af30 	bge.w	800b4c8 <_dtoa_r+0x718>
 800b668:	9b00      	ldr	r3, [sp, #0]
 800b66a:	9a03      	ldr	r2, [sp, #12]
 800b66c:	1a9e      	subs	r6, r3, r2
 800b66e:	2300      	movs	r3, #0
 800b670:	e72b      	b.n	800b4ca <_dtoa_r+0x71a>
 800b672:	9b08      	ldr	r3, [sp, #32]
 800b674:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b676:	9408      	str	r4, [sp, #32]
 800b678:	1ae3      	subs	r3, r4, r3
 800b67a:	441a      	add	r2, r3
 800b67c:	9e00      	ldr	r6, [sp, #0]
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	920d      	str	r2, [sp, #52]	@ 0x34
 800b682:	2400      	movs	r4, #0
 800b684:	e721      	b.n	800b4ca <_dtoa_r+0x71a>
 800b686:	9c08      	ldr	r4, [sp, #32]
 800b688:	9e00      	ldr	r6, [sp, #0]
 800b68a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b68c:	e728      	b.n	800b4e0 <_dtoa_r+0x730>
 800b68e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b692:	e751      	b.n	800b538 <_dtoa_r+0x788>
 800b694:	9a08      	ldr	r2, [sp, #32]
 800b696:	9902      	ldr	r1, [sp, #8]
 800b698:	e750      	b.n	800b53c <_dtoa_r+0x78c>
 800b69a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b69e:	e751      	b.n	800b544 <_dtoa_r+0x794>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e779      	b.n	800b598 <_dtoa_r+0x7e8>
 800b6a4:	9b04      	ldr	r3, [sp, #16]
 800b6a6:	e777      	b.n	800b598 <_dtoa_r+0x7e8>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	9308      	str	r3, [sp, #32]
 800b6ac:	e779      	b.n	800b5a2 <_dtoa_r+0x7f2>
 800b6ae:	d093      	beq.n	800b5d8 <_dtoa_r+0x828>
 800b6b0:	9a00      	ldr	r2, [sp, #0]
 800b6b2:	331c      	adds	r3, #28
 800b6b4:	441a      	add	r2, r3
 800b6b6:	9200      	str	r2, [sp, #0]
 800b6b8:	9a06      	ldr	r2, [sp, #24]
 800b6ba:	441a      	add	r2, r3
 800b6bc:	441e      	add	r6, r3
 800b6be:	9206      	str	r2, [sp, #24]
 800b6c0:	e78a      	b.n	800b5d8 <_dtoa_r+0x828>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	e7f4      	b.n	800b6b0 <_dtoa_r+0x900>
 800b6c6:	9b03      	ldr	r3, [sp, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	46b8      	mov	r8, r7
 800b6cc:	dc20      	bgt.n	800b710 <_dtoa_r+0x960>
 800b6ce:	469b      	mov	fp, r3
 800b6d0:	9b07      	ldr	r3, [sp, #28]
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	dd1e      	ble.n	800b714 <_dtoa_r+0x964>
 800b6d6:	f1bb 0f00 	cmp.w	fp, #0
 800b6da:	f47f adb1 	bne.w	800b240 <_dtoa_r+0x490>
 800b6de:	4621      	mov	r1, r4
 800b6e0:	465b      	mov	r3, fp
 800b6e2:	2205      	movs	r2, #5
 800b6e4:	4648      	mov	r0, r9
 800b6e6:	f000 fa95 	bl	800bc14 <__multadd>
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	9802      	ldr	r0, [sp, #8]
 800b6f0:	f000 fcea 	bl	800c0c8 <__mcmp>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	f77f ada3 	ble.w	800b240 <_dtoa_r+0x490>
 800b6fa:	4656      	mov	r6, sl
 800b6fc:	2331      	movs	r3, #49	@ 0x31
 800b6fe:	f806 3b01 	strb.w	r3, [r6], #1
 800b702:	f108 0801 	add.w	r8, r8, #1
 800b706:	e59f      	b.n	800b248 <_dtoa_r+0x498>
 800b708:	9c03      	ldr	r4, [sp, #12]
 800b70a:	46b8      	mov	r8, r7
 800b70c:	4625      	mov	r5, r4
 800b70e:	e7f4      	b.n	800b6fa <_dtoa_r+0x94a>
 800b710:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 8101 	beq.w	800b91e <_dtoa_r+0xb6e>
 800b71c:	2e00      	cmp	r6, #0
 800b71e:	dd05      	ble.n	800b72c <_dtoa_r+0x97c>
 800b720:	4629      	mov	r1, r5
 800b722:	4632      	mov	r2, r6
 800b724:	4648      	mov	r0, r9
 800b726:	f000 fc63 	bl	800bff0 <__lshift>
 800b72a:	4605      	mov	r5, r0
 800b72c:	9b08      	ldr	r3, [sp, #32]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d05c      	beq.n	800b7ec <_dtoa_r+0xa3c>
 800b732:	6869      	ldr	r1, [r5, #4]
 800b734:	4648      	mov	r0, r9
 800b736:	f000 fa0b 	bl	800bb50 <_Balloc>
 800b73a:	4606      	mov	r6, r0
 800b73c:	b928      	cbnz	r0, 800b74a <_dtoa_r+0x99a>
 800b73e:	4b82      	ldr	r3, [pc, #520]	@ (800b948 <_dtoa_r+0xb98>)
 800b740:	4602      	mov	r2, r0
 800b742:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b746:	f7ff bb4a 	b.w	800adde <_dtoa_r+0x2e>
 800b74a:	692a      	ldr	r2, [r5, #16]
 800b74c:	3202      	adds	r2, #2
 800b74e:	0092      	lsls	r2, r2, #2
 800b750:	f105 010c 	add.w	r1, r5, #12
 800b754:	300c      	adds	r0, #12
 800b756:	f7ff fa8c 	bl	800ac72 <memcpy>
 800b75a:	2201      	movs	r2, #1
 800b75c:	4631      	mov	r1, r6
 800b75e:	4648      	mov	r0, r9
 800b760:	f000 fc46 	bl	800bff0 <__lshift>
 800b764:	f10a 0301 	add.w	r3, sl, #1
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	eb0a 030b 	add.w	r3, sl, fp
 800b76e:	9308      	str	r3, [sp, #32]
 800b770:	9b04      	ldr	r3, [sp, #16]
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	462f      	mov	r7, r5
 800b778:	9306      	str	r3, [sp, #24]
 800b77a:	4605      	mov	r5, r0
 800b77c:	9b00      	ldr	r3, [sp, #0]
 800b77e:	9802      	ldr	r0, [sp, #8]
 800b780:	4621      	mov	r1, r4
 800b782:	f103 3bff 	add.w	fp, r3, #4294967295
 800b786:	f7ff fa89 	bl	800ac9c <quorem>
 800b78a:	4603      	mov	r3, r0
 800b78c:	3330      	adds	r3, #48	@ 0x30
 800b78e:	9003      	str	r0, [sp, #12]
 800b790:	4639      	mov	r1, r7
 800b792:	9802      	ldr	r0, [sp, #8]
 800b794:	9309      	str	r3, [sp, #36]	@ 0x24
 800b796:	f000 fc97 	bl	800c0c8 <__mcmp>
 800b79a:	462a      	mov	r2, r5
 800b79c:	9004      	str	r0, [sp, #16]
 800b79e:	4621      	mov	r1, r4
 800b7a0:	4648      	mov	r0, r9
 800b7a2:	f000 fcad 	bl	800c100 <__mdiff>
 800b7a6:	68c2      	ldr	r2, [r0, #12]
 800b7a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	bb02      	cbnz	r2, 800b7f0 <_dtoa_r+0xa40>
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	9802      	ldr	r0, [sp, #8]
 800b7b2:	f000 fc89 	bl	800c0c8 <__mcmp>
 800b7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4648      	mov	r0, r9
 800b7be:	920c      	str	r2, [sp, #48]	@ 0x30
 800b7c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7c2:	f000 fa05 	bl	800bbd0 <_Bfree>
 800b7c6:	9b07      	ldr	r3, [sp, #28]
 800b7c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b7ca:	9e00      	ldr	r6, [sp, #0]
 800b7cc:	ea42 0103 	orr.w	r1, r2, r3
 800b7d0:	9b06      	ldr	r3, [sp, #24]
 800b7d2:	4319      	orrs	r1, r3
 800b7d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7d6:	d10d      	bne.n	800b7f4 <_dtoa_r+0xa44>
 800b7d8:	2b39      	cmp	r3, #57	@ 0x39
 800b7da:	d027      	beq.n	800b82c <_dtoa_r+0xa7c>
 800b7dc:	9a04      	ldr	r2, [sp, #16]
 800b7de:	2a00      	cmp	r2, #0
 800b7e0:	dd01      	ble.n	800b7e6 <_dtoa_r+0xa36>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	3331      	adds	r3, #49	@ 0x31
 800b7e6:	f88b 3000 	strb.w	r3, [fp]
 800b7ea:	e52e      	b.n	800b24a <_dtoa_r+0x49a>
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	e7b9      	b.n	800b764 <_dtoa_r+0x9b4>
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	e7e2      	b.n	800b7ba <_dtoa_r+0xa0a>
 800b7f4:	9904      	ldr	r1, [sp, #16]
 800b7f6:	2900      	cmp	r1, #0
 800b7f8:	db04      	blt.n	800b804 <_dtoa_r+0xa54>
 800b7fa:	9807      	ldr	r0, [sp, #28]
 800b7fc:	4301      	orrs	r1, r0
 800b7fe:	9806      	ldr	r0, [sp, #24]
 800b800:	4301      	orrs	r1, r0
 800b802:	d120      	bne.n	800b846 <_dtoa_r+0xa96>
 800b804:	2a00      	cmp	r2, #0
 800b806:	ddee      	ble.n	800b7e6 <_dtoa_r+0xa36>
 800b808:	9902      	ldr	r1, [sp, #8]
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	2201      	movs	r2, #1
 800b80e:	4648      	mov	r0, r9
 800b810:	f000 fbee 	bl	800bff0 <__lshift>
 800b814:	4621      	mov	r1, r4
 800b816:	9002      	str	r0, [sp, #8]
 800b818:	f000 fc56 	bl	800c0c8 <__mcmp>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	9b00      	ldr	r3, [sp, #0]
 800b820:	dc02      	bgt.n	800b828 <_dtoa_r+0xa78>
 800b822:	d1e0      	bne.n	800b7e6 <_dtoa_r+0xa36>
 800b824:	07da      	lsls	r2, r3, #31
 800b826:	d5de      	bpl.n	800b7e6 <_dtoa_r+0xa36>
 800b828:	2b39      	cmp	r3, #57	@ 0x39
 800b82a:	d1da      	bne.n	800b7e2 <_dtoa_r+0xa32>
 800b82c:	2339      	movs	r3, #57	@ 0x39
 800b82e:	f88b 3000 	strb.w	r3, [fp]
 800b832:	4633      	mov	r3, r6
 800b834:	461e      	mov	r6, r3
 800b836:	3b01      	subs	r3, #1
 800b838:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b83c:	2a39      	cmp	r2, #57	@ 0x39
 800b83e:	d04e      	beq.n	800b8de <_dtoa_r+0xb2e>
 800b840:	3201      	adds	r2, #1
 800b842:	701a      	strb	r2, [r3, #0]
 800b844:	e501      	b.n	800b24a <_dtoa_r+0x49a>
 800b846:	2a00      	cmp	r2, #0
 800b848:	dd03      	ble.n	800b852 <_dtoa_r+0xaa2>
 800b84a:	2b39      	cmp	r3, #57	@ 0x39
 800b84c:	d0ee      	beq.n	800b82c <_dtoa_r+0xa7c>
 800b84e:	3301      	adds	r3, #1
 800b850:	e7c9      	b.n	800b7e6 <_dtoa_r+0xa36>
 800b852:	9a00      	ldr	r2, [sp, #0]
 800b854:	9908      	ldr	r1, [sp, #32]
 800b856:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b85a:	428a      	cmp	r2, r1
 800b85c:	d028      	beq.n	800b8b0 <_dtoa_r+0xb00>
 800b85e:	9902      	ldr	r1, [sp, #8]
 800b860:	2300      	movs	r3, #0
 800b862:	220a      	movs	r2, #10
 800b864:	4648      	mov	r0, r9
 800b866:	f000 f9d5 	bl	800bc14 <__multadd>
 800b86a:	42af      	cmp	r7, r5
 800b86c:	9002      	str	r0, [sp, #8]
 800b86e:	f04f 0300 	mov.w	r3, #0
 800b872:	f04f 020a 	mov.w	r2, #10
 800b876:	4639      	mov	r1, r7
 800b878:	4648      	mov	r0, r9
 800b87a:	d107      	bne.n	800b88c <_dtoa_r+0xadc>
 800b87c:	f000 f9ca 	bl	800bc14 <__multadd>
 800b880:	4607      	mov	r7, r0
 800b882:	4605      	mov	r5, r0
 800b884:	9b00      	ldr	r3, [sp, #0]
 800b886:	3301      	adds	r3, #1
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	e777      	b.n	800b77c <_dtoa_r+0x9cc>
 800b88c:	f000 f9c2 	bl	800bc14 <__multadd>
 800b890:	4629      	mov	r1, r5
 800b892:	4607      	mov	r7, r0
 800b894:	2300      	movs	r3, #0
 800b896:	220a      	movs	r2, #10
 800b898:	4648      	mov	r0, r9
 800b89a:	f000 f9bb 	bl	800bc14 <__multadd>
 800b89e:	4605      	mov	r5, r0
 800b8a0:	e7f0      	b.n	800b884 <_dtoa_r+0xad4>
 800b8a2:	f1bb 0f00 	cmp.w	fp, #0
 800b8a6:	bfcc      	ite	gt
 800b8a8:	465e      	movgt	r6, fp
 800b8aa:	2601      	movle	r6, #1
 800b8ac:	4456      	add	r6, sl
 800b8ae:	2700      	movs	r7, #0
 800b8b0:	9902      	ldr	r1, [sp, #8]
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	4648      	mov	r0, r9
 800b8b8:	f000 fb9a 	bl	800bff0 <__lshift>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	9002      	str	r0, [sp, #8]
 800b8c0:	f000 fc02 	bl	800c0c8 <__mcmp>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	dcb4      	bgt.n	800b832 <_dtoa_r+0xa82>
 800b8c8:	d102      	bne.n	800b8d0 <_dtoa_r+0xb20>
 800b8ca:	9b00      	ldr	r3, [sp, #0]
 800b8cc:	07db      	lsls	r3, r3, #31
 800b8ce:	d4b0      	bmi.n	800b832 <_dtoa_r+0xa82>
 800b8d0:	4633      	mov	r3, r6
 800b8d2:	461e      	mov	r6, r3
 800b8d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8d8:	2a30      	cmp	r2, #48	@ 0x30
 800b8da:	d0fa      	beq.n	800b8d2 <_dtoa_r+0xb22>
 800b8dc:	e4b5      	b.n	800b24a <_dtoa_r+0x49a>
 800b8de:	459a      	cmp	sl, r3
 800b8e0:	d1a8      	bne.n	800b834 <_dtoa_r+0xa84>
 800b8e2:	2331      	movs	r3, #49	@ 0x31
 800b8e4:	f108 0801 	add.w	r8, r8, #1
 800b8e8:	f88a 3000 	strb.w	r3, [sl]
 800b8ec:	e4ad      	b.n	800b24a <_dtoa_r+0x49a>
 800b8ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b94c <_dtoa_r+0xb9c>
 800b8f4:	b11b      	cbz	r3, 800b8fe <_dtoa_r+0xb4e>
 800b8f6:	f10a 0308 	add.w	r3, sl, #8
 800b8fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	4650      	mov	r0, sl
 800b900:	b017      	add	sp, #92	@ 0x5c
 800b902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b906:	9b07      	ldr	r3, [sp, #28]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	f77f ae2e 	ble.w	800b56a <_dtoa_r+0x7ba>
 800b90e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b910:	9308      	str	r3, [sp, #32]
 800b912:	2001      	movs	r0, #1
 800b914:	e64d      	b.n	800b5b2 <_dtoa_r+0x802>
 800b916:	f1bb 0f00 	cmp.w	fp, #0
 800b91a:	f77f aed9 	ble.w	800b6d0 <_dtoa_r+0x920>
 800b91e:	4656      	mov	r6, sl
 800b920:	9802      	ldr	r0, [sp, #8]
 800b922:	4621      	mov	r1, r4
 800b924:	f7ff f9ba 	bl	800ac9c <quorem>
 800b928:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b92c:	f806 3b01 	strb.w	r3, [r6], #1
 800b930:	eba6 020a 	sub.w	r2, r6, sl
 800b934:	4593      	cmp	fp, r2
 800b936:	ddb4      	ble.n	800b8a2 <_dtoa_r+0xaf2>
 800b938:	9902      	ldr	r1, [sp, #8]
 800b93a:	2300      	movs	r3, #0
 800b93c:	220a      	movs	r2, #10
 800b93e:	4648      	mov	r0, r9
 800b940:	f000 f968 	bl	800bc14 <__multadd>
 800b944:	9002      	str	r0, [sp, #8]
 800b946:	e7eb      	b.n	800b920 <_dtoa_r+0xb70>
 800b948:	0800fb79 	.word	0x0800fb79
 800b94c:	0800fafd 	.word	0x0800fafd

0800b950 <_free_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4605      	mov	r5, r0
 800b954:	2900      	cmp	r1, #0
 800b956:	d041      	beq.n	800b9dc <_free_r+0x8c>
 800b958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b95c:	1f0c      	subs	r4, r1, #4
 800b95e:	2b00      	cmp	r3, #0
 800b960:	bfb8      	it	lt
 800b962:	18e4      	addlt	r4, r4, r3
 800b964:	f000 f8e8 	bl	800bb38 <__malloc_lock>
 800b968:	4a1d      	ldr	r2, [pc, #116]	@ (800b9e0 <_free_r+0x90>)
 800b96a:	6813      	ldr	r3, [r2, #0]
 800b96c:	b933      	cbnz	r3, 800b97c <_free_r+0x2c>
 800b96e:	6063      	str	r3, [r4, #4]
 800b970:	6014      	str	r4, [r2, #0]
 800b972:	4628      	mov	r0, r5
 800b974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b978:	f000 b8e4 	b.w	800bb44 <__malloc_unlock>
 800b97c:	42a3      	cmp	r3, r4
 800b97e:	d908      	bls.n	800b992 <_free_r+0x42>
 800b980:	6820      	ldr	r0, [r4, #0]
 800b982:	1821      	adds	r1, r4, r0
 800b984:	428b      	cmp	r3, r1
 800b986:	bf01      	itttt	eq
 800b988:	6819      	ldreq	r1, [r3, #0]
 800b98a:	685b      	ldreq	r3, [r3, #4]
 800b98c:	1809      	addeq	r1, r1, r0
 800b98e:	6021      	streq	r1, [r4, #0]
 800b990:	e7ed      	b.n	800b96e <_free_r+0x1e>
 800b992:	461a      	mov	r2, r3
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	b10b      	cbz	r3, 800b99c <_free_r+0x4c>
 800b998:	42a3      	cmp	r3, r4
 800b99a:	d9fa      	bls.n	800b992 <_free_r+0x42>
 800b99c:	6811      	ldr	r1, [r2, #0]
 800b99e:	1850      	adds	r0, r2, r1
 800b9a0:	42a0      	cmp	r0, r4
 800b9a2:	d10b      	bne.n	800b9bc <_free_r+0x6c>
 800b9a4:	6820      	ldr	r0, [r4, #0]
 800b9a6:	4401      	add	r1, r0
 800b9a8:	1850      	adds	r0, r2, r1
 800b9aa:	4283      	cmp	r3, r0
 800b9ac:	6011      	str	r1, [r2, #0]
 800b9ae:	d1e0      	bne.n	800b972 <_free_r+0x22>
 800b9b0:	6818      	ldr	r0, [r3, #0]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	6053      	str	r3, [r2, #4]
 800b9b6:	4408      	add	r0, r1
 800b9b8:	6010      	str	r0, [r2, #0]
 800b9ba:	e7da      	b.n	800b972 <_free_r+0x22>
 800b9bc:	d902      	bls.n	800b9c4 <_free_r+0x74>
 800b9be:	230c      	movs	r3, #12
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	e7d6      	b.n	800b972 <_free_r+0x22>
 800b9c4:	6820      	ldr	r0, [r4, #0]
 800b9c6:	1821      	adds	r1, r4, r0
 800b9c8:	428b      	cmp	r3, r1
 800b9ca:	bf04      	itt	eq
 800b9cc:	6819      	ldreq	r1, [r3, #0]
 800b9ce:	685b      	ldreq	r3, [r3, #4]
 800b9d0:	6063      	str	r3, [r4, #4]
 800b9d2:	bf04      	itt	eq
 800b9d4:	1809      	addeq	r1, r1, r0
 800b9d6:	6021      	streq	r1, [r4, #0]
 800b9d8:	6054      	str	r4, [r2, #4]
 800b9da:	e7ca      	b.n	800b972 <_free_r+0x22>
 800b9dc:	bd38      	pop	{r3, r4, r5, pc}
 800b9de:	bf00      	nop
 800b9e0:	20000ed4 	.word	0x20000ed4

0800b9e4 <malloc>:
 800b9e4:	4b02      	ldr	r3, [pc, #8]	@ (800b9f0 <malloc+0xc>)
 800b9e6:	4601      	mov	r1, r0
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	f000 b825 	b.w	800ba38 <_malloc_r>
 800b9ee:	bf00      	nop
 800b9f0:	20000024 	.word	0x20000024

0800b9f4 <sbrk_aligned>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	4e0f      	ldr	r6, [pc, #60]	@ (800ba34 <sbrk_aligned+0x40>)
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	6831      	ldr	r1, [r6, #0]
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	b911      	cbnz	r1, 800ba06 <sbrk_aligned+0x12>
 800ba00:	f001 fe04 	bl	800d60c <_sbrk_r>
 800ba04:	6030      	str	r0, [r6, #0]
 800ba06:	4621      	mov	r1, r4
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f001 fdff 	bl	800d60c <_sbrk_r>
 800ba0e:	1c43      	adds	r3, r0, #1
 800ba10:	d103      	bne.n	800ba1a <sbrk_aligned+0x26>
 800ba12:	f04f 34ff 	mov.w	r4, #4294967295
 800ba16:	4620      	mov	r0, r4
 800ba18:	bd70      	pop	{r4, r5, r6, pc}
 800ba1a:	1cc4      	adds	r4, r0, #3
 800ba1c:	f024 0403 	bic.w	r4, r4, #3
 800ba20:	42a0      	cmp	r0, r4
 800ba22:	d0f8      	beq.n	800ba16 <sbrk_aligned+0x22>
 800ba24:	1a21      	subs	r1, r4, r0
 800ba26:	4628      	mov	r0, r5
 800ba28:	f001 fdf0 	bl	800d60c <_sbrk_r>
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	d1f2      	bne.n	800ba16 <sbrk_aligned+0x22>
 800ba30:	e7ef      	b.n	800ba12 <sbrk_aligned+0x1e>
 800ba32:	bf00      	nop
 800ba34:	20000ed0 	.word	0x20000ed0

0800ba38 <_malloc_r>:
 800ba38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba3c:	1ccd      	adds	r5, r1, #3
 800ba3e:	f025 0503 	bic.w	r5, r5, #3
 800ba42:	3508      	adds	r5, #8
 800ba44:	2d0c      	cmp	r5, #12
 800ba46:	bf38      	it	cc
 800ba48:	250c      	movcc	r5, #12
 800ba4a:	2d00      	cmp	r5, #0
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	db01      	blt.n	800ba54 <_malloc_r+0x1c>
 800ba50:	42a9      	cmp	r1, r5
 800ba52:	d904      	bls.n	800ba5e <_malloc_r+0x26>
 800ba54:	230c      	movs	r3, #12
 800ba56:	6033      	str	r3, [r6, #0]
 800ba58:	2000      	movs	r0, #0
 800ba5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb34 <_malloc_r+0xfc>
 800ba62:	f000 f869 	bl	800bb38 <__malloc_lock>
 800ba66:	f8d8 3000 	ldr.w	r3, [r8]
 800ba6a:	461c      	mov	r4, r3
 800ba6c:	bb44      	cbnz	r4, 800bac0 <_malloc_r+0x88>
 800ba6e:	4629      	mov	r1, r5
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7ff ffbf 	bl	800b9f4 <sbrk_aligned>
 800ba76:	1c43      	adds	r3, r0, #1
 800ba78:	4604      	mov	r4, r0
 800ba7a:	d158      	bne.n	800bb2e <_malloc_r+0xf6>
 800ba7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ba80:	4627      	mov	r7, r4
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	d143      	bne.n	800bb0e <_malloc_r+0xd6>
 800ba86:	2c00      	cmp	r4, #0
 800ba88:	d04b      	beq.n	800bb22 <_malloc_r+0xea>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	4630      	mov	r0, r6
 800ba90:	eb04 0903 	add.w	r9, r4, r3
 800ba94:	f001 fdba 	bl	800d60c <_sbrk_r>
 800ba98:	4581      	cmp	r9, r0
 800ba9a:	d142      	bne.n	800bb22 <_malloc_r+0xea>
 800ba9c:	6821      	ldr	r1, [r4, #0]
 800ba9e:	1a6d      	subs	r5, r5, r1
 800baa0:	4629      	mov	r1, r5
 800baa2:	4630      	mov	r0, r6
 800baa4:	f7ff ffa6 	bl	800b9f4 <sbrk_aligned>
 800baa8:	3001      	adds	r0, #1
 800baaa:	d03a      	beq.n	800bb22 <_malloc_r+0xea>
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	442b      	add	r3, r5
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	f8d8 3000 	ldr.w	r3, [r8]
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	bb62      	cbnz	r2, 800bb14 <_malloc_r+0xdc>
 800baba:	f8c8 7000 	str.w	r7, [r8]
 800babe:	e00f      	b.n	800bae0 <_malloc_r+0xa8>
 800bac0:	6822      	ldr	r2, [r4, #0]
 800bac2:	1b52      	subs	r2, r2, r5
 800bac4:	d420      	bmi.n	800bb08 <_malloc_r+0xd0>
 800bac6:	2a0b      	cmp	r2, #11
 800bac8:	d917      	bls.n	800bafa <_malloc_r+0xc2>
 800baca:	1961      	adds	r1, r4, r5
 800bacc:	42a3      	cmp	r3, r4
 800bace:	6025      	str	r5, [r4, #0]
 800bad0:	bf18      	it	ne
 800bad2:	6059      	strne	r1, [r3, #4]
 800bad4:	6863      	ldr	r3, [r4, #4]
 800bad6:	bf08      	it	eq
 800bad8:	f8c8 1000 	streq.w	r1, [r8]
 800badc:	5162      	str	r2, [r4, r5]
 800bade:	604b      	str	r3, [r1, #4]
 800bae0:	4630      	mov	r0, r6
 800bae2:	f000 f82f 	bl	800bb44 <__malloc_unlock>
 800bae6:	f104 000b 	add.w	r0, r4, #11
 800baea:	1d23      	adds	r3, r4, #4
 800baec:	f020 0007 	bic.w	r0, r0, #7
 800baf0:	1ac2      	subs	r2, r0, r3
 800baf2:	bf1c      	itt	ne
 800baf4:	1a1b      	subne	r3, r3, r0
 800baf6:	50a3      	strne	r3, [r4, r2]
 800baf8:	e7af      	b.n	800ba5a <_malloc_r+0x22>
 800bafa:	6862      	ldr	r2, [r4, #4]
 800bafc:	42a3      	cmp	r3, r4
 800bafe:	bf0c      	ite	eq
 800bb00:	f8c8 2000 	streq.w	r2, [r8]
 800bb04:	605a      	strne	r2, [r3, #4]
 800bb06:	e7eb      	b.n	800bae0 <_malloc_r+0xa8>
 800bb08:	4623      	mov	r3, r4
 800bb0a:	6864      	ldr	r4, [r4, #4]
 800bb0c:	e7ae      	b.n	800ba6c <_malloc_r+0x34>
 800bb0e:	463c      	mov	r4, r7
 800bb10:	687f      	ldr	r7, [r7, #4]
 800bb12:	e7b6      	b.n	800ba82 <_malloc_r+0x4a>
 800bb14:	461a      	mov	r2, r3
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	42a3      	cmp	r3, r4
 800bb1a:	d1fb      	bne.n	800bb14 <_malloc_r+0xdc>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	6053      	str	r3, [r2, #4]
 800bb20:	e7de      	b.n	800bae0 <_malloc_r+0xa8>
 800bb22:	230c      	movs	r3, #12
 800bb24:	6033      	str	r3, [r6, #0]
 800bb26:	4630      	mov	r0, r6
 800bb28:	f000 f80c 	bl	800bb44 <__malloc_unlock>
 800bb2c:	e794      	b.n	800ba58 <_malloc_r+0x20>
 800bb2e:	6005      	str	r5, [r0, #0]
 800bb30:	e7d6      	b.n	800bae0 <_malloc_r+0xa8>
 800bb32:	bf00      	nop
 800bb34:	20000ed4 	.word	0x20000ed4

0800bb38 <__malloc_lock>:
 800bb38:	4801      	ldr	r0, [pc, #4]	@ (800bb40 <__malloc_lock+0x8>)
 800bb3a:	f7ff b898 	b.w	800ac6e <__retarget_lock_acquire_recursive>
 800bb3e:	bf00      	nop
 800bb40:	20000ecc 	.word	0x20000ecc

0800bb44 <__malloc_unlock>:
 800bb44:	4801      	ldr	r0, [pc, #4]	@ (800bb4c <__malloc_unlock+0x8>)
 800bb46:	f7ff b893 	b.w	800ac70 <__retarget_lock_release_recursive>
 800bb4a:	bf00      	nop
 800bb4c:	20000ecc 	.word	0x20000ecc

0800bb50 <_Balloc>:
 800bb50:	b570      	push	{r4, r5, r6, lr}
 800bb52:	69c6      	ldr	r6, [r0, #28]
 800bb54:	4604      	mov	r4, r0
 800bb56:	460d      	mov	r5, r1
 800bb58:	b976      	cbnz	r6, 800bb78 <_Balloc+0x28>
 800bb5a:	2010      	movs	r0, #16
 800bb5c:	f7ff ff42 	bl	800b9e4 <malloc>
 800bb60:	4602      	mov	r2, r0
 800bb62:	61e0      	str	r0, [r4, #28]
 800bb64:	b920      	cbnz	r0, 800bb70 <_Balloc+0x20>
 800bb66:	4b18      	ldr	r3, [pc, #96]	@ (800bbc8 <_Balloc+0x78>)
 800bb68:	4818      	ldr	r0, [pc, #96]	@ (800bbcc <_Balloc+0x7c>)
 800bb6a:	216b      	movs	r1, #107	@ 0x6b
 800bb6c:	f001 fd68 	bl	800d640 <__assert_func>
 800bb70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb74:	6006      	str	r6, [r0, #0]
 800bb76:	60c6      	str	r6, [r0, #12]
 800bb78:	69e6      	ldr	r6, [r4, #28]
 800bb7a:	68f3      	ldr	r3, [r6, #12]
 800bb7c:	b183      	cbz	r3, 800bba0 <_Balloc+0x50>
 800bb7e:	69e3      	ldr	r3, [r4, #28]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb86:	b9b8      	cbnz	r0, 800bbb8 <_Balloc+0x68>
 800bb88:	2101      	movs	r1, #1
 800bb8a:	fa01 f605 	lsl.w	r6, r1, r5
 800bb8e:	1d72      	adds	r2, r6, #5
 800bb90:	0092      	lsls	r2, r2, #2
 800bb92:	4620      	mov	r0, r4
 800bb94:	f001 fd72 	bl	800d67c <_calloc_r>
 800bb98:	b160      	cbz	r0, 800bbb4 <_Balloc+0x64>
 800bb9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb9e:	e00e      	b.n	800bbbe <_Balloc+0x6e>
 800bba0:	2221      	movs	r2, #33	@ 0x21
 800bba2:	2104      	movs	r1, #4
 800bba4:	4620      	mov	r0, r4
 800bba6:	f001 fd69 	bl	800d67c <_calloc_r>
 800bbaa:	69e3      	ldr	r3, [r4, #28]
 800bbac:	60f0      	str	r0, [r6, #12]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1e4      	bne.n	800bb7e <_Balloc+0x2e>
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}
 800bbb8:	6802      	ldr	r2, [r0, #0]
 800bbba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbc4:	e7f7      	b.n	800bbb6 <_Balloc+0x66>
 800bbc6:	bf00      	nop
 800bbc8:	0800fb0a 	.word	0x0800fb0a
 800bbcc:	0800fb8a 	.word	0x0800fb8a

0800bbd0 <_Bfree>:
 800bbd0:	b570      	push	{r4, r5, r6, lr}
 800bbd2:	69c6      	ldr	r6, [r0, #28]
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	b976      	cbnz	r6, 800bbf8 <_Bfree+0x28>
 800bbda:	2010      	movs	r0, #16
 800bbdc:	f7ff ff02 	bl	800b9e4 <malloc>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	61e8      	str	r0, [r5, #28]
 800bbe4:	b920      	cbnz	r0, 800bbf0 <_Bfree+0x20>
 800bbe6:	4b09      	ldr	r3, [pc, #36]	@ (800bc0c <_Bfree+0x3c>)
 800bbe8:	4809      	ldr	r0, [pc, #36]	@ (800bc10 <_Bfree+0x40>)
 800bbea:	218f      	movs	r1, #143	@ 0x8f
 800bbec:	f001 fd28 	bl	800d640 <__assert_func>
 800bbf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbf4:	6006      	str	r6, [r0, #0]
 800bbf6:	60c6      	str	r6, [r0, #12]
 800bbf8:	b13c      	cbz	r4, 800bc0a <_Bfree+0x3a>
 800bbfa:	69eb      	ldr	r3, [r5, #28]
 800bbfc:	6862      	ldr	r2, [r4, #4]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc04:	6021      	str	r1, [r4, #0]
 800bc06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	0800fb0a 	.word	0x0800fb0a
 800bc10:	0800fb8a 	.word	0x0800fb8a

0800bc14 <__multadd>:
 800bc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc18:	690d      	ldr	r5, [r1, #16]
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	461e      	mov	r6, r3
 800bc20:	f101 0c14 	add.w	ip, r1, #20
 800bc24:	2000      	movs	r0, #0
 800bc26:	f8dc 3000 	ldr.w	r3, [ip]
 800bc2a:	b299      	uxth	r1, r3
 800bc2c:	fb02 6101 	mla	r1, r2, r1, r6
 800bc30:	0c1e      	lsrs	r6, r3, #16
 800bc32:	0c0b      	lsrs	r3, r1, #16
 800bc34:	fb02 3306 	mla	r3, r2, r6, r3
 800bc38:	b289      	uxth	r1, r1
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc40:	4285      	cmp	r5, r0
 800bc42:	f84c 1b04 	str.w	r1, [ip], #4
 800bc46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc4a:	dcec      	bgt.n	800bc26 <__multadd+0x12>
 800bc4c:	b30e      	cbz	r6, 800bc92 <__multadd+0x7e>
 800bc4e:	68a3      	ldr	r3, [r4, #8]
 800bc50:	42ab      	cmp	r3, r5
 800bc52:	dc19      	bgt.n	800bc88 <__multadd+0x74>
 800bc54:	6861      	ldr	r1, [r4, #4]
 800bc56:	4638      	mov	r0, r7
 800bc58:	3101      	adds	r1, #1
 800bc5a:	f7ff ff79 	bl	800bb50 <_Balloc>
 800bc5e:	4680      	mov	r8, r0
 800bc60:	b928      	cbnz	r0, 800bc6e <__multadd+0x5a>
 800bc62:	4602      	mov	r2, r0
 800bc64:	4b0c      	ldr	r3, [pc, #48]	@ (800bc98 <__multadd+0x84>)
 800bc66:	480d      	ldr	r0, [pc, #52]	@ (800bc9c <__multadd+0x88>)
 800bc68:	21ba      	movs	r1, #186	@ 0xba
 800bc6a:	f001 fce9 	bl	800d640 <__assert_func>
 800bc6e:	6922      	ldr	r2, [r4, #16]
 800bc70:	3202      	adds	r2, #2
 800bc72:	f104 010c 	add.w	r1, r4, #12
 800bc76:	0092      	lsls	r2, r2, #2
 800bc78:	300c      	adds	r0, #12
 800bc7a:	f7fe fffa 	bl	800ac72 <memcpy>
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff ffa5 	bl	800bbd0 <_Bfree>
 800bc86:	4644      	mov	r4, r8
 800bc88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc8c:	3501      	adds	r5, #1
 800bc8e:	615e      	str	r6, [r3, #20]
 800bc90:	6125      	str	r5, [r4, #16]
 800bc92:	4620      	mov	r0, r4
 800bc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc98:	0800fb79 	.word	0x0800fb79
 800bc9c:	0800fb8a 	.word	0x0800fb8a

0800bca0 <__s2b>:
 800bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca4:	460c      	mov	r4, r1
 800bca6:	4615      	mov	r5, r2
 800bca8:	461f      	mov	r7, r3
 800bcaa:	2209      	movs	r2, #9
 800bcac:	3308      	adds	r3, #8
 800bcae:	4606      	mov	r6, r0
 800bcb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	db09      	blt.n	800bcd0 <__s2b+0x30>
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f7ff ff47 	bl	800bb50 <_Balloc>
 800bcc2:	b940      	cbnz	r0, 800bcd6 <__s2b+0x36>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	4b19      	ldr	r3, [pc, #100]	@ (800bd2c <__s2b+0x8c>)
 800bcc8:	4819      	ldr	r0, [pc, #100]	@ (800bd30 <__s2b+0x90>)
 800bcca:	21d3      	movs	r1, #211	@ 0xd3
 800bccc:	f001 fcb8 	bl	800d640 <__assert_func>
 800bcd0:	0052      	lsls	r2, r2, #1
 800bcd2:	3101      	adds	r1, #1
 800bcd4:	e7f0      	b.n	800bcb8 <__s2b+0x18>
 800bcd6:	9b08      	ldr	r3, [sp, #32]
 800bcd8:	6143      	str	r3, [r0, #20]
 800bcda:	2d09      	cmp	r5, #9
 800bcdc:	f04f 0301 	mov.w	r3, #1
 800bce0:	6103      	str	r3, [r0, #16]
 800bce2:	dd16      	ble.n	800bd12 <__s2b+0x72>
 800bce4:	f104 0909 	add.w	r9, r4, #9
 800bce8:	46c8      	mov	r8, r9
 800bcea:	442c      	add	r4, r5
 800bcec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcf0:	4601      	mov	r1, r0
 800bcf2:	3b30      	subs	r3, #48	@ 0x30
 800bcf4:	220a      	movs	r2, #10
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f7ff ff8c 	bl	800bc14 <__multadd>
 800bcfc:	45a0      	cmp	r8, r4
 800bcfe:	d1f5      	bne.n	800bcec <__s2b+0x4c>
 800bd00:	f1a5 0408 	sub.w	r4, r5, #8
 800bd04:	444c      	add	r4, r9
 800bd06:	1b2d      	subs	r5, r5, r4
 800bd08:	1963      	adds	r3, r4, r5
 800bd0a:	42bb      	cmp	r3, r7
 800bd0c:	db04      	blt.n	800bd18 <__s2b+0x78>
 800bd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd12:	340a      	adds	r4, #10
 800bd14:	2509      	movs	r5, #9
 800bd16:	e7f6      	b.n	800bd06 <__s2b+0x66>
 800bd18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd1c:	4601      	mov	r1, r0
 800bd1e:	3b30      	subs	r3, #48	@ 0x30
 800bd20:	220a      	movs	r2, #10
 800bd22:	4630      	mov	r0, r6
 800bd24:	f7ff ff76 	bl	800bc14 <__multadd>
 800bd28:	e7ee      	b.n	800bd08 <__s2b+0x68>
 800bd2a:	bf00      	nop
 800bd2c:	0800fb79 	.word	0x0800fb79
 800bd30:	0800fb8a 	.word	0x0800fb8a

0800bd34 <__hi0bits>:
 800bd34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd38:	4603      	mov	r3, r0
 800bd3a:	bf36      	itet	cc
 800bd3c:	0403      	lslcc	r3, r0, #16
 800bd3e:	2000      	movcs	r0, #0
 800bd40:	2010      	movcc	r0, #16
 800bd42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd46:	bf3c      	itt	cc
 800bd48:	021b      	lslcc	r3, r3, #8
 800bd4a:	3008      	addcc	r0, #8
 800bd4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd50:	bf3c      	itt	cc
 800bd52:	011b      	lslcc	r3, r3, #4
 800bd54:	3004      	addcc	r0, #4
 800bd56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd5a:	bf3c      	itt	cc
 800bd5c:	009b      	lslcc	r3, r3, #2
 800bd5e:	3002      	addcc	r0, #2
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	db05      	blt.n	800bd70 <__hi0bits+0x3c>
 800bd64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd68:	f100 0001 	add.w	r0, r0, #1
 800bd6c:	bf08      	it	eq
 800bd6e:	2020      	moveq	r0, #32
 800bd70:	4770      	bx	lr

0800bd72 <__lo0bits>:
 800bd72:	6803      	ldr	r3, [r0, #0]
 800bd74:	4602      	mov	r2, r0
 800bd76:	f013 0007 	ands.w	r0, r3, #7
 800bd7a:	d00b      	beq.n	800bd94 <__lo0bits+0x22>
 800bd7c:	07d9      	lsls	r1, r3, #31
 800bd7e:	d421      	bmi.n	800bdc4 <__lo0bits+0x52>
 800bd80:	0798      	lsls	r0, r3, #30
 800bd82:	bf49      	itett	mi
 800bd84:	085b      	lsrmi	r3, r3, #1
 800bd86:	089b      	lsrpl	r3, r3, #2
 800bd88:	2001      	movmi	r0, #1
 800bd8a:	6013      	strmi	r3, [r2, #0]
 800bd8c:	bf5c      	itt	pl
 800bd8e:	6013      	strpl	r3, [r2, #0]
 800bd90:	2002      	movpl	r0, #2
 800bd92:	4770      	bx	lr
 800bd94:	b299      	uxth	r1, r3
 800bd96:	b909      	cbnz	r1, 800bd9c <__lo0bits+0x2a>
 800bd98:	0c1b      	lsrs	r3, r3, #16
 800bd9a:	2010      	movs	r0, #16
 800bd9c:	b2d9      	uxtb	r1, r3
 800bd9e:	b909      	cbnz	r1, 800bda4 <__lo0bits+0x32>
 800bda0:	3008      	adds	r0, #8
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	0719      	lsls	r1, r3, #28
 800bda6:	bf04      	itt	eq
 800bda8:	091b      	lsreq	r3, r3, #4
 800bdaa:	3004      	addeq	r0, #4
 800bdac:	0799      	lsls	r1, r3, #30
 800bdae:	bf04      	itt	eq
 800bdb0:	089b      	lsreq	r3, r3, #2
 800bdb2:	3002      	addeq	r0, #2
 800bdb4:	07d9      	lsls	r1, r3, #31
 800bdb6:	d403      	bmi.n	800bdc0 <__lo0bits+0x4e>
 800bdb8:	085b      	lsrs	r3, r3, #1
 800bdba:	f100 0001 	add.w	r0, r0, #1
 800bdbe:	d003      	beq.n	800bdc8 <__lo0bits+0x56>
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	4770      	bx	lr
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	4770      	bx	lr
 800bdc8:	2020      	movs	r0, #32
 800bdca:	4770      	bx	lr

0800bdcc <__i2b>:
 800bdcc:	b510      	push	{r4, lr}
 800bdce:	460c      	mov	r4, r1
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	f7ff febd 	bl	800bb50 <_Balloc>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	b928      	cbnz	r0, 800bde6 <__i2b+0x1a>
 800bdda:	4b05      	ldr	r3, [pc, #20]	@ (800bdf0 <__i2b+0x24>)
 800bddc:	4805      	ldr	r0, [pc, #20]	@ (800bdf4 <__i2b+0x28>)
 800bdde:	f240 1145 	movw	r1, #325	@ 0x145
 800bde2:	f001 fc2d 	bl	800d640 <__assert_func>
 800bde6:	2301      	movs	r3, #1
 800bde8:	6144      	str	r4, [r0, #20]
 800bdea:	6103      	str	r3, [r0, #16]
 800bdec:	bd10      	pop	{r4, pc}
 800bdee:	bf00      	nop
 800bdf0:	0800fb79 	.word	0x0800fb79
 800bdf4:	0800fb8a 	.word	0x0800fb8a

0800bdf8 <__multiply>:
 800bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfc:	4617      	mov	r7, r2
 800bdfe:	690a      	ldr	r2, [r1, #16]
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	429a      	cmp	r2, r3
 800be04:	bfa8      	it	ge
 800be06:	463b      	movge	r3, r7
 800be08:	4689      	mov	r9, r1
 800be0a:	bfa4      	itt	ge
 800be0c:	460f      	movge	r7, r1
 800be0e:	4699      	movge	r9, r3
 800be10:	693d      	ldr	r5, [r7, #16]
 800be12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	eb05 060a 	add.w	r6, r5, sl
 800be1e:	42b3      	cmp	r3, r6
 800be20:	b085      	sub	sp, #20
 800be22:	bfb8      	it	lt
 800be24:	3101      	addlt	r1, #1
 800be26:	f7ff fe93 	bl	800bb50 <_Balloc>
 800be2a:	b930      	cbnz	r0, 800be3a <__multiply+0x42>
 800be2c:	4602      	mov	r2, r0
 800be2e:	4b41      	ldr	r3, [pc, #260]	@ (800bf34 <__multiply+0x13c>)
 800be30:	4841      	ldr	r0, [pc, #260]	@ (800bf38 <__multiply+0x140>)
 800be32:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be36:	f001 fc03 	bl	800d640 <__assert_func>
 800be3a:	f100 0414 	add.w	r4, r0, #20
 800be3e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800be42:	4623      	mov	r3, r4
 800be44:	2200      	movs	r2, #0
 800be46:	4573      	cmp	r3, lr
 800be48:	d320      	bcc.n	800be8c <__multiply+0x94>
 800be4a:	f107 0814 	add.w	r8, r7, #20
 800be4e:	f109 0114 	add.w	r1, r9, #20
 800be52:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800be56:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800be5a:	9302      	str	r3, [sp, #8]
 800be5c:	1beb      	subs	r3, r5, r7
 800be5e:	3b15      	subs	r3, #21
 800be60:	f023 0303 	bic.w	r3, r3, #3
 800be64:	3304      	adds	r3, #4
 800be66:	3715      	adds	r7, #21
 800be68:	42bd      	cmp	r5, r7
 800be6a:	bf38      	it	cc
 800be6c:	2304      	movcc	r3, #4
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	9b02      	ldr	r3, [sp, #8]
 800be72:	9103      	str	r1, [sp, #12]
 800be74:	428b      	cmp	r3, r1
 800be76:	d80c      	bhi.n	800be92 <__multiply+0x9a>
 800be78:	2e00      	cmp	r6, #0
 800be7a:	dd03      	ble.n	800be84 <__multiply+0x8c>
 800be7c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800be80:	2b00      	cmp	r3, #0
 800be82:	d055      	beq.n	800bf30 <__multiply+0x138>
 800be84:	6106      	str	r6, [r0, #16]
 800be86:	b005      	add	sp, #20
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8c:	f843 2b04 	str.w	r2, [r3], #4
 800be90:	e7d9      	b.n	800be46 <__multiply+0x4e>
 800be92:	f8b1 a000 	ldrh.w	sl, [r1]
 800be96:	f1ba 0f00 	cmp.w	sl, #0
 800be9a:	d01f      	beq.n	800bedc <__multiply+0xe4>
 800be9c:	46c4      	mov	ip, r8
 800be9e:	46a1      	mov	r9, r4
 800bea0:	2700      	movs	r7, #0
 800bea2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bea6:	f8d9 3000 	ldr.w	r3, [r9]
 800beaa:	fa1f fb82 	uxth.w	fp, r2
 800beae:	b29b      	uxth	r3, r3
 800beb0:	fb0a 330b 	mla	r3, sl, fp, r3
 800beb4:	443b      	add	r3, r7
 800beb6:	f8d9 7000 	ldr.w	r7, [r9]
 800beba:	0c12      	lsrs	r2, r2, #16
 800bebc:	0c3f      	lsrs	r7, r7, #16
 800bebe:	fb0a 7202 	mla	r2, sl, r2, r7
 800bec2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800becc:	4565      	cmp	r5, ip
 800bece:	f849 3b04 	str.w	r3, [r9], #4
 800bed2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bed6:	d8e4      	bhi.n	800bea2 <__multiply+0xaa>
 800bed8:	9b01      	ldr	r3, [sp, #4]
 800beda:	50e7      	str	r7, [r4, r3]
 800bedc:	9b03      	ldr	r3, [sp, #12]
 800bede:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bee2:	3104      	adds	r1, #4
 800bee4:	f1b9 0f00 	cmp.w	r9, #0
 800bee8:	d020      	beq.n	800bf2c <__multiply+0x134>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	4647      	mov	r7, r8
 800beee:	46a4      	mov	ip, r4
 800bef0:	f04f 0a00 	mov.w	sl, #0
 800bef4:	f8b7 b000 	ldrh.w	fp, [r7]
 800bef8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800befc:	fb09 220b 	mla	r2, r9, fp, r2
 800bf00:	4452      	add	r2, sl
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf08:	f84c 3b04 	str.w	r3, [ip], #4
 800bf0c:	f857 3b04 	ldr.w	r3, [r7], #4
 800bf10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf14:	f8bc 3000 	ldrh.w	r3, [ip]
 800bf18:	fb09 330a 	mla	r3, r9, sl, r3
 800bf1c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bf20:	42bd      	cmp	r5, r7
 800bf22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf26:	d8e5      	bhi.n	800bef4 <__multiply+0xfc>
 800bf28:	9a01      	ldr	r2, [sp, #4]
 800bf2a:	50a3      	str	r3, [r4, r2]
 800bf2c:	3404      	adds	r4, #4
 800bf2e:	e79f      	b.n	800be70 <__multiply+0x78>
 800bf30:	3e01      	subs	r6, #1
 800bf32:	e7a1      	b.n	800be78 <__multiply+0x80>
 800bf34:	0800fb79 	.word	0x0800fb79
 800bf38:	0800fb8a 	.word	0x0800fb8a

0800bf3c <__pow5mult>:
 800bf3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf40:	4615      	mov	r5, r2
 800bf42:	f012 0203 	ands.w	r2, r2, #3
 800bf46:	4607      	mov	r7, r0
 800bf48:	460e      	mov	r6, r1
 800bf4a:	d007      	beq.n	800bf5c <__pow5mult+0x20>
 800bf4c:	4c25      	ldr	r4, [pc, #148]	@ (800bfe4 <__pow5mult+0xa8>)
 800bf4e:	3a01      	subs	r2, #1
 800bf50:	2300      	movs	r3, #0
 800bf52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf56:	f7ff fe5d 	bl	800bc14 <__multadd>
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	10ad      	asrs	r5, r5, #2
 800bf5e:	d03d      	beq.n	800bfdc <__pow5mult+0xa0>
 800bf60:	69fc      	ldr	r4, [r7, #28]
 800bf62:	b97c      	cbnz	r4, 800bf84 <__pow5mult+0x48>
 800bf64:	2010      	movs	r0, #16
 800bf66:	f7ff fd3d 	bl	800b9e4 <malloc>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	61f8      	str	r0, [r7, #28]
 800bf6e:	b928      	cbnz	r0, 800bf7c <__pow5mult+0x40>
 800bf70:	4b1d      	ldr	r3, [pc, #116]	@ (800bfe8 <__pow5mult+0xac>)
 800bf72:	481e      	ldr	r0, [pc, #120]	@ (800bfec <__pow5mult+0xb0>)
 800bf74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf78:	f001 fb62 	bl	800d640 <__assert_func>
 800bf7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf80:	6004      	str	r4, [r0, #0]
 800bf82:	60c4      	str	r4, [r0, #12]
 800bf84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf8c:	b94c      	cbnz	r4, 800bfa2 <__pow5mult+0x66>
 800bf8e:	f240 2171 	movw	r1, #625	@ 0x271
 800bf92:	4638      	mov	r0, r7
 800bf94:	f7ff ff1a 	bl	800bdcc <__i2b>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	6003      	str	r3, [r0, #0]
 800bfa2:	f04f 0900 	mov.w	r9, #0
 800bfa6:	07eb      	lsls	r3, r5, #31
 800bfa8:	d50a      	bpl.n	800bfc0 <__pow5mult+0x84>
 800bfaa:	4631      	mov	r1, r6
 800bfac:	4622      	mov	r2, r4
 800bfae:	4638      	mov	r0, r7
 800bfb0:	f7ff ff22 	bl	800bdf8 <__multiply>
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	4680      	mov	r8, r0
 800bfb8:	4638      	mov	r0, r7
 800bfba:	f7ff fe09 	bl	800bbd0 <_Bfree>
 800bfbe:	4646      	mov	r6, r8
 800bfc0:	106d      	asrs	r5, r5, #1
 800bfc2:	d00b      	beq.n	800bfdc <__pow5mult+0xa0>
 800bfc4:	6820      	ldr	r0, [r4, #0]
 800bfc6:	b938      	cbnz	r0, 800bfd8 <__pow5mult+0x9c>
 800bfc8:	4622      	mov	r2, r4
 800bfca:	4621      	mov	r1, r4
 800bfcc:	4638      	mov	r0, r7
 800bfce:	f7ff ff13 	bl	800bdf8 <__multiply>
 800bfd2:	6020      	str	r0, [r4, #0]
 800bfd4:	f8c0 9000 	str.w	r9, [r0]
 800bfd8:	4604      	mov	r4, r0
 800bfda:	e7e4      	b.n	800bfa6 <__pow5mult+0x6a>
 800bfdc:	4630      	mov	r0, r6
 800bfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0800fc9c 	.word	0x0800fc9c
 800bfe8:	0800fb0a 	.word	0x0800fb0a
 800bfec:	0800fb8a 	.word	0x0800fb8a

0800bff0 <__lshift>:
 800bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff4:	460c      	mov	r4, r1
 800bff6:	6849      	ldr	r1, [r1, #4]
 800bff8:	6923      	ldr	r3, [r4, #16]
 800bffa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	4607      	mov	r7, r0
 800c002:	4691      	mov	r9, r2
 800c004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c008:	f108 0601 	add.w	r6, r8, #1
 800c00c:	42b3      	cmp	r3, r6
 800c00e:	db0b      	blt.n	800c028 <__lshift+0x38>
 800c010:	4638      	mov	r0, r7
 800c012:	f7ff fd9d 	bl	800bb50 <_Balloc>
 800c016:	4605      	mov	r5, r0
 800c018:	b948      	cbnz	r0, 800c02e <__lshift+0x3e>
 800c01a:	4602      	mov	r2, r0
 800c01c:	4b28      	ldr	r3, [pc, #160]	@ (800c0c0 <__lshift+0xd0>)
 800c01e:	4829      	ldr	r0, [pc, #164]	@ (800c0c4 <__lshift+0xd4>)
 800c020:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c024:	f001 fb0c 	bl	800d640 <__assert_func>
 800c028:	3101      	adds	r1, #1
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	e7ee      	b.n	800c00c <__lshift+0x1c>
 800c02e:	2300      	movs	r3, #0
 800c030:	f100 0114 	add.w	r1, r0, #20
 800c034:	f100 0210 	add.w	r2, r0, #16
 800c038:	4618      	mov	r0, r3
 800c03a:	4553      	cmp	r3, sl
 800c03c:	db33      	blt.n	800c0a6 <__lshift+0xb6>
 800c03e:	6920      	ldr	r0, [r4, #16]
 800c040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c044:	f104 0314 	add.w	r3, r4, #20
 800c048:	f019 091f 	ands.w	r9, r9, #31
 800c04c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c054:	d02b      	beq.n	800c0ae <__lshift+0xbe>
 800c056:	f1c9 0e20 	rsb	lr, r9, #32
 800c05a:	468a      	mov	sl, r1
 800c05c:	2200      	movs	r2, #0
 800c05e:	6818      	ldr	r0, [r3, #0]
 800c060:	fa00 f009 	lsl.w	r0, r0, r9
 800c064:	4310      	orrs	r0, r2
 800c066:	f84a 0b04 	str.w	r0, [sl], #4
 800c06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c06e:	459c      	cmp	ip, r3
 800c070:	fa22 f20e 	lsr.w	r2, r2, lr
 800c074:	d8f3      	bhi.n	800c05e <__lshift+0x6e>
 800c076:	ebac 0304 	sub.w	r3, ip, r4
 800c07a:	3b15      	subs	r3, #21
 800c07c:	f023 0303 	bic.w	r3, r3, #3
 800c080:	3304      	adds	r3, #4
 800c082:	f104 0015 	add.w	r0, r4, #21
 800c086:	4560      	cmp	r0, ip
 800c088:	bf88      	it	hi
 800c08a:	2304      	movhi	r3, #4
 800c08c:	50ca      	str	r2, [r1, r3]
 800c08e:	b10a      	cbz	r2, 800c094 <__lshift+0xa4>
 800c090:	f108 0602 	add.w	r6, r8, #2
 800c094:	3e01      	subs	r6, #1
 800c096:	4638      	mov	r0, r7
 800c098:	612e      	str	r6, [r5, #16]
 800c09a:	4621      	mov	r1, r4
 800c09c:	f7ff fd98 	bl	800bbd0 <_Bfree>
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	e7c5      	b.n	800c03a <__lshift+0x4a>
 800c0ae:	3904      	subs	r1, #4
 800c0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0b8:	459c      	cmp	ip, r3
 800c0ba:	d8f9      	bhi.n	800c0b0 <__lshift+0xc0>
 800c0bc:	e7ea      	b.n	800c094 <__lshift+0xa4>
 800c0be:	bf00      	nop
 800c0c0:	0800fb79 	.word	0x0800fb79
 800c0c4:	0800fb8a 	.word	0x0800fb8a

0800c0c8 <__mcmp>:
 800c0c8:	690a      	ldr	r2, [r1, #16]
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	6900      	ldr	r0, [r0, #16]
 800c0ce:	1a80      	subs	r0, r0, r2
 800c0d0:	b530      	push	{r4, r5, lr}
 800c0d2:	d10e      	bne.n	800c0f2 <__mcmp+0x2a>
 800c0d4:	3314      	adds	r3, #20
 800c0d6:	3114      	adds	r1, #20
 800c0d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0e8:	4295      	cmp	r5, r2
 800c0ea:	d003      	beq.n	800c0f4 <__mcmp+0x2c>
 800c0ec:	d205      	bcs.n	800c0fa <__mcmp+0x32>
 800c0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f2:	bd30      	pop	{r4, r5, pc}
 800c0f4:	42a3      	cmp	r3, r4
 800c0f6:	d3f3      	bcc.n	800c0e0 <__mcmp+0x18>
 800c0f8:	e7fb      	b.n	800c0f2 <__mcmp+0x2a>
 800c0fa:	2001      	movs	r0, #1
 800c0fc:	e7f9      	b.n	800c0f2 <__mcmp+0x2a>
	...

0800c100 <__mdiff>:
 800c100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	4689      	mov	r9, r1
 800c106:	4606      	mov	r6, r0
 800c108:	4611      	mov	r1, r2
 800c10a:	4648      	mov	r0, r9
 800c10c:	4614      	mov	r4, r2
 800c10e:	f7ff ffdb 	bl	800c0c8 <__mcmp>
 800c112:	1e05      	subs	r5, r0, #0
 800c114:	d112      	bne.n	800c13c <__mdiff+0x3c>
 800c116:	4629      	mov	r1, r5
 800c118:	4630      	mov	r0, r6
 800c11a:	f7ff fd19 	bl	800bb50 <_Balloc>
 800c11e:	4602      	mov	r2, r0
 800c120:	b928      	cbnz	r0, 800c12e <__mdiff+0x2e>
 800c122:	4b3f      	ldr	r3, [pc, #252]	@ (800c220 <__mdiff+0x120>)
 800c124:	f240 2137 	movw	r1, #567	@ 0x237
 800c128:	483e      	ldr	r0, [pc, #248]	@ (800c224 <__mdiff+0x124>)
 800c12a:	f001 fa89 	bl	800d640 <__assert_func>
 800c12e:	2301      	movs	r3, #1
 800c130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c134:	4610      	mov	r0, r2
 800c136:	b003      	add	sp, #12
 800c138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13c:	bfbc      	itt	lt
 800c13e:	464b      	movlt	r3, r9
 800c140:	46a1      	movlt	r9, r4
 800c142:	4630      	mov	r0, r6
 800c144:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c148:	bfba      	itte	lt
 800c14a:	461c      	movlt	r4, r3
 800c14c:	2501      	movlt	r5, #1
 800c14e:	2500      	movge	r5, #0
 800c150:	f7ff fcfe 	bl	800bb50 <_Balloc>
 800c154:	4602      	mov	r2, r0
 800c156:	b918      	cbnz	r0, 800c160 <__mdiff+0x60>
 800c158:	4b31      	ldr	r3, [pc, #196]	@ (800c220 <__mdiff+0x120>)
 800c15a:	f240 2145 	movw	r1, #581	@ 0x245
 800c15e:	e7e3      	b.n	800c128 <__mdiff+0x28>
 800c160:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c164:	6926      	ldr	r6, [r4, #16]
 800c166:	60c5      	str	r5, [r0, #12]
 800c168:	f109 0310 	add.w	r3, r9, #16
 800c16c:	f109 0514 	add.w	r5, r9, #20
 800c170:	f104 0e14 	add.w	lr, r4, #20
 800c174:	f100 0b14 	add.w	fp, r0, #20
 800c178:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c17c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	46d9      	mov	r9, fp
 800c184:	f04f 0c00 	mov.w	ip, #0
 800c188:	9b01      	ldr	r3, [sp, #4]
 800c18a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c18e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	fa1f f38a 	uxth.w	r3, sl
 800c198:	4619      	mov	r1, r3
 800c19a:	b283      	uxth	r3, r0
 800c19c:	1acb      	subs	r3, r1, r3
 800c19e:	0c00      	lsrs	r0, r0, #16
 800c1a0:	4463      	add	r3, ip
 800c1a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1b0:	4576      	cmp	r6, lr
 800c1b2:	f849 3b04 	str.w	r3, [r9], #4
 800c1b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1ba:	d8e5      	bhi.n	800c188 <__mdiff+0x88>
 800c1bc:	1b33      	subs	r3, r6, r4
 800c1be:	3b15      	subs	r3, #21
 800c1c0:	f023 0303 	bic.w	r3, r3, #3
 800c1c4:	3415      	adds	r4, #21
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	42a6      	cmp	r6, r4
 800c1ca:	bf38      	it	cc
 800c1cc:	2304      	movcc	r3, #4
 800c1ce:	441d      	add	r5, r3
 800c1d0:	445b      	add	r3, fp
 800c1d2:	461e      	mov	r6, r3
 800c1d4:	462c      	mov	r4, r5
 800c1d6:	4544      	cmp	r4, r8
 800c1d8:	d30e      	bcc.n	800c1f8 <__mdiff+0xf8>
 800c1da:	f108 0103 	add.w	r1, r8, #3
 800c1de:	1b49      	subs	r1, r1, r5
 800c1e0:	f021 0103 	bic.w	r1, r1, #3
 800c1e4:	3d03      	subs	r5, #3
 800c1e6:	45a8      	cmp	r8, r5
 800c1e8:	bf38      	it	cc
 800c1ea:	2100      	movcc	r1, #0
 800c1ec:	440b      	add	r3, r1
 800c1ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1f2:	b191      	cbz	r1, 800c21a <__mdiff+0x11a>
 800c1f4:	6117      	str	r7, [r2, #16]
 800c1f6:	e79d      	b.n	800c134 <__mdiff+0x34>
 800c1f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c1fc:	46e6      	mov	lr, ip
 800c1fe:	0c08      	lsrs	r0, r1, #16
 800c200:	fa1c fc81 	uxtah	ip, ip, r1
 800c204:	4471      	add	r1, lr
 800c206:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c20a:	b289      	uxth	r1, r1
 800c20c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c210:	f846 1b04 	str.w	r1, [r6], #4
 800c214:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c218:	e7dd      	b.n	800c1d6 <__mdiff+0xd6>
 800c21a:	3f01      	subs	r7, #1
 800c21c:	e7e7      	b.n	800c1ee <__mdiff+0xee>
 800c21e:	bf00      	nop
 800c220:	0800fb79 	.word	0x0800fb79
 800c224:	0800fb8a 	.word	0x0800fb8a

0800c228 <__ulp>:
 800c228:	b082      	sub	sp, #8
 800c22a:	ed8d 0b00 	vstr	d0, [sp]
 800c22e:	9a01      	ldr	r2, [sp, #4]
 800c230:	4b0f      	ldr	r3, [pc, #60]	@ (800c270 <__ulp+0x48>)
 800c232:	4013      	ands	r3, r2
 800c234:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dc08      	bgt.n	800c24e <__ulp+0x26>
 800c23c:	425b      	negs	r3, r3
 800c23e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c242:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c246:	da04      	bge.n	800c252 <__ulp+0x2a>
 800c248:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c24c:	4113      	asrs	r3, r2
 800c24e:	2200      	movs	r2, #0
 800c250:	e008      	b.n	800c264 <__ulp+0x3c>
 800c252:	f1a2 0314 	sub.w	r3, r2, #20
 800c256:	2b1e      	cmp	r3, #30
 800c258:	bfda      	itte	le
 800c25a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c25e:	40da      	lsrle	r2, r3
 800c260:	2201      	movgt	r2, #1
 800c262:	2300      	movs	r3, #0
 800c264:	4619      	mov	r1, r3
 800c266:	4610      	mov	r0, r2
 800c268:	ec41 0b10 	vmov	d0, r0, r1
 800c26c:	b002      	add	sp, #8
 800c26e:	4770      	bx	lr
 800c270:	7ff00000 	.word	0x7ff00000

0800c274 <__b2d>:
 800c274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c278:	6906      	ldr	r6, [r0, #16]
 800c27a:	f100 0814 	add.w	r8, r0, #20
 800c27e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c282:	1f37      	subs	r7, r6, #4
 800c284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c288:	4610      	mov	r0, r2
 800c28a:	f7ff fd53 	bl	800bd34 <__hi0bits>
 800c28e:	f1c0 0320 	rsb	r3, r0, #32
 800c292:	280a      	cmp	r0, #10
 800c294:	600b      	str	r3, [r1, #0]
 800c296:	491b      	ldr	r1, [pc, #108]	@ (800c304 <__b2d+0x90>)
 800c298:	dc15      	bgt.n	800c2c6 <__b2d+0x52>
 800c29a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c29e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2a2:	45b8      	cmp	r8, r7
 800c2a4:	ea43 0501 	orr.w	r5, r3, r1
 800c2a8:	bf34      	ite	cc
 800c2aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2ae:	2300      	movcs	r3, #0
 800c2b0:	3015      	adds	r0, #21
 800c2b2:	fa02 f000 	lsl.w	r0, r2, r0
 800c2b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c2ba:	4303      	orrs	r3, r0
 800c2bc:	461c      	mov	r4, r3
 800c2be:	ec45 4b10 	vmov	d0, r4, r5
 800c2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c6:	45b8      	cmp	r8, r7
 800c2c8:	bf3a      	itte	cc
 800c2ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800c2d2:	2300      	movcs	r3, #0
 800c2d4:	380b      	subs	r0, #11
 800c2d6:	d012      	beq.n	800c2fe <__b2d+0x8a>
 800c2d8:	f1c0 0120 	rsb	r1, r0, #32
 800c2dc:	fa23 f401 	lsr.w	r4, r3, r1
 800c2e0:	4082      	lsls	r2, r0
 800c2e2:	4322      	orrs	r2, r4
 800c2e4:	4547      	cmp	r7, r8
 800c2e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c2ea:	bf8c      	ite	hi
 800c2ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c2f0:	2200      	movls	r2, #0
 800c2f2:	4083      	lsls	r3, r0
 800c2f4:	40ca      	lsrs	r2, r1
 800c2f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	e7de      	b.n	800c2bc <__b2d+0x48>
 800c2fe:	ea42 0501 	orr.w	r5, r2, r1
 800c302:	e7db      	b.n	800c2bc <__b2d+0x48>
 800c304:	3ff00000 	.word	0x3ff00000

0800c308 <__d2b>:
 800c308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c30c:	460f      	mov	r7, r1
 800c30e:	2101      	movs	r1, #1
 800c310:	ec59 8b10 	vmov	r8, r9, d0
 800c314:	4616      	mov	r6, r2
 800c316:	f7ff fc1b 	bl	800bb50 <_Balloc>
 800c31a:	4604      	mov	r4, r0
 800c31c:	b930      	cbnz	r0, 800c32c <__d2b+0x24>
 800c31e:	4602      	mov	r2, r0
 800c320:	4b23      	ldr	r3, [pc, #140]	@ (800c3b0 <__d2b+0xa8>)
 800c322:	4824      	ldr	r0, [pc, #144]	@ (800c3b4 <__d2b+0xac>)
 800c324:	f240 310f 	movw	r1, #783	@ 0x30f
 800c328:	f001 f98a 	bl	800d640 <__assert_func>
 800c32c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c334:	b10d      	cbz	r5, 800c33a <__d2b+0x32>
 800c336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	f1b8 0300 	subs.w	r3, r8, #0
 800c340:	d023      	beq.n	800c38a <__d2b+0x82>
 800c342:	4668      	mov	r0, sp
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	f7ff fd14 	bl	800bd72 <__lo0bits>
 800c34a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c34e:	b1d0      	cbz	r0, 800c386 <__d2b+0x7e>
 800c350:	f1c0 0320 	rsb	r3, r0, #32
 800c354:	fa02 f303 	lsl.w	r3, r2, r3
 800c358:	430b      	orrs	r3, r1
 800c35a:	40c2      	lsrs	r2, r0
 800c35c:	6163      	str	r3, [r4, #20]
 800c35e:	9201      	str	r2, [sp, #4]
 800c360:	9b01      	ldr	r3, [sp, #4]
 800c362:	61a3      	str	r3, [r4, #24]
 800c364:	2b00      	cmp	r3, #0
 800c366:	bf0c      	ite	eq
 800c368:	2201      	moveq	r2, #1
 800c36a:	2202      	movne	r2, #2
 800c36c:	6122      	str	r2, [r4, #16]
 800c36e:	b1a5      	cbz	r5, 800c39a <__d2b+0x92>
 800c370:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c374:	4405      	add	r5, r0
 800c376:	603d      	str	r5, [r7, #0]
 800c378:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c37c:	6030      	str	r0, [r6, #0]
 800c37e:	4620      	mov	r0, r4
 800c380:	b003      	add	sp, #12
 800c382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c386:	6161      	str	r1, [r4, #20]
 800c388:	e7ea      	b.n	800c360 <__d2b+0x58>
 800c38a:	a801      	add	r0, sp, #4
 800c38c:	f7ff fcf1 	bl	800bd72 <__lo0bits>
 800c390:	9b01      	ldr	r3, [sp, #4]
 800c392:	6163      	str	r3, [r4, #20]
 800c394:	3020      	adds	r0, #32
 800c396:	2201      	movs	r2, #1
 800c398:	e7e8      	b.n	800c36c <__d2b+0x64>
 800c39a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c39e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c3a2:	6038      	str	r0, [r7, #0]
 800c3a4:	6918      	ldr	r0, [r3, #16]
 800c3a6:	f7ff fcc5 	bl	800bd34 <__hi0bits>
 800c3aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3ae:	e7e5      	b.n	800c37c <__d2b+0x74>
 800c3b0:	0800fb79 	.word	0x0800fb79
 800c3b4:	0800fb8a 	.word	0x0800fb8a

0800c3b8 <__ratio>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	b085      	sub	sp, #20
 800c3be:	e9cd 1000 	strd	r1, r0, [sp]
 800c3c2:	a902      	add	r1, sp, #8
 800c3c4:	f7ff ff56 	bl	800c274 <__b2d>
 800c3c8:	9800      	ldr	r0, [sp, #0]
 800c3ca:	a903      	add	r1, sp, #12
 800c3cc:	ec55 4b10 	vmov	r4, r5, d0
 800c3d0:	f7ff ff50 	bl	800c274 <__b2d>
 800c3d4:	9b01      	ldr	r3, [sp, #4]
 800c3d6:	6919      	ldr	r1, [r3, #16]
 800c3d8:	9b00      	ldr	r3, [sp, #0]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	1ac9      	subs	r1, r1, r3
 800c3de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c3e2:	1a9b      	subs	r3, r3, r2
 800c3e4:	ec5b ab10 	vmov	sl, fp, d0
 800c3e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	bfce      	itee	gt
 800c3f0:	462a      	movgt	r2, r5
 800c3f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c3f6:	465a      	movle	r2, fp
 800c3f8:	462f      	mov	r7, r5
 800c3fa:	46d9      	mov	r9, fp
 800c3fc:	bfcc      	ite	gt
 800c3fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c402:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c406:	464b      	mov	r3, r9
 800c408:	4652      	mov	r2, sl
 800c40a:	4620      	mov	r0, r4
 800c40c:	4639      	mov	r1, r7
 800c40e:	f7f4 fa3d 	bl	800088c <__aeabi_ddiv>
 800c412:	ec41 0b10 	vmov	d0, r0, r1
 800c416:	b005      	add	sp, #20
 800c418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c41c <__copybits>:
 800c41c:	3901      	subs	r1, #1
 800c41e:	b570      	push	{r4, r5, r6, lr}
 800c420:	1149      	asrs	r1, r1, #5
 800c422:	6914      	ldr	r4, [r2, #16]
 800c424:	3101      	adds	r1, #1
 800c426:	f102 0314 	add.w	r3, r2, #20
 800c42a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c42e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c432:	1f05      	subs	r5, r0, #4
 800c434:	42a3      	cmp	r3, r4
 800c436:	d30c      	bcc.n	800c452 <__copybits+0x36>
 800c438:	1aa3      	subs	r3, r4, r2
 800c43a:	3b11      	subs	r3, #17
 800c43c:	f023 0303 	bic.w	r3, r3, #3
 800c440:	3211      	adds	r2, #17
 800c442:	42a2      	cmp	r2, r4
 800c444:	bf88      	it	hi
 800c446:	2300      	movhi	r3, #0
 800c448:	4418      	add	r0, r3
 800c44a:	2300      	movs	r3, #0
 800c44c:	4288      	cmp	r0, r1
 800c44e:	d305      	bcc.n	800c45c <__copybits+0x40>
 800c450:	bd70      	pop	{r4, r5, r6, pc}
 800c452:	f853 6b04 	ldr.w	r6, [r3], #4
 800c456:	f845 6f04 	str.w	r6, [r5, #4]!
 800c45a:	e7eb      	b.n	800c434 <__copybits+0x18>
 800c45c:	f840 3b04 	str.w	r3, [r0], #4
 800c460:	e7f4      	b.n	800c44c <__copybits+0x30>

0800c462 <__any_on>:
 800c462:	f100 0214 	add.w	r2, r0, #20
 800c466:	6900      	ldr	r0, [r0, #16]
 800c468:	114b      	asrs	r3, r1, #5
 800c46a:	4298      	cmp	r0, r3
 800c46c:	b510      	push	{r4, lr}
 800c46e:	db11      	blt.n	800c494 <__any_on+0x32>
 800c470:	dd0a      	ble.n	800c488 <__any_on+0x26>
 800c472:	f011 011f 	ands.w	r1, r1, #31
 800c476:	d007      	beq.n	800c488 <__any_on+0x26>
 800c478:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c47c:	fa24 f001 	lsr.w	r0, r4, r1
 800c480:	fa00 f101 	lsl.w	r1, r0, r1
 800c484:	428c      	cmp	r4, r1
 800c486:	d10b      	bne.n	800c4a0 <__any_on+0x3e>
 800c488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d803      	bhi.n	800c498 <__any_on+0x36>
 800c490:	2000      	movs	r0, #0
 800c492:	bd10      	pop	{r4, pc}
 800c494:	4603      	mov	r3, r0
 800c496:	e7f7      	b.n	800c488 <__any_on+0x26>
 800c498:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c49c:	2900      	cmp	r1, #0
 800c49e:	d0f5      	beq.n	800c48c <__any_on+0x2a>
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	e7f6      	b.n	800c492 <__any_on+0x30>

0800c4a4 <sulp>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	ec45 4b10 	vmov	d0, r4, r5
 800c4ae:	4616      	mov	r6, r2
 800c4b0:	f7ff feba 	bl	800c228 <__ulp>
 800c4b4:	ec51 0b10 	vmov	r0, r1, d0
 800c4b8:	b17e      	cbz	r6, 800c4da <sulp+0x36>
 800c4ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c4be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	dd09      	ble.n	800c4da <sulp+0x36>
 800c4c6:	051b      	lsls	r3, r3, #20
 800c4c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c4cc:	2400      	movs	r4, #0
 800c4ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	462b      	mov	r3, r5
 800c4d6:	f7f4 f8af 	bl	8000638 <__aeabi_dmul>
 800c4da:	ec41 0b10 	vmov	d0, r0, r1
 800c4de:	bd70      	pop	{r4, r5, r6, pc}

0800c4e0 <_strtod_l>:
 800c4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	b09f      	sub	sp, #124	@ 0x7c
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800c4ee:	9005      	str	r0, [sp, #20]
 800c4f0:	f04f 0a00 	mov.w	sl, #0
 800c4f4:	f04f 0b00 	mov.w	fp, #0
 800c4f8:	460a      	mov	r2, r1
 800c4fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4fc:	7811      	ldrb	r1, [r2, #0]
 800c4fe:	292b      	cmp	r1, #43	@ 0x2b
 800c500:	d04a      	beq.n	800c598 <_strtod_l+0xb8>
 800c502:	d838      	bhi.n	800c576 <_strtod_l+0x96>
 800c504:	290d      	cmp	r1, #13
 800c506:	d832      	bhi.n	800c56e <_strtod_l+0x8e>
 800c508:	2908      	cmp	r1, #8
 800c50a:	d832      	bhi.n	800c572 <_strtod_l+0x92>
 800c50c:	2900      	cmp	r1, #0
 800c50e:	d03b      	beq.n	800c588 <_strtod_l+0xa8>
 800c510:	2200      	movs	r2, #0
 800c512:	920e      	str	r2, [sp, #56]	@ 0x38
 800c514:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c516:	782a      	ldrb	r2, [r5, #0]
 800c518:	2a30      	cmp	r2, #48	@ 0x30
 800c51a:	f040 80b2 	bne.w	800c682 <_strtod_l+0x1a2>
 800c51e:	786a      	ldrb	r2, [r5, #1]
 800c520:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c524:	2a58      	cmp	r2, #88	@ 0x58
 800c526:	d16e      	bne.n	800c606 <_strtod_l+0x126>
 800c528:	9302      	str	r3, [sp, #8]
 800c52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	4a8f      	ldr	r2, [pc, #572]	@ (800c770 <_strtod_l+0x290>)
 800c534:	9805      	ldr	r0, [sp, #20]
 800c536:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c538:	a919      	add	r1, sp, #100	@ 0x64
 800c53a:	f001 f91b 	bl	800d774 <__gethex>
 800c53e:	f010 060f 	ands.w	r6, r0, #15
 800c542:	4604      	mov	r4, r0
 800c544:	d005      	beq.n	800c552 <_strtod_l+0x72>
 800c546:	2e06      	cmp	r6, #6
 800c548:	d128      	bne.n	800c59c <_strtod_l+0xbc>
 800c54a:	3501      	adds	r5, #1
 800c54c:	2300      	movs	r3, #0
 800c54e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c550:	930e      	str	r3, [sp, #56]	@ 0x38
 800c552:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c554:	2b00      	cmp	r3, #0
 800c556:	f040 858e 	bne.w	800d076 <_strtod_l+0xb96>
 800c55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c55c:	b1cb      	cbz	r3, 800c592 <_strtod_l+0xb2>
 800c55e:	4652      	mov	r2, sl
 800c560:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c564:	ec43 2b10 	vmov	d0, r2, r3
 800c568:	b01f      	add	sp, #124	@ 0x7c
 800c56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56e:	2920      	cmp	r1, #32
 800c570:	d1ce      	bne.n	800c510 <_strtod_l+0x30>
 800c572:	3201      	adds	r2, #1
 800c574:	e7c1      	b.n	800c4fa <_strtod_l+0x1a>
 800c576:	292d      	cmp	r1, #45	@ 0x2d
 800c578:	d1ca      	bne.n	800c510 <_strtod_l+0x30>
 800c57a:	2101      	movs	r1, #1
 800c57c:	910e      	str	r1, [sp, #56]	@ 0x38
 800c57e:	1c51      	adds	r1, r2, #1
 800c580:	9119      	str	r1, [sp, #100]	@ 0x64
 800c582:	7852      	ldrb	r2, [r2, #1]
 800c584:	2a00      	cmp	r2, #0
 800c586:	d1c5      	bne.n	800c514 <_strtod_l+0x34>
 800c588:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c58a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 8570 	bne.w	800d072 <_strtod_l+0xb92>
 800c592:	4652      	mov	r2, sl
 800c594:	465b      	mov	r3, fp
 800c596:	e7e5      	b.n	800c564 <_strtod_l+0x84>
 800c598:	2100      	movs	r1, #0
 800c59a:	e7ef      	b.n	800c57c <_strtod_l+0x9c>
 800c59c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c59e:	b13a      	cbz	r2, 800c5b0 <_strtod_l+0xd0>
 800c5a0:	2135      	movs	r1, #53	@ 0x35
 800c5a2:	a81c      	add	r0, sp, #112	@ 0x70
 800c5a4:	f7ff ff3a 	bl	800c41c <__copybits>
 800c5a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5aa:	9805      	ldr	r0, [sp, #20]
 800c5ac:	f7ff fb10 	bl	800bbd0 <_Bfree>
 800c5b0:	3e01      	subs	r6, #1
 800c5b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c5b4:	2e04      	cmp	r6, #4
 800c5b6:	d806      	bhi.n	800c5c6 <_strtod_l+0xe6>
 800c5b8:	e8df f006 	tbb	[pc, r6]
 800c5bc:	201d0314 	.word	0x201d0314
 800c5c0:	14          	.byte	0x14
 800c5c1:	00          	.byte	0x00
 800c5c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c5c6:	05e1      	lsls	r1, r4, #23
 800c5c8:	bf48      	it	mi
 800c5ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c5ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c5d2:	0d1b      	lsrs	r3, r3, #20
 800c5d4:	051b      	lsls	r3, r3, #20
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1bb      	bne.n	800c552 <_strtod_l+0x72>
 800c5da:	f7fe fb1d 	bl	800ac18 <__errno>
 800c5de:	2322      	movs	r3, #34	@ 0x22
 800c5e0:	6003      	str	r3, [r0, #0]
 800c5e2:	e7b6      	b.n	800c552 <_strtod_l+0x72>
 800c5e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c5e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c5ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c5f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c5f4:	e7e7      	b.n	800c5c6 <_strtod_l+0xe6>
 800c5f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c778 <_strtod_l+0x298>
 800c5fa:	e7e4      	b.n	800c5c6 <_strtod_l+0xe6>
 800c5fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c600:	f04f 3aff 	mov.w	sl, #4294967295
 800c604:	e7df      	b.n	800c5c6 <_strtod_l+0xe6>
 800c606:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c608:	1c5a      	adds	r2, r3, #1
 800c60a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	2b30      	cmp	r3, #48	@ 0x30
 800c610:	d0f9      	beq.n	800c606 <_strtod_l+0x126>
 800c612:	2b00      	cmp	r3, #0
 800c614:	d09d      	beq.n	800c552 <_strtod_l+0x72>
 800c616:	2301      	movs	r3, #1
 800c618:	2700      	movs	r7, #0
 800c61a:	9308      	str	r3, [sp, #32]
 800c61c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c61e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c620:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c622:	46b9      	mov	r9, r7
 800c624:	220a      	movs	r2, #10
 800c626:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c628:	7805      	ldrb	r5, [r0, #0]
 800c62a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c62e:	b2d9      	uxtb	r1, r3
 800c630:	2909      	cmp	r1, #9
 800c632:	d928      	bls.n	800c686 <_strtod_l+0x1a6>
 800c634:	494f      	ldr	r1, [pc, #316]	@ (800c774 <_strtod_l+0x294>)
 800c636:	2201      	movs	r2, #1
 800c638:	f000 ffd6 	bl	800d5e8 <strncmp>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d032      	beq.n	800c6a6 <_strtod_l+0x1c6>
 800c640:	2000      	movs	r0, #0
 800c642:	462a      	mov	r2, r5
 800c644:	900a      	str	r0, [sp, #40]	@ 0x28
 800c646:	464d      	mov	r5, r9
 800c648:	4603      	mov	r3, r0
 800c64a:	2a65      	cmp	r2, #101	@ 0x65
 800c64c:	d001      	beq.n	800c652 <_strtod_l+0x172>
 800c64e:	2a45      	cmp	r2, #69	@ 0x45
 800c650:	d114      	bne.n	800c67c <_strtod_l+0x19c>
 800c652:	b91d      	cbnz	r5, 800c65c <_strtod_l+0x17c>
 800c654:	9a08      	ldr	r2, [sp, #32]
 800c656:	4302      	orrs	r2, r0
 800c658:	d096      	beq.n	800c588 <_strtod_l+0xa8>
 800c65a:	2500      	movs	r5, #0
 800c65c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c65e:	1c62      	adds	r2, r4, #1
 800c660:	9219      	str	r2, [sp, #100]	@ 0x64
 800c662:	7862      	ldrb	r2, [r4, #1]
 800c664:	2a2b      	cmp	r2, #43	@ 0x2b
 800c666:	d07a      	beq.n	800c75e <_strtod_l+0x27e>
 800c668:	2a2d      	cmp	r2, #45	@ 0x2d
 800c66a:	d07e      	beq.n	800c76a <_strtod_l+0x28a>
 800c66c:	f04f 0c00 	mov.w	ip, #0
 800c670:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c674:	2909      	cmp	r1, #9
 800c676:	f240 8085 	bls.w	800c784 <_strtod_l+0x2a4>
 800c67a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c67c:	f04f 0800 	mov.w	r8, #0
 800c680:	e0a5      	b.n	800c7ce <_strtod_l+0x2ee>
 800c682:	2300      	movs	r3, #0
 800c684:	e7c8      	b.n	800c618 <_strtod_l+0x138>
 800c686:	f1b9 0f08 	cmp.w	r9, #8
 800c68a:	bfd8      	it	le
 800c68c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c68e:	f100 0001 	add.w	r0, r0, #1
 800c692:	bfda      	itte	le
 800c694:	fb02 3301 	mlale	r3, r2, r1, r3
 800c698:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c69a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c69e:	f109 0901 	add.w	r9, r9, #1
 800c6a2:	9019      	str	r0, [sp, #100]	@ 0x64
 800c6a4:	e7bf      	b.n	800c626 <_strtod_l+0x146>
 800c6a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6ac:	785a      	ldrb	r2, [r3, #1]
 800c6ae:	f1b9 0f00 	cmp.w	r9, #0
 800c6b2:	d03b      	beq.n	800c72c <_strtod_l+0x24c>
 800c6b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c6b6:	464d      	mov	r5, r9
 800c6b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c6bc:	2b09      	cmp	r3, #9
 800c6be:	d912      	bls.n	800c6e6 <_strtod_l+0x206>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e7c2      	b.n	800c64a <_strtod_l+0x16a>
 800c6c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6c6:	1c5a      	adds	r2, r3, #1
 800c6c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6ca:	785a      	ldrb	r2, [r3, #1]
 800c6cc:	3001      	adds	r0, #1
 800c6ce:	2a30      	cmp	r2, #48	@ 0x30
 800c6d0:	d0f8      	beq.n	800c6c4 <_strtod_l+0x1e4>
 800c6d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c6d6:	2b08      	cmp	r3, #8
 800c6d8:	f200 84d2 	bhi.w	800d080 <_strtod_l+0xba0>
 800c6dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6de:	900a      	str	r0, [sp, #40]	@ 0x28
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	3a30      	subs	r2, #48	@ 0x30
 800c6e8:	f100 0301 	add.w	r3, r0, #1
 800c6ec:	d018      	beq.n	800c720 <_strtod_l+0x240>
 800c6ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6f0:	4419      	add	r1, r3
 800c6f2:	910a      	str	r1, [sp, #40]	@ 0x28
 800c6f4:	462e      	mov	r6, r5
 800c6f6:	f04f 0e0a 	mov.w	lr, #10
 800c6fa:	1c71      	adds	r1, r6, #1
 800c6fc:	eba1 0c05 	sub.w	ip, r1, r5
 800c700:	4563      	cmp	r3, ip
 800c702:	dc15      	bgt.n	800c730 <_strtod_l+0x250>
 800c704:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c708:	182b      	adds	r3, r5, r0
 800c70a:	2b08      	cmp	r3, #8
 800c70c:	f105 0501 	add.w	r5, r5, #1
 800c710:	4405      	add	r5, r0
 800c712:	dc1a      	bgt.n	800c74a <_strtod_l+0x26a>
 800c714:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c716:	230a      	movs	r3, #10
 800c718:	fb03 2301 	mla	r3, r3, r1, r2
 800c71c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c71e:	2300      	movs	r3, #0
 800c720:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c722:	1c51      	adds	r1, r2, #1
 800c724:	9119      	str	r1, [sp, #100]	@ 0x64
 800c726:	7852      	ldrb	r2, [r2, #1]
 800c728:	4618      	mov	r0, r3
 800c72a:	e7c5      	b.n	800c6b8 <_strtod_l+0x1d8>
 800c72c:	4648      	mov	r0, r9
 800c72e:	e7ce      	b.n	800c6ce <_strtod_l+0x1ee>
 800c730:	2e08      	cmp	r6, #8
 800c732:	dc05      	bgt.n	800c740 <_strtod_l+0x260>
 800c734:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c736:	fb0e f606 	mul.w	r6, lr, r6
 800c73a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c73c:	460e      	mov	r6, r1
 800c73e:	e7dc      	b.n	800c6fa <_strtod_l+0x21a>
 800c740:	2910      	cmp	r1, #16
 800c742:	bfd8      	it	le
 800c744:	fb0e f707 	mulle.w	r7, lr, r7
 800c748:	e7f8      	b.n	800c73c <_strtod_l+0x25c>
 800c74a:	2b0f      	cmp	r3, #15
 800c74c:	bfdc      	itt	le
 800c74e:	230a      	movle	r3, #10
 800c750:	fb03 2707 	mlale	r7, r3, r7, r2
 800c754:	e7e3      	b.n	800c71e <_strtod_l+0x23e>
 800c756:	2300      	movs	r3, #0
 800c758:	930a      	str	r3, [sp, #40]	@ 0x28
 800c75a:	2301      	movs	r3, #1
 800c75c:	e77a      	b.n	800c654 <_strtod_l+0x174>
 800c75e:	f04f 0c00 	mov.w	ip, #0
 800c762:	1ca2      	adds	r2, r4, #2
 800c764:	9219      	str	r2, [sp, #100]	@ 0x64
 800c766:	78a2      	ldrb	r2, [r4, #2]
 800c768:	e782      	b.n	800c670 <_strtod_l+0x190>
 800c76a:	f04f 0c01 	mov.w	ip, #1
 800c76e:	e7f8      	b.n	800c762 <_strtod_l+0x282>
 800c770:	0800fdac 	.word	0x0800fdac
 800c774:	0800fbe3 	.word	0x0800fbe3
 800c778:	7ff00000 	.word	0x7ff00000
 800c77c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c77e:	1c51      	adds	r1, r2, #1
 800c780:	9119      	str	r1, [sp, #100]	@ 0x64
 800c782:	7852      	ldrb	r2, [r2, #1]
 800c784:	2a30      	cmp	r2, #48	@ 0x30
 800c786:	d0f9      	beq.n	800c77c <_strtod_l+0x29c>
 800c788:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c78c:	2908      	cmp	r1, #8
 800c78e:	f63f af75 	bhi.w	800c67c <_strtod_l+0x19c>
 800c792:	3a30      	subs	r2, #48	@ 0x30
 800c794:	9209      	str	r2, [sp, #36]	@ 0x24
 800c796:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c798:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c79a:	f04f 080a 	mov.w	r8, #10
 800c79e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c7a0:	1c56      	adds	r6, r2, #1
 800c7a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800c7a4:	7852      	ldrb	r2, [r2, #1]
 800c7a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c7aa:	f1be 0f09 	cmp.w	lr, #9
 800c7ae:	d939      	bls.n	800c824 <_strtod_l+0x344>
 800c7b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c7b2:	1a76      	subs	r6, r6, r1
 800c7b4:	2e08      	cmp	r6, #8
 800c7b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c7ba:	dc03      	bgt.n	800c7c4 <_strtod_l+0x2e4>
 800c7bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7be:	4588      	cmp	r8, r1
 800c7c0:	bfa8      	it	ge
 800c7c2:	4688      	movge	r8, r1
 800c7c4:	f1bc 0f00 	cmp.w	ip, #0
 800c7c8:	d001      	beq.n	800c7ce <_strtod_l+0x2ee>
 800c7ca:	f1c8 0800 	rsb	r8, r8, #0
 800c7ce:	2d00      	cmp	r5, #0
 800c7d0:	d14e      	bne.n	800c870 <_strtod_l+0x390>
 800c7d2:	9908      	ldr	r1, [sp, #32]
 800c7d4:	4308      	orrs	r0, r1
 800c7d6:	f47f aebc 	bne.w	800c552 <_strtod_l+0x72>
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f47f aed4 	bne.w	800c588 <_strtod_l+0xa8>
 800c7e0:	2a69      	cmp	r2, #105	@ 0x69
 800c7e2:	d028      	beq.n	800c836 <_strtod_l+0x356>
 800c7e4:	dc25      	bgt.n	800c832 <_strtod_l+0x352>
 800c7e6:	2a49      	cmp	r2, #73	@ 0x49
 800c7e8:	d025      	beq.n	800c836 <_strtod_l+0x356>
 800c7ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800c7ec:	f47f aecc 	bne.w	800c588 <_strtod_l+0xa8>
 800c7f0:	499a      	ldr	r1, [pc, #616]	@ (800ca5c <_strtod_l+0x57c>)
 800c7f2:	a819      	add	r0, sp, #100	@ 0x64
 800c7f4:	f001 f9e0 	bl	800dbb8 <__match>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	f43f aec5 	beq.w	800c588 <_strtod_l+0xa8>
 800c7fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2b28      	cmp	r3, #40	@ 0x28
 800c804:	d12e      	bne.n	800c864 <_strtod_l+0x384>
 800c806:	4996      	ldr	r1, [pc, #600]	@ (800ca60 <_strtod_l+0x580>)
 800c808:	aa1c      	add	r2, sp, #112	@ 0x70
 800c80a:	a819      	add	r0, sp, #100	@ 0x64
 800c80c:	f001 f9e8 	bl	800dbe0 <__hexnan>
 800c810:	2805      	cmp	r0, #5
 800c812:	d127      	bne.n	800c864 <_strtod_l+0x384>
 800c814:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c816:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c81a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c81e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c822:	e696      	b.n	800c552 <_strtod_l+0x72>
 800c824:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c826:	fb08 2101 	mla	r1, r8, r1, r2
 800c82a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c82e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c830:	e7b5      	b.n	800c79e <_strtod_l+0x2be>
 800c832:	2a6e      	cmp	r2, #110	@ 0x6e
 800c834:	e7da      	b.n	800c7ec <_strtod_l+0x30c>
 800c836:	498b      	ldr	r1, [pc, #556]	@ (800ca64 <_strtod_l+0x584>)
 800c838:	a819      	add	r0, sp, #100	@ 0x64
 800c83a:	f001 f9bd 	bl	800dbb8 <__match>
 800c83e:	2800      	cmp	r0, #0
 800c840:	f43f aea2 	beq.w	800c588 <_strtod_l+0xa8>
 800c844:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c846:	4988      	ldr	r1, [pc, #544]	@ (800ca68 <_strtod_l+0x588>)
 800c848:	3b01      	subs	r3, #1
 800c84a:	a819      	add	r0, sp, #100	@ 0x64
 800c84c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c84e:	f001 f9b3 	bl	800dbb8 <__match>
 800c852:	b910      	cbnz	r0, 800c85a <_strtod_l+0x37a>
 800c854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c856:	3301      	adds	r3, #1
 800c858:	9319      	str	r3, [sp, #100]	@ 0x64
 800c85a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ca78 <_strtod_l+0x598>
 800c85e:	f04f 0a00 	mov.w	sl, #0
 800c862:	e676      	b.n	800c552 <_strtod_l+0x72>
 800c864:	4881      	ldr	r0, [pc, #516]	@ (800ca6c <_strtod_l+0x58c>)
 800c866:	f000 fee3 	bl	800d630 <nan>
 800c86a:	ec5b ab10 	vmov	sl, fp, d0
 800c86e:	e670      	b.n	800c552 <_strtod_l+0x72>
 800c870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c872:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c874:	eba8 0303 	sub.w	r3, r8, r3
 800c878:	f1b9 0f00 	cmp.w	r9, #0
 800c87c:	bf08      	it	eq
 800c87e:	46a9      	moveq	r9, r5
 800c880:	2d10      	cmp	r5, #16
 800c882:	9309      	str	r3, [sp, #36]	@ 0x24
 800c884:	462c      	mov	r4, r5
 800c886:	bfa8      	it	ge
 800c888:	2410      	movge	r4, #16
 800c88a:	f7f3 fe5b 	bl	8000544 <__aeabi_ui2d>
 800c88e:	2d09      	cmp	r5, #9
 800c890:	4682      	mov	sl, r0
 800c892:	468b      	mov	fp, r1
 800c894:	dc13      	bgt.n	800c8be <_strtod_l+0x3de>
 800c896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f43f ae5a 	beq.w	800c552 <_strtod_l+0x72>
 800c89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a0:	dd78      	ble.n	800c994 <_strtod_l+0x4b4>
 800c8a2:	2b16      	cmp	r3, #22
 800c8a4:	dc5f      	bgt.n	800c966 <_strtod_l+0x486>
 800c8a6:	4972      	ldr	r1, [pc, #456]	@ (800ca70 <_strtod_l+0x590>)
 800c8a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8b0:	4652      	mov	r2, sl
 800c8b2:	465b      	mov	r3, fp
 800c8b4:	f7f3 fec0 	bl	8000638 <__aeabi_dmul>
 800c8b8:	4682      	mov	sl, r0
 800c8ba:	468b      	mov	fp, r1
 800c8bc:	e649      	b.n	800c552 <_strtod_l+0x72>
 800c8be:	4b6c      	ldr	r3, [pc, #432]	@ (800ca70 <_strtod_l+0x590>)
 800c8c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c8c8:	f7f3 feb6 	bl	8000638 <__aeabi_dmul>
 800c8cc:	4682      	mov	sl, r0
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	468b      	mov	fp, r1
 800c8d2:	f7f3 fe37 	bl	8000544 <__aeabi_ui2d>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4650      	mov	r0, sl
 800c8dc:	4659      	mov	r1, fp
 800c8de:	f7f3 fcf5 	bl	80002cc <__adddf3>
 800c8e2:	2d0f      	cmp	r5, #15
 800c8e4:	4682      	mov	sl, r0
 800c8e6:	468b      	mov	fp, r1
 800c8e8:	ddd5      	ble.n	800c896 <_strtod_l+0x3b6>
 800c8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ec:	1b2c      	subs	r4, r5, r4
 800c8ee:	441c      	add	r4, r3
 800c8f0:	2c00      	cmp	r4, #0
 800c8f2:	f340 8093 	ble.w	800ca1c <_strtod_l+0x53c>
 800c8f6:	f014 030f 	ands.w	r3, r4, #15
 800c8fa:	d00a      	beq.n	800c912 <_strtod_l+0x432>
 800c8fc:	495c      	ldr	r1, [pc, #368]	@ (800ca70 <_strtod_l+0x590>)
 800c8fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c902:	4652      	mov	r2, sl
 800c904:	465b      	mov	r3, fp
 800c906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c90a:	f7f3 fe95 	bl	8000638 <__aeabi_dmul>
 800c90e:	4682      	mov	sl, r0
 800c910:	468b      	mov	fp, r1
 800c912:	f034 040f 	bics.w	r4, r4, #15
 800c916:	d073      	beq.n	800ca00 <_strtod_l+0x520>
 800c918:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c91c:	dd49      	ble.n	800c9b2 <_strtod_l+0x4d2>
 800c91e:	2400      	movs	r4, #0
 800c920:	46a0      	mov	r8, r4
 800c922:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c924:	46a1      	mov	r9, r4
 800c926:	9a05      	ldr	r2, [sp, #20]
 800c928:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ca78 <_strtod_l+0x598>
 800c92c:	2322      	movs	r3, #34	@ 0x22
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	f04f 0a00 	mov.w	sl, #0
 800c934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c936:	2b00      	cmp	r3, #0
 800c938:	f43f ae0b 	beq.w	800c552 <_strtod_l+0x72>
 800c93c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c93e:	9805      	ldr	r0, [sp, #20]
 800c940:	f7ff f946 	bl	800bbd0 <_Bfree>
 800c944:	9805      	ldr	r0, [sp, #20]
 800c946:	4649      	mov	r1, r9
 800c948:	f7ff f942 	bl	800bbd0 <_Bfree>
 800c94c:	9805      	ldr	r0, [sp, #20]
 800c94e:	4641      	mov	r1, r8
 800c950:	f7ff f93e 	bl	800bbd0 <_Bfree>
 800c954:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c956:	9805      	ldr	r0, [sp, #20]
 800c958:	f7ff f93a 	bl	800bbd0 <_Bfree>
 800c95c:	9805      	ldr	r0, [sp, #20]
 800c95e:	4621      	mov	r1, r4
 800c960:	f7ff f936 	bl	800bbd0 <_Bfree>
 800c964:	e5f5      	b.n	800c552 <_strtod_l+0x72>
 800c966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c968:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c96c:	4293      	cmp	r3, r2
 800c96e:	dbbc      	blt.n	800c8ea <_strtod_l+0x40a>
 800c970:	4c3f      	ldr	r4, [pc, #252]	@ (800ca70 <_strtod_l+0x590>)
 800c972:	f1c5 050f 	rsb	r5, r5, #15
 800c976:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c97a:	4652      	mov	r2, sl
 800c97c:	465b      	mov	r3, fp
 800c97e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c982:	f7f3 fe59 	bl	8000638 <__aeabi_dmul>
 800c986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c988:	1b5d      	subs	r5, r3, r5
 800c98a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c98e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c992:	e78f      	b.n	800c8b4 <_strtod_l+0x3d4>
 800c994:	3316      	adds	r3, #22
 800c996:	dba8      	blt.n	800c8ea <_strtod_l+0x40a>
 800c998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c99a:	eba3 0808 	sub.w	r8, r3, r8
 800c99e:	4b34      	ldr	r3, [pc, #208]	@ (800ca70 <_strtod_l+0x590>)
 800c9a0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c9a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c9a8:	4650      	mov	r0, sl
 800c9aa:	4659      	mov	r1, fp
 800c9ac:	f7f3 ff6e 	bl	800088c <__aeabi_ddiv>
 800c9b0:	e782      	b.n	800c8b8 <_strtod_l+0x3d8>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	4f2f      	ldr	r7, [pc, #188]	@ (800ca74 <_strtod_l+0x594>)
 800c9b6:	1124      	asrs	r4, r4, #4
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	4659      	mov	r1, fp
 800c9bc:	461e      	mov	r6, r3
 800c9be:	2c01      	cmp	r4, #1
 800c9c0:	dc21      	bgt.n	800ca06 <_strtod_l+0x526>
 800c9c2:	b10b      	cbz	r3, 800c9c8 <_strtod_l+0x4e8>
 800c9c4:	4682      	mov	sl, r0
 800c9c6:	468b      	mov	fp, r1
 800c9c8:	492a      	ldr	r1, [pc, #168]	@ (800ca74 <_strtod_l+0x594>)
 800c9ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c9ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c9d2:	4652      	mov	r2, sl
 800c9d4:	465b      	mov	r3, fp
 800c9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9da:	f7f3 fe2d 	bl	8000638 <__aeabi_dmul>
 800c9de:	4b26      	ldr	r3, [pc, #152]	@ (800ca78 <_strtod_l+0x598>)
 800c9e0:	460a      	mov	r2, r1
 800c9e2:	400b      	ands	r3, r1
 800c9e4:	4925      	ldr	r1, [pc, #148]	@ (800ca7c <_strtod_l+0x59c>)
 800c9e6:	428b      	cmp	r3, r1
 800c9e8:	4682      	mov	sl, r0
 800c9ea:	d898      	bhi.n	800c91e <_strtod_l+0x43e>
 800c9ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c9f0:	428b      	cmp	r3, r1
 800c9f2:	bf86      	itte	hi
 800c9f4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ca80 <_strtod_l+0x5a0>
 800c9f8:	f04f 3aff 	movhi.w	sl, #4294967295
 800c9fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ca00:	2300      	movs	r3, #0
 800ca02:	9308      	str	r3, [sp, #32]
 800ca04:	e076      	b.n	800caf4 <_strtod_l+0x614>
 800ca06:	07e2      	lsls	r2, r4, #31
 800ca08:	d504      	bpl.n	800ca14 <_strtod_l+0x534>
 800ca0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca0e:	f7f3 fe13 	bl	8000638 <__aeabi_dmul>
 800ca12:	2301      	movs	r3, #1
 800ca14:	3601      	adds	r6, #1
 800ca16:	1064      	asrs	r4, r4, #1
 800ca18:	3708      	adds	r7, #8
 800ca1a:	e7d0      	b.n	800c9be <_strtod_l+0x4de>
 800ca1c:	d0f0      	beq.n	800ca00 <_strtod_l+0x520>
 800ca1e:	4264      	negs	r4, r4
 800ca20:	f014 020f 	ands.w	r2, r4, #15
 800ca24:	d00a      	beq.n	800ca3c <_strtod_l+0x55c>
 800ca26:	4b12      	ldr	r3, [pc, #72]	@ (800ca70 <_strtod_l+0x590>)
 800ca28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca2c:	4650      	mov	r0, sl
 800ca2e:	4659      	mov	r1, fp
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	f7f3 ff2a 	bl	800088c <__aeabi_ddiv>
 800ca38:	4682      	mov	sl, r0
 800ca3a:	468b      	mov	fp, r1
 800ca3c:	1124      	asrs	r4, r4, #4
 800ca3e:	d0df      	beq.n	800ca00 <_strtod_l+0x520>
 800ca40:	2c1f      	cmp	r4, #31
 800ca42:	dd1f      	ble.n	800ca84 <_strtod_l+0x5a4>
 800ca44:	2400      	movs	r4, #0
 800ca46:	46a0      	mov	r8, r4
 800ca48:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ca4a:	46a1      	mov	r9, r4
 800ca4c:	9a05      	ldr	r2, [sp, #20]
 800ca4e:	2322      	movs	r3, #34	@ 0x22
 800ca50:	f04f 0a00 	mov.w	sl, #0
 800ca54:	f04f 0b00 	mov.w	fp, #0
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	e76b      	b.n	800c934 <_strtod_l+0x454>
 800ca5c:	0800fad1 	.word	0x0800fad1
 800ca60:	0800fd98 	.word	0x0800fd98
 800ca64:	0800fac9 	.word	0x0800fac9
 800ca68:	0800fb00 	.word	0x0800fb00
 800ca6c:	0800fc39 	.word	0x0800fc39
 800ca70:	0800fcd0 	.word	0x0800fcd0
 800ca74:	0800fca8 	.word	0x0800fca8
 800ca78:	7ff00000 	.word	0x7ff00000
 800ca7c:	7ca00000 	.word	0x7ca00000
 800ca80:	7fefffff 	.word	0x7fefffff
 800ca84:	f014 0310 	ands.w	r3, r4, #16
 800ca88:	bf18      	it	ne
 800ca8a:	236a      	movne	r3, #106	@ 0x6a
 800ca8c:	4ea9      	ldr	r6, [pc, #676]	@ (800cd34 <_strtod_l+0x854>)
 800ca8e:	9308      	str	r3, [sp, #32]
 800ca90:	4650      	mov	r0, sl
 800ca92:	4659      	mov	r1, fp
 800ca94:	2300      	movs	r3, #0
 800ca96:	07e7      	lsls	r7, r4, #31
 800ca98:	d504      	bpl.n	800caa4 <_strtod_l+0x5c4>
 800ca9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca9e:	f7f3 fdcb 	bl	8000638 <__aeabi_dmul>
 800caa2:	2301      	movs	r3, #1
 800caa4:	1064      	asrs	r4, r4, #1
 800caa6:	f106 0608 	add.w	r6, r6, #8
 800caaa:	d1f4      	bne.n	800ca96 <_strtod_l+0x5b6>
 800caac:	b10b      	cbz	r3, 800cab2 <_strtod_l+0x5d2>
 800caae:	4682      	mov	sl, r0
 800cab0:	468b      	mov	fp, r1
 800cab2:	9b08      	ldr	r3, [sp, #32]
 800cab4:	b1b3      	cbz	r3, 800cae4 <_strtod_l+0x604>
 800cab6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800caba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	4659      	mov	r1, fp
 800cac2:	dd0f      	ble.n	800cae4 <_strtod_l+0x604>
 800cac4:	2b1f      	cmp	r3, #31
 800cac6:	dd56      	ble.n	800cb76 <_strtod_l+0x696>
 800cac8:	2b34      	cmp	r3, #52	@ 0x34
 800caca:	bfde      	ittt	le
 800cacc:	f04f 33ff 	movle.w	r3, #4294967295
 800cad0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cad4:	4093      	lslle	r3, r2
 800cad6:	f04f 0a00 	mov.w	sl, #0
 800cada:	bfcc      	ite	gt
 800cadc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cae0:	ea03 0b01 	andle.w	fp, r3, r1
 800cae4:	2200      	movs	r2, #0
 800cae6:	2300      	movs	r3, #0
 800cae8:	4650      	mov	r0, sl
 800caea:	4659      	mov	r1, fp
 800caec:	f7f4 f80c 	bl	8000b08 <__aeabi_dcmpeq>
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d1a7      	bne.n	800ca44 <_strtod_l+0x564>
 800caf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cafa:	9805      	ldr	r0, [sp, #20]
 800cafc:	462b      	mov	r3, r5
 800cafe:	464a      	mov	r2, r9
 800cb00:	f7ff f8ce 	bl	800bca0 <__s2b>
 800cb04:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cb06:	2800      	cmp	r0, #0
 800cb08:	f43f af09 	beq.w	800c91e <_strtod_l+0x43e>
 800cb0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb10:	2a00      	cmp	r2, #0
 800cb12:	eba3 0308 	sub.w	r3, r3, r8
 800cb16:	bfa8      	it	ge
 800cb18:	2300      	movge	r3, #0
 800cb1a:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb1c:	2400      	movs	r4, #0
 800cb1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cb22:	9316      	str	r3, [sp, #88]	@ 0x58
 800cb24:	46a0      	mov	r8, r4
 800cb26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb28:	9805      	ldr	r0, [sp, #20]
 800cb2a:	6859      	ldr	r1, [r3, #4]
 800cb2c:	f7ff f810 	bl	800bb50 <_Balloc>
 800cb30:	4681      	mov	r9, r0
 800cb32:	2800      	cmp	r0, #0
 800cb34:	f43f aef7 	beq.w	800c926 <_strtod_l+0x446>
 800cb38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb3a:	691a      	ldr	r2, [r3, #16]
 800cb3c:	3202      	adds	r2, #2
 800cb3e:	f103 010c 	add.w	r1, r3, #12
 800cb42:	0092      	lsls	r2, r2, #2
 800cb44:	300c      	adds	r0, #12
 800cb46:	f7fe f894 	bl	800ac72 <memcpy>
 800cb4a:	ec4b ab10 	vmov	d0, sl, fp
 800cb4e:	9805      	ldr	r0, [sp, #20]
 800cb50:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb52:	a91b      	add	r1, sp, #108	@ 0x6c
 800cb54:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cb58:	f7ff fbd6 	bl	800c308 <__d2b>
 800cb5c:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	f43f aee1 	beq.w	800c926 <_strtod_l+0x446>
 800cb64:	9805      	ldr	r0, [sp, #20]
 800cb66:	2101      	movs	r1, #1
 800cb68:	f7ff f930 	bl	800bdcc <__i2b>
 800cb6c:	4680      	mov	r8, r0
 800cb6e:	b948      	cbnz	r0, 800cb84 <_strtod_l+0x6a4>
 800cb70:	f04f 0800 	mov.w	r8, #0
 800cb74:	e6d7      	b.n	800c926 <_strtod_l+0x446>
 800cb76:	f04f 32ff 	mov.w	r2, #4294967295
 800cb7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb7e:	ea03 0a0a 	and.w	sl, r3, sl
 800cb82:	e7af      	b.n	800cae4 <_strtod_l+0x604>
 800cb84:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cb86:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cb88:	2d00      	cmp	r5, #0
 800cb8a:	bfab      	itete	ge
 800cb8c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cb8e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cb90:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cb92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cb94:	bfac      	ite	ge
 800cb96:	18ef      	addge	r7, r5, r3
 800cb98:	1b5e      	sublt	r6, r3, r5
 800cb9a:	9b08      	ldr	r3, [sp, #32]
 800cb9c:	1aed      	subs	r5, r5, r3
 800cb9e:	4415      	add	r5, r2
 800cba0:	4b65      	ldr	r3, [pc, #404]	@ (800cd38 <_strtod_l+0x858>)
 800cba2:	3d01      	subs	r5, #1
 800cba4:	429d      	cmp	r5, r3
 800cba6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cbaa:	da50      	bge.n	800cc4e <_strtod_l+0x76e>
 800cbac:	1b5b      	subs	r3, r3, r5
 800cbae:	2b1f      	cmp	r3, #31
 800cbb0:	eba2 0203 	sub.w	r2, r2, r3
 800cbb4:	f04f 0101 	mov.w	r1, #1
 800cbb8:	dc3d      	bgt.n	800cc36 <_strtod_l+0x756>
 800cbba:	fa01 f303 	lsl.w	r3, r1, r3
 800cbbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbc4:	18bd      	adds	r5, r7, r2
 800cbc6:	9b08      	ldr	r3, [sp, #32]
 800cbc8:	42af      	cmp	r7, r5
 800cbca:	4416      	add	r6, r2
 800cbcc:	441e      	add	r6, r3
 800cbce:	463b      	mov	r3, r7
 800cbd0:	bfa8      	it	ge
 800cbd2:	462b      	movge	r3, r5
 800cbd4:	42b3      	cmp	r3, r6
 800cbd6:	bfa8      	it	ge
 800cbd8:	4633      	movge	r3, r6
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	bfc2      	ittt	gt
 800cbde:	1aed      	subgt	r5, r5, r3
 800cbe0:	1af6      	subgt	r6, r6, r3
 800cbe2:	1aff      	subgt	r7, r7, r3
 800cbe4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	dd16      	ble.n	800cc18 <_strtod_l+0x738>
 800cbea:	4641      	mov	r1, r8
 800cbec:	9805      	ldr	r0, [sp, #20]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	f7ff f9a4 	bl	800bf3c <__pow5mult>
 800cbf4:	4680      	mov	r8, r0
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d0ba      	beq.n	800cb70 <_strtod_l+0x690>
 800cbfa:	4601      	mov	r1, r0
 800cbfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbfe:	9805      	ldr	r0, [sp, #20]
 800cc00:	f7ff f8fa 	bl	800bdf8 <__multiply>
 800cc04:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc06:	2800      	cmp	r0, #0
 800cc08:	f43f ae8d 	beq.w	800c926 <_strtod_l+0x446>
 800cc0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc0e:	9805      	ldr	r0, [sp, #20]
 800cc10:	f7fe ffde 	bl	800bbd0 <_Bfree>
 800cc14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc16:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc18:	2d00      	cmp	r5, #0
 800cc1a:	dc1d      	bgt.n	800cc58 <_strtod_l+0x778>
 800cc1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	dd23      	ble.n	800cc6a <_strtod_l+0x78a>
 800cc22:	4649      	mov	r1, r9
 800cc24:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cc26:	9805      	ldr	r0, [sp, #20]
 800cc28:	f7ff f988 	bl	800bf3c <__pow5mult>
 800cc2c:	4681      	mov	r9, r0
 800cc2e:	b9e0      	cbnz	r0, 800cc6a <_strtod_l+0x78a>
 800cc30:	f04f 0900 	mov.w	r9, #0
 800cc34:	e677      	b.n	800c926 <_strtod_l+0x446>
 800cc36:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cc3a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cc3e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cc42:	35e2      	adds	r5, #226	@ 0xe2
 800cc44:	fa01 f305 	lsl.w	r3, r1, r5
 800cc48:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc4a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cc4c:	e7ba      	b.n	800cbc4 <_strtod_l+0x6e4>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc52:	2301      	movs	r3, #1
 800cc54:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc56:	e7b5      	b.n	800cbc4 <_strtod_l+0x6e4>
 800cc58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc5a:	9805      	ldr	r0, [sp, #20]
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	f7ff f9c7 	bl	800bff0 <__lshift>
 800cc62:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d1d9      	bne.n	800cc1c <_strtod_l+0x73c>
 800cc68:	e65d      	b.n	800c926 <_strtod_l+0x446>
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	dd07      	ble.n	800cc7e <_strtod_l+0x79e>
 800cc6e:	4649      	mov	r1, r9
 800cc70:	9805      	ldr	r0, [sp, #20]
 800cc72:	4632      	mov	r2, r6
 800cc74:	f7ff f9bc 	bl	800bff0 <__lshift>
 800cc78:	4681      	mov	r9, r0
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d0d8      	beq.n	800cc30 <_strtod_l+0x750>
 800cc7e:	2f00      	cmp	r7, #0
 800cc80:	dd08      	ble.n	800cc94 <_strtod_l+0x7b4>
 800cc82:	4641      	mov	r1, r8
 800cc84:	9805      	ldr	r0, [sp, #20]
 800cc86:	463a      	mov	r2, r7
 800cc88:	f7ff f9b2 	bl	800bff0 <__lshift>
 800cc8c:	4680      	mov	r8, r0
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	f43f ae49 	beq.w	800c926 <_strtod_l+0x446>
 800cc94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc96:	9805      	ldr	r0, [sp, #20]
 800cc98:	464a      	mov	r2, r9
 800cc9a:	f7ff fa31 	bl	800c100 <__mdiff>
 800cc9e:	4604      	mov	r4, r0
 800cca0:	2800      	cmp	r0, #0
 800cca2:	f43f ae40 	beq.w	800c926 <_strtod_l+0x446>
 800cca6:	68c3      	ldr	r3, [r0, #12]
 800cca8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60c3      	str	r3, [r0, #12]
 800ccae:	4641      	mov	r1, r8
 800ccb0:	f7ff fa0a 	bl	800c0c8 <__mcmp>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	da45      	bge.n	800cd44 <_strtod_l+0x864>
 800ccb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccba:	ea53 030a 	orrs.w	r3, r3, sl
 800ccbe:	d16b      	bne.n	800cd98 <_strtod_l+0x8b8>
 800ccc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d167      	bne.n	800cd98 <_strtod_l+0x8b8>
 800ccc8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cccc:	0d1b      	lsrs	r3, r3, #20
 800ccce:	051b      	lsls	r3, r3, #20
 800ccd0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccd4:	d960      	bls.n	800cd98 <_strtod_l+0x8b8>
 800ccd6:	6963      	ldr	r3, [r4, #20]
 800ccd8:	b913      	cbnz	r3, 800cce0 <_strtod_l+0x800>
 800ccda:	6923      	ldr	r3, [r4, #16]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	dd5b      	ble.n	800cd98 <_strtod_l+0x8b8>
 800cce0:	4621      	mov	r1, r4
 800cce2:	2201      	movs	r2, #1
 800cce4:	9805      	ldr	r0, [sp, #20]
 800cce6:	f7ff f983 	bl	800bff0 <__lshift>
 800ccea:	4641      	mov	r1, r8
 800ccec:	4604      	mov	r4, r0
 800ccee:	f7ff f9eb 	bl	800c0c8 <__mcmp>
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	dd50      	ble.n	800cd98 <_strtod_l+0x8b8>
 800ccf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccfa:	9a08      	ldr	r2, [sp, #32]
 800ccfc:	0d1b      	lsrs	r3, r3, #20
 800ccfe:	051b      	lsls	r3, r3, #20
 800cd00:	2a00      	cmp	r2, #0
 800cd02:	d06a      	beq.n	800cdda <_strtod_l+0x8fa>
 800cd04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cd08:	d867      	bhi.n	800cdda <_strtod_l+0x8fa>
 800cd0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cd0e:	f67f ae9d 	bls.w	800ca4c <_strtod_l+0x56c>
 800cd12:	4b0a      	ldr	r3, [pc, #40]	@ (800cd3c <_strtod_l+0x85c>)
 800cd14:	4650      	mov	r0, sl
 800cd16:	4659      	mov	r1, fp
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f7f3 fc8d 	bl	8000638 <__aeabi_dmul>
 800cd1e:	4b08      	ldr	r3, [pc, #32]	@ (800cd40 <_strtod_l+0x860>)
 800cd20:	400b      	ands	r3, r1
 800cd22:	4682      	mov	sl, r0
 800cd24:	468b      	mov	fp, r1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f47f ae08 	bne.w	800c93c <_strtod_l+0x45c>
 800cd2c:	9a05      	ldr	r2, [sp, #20]
 800cd2e:	2322      	movs	r3, #34	@ 0x22
 800cd30:	6013      	str	r3, [r2, #0]
 800cd32:	e603      	b.n	800c93c <_strtod_l+0x45c>
 800cd34:	0800fdc0 	.word	0x0800fdc0
 800cd38:	fffffc02 	.word	0xfffffc02
 800cd3c:	39500000 	.word	0x39500000
 800cd40:	7ff00000 	.word	0x7ff00000
 800cd44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cd48:	d165      	bne.n	800ce16 <_strtod_l+0x936>
 800cd4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd50:	b35a      	cbz	r2, 800cdaa <_strtod_l+0x8ca>
 800cd52:	4a9f      	ldr	r2, [pc, #636]	@ (800cfd0 <_strtod_l+0xaf0>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d12b      	bne.n	800cdb0 <_strtod_l+0x8d0>
 800cd58:	9b08      	ldr	r3, [sp, #32]
 800cd5a:	4651      	mov	r1, sl
 800cd5c:	b303      	cbz	r3, 800cda0 <_strtod_l+0x8c0>
 800cd5e:	4b9d      	ldr	r3, [pc, #628]	@ (800cfd4 <_strtod_l+0xaf4>)
 800cd60:	465a      	mov	r2, fp
 800cd62:	4013      	ands	r3, r2
 800cd64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cd68:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6c:	d81b      	bhi.n	800cda6 <_strtod_l+0x8c6>
 800cd6e:	0d1b      	lsrs	r3, r3, #20
 800cd70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd74:	fa02 f303 	lsl.w	r3, r2, r3
 800cd78:	4299      	cmp	r1, r3
 800cd7a:	d119      	bne.n	800cdb0 <_strtod_l+0x8d0>
 800cd7c:	4b96      	ldr	r3, [pc, #600]	@ (800cfd8 <_strtod_l+0xaf8>)
 800cd7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d102      	bne.n	800cd8a <_strtod_l+0x8aa>
 800cd84:	3101      	adds	r1, #1
 800cd86:	f43f adce 	beq.w	800c926 <_strtod_l+0x446>
 800cd8a:	4b92      	ldr	r3, [pc, #584]	@ (800cfd4 <_strtod_l+0xaf4>)
 800cd8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd8e:	401a      	ands	r2, r3
 800cd90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cd94:	f04f 0a00 	mov.w	sl, #0
 800cd98:	9b08      	ldr	r3, [sp, #32]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d1b9      	bne.n	800cd12 <_strtod_l+0x832>
 800cd9e:	e5cd      	b.n	800c93c <_strtod_l+0x45c>
 800cda0:	f04f 33ff 	mov.w	r3, #4294967295
 800cda4:	e7e8      	b.n	800cd78 <_strtod_l+0x898>
 800cda6:	4613      	mov	r3, r2
 800cda8:	e7e6      	b.n	800cd78 <_strtod_l+0x898>
 800cdaa:	ea53 030a 	orrs.w	r3, r3, sl
 800cdae:	d0a2      	beq.n	800ccf6 <_strtod_l+0x816>
 800cdb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdb2:	b1db      	cbz	r3, 800cdec <_strtod_l+0x90c>
 800cdb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cdb6:	4213      	tst	r3, r2
 800cdb8:	d0ee      	beq.n	800cd98 <_strtod_l+0x8b8>
 800cdba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdbc:	9a08      	ldr	r2, [sp, #32]
 800cdbe:	4650      	mov	r0, sl
 800cdc0:	4659      	mov	r1, fp
 800cdc2:	b1bb      	cbz	r3, 800cdf4 <_strtod_l+0x914>
 800cdc4:	f7ff fb6e 	bl	800c4a4 <sulp>
 800cdc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdcc:	ec53 2b10 	vmov	r2, r3, d0
 800cdd0:	f7f3 fa7c 	bl	80002cc <__adddf3>
 800cdd4:	4682      	mov	sl, r0
 800cdd6:	468b      	mov	fp, r1
 800cdd8:	e7de      	b.n	800cd98 <_strtod_l+0x8b8>
 800cdda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cdde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cde2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cde6:	f04f 3aff 	mov.w	sl, #4294967295
 800cdea:	e7d5      	b.n	800cd98 <_strtod_l+0x8b8>
 800cdec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdee:	ea13 0f0a 	tst.w	r3, sl
 800cdf2:	e7e1      	b.n	800cdb8 <_strtod_l+0x8d8>
 800cdf4:	f7ff fb56 	bl	800c4a4 <sulp>
 800cdf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdfc:	ec53 2b10 	vmov	r2, r3, d0
 800ce00:	f7f3 fa62 	bl	80002c8 <__aeabi_dsub>
 800ce04:	2200      	movs	r2, #0
 800ce06:	2300      	movs	r3, #0
 800ce08:	4682      	mov	sl, r0
 800ce0a:	468b      	mov	fp, r1
 800ce0c:	f7f3 fe7c 	bl	8000b08 <__aeabi_dcmpeq>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d0c1      	beq.n	800cd98 <_strtod_l+0x8b8>
 800ce14:	e61a      	b.n	800ca4c <_strtod_l+0x56c>
 800ce16:	4641      	mov	r1, r8
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f7ff facd 	bl	800c3b8 <__ratio>
 800ce1e:	ec57 6b10 	vmov	r6, r7, d0
 800ce22:	2200      	movs	r2, #0
 800ce24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce28:	4630      	mov	r0, r6
 800ce2a:	4639      	mov	r1, r7
 800ce2c:	f7f3 fe80 	bl	8000b30 <__aeabi_dcmple>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d06f      	beq.n	800cf14 <_strtod_l+0xa34>
 800ce34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d17a      	bne.n	800cf30 <_strtod_l+0xa50>
 800ce3a:	f1ba 0f00 	cmp.w	sl, #0
 800ce3e:	d158      	bne.n	800cef2 <_strtod_l+0xa12>
 800ce40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d15a      	bne.n	800cf00 <_strtod_l+0xa20>
 800ce4a:	4b64      	ldr	r3, [pc, #400]	@ (800cfdc <_strtod_l+0xafc>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	4630      	mov	r0, r6
 800ce50:	4639      	mov	r1, r7
 800ce52:	f7f3 fe63 	bl	8000b1c <__aeabi_dcmplt>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d159      	bne.n	800cf0e <_strtod_l+0xa2e>
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	4b60      	ldr	r3, [pc, #384]	@ (800cfe0 <_strtod_l+0xb00>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	f7f3 fbe9 	bl	8000638 <__aeabi_dmul>
 800ce66:	4606      	mov	r6, r0
 800ce68:	460f      	mov	r7, r1
 800ce6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ce6e:	9606      	str	r6, [sp, #24]
 800ce70:	9307      	str	r3, [sp, #28]
 800ce72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce76:	4d57      	ldr	r5, [pc, #348]	@ (800cfd4 <_strtod_l+0xaf4>)
 800ce78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce7e:	401d      	ands	r5, r3
 800ce80:	4b58      	ldr	r3, [pc, #352]	@ (800cfe4 <_strtod_l+0xb04>)
 800ce82:	429d      	cmp	r5, r3
 800ce84:	f040 80b2 	bne.w	800cfec <_strtod_l+0xb0c>
 800ce88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ce8e:	ec4b ab10 	vmov	d0, sl, fp
 800ce92:	f7ff f9c9 	bl	800c228 <__ulp>
 800ce96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce9a:	ec51 0b10 	vmov	r0, r1, d0
 800ce9e:	f7f3 fbcb 	bl	8000638 <__aeabi_dmul>
 800cea2:	4652      	mov	r2, sl
 800cea4:	465b      	mov	r3, fp
 800cea6:	f7f3 fa11 	bl	80002cc <__adddf3>
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4949      	ldr	r1, [pc, #292]	@ (800cfd4 <_strtod_l+0xaf4>)
 800ceae:	4a4e      	ldr	r2, [pc, #312]	@ (800cfe8 <_strtod_l+0xb08>)
 800ceb0:	4019      	ands	r1, r3
 800ceb2:	4291      	cmp	r1, r2
 800ceb4:	4682      	mov	sl, r0
 800ceb6:	d942      	bls.n	800cf3e <_strtod_l+0xa5e>
 800ceb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ceba:	4b47      	ldr	r3, [pc, #284]	@ (800cfd8 <_strtod_l+0xaf8>)
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d103      	bne.n	800cec8 <_strtod_l+0x9e8>
 800cec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cec2:	3301      	adds	r3, #1
 800cec4:	f43f ad2f 	beq.w	800c926 <_strtod_l+0x446>
 800cec8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cfd8 <_strtod_l+0xaf8>
 800cecc:	f04f 3aff 	mov.w	sl, #4294967295
 800ced0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ced2:	9805      	ldr	r0, [sp, #20]
 800ced4:	f7fe fe7c 	bl	800bbd0 <_Bfree>
 800ced8:	9805      	ldr	r0, [sp, #20]
 800ceda:	4649      	mov	r1, r9
 800cedc:	f7fe fe78 	bl	800bbd0 <_Bfree>
 800cee0:	9805      	ldr	r0, [sp, #20]
 800cee2:	4641      	mov	r1, r8
 800cee4:	f7fe fe74 	bl	800bbd0 <_Bfree>
 800cee8:	9805      	ldr	r0, [sp, #20]
 800ceea:	4621      	mov	r1, r4
 800ceec:	f7fe fe70 	bl	800bbd0 <_Bfree>
 800cef0:	e619      	b.n	800cb26 <_strtod_l+0x646>
 800cef2:	f1ba 0f01 	cmp.w	sl, #1
 800cef6:	d103      	bne.n	800cf00 <_strtod_l+0xa20>
 800cef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f43f ada6 	beq.w	800ca4c <_strtod_l+0x56c>
 800cf00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cfb0 <_strtod_l+0xad0>
 800cf04:	4f35      	ldr	r7, [pc, #212]	@ (800cfdc <_strtod_l+0xafc>)
 800cf06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf0a:	2600      	movs	r6, #0
 800cf0c:	e7b1      	b.n	800ce72 <_strtod_l+0x992>
 800cf0e:	4f34      	ldr	r7, [pc, #208]	@ (800cfe0 <_strtod_l+0xb00>)
 800cf10:	2600      	movs	r6, #0
 800cf12:	e7aa      	b.n	800ce6a <_strtod_l+0x98a>
 800cf14:	4b32      	ldr	r3, [pc, #200]	@ (800cfe0 <_strtod_l+0xb00>)
 800cf16:	4630      	mov	r0, r6
 800cf18:	4639      	mov	r1, r7
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f7f3 fb8c 	bl	8000638 <__aeabi_dmul>
 800cf20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf22:	4606      	mov	r6, r0
 800cf24:	460f      	mov	r7, r1
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d09f      	beq.n	800ce6a <_strtod_l+0x98a>
 800cf2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cf2e:	e7a0      	b.n	800ce72 <_strtod_l+0x992>
 800cf30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cfb8 <_strtod_l+0xad8>
 800cf34:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf38:	ec57 6b17 	vmov	r6, r7, d7
 800cf3c:	e799      	b.n	800ce72 <_strtod_l+0x992>
 800cf3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cf42:	9b08      	ldr	r3, [sp, #32]
 800cf44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1c1      	bne.n	800ced0 <_strtod_l+0x9f0>
 800cf4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf50:	0d1b      	lsrs	r3, r3, #20
 800cf52:	051b      	lsls	r3, r3, #20
 800cf54:	429d      	cmp	r5, r3
 800cf56:	d1bb      	bne.n	800ced0 <_strtod_l+0x9f0>
 800cf58:	4630      	mov	r0, r6
 800cf5a:	4639      	mov	r1, r7
 800cf5c:	f7f3 fecc 	bl	8000cf8 <__aeabi_d2lz>
 800cf60:	f7f3 fb3c 	bl	80005dc <__aeabi_l2d>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	4630      	mov	r0, r6
 800cf6a:	4639      	mov	r1, r7
 800cf6c:	f7f3 f9ac 	bl	80002c8 <__aeabi_dsub>
 800cf70:	460b      	mov	r3, r1
 800cf72:	4602      	mov	r2, r0
 800cf74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cf78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cf7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf7e:	ea46 060a 	orr.w	r6, r6, sl
 800cf82:	431e      	orrs	r6, r3
 800cf84:	d06f      	beq.n	800d066 <_strtod_l+0xb86>
 800cf86:	a30e      	add	r3, pc, #56	@ (adr r3, 800cfc0 <_strtod_l+0xae0>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	f7f3 fdc6 	bl	8000b1c <__aeabi_dcmplt>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	f47f acd3 	bne.w	800c93c <_strtod_l+0x45c>
 800cf96:	a30c      	add	r3, pc, #48	@ (adr r3, 800cfc8 <_strtod_l+0xae8>)
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfa0:	f7f3 fdda 	bl	8000b58 <__aeabi_dcmpgt>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d093      	beq.n	800ced0 <_strtod_l+0x9f0>
 800cfa8:	e4c8      	b.n	800c93c <_strtod_l+0x45c>
 800cfaa:	bf00      	nop
 800cfac:	f3af 8000 	nop.w
 800cfb0:	00000000 	.word	0x00000000
 800cfb4:	bff00000 	.word	0xbff00000
 800cfb8:	00000000 	.word	0x00000000
 800cfbc:	3ff00000 	.word	0x3ff00000
 800cfc0:	94a03595 	.word	0x94a03595
 800cfc4:	3fdfffff 	.word	0x3fdfffff
 800cfc8:	35afe535 	.word	0x35afe535
 800cfcc:	3fe00000 	.word	0x3fe00000
 800cfd0:	000fffff 	.word	0x000fffff
 800cfd4:	7ff00000 	.word	0x7ff00000
 800cfd8:	7fefffff 	.word	0x7fefffff
 800cfdc:	3ff00000 	.word	0x3ff00000
 800cfe0:	3fe00000 	.word	0x3fe00000
 800cfe4:	7fe00000 	.word	0x7fe00000
 800cfe8:	7c9fffff 	.word	0x7c9fffff
 800cfec:	9b08      	ldr	r3, [sp, #32]
 800cfee:	b323      	cbz	r3, 800d03a <_strtod_l+0xb5a>
 800cff0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cff4:	d821      	bhi.n	800d03a <_strtod_l+0xb5a>
 800cff6:	a328      	add	r3, pc, #160	@ (adr r3, 800d098 <_strtod_l+0xbb8>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	4630      	mov	r0, r6
 800cffe:	4639      	mov	r1, r7
 800d000:	f7f3 fd96 	bl	8000b30 <__aeabi_dcmple>
 800d004:	b1a0      	cbz	r0, 800d030 <_strtod_l+0xb50>
 800d006:	4639      	mov	r1, r7
 800d008:	4630      	mov	r0, r6
 800d00a:	f7f3 fded 	bl	8000be8 <__aeabi_d2uiz>
 800d00e:	2801      	cmp	r0, #1
 800d010:	bf38      	it	cc
 800d012:	2001      	movcc	r0, #1
 800d014:	f7f3 fa96 	bl	8000544 <__aeabi_ui2d>
 800d018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d01a:	4606      	mov	r6, r0
 800d01c:	460f      	mov	r7, r1
 800d01e:	b9fb      	cbnz	r3, 800d060 <_strtod_l+0xb80>
 800d020:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d024:	9014      	str	r0, [sp, #80]	@ 0x50
 800d026:	9315      	str	r3, [sp, #84]	@ 0x54
 800d028:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d02c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d030:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d032:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d036:	1b5b      	subs	r3, r3, r5
 800d038:	9311      	str	r3, [sp, #68]	@ 0x44
 800d03a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d03e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d042:	f7ff f8f1 	bl	800c228 <__ulp>
 800d046:	4650      	mov	r0, sl
 800d048:	ec53 2b10 	vmov	r2, r3, d0
 800d04c:	4659      	mov	r1, fp
 800d04e:	f7f3 faf3 	bl	8000638 <__aeabi_dmul>
 800d052:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d056:	f7f3 f939 	bl	80002cc <__adddf3>
 800d05a:	4682      	mov	sl, r0
 800d05c:	468b      	mov	fp, r1
 800d05e:	e770      	b.n	800cf42 <_strtod_l+0xa62>
 800d060:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d064:	e7e0      	b.n	800d028 <_strtod_l+0xb48>
 800d066:	a30e      	add	r3, pc, #56	@ (adr r3, 800d0a0 <_strtod_l+0xbc0>)
 800d068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06c:	f7f3 fd56 	bl	8000b1c <__aeabi_dcmplt>
 800d070:	e798      	b.n	800cfa4 <_strtod_l+0xac4>
 800d072:	2300      	movs	r3, #0
 800d074:	930e      	str	r3, [sp, #56]	@ 0x38
 800d076:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d07a:	6013      	str	r3, [r2, #0]
 800d07c:	f7ff ba6d 	b.w	800c55a <_strtod_l+0x7a>
 800d080:	2a65      	cmp	r2, #101	@ 0x65
 800d082:	f43f ab68 	beq.w	800c756 <_strtod_l+0x276>
 800d086:	2a45      	cmp	r2, #69	@ 0x45
 800d088:	f43f ab65 	beq.w	800c756 <_strtod_l+0x276>
 800d08c:	2301      	movs	r3, #1
 800d08e:	f7ff bba0 	b.w	800c7d2 <_strtod_l+0x2f2>
 800d092:	bf00      	nop
 800d094:	f3af 8000 	nop.w
 800d098:	ffc00000 	.word	0xffc00000
 800d09c:	41dfffff 	.word	0x41dfffff
 800d0a0:	94a03595 	.word	0x94a03595
 800d0a4:	3fcfffff 	.word	0x3fcfffff

0800d0a8 <_strtod_r>:
 800d0a8:	4b01      	ldr	r3, [pc, #4]	@ (800d0b0 <_strtod_r+0x8>)
 800d0aa:	f7ff ba19 	b.w	800c4e0 <_strtod_l>
 800d0ae:	bf00      	nop
 800d0b0:	20000074 	.word	0x20000074

0800d0b4 <_strtol_l.isra.0>:
 800d0b4:	2b24      	cmp	r3, #36	@ 0x24
 800d0b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0ba:	4686      	mov	lr, r0
 800d0bc:	4690      	mov	r8, r2
 800d0be:	d801      	bhi.n	800d0c4 <_strtol_l.isra.0+0x10>
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d106      	bne.n	800d0d2 <_strtol_l.isra.0+0x1e>
 800d0c4:	f7fd fda8 	bl	800ac18 <__errno>
 800d0c8:	2316      	movs	r3, #22
 800d0ca:	6003      	str	r3, [r0, #0]
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d2:	4834      	ldr	r0, [pc, #208]	@ (800d1a4 <_strtol_l.isra.0+0xf0>)
 800d0d4:	460d      	mov	r5, r1
 800d0d6:	462a      	mov	r2, r5
 800d0d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0dc:	5d06      	ldrb	r6, [r0, r4]
 800d0de:	f016 0608 	ands.w	r6, r6, #8
 800d0e2:	d1f8      	bne.n	800d0d6 <_strtol_l.isra.0+0x22>
 800d0e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d0e6:	d110      	bne.n	800d10a <_strtol_l.isra.0+0x56>
 800d0e8:	782c      	ldrb	r4, [r5, #0]
 800d0ea:	2601      	movs	r6, #1
 800d0ec:	1c95      	adds	r5, r2, #2
 800d0ee:	f033 0210 	bics.w	r2, r3, #16
 800d0f2:	d115      	bne.n	800d120 <_strtol_l.isra.0+0x6c>
 800d0f4:	2c30      	cmp	r4, #48	@ 0x30
 800d0f6:	d10d      	bne.n	800d114 <_strtol_l.isra.0+0x60>
 800d0f8:	782a      	ldrb	r2, [r5, #0]
 800d0fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d0fe:	2a58      	cmp	r2, #88	@ 0x58
 800d100:	d108      	bne.n	800d114 <_strtol_l.isra.0+0x60>
 800d102:	786c      	ldrb	r4, [r5, #1]
 800d104:	3502      	adds	r5, #2
 800d106:	2310      	movs	r3, #16
 800d108:	e00a      	b.n	800d120 <_strtol_l.isra.0+0x6c>
 800d10a:	2c2b      	cmp	r4, #43	@ 0x2b
 800d10c:	bf04      	itt	eq
 800d10e:	782c      	ldrbeq	r4, [r5, #0]
 800d110:	1c95      	addeq	r5, r2, #2
 800d112:	e7ec      	b.n	800d0ee <_strtol_l.isra.0+0x3a>
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1f6      	bne.n	800d106 <_strtol_l.isra.0+0x52>
 800d118:	2c30      	cmp	r4, #48	@ 0x30
 800d11a:	bf14      	ite	ne
 800d11c:	230a      	movne	r3, #10
 800d11e:	2308      	moveq	r3, #8
 800d120:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d124:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d128:	2200      	movs	r2, #0
 800d12a:	fbbc f9f3 	udiv	r9, ip, r3
 800d12e:	4610      	mov	r0, r2
 800d130:	fb03 ca19 	mls	sl, r3, r9, ip
 800d134:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d138:	2f09      	cmp	r7, #9
 800d13a:	d80f      	bhi.n	800d15c <_strtol_l.isra.0+0xa8>
 800d13c:	463c      	mov	r4, r7
 800d13e:	42a3      	cmp	r3, r4
 800d140:	dd1b      	ble.n	800d17a <_strtol_l.isra.0+0xc6>
 800d142:	1c57      	adds	r7, r2, #1
 800d144:	d007      	beq.n	800d156 <_strtol_l.isra.0+0xa2>
 800d146:	4581      	cmp	r9, r0
 800d148:	d314      	bcc.n	800d174 <_strtol_l.isra.0+0xc0>
 800d14a:	d101      	bne.n	800d150 <_strtol_l.isra.0+0x9c>
 800d14c:	45a2      	cmp	sl, r4
 800d14e:	db11      	blt.n	800d174 <_strtol_l.isra.0+0xc0>
 800d150:	fb00 4003 	mla	r0, r0, r3, r4
 800d154:	2201      	movs	r2, #1
 800d156:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d15a:	e7eb      	b.n	800d134 <_strtol_l.isra.0+0x80>
 800d15c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d160:	2f19      	cmp	r7, #25
 800d162:	d801      	bhi.n	800d168 <_strtol_l.isra.0+0xb4>
 800d164:	3c37      	subs	r4, #55	@ 0x37
 800d166:	e7ea      	b.n	800d13e <_strtol_l.isra.0+0x8a>
 800d168:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d16c:	2f19      	cmp	r7, #25
 800d16e:	d804      	bhi.n	800d17a <_strtol_l.isra.0+0xc6>
 800d170:	3c57      	subs	r4, #87	@ 0x57
 800d172:	e7e4      	b.n	800d13e <_strtol_l.isra.0+0x8a>
 800d174:	f04f 32ff 	mov.w	r2, #4294967295
 800d178:	e7ed      	b.n	800d156 <_strtol_l.isra.0+0xa2>
 800d17a:	1c53      	adds	r3, r2, #1
 800d17c:	d108      	bne.n	800d190 <_strtol_l.isra.0+0xdc>
 800d17e:	2322      	movs	r3, #34	@ 0x22
 800d180:	f8ce 3000 	str.w	r3, [lr]
 800d184:	4660      	mov	r0, ip
 800d186:	f1b8 0f00 	cmp.w	r8, #0
 800d18a:	d0a0      	beq.n	800d0ce <_strtol_l.isra.0+0x1a>
 800d18c:	1e69      	subs	r1, r5, #1
 800d18e:	e006      	b.n	800d19e <_strtol_l.isra.0+0xea>
 800d190:	b106      	cbz	r6, 800d194 <_strtol_l.isra.0+0xe0>
 800d192:	4240      	negs	r0, r0
 800d194:	f1b8 0f00 	cmp.w	r8, #0
 800d198:	d099      	beq.n	800d0ce <_strtol_l.isra.0+0x1a>
 800d19a:	2a00      	cmp	r2, #0
 800d19c:	d1f6      	bne.n	800d18c <_strtol_l.isra.0+0xd8>
 800d19e:	f8c8 1000 	str.w	r1, [r8]
 800d1a2:	e794      	b.n	800d0ce <_strtol_l.isra.0+0x1a>
 800d1a4:	0800fde9 	.word	0x0800fde9

0800d1a8 <_strtol_r>:
 800d1a8:	f7ff bf84 	b.w	800d0b4 <_strtol_l.isra.0>

0800d1ac <__ssputs_r>:
 800d1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b0:	688e      	ldr	r6, [r1, #8]
 800d1b2:	461f      	mov	r7, r3
 800d1b4:	42be      	cmp	r6, r7
 800d1b6:	680b      	ldr	r3, [r1, #0]
 800d1b8:	4682      	mov	sl, r0
 800d1ba:	460c      	mov	r4, r1
 800d1bc:	4690      	mov	r8, r2
 800d1be:	d82d      	bhi.n	800d21c <__ssputs_r+0x70>
 800d1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1c8:	d026      	beq.n	800d218 <__ssputs_r+0x6c>
 800d1ca:	6965      	ldr	r5, [r4, #20]
 800d1cc:	6909      	ldr	r1, [r1, #16]
 800d1ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1d2:	eba3 0901 	sub.w	r9, r3, r1
 800d1d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1da:	1c7b      	adds	r3, r7, #1
 800d1dc:	444b      	add	r3, r9
 800d1de:	106d      	asrs	r5, r5, #1
 800d1e0:	429d      	cmp	r5, r3
 800d1e2:	bf38      	it	cc
 800d1e4:	461d      	movcc	r5, r3
 800d1e6:	0553      	lsls	r3, r2, #21
 800d1e8:	d527      	bpl.n	800d23a <__ssputs_r+0x8e>
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	f7fe fc24 	bl	800ba38 <_malloc_r>
 800d1f0:	4606      	mov	r6, r0
 800d1f2:	b360      	cbz	r0, 800d24e <__ssputs_r+0xa2>
 800d1f4:	6921      	ldr	r1, [r4, #16]
 800d1f6:	464a      	mov	r2, r9
 800d1f8:	f7fd fd3b 	bl	800ac72 <memcpy>
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d206:	81a3      	strh	r3, [r4, #12]
 800d208:	6126      	str	r6, [r4, #16]
 800d20a:	6165      	str	r5, [r4, #20]
 800d20c:	444e      	add	r6, r9
 800d20e:	eba5 0509 	sub.w	r5, r5, r9
 800d212:	6026      	str	r6, [r4, #0]
 800d214:	60a5      	str	r5, [r4, #8]
 800d216:	463e      	mov	r6, r7
 800d218:	42be      	cmp	r6, r7
 800d21a:	d900      	bls.n	800d21e <__ssputs_r+0x72>
 800d21c:	463e      	mov	r6, r7
 800d21e:	6820      	ldr	r0, [r4, #0]
 800d220:	4632      	mov	r2, r6
 800d222:	4641      	mov	r1, r8
 800d224:	f000 f9c6 	bl	800d5b4 <memmove>
 800d228:	68a3      	ldr	r3, [r4, #8]
 800d22a:	1b9b      	subs	r3, r3, r6
 800d22c:	60a3      	str	r3, [r4, #8]
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	4433      	add	r3, r6
 800d232:	6023      	str	r3, [r4, #0]
 800d234:	2000      	movs	r0, #0
 800d236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23a:	462a      	mov	r2, r5
 800d23c:	f000 fd7d 	bl	800dd3a <_realloc_r>
 800d240:	4606      	mov	r6, r0
 800d242:	2800      	cmp	r0, #0
 800d244:	d1e0      	bne.n	800d208 <__ssputs_r+0x5c>
 800d246:	6921      	ldr	r1, [r4, #16]
 800d248:	4650      	mov	r0, sl
 800d24a:	f7fe fb81 	bl	800b950 <_free_r>
 800d24e:	230c      	movs	r3, #12
 800d250:	f8ca 3000 	str.w	r3, [sl]
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d25a:	81a3      	strh	r3, [r4, #12]
 800d25c:	f04f 30ff 	mov.w	r0, #4294967295
 800d260:	e7e9      	b.n	800d236 <__ssputs_r+0x8a>
	...

0800d264 <_svfiprintf_r>:
 800d264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d268:	4698      	mov	r8, r3
 800d26a:	898b      	ldrh	r3, [r1, #12]
 800d26c:	061b      	lsls	r3, r3, #24
 800d26e:	b09d      	sub	sp, #116	@ 0x74
 800d270:	4607      	mov	r7, r0
 800d272:	460d      	mov	r5, r1
 800d274:	4614      	mov	r4, r2
 800d276:	d510      	bpl.n	800d29a <_svfiprintf_r+0x36>
 800d278:	690b      	ldr	r3, [r1, #16]
 800d27a:	b973      	cbnz	r3, 800d29a <_svfiprintf_r+0x36>
 800d27c:	2140      	movs	r1, #64	@ 0x40
 800d27e:	f7fe fbdb 	bl	800ba38 <_malloc_r>
 800d282:	6028      	str	r0, [r5, #0]
 800d284:	6128      	str	r0, [r5, #16]
 800d286:	b930      	cbnz	r0, 800d296 <_svfiprintf_r+0x32>
 800d288:	230c      	movs	r3, #12
 800d28a:	603b      	str	r3, [r7, #0]
 800d28c:	f04f 30ff 	mov.w	r0, #4294967295
 800d290:	b01d      	add	sp, #116	@ 0x74
 800d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d296:	2340      	movs	r3, #64	@ 0x40
 800d298:	616b      	str	r3, [r5, #20]
 800d29a:	2300      	movs	r3, #0
 800d29c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d29e:	2320      	movs	r3, #32
 800d2a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2a8:	2330      	movs	r3, #48	@ 0x30
 800d2aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d448 <_svfiprintf_r+0x1e4>
 800d2ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2b2:	f04f 0901 	mov.w	r9, #1
 800d2b6:	4623      	mov	r3, r4
 800d2b8:	469a      	mov	sl, r3
 800d2ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2be:	b10a      	cbz	r2, 800d2c4 <_svfiprintf_r+0x60>
 800d2c0:	2a25      	cmp	r2, #37	@ 0x25
 800d2c2:	d1f9      	bne.n	800d2b8 <_svfiprintf_r+0x54>
 800d2c4:	ebba 0b04 	subs.w	fp, sl, r4
 800d2c8:	d00b      	beq.n	800d2e2 <_svfiprintf_r+0x7e>
 800d2ca:	465b      	mov	r3, fp
 800d2cc:	4622      	mov	r2, r4
 800d2ce:	4629      	mov	r1, r5
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	f7ff ff6b 	bl	800d1ac <__ssputs_r>
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	f000 80a7 	beq.w	800d42a <_svfiprintf_r+0x1c6>
 800d2dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2de:	445a      	add	r2, fp
 800d2e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 809f 	beq.w	800d42a <_svfiprintf_r+0x1c6>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2f6:	f10a 0a01 	add.w	sl, sl, #1
 800d2fa:	9304      	str	r3, [sp, #16]
 800d2fc:	9307      	str	r3, [sp, #28]
 800d2fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d302:	931a      	str	r3, [sp, #104]	@ 0x68
 800d304:	4654      	mov	r4, sl
 800d306:	2205      	movs	r2, #5
 800d308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30c:	484e      	ldr	r0, [pc, #312]	@ (800d448 <_svfiprintf_r+0x1e4>)
 800d30e:	f7f2 ff7f 	bl	8000210 <memchr>
 800d312:	9a04      	ldr	r2, [sp, #16]
 800d314:	b9d8      	cbnz	r0, 800d34e <_svfiprintf_r+0xea>
 800d316:	06d0      	lsls	r0, r2, #27
 800d318:	bf44      	itt	mi
 800d31a:	2320      	movmi	r3, #32
 800d31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d320:	0711      	lsls	r1, r2, #28
 800d322:	bf44      	itt	mi
 800d324:	232b      	movmi	r3, #43	@ 0x2b
 800d326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d32a:	f89a 3000 	ldrb.w	r3, [sl]
 800d32e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d330:	d015      	beq.n	800d35e <_svfiprintf_r+0xfa>
 800d332:	9a07      	ldr	r2, [sp, #28]
 800d334:	4654      	mov	r4, sl
 800d336:	2000      	movs	r0, #0
 800d338:	f04f 0c0a 	mov.w	ip, #10
 800d33c:	4621      	mov	r1, r4
 800d33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d342:	3b30      	subs	r3, #48	@ 0x30
 800d344:	2b09      	cmp	r3, #9
 800d346:	d94b      	bls.n	800d3e0 <_svfiprintf_r+0x17c>
 800d348:	b1b0      	cbz	r0, 800d378 <_svfiprintf_r+0x114>
 800d34a:	9207      	str	r2, [sp, #28]
 800d34c:	e014      	b.n	800d378 <_svfiprintf_r+0x114>
 800d34e:	eba0 0308 	sub.w	r3, r0, r8
 800d352:	fa09 f303 	lsl.w	r3, r9, r3
 800d356:	4313      	orrs	r3, r2
 800d358:	9304      	str	r3, [sp, #16]
 800d35a:	46a2      	mov	sl, r4
 800d35c:	e7d2      	b.n	800d304 <_svfiprintf_r+0xa0>
 800d35e:	9b03      	ldr	r3, [sp, #12]
 800d360:	1d19      	adds	r1, r3, #4
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	9103      	str	r1, [sp, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	bfbb      	ittet	lt
 800d36a:	425b      	neglt	r3, r3
 800d36c:	f042 0202 	orrlt.w	r2, r2, #2
 800d370:	9307      	strge	r3, [sp, #28]
 800d372:	9307      	strlt	r3, [sp, #28]
 800d374:	bfb8      	it	lt
 800d376:	9204      	strlt	r2, [sp, #16]
 800d378:	7823      	ldrb	r3, [r4, #0]
 800d37a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d37c:	d10a      	bne.n	800d394 <_svfiprintf_r+0x130>
 800d37e:	7863      	ldrb	r3, [r4, #1]
 800d380:	2b2a      	cmp	r3, #42	@ 0x2a
 800d382:	d132      	bne.n	800d3ea <_svfiprintf_r+0x186>
 800d384:	9b03      	ldr	r3, [sp, #12]
 800d386:	1d1a      	adds	r2, r3, #4
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	9203      	str	r2, [sp, #12]
 800d38c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d390:	3402      	adds	r4, #2
 800d392:	9305      	str	r3, [sp, #20]
 800d394:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d458 <_svfiprintf_r+0x1f4>
 800d398:	7821      	ldrb	r1, [r4, #0]
 800d39a:	2203      	movs	r2, #3
 800d39c:	4650      	mov	r0, sl
 800d39e:	f7f2 ff37 	bl	8000210 <memchr>
 800d3a2:	b138      	cbz	r0, 800d3b4 <_svfiprintf_r+0x150>
 800d3a4:	9b04      	ldr	r3, [sp, #16]
 800d3a6:	eba0 000a 	sub.w	r0, r0, sl
 800d3aa:	2240      	movs	r2, #64	@ 0x40
 800d3ac:	4082      	lsls	r2, r0
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	3401      	adds	r4, #1
 800d3b2:	9304      	str	r3, [sp, #16]
 800d3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b8:	4824      	ldr	r0, [pc, #144]	@ (800d44c <_svfiprintf_r+0x1e8>)
 800d3ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3be:	2206      	movs	r2, #6
 800d3c0:	f7f2 ff26 	bl	8000210 <memchr>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d036      	beq.n	800d436 <_svfiprintf_r+0x1d2>
 800d3c8:	4b21      	ldr	r3, [pc, #132]	@ (800d450 <_svfiprintf_r+0x1ec>)
 800d3ca:	bb1b      	cbnz	r3, 800d414 <_svfiprintf_r+0x1b0>
 800d3cc:	9b03      	ldr	r3, [sp, #12]
 800d3ce:	3307      	adds	r3, #7
 800d3d0:	f023 0307 	bic.w	r3, r3, #7
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	9303      	str	r3, [sp, #12]
 800d3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3da:	4433      	add	r3, r6
 800d3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3de:	e76a      	b.n	800d2b6 <_svfiprintf_r+0x52>
 800d3e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	e7a8      	b.n	800d33c <_svfiprintf_r+0xd8>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	3401      	adds	r4, #1
 800d3ee:	9305      	str	r3, [sp, #20]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	f04f 0c0a 	mov.w	ip, #10
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3fc:	3a30      	subs	r2, #48	@ 0x30
 800d3fe:	2a09      	cmp	r2, #9
 800d400:	d903      	bls.n	800d40a <_svfiprintf_r+0x1a6>
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0c6      	beq.n	800d394 <_svfiprintf_r+0x130>
 800d406:	9105      	str	r1, [sp, #20]
 800d408:	e7c4      	b.n	800d394 <_svfiprintf_r+0x130>
 800d40a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d40e:	4604      	mov	r4, r0
 800d410:	2301      	movs	r3, #1
 800d412:	e7f0      	b.n	800d3f6 <_svfiprintf_r+0x192>
 800d414:	ab03      	add	r3, sp, #12
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	462a      	mov	r2, r5
 800d41a:	4b0e      	ldr	r3, [pc, #56]	@ (800d454 <_svfiprintf_r+0x1f0>)
 800d41c:	a904      	add	r1, sp, #16
 800d41e:	4638      	mov	r0, r7
 800d420:	f7fc fc4a 	bl	8009cb8 <_printf_float>
 800d424:	1c42      	adds	r2, r0, #1
 800d426:	4606      	mov	r6, r0
 800d428:	d1d6      	bne.n	800d3d8 <_svfiprintf_r+0x174>
 800d42a:	89ab      	ldrh	r3, [r5, #12]
 800d42c:	065b      	lsls	r3, r3, #25
 800d42e:	f53f af2d 	bmi.w	800d28c <_svfiprintf_r+0x28>
 800d432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d434:	e72c      	b.n	800d290 <_svfiprintf_r+0x2c>
 800d436:	ab03      	add	r3, sp, #12
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	462a      	mov	r2, r5
 800d43c:	4b05      	ldr	r3, [pc, #20]	@ (800d454 <_svfiprintf_r+0x1f0>)
 800d43e:	a904      	add	r1, sp, #16
 800d440:	4638      	mov	r0, r7
 800d442:	f7fc fed1 	bl	800a1e8 <_printf_i>
 800d446:	e7ed      	b.n	800d424 <_svfiprintf_r+0x1c0>
 800d448:	0800fbe5 	.word	0x0800fbe5
 800d44c:	0800fbef 	.word	0x0800fbef
 800d450:	08009cb9 	.word	0x08009cb9
 800d454:	0800d1ad 	.word	0x0800d1ad
 800d458:	0800fbeb 	.word	0x0800fbeb

0800d45c <__sflush_r>:
 800d45c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d464:	0716      	lsls	r6, r2, #28
 800d466:	4605      	mov	r5, r0
 800d468:	460c      	mov	r4, r1
 800d46a:	d454      	bmi.n	800d516 <__sflush_r+0xba>
 800d46c:	684b      	ldr	r3, [r1, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	dc02      	bgt.n	800d478 <__sflush_r+0x1c>
 800d472:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d474:	2b00      	cmp	r3, #0
 800d476:	dd48      	ble.n	800d50a <__sflush_r+0xae>
 800d478:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d47a:	2e00      	cmp	r6, #0
 800d47c:	d045      	beq.n	800d50a <__sflush_r+0xae>
 800d47e:	2300      	movs	r3, #0
 800d480:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d484:	682f      	ldr	r7, [r5, #0]
 800d486:	6a21      	ldr	r1, [r4, #32]
 800d488:	602b      	str	r3, [r5, #0]
 800d48a:	d030      	beq.n	800d4ee <__sflush_r+0x92>
 800d48c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d48e:	89a3      	ldrh	r3, [r4, #12]
 800d490:	0759      	lsls	r1, r3, #29
 800d492:	d505      	bpl.n	800d4a0 <__sflush_r+0x44>
 800d494:	6863      	ldr	r3, [r4, #4]
 800d496:	1ad2      	subs	r2, r2, r3
 800d498:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d49a:	b10b      	cbz	r3, 800d4a0 <__sflush_r+0x44>
 800d49c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d49e:	1ad2      	subs	r2, r2, r3
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4a4:	6a21      	ldr	r1, [r4, #32]
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	47b0      	blx	r6
 800d4aa:	1c43      	adds	r3, r0, #1
 800d4ac:	89a3      	ldrh	r3, [r4, #12]
 800d4ae:	d106      	bne.n	800d4be <__sflush_r+0x62>
 800d4b0:	6829      	ldr	r1, [r5, #0]
 800d4b2:	291d      	cmp	r1, #29
 800d4b4:	d82b      	bhi.n	800d50e <__sflush_r+0xb2>
 800d4b6:	4a2a      	ldr	r2, [pc, #168]	@ (800d560 <__sflush_r+0x104>)
 800d4b8:	40ca      	lsrs	r2, r1
 800d4ba:	07d6      	lsls	r6, r2, #31
 800d4bc:	d527      	bpl.n	800d50e <__sflush_r+0xb2>
 800d4be:	2200      	movs	r2, #0
 800d4c0:	6062      	str	r2, [r4, #4]
 800d4c2:	04d9      	lsls	r1, r3, #19
 800d4c4:	6922      	ldr	r2, [r4, #16]
 800d4c6:	6022      	str	r2, [r4, #0]
 800d4c8:	d504      	bpl.n	800d4d4 <__sflush_r+0x78>
 800d4ca:	1c42      	adds	r2, r0, #1
 800d4cc:	d101      	bne.n	800d4d2 <__sflush_r+0x76>
 800d4ce:	682b      	ldr	r3, [r5, #0]
 800d4d0:	b903      	cbnz	r3, 800d4d4 <__sflush_r+0x78>
 800d4d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d4d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4d6:	602f      	str	r7, [r5, #0]
 800d4d8:	b1b9      	cbz	r1, 800d50a <__sflush_r+0xae>
 800d4da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4de:	4299      	cmp	r1, r3
 800d4e0:	d002      	beq.n	800d4e8 <__sflush_r+0x8c>
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f7fe fa34 	bl	800b950 <_free_r>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4ec:	e00d      	b.n	800d50a <__sflush_r+0xae>
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	47b0      	blx	r6
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	1c50      	adds	r0, r2, #1
 800d4f8:	d1c9      	bne.n	800d48e <__sflush_r+0x32>
 800d4fa:	682b      	ldr	r3, [r5, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d0c6      	beq.n	800d48e <__sflush_r+0x32>
 800d500:	2b1d      	cmp	r3, #29
 800d502:	d001      	beq.n	800d508 <__sflush_r+0xac>
 800d504:	2b16      	cmp	r3, #22
 800d506:	d11e      	bne.n	800d546 <__sflush_r+0xea>
 800d508:	602f      	str	r7, [r5, #0]
 800d50a:	2000      	movs	r0, #0
 800d50c:	e022      	b.n	800d554 <__sflush_r+0xf8>
 800d50e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d512:	b21b      	sxth	r3, r3
 800d514:	e01b      	b.n	800d54e <__sflush_r+0xf2>
 800d516:	690f      	ldr	r7, [r1, #16]
 800d518:	2f00      	cmp	r7, #0
 800d51a:	d0f6      	beq.n	800d50a <__sflush_r+0xae>
 800d51c:	0793      	lsls	r3, r2, #30
 800d51e:	680e      	ldr	r6, [r1, #0]
 800d520:	bf08      	it	eq
 800d522:	694b      	ldreq	r3, [r1, #20]
 800d524:	600f      	str	r7, [r1, #0]
 800d526:	bf18      	it	ne
 800d528:	2300      	movne	r3, #0
 800d52a:	eba6 0807 	sub.w	r8, r6, r7
 800d52e:	608b      	str	r3, [r1, #8]
 800d530:	f1b8 0f00 	cmp.w	r8, #0
 800d534:	dde9      	ble.n	800d50a <__sflush_r+0xae>
 800d536:	6a21      	ldr	r1, [r4, #32]
 800d538:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d53a:	4643      	mov	r3, r8
 800d53c:	463a      	mov	r2, r7
 800d53e:	4628      	mov	r0, r5
 800d540:	47b0      	blx	r6
 800d542:	2800      	cmp	r0, #0
 800d544:	dc08      	bgt.n	800d558 <__sflush_r+0xfc>
 800d546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d54a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d54e:	81a3      	strh	r3, [r4, #12]
 800d550:	f04f 30ff 	mov.w	r0, #4294967295
 800d554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d558:	4407      	add	r7, r0
 800d55a:	eba8 0800 	sub.w	r8, r8, r0
 800d55e:	e7e7      	b.n	800d530 <__sflush_r+0xd4>
 800d560:	20400001 	.word	0x20400001

0800d564 <_fflush_r>:
 800d564:	b538      	push	{r3, r4, r5, lr}
 800d566:	690b      	ldr	r3, [r1, #16]
 800d568:	4605      	mov	r5, r0
 800d56a:	460c      	mov	r4, r1
 800d56c:	b913      	cbnz	r3, 800d574 <_fflush_r+0x10>
 800d56e:	2500      	movs	r5, #0
 800d570:	4628      	mov	r0, r5
 800d572:	bd38      	pop	{r3, r4, r5, pc}
 800d574:	b118      	cbz	r0, 800d57e <_fflush_r+0x1a>
 800d576:	6a03      	ldr	r3, [r0, #32]
 800d578:	b90b      	cbnz	r3, 800d57e <_fflush_r+0x1a>
 800d57a:	f7fd f9ed 	bl	800a958 <__sinit>
 800d57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d0f3      	beq.n	800d56e <_fflush_r+0xa>
 800d586:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d588:	07d0      	lsls	r0, r2, #31
 800d58a:	d404      	bmi.n	800d596 <_fflush_r+0x32>
 800d58c:	0599      	lsls	r1, r3, #22
 800d58e:	d402      	bmi.n	800d596 <_fflush_r+0x32>
 800d590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d592:	f7fd fb6c 	bl	800ac6e <__retarget_lock_acquire_recursive>
 800d596:	4628      	mov	r0, r5
 800d598:	4621      	mov	r1, r4
 800d59a:	f7ff ff5f 	bl	800d45c <__sflush_r>
 800d59e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5a0:	07da      	lsls	r2, r3, #31
 800d5a2:	4605      	mov	r5, r0
 800d5a4:	d4e4      	bmi.n	800d570 <_fflush_r+0xc>
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	059b      	lsls	r3, r3, #22
 800d5aa:	d4e1      	bmi.n	800d570 <_fflush_r+0xc>
 800d5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5ae:	f7fd fb5f 	bl	800ac70 <__retarget_lock_release_recursive>
 800d5b2:	e7dd      	b.n	800d570 <_fflush_r+0xc>

0800d5b4 <memmove>:
 800d5b4:	4288      	cmp	r0, r1
 800d5b6:	b510      	push	{r4, lr}
 800d5b8:	eb01 0402 	add.w	r4, r1, r2
 800d5bc:	d902      	bls.n	800d5c4 <memmove+0x10>
 800d5be:	4284      	cmp	r4, r0
 800d5c0:	4623      	mov	r3, r4
 800d5c2:	d807      	bhi.n	800d5d4 <memmove+0x20>
 800d5c4:	1e43      	subs	r3, r0, #1
 800d5c6:	42a1      	cmp	r1, r4
 800d5c8:	d008      	beq.n	800d5dc <memmove+0x28>
 800d5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5d2:	e7f8      	b.n	800d5c6 <memmove+0x12>
 800d5d4:	4402      	add	r2, r0
 800d5d6:	4601      	mov	r1, r0
 800d5d8:	428a      	cmp	r2, r1
 800d5da:	d100      	bne.n	800d5de <memmove+0x2a>
 800d5dc:	bd10      	pop	{r4, pc}
 800d5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5e6:	e7f7      	b.n	800d5d8 <memmove+0x24>

0800d5e8 <strncmp>:
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	b16a      	cbz	r2, 800d608 <strncmp+0x20>
 800d5ec:	3901      	subs	r1, #1
 800d5ee:	1884      	adds	r4, r0, r2
 800d5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d103      	bne.n	800d604 <strncmp+0x1c>
 800d5fc:	42a0      	cmp	r0, r4
 800d5fe:	d001      	beq.n	800d604 <strncmp+0x1c>
 800d600:	2a00      	cmp	r2, #0
 800d602:	d1f5      	bne.n	800d5f0 <strncmp+0x8>
 800d604:	1ad0      	subs	r0, r2, r3
 800d606:	bd10      	pop	{r4, pc}
 800d608:	4610      	mov	r0, r2
 800d60a:	e7fc      	b.n	800d606 <strncmp+0x1e>

0800d60c <_sbrk_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4d06      	ldr	r5, [pc, #24]	@ (800d628 <_sbrk_r+0x1c>)
 800d610:	2300      	movs	r3, #0
 800d612:	4604      	mov	r4, r0
 800d614:	4608      	mov	r0, r1
 800d616:	602b      	str	r3, [r5, #0]
 800d618:	f7f8 f966 	bl	80058e8 <_sbrk>
 800d61c:	1c43      	adds	r3, r0, #1
 800d61e:	d102      	bne.n	800d626 <_sbrk_r+0x1a>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	b103      	cbz	r3, 800d626 <_sbrk_r+0x1a>
 800d624:	6023      	str	r3, [r4, #0]
 800d626:	bd38      	pop	{r3, r4, r5, pc}
 800d628:	20000ec8 	.word	0x20000ec8
 800d62c:	00000000 	.word	0x00000000

0800d630 <nan>:
 800d630:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d638 <nan+0x8>
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	00000000 	.word	0x00000000
 800d63c:	7ff80000 	.word	0x7ff80000

0800d640 <__assert_func>:
 800d640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d642:	4614      	mov	r4, r2
 800d644:	461a      	mov	r2, r3
 800d646:	4b09      	ldr	r3, [pc, #36]	@ (800d66c <__assert_func+0x2c>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4605      	mov	r5, r0
 800d64c:	68d8      	ldr	r0, [r3, #12]
 800d64e:	b14c      	cbz	r4, 800d664 <__assert_func+0x24>
 800d650:	4b07      	ldr	r3, [pc, #28]	@ (800d670 <__assert_func+0x30>)
 800d652:	9100      	str	r1, [sp, #0]
 800d654:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d658:	4906      	ldr	r1, [pc, #24]	@ (800d674 <__assert_func+0x34>)
 800d65a:	462b      	mov	r3, r5
 800d65c:	f000 fba8 	bl	800ddb0 <fiprintf>
 800d660:	f000 fbb8 	bl	800ddd4 <abort>
 800d664:	4b04      	ldr	r3, [pc, #16]	@ (800d678 <__assert_func+0x38>)
 800d666:	461c      	mov	r4, r3
 800d668:	e7f3      	b.n	800d652 <__assert_func+0x12>
 800d66a:	bf00      	nop
 800d66c:	20000024 	.word	0x20000024
 800d670:	0800fbfe 	.word	0x0800fbfe
 800d674:	0800fc0b 	.word	0x0800fc0b
 800d678:	0800fc39 	.word	0x0800fc39

0800d67c <_calloc_r>:
 800d67c:	b570      	push	{r4, r5, r6, lr}
 800d67e:	fba1 5402 	umull	r5, r4, r1, r2
 800d682:	b934      	cbnz	r4, 800d692 <_calloc_r+0x16>
 800d684:	4629      	mov	r1, r5
 800d686:	f7fe f9d7 	bl	800ba38 <_malloc_r>
 800d68a:	4606      	mov	r6, r0
 800d68c:	b928      	cbnz	r0, 800d69a <_calloc_r+0x1e>
 800d68e:	4630      	mov	r0, r6
 800d690:	bd70      	pop	{r4, r5, r6, pc}
 800d692:	220c      	movs	r2, #12
 800d694:	6002      	str	r2, [r0, #0]
 800d696:	2600      	movs	r6, #0
 800d698:	e7f9      	b.n	800d68e <_calloc_r+0x12>
 800d69a:	462a      	mov	r2, r5
 800d69c:	4621      	mov	r1, r4
 800d69e:	f7fd fa69 	bl	800ab74 <memset>
 800d6a2:	e7f4      	b.n	800d68e <_calloc_r+0x12>

0800d6a4 <rshift>:
 800d6a4:	6903      	ldr	r3, [r0, #16]
 800d6a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d6aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d6b2:	f100 0414 	add.w	r4, r0, #20
 800d6b6:	dd45      	ble.n	800d744 <rshift+0xa0>
 800d6b8:	f011 011f 	ands.w	r1, r1, #31
 800d6bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d6c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d6c4:	d10c      	bne.n	800d6e0 <rshift+0x3c>
 800d6c6:	f100 0710 	add.w	r7, r0, #16
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	42b1      	cmp	r1, r6
 800d6ce:	d334      	bcc.n	800d73a <rshift+0x96>
 800d6d0:	1a9b      	subs	r3, r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	1eea      	subs	r2, r5, #3
 800d6d6:	4296      	cmp	r6, r2
 800d6d8:	bf38      	it	cc
 800d6da:	2300      	movcc	r3, #0
 800d6dc:	4423      	add	r3, r4
 800d6de:	e015      	b.n	800d70c <rshift+0x68>
 800d6e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6e4:	f1c1 0820 	rsb	r8, r1, #32
 800d6e8:	40cf      	lsrs	r7, r1
 800d6ea:	f105 0e04 	add.w	lr, r5, #4
 800d6ee:	46a1      	mov	r9, r4
 800d6f0:	4576      	cmp	r6, lr
 800d6f2:	46f4      	mov	ip, lr
 800d6f4:	d815      	bhi.n	800d722 <rshift+0x7e>
 800d6f6:	1a9a      	subs	r2, r3, r2
 800d6f8:	0092      	lsls	r2, r2, #2
 800d6fa:	3a04      	subs	r2, #4
 800d6fc:	3501      	adds	r5, #1
 800d6fe:	42ae      	cmp	r6, r5
 800d700:	bf38      	it	cc
 800d702:	2200      	movcc	r2, #0
 800d704:	18a3      	adds	r3, r4, r2
 800d706:	50a7      	str	r7, [r4, r2]
 800d708:	b107      	cbz	r7, 800d70c <rshift+0x68>
 800d70a:	3304      	adds	r3, #4
 800d70c:	1b1a      	subs	r2, r3, r4
 800d70e:	42a3      	cmp	r3, r4
 800d710:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d714:	bf08      	it	eq
 800d716:	2300      	moveq	r3, #0
 800d718:	6102      	str	r2, [r0, #16]
 800d71a:	bf08      	it	eq
 800d71c:	6143      	streq	r3, [r0, #20]
 800d71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d722:	f8dc c000 	ldr.w	ip, [ip]
 800d726:	fa0c fc08 	lsl.w	ip, ip, r8
 800d72a:	ea4c 0707 	orr.w	r7, ip, r7
 800d72e:	f849 7b04 	str.w	r7, [r9], #4
 800d732:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d736:	40cf      	lsrs	r7, r1
 800d738:	e7da      	b.n	800d6f0 <rshift+0x4c>
 800d73a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d73e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d742:	e7c3      	b.n	800d6cc <rshift+0x28>
 800d744:	4623      	mov	r3, r4
 800d746:	e7e1      	b.n	800d70c <rshift+0x68>

0800d748 <__hexdig_fun>:
 800d748:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d74c:	2b09      	cmp	r3, #9
 800d74e:	d802      	bhi.n	800d756 <__hexdig_fun+0xe>
 800d750:	3820      	subs	r0, #32
 800d752:	b2c0      	uxtb	r0, r0
 800d754:	4770      	bx	lr
 800d756:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d75a:	2b05      	cmp	r3, #5
 800d75c:	d801      	bhi.n	800d762 <__hexdig_fun+0x1a>
 800d75e:	3847      	subs	r0, #71	@ 0x47
 800d760:	e7f7      	b.n	800d752 <__hexdig_fun+0xa>
 800d762:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d766:	2b05      	cmp	r3, #5
 800d768:	d801      	bhi.n	800d76e <__hexdig_fun+0x26>
 800d76a:	3827      	subs	r0, #39	@ 0x27
 800d76c:	e7f1      	b.n	800d752 <__hexdig_fun+0xa>
 800d76e:	2000      	movs	r0, #0
 800d770:	4770      	bx	lr
	...

0800d774 <__gethex>:
 800d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	b085      	sub	sp, #20
 800d77a:	468a      	mov	sl, r1
 800d77c:	9302      	str	r3, [sp, #8]
 800d77e:	680b      	ldr	r3, [r1, #0]
 800d780:	9001      	str	r0, [sp, #4]
 800d782:	4690      	mov	r8, r2
 800d784:	1c9c      	adds	r4, r3, #2
 800d786:	46a1      	mov	r9, r4
 800d788:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d78c:	2830      	cmp	r0, #48	@ 0x30
 800d78e:	d0fa      	beq.n	800d786 <__gethex+0x12>
 800d790:	eba9 0303 	sub.w	r3, r9, r3
 800d794:	f1a3 0b02 	sub.w	fp, r3, #2
 800d798:	f7ff ffd6 	bl	800d748 <__hexdig_fun>
 800d79c:	4605      	mov	r5, r0
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d168      	bne.n	800d874 <__gethex+0x100>
 800d7a2:	49a0      	ldr	r1, [pc, #640]	@ (800da24 <__gethex+0x2b0>)
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	4648      	mov	r0, r9
 800d7a8:	f7ff ff1e 	bl	800d5e8 <strncmp>
 800d7ac:	4607      	mov	r7, r0
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d167      	bne.n	800d882 <__gethex+0x10e>
 800d7b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d7b6:	4626      	mov	r6, r4
 800d7b8:	f7ff ffc6 	bl	800d748 <__hexdig_fun>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d062      	beq.n	800d886 <__gethex+0x112>
 800d7c0:	4623      	mov	r3, r4
 800d7c2:	7818      	ldrb	r0, [r3, #0]
 800d7c4:	2830      	cmp	r0, #48	@ 0x30
 800d7c6:	4699      	mov	r9, r3
 800d7c8:	f103 0301 	add.w	r3, r3, #1
 800d7cc:	d0f9      	beq.n	800d7c2 <__gethex+0x4e>
 800d7ce:	f7ff ffbb 	bl	800d748 <__hexdig_fun>
 800d7d2:	fab0 f580 	clz	r5, r0
 800d7d6:	096d      	lsrs	r5, r5, #5
 800d7d8:	f04f 0b01 	mov.w	fp, #1
 800d7dc:	464a      	mov	r2, r9
 800d7de:	4616      	mov	r6, r2
 800d7e0:	3201      	adds	r2, #1
 800d7e2:	7830      	ldrb	r0, [r6, #0]
 800d7e4:	f7ff ffb0 	bl	800d748 <__hexdig_fun>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d1f8      	bne.n	800d7de <__gethex+0x6a>
 800d7ec:	498d      	ldr	r1, [pc, #564]	@ (800da24 <__gethex+0x2b0>)
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f7ff fef9 	bl	800d5e8 <strncmp>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d13f      	bne.n	800d87a <__gethex+0x106>
 800d7fa:	b944      	cbnz	r4, 800d80e <__gethex+0x9a>
 800d7fc:	1c74      	adds	r4, r6, #1
 800d7fe:	4622      	mov	r2, r4
 800d800:	4616      	mov	r6, r2
 800d802:	3201      	adds	r2, #1
 800d804:	7830      	ldrb	r0, [r6, #0]
 800d806:	f7ff ff9f 	bl	800d748 <__hexdig_fun>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d1f8      	bne.n	800d800 <__gethex+0x8c>
 800d80e:	1ba4      	subs	r4, r4, r6
 800d810:	00a7      	lsls	r7, r4, #2
 800d812:	7833      	ldrb	r3, [r6, #0]
 800d814:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d818:	2b50      	cmp	r3, #80	@ 0x50
 800d81a:	d13e      	bne.n	800d89a <__gethex+0x126>
 800d81c:	7873      	ldrb	r3, [r6, #1]
 800d81e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d820:	d033      	beq.n	800d88a <__gethex+0x116>
 800d822:	2b2d      	cmp	r3, #45	@ 0x2d
 800d824:	d034      	beq.n	800d890 <__gethex+0x11c>
 800d826:	1c71      	adds	r1, r6, #1
 800d828:	2400      	movs	r4, #0
 800d82a:	7808      	ldrb	r0, [r1, #0]
 800d82c:	f7ff ff8c 	bl	800d748 <__hexdig_fun>
 800d830:	1e43      	subs	r3, r0, #1
 800d832:	b2db      	uxtb	r3, r3
 800d834:	2b18      	cmp	r3, #24
 800d836:	d830      	bhi.n	800d89a <__gethex+0x126>
 800d838:	f1a0 0210 	sub.w	r2, r0, #16
 800d83c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d840:	f7ff ff82 	bl	800d748 <__hexdig_fun>
 800d844:	f100 3cff 	add.w	ip, r0, #4294967295
 800d848:	fa5f fc8c 	uxtb.w	ip, ip
 800d84c:	f1bc 0f18 	cmp.w	ip, #24
 800d850:	f04f 030a 	mov.w	r3, #10
 800d854:	d91e      	bls.n	800d894 <__gethex+0x120>
 800d856:	b104      	cbz	r4, 800d85a <__gethex+0xe6>
 800d858:	4252      	negs	r2, r2
 800d85a:	4417      	add	r7, r2
 800d85c:	f8ca 1000 	str.w	r1, [sl]
 800d860:	b1ed      	cbz	r5, 800d89e <__gethex+0x12a>
 800d862:	f1bb 0f00 	cmp.w	fp, #0
 800d866:	bf0c      	ite	eq
 800d868:	2506      	moveq	r5, #6
 800d86a:	2500      	movne	r5, #0
 800d86c:	4628      	mov	r0, r5
 800d86e:	b005      	add	sp, #20
 800d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d874:	2500      	movs	r5, #0
 800d876:	462c      	mov	r4, r5
 800d878:	e7b0      	b.n	800d7dc <__gethex+0x68>
 800d87a:	2c00      	cmp	r4, #0
 800d87c:	d1c7      	bne.n	800d80e <__gethex+0x9a>
 800d87e:	4627      	mov	r7, r4
 800d880:	e7c7      	b.n	800d812 <__gethex+0x9e>
 800d882:	464e      	mov	r6, r9
 800d884:	462f      	mov	r7, r5
 800d886:	2501      	movs	r5, #1
 800d888:	e7c3      	b.n	800d812 <__gethex+0x9e>
 800d88a:	2400      	movs	r4, #0
 800d88c:	1cb1      	adds	r1, r6, #2
 800d88e:	e7cc      	b.n	800d82a <__gethex+0xb6>
 800d890:	2401      	movs	r4, #1
 800d892:	e7fb      	b.n	800d88c <__gethex+0x118>
 800d894:	fb03 0002 	mla	r0, r3, r2, r0
 800d898:	e7ce      	b.n	800d838 <__gethex+0xc4>
 800d89a:	4631      	mov	r1, r6
 800d89c:	e7de      	b.n	800d85c <__gethex+0xe8>
 800d89e:	eba6 0309 	sub.w	r3, r6, r9
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	2b07      	cmp	r3, #7
 800d8a8:	dc0a      	bgt.n	800d8c0 <__gethex+0x14c>
 800d8aa:	9801      	ldr	r0, [sp, #4]
 800d8ac:	f7fe f950 	bl	800bb50 <_Balloc>
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	b940      	cbnz	r0, 800d8c6 <__gethex+0x152>
 800d8b4:	4b5c      	ldr	r3, [pc, #368]	@ (800da28 <__gethex+0x2b4>)
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	21e4      	movs	r1, #228	@ 0xe4
 800d8ba:	485c      	ldr	r0, [pc, #368]	@ (800da2c <__gethex+0x2b8>)
 800d8bc:	f7ff fec0 	bl	800d640 <__assert_func>
 800d8c0:	3101      	adds	r1, #1
 800d8c2:	105b      	asrs	r3, r3, #1
 800d8c4:	e7ef      	b.n	800d8a6 <__gethex+0x132>
 800d8c6:	f100 0a14 	add.w	sl, r0, #20
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	4655      	mov	r5, sl
 800d8ce:	469b      	mov	fp, r3
 800d8d0:	45b1      	cmp	r9, r6
 800d8d2:	d337      	bcc.n	800d944 <__gethex+0x1d0>
 800d8d4:	f845 bb04 	str.w	fp, [r5], #4
 800d8d8:	eba5 050a 	sub.w	r5, r5, sl
 800d8dc:	10ad      	asrs	r5, r5, #2
 800d8de:	6125      	str	r5, [r4, #16]
 800d8e0:	4658      	mov	r0, fp
 800d8e2:	f7fe fa27 	bl	800bd34 <__hi0bits>
 800d8e6:	016d      	lsls	r5, r5, #5
 800d8e8:	f8d8 6000 	ldr.w	r6, [r8]
 800d8ec:	1a2d      	subs	r5, r5, r0
 800d8ee:	42b5      	cmp	r5, r6
 800d8f0:	dd54      	ble.n	800d99c <__gethex+0x228>
 800d8f2:	1bad      	subs	r5, r5, r6
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f7fe fdb3 	bl	800c462 <__any_on>
 800d8fc:	4681      	mov	r9, r0
 800d8fe:	b178      	cbz	r0, 800d920 <__gethex+0x1ac>
 800d900:	1e6b      	subs	r3, r5, #1
 800d902:	1159      	asrs	r1, r3, #5
 800d904:	f003 021f 	and.w	r2, r3, #31
 800d908:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d90c:	f04f 0901 	mov.w	r9, #1
 800d910:	fa09 f202 	lsl.w	r2, r9, r2
 800d914:	420a      	tst	r2, r1
 800d916:	d003      	beq.n	800d920 <__gethex+0x1ac>
 800d918:	454b      	cmp	r3, r9
 800d91a:	dc36      	bgt.n	800d98a <__gethex+0x216>
 800d91c:	f04f 0902 	mov.w	r9, #2
 800d920:	4629      	mov	r1, r5
 800d922:	4620      	mov	r0, r4
 800d924:	f7ff febe 	bl	800d6a4 <rshift>
 800d928:	442f      	add	r7, r5
 800d92a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d92e:	42bb      	cmp	r3, r7
 800d930:	da42      	bge.n	800d9b8 <__gethex+0x244>
 800d932:	9801      	ldr	r0, [sp, #4]
 800d934:	4621      	mov	r1, r4
 800d936:	f7fe f94b 	bl	800bbd0 <_Bfree>
 800d93a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d93c:	2300      	movs	r3, #0
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	25a3      	movs	r5, #163	@ 0xa3
 800d942:	e793      	b.n	800d86c <__gethex+0xf8>
 800d944:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d948:	2a2e      	cmp	r2, #46	@ 0x2e
 800d94a:	d012      	beq.n	800d972 <__gethex+0x1fe>
 800d94c:	2b20      	cmp	r3, #32
 800d94e:	d104      	bne.n	800d95a <__gethex+0x1e6>
 800d950:	f845 bb04 	str.w	fp, [r5], #4
 800d954:	f04f 0b00 	mov.w	fp, #0
 800d958:	465b      	mov	r3, fp
 800d95a:	7830      	ldrb	r0, [r6, #0]
 800d95c:	9303      	str	r3, [sp, #12]
 800d95e:	f7ff fef3 	bl	800d748 <__hexdig_fun>
 800d962:	9b03      	ldr	r3, [sp, #12]
 800d964:	f000 000f 	and.w	r0, r0, #15
 800d968:	4098      	lsls	r0, r3
 800d96a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d96e:	3304      	adds	r3, #4
 800d970:	e7ae      	b.n	800d8d0 <__gethex+0x15c>
 800d972:	45b1      	cmp	r9, r6
 800d974:	d8ea      	bhi.n	800d94c <__gethex+0x1d8>
 800d976:	492b      	ldr	r1, [pc, #172]	@ (800da24 <__gethex+0x2b0>)
 800d978:	9303      	str	r3, [sp, #12]
 800d97a:	2201      	movs	r2, #1
 800d97c:	4630      	mov	r0, r6
 800d97e:	f7ff fe33 	bl	800d5e8 <strncmp>
 800d982:	9b03      	ldr	r3, [sp, #12]
 800d984:	2800      	cmp	r0, #0
 800d986:	d1e1      	bne.n	800d94c <__gethex+0x1d8>
 800d988:	e7a2      	b.n	800d8d0 <__gethex+0x15c>
 800d98a:	1ea9      	subs	r1, r5, #2
 800d98c:	4620      	mov	r0, r4
 800d98e:	f7fe fd68 	bl	800c462 <__any_on>
 800d992:	2800      	cmp	r0, #0
 800d994:	d0c2      	beq.n	800d91c <__gethex+0x1a8>
 800d996:	f04f 0903 	mov.w	r9, #3
 800d99a:	e7c1      	b.n	800d920 <__gethex+0x1ac>
 800d99c:	da09      	bge.n	800d9b2 <__gethex+0x23e>
 800d99e:	1b75      	subs	r5, r6, r5
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	9801      	ldr	r0, [sp, #4]
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	f7fe fb23 	bl	800bff0 <__lshift>
 800d9aa:	1b7f      	subs	r7, r7, r5
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	f100 0a14 	add.w	sl, r0, #20
 800d9b2:	f04f 0900 	mov.w	r9, #0
 800d9b6:	e7b8      	b.n	800d92a <__gethex+0x1b6>
 800d9b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9bc:	42bd      	cmp	r5, r7
 800d9be:	dd6f      	ble.n	800daa0 <__gethex+0x32c>
 800d9c0:	1bed      	subs	r5, r5, r7
 800d9c2:	42ae      	cmp	r6, r5
 800d9c4:	dc34      	bgt.n	800da30 <__gethex+0x2bc>
 800d9c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	d022      	beq.n	800da14 <__gethex+0x2a0>
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	d024      	beq.n	800da1c <__gethex+0x2a8>
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d115      	bne.n	800da02 <__gethex+0x28e>
 800d9d6:	42ae      	cmp	r6, r5
 800d9d8:	d113      	bne.n	800da02 <__gethex+0x28e>
 800d9da:	2e01      	cmp	r6, #1
 800d9dc:	d10b      	bne.n	800d9f6 <__gethex+0x282>
 800d9de:	9a02      	ldr	r2, [sp, #8]
 800d9e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d9e4:	6013      	str	r3, [r2, #0]
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	6123      	str	r3, [r4, #16]
 800d9ea:	f8ca 3000 	str.w	r3, [sl]
 800d9ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9f0:	2562      	movs	r5, #98	@ 0x62
 800d9f2:	601c      	str	r4, [r3, #0]
 800d9f4:	e73a      	b.n	800d86c <__gethex+0xf8>
 800d9f6:	1e71      	subs	r1, r6, #1
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f7fe fd32 	bl	800c462 <__any_on>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d1ed      	bne.n	800d9de <__gethex+0x26a>
 800da02:	9801      	ldr	r0, [sp, #4]
 800da04:	4621      	mov	r1, r4
 800da06:	f7fe f8e3 	bl	800bbd0 <_Bfree>
 800da0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da0c:	2300      	movs	r3, #0
 800da0e:	6013      	str	r3, [r2, #0]
 800da10:	2550      	movs	r5, #80	@ 0x50
 800da12:	e72b      	b.n	800d86c <__gethex+0xf8>
 800da14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1f3      	bne.n	800da02 <__gethex+0x28e>
 800da1a:	e7e0      	b.n	800d9de <__gethex+0x26a>
 800da1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1dd      	bne.n	800d9de <__gethex+0x26a>
 800da22:	e7ee      	b.n	800da02 <__gethex+0x28e>
 800da24:	0800fbe3 	.word	0x0800fbe3
 800da28:	0800fb79 	.word	0x0800fb79
 800da2c:	0800fc3a 	.word	0x0800fc3a
 800da30:	1e6f      	subs	r7, r5, #1
 800da32:	f1b9 0f00 	cmp.w	r9, #0
 800da36:	d130      	bne.n	800da9a <__gethex+0x326>
 800da38:	b127      	cbz	r7, 800da44 <__gethex+0x2d0>
 800da3a:	4639      	mov	r1, r7
 800da3c:	4620      	mov	r0, r4
 800da3e:	f7fe fd10 	bl	800c462 <__any_on>
 800da42:	4681      	mov	r9, r0
 800da44:	117a      	asrs	r2, r7, #5
 800da46:	2301      	movs	r3, #1
 800da48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da4c:	f007 071f 	and.w	r7, r7, #31
 800da50:	40bb      	lsls	r3, r7
 800da52:	4213      	tst	r3, r2
 800da54:	4629      	mov	r1, r5
 800da56:	4620      	mov	r0, r4
 800da58:	bf18      	it	ne
 800da5a:	f049 0902 	orrne.w	r9, r9, #2
 800da5e:	f7ff fe21 	bl	800d6a4 <rshift>
 800da62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800da66:	1b76      	subs	r6, r6, r5
 800da68:	2502      	movs	r5, #2
 800da6a:	f1b9 0f00 	cmp.w	r9, #0
 800da6e:	d047      	beq.n	800db00 <__gethex+0x38c>
 800da70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da74:	2b02      	cmp	r3, #2
 800da76:	d015      	beq.n	800daa4 <__gethex+0x330>
 800da78:	2b03      	cmp	r3, #3
 800da7a:	d017      	beq.n	800daac <__gethex+0x338>
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d109      	bne.n	800da94 <__gethex+0x320>
 800da80:	f019 0f02 	tst.w	r9, #2
 800da84:	d006      	beq.n	800da94 <__gethex+0x320>
 800da86:	f8da 3000 	ldr.w	r3, [sl]
 800da8a:	ea49 0903 	orr.w	r9, r9, r3
 800da8e:	f019 0f01 	tst.w	r9, #1
 800da92:	d10e      	bne.n	800dab2 <__gethex+0x33e>
 800da94:	f045 0510 	orr.w	r5, r5, #16
 800da98:	e032      	b.n	800db00 <__gethex+0x38c>
 800da9a:	f04f 0901 	mov.w	r9, #1
 800da9e:	e7d1      	b.n	800da44 <__gethex+0x2d0>
 800daa0:	2501      	movs	r5, #1
 800daa2:	e7e2      	b.n	800da6a <__gethex+0x2f6>
 800daa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daa6:	f1c3 0301 	rsb	r3, r3, #1
 800daaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800daac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d0f0      	beq.n	800da94 <__gethex+0x320>
 800dab2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dab6:	f104 0314 	add.w	r3, r4, #20
 800daba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dabe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dac2:	f04f 0c00 	mov.w	ip, #0
 800dac6:	4618      	mov	r0, r3
 800dac8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dacc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dad0:	d01b      	beq.n	800db0a <__gethex+0x396>
 800dad2:	3201      	adds	r2, #1
 800dad4:	6002      	str	r2, [r0, #0]
 800dad6:	2d02      	cmp	r5, #2
 800dad8:	f104 0314 	add.w	r3, r4, #20
 800dadc:	d13c      	bne.n	800db58 <__gethex+0x3e4>
 800dade:	f8d8 2000 	ldr.w	r2, [r8]
 800dae2:	3a01      	subs	r2, #1
 800dae4:	42b2      	cmp	r2, r6
 800dae6:	d109      	bne.n	800dafc <__gethex+0x388>
 800dae8:	1171      	asrs	r1, r6, #5
 800daea:	2201      	movs	r2, #1
 800daec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800daf0:	f006 061f 	and.w	r6, r6, #31
 800daf4:	fa02 f606 	lsl.w	r6, r2, r6
 800daf8:	421e      	tst	r6, r3
 800dafa:	d13a      	bne.n	800db72 <__gethex+0x3fe>
 800dafc:	f045 0520 	orr.w	r5, r5, #32
 800db00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db02:	601c      	str	r4, [r3, #0]
 800db04:	9b02      	ldr	r3, [sp, #8]
 800db06:	601f      	str	r7, [r3, #0]
 800db08:	e6b0      	b.n	800d86c <__gethex+0xf8>
 800db0a:	4299      	cmp	r1, r3
 800db0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800db10:	d8d9      	bhi.n	800dac6 <__gethex+0x352>
 800db12:	68a3      	ldr	r3, [r4, #8]
 800db14:	459b      	cmp	fp, r3
 800db16:	db17      	blt.n	800db48 <__gethex+0x3d4>
 800db18:	6861      	ldr	r1, [r4, #4]
 800db1a:	9801      	ldr	r0, [sp, #4]
 800db1c:	3101      	adds	r1, #1
 800db1e:	f7fe f817 	bl	800bb50 <_Balloc>
 800db22:	4681      	mov	r9, r0
 800db24:	b918      	cbnz	r0, 800db2e <__gethex+0x3ba>
 800db26:	4b1a      	ldr	r3, [pc, #104]	@ (800db90 <__gethex+0x41c>)
 800db28:	4602      	mov	r2, r0
 800db2a:	2184      	movs	r1, #132	@ 0x84
 800db2c:	e6c5      	b.n	800d8ba <__gethex+0x146>
 800db2e:	6922      	ldr	r2, [r4, #16]
 800db30:	3202      	adds	r2, #2
 800db32:	f104 010c 	add.w	r1, r4, #12
 800db36:	0092      	lsls	r2, r2, #2
 800db38:	300c      	adds	r0, #12
 800db3a:	f7fd f89a 	bl	800ac72 <memcpy>
 800db3e:	4621      	mov	r1, r4
 800db40:	9801      	ldr	r0, [sp, #4]
 800db42:	f7fe f845 	bl	800bbd0 <_Bfree>
 800db46:	464c      	mov	r4, r9
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	1c5a      	adds	r2, r3, #1
 800db4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db50:	6122      	str	r2, [r4, #16]
 800db52:	2201      	movs	r2, #1
 800db54:	615a      	str	r2, [r3, #20]
 800db56:	e7be      	b.n	800dad6 <__gethex+0x362>
 800db58:	6922      	ldr	r2, [r4, #16]
 800db5a:	455a      	cmp	r2, fp
 800db5c:	dd0b      	ble.n	800db76 <__gethex+0x402>
 800db5e:	2101      	movs	r1, #1
 800db60:	4620      	mov	r0, r4
 800db62:	f7ff fd9f 	bl	800d6a4 <rshift>
 800db66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db6a:	3701      	adds	r7, #1
 800db6c:	42bb      	cmp	r3, r7
 800db6e:	f6ff aee0 	blt.w	800d932 <__gethex+0x1be>
 800db72:	2501      	movs	r5, #1
 800db74:	e7c2      	b.n	800dafc <__gethex+0x388>
 800db76:	f016 061f 	ands.w	r6, r6, #31
 800db7a:	d0fa      	beq.n	800db72 <__gethex+0x3fe>
 800db7c:	4453      	add	r3, sl
 800db7e:	f1c6 0620 	rsb	r6, r6, #32
 800db82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db86:	f7fe f8d5 	bl	800bd34 <__hi0bits>
 800db8a:	42b0      	cmp	r0, r6
 800db8c:	dbe7      	blt.n	800db5e <__gethex+0x3ea>
 800db8e:	e7f0      	b.n	800db72 <__gethex+0x3fe>
 800db90:	0800fb79 	.word	0x0800fb79

0800db94 <L_shift>:
 800db94:	f1c2 0208 	rsb	r2, r2, #8
 800db98:	0092      	lsls	r2, r2, #2
 800db9a:	b570      	push	{r4, r5, r6, lr}
 800db9c:	f1c2 0620 	rsb	r6, r2, #32
 800dba0:	6843      	ldr	r3, [r0, #4]
 800dba2:	6804      	ldr	r4, [r0, #0]
 800dba4:	fa03 f506 	lsl.w	r5, r3, r6
 800dba8:	432c      	orrs	r4, r5
 800dbaa:	40d3      	lsrs	r3, r2
 800dbac:	6004      	str	r4, [r0, #0]
 800dbae:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbb2:	4288      	cmp	r0, r1
 800dbb4:	d3f4      	bcc.n	800dba0 <L_shift+0xc>
 800dbb6:	bd70      	pop	{r4, r5, r6, pc}

0800dbb8 <__match>:
 800dbb8:	b530      	push	{r4, r5, lr}
 800dbba:	6803      	ldr	r3, [r0, #0]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbc2:	b914      	cbnz	r4, 800dbca <__match+0x12>
 800dbc4:	6003      	str	r3, [r0, #0]
 800dbc6:	2001      	movs	r0, #1
 800dbc8:	bd30      	pop	{r4, r5, pc}
 800dbca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dbd2:	2d19      	cmp	r5, #25
 800dbd4:	bf98      	it	ls
 800dbd6:	3220      	addls	r2, #32
 800dbd8:	42a2      	cmp	r2, r4
 800dbda:	d0f0      	beq.n	800dbbe <__match+0x6>
 800dbdc:	2000      	movs	r0, #0
 800dbde:	e7f3      	b.n	800dbc8 <__match+0x10>

0800dbe0 <__hexnan>:
 800dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe4:	680b      	ldr	r3, [r1, #0]
 800dbe6:	6801      	ldr	r1, [r0, #0]
 800dbe8:	115e      	asrs	r6, r3, #5
 800dbea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dbee:	f013 031f 	ands.w	r3, r3, #31
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	bf18      	it	ne
 800dbf6:	3604      	addne	r6, #4
 800dbf8:	2500      	movs	r5, #0
 800dbfa:	1f37      	subs	r7, r6, #4
 800dbfc:	4682      	mov	sl, r0
 800dbfe:	4690      	mov	r8, r2
 800dc00:	9301      	str	r3, [sp, #4]
 800dc02:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc06:	46b9      	mov	r9, r7
 800dc08:	463c      	mov	r4, r7
 800dc0a:	9502      	str	r5, [sp, #8]
 800dc0c:	46ab      	mov	fp, r5
 800dc0e:	784a      	ldrb	r2, [r1, #1]
 800dc10:	1c4b      	adds	r3, r1, #1
 800dc12:	9303      	str	r3, [sp, #12]
 800dc14:	b342      	cbz	r2, 800dc68 <__hexnan+0x88>
 800dc16:	4610      	mov	r0, r2
 800dc18:	9105      	str	r1, [sp, #20]
 800dc1a:	9204      	str	r2, [sp, #16]
 800dc1c:	f7ff fd94 	bl	800d748 <__hexdig_fun>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d151      	bne.n	800dcc8 <__hexnan+0xe8>
 800dc24:	9a04      	ldr	r2, [sp, #16]
 800dc26:	9905      	ldr	r1, [sp, #20]
 800dc28:	2a20      	cmp	r2, #32
 800dc2a:	d818      	bhi.n	800dc5e <__hexnan+0x7e>
 800dc2c:	9b02      	ldr	r3, [sp, #8]
 800dc2e:	459b      	cmp	fp, r3
 800dc30:	dd13      	ble.n	800dc5a <__hexnan+0x7a>
 800dc32:	454c      	cmp	r4, r9
 800dc34:	d206      	bcs.n	800dc44 <__hexnan+0x64>
 800dc36:	2d07      	cmp	r5, #7
 800dc38:	dc04      	bgt.n	800dc44 <__hexnan+0x64>
 800dc3a:	462a      	mov	r2, r5
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f7ff ffa8 	bl	800db94 <L_shift>
 800dc44:	4544      	cmp	r4, r8
 800dc46:	d952      	bls.n	800dcee <__hexnan+0x10e>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f1a4 0904 	sub.w	r9, r4, #4
 800dc4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc52:	f8cd b008 	str.w	fp, [sp, #8]
 800dc56:	464c      	mov	r4, r9
 800dc58:	461d      	mov	r5, r3
 800dc5a:	9903      	ldr	r1, [sp, #12]
 800dc5c:	e7d7      	b.n	800dc0e <__hexnan+0x2e>
 800dc5e:	2a29      	cmp	r2, #41	@ 0x29
 800dc60:	d157      	bne.n	800dd12 <__hexnan+0x132>
 800dc62:	3102      	adds	r1, #2
 800dc64:	f8ca 1000 	str.w	r1, [sl]
 800dc68:	f1bb 0f00 	cmp.w	fp, #0
 800dc6c:	d051      	beq.n	800dd12 <__hexnan+0x132>
 800dc6e:	454c      	cmp	r4, r9
 800dc70:	d206      	bcs.n	800dc80 <__hexnan+0xa0>
 800dc72:	2d07      	cmp	r5, #7
 800dc74:	dc04      	bgt.n	800dc80 <__hexnan+0xa0>
 800dc76:	462a      	mov	r2, r5
 800dc78:	4649      	mov	r1, r9
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f7ff ff8a 	bl	800db94 <L_shift>
 800dc80:	4544      	cmp	r4, r8
 800dc82:	d936      	bls.n	800dcf2 <__hexnan+0x112>
 800dc84:	f1a8 0204 	sub.w	r2, r8, #4
 800dc88:	4623      	mov	r3, r4
 800dc8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc92:	429f      	cmp	r7, r3
 800dc94:	d2f9      	bcs.n	800dc8a <__hexnan+0xaa>
 800dc96:	1b3b      	subs	r3, r7, r4
 800dc98:	f023 0303 	bic.w	r3, r3, #3
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	3401      	adds	r4, #1
 800dca0:	3e03      	subs	r6, #3
 800dca2:	42b4      	cmp	r4, r6
 800dca4:	bf88      	it	hi
 800dca6:	2304      	movhi	r3, #4
 800dca8:	4443      	add	r3, r8
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f843 2b04 	str.w	r2, [r3], #4
 800dcb0:	429f      	cmp	r7, r3
 800dcb2:	d2fb      	bcs.n	800dcac <__hexnan+0xcc>
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	b91b      	cbnz	r3, 800dcc0 <__hexnan+0xe0>
 800dcb8:	4547      	cmp	r7, r8
 800dcba:	d128      	bne.n	800dd0e <__hexnan+0x12e>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	603b      	str	r3, [r7, #0]
 800dcc0:	2005      	movs	r0, #5
 800dcc2:	b007      	add	sp, #28
 800dcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc8:	3501      	adds	r5, #1
 800dcca:	2d08      	cmp	r5, #8
 800dccc:	f10b 0b01 	add.w	fp, fp, #1
 800dcd0:	dd06      	ble.n	800dce0 <__hexnan+0x100>
 800dcd2:	4544      	cmp	r4, r8
 800dcd4:	d9c1      	bls.n	800dc5a <__hexnan+0x7a>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcdc:	2501      	movs	r5, #1
 800dcde:	3c04      	subs	r4, #4
 800dce0:	6822      	ldr	r2, [r4, #0]
 800dce2:	f000 000f 	and.w	r0, r0, #15
 800dce6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcea:	6020      	str	r0, [r4, #0]
 800dcec:	e7b5      	b.n	800dc5a <__hexnan+0x7a>
 800dcee:	2508      	movs	r5, #8
 800dcf0:	e7b3      	b.n	800dc5a <__hexnan+0x7a>
 800dcf2:	9b01      	ldr	r3, [sp, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d0dd      	beq.n	800dcb4 <__hexnan+0xd4>
 800dcf8:	f1c3 0320 	rsb	r3, r3, #32
 800dcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800dd00:	40da      	lsrs	r2, r3
 800dd02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd06:	4013      	ands	r3, r2
 800dd08:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd0c:	e7d2      	b.n	800dcb4 <__hexnan+0xd4>
 800dd0e:	3f04      	subs	r7, #4
 800dd10:	e7d0      	b.n	800dcb4 <__hexnan+0xd4>
 800dd12:	2004      	movs	r0, #4
 800dd14:	e7d5      	b.n	800dcc2 <__hexnan+0xe2>

0800dd16 <__ascii_mbtowc>:
 800dd16:	b082      	sub	sp, #8
 800dd18:	b901      	cbnz	r1, 800dd1c <__ascii_mbtowc+0x6>
 800dd1a:	a901      	add	r1, sp, #4
 800dd1c:	b142      	cbz	r2, 800dd30 <__ascii_mbtowc+0x1a>
 800dd1e:	b14b      	cbz	r3, 800dd34 <__ascii_mbtowc+0x1e>
 800dd20:	7813      	ldrb	r3, [r2, #0]
 800dd22:	600b      	str	r3, [r1, #0]
 800dd24:	7812      	ldrb	r2, [r2, #0]
 800dd26:	1e10      	subs	r0, r2, #0
 800dd28:	bf18      	it	ne
 800dd2a:	2001      	movne	r0, #1
 800dd2c:	b002      	add	sp, #8
 800dd2e:	4770      	bx	lr
 800dd30:	4610      	mov	r0, r2
 800dd32:	e7fb      	b.n	800dd2c <__ascii_mbtowc+0x16>
 800dd34:	f06f 0001 	mvn.w	r0, #1
 800dd38:	e7f8      	b.n	800dd2c <__ascii_mbtowc+0x16>

0800dd3a <_realloc_r>:
 800dd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3e:	4607      	mov	r7, r0
 800dd40:	4614      	mov	r4, r2
 800dd42:	460d      	mov	r5, r1
 800dd44:	b921      	cbnz	r1, 800dd50 <_realloc_r+0x16>
 800dd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	f7fd be74 	b.w	800ba38 <_malloc_r>
 800dd50:	b92a      	cbnz	r2, 800dd5e <_realloc_r+0x24>
 800dd52:	f7fd fdfd 	bl	800b950 <_free_r>
 800dd56:	4625      	mov	r5, r4
 800dd58:	4628      	mov	r0, r5
 800dd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd5e:	f000 f840 	bl	800dde2 <_malloc_usable_size_r>
 800dd62:	4284      	cmp	r4, r0
 800dd64:	4606      	mov	r6, r0
 800dd66:	d802      	bhi.n	800dd6e <_realloc_r+0x34>
 800dd68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd6c:	d8f4      	bhi.n	800dd58 <_realloc_r+0x1e>
 800dd6e:	4621      	mov	r1, r4
 800dd70:	4638      	mov	r0, r7
 800dd72:	f7fd fe61 	bl	800ba38 <_malloc_r>
 800dd76:	4680      	mov	r8, r0
 800dd78:	b908      	cbnz	r0, 800dd7e <_realloc_r+0x44>
 800dd7a:	4645      	mov	r5, r8
 800dd7c:	e7ec      	b.n	800dd58 <_realloc_r+0x1e>
 800dd7e:	42b4      	cmp	r4, r6
 800dd80:	4622      	mov	r2, r4
 800dd82:	4629      	mov	r1, r5
 800dd84:	bf28      	it	cs
 800dd86:	4632      	movcs	r2, r6
 800dd88:	f7fc ff73 	bl	800ac72 <memcpy>
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4638      	mov	r0, r7
 800dd90:	f7fd fdde 	bl	800b950 <_free_r>
 800dd94:	e7f1      	b.n	800dd7a <_realloc_r+0x40>

0800dd96 <__ascii_wctomb>:
 800dd96:	4603      	mov	r3, r0
 800dd98:	4608      	mov	r0, r1
 800dd9a:	b141      	cbz	r1, 800ddae <__ascii_wctomb+0x18>
 800dd9c:	2aff      	cmp	r2, #255	@ 0xff
 800dd9e:	d904      	bls.n	800ddaa <__ascii_wctomb+0x14>
 800dda0:	228a      	movs	r2, #138	@ 0x8a
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	f04f 30ff 	mov.w	r0, #4294967295
 800dda8:	4770      	bx	lr
 800ddaa:	700a      	strb	r2, [r1, #0]
 800ddac:	2001      	movs	r0, #1
 800ddae:	4770      	bx	lr

0800ddb0 <fiprintf>:
 800ddb0:	b40e      	push	{r1, r2, r3}
 800ddb2:	b503      	push	{r0, r1, lr}
 800ddb4:	4601      	mov	r1, r0
 800ddb6:	ab03      	add	r3, sp, #12
 800ddb8:	4805      	ldr	r0, [pc, #20]	@ (800ddd0 <fiprintf+0x20>)
 800ddba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddbe:	6800      	ldr	r0, [r0, #0]
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	f000 f83f 	bl	800de44 <_vfiprintf_r>
 800ddc6:	b002      	add	sp, #8
 800ddc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddcc:	b003      	add	sp, #12
 800ddce:	4770      	bx	lr
 800ddd0:	20000024 	.word	0x20000024

0800ddd4 <abort>:
 800ddd4:	b508      	push	{r3, lr}
 800ddd6:	2006      	movs	r0, #6
 800ddd8:	f000 fa08 	bl	800e1ec <raise>
 800dddc:	2001      	movs	r0, #1
 800ddde:	f7f7 fd0a 	bl	80057f6 <_exit>

0800dde2 <_malloc_usable_size_r>:
 800dde2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dde6:	1f18      	subs	r0, r3, #4
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	bfbc      	itt	lt
 800ddec:	580b      	ldrlt	r3, [r1, r0]
 800ddee:	18c0      	addlt	r0, r0, r3
 800ddf0:	4770      	bx	lr

0800ddf2 <__sfputc_r>:
 800ddf2:	6893      	ldr	r3, [r2, #8]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	b410      	push	{r4}
 800ddfa:	6093      	str	r3, [r2, #8]
 800ddfc:	da08      	bge.n	800de10 <__sfputc_r+0x1e>
 800ddfe:	6994      	ldr	r4, [r2, #24]
 800de00:	42a3      	cmp	r3, r4
 800de02:	db01      	blt.n	800de08 <__sfputc_r+0x16>
 800de04:	290a      	cmp	r1, #10
 800de06:	d103      	bne.n	800de10 <__sfputc_r+0x1e>
 800de08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de0c:	f000 b932 	b.w	800e074 <__swbuf_r>
 800de10:	6813      	ldr	r3, [r2, #0]
 800de12:	1c58      	adds	r0, r3, #1
 800de14:	6010      	str	r0, [r2, #0]
 800de16:	7019      	strb	r1, [r3, #0]
 800de18:	4608      	mov	r0, r1
 800de1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <__sfputs_r>:
 800de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de22:	4606      	mov	r6, r0
 800de24:	460f      	mov	r7, r1
 800de26:	4614      	mov	r4, r2
 800de28:	18d5      	adds	r5, r2, r3
 800de2a:	42ac      	cmp	r4, r5
 800de2c:	d101      	bne.n	800de32 <__sfputs_r+0x12>
 800de2e:	2000      	movs	r0, #0
 800de30:	e007      	b.n	800de42 <__sfputs_r+0x22>
 800de32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de36:	463a      	mov	r2, r7
 800de38:	4630      	mov	r0, r6
 800de3a:	f7ff ffda 	bl	800ddf2 <__sfputc_r>
 800de3e:	1c43      	adds	r3, r0, #1
 800de40:	d1f3      	bne.n	800de2a <__sfputs_r+0xa>
 800de42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de44 <_vfiprintf_r>:
 800de44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de48:	460d      	mov	r5, r1
 800de4a:	b09d      	sub	sp, #116	@ 0x74
 800de4c:	4614      	mov	r4, r2
 800de4e:	4698      	mov	r8, r3
 800de50:	4606      	mov	r6, r0
 800de52:	b118      	cbz	r0, 800de5c <_vfiprintf_r+0x18>
 800de54:	6a03      	ldr	r3, [r0, #32]
 800de56:	b90b      	cbnz	r3, 800de5c <_vfiprintf_r+0x18>
 800de58:	f7fc fd7e 	bl	800a958 <__sinit>
 800de5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de5e:	07d9      	lsls	r1, r3, #31
 800de60:	d405      	bmi.n	800de6e <_vfiprintf_r+0x2a>
 800de62:	89ab      	ldrh	r3, [r5, #12]
 800de64:	059a      	lsls	r2, r3, #22
 800de66:	d402      	bmi.n	800de6e <_vfiprintf_r+0x2a>
 800de68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de6a:	f7fc ff00 	bl	800ac6e <__retarget_lock_acquire_recursive>
 800de6e:	89ab      	ldrh	r3, [r5, #12]
 800de70:	071b      	lsls	r3, r3, #28
 800de72:	d501      	bpl.n	800de78 <_vfiprintf_r+0x34>
 800de74:	692b      	ldr	r3, [r5, #16]
 800de76:	b99b      	cbnz	r3, 800dea0 <_vfiprintf_r+0x5c>
 800de78:	4629      	mov	r1, r5
 800de7a:	4630      	mov	r0, r6
 800de7c:	f000 f938 	bl	800e0f0 <__swsetup_r>
 800de80:	b170      	cbz	r0, 800dea0 <_vfiprintf_r+0x5c>
 800de82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de84:	07dc      	lsls	r4, r3, #31
 800de86:	d504      	bpl.n	800de92 <_vfiprintf_r+0x4e>
 800de88:	f04f 30ff 	mov.w	r0, #4294967295
 800de8c:	b01d      	add	sp, #116	@ 0x74
 800de8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de92:	89ab      	ldrh	r3, [r5, #12]
 800de94:	0598      	lsls	r0, r3, #22
 800de96:	d4f7      	bmi.n	800de88 <_vfiprintf_r+0x44>
 800de98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de9a:	f7fc fee9 	bl	800ac70 <__retarget_lock_release_recursive>
 800de9e:	e7f3      	b.n	800de88 <_vfiprintf_r+0x44>
 800dea0:	2300      	movs	r3, #0
 800dea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dea4:	2320      	movs	r3, #32
 800dea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800deaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800deae:	2330      	movs	r3, #48	@ 0x30
 800deb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e060 <_vfiprintf_r+0x21c>
 800deb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800deb8:	f04f 0901 	mov.w	r9, #1
 800debc:	4623      	mov	r3, r4
 800debe:	469a      	mov	sl, r3
 800dec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dec4:	b10a      	cbz	r2, 800deca <_vfiprintf_r+0x86>
 800dec6:	2a25      	cmp	r2, #37	@ 0x25
 800dec8:	d1f9      	bne.n	800debe <_vfiprintf_r+0x7a>
 800deca:	ebba 0b04 	subs.w	fp, sl, r4
 800dece:	d00b      	beq.n	800dee8 <_vfiprintf_r+0xa4>
 800ded0:	465b      	mov	r3, fp
 800ded2:	4622      	mov	r2, r4
 800ded4:	4629      	mov	r1, r5
 800ded6:	4630      	mov	r0, r6
 800ded8:	f7ff ffa2 	bl	800de20 <__sfputs_r>
 800dedc:	3001      	adds	r0, #1
 800dede:	f000 80a7 	beq.w	800e030 <_vfiprintf_r+0x1ec>
 800dee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dee4:	445a      	add	r2, fp
 800dee6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dee8:	f89a 3000 	ldrb.w	r3, [sl]
 800deec:	2b00      	cmp	r3, #0
 800deee:	f000 809f 	beq.w	800e030 <_vfiprintf_r+0x1ec>
 800def2:	2300      	movs	r3, #0
 800def4:	f04f 32ff 	mov.w	r2, #4294967295
 800def8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800defc:	f10a 0a01 	add.w	sl, sl, #1
 800df00:	9304      	str	r3, [sp, #16]
 800df02:	9307      	str	r3, [sp, #28]
 800df04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df08:	931a      	str	r3, [sp, #104]	@ 0x68
 800df0a:	4654      	mov	r4, sl
 800df0c:	2205      	movs	r2, #5
 800df0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df12:	4853      	ldr	r0, [pc, #332]	@ (800e060 <_vfiprintf_r+0x21c>)
 800df14:	f7f2 f97c 	bl	8000210 <memchr>
 800df18:	9a04      	ldr	r2, [sp, #16]
 800df1a:	b9d8      	cbnz	r0, 800df54 <_vfiprintf_r+0x110>
 800df1c:	06d1      	lsls	r1, r2, #27
 800df1e:	bf44      	itt	mi
 800df20:	2320      	movmi	r3, #32
 800df22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df26:	0713      	lsls	r3, r2, #28
 800df28:	bf44      	itt	mi
 800df2a:	232b      	movmi	r3, #43	@ 0x2b
 800df2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df30:	f89a 3000 	ldrb.w	r3, [sl]
 800df34:	2b2a      	cmp	r3, #42	@ 0x2a
 800df36:	d015      	beq.n	800df64 <_vfiprintf_r+0x120>
 800df38:	9a07      	ldr	r2, [sp, #28]
 800df3a:	4654      	mov	r4, sl
 800df3c:	2000      	movs	r0, #0
 800df3e:	f04f 0c0a 	mov.w	ip, #10
 800df42:	4621      	mov	r1, r4
 800df44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df48:	3b30      	subs	r3, #48	@ 0x30
 800df4a:	2b09      	cmp	r3, #9
 800df4c:	d94b      	bls.n	800dfe6 <_vfiprintf_r+0x1a2>
 800df4e:	b1b0      	cbz	r0, 800df7e <_vfiprintf_r+0x13a>
 800df50:	9207      	str	r2, [sp, #28]
 800df52:	e014      	b.n	800df7e <_vfiprintf_r+0x13a>
 800df54:	eba0 0308 	sub.w	r3, r0, r8
 800df58:	fa09 f303 	lsl.w	r3, r9, r3
 800df5c:	4313      	orrs	r3, r2
 800df5e:	9304      	str	r3, [sp, #16]
 800df60:	46a2      	mov	sl, r4
 800df62:	e7d2      	b.n	800df0a <_vfiprintf_r+0xc6>
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	1d19      	adds	r1, r3, #4
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	9103      	str	r1, [sp, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	bfbb      	ittet	lt
 800df70:	425b      	neglt	r3, r3
 800df72:	f042 0202 	orrlt.w	r2, r2, #2
 800df76:	9307      	strge	r3, [sp, #28]
 800df78:	9307      	strlt	r3, [sp, #28]
 800df7a:	bfb8      	it	lt
 800df7c:	9204      	strlt	r2, [sp, #16]
 800df7e:	7823      	ldrb	r3, [r4, #0]
 800df80:	2b2e      	cmp	r3, #46	@ 0x2e
 800df82:	d10a      	bne.n	800df9a <_vfiprintf_r+0x156>
 800df84:	7863      	ldrb	r3, [r4, #1]
 800df86:	2b2a      	cmp	r3, #42	@ 0x2a
 800df88:	d132      	bne.n	800dff0 <_vfiprintf_r+0x1ac>
 800df8a:	9b03      	ldr	r3, [sp, #12]
 800df8c:	1d1a      	adds	r2, r3, #4
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	9203      	str	r2, [sp, #12]
 800df92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df96:	3402      	adds	r4, #2
 800df98:	9305      	str	r3, [sp, #20]
 800df9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e070 <_vfiprintf_r+0x22c>
 800df9e:	7821      	ldrb	r1, [r4, #0]
 800dfa0:	2203      	movs	r2, #3
 800dfa2:	4650      	mov	r0, sl
 800dfa4:	f7f2 f934 	bl	8000210 <memchr>
 800dfa8:	b138      	cbz	r0, 800dfba <_vfiprintf_r+0x176>
 800dfaa:	9b04      	ldr	r3, [sp, #16]
 800dfac:	eba0 000a 	sub.w	r0, r0, sl
 800dfb0:	2240      	movs	r2, #64	@ 0x40
 800dfb2:	4082      	lsls	r2, r0
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	3401      	adds	r4, #1
 800dfb8:	9304      	str	r3, [sp, #16]
 800dfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfbe:	4829      	ldr	r0, [pc, #164]	@ (800e064 <_vfiprintf_r+0x220>)
 800dfc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfc4:	2206      	movs	r2, #6
 800dfc6:	f7f2 f923 	bl	8000210 <memchr>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d03f      	beq.n	800e04e <_vfiprintf_r+0x20a>
 800dfce:	4b26      	ldr	r3, [pc, #152]	@ (800e068 <_vfiprintf_r+0x224>)
 800dfd0:	bb1b      	cbnz	r3, 800e01a <_vfiprintf_r+0x1d6>
 800dfd2:	9b03      	ldr	r3, [sp, #12]
 800dfd4:	3307      	adds	r3, #7
 800dfd6:	f023 0307 	bic.w	r3, r3, #7
 800dfda:	3308      	adds	r3, #8
 800dfdc:	9303      	str	r3, [sp, #12]
 800dfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe0:	443b      	add	r3, r7
 800dfe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe4:	e76a      	b.n	800debc <_vfiprintf_r+0x78>
 800dfe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfea:	460c      	mov	r4, r1
 800dfec:	2001      	movs	r0, #1
 800dfee:	e7a8      	b.n	800df42 <_vfiprintf_r+0xfe>
 800dff0:	2300      	movs	r3, #0
 800dff2:	3401      	adds	r4, #1
 800dff4:	9305      	str	r3, [sp, #20]
 800dff6:	4619      	mov	r1, r3
 800dff8:	f04f 0c0a 	mov.w	ip, #10
 800dffc:	4620      	mov	r0, r4
 800dffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e002:	3a30      	subs	r2, #48	@ 0x30
 800e004:	2a09      	cmp	r2, #9
 800e006:	d903      	bls.n	800e010 <_vfiprintf_r+0x1cc>
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d0c6      	beq.n	800df9a <_vfiprintf_r+0x156>
 800e00c:	9105      	str	r1, [sp, #20]
 800e00e:	e7c4      	b.n	800df9a <_vfiprintf_r+0x156>
 800e010:	fb0c 2101 	mla	r1, ip, r1, r2
 800e014:	4604      	mov	r4, r0
 800e016:	2301      	movs	r3, #1
 800e018:	e7f0      	b.n	800dffc <_vfiprintf_r+0x1b8>
 800e01a:	ab03      	add	r3, sp, #12
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	462a      	mov	r2, r5
 800e020:	4b12      	ldr	r3, [pc, #72]	@ (800e06c <_vfiprintf_r+0x228>)
 800e022:	a904      	add	r1, sp, #16
 800e024:	4630      	mov	r0, r6
 800e026:	f7fb fe47 	bl	8009cb8 <_printf_float>
 800e02a:	4607      	mov	r7, r0
 800e02c:	1c78      	adds	r0, r7, #1
 800e02e:	d1d6      	bne.n	800dfde <_vfiprintf_r+0x19a>
 800e030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e032:	07d9      	lsls	r1, r3, #31
 800e034:	d405      	bmi.n	800e042 <_vfiprintf_r+0x1fe>
 800e036:	89ab      	ldrh	r3, [r5, #12]
 800e038:	059a      	lsls	r2, r3, #22
 800e03a:	d402      	bmi.n	800e042 <_vfiprintf_r+0x1fe>
 800e03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e03e:	f7fc fe17 	bl	800ac70 <__retarget_lock_release_recursive>
 800e042:	89ab      	ldrh	r3, [r5, #12]
 800e044:	065b      	lsls	r3, r3, #25
 800e046:	f53f af1f 	bmi.w	800de88 <_vfiprintf_r+0x44>
 800e04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e04c:	e71e      	b.n	800de8c <_vfiprintf_r+0x48>
 800e04e:	ab03      	add	r3, sp, #12
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	462a      	mov	r2, r5
 800e054:	4b05      	ldr	r3, [pc, #20]	@ (800e06c <_vfiprintf_r+0x228>)
 800e056:	a904      	add	r1, sp, #16
 800e058:	4630      	mov	r0, r6
 800e05a:	f7fc f8c5 	bl	800a1e8 <_printf_i>
 800e05e:	e7e4      	b.n	800e02a <_vfiprintf_r+0x1e6>
 800e060:	0800fbe5 	.word	0x0800fbe5
 800e064:	0800fbef 	.word	0x0800fbef
 800e068:	08009cb9 	.word	0x08009cb9
 800e06c:	0800de21 	.word	0x0800de21
 800e070:	0800fbeb 	.word	0x0800fbeb

0800e074 <__swbuf_r>:
 800e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e076:	460e      	mov	r6, r1
 800e078:	4614      	mov	r4, r2
 800e07a:	4605      	mov	r5, r0
 800e07c:	b118      	cbz	r0, 800e086 <__swbuf_r+0x12>
 800e07e:	6a03      	ldr	r3, [r0, #32]
 800e080:	b90b      	cbnz	r3, 800e086 <__swbuf_r+0x12>
 800e082:	f7fc fc69 	bl	800a958 <__sinit>
 800e086:	69a3      	ldr	r3, [r4, #24]
 800e088:	60a3      	str	r3, [r4, #8]
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	071a      	lsls	r2, r3, #28
 800e08e:	d501      	bpl.n	800e094 <__swbuf_r+0x20>
 800e090:	6923      	ldr	r3, [r4, #16]
 800e092:	b943      	cbnz	r3, 800e0a6 <__swbuf_r+0x32>
 800e094:	4621      	mov	r1, r4
 800e096:	4628      	mov	r0, r5
 800e098:	f000 f82a 	bl	800e0f0 <__swsetup_r>
 800e09c:	b118      	cbz	r0, 800e0a6 <__swbuf_r+0x32>
 800e09e:	f04f 37ff 	mov.w	r7, #4294967295
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	6922      	ldr	r2, [r4, #16]
 800e0aa:	1a98      	subs	r0, r3, r2
 800e0ac:	6963      	ldr	r3, [r4, #20]
 800e0ae:	b2f6      	uxtb	r6, r6
 800e0b0:	4283      	cmp	r3, r0
 800e0b2:	4637      	mov	r7, r6
 800e0b4:	dc05      	bgt.n	800e0c2 <__swbuf_r+0x4e>
 800e0b6:	4621      	mov	r1, r4
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f7ff fa53 	bl	800d564 <_fflush_r>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d1ed      	bne.n	800e09e <__swbuf_r+0x2a>
 800e0c2:	68a3      	ldr	r3, [r4, #8]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	60a3      	str	r3, [r4, #8]
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	1c5a      	adds	r2, r3, #1
 800e0cc:	6022      	str	r2, [r4, #0]
 800e0ce:	701e      	strb	r6, [r3, #0]
 800e0d0:	6962      	ldr	r2, [r4, #20]
 800e0d2:	1c43      	adds	r3, r0, #1
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d004      	beq.n	800e0e2 <__swbuf_r+0x6e>
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	07db      	lsls	r3, r3, #31
 800e0dc:	d5e1      	bpl.n	800e0a2 <__swbuf_r+0x2e>
 800e0de:	2e0a      	cmp	r6, #10
 800e0e0:	d1df      	bne.n	800e0a2 <__swbuf_r+0x2e>
 800e0e2:	4621      	mov	r1, r4
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	f7ff fa3d 	bl	800d564 <_fflush_r>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d0d9      	beq.n	800e0a2 <__swbuf_r+0x2e>
 800e0ee:	e7d6      	b.n	800e09e <__swbuf_r+0x2a>

0800e0f0 <__swsetup_r>:
 800e0f0:	b538      	push	{r3, r4, r5, lr}
 800e0f2:	4b29      	ldr	r3, [pc, #164]	@ (800e198 <__swsetup_r+0xa8>)
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	6818      	ldr	r0, [r3, #0]
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	b118      	cbz	r0, 800e104 <__swsetup_r+0x14>
 800e0fc:	6a03      	ldr	r3, [r0, #32]
 800e0fe:	b90b      	cbnz	r3, 800e104 <__swsetup_r+0x14>
 800e100:	f7fc fc2a 	bl	800a958 <__sinit>
 800e104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e108:	0719      	lsls	r1, r3, #28
 800e10a:	d422      	bmi.n	800e152 <__swsetup_r+0x62>
 800e10c:	06da      	lsls	r2, r3, #27
 800e10e:	d407      	bmi.n	800e120 <__swsetup_r+0x30>
 800e110:	2209      	movs	r2, #9
 800e112:	602a      	str	r2, [r5, #0]
 800e114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e118:	81a3      	strh	r3, [r4, #12]
 800e11a:	f04f 30ff 	mov.w	r0, #4294967295
 800e11e:	e033      	b.n	800e188 <__swsetup_r+0x98>
 800e120:	0758      	lsls	r0, r3, #29
 800e122:	d512      	bpl.n	800e14a <__swsetup_r+0x5a>
 800e124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e126:	b141      	cbz	r1, 800e13a <__swsetup_r+0x4a>
 800e128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e12c:	4299      	cmp	r1, r3
 800e12e:	d002      	beq.n	800e136 <__swsetup_r+0x46>
 800e130:	4628      	mov	r0, r5
 800e132:	f7fd fc0d 	bl	800b950 <_free_r>
 800e136:	2300      	movs	r3, #0
 800e138:	6363      	str	r3, [r4, #52]	@ 0x34
 800e13a:	89a3      	ldrh	r3, [r4, #12]
 800e13c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e140:	81a3      	strh	r3, [r4, #12]
 800e142:	2300      	movs	r3, #0
 800e144:	6063      	str	r3, [r4, #4]
 800e146:	6923      	ldr	r3, [r4, #16]
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	f043 0308 	orr.w	r3, r3, #8
 800e150:	81a3      	strh	r3, [r4, #12]
 800e152:	6923      	ldr	r3, [r4, #16]
 800e154:	b94b      	cbnz	r3, 800e16a <__swsetup_r+0x7a>
 800e156:	89a3      	ldrh	r3, [r4, #12]
 800e158:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e160:	d003      	beq.n	800e16a <__swsetup_r+0x7a>
 800e162:	4621      	mov	r1, r4
 800e164:	4628      	mov	r0, r5
 800e166:	f000 f883 	bl	800e270 <__smakebuf_r>
 800e16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16e:	f013 0201 	ands.w	r2, r3, #1
 800e172:	d00a      	beq.n	800e18a <__swsetup_r+0x9a>
 800e174:	2200      	movs	r2, #0
 800e176:	60a2      	str	r2, [r4, #8]
 800e178:	6962      	ldr	r2, [r4, #20]
 800e17a:	4252      	negs	r2, r2
 800e17c:	61a2      	str	r2, [r4, #24]
 800e17e:	6922      	ldr	r2, [r4, #16]
 800e180:	b942      	cbnz	r2, 800e194 <__swsetup_r+0xa4>
 800e182:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e186:	d1c5      	bne.n	800e114 <__swsetup_r+0x24>
 800e188:	bd38      	pop	{r3, r4, r5, pc}
 800e18a:	0799      	lsls	r1, r3, #30
 800e18c:	bf58      	it	pl
 800e18e:	6962      	ldrpl	r2, [r4, #20]
 800e190:	60a2      	str	r2, [r4, #8]
 800e192:	e7f4      	b.n	800e17e <__swsetup_r+0x8e>
 800e194:	2000      	movs	r0, #0
 800e196:	e7f7      	b.n	800e188 <__swsetup_r+0x98>
 800e198:	20000024 	.word	0x20000024

0800e19c <_raise_r>:
 800e19c:	291f      	cmp	r1, #31
 800e19e:	b538      	push	{r3, r4, r5, lr}
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	d904      	bls.n	800e1b0 <_raise_r+0x14>
 800e1a6:	2316      	movs	r3, #22
 800e1a8:	6003      	str	r3, [r0, #0]
 800e1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e1b2:	b112      	cbz	r2, 800e1ba <_raise_r+0x1e>
 800e1b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1b8:	b94b      	cbnz	r3, 800e1ce <_raise_r+0x32>
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f000 f830 	bl	800e220 <_getpid_r>
 800e1c0:	4622      	mov	r2, r4
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1ca:	f000 b817 	b.w	800e1fc <_kill_r>
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d00a      	beq.n	800e1e8 <_raise_r+0x4c>
 800e1d2:	1c59      	adds	r1, r3, #1
 800e1d4:	d103      	bne.n	800e1de <_raise_r+0x42>
 800e1d6:	2316      	movs	r3, #22
 800e1d8:	6003      	str	r3, [r0, #0]
 800e1da:	2001      	movs	r0, #1
 800e1dc:	e7e7      	b.n	800e1ae <_raise_r+0x12>
 800e1de:	2100      	movs	r1, #0
 800e1e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	4798      	blx	r3
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	e7e0      	b.n	800e1ae <_raise_r+0x12>

0800e1ec <raise>:
 800e1ec:	4b02      	ldr	r3, [pc, #8]	@ (800e1f8 <raise+0xc>)
 800e1ee:	4601      	mov	r1, r0
 800e1f0:	6818      	ldr	r0, [r3, #0]
 800e1f2:	f7ff bfd3 	b.w	800e19c <_raise_r>
 800e1f6:	bf00      	nop
 800e1f8:	20000024 	.word	0x20000024

0800e1fc <_kill_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4d07      	ldr	r5, [pc, #28]	@ (800e21c <_kill_r+0x20>)
 800e200:	2300      	movs	r3, #0
 800e202:	4604      	mov	r4, r0
 800e204:	4608      	mov	r0, r1
 800e206:	4611      	mov	r1, r2
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	f7f7 fae4 	bl	80057d6 <_kill>
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	d102      	bne.n	800e218 <_kill_r+0x1c>
 800e212:	682b      	ldr	r3, [r5, #0]
 800e214:	b103      	cbz	r3, 800e218 <_kill_r+0x1c>
 800e216:	6023      	str	r3, [r4, #0]
 800e218:	bd38      	pop	{r3, r4, r5, pc}
 800e21a:	bf00      	nop
 800e21c:	20000ec8 	.word	0x20000ec8

0800e220 <_getpid_r>:
 800e220:	f7f7 bad1 	b.w	80057c6 <_getpid>

0800e224 <__swhatbuf_r>:
 800e224:	b570      	push	{r4, r5, r6, lr}
 800e226:	460c      	mov	r4, r1
 800e228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e22c:	2900      	cmp	r1, #0
 800e22e:	b096      	sub	sp, #88	@ 0x58
 800e230:	4615      	mov	r5, r2
 800e232:	461e      	mov	r6, r3
 800e234:	da0d      	bge.n	800e252 <__swhatbuf_r+0x2e>
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e23c:	f04f 0100 	mov.w	r1, #0
 800e240:	bf14      	ite	ne
 800e242:	2340      	movne	r3, #64	@ 0x40
 800e244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e248:	2000      	movs	r0, #0
 800e24a:	6031      	str	r1, [r6, #0]
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	b016      	add	sp, #88	@ 0x58
 800e250:	bd70      	pop	{r4, r5, r6, pc}
 800e252:	466a      	mov	r2, sp
 800e254:	f000 f848 	bl	800e2e8 <_fstat_r>
 800e258:	2800      	cmp	r0, #0
 800e25a:	dbec      	blt.n	800e236 <__swhatbuf_r+0x12>
 800e25c:	9901      	ldr	r1, [sp, #4]
 800e25e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e266:	4259      	negs	r1, r3
 800e268:	4159      	adcs	r1, r3
 800e26a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e26e:	e7eb      	b.n	800e248 <__swhatbuf_r+0x24>

0800e270 <__smakebuf_r>:
 800e270:	898b      	ldrh	r3, [r1, #12]
 800e272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e274:	079d      	lsls	r5, r3, #30
 800e276:	4606      	mov	r6, r0
 800e278:	460c      	mov	r4, r1
 800e27a:	d507      	bpl.n	800e28c <__smakebuf_r+0x1c>
 800e27c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	6123      	str	r3, [r4, #16]
 800e284:	2301      	movs	r3, #1
 800e286:	6163      	str	r3, [r4, #20]
 800e288:	b003      	add	sp, #12
 800e28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e28c:	ab01      	add	r3, sp, #4
 800e28e:	466a      	mov	r2, sp
 800e290:	f7ff ffc8 	bl	800e224 <__swhatbuf_r>
 800e294:	9f00      	ldr	r7, [sp, #0]
 800e296:	4605      	mov	r5, r0
 800e298:	4639      	mov	r1, r7
 800e29a:	4630      	mov	r0, r6
 800e29c:	f7fd fbcc 	bl	800ba38 <_malloc_r>
 800e2a0:	b948      	cbnz	r0, 800e2b6 <__smakebuf_r+0x46>
 800e2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2a6:	059a      	lsls	r2, r3, #22
 800e2a8:	d4ee      	bmi.n	800e288 <__smakebuf_r+0x18>
 800e2aa:	f023 0303 	bic.w	r3, r3, #3
 800e2ae:	f043 0302 	orr.w	r3, r3, #2
 800e2b2:	81a3      	strh	r3, [r4, #12]
 800e2b4:	e7e2      	b.n	800e27c <__smakebuf_r+0xc>
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	6020      	str	r0, [r4, #0]
 800e2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2be:	81a3      	strh	r3, [r4, #12]
 800e2c0:	9b01      	ldr	r3, [sp, #4]
 800e2c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e2c6:	b15b      	cbz	r3, 800e2e0 <__smakebuf_r+0x70>
 800e2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f000 f81d 	bl	800e30c <_isatty_r>
 800e2d2:	b128      	cbz	r0, 800e2e0 <__smakebuf_r+0x70>
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	f023 0303 	bic.w	r3, r3, #3
 800e2da:	f043 0301 	orr.w	r3, r3, #1
 800e2de:	81a3      	strh	r3, [r4, #12]
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	431d      	orrs	r5, r3
 800e2e4:	81a5      	strh	r5, [r4, #12]
 800e2e6:	e7cf      	b.n	800e288 <__smakebuf_r+0x18>

0800e2e8 <_fstat_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	4d07      	ldr	r5, [pc, #28]	@ (800e308 <_fstat_r+0x20>)
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	4608      	mov	r0, r1
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	602b      	str	r3, [r5, #0]
 800e2f6:	f7f7 face 	bl	8005896 <_fstat>
 800e2fa:	1c43      	adds	r3, r0, #1
 800e2fc:	d102      	bne.n	800e304 <_fstat_r+0x1c>
 800e2fe:	682b      	ldr	r3, [r5, #0]
 800e300:	b103      	cbz	r3, 800e304 <_fstat_r+0x1c>
 800e302:	6023      	str	r3, [r4, #0]
 800e304:	bd38      	pop	{r3, r4, r5, pc}
 800e306:	bf00      	nop
 800e308:	20000ec8 	.word	0x20000ec8

0800e30c <_isatty_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4d06      	ldr	r5, [pc, #24]	@ (800e328 <_isatty_r+0x1c>)
 800e310:	2300      	movs	r3, #0
 800e312:	4604      	mov	r4, r0
 800e314:	4608      	mov	r0, r1
 800e316:	602b      	str	r3, [r5, #0]
 800e318:	f7f7 facd 	bl	80058b6 <_isatty>
 800e31c:	1c43      	adds	r3, r0, #1
 800e31e:	d102      	bne.n	800e326 <_isatty_r+0x1a>
 800e320:	682b      	ldr	r3, [r5, #0]
 800e322:	b103      	cbz	r3, 800e326 <_isatty_r+0x1a>
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	20000ec8 	.word	0x20000ec8

0800e32c <powf>:
 800e32c:	b508      	push	{r3, lr}
 800e32e:	ed2d 8b04 	vpush	{d8-d9}
 800e332:	eeb0 8a60 	vmov.f32	s16, s1
 800e336:	eeb0 9a40 	vmov.f32	s18, s0
 800e33a:	f000 f881 	bl	800e440 <__ieee754_powf>
 800e33e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e346:	eef0 8a40 	vmov.f32	s17, s0
 800e34a:	d63e      	bvs.n	800e3ca <powf+0x9e>
 800e34c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e354:	d112      	bne.n	800e37c <powf+0x50>
 800e356:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35e:	d039      	beq.n	800e3d4 <powf+0xa8>
 800e360:	eeb0 0a48 	vmov.f32	s0, s16
 800e364:	f000 f85f 	bl	800e426 <finitef>
 800e368:	b378      	cbz	r0, 800e3ca <powf+0x9e>
 800e36a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e372:	d52a      	bpl.n	800e3ca <powf+0x9e>
 800e374:	f7fc fc50 	bl	800ac18 <__errno>
 800e378:	2322      	movs	r3, #34	@ 0x22
 800e37a:	e014      	b.n	800e3a6 <powf+0x7a>
 800e37c:	f000 f853 	bl	800e426 <finitef>
 800e380:	b998      	cbnz	r0, 800e3aa <powf+0x7e>
 800e382:	eeb0 0a49 	vmov.f32	s0, s18
 800e386:	f000 f84e 	bl	800e426 <finitef>
 800e38a:	b170      	cbz	r0, 800e3aa <powf+0x7e>
 800e38c:	eeb0 0a48 	vmov.f32	s0, s16
 800e390:	f000 f849 	bl	800e426 <finitef>
 800e394:	b148      	cbz	r0, 800e3aa <powf+0x7e>
 800e396:	eef4 8a68 	vcmp.f32	s17, s17
 800e39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39e:	d7e9      	bvc.n	800e374 <powf+0x48>
 800e3a0:	f7fc fc3a 	bl	800ac18 <__errno>
 800e3a4:	2321      	movs	r3, #33	@ 0x21
 800e3a6:	6003      	str	r3, [r0, #0]
 800e3a8:	e00f      	b.n	800e3ca <powf+0x9e>
 800e3aa:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b2:	d10a      	bne.n	800e3ca <powf+0x9e>
 800e3b4:	eeb0 0a49 	vmov.f32	s0, s18
 800e3b8:	f000 f835 	bl	800e426 <finitef>
 800e3bc:	b128      	cbz	r0, 800e3ca <powf+0x9e>
 800e3be:	eeb0 0a48 	vmov.f32	s0, s16
 800e3c2:	f000 f830 	bl	800e426 <finitef>
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d1d4      	bne.n	800e374 <powf+0x48>
 800e3ca:	eeb0 0a68 	vmov.f32	s0, s17
 800e3ce:	ecbd 8b04 	vpop	{d8-d9}
 800e3d2:	bd08      	pop	{r3, pc}
 800e3d4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e3d8:	e7f7      	b.n	800e3ca <powf+0x9e>
	...

0800e3dc <sqrtf>:
 800e3dc:	b508      	push	{r3, lr}
 800e3de:	ed2d 8b02 	vpush	{d8}
 800e3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800e3e6:	f000 f828 	bl	800e43a <__ieee754_sqrtf>
 800e3ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f2:	d60c      	bvs.n	800e40e <sqrtf+0x32>
 800e3f4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e414 <sqrtf+0x38>
 800e3f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	d505      	bpl.n	800e40e <sqrtf+0x32>
 800e402:	f7fc fc09 	bl	800ac18 <__errno>
 800e406:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e40a:	2321      	movs	r3, #33	@ 0x21
 800e40c:	6003      	str	r3, [r0, #0]
 800e40e:	ecbd 8b02 	vpop	{d8}
 800e412:	bd08      	pop	{r3, pc}
 800e414:	00000000 	.word	0x00000000

0800e418 <fabsf>:
 800e418:	ee10 3a10 	vmov	r3, s0
 800e41c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e420:	ee00 3a10 	vmov	s0, r3
 800e424:	4770      	bx	lr

0800e426 <finitef>:
 800e426:	ee10 3a10 	vmov	r3, s0
 800e42a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e42e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e432:	bfac      	ite	ge
 800e434:	2000      	movge	r0, #0
 800e436:	2001      	movlt	r0, #1
 800e438:	4770      	bx	lr

0800e43a <__ieee754_sqrtf>:
 800e43a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e43e:	4770      	bx	lr

0800e440 <__ieee754_powf>:
 800e440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e444:	ee10 4a90 	vmov	r4, s1
 800e448:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800e44c:	ed2d 8b02 	vpush	{d8}
 800e450:	ee10 6a10 	vmov	r6, s0
 800e454:	eeb0 8a40 	vmov.f32	s16, s0
 800e458:	eef0 8a60 	vmov.f32	s17, s1
 800e45c:	d10c      	bne.n	800e478 <__ieee754_powf+0x38>
 800e45e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e462:	0076      	lsls	r6, r6, #1
 800e464:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e468:	f240 8274 	bls.w	800e954 <__ieee754_powf+0x514>
 800e46c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e470:	ecbd 8b02 	vpop	{d8}
 800e474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e478:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e47c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e480:	d802      	bhi.n	800e488 <__ieee754_powf+0x48>
 800e482:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e486:	d908      	bls.n	800e49a <__ieee754_powf+0x5a>
 800e488:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e48c:	d1ee      	bne.n	800e46c <__ieee754_powf+0x2c>
 800e48e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e492:	0064      	lsls	r4, r4, #1
 800e494:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e498:	e7e6      	b.n	800e468 <__ieee754_powf+0x28>
 800e49a:	2e00      	cmp	r6, #0
 800e49c:	da1f      	bge.n	800e4de <__ieee754_powf+0x9e>
 800e49e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e4a2:	f080 8260 	bcs.w	800e966 <__ieee754_powf+0x526>
 800e4a6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e4aa:	d32f      	bcc.n	800e50c <__ieee754_powf+0xcc>
 800e4ac:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e4b0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e4b4:	fa49 f503 	asr.w	r5, r9, r3
 800e4b8:	fa05 f303 	lsl.w	r3, r5, r3
 800e4bc:	454b      	cmp	r3, r9
 800e4be:	d123      	bne.n	800e508 <__ieee754_powf+0xc8>
 800e4c0:	f005 0501 	and.w	r5, r5, #1
 800e4c4:	f1c5 0502 	rsb	r5, r5, #2
 800e4c8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e4cc:	d11f      	bne.n	800e50e <__ieee754_powf+0xce>
 800e4ce:	2c00      	cmp	r4, #0
 800e4d0:	f280 8246 	bge.w	800e960 <__ieee754_powf+0x520>
 800e4d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e4d8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e4dc:	e7c8      	b.n	800e470 <__ieee754_powf+0x30>
 800e4de:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e4e2:	d111      	bne.n	800e508 <__ieee754_powf+0xc8>
 800e4e4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e4e8:	f000 8234 	beq.w	800e954 <__ieee754_powf+0x514>
 800e4ec:	d906      	bls.n	800e4fc <__ieee754_powf+0xbc>
 800e4ee:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800e804 <__ieee754_powf+0x3c4>
 800e4f2:	2c00      	cmp	r4, #0
 800e4f4:	bfa8      	it	ge
 800e4f6:	eeb0 0a68 	vmovge.f32	s0, s17
 800e4fa:	e7b9      	b.n	800e470 <__ieee754_powf+0x30>
 800e4fc:	2c00      	cmp	r4, #0
 800e4fe:	f280 822c 	bge.w	800e95a <__ieee754_powf+0x51a>
 800e502:	eeb1 0a68 	vneg.f32	s0, s17
 800e506:	e7b3      	b.n	800e470 <__ieee754_powf+0x30>
 800e508:	2500      	movs	r5, #0
 800e50a:	e7dd      	b.n	800e4c8 <__ieee754_powf+0x88>
 800e50c:	2500      	movs	r5, #0
 800e50e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e512:	d102      	bne.n	800e51a <__ieee754_powf+0xda>
 800e514:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e518:	e7aa      	b.n	800e470 <__ieee754_powf+0x30>
 800e51a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e51e:	f040 8227 	bne.w	800e970 <__ieee754_powf+0x530>
 800e522:	2e00      	cmp	r6, #0
 800e524:	f2c0 8224 	blt.w	800e970 <__ieee754_powf+0x530>
 800e528:	eeb0 0a48 	vmov.f32	s0, s16
 800e52c:	ecbd 8b02 	vpop	{d8}
 800e530:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e534:	f7ff bf81 	b.w	800e43a <__ieee754_sqrtf>
 800e538:	2d01      	cmp	r5, #1
 800e53a:	d199      	bne.n	800e470 <__ieee754_powf+0x30>
 800e53c:	eeb1 0a40 	vneg.f32	s0, s0
 800e540:	e796      	b.n	800e470 <__ieee754_powf+0x30>
 800e542:	0ff0      	lsrs	r0, r6, #31
 800e544:	3801      	subs	r0, #1
 800e546:	ea55 0300 	orrs.w	r3, r5, r0
 800e54a:	d104      	bne.n	800e556 <__ieee754_powf+0x116>
 800e54c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e550:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e554:	e78c      	b.n	800e470 <__ieee754_powf+0x30>
 800e556:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800e55a:	d96d      	bls.n	800e638 <__ieee754_powf+0x1f8>
 800e55c:	4baa      	ldr	r3, [pc, #680]	@ (800e808 <__ieee754_powf+0x3c8>)
 800e55e:	4598      	cmp	r8, r3
 800e560:	d808      	bhi.n	800e574 <__ieee754_powf+0x134>
 800e562:	2c00      	cmp	r4, #0
 800e564:	da0b      	bge.n	800e57e <__ieee754_powf+0x13e>
 800e566:	2000      	movs	r0, #0
 800e568:	ecbd 8b02 	vpop	{d8}
 800e56c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e570:	f000 baba 	b.w	800eae8 <__math_oflowf>
 800e574:	4ba5      	ldr	r3, [pc, #660]	@ (800e80c <__ieee754_powf+0x3cc>)
 800e576:	4598      	cmp	r8, r3
 800e578:	d908      	bls.n	800e58c <__ieee754_powf+0x14c>
 800e57a:	2c00      	cmp	r4, #0
 800e57c:	dcf3      	bgt.n	800e566 <__ieee754_powf+0x126>
 800e57e:	2000      	movs	r0, #0
 800e580:	ecbd 8b02 	vpop	{d8}
 800e584:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e588:	f000 baa8 	b.w	800eadc <__math_uflowf>
 800e58c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e590:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e594:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800e810 <__ieee754_powf+0x3d0>
 800e598:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e59c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e5a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e5a4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e5a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e5ac:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800e814 <__ieee754_powf+0x3d4>
 800e5b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5b4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800e818 <__ieee754_powf+0x3d8>
 800e5b8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e5bc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800e81c <__ieee754_powf+0x3dc>
 800e5c0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e5c4:	eeb0 7a67 	vmov.f32	s14, s15
 800e5c8:	eea0 7a26 	vfma.f32	s14, s0, s13
 800e5cc:	ee17 3a10 	vmov	r3, s14
 800e5d0:	f36f 030b 	bfc	r3, #0, #12
 800e5d4:	ee07 3a10 	vmov	s14, r3
 800e5d8:	eeb0 6a47 	vmov.f32	s12, s14
 800e5dc:	eea0 6a66 	vfms.f32	s12, s0, s13
 800e5e0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e5e4:	3d01      	subs	r5, #1
 800e5e6:	4305      	orrs	r5, r0
 800e5e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5ec:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800e5f0:	f36f 040b 	bfc	r4, #0, #12
 800e5f4:	bf18      	it	ne
 800e5f6:	eeb0 8a66 	vmovne.f32	s16, s13
 800e5fa:	ee06 4a90 	vmov	s13, r4
 800e5fe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e602:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800e606:	ee67 7a26 	vmul.f32	s15, s14, s13
 800e60a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800e60e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e612:	ee17 1a10 	vmov	r1, s14
 800e616:	2900      	cmp	r1, #0
 800e618:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e61c:	f340 80dd 	ble.w	800e7da <__ieee754_powf+0x39a>
 800e620:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800e624:	f240 80ca 	bls.w	800e7bc <__ieee754_powf+0x37c>
 800e628:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e630:	bf4c      	ite	mi
 800e632:	2001      	movmi	r0, #1
 800e634:	2000      	movpl	r0, #0
 800e636:	e797      	b.n	800e568 <__ieee754_powf+0x128>
 800e638:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800e63c:	bf01      	itttt	eq
 800e63e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800e820 <__ieee754_powf+0x3e0>
 800e642:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e646:	f06f 0317 	mvneq.w	r3, #23
 800e64a:	ee17 7a90 	vmoveq	r7, s15
 800e64e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800e652:	bf18      	it	ne
 800e654:	2300      	movne	r3, #0
 800e656:	3a7f      	subs	r2, #127	@ 0x7f
 800e658:	441a      	add	r2, r3
 800e65a:	4b72      	ldr	r3, [pc, #456]	@ (800e824 <__ieee754_powf+0x3e4>)
 800e65c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800e660:	429f      	cmp	r7, r3
 800e662:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800e666:	dd06      	ble.n	800e676 <__ieee754_powf+0x236>
 800e668:	4b6f      	ldr	r3, [pc, #444]	@ (800e828 <__ieee754_powf+0x3e8>)
 800e66a:	429f      	cmp	r7, r3
 800e66c:	f340 80a4 	ble.w	800e7b8 <__ieee754_powf+0x378>
 800e670:	3201      	adds	r2, #1
 800e672:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800e676:	2600      	movs	r6, #0
 800e678:	4b6c      	ldr	r3, [pc, #432]	@ (800e82c <__ieee754_powf+0x3ec>)
 800e67a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800e67e:	ee07 1a10 	vmov	s14, r1
 800e682:	edd3 5a00 	vldr	s11, [r3]
 800e686:	4b6a      	ldr	r3, [pc, #424]	@ (800e830 <__ieee754_powf+0x3f0>)
 800e688:	ee75 7a87 	vadd.f32	s15, s11, s14
 800e68c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e690:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800e694:	1049      	asrs	r1, r1, #1
 800e696:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800e69a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800e69e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800e6a2:	ee37 6a65 	vsub.f32	s12, s14, s11
 800e6a6:	ee07 1a90 	vmov	s15, r1
 800e6aa:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e6ae:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800e6b2:	ee15 7a10 	vmov	r7, s10
 800e6b6:	401f      	ands	r7, r3
 800e6b8:	ee06 7a90 	vmov	s13, r7
 800e6bc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800e6c0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e6c4:	ee65 7a05 	vmul.f32	s15, s10, s10
 800e6c8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e6cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e834 <__ieee754_powf+0x3f4>
 800e6d0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800e838 <__ieee754_powf+0x3f8>
 800e6d4:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e6d8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800e83c <__ieee754_powf+0x3fc>
 800e6dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e6e0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800e810 <__ieee754_powf+0x3d0>
 800e6e4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e6e8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e840 <__ieee754_powf+0x400>
 800e6ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e6f0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800e844 <__ieee754_powf+0x404>
 800e6f4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e6f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e6fc:	ee35 7a26 	vadd.f32	s14, s10, s13
 800e700:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800e704:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e708:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800e70c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800e710:	eef0 5a67 	vmov.f32	s11, s15
 800e714:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800e718:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e71c:	ee15 1a90 	vmov	r1, s11
 800e720:	4019      	ands	r1, r3
 800e722:	ee05 1a90 	vmov	s11, r1
 800e726:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e72a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800e72e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e732:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e736:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e73a:	eeb0 6a67 	vmov.f32	s12, s15
 800e73e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e742:	ee16 1a10 	vmov	r1, s12
 800e746:	4019      	ands	r1, r3
 800e748:	ee06 1a10 	vmov	s12, r1
 800e74c:	eeb0 7a46 	vmov.f32	s14, s12
 800e750:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800e754:	493c      	ldr	r1, [pc, #240]	@ (800e848 <__ieee754_powf+0x408>)
 800e756:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800e75a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e75e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800e84c <__ieee754_powf+0x40c>
 800e762:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800e850 <__ieee754_powf+0x410>
 800e766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e76a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800e854 <__ieee754_powf+0x414>
 800e76e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e772:	ed91 7a00 	vldr	s14, [r1]
 800e776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e77a:	ee07 2a10 	vmov	s14, r2
 800e77e:	4a36      	ldr	r2, [pc, #216]	@ (800e858 <__ieee754_powf+0x418>)
 800e780:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800e784:	eeb0 7a67 	vmov.f32	s14, s15
 800e788:	eea6 7a25 	vfma.f32	s14, s12, s11
 800e78c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800e790:	ed92 5a00 	vldr	s10, [r2]
 800e794:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e798:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e79c:	ee17 2a10 	vmov	r2, s14
 800e7a0:	401a      	ands	r2, r3
 800e7a2:	ee07 2a10 	vmov	s14, r2
 800e7a6:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e7aa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e7ae:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e7b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e7b6:	e715      	b.n	800e5e4 <__ieee754_powf+0x1a4>
 800e7b8:	2601      	movs	r6, #1
 800e7ba:	e75d      	b.n	800e678 <__ieee754_powf+0x238>
 800e7bc:	d152      	bne.n	800e864 <__ieee754_powf+0x424>
 800e7be:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e85c <__ieee754_powf+0x41c>
 800e7c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e7c6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e7ca:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d2:	f73f af29 	bgt.w	800e628 <__ieee754_powf+0x1e8>
 800e7d6:	2386      	movs	r3, #134	@ 0x86
 800e7d8:	e048      	b.n	800e86c <__ieee754_powf+0x42c>
 800e7da:	4a21      	ldr	r2, [pc, #132]	@ (800e860 <__ieee754_powf+0x420>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d907      	bls.n	800e7f0 <__ieee754_powf+0x3b0>
 800e7e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e8:	bf4c      	ite	mi
 800e7ea:	2001      	movmi	r0, #1
 800e7ec:	2000      	movpl	r0, #0
 800e7ee:	e6c7      	b.n	800e580 <__ieee754_powf+0x140>
 800e7f0:	d138      	bne.n	800e864 <__ieee754_powf+0x424>
 800e7f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e7f6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fe:	dbea      	blt.n	800e7d6 <__ieee754_powf+0x396>
 800e800:	e7ee      	b.n	800e7e0 <__ieee754_powf+0x3a0>
 800e802:	bf00      	nop
 800e804:	00000000 	.word	0x00000000
 800e808:	3f7ffff3 	.word	0x3f7ffff3
 800e80c:	3f800007 	.word	0x3f800007
 800e810:	3eaaaaab 	.word	0x3eaaaaab
 800e814:	3fb8aa00 	.word	0x3fb8aa00
 800e818:	3fb8aa3b 	.word	0x3fb8aa3b
 800e81c:	36eca570 	.word	0x36eca570
 800e820:	4b800000 	.word	0x4b800000
 800e824:	001cc471 	.word	0x001cc471
 800e828:	005db3d6 	.word	0x005db3d6
 800e82c:	0800fefc 	.word	0x0800fefc
 800e830:	fffff000 	.word	0xfffff000
 800e834:	3e6c3255 	.word	0x3e6c3255
 800e838:	3e53f142 	.word	0x3e53f142
 800e83c:	3e8ba305 	.word	0x3e8ba305
 800e840:	3edb6db7 	.word	0x3edb6db7
 800e844:	3f19999a 	.word	0x3f19999a
 800e848:	0800feec 	.word	0x0800feec
 800e84c:	3f76384f 	.word	0x3f76384f
 800e850:	3f763800 	.word	0x3f763800
 800e854:	369dc3a0 	.word	0x369dc3a0
 800e858:	0800fef4 	.word	0x0800fef4
 800e85c:	3338aa3c 	.word	0x3338aa3c
 800e860:	43160000 	.word	0x43160000
 800e864:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800e868:	d96f      	bls.n	800e94a <__ieee754_powf+0x50a>
 800e86a:	15db      	asrs	r3, r3, #23
 800e86c:	3b7e      	subs	r3, #126	@ 0x7e
 800e86e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e872:	4118      	asrs	r0, r3
 800e874:	4408      	add	r0, r1
 800e876:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e87a:	4a4e      	ldr	r2, [pc, #312]	@ (800e9b4 <__ieee754_powf+0x574>)
 800e87c:	3b7f      	subs	r3, #127	@ 0x7f
 800e87e:	411a      	asrs	r2, r3
 800e880:	4002      	ands	r2, r0
 800e882:	ee07 2a10 	vmov	s14, r2
 800e886:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800e88a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800e88e:	f1c3 0317 	rsb	r3, r3, #23
 800e892:	4118      	asrs	r0, r3
 800e894:	2900      	cmp	r1, #0
 800e896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e89a:	bfb8      	it	lt
 800e89c:	4240      	neglt	r0, r0
 800e89e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800e8a2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800e9b8 <__ieee754_powf+0x578>
 800e8a6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800e9bc <__ieee754_powf+0x57c>
 800e8aa:	ee16 3a90 	vmov	r3, s13
 800e8ae:	f36f 030b 	bfc	r3, #0, #12
 800e8b2:	ee06 3a90 	vmov	s13, r3
 800e8b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e8ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e8be:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e8c2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800e9c0 <__ieee754_powf+0x580>
 800e8c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8ca:	eee0 7a87 	vfma.f32	s15, s1, s14
 800e8ce:	eeb0 7a67 	vmov.f32	s14, s15
 800e8d2:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e8d6:	eef0 5a47 	vmov.f32	s11, s14
 800e8da:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800e8de:	ee67 6a07 	vmul.f32	s13, s14, s14
 800e8e2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e8e6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800e9c4 <__ieee754_powf+0x584>
 800e8ea:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800e9c8 <__ieee754_powf+0x588>
 800e8ee:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e8f2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800e9cc <__ieee754_powf+0x58c>
 800e8f6:	eee6 5a26 	vfma.f32	s11, s12, s13
 800e8fa:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800e9d0 <__ieee754_powf+0x590>
 800e8fe:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800e902:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e9d4 <__ieee754_powf+0x594>
 800e906:	eee6 5a26 	vfma.f32	s11, s12, s13
 800e90a:	eeb0 6a47 	vmov.f32	s12, s14
 800e90e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800e912:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e916:	ee67 5a06 	vmul.f32	s11, s14, s12
 800e91a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800e91e:	eee7 7a27 	vfma.f32	s15, s14, s15
 800e922:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e926:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e92a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e92e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e932:	ee10 3a10 	vmov	r3, s0
 800e936:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e93a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e93e:	da06      	bge.n	800e94e <__ieee754_powf+0x50e>
 800e940:	f000 f84c 	bl	800e9dc <scalbnf>
 800e944:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e948:	e592      	b.n	800e470 <__ieee754_powf+0x30>
 800e94a:	2000      	movs	r0, #0
 800e94c:	e7a7      	b.n	800e89e <__ieee754_powf+0x45e>
 800e94e:	ee00 3a10 	vmov	s0, r3
 800e952:	e7f7      	b.n	800e944 <__ieee754_powf+0x504>
 800e954:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e958:	e58a      	b.n	800e470 <__ieee754_powf+0x30>
 800e95a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800e9d8 <__ieee754_powf+0x598>
 800e95e:	e587      	b.n	800e470 <__ieee754_powf+0x30>
 800e960:	eeb0 0a48 	vmov.f32	s0, s16
 800e964:	e584      	b.n	800e470 <__ieee754_powf+0x30>
 800e966:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e96a:	f43f adbb 	beq.w	800e4e4 <__ieee754_powf+0xa4>
 800e96e:	2502      	movs	r5, #2
 800e970:	eeb0 0a48 	vmov.f32	s0, s16
 800e974:	f7ff fd50 	bl	800e418 <fabsf>
 800e978:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e97c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800e980:	4647      	mov	r7, r8
 800e982:	d003      	beq.n	800e98c <__ieee754_powf+0x54c>
 800e984:	f1b8 0f00 	cmp.w	r8, #0
 800e988:	f47f addb 	bne.w	800e542 <__ieee754_powf+0x102>
 800e98c:	2c00      	cmp	r4, #0
 800e98e:	bfbc      	itt	lt
 800e990:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800e994:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e998:	2e00      	cmp	r6, #0
 800e99a:	f6bf ad69 	bge.w	800e470 <__ieee754_powf+0x30>
 800e99e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800e9a2:	ea58 0805 	orrs.w	r8, r8, r5
 800e9a6:	f47f adc7 	bne.w	800e538 <__ieee754_powf+0xf8>
 800e9aa:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e9ae:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e9b2:	e55d      	b.n	800e470 <__ieee754_powf+0x30>
 800e9b4:	ff800000 	.word	0xff800000
 800e9b8:	3f317218 	.word	0x3f317218
 800e9bc:	3f317200 	.word	0x3f317200
 800e9c0:	35bfbe8c 	.word	0x35bfbe8c
 800e9c4:	b5ddea0e 	.word	0xb5ddea0e
 800e9c8:	3331bb4c 	.word	0x3331bb4c
 800e9cc:	388ab355 	.word	0x388ab355
 800e9d0:	bb360b61 	.word	0xbb360b61
 800e9d4:	3e2aaaab 	.word	0x3e2aaaab
 800e9d8:	00000000 	.word	0x00000000

0800e9dc <scalbnf>:
 800e9dc:	ee10 3a10 	vmov	r3, s0
 800e9e0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e9e4:	d02b      	beq.n	800ea3e <scalbnf+0x62>
 800e9e6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e9ea:	d302      	bcc.n	800e9f2 <scalbnf+0x16>
 800e9ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e9f0:	4770      	bx	lr
 800e9f2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e9f6:	d123      	bne.n	800ea40 <scalbnf+0x64>
 800e9f8:	4b24      	ldr	r3, [pc, #144]	@ (800ea8c <scalbnf+0xb0>)
 800e9fa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ea90 <scalbnf+0xb4>
 800e9fe:	4298      	cmp	r0, r3
 800ea00:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea04:	db17      	blt.n	800ea36 <scalbnf+0x5a>
 800ea06:	ee10 3a10 	vmov	r3, s0
 800ea0a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ea0e:	3a19      	subs	r2, #25
 800ea10:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ea14:	4288      	cmp	r0, r1
 800ea16:	dd15      	ble.n	800ea44 <scalbnf+0x68>
 800ea18:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ea94 <scalbnf+0xb8>
 800ea1c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ea98 <scalbnf+0xbc>
 800ea20:	ee10 3a10 	vmov	r3, s0
 800ea24:	eeb0 7a67 	vmov.f32	s14, s15
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	bfb8      	it	lt
 800ea2c:	eef0 7a66 	vmovlt.f32	s15, s13
 800ea30:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ea34:	4770      	bx	lr
 800ea36:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ea9c <scalbnf+0xc0>
 800ea3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea3e:	4770      	bx	lr
 800ea40:	0dd2      	lsrs	r2, r2, #23
 800ea42:	e7e5      	b.n	800ea10 <scalbnf+0x34>
 800ea44:	4410      	add	r0, r2
 800ea46:	28fe      	cmp	r0, #254	@ 0xfe
 800ea48:	dce6      	bgt.n	800ea18 <scalbnf+0x3c>
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	dd06      	ble.n	800ea5c <scalbnf+0x80>
 800ea4e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea52:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea56:	ee00 3a10 	vmov	s0, r3
 800ea5a:	4770      	bx	lr
 800ea5c:	f110 0f16 	cmn.w	r0, #22
 800ea60:	da09      	bge.n	800ea76 <scalbnf+0x9a>
 800ea62:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ea9c <scalbnf+0xc0>
 800ea66:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800eaa0 <scalbnf+0xc4>
 800ea6a:	ee10 3a10 	vmov	r3, s0
 800ea6e:	eeb0 7a67 	vmov.f32	s14, s15
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	e7d9      	b.n	800ea2a <scalbnf+0x4e>
 800ea76:	3019      	adds	r0, #25
 800ea78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea7c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea80:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800eaa4 <scalbnf+0xc8>
 800ea84:	ee07 3a90 	vmov	s15, r3
 800ea88:	e7d7      	b.n	800ea3a <scalbnf+0x5e>
 800ea8a:	bf00      	nop
 800ea8c:	ffff3cb0 	.word	0xffff3cb0
 800ea90:	4c000000 	.word	0x4c000000
 800ea94:	7149f2ca 	.word	0x7149f2ca
 800ea98:	f149f2ca 	.word	0xf149f2ca
 800ea9c:	0da24260 	.word	0x0da24260
 800eaa0:	8da24260 	.word	0x8da24260
 800eaa4:	33000000 	.word	0x33000000

0800eaa8 <with_errnof>:
 800eaa8:	b510      	push	{r4, lr}
 800eaaa:	ed2d 8b02 	vpush	{d8}
 800eaae:	eeb0 8a40 	vmov.f32	s16, s0
 800eab2:	4604      	mov	r4, r0
 800eab4:	f7fc f8b0 	bl	800ac18 <__errno>
 800eab8:	eeb0 0a48 	vmov.f32	s0, s16
 800eabc:	ecbd 8b02 	vpop	{d8}
 800eac0:	6004      	str	r4, [r0, #0]
 800eac2:	bd10      	pop	{r4, pc}

0800eac4 <xflowf>:
 800eac4:	b130      	cbz	r0, 800ead4 <xflowf+0x10>
 800eac6:	eef1 7a40 	vneg.f32	s15, s0
 800eaca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800eace:	2022      	movs	r0, #34	@ 0x22
 800ead0:	f7ff bfea 	b.w	800eaa8 <with_errnof>
 800ead4:	eef0 7a40 	vmov.f32	s15, s0
 800ead8:	e7f7      	b.n	800eaca <xflowf+0x6>
	...

0800eadc <__math_uflowf>:
 800eadc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eae4 <__math_uflowf+0x8>
 800eae0:	f7ff bff0 	b.w	800eac4 <xflowf>
 800eae4:	10000000 	.word	0x10000000

0800eae8 <__math_oflowf>:
 800eae8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eaf0 <__math_oflowf+0x8>
 800eaec:	f7ff bfea 	b.w	800eac4 <xflowf>
 800eaf0:	70000000 	.word	0x70000000

0800eaf4 <_init>:
 800eaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf6:	bf00      	nop
 800eaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eafa:	bc08      	pop	{r3}
 800eafc:	469e      	mov	lr, r3
 800eafe:	4770      	bx	lr

0800eb00 <_fini>:
 800eb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb02:	bf00      	nop
 800eb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb06:	bc08      	pop	{r3}
 800eb08:	469e      	mov	lr, r3
 800eb0a:	4770      	bx	lr
