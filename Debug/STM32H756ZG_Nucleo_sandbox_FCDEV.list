
STM32H756ZG_Nucleo_sandbox_FCDEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013fc  0800c6c8  0800c6c8  0000d6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dac4  0800dac4  0000f314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dac4  0800dac4  0000eac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dacc  0800dacc  0000f314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dacc  0800dacc  0000eacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dad0  0800dad0  0000ead0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800dad4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  0800dca8  0000f1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  0800dd48  0000f274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000bb4  20000318  0800dde8  0000f318  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20000ecc  0800dde8  0000fecc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000f314  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002422a  00000000  00000000  0000f344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003166  00000000  00000000  0003356e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e40  00000000  00000000  000366d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001772  00000000  00000000  00038518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029288  00000000  00000000  00039c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d424  00000000  00000000  00062f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fdf2e  00000000  00000000  00080336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017e264  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000097a4  00000000  00000000  0017e2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  00187a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000318 	.word	0x20000318
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c6ac 	.word	0x0800c6ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000031c 	.word	0x2000031c
 800020c:	0800c6ac 	.word	0x0800c6ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <adxl375_write>:

// Optional: for serial debug display
char x_char[6], y_char[6], z_char[6];

void adxl375_write(uint8_t reg, uint8_t value)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = reg;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, ADXL375_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000fcc:	f107 020c 	add.w	r2, r7, #12
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	21a6      	movs	r1, #166	@ 0xa6
 8000fda:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <adxl375_write+0x34>)
 8000fdc:	f004 ff3a 	bl	8005e54 <HAL_I2C_Master_Transmit>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000424 	.word	0x20000424

08000fec <adxl375_read>:

uint8_t adxl375_read(uint8_t reg)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af04      	add	r7, sp, #16
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2301      	movs	r3, #1
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 030f 	add.w	r3, r7, #15
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	21a6      	movs	r1, #166	@ 0xa6
 8001012:	4804      	ldr	r0, [pc, #16]	@ (8001024 <adxl375_read+0x38>)
 8001014:	f005 f94a 	bl	80062ac <HAL_I2C_Mem_Read>
    return value;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000424 	.word	0x20000424

08001028 <adxl375_read_xyz>:

void adxl375_read_xyz(int16_t *x, int16_t *y, int16_t *z)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af04      	add	r7, sp, #16
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, ADXL375_ADDRESS, ADXL375_REG_DATAX0, I2C_MEMADD_SIZE_8BIT, data_rec, 6, HAL_MAX_DELAY);
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2306      	movs	r3, #6
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <adxl375_read_xyz+0x78>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2232      	movs	r2, #50	@ 0x32
 8001046:	21a6      	movs	r1, #166	@ 0xa6
 8001048:	4816      	ldr	r0, [pc, #88]	@ (80010a4 <adxl375_read_xyz+0x7c>)
 800104a:	f005 f92f 	bl	80062ac <HAL_I2C_Mem_Read>

    *x = (int16_t)((data_rec[1] << 8) | data_rec[0]);
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <adxl375_read_xyz+0x78>)
 8001050:	785b      	ldrb	r3, [r3, #1]
 8001052:	b21b      	sxth	r3, r3
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <adxl375_read_xyz+0x78>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data_rec[3] << 8) | data_rec[2]);
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <adxl375_read_xyz+0x78>)
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	b21b      	sxth	r3, r3
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <adxl375_read_xyz+0x78>)
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data_rec[5] << 8) | data_rec[4]);
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <adxl375_read_xyz+0x78>)
 8001080:	795b      	ldrb	r3, [r3, #5]
 8001082:	b21b      	sxth	r3, r3
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <adxl375_read_xyz+0x78>)
 800108a:	791b      	ldrb	r3, [r3, #4]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	801a      	strh	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000334 	.word	0x20000334
 80010a4:	20000424 	.word	0x20000424

080010a8 <adxl375_init>:

void adxl375_init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    chipid = adxl375_read(ADXL375_REG_DEVID);  // Read device ID (should be 0xE5)
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff ff9d 	bl	8000fec <adxl375_read>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <adxl375_init+0x30>)
 80010b8:	701a      	strb	r2, [r3, #0]

    adxl375_write(ADXL375_REG_DATA_FORMAT, 0x0B); // (0x0B = 00001011)
 80010ba:	210b      	movs	r1, #11
 80010bc:	2031      	movs	r0, #49	@ 0x31
 80010be:	f7ff ff79 	bl	8000fb4 <adxl375_write>
    adxl375_write(ADXL375_REG_BW_RATE, 0x0A);     // Set Output Data Rate to 100 Hz (0x0A = 00001010)
 80010c2:	210a      	movs	r1, #10
 80010c4:	202c      	movs	r0, #44	@ 0x2c
 80010c6:	f7ff ff75 	bl	8000fb4 <adxl375_write>
    adxl375_write(ADXL375_REG_POWER_CTL, 0x08);   // Set Measure bit (00001000)
 80010ca:	2108      	movs	r1, #8
 80010cc:	202d      	movs	r0, #45	@ 0x2d
 80010ce:	f7ff ff71 	bl	8000fb4 <adxl375_write>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000033a 	.word	0x2000033a

080010dc <adxl375_write_offsets>:
    }
}

// New functions for offset registers
void adxl375_write_offsets(int8_t ofx, int8_t ofy, int8_t ofz)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	460b      	mov	r3, r1
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	4613      	mov	r3, r2
 80010ec:	717b      	strb	r3, [r7, #5]
    adxl375_write(ADXL375_REG_OFSX, (uint8_t)ofx);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4619      	mov	r1, r3
 80010f2:	201e      	movs	r0, #30
 80010f4:	f7ff ff5e 	bl	8000fb4 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSY, (uint8_t)ofy);
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	4619      	mov	r1, r3
 80010fc:	201f      	movs	r0, #31
 80010fe:	f7ff ff59 	bl	8000fb4 <adxl375_write>
    adxl375_write(ADXL375_REG_OFSZ, (uint8_t)ofz);
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	4619      	mov	r1, r3
 8001106:	2020      	movs	r0, #32
 8001108:	f7ff ff54 	bl	8000fb4 <adxl375_write>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <adxl375_read_offsets>:

void adxl375_read_offsets(int8_t *ofx, int8_t *ofy, int8_t *ofz)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
    if (ofx != NULL) {
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d006      	beq.n	8001134 <adxl375_read_offsets+0x20>
        *ofx = (int8_t)adxl375_read(ADXL375_REG_OFSX);
 8001126:	201e      	movs	r0, #30
 8001128:	f7ff ff60 	bl	8000fec <adxl375_read>
 800112c:	4603      	mov	r3, r0
 800112e:	b25a      	sxtb	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	701a      	strb	r2, [r3, #0]
    }
    if (ofy != NULL) {
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <adxl375_read_offsets+0x34>
        *ofy = (int8_t)adxl375_read(ADXL375_REG_OFSY);
 800113a:	201f      	movs	r0, #31
 800113c:	f7ff ff56 	bl	8000fec <adxl375_read>
 8001140:	4603      	mov	r3, r0
 8001142:	b25a      	sxtb	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	701a      	strb	r2, [r3, #0]
    }
    if (ofz != NULL) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <adxl375_read_offsets+0x48>
        *ofz = (int8_t)adxl375_read(ADXL375_REG_OFSZ);
 800114e:	2020      	movs	r0, #32
 8001150:	f7ff ff4c 	bl	8000fec <adxl375_read>
 8001154:	4603      	mov	r3, r0
 8001156:	b25a      	sxtb	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	701a      	strb	r2, [r3, #0]
    }
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <a_bmp390_iic_spi_read>:
 *             - 0 success
 *             - 1 iic spi read failed
 * @note       none
 */
static uint8_t a_bmp390_iic_spi_read(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	461a      	mov	r2, r3
 8001170:	460b      	mov	r3, r1
 8001172:	72fb      	strb	r3, [r7, #11]
 8001174:	4613      	mov	r3, r2
 8001176:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                      /* iic interface */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <a_bmp390_iic_spi_read+0x3e>
    {
        if (handle->iic_read(handle->iic_addr, reg, buf, len) != 0)                   /* iic read */
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	7818      	ldrb	r0, [r3, #0]
 800118c:	893b      	ldrh	r3, [r7, #8]
 800118e:	7af9      	ldrb	r1, [r7, #11]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	47a0      	blx	r4
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <a_bmp390_iic_spi_read+0x3a>
        {
            return 1;                                                                 /* return error */
 800119a:	2301      	movs	r3, #1
 800119c:	e029      	b.n	80011f2 <a_bmp390_iic_spi_read+0x8e>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 800119e:	2300      	movs	r3, #0
 80011a0:	e027      	b.n	80011f2 <a_bmp390_iic_spi_read+0x8e>
        }
    }
    else                                                                              /* spi interface */
    {
        reg |= 1 << 7;                                                                /* set read mode */
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011a8:	72fb      	strb	r3, [r7, #11]
        if (handle->spi_read(reg, handle->buf, 
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	1c51      	adds	r1, r2, #1
 80011b4:	893a      	ldrh	r2, [r7, #8]
 80011b6:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80011ba:	bf28      	it	cs
 80011bc:	f44f 7200 	movcs.w	r2, #512	@ 0x200
 80011c0:	b292      	uxth	r2, r2
 80011c2:	3201      	adds	r2, #1
 80011c4:	b292      	uxth	r2, r2
 80011c6:	7af8      	ldrb	r0, [r7, #11]
 80011c8:	4798      	blx	r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <a_bmp390_iic_spi_read+0x70>
                             len > 512 ? (512 + 1) : (len + 1)) != 0)                 /* spi read */
        {
            return 1;                                                                 /* return error */
 80011d0:	2301      	movs	r3, #1
 80011d2:	e00e      	b.n	80011f2 <a_bmp390_iic_spi_read+0x8e>
        }
        memcpy(buf, handle->buf+1, (len > 512) ? 512 : len);                          /* copy data */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3301      	adds	r3, #1
 80011d8:	1c59      	adds	r1, r3, #1
 80011da:	893b      	ldrh	r3, [r7, #8]
 80011dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011e0:	bf28      	it	cs
 80011e2:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f008 fe47 	bl	8009e7e <memcpy>
        
        return 0;                                                                     /* success return 0 */
 80011f0:	2300      	movs	r3, #0
    }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}

080011fa <a_bmp390_iic_spi_write>:
 *            - 0 success
 *            - 1 iic spi write failed
 * @note      none
 */
static uint8_t a_bmp390_iic_spi_write(bmp390_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80011fa:	b590      	push	{r4, r7, lr}
 80011fc:	b087      	sub	sp, #28
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	461a      	mov	r2, r3
 8001206:	460b      	mov	r3, r1
 8001208:	72fb      	strb	r3, [r7, #11]
 800120a:	4613      	mov	r3, r2
 800120c:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                             /* iic interface */
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8001214:	2b00      	cmp	r3, #0
 8001216:	d11f      	bne.n	8001258 <a_bmp390_iic_spi_write+0x5e>
    {
        uint16_t i;
        
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001218:	2300      	movs	r3, #0
 800121a:	82fb      	strh	r3, [r7, #22]
 800121c:	e016      	b.n	800124c <a_bmp390_iic_spi_write+0x52>
        {
            if (handle->iic_write(handle->iic_addr, 
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f8d3 4210 	ldr.w	r4, [r3, #528]	@ 0x210
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	7818      	ldrb	r0, [r3, #0]
 8001228:	8afb      	ldrh	r3, [r7, #22]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	7afb      	ldrb	r3, [r7, #11]
 800122e:	4413      	add	r3, r2
 8001230:	b2d9      	uxtb	r1, r3
 8001232:	8afb      	ldrh	r3, [r7, #22]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	441a      	add	r2, r3
 8001238:	2301      	movs	r3, #1
 800123a:	47a0      	blx	r4
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <a_bmp390_iic_spi_write+0x4c>
                                  (uint8_t)(reg + i), buf + i, 1) != 0)      /* iic write */
            {
                return 1;                                                    /* return error */
 8001242:	2301      	movs	r3, #1
 8001244:	e029      	b.n	800129a <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001246:	8afb      	ldrh	r3, [r7, #22]
 8001248:	3301      	adds	r3, #1
 800124a:	82fb      	strh	r3, [r7, #22]
 800124c:	8afa      	ldrh	r2, [r7, #22]
 800124e:	893b      	ldrh	r3, [r7, #8]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3e4      	bcc.n	800121e <a_bmp390_iic_spi_write+0x24>
            }
        }
        
        return 0;                                                            /* success return 0 */
 8001254:	2300      	movs	r3, #0
 8001256:	e020      	b.n	800129a <a_bmp390_iic_spi_write+0xa0>
    }
    else
    {
        uint16_t i;
        
        reg &= ~(1 << 7);                                                    /* write mode */
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800125e:	72fb      	strb	r3, [r7, #11]
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 8001260:	2300      	movs	r3, #0
 8001262:	82bb      	strh	r3, [r7, #20]
 8001264:	e014      	b.n	8001290 <a_bmp390_iic_spi_write+0x96>
        {
            if (handle->spi_write((uint8_t)(reg + i), buf + i, 1) != 0)      /* spi write */
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800126c:	8aba      	ldrh	r2, [r7, #20]
 800126e:	b2d1      	uxtb	r1, r2
 8001270:	7afa      	ldrb	r2, [r7, #11]
 8001272:	440a      	add	r2, r1
 8001274:	b2d0      	uxtb	r0, r2
 8001276:	8aba      	ldrh	r2, [r7, #20]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4411      	add	r1, r2
 800127c:	2201      	movs	r2, #1
 800127e:	4798      	blx	r3
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <a_bmp390_iic_spi_write+0x90>
            {
                return 1;                                                    /* return error */
 8001286:	2301      	movs	r3, #1
 8001288:	e007      	b.n	800129a <a_bmp390_iic_spi_write+0xa0>
        for (i = 0; i < len; i++)                                            /* write data one byte by one byte */
 800128a:	8abb      	ldrh	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	82bb      	strh	r3, [r7, #20]
 8001290:	8aba      	ldrh	r2, [r7, #20]
 8001292:	893b      	ldrh	r3, [r7, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	d3e6      	bcc.n	8001266 <a_bmp390_iic_spi_write+0x6c>
            }
        }
        
        return 0;                                                            /* success return 0 */
 8001298:	2300      	movs	r3, #0
    }
}
 800129a:	4618      	mov	r0, r3
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
	...

080012a4 <a_bmp390_get_calibration_data>:
 *            - 0 success
 *            - 1 get calibration data failed
 * @note      none
 */
static uint8_t a_bmp390_get_calibration_data(bmp390_handle_t *handle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[2];
    
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T1_L, (uint8_t *)buf, 2) != 0)  /* read t1 */
 80012ac:	f107 020c 	add.w	r2, r7, #12
 80012b0:	2302      	movs	r3, #2
 80012b2:	2131      	movs	r1, #49	@ 0x31
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff55 	bl	8001164 <a_bmp390_iic_spi_read>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <a_bmp390_get_calibration_data+0x2a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80012c6:	48a8      	ldr	r0, [pc, #672]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 80012c8:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e154      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t1 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t1 */
 80012ce:	7b7b      	ldrb	r3, [r7, #13]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7b3b      	ldrb	r3, [r7, #12]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21b      	sxth	r3, r3
 80012de:	b29a      	uxth	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8a3 2232 	strh.w	r2, [r3, #562]	@ 0x232
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T2_L, (uint8_t *)buf, 2) != 0)  /* read t2 */
 80012e6:	f107 020c 	add.w	r2, r7, #12
 80012ea:	2302      	movs	r3, #2
 80012ec:	2133      	movs	r1, #51	@ 0x33
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff38 	bl	8001164 <a_bmp390_iic_spi_read>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <a_bmp390_get_calibration_data+0x64>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001300:	4899      	ldr	r0, [pc, #612]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 8001302:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001304:	2301      	movs	r3, #1
 8001306:	e137      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t2 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set t2 */
 8001308:	7b7b      	ldrb	r3, [r7, #13]
 800130a:	b21b      	sxth	r3, r3
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8a3 2234 	strh.w	r2, [r3, #564]	@ 0x234
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_T3, (uint8_t *)buf, 1) != 0)    /* read t3 */
 8001320:	f107 020c 	add.w	r2, r7, #12
 8001324:	2301      	movs	r3, #1
 8001326:	2135      	movs	r1, #53	@ 0x35
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff1b 	bl	8001164 <a_bmp390_iic_spi_read>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <a_bmp390_get_calibration_data+0x9e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800133a:	488b      	ldr	r0, [pc, #556]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 800133c:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 800133e:	2301      	movs	r3, #1
 8001340:	e11a      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->t3 = (int8_t)(buf[0]);                                                       /* set t3 */
 8001342:	7b3b      	ldrb	r3, [r7, #12]
 8001344:	b25a      	sxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P1_L, (uint8_t *)buf, 2) != 0)  /* read p1 */
 800134c:	f107 020c 	add.w	r2, r7, #12
 8001350:	2302      	movs	r3, #2
 8001352:	2136      	movs	r1, #54	@ 0x36
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff05 	bl	8001164 <a_bmp390_iic_spi_read>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <a_bmp390_get_calibration_data+0xca>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001366:	4880      	ldr	r0, [pc, #512]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 8001368:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 800136a:	2301      	movs	r3, #1
 800136c:	e104      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p1 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p1 */
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b21b      	sxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21a      	sxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21a      	sxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P2_L, (uint8_t *)buf, 2) != 0)  /* read p2 */
 8001384:	f107 020c 	add.w	r2, r7, #12
 8001388:	2302      	movs	r3, #2
 800138a:	2138      	movs	r1, #56	@ 0x38
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fee9 	bl	8001164 <a_bmp390_iic_spi_read>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <a_bmp390_get_calibration_data+0x102>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800139e:	4872      	ldr	r0, [pc, #456]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 80013a0:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0e8      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p2 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p2 */
 80013a6:	7b7b      	ldrb	r3, [r7, #13]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7b3b      	ldrb	r3, [r7, #12]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8a3 223a 	strh.w	r2, [r3, #570]	@ 0x23a
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P3, (uint8_t *)buf, 1) != 0)    /* read p3 */
 80013bc:	f107 020c 	add.w	r2, r7, #12
 80013c0:	2301      	movs	r3, #1
 80013c2:	213a      	movs	r1, #58	@ 0x3a
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fecd 	bl	8001164 <a_bmp390_iic_spi_read>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <a_bmp390_get_calibration_data+0x13a>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80013d6:	4864      	ldr	r0, [pc, #400]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 80013d8:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80013da:	2301      	movs	r3, #1
 80013dc:	e0cc      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p3 = (int8_t)(buf[0]);                                                       /* set p3 */
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P4, (uint8_t *)buf, 1) != 0)    /* read p4 */
 80013e8:	f107 020c 	add.w	r2, r7, #12
 80013ec:	2301      	movs	r3, #1
 80013ee:	213b      	movs	r1, #59	@ 0x3b
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff feb7 	bl	8001164 <a_bmp390_iic_spi_read>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <a_bmp390_get_calibration_data+0x166>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001402:	4859      	ldr	r0, [pc, #356]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 8001404:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001406:	2301      	movs	r3, #1
 8001408:	e0b6      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p4 = (int8_t)(buf[0]);                                                       /* set p4 */
 800140a:	7b3b      	ldrb	r3, [r7, #12]
 800140c:	b25a      	sxtb	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P5_L, (uint8_t *)buf, 2) != 0)  /* read p5 */
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	2302      	movs	r3, #2
 800141a:	213c      	movs	r1, #60	@ 0x3c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fea1 	bl	8001164 <a_bmp390_iic_spi_read>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <a_bmp390_get_calibration_data+0x192>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800142e:	484e      	ldr	r0, [pc, #312]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 8001430:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001432:	2301      	movs	r3, #1
 8001434:	e0a0      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p5 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p5 */
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	b21b      	sxth	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7b3b      	ldrb	r3, [r7, #12]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21b      	sxth	r3, r3
 8001446:	b29a      	uxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f8a3 223e 	strh.w	r2, [r3, #574]	@ 0x23e
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P6_L, (uint8_t *)buf, 2) != 0)  /* read p6l */
 800144e:	f107 020c 	add.w	r2, r7, #12
 8001452:	2302      	movs	r3, #2
 8001454:	213e      	movs	r1, #62	@ 0x3e
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fe84 	bl	8001164 <a_bmp390_iic_spi_read>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <a_bmp390_get_calibration_data+0x1cc>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001468:	483f      	ldr	r0, [pc, #252]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 800146a:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 800146c:	2301      	movs	r3, #1
 800146e:	e083      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p6 = (uint16_t)buf[1] << 8 | buf[0];                                         /* set p6 */
 8001470:	7b7b      	ldrb	r3, [r7, #13]
 8001472:	b21b      	sxth	r3, r3
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	7b3b      	ldrb	r3, [r7, #12]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P7, (uint8_t *)buf, 1) != 0)    /* read p7 */
 8001488:	f107 020c 	add.w	r2, r7, #12
 800148c:	2301      	movs	r3, #1
 800148e:	2140      	movs	r1, #64	@ 0x40
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fe67 	bl	8001164 <a_bmp390_iic_spi_read>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <a_bmp390_get_calibration_data+0x206>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80014a2:	4831      	ldr	r0, [pc, #196]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 80014a4:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e066      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p7 = (int8_t)(buf[0]);                                                       /* set p7 */
 80014aa:	7b3b      	ldrb	r3, [r7, #12]
 80014ac:	b25a      	sxtb	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P8, (uint8_t *)buf, 1) != 0)    /* read p8 */
 80014b4:	f107 020c 	add.w	r2, r7, #12
 80014b8:	2301      	movs	r3, #1
 80014ba:	2141      	movs	r1, #65	@ 0x41
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fe51 	bl	8001164 <a_bmp390_iic_spi_read>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <a_bmp390_get_calibration_data+0x232>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80014ce:	4826      	ldr	r0, [pc, #152]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 80014d0:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e050      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p8 = (int8_t)(buf[0]);                                                       /* set p8 */
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P9_L, (uint8_t *)buf, 2) != 0)  /* read p9l */
 80014e0:	f107 020c 	add.w	r2, r7, #12
 80014e4:	2302      	movs	r3, #2
 80014e6:	2142      	movs	r1, #66	@ 0x42
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fe3b 	bl	8001164 <a_bmp390_iic_spi_read>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <a_bmp390_get_calibration_data+0x25e>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80014fa:	481b      	ldr	r0, [pc, #108]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 80014fc:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80014fe:	2301      	movs	r3, #1
 8001500:	e03a      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p9 = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);                              /* set p9 */
 8001502:	7b7b      	ldrb	r3, [r7, #13]
 8001504:	b21b      	sxth	r3, r3
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	7b3b      	ldrb	r3, [r7, #12]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21a      	sxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f8a3 2244 	strh.w	r2, [r3, #580]	@ 0x244
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P10, (uint8_t *)buf, 1) != 0)   /* read p10 */
 8001518:	f107 020c 	add.w	r2, r7, #12
 800151c:	2301      	movs	r3, #1
 800151e:	2144      	movs	r1, #68	@ 0x44
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fe1f 	bl	8001164 <a_bmp390_iic_spi_read>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <a_bmp390_get_calibration_data+0x296>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001532:	480d      	ldr	r0, [pc, #52]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 8001534:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001536:	2301      	movs	r3, #1
 8001538:	e01e      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
    }
    handle->p10 = (int8_t)(buf[0]);                                                      /* set p10 */
 800153a:	7b3b      	ldrb	r3, [r7, #12]
 800153c:	b25a      	sxtb	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f883 2246 	strb.w	r2, [r3, #582]	@ 0x246
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_NVM_PAR_P11, (uint8_t *)buf, 1) != 0)   /* read p11 */
 8001544:	f107 020c 	add.w	r2, r7, #12
 8001548:	2301      	movs	r3, #1
 800154a:	2145      	movs	r1, #69	@ 0x45
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fe09 	bl	8001164 <a_bmp390_iic_spi_read>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d009      	beq.n	800156c <a_bmp390_get_calibration_data+0x2c8>
    {
        handle->debug_print("bmp390: get calibration data failed.\n");                   /* get calibration data failed */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800155e:	4802      	ldr	r0, [pc, #8]	@ (8001568 <a_bmp390_get_calibration_data+0x2c4>)
 8001560:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8001562:	2301      	movs	r3, #1
 8001564:	e008      	b.n	8001578 <a_bmp390_get_calibration_data+0x2d4>
 8001566:	bf00      	nop
 8001568:	0800c6c8 	.word	0x0800c6c8
    }
    handle->p11 = (int8_t)(buf[0]);                                                      /* set p11 */
 800156c:	7b3b      	ldrb	r3, [r7, #12]
 800156e:	b25a      	sxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247

    return 0;                                                                            /* success return 0 */
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <a_bmp390_compensate_temperature>:
 * @param[in] data raw temperature
 * @return    compensated temperature
 * @note      none
 */
static int64_t a_bmp390_compensate_temperature(bmp390_handle_t *handle, uint32_t data)
{ 
 8001580:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001584:	b0a5      	sub	sp, #148	@ 0x94
 8001586:	af00      	add	r7, sp, #0
 8001588:	6578      	str	r0, [r7, #84]	@ 0x54
 800158a:	6539      	str	r1, [r7, #80]	@ 0x50
    int64_t partial_data5;
    int64_t partial_data6;
    int64_t comp_temp;

    /* calculate compensate temperature */
    partial_data1 = (uint64_t)(data - (256 * (uint64_t)(handle->t1)));
 800158c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800158e:	2200      	movs	r2, #0
 8001590:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001592:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001596:	f8b3 3232 	ldrh.w	r3, [r3, #562]	@ 0x232
 800159a:	b29b      	uxth	r3, r3
 800159c:	2200      	movs	r2, #0
 800159e:	461c      	mov	r4, r3
 80015a0:	4615      	mov	r5, r2
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	022b      	lsls	r3, r5, #8
 80015ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80015b0:	0222      	lsls	r2, r4, #8
 80015b2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80015b6:	4621      	mov	r1, r4
 80015b8:	1a89      	subs	r1, r1, r2
 80015ba:	61b9      	str	r1, [r7, #24]
 80015bc:	4629      	mov	r1, r5
 80015be:	eb61 0303 	sbc.w	r3, r1, r3
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80015c8:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    partial_data2 = (uint64_t)(handle->t2 * partial_data1);
 80015cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ce:	f8b3 3234 	ldrh.w	r3, [r3, #564]	@ 0x234
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80015d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80015da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015e2:	4622      	mov	r2, r4
 80015e4:	fb02 f203 	mul.w	r2, r2, r3
 80015e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015ec:	4629      	mov	r1, r5
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	441a      	add	r2, r3
 80015f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015f8:	4621      	mov	r1, r4
 80015fa:	fba3 ab01 	umull	sl, fp, r3, r1
 80015fe:	eb02 030b 	add.w	r3, r2, fp
 8001602:	469b      	mov	fp, r3
 8001604:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
 8001608:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
    partial_data3 = (uint64_t)(partial_data1 * partial_data1);
 800160c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001614:	fb03 f102 	mul.w	r1, r3, r2
 8001618:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800161c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	18ca      	adds	r2, r1, r3
 8001626:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800162a:	fba3 1303 	umull	r1, r3, r3, r3
 800162e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001630:	460b      	mov	r3, r1
 8001632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001636:	18d3      	adds	r3, r2, r3
 8001638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800163a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800163e:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8001642:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    partial_data4 = (int64_t)(((int64_t)partial_data3) * ((int64_t)handle->t3));
 8001646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001648:	f993 3236 	ldrsb.w	r3, [r3, #566]	@ 0x236
 800164c:	b25b      	sxtb	r3, r3
 800164e:	17da      	asrs	r2, r3, #31
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001654:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001658:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800165c:	4629      	mov	r1, r5
 800165e:	fb02 f001 	mul.w	r0, r2, r1
 8001662:	4621      	mov	r1, r4
 8001664:	fb01 f103 	mul.w	r1, r1, r3
 8001668:	4401      	add	r1, r0
 800166a:	4620      	mov	r0, r4
 800166c:	fba0 2302 	umull	r2, r3, r0, r2
 8001670:	647b      	str	r3, [r7, #68]	@ 0x44
 8001672:	4613      	mov	r3, r2
 8001674:	643b      	str	r3, [r7, #64]	@ 0x40
 8001676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001678:	18cb      	adds	r3, r1, r3
 800167a:	647b      	str	r3, [r7, #68]	@ 0x44
 800167c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001680:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8001684:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    partial_data5 = ((int64_t)(((int64_t)partial_data2) * 262144) + (int64_t)partial_data4);
 8001688:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	048b      	lsls	r3, r1, #18
 8001696:	ea43 3390 	orr.w	r3, r3, r0, lsr #14
 800169a:	0482      	lsls	r2, r0, #18
 800169c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80016a0:	1884      	adds	r4, r0, r2
 80016a2:	613c      	str	r4, [r7, #16]
 80016a4:	eb41 0303 	adc.w	r3, r1, r3
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016ae:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    partial_data6 = (int64_t)(((int64_t)partial_data5) / 4294967296U);
 80016b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	000a      	movs	r2, r1
 80016c0:	2300      	movs	r3, #0
 80016c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    handle->t_fine = partial_data6;
 80016c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80016c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80016cc:	e9c1 2392 	strd	r2, r3, [r1, #584]	@ 0x248
    comp_temp = (int64_t)((partial_data6 * 25)  / 16384);
 80016d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	1894      	adds	r4, r2, r2
 80016da:	60bc      	str	r4, [r7, #8]
 80016dc:	415b      	adcs	r3, r3
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e4:	eb12 0800 	adds.w	r8, r2, r0
 80016e8:	eb43 0901 	adc.w	r9, r3, r1
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001700:	4690      	mov	r8, r2
 8001702:	4699      	mov	r9, r3
 8001704:	eb18 0300 	adds.w	r3, r8, r0
 8001708:	623b      	str	r3, [r7, #32]
 800170a:	eb49 0301 	adc.w	r3, r9, r1
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001710:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001714:	2b00      	cmp	r3, #0
 8001716:	da08      	bge.n	800172a <a_bmp390_compensate_temperature+0x1aa>
 8001718:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 800171c:	1851      	adds	r1, r2, r1
 800171e:	6039      	str	r1, [r7, #0]
 8001720:	f143 0300 	adc.w	r3, r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	0b90      	lsrs	r0, r2, #14
 8001734:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
 8001738:	1399      	asrs	r1, r3, #14
 800173a:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
    
    return comp_temp;
 800173e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	3794      	adds	r7, #148	@ 0x94
 8001748:	46bd      	mov	sp, r7
 800174a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800174e:	4770      	bx	lr

08001750 <a_bmp390_compensate_pressure>:
 * @param[in] data raw pressure
 * @return    compensated pressure
 * @note      none
 */
static int64_t a_bmp390_compensate_pressure(bmp390_handle_t *handle, uint32_t data)
{
 8001750:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001754:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8001758:	af00      	add	r7, sp, #0
 800175a:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
 800175e:	f8c7 11b8 	str.w	r1, [r7, #440]	@ 0x1b8
    int64_t offset;
    int64_t sensitivity;
    uint64_t comp_press;

    /* calculate compensate pressure */
    partial_data1 = handle->t_fine * handle->t_fine;
 8001762:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001766:	e9d3 0192 	ldrd	r0, r1, [r3, #584]	@ 0x248
 800176a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800176e:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8001772:	fb02 f501 	mul.w	r5, r2, r1
 8001776:	fb00 f403 	mul.w	r4, r0, r3
 800177a:	442c      	add	r4, r5
 800177c:	fba0 8902 	umull	r8, r9, r0, r2
 8001780:	eb04 0309 	add.w	r3, r4, r9
 8001784:	4699      	mov	r9, r3
 8001786:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
 800178a:	e9c7 8980 	strd	r8, r9, [r7, #512]	@ 0x200
    partial_data2 = partial_data1 / 64;
 800178e:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8001792:	2b00      	cmp	r3, #0
 8001794:	da07      	bge.n	80017a6 <a_bmp390_compensate_pressure+0x56>
 8001796:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 800179a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800179c:	f143 0300 	adc.w	r3, r3, #0
 80017a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017a2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80017a6:	f04f 0000 	mov.w	r0, #0
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	0990      	lsrs	r0, r2, #6
 80017b0:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 80017b4:	1199      	asrs	r1, r3, #6
 80017b6:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * handle->t_fine) / 256;
 80017ba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80017be:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 80017c2:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 80017c6:	fb03 f001 	mul.w	r0, r3, r1
 80017ca:	f8d7 11fc 	ldr.w	r1, [r7, #508]	@ 0x1fc
 80017ce:	fb02 f101 	mul.w	r1, r2, r1
 80017d2:	4408      	add	r0, r1
 80017d4:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 80017d8:	fba1 ab02 	umull	sl, fp, r1, r2
 80017dc:	eb00 030b 	add.w	r3, r0, fp
 80017e0:	469b      	mov	fp, r3
 80017e2:	4652      	mov	r2, sl
 80017e4:	465b      	mov	r3, fp
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da07      	bge.n	80017fa <a_bmp390_compensate_pressure+0xaa>
 80017ea:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 80017ee:	6739      	str	r1, [r7, #112]	@ 0x70
 80017f0:	f143 0300 	adc.w	r3, r3, #0
 80017f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80017f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017fa:	f04f 0000 	mov.w	r0, #0
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	0a10      	lsrs	r0, r2, #8
 8001804:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001808:	1219      	asrs	r1, r3, #8
 800180a:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (handle->p8 * partial_data3) / 32;
 800180e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001812:	f993 3243 	ldrsb.w	r3, [r3, #579]	@ 0x243
 8001816:	b25b      	sxtb	r3, r3
 8001818:	17da      	asrs	r2, r3, #31
 800181a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800181e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001822:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001826:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 800182a:	462a      	mov	r2, r5
 800182c:	fb02 f203 	mul.w	r2, r2, r3
 8001830:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001834:	4621      	mov	r1, r4
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	441a      	add	r2, r3
 800183c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001840:	4621      	mov	r1, r4
 8001842:	fba3 1301 	umull	r1, r3, r3, r1
 8001846:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800184a:	460b      	mov	r3, r1
 800184c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001850:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001854:	18d3      	adds	r3, r2, r3
 8001856:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800185a:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 800185e:	2b00      	cmp	r3, #0
 8001860:	da07      	bge.n	8001872 <a_bmp390_compensate_pressure+0x122>
 8001862:	f112 011f 	adds.w	r1, r2, #31
 8001866:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001868:	f143 0300 	adc.w	r3, r3, #0
 800186c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800186e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	0950      	lsrs	r0, r2, #5
 800187c:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8001880:	1159      	asrs	r1, r3, #5
 8001882:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (handle->p7 * partial_data1) * 16;
 8001886:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800188a:	f993 3242 	ldrsb.w	r3, [r3, #578]	@ 0x242
 800188e:	b25b      	sxtb	r3, r3
 8001890:	17da      	asrs	r2, r3, #31
 8001892:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001896:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800189a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800189e:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 80018a2:	462a      	mov	r2, r5
 80018a4:	fb02 f203 	mul.w	r2, r2, r3
 80018a8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80018ac:	4621      	mov	r1, r4
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	441a      	add	r2, r3
 80018b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018b8:	4621      	mov	r1, r4
 80018ba:	fba3 1301 	umull	r1, r3, r3, r1
 80018be:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80018c2:	460b      	mov	r3, r1
 80018c4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80018c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80018cc:	18d3      	adds	r3, r2, r3
 80018ce:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 80018de:	4629      	mov	r1, r5
 80018e0:	010b      	lsls	r3, r1, #4
 80018e2:	4621      	mov	r1, r4
 80018e4:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80018e8:	4621      	mov	r1, r4
 80018ea:	010a      	lsls	r2, r1, #4
 80018ec:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    partial_data6 = (handle->p6 * handle->t_fine) * 4194304;
 80018f0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80018f4:	f8b3 3240 	ldrh.w	r3, [r3, #576]	@ 0x240
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001900:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001904:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001908:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800190c:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8001910:	4629      	mov	r1, r5
 8001912:	fb02 f001 	mul.w	r0, r2, r1
 8001916:	4621      	mov	r1, r4
 8001918:	fb01 f103 	mul.w	r1, r1, r3
 800191c:	4401      	add	r1, r0
 800191e:	4620      	mov	r0, r4
 8001920:	fba0 2302 	umull	r2, r3, r0, r2
 8001924:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001928:	4613      	mov	r3, r2
 800192a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800192e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001932:	18cb      	adds	r3, r1, r3
 8001934:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8001944:	4629      	mov	r1, r5
 8001946:	058b      	lsls	r3, r1, #22
 8001948:	4621      	mov	r1, r4
 800194a:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 800194e:	4621      	mov	r1, r4
 8001950:	058a      	lsls	r2, r1, #22
 8001952:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
    offset = (int64_t)((int64_t)(handle->p5) * (int64_t)140737488355328U) + partial_data4 + partial_data5 + partial_data6;
 8001956:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800195a:	f8b3 323e 	ldrh.w	r3, [r3, #574]	@ 0x23e
 800195e:	b29b      	uxth	r3, r3
 8001960:	2200      	movs	r2, #0
 8001962:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001966:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001976:	03d9      	lsls	r1, r3, #15
 8001978:	2000      	movs	r0, #0
 800197a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 800197e:	1884      	adds	r4, r0, r2
 8001980:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 8001984:	eb41 0303 	adc.w	r3, r1, r3
 8001988:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800198c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001990:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8001994:	4621      	mov	r1, r4
 8001996:	1889      	adds	r1, r1, r2
 8001998:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 800199c:	4629      	mov	r1, r5
 800199e:	eb43 0101 	adc.w	r1, r3, r1
 80019a2:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 80019a6:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 80019aa:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 80019ae:	4621      	mov	r1, r4
 80019b0:	1851      	adds	r1, r2, r1
 80019b2:	6639      	str	r1, [r7, #96]	@ 0x60
 80019b4:	4629      	mov	r1, r5
 80019b6:	eb43 0101 	adc.w	r1, r3, r1
 80019ba:	6679      	str	r1, [r7, #100]	@ 0x64
 80019bc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80019c0:	e9c7 3474 	strd	r3, r4, [r7, #464]	@ 0x1d0
    partial_data2 = (((int64_t)handle->p4) * partial_data3) / 32;
 80019c4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80019c8:	f993 323d 	ldrsb.w	r3, [r3, #573]	@ 0x23d
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	17da      	asrs	r2, r3, #31
 80019d0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80019d4:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80019d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019dc:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80019e0:	462a      	mov	r2, r5
 80019e2:	fb02 f203 	mul.w	r2, r2, r3
 80019e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80019ea:	4621      	mov	r1, r4
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	441a      	add	r2, r3
 80019f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019f6:	4621      	mov	r1, r4
 80019f8:	fba3 1301 	umull	r1, r3, r3, r1
 80019fc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a00:	460b      	mov	r3, r1
 8001a02:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001a06:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001a0a:	18d3      	adds	r3, r2, r3
 8001a0c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a10:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	da07      	bge.n	8001a28 <a_bmp390_compensate_pressure+0x2d8>
 8001a18:	f112 011f 	adds.w	r1, r2, #31
 8001a1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a1e:	f143 0300 	adc.w	r3, r3, #0
 8001a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	0950      	lsrs	r0, r2, #5
 8001a32:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8001a36:	1159      	asrs	r1, r3, #5
 8001a38:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data4 = (handle->p3 * partial_data1) * 4;
 8001a3c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001a40:	f993 323c 	ldrsb.w	r3, [r3, #572]	@ 0x23c
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	17da      	asrs	r2, r3, #31
 8001a48:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001a4c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001a50:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a54:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8001a58:	462a      	mov	r2, r5
 8001a5a:	fb02 f203 	mul.w	r2, r2, r3
 8001a5e:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001a62:	4621      	mov	r1, r4
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	441a      	add	r2, r3
 8001a6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a6e:	4621      	mov	r1, r4
 8001a70:	fba3 1301 	umull	r1, r3, r3, r1
 8001a74:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001a78:	460b      	mov	r3, r1
 8001a7a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8001a7e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001a82:	18d3      	adds	r3, r2, r3
 8001a84:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8001a94:	4629      	mov	r1, r5
 8001a96:	008b      	lsls	r3, r1, #2
 8001a98:	4621      	mov	r1, r4
 8001a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	008a      	lsls	r2, r1, #2
 8001aa2:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
    partial_data5 = ((int64_t)(handle->p2) - 16384) * ((int64_t)handle->t_fine) * 2097152;
 8001aa6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001aaa:	f9b3 323a 	ldrsh.w	r3, [r3, #570]	@ 0x23a
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	17da      	asrs	r2, r3, #31
 8001ab2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001ab6:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001aba:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8001abe:	460b      	mov	r3, r1
 8001ac0:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 8001ac4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001ac8:	4613      	mov	r3, r2
 8001aca:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001ace:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ad2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001ad6:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8001ada:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001ade:	4629      	mov	r1, r5
 8001ae0:	fb02 f001 	mul.w	r0, r2, r1
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	fb01 f103 	mul.w	r1, r1, r3
 8001aea:	4401      	add	r1, r0
 8001aec:	4620      	mov	r0, r4
 8001aee:	fba0 2302 	umull	r2, r3, r0, r2
 8001af2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001af6:	4613      	mov	r3, r2
 8001af8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001afc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001b00:	18cb      	adds	r3, r1, r3
 8001b02:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 8001b12:	4629      	mov	r1, r5
 8001b14:	054b      	lsls	r3, r1, #21
 8001b16:	4621      	mov	r1, r4
 8001b18:	ea43 23d1 	orr.w	r3, r3, r1, lsr #11
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	054a      	lsls	r2, r1, #21
 8001b20:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
    sensitivity = (((int64_t)(handle->p1) - 16384) * (int64_t)70368744177664U) + partial_data2 + partial_data4 + partial_data5;
 8001b24:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001b28:	f9b3 3238 	ldrsh.w	r3, [r3, #568]	@ 0x238
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	17da      	asrs	r2, r3, #31
 8001b30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b34:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001b38:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	f5b3 4380 	subs.w	r3, r3, #16384	@ 0x4000
 8001b42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001b46:	4613      	mov	r3, r2
 8001b48:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001b4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b50:	f04f 0000 	mov.w	r0, #0
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b5c:	0399      	lsls	r1, r3, #14
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8001b64:	1884      	adds	r4, r0, r2
 8001b66:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001b6a:	eb41 0303 	adc.w	r3, r1, r3
 8001b6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001b72:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8001b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	1889      	adds	r1, r1, r2
 8001b7e:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8001b82:	4629      	mov	r1, r5
 8001b84:	eb43 0101 	adc.w	r1, r3, r1
 8001b88:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001b8c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001b90:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001b94:	4621      	mov	r1, r4
 8001b96:	1851      	adds	r1, r2, r1
 8001b98:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	eb43 0101 	adc.w	r1, r3, r1
 8001ba0:	6579      	str	r1, [r7, #84]	@ 0x54
 8001ba2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8001ba6:	e9c7 3472 	strd	r3, r4, [r7, #456]	@ 0x1c8
    partial_data1 = (sensitivity / 16777216) * data;
 8001baa:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da08      	bge.n	8001bc4 <a_bmp390_compensate_pressure+0x474>
 8001bb2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8001bb6:	1851      	adds	r1, r2, r1
 8001bb8:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001bba:	f143 0300 	adc.w	r3, r3, #0
 8001bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	0e10      	lsrs	r0, r2, #24
 8001bce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001bd2:	1619      	asrs	r1, r3, #24
 8001bd4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001bde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001be2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001be6:	4623      	mov	r3, r4
 8001be8:	fb03 f201 	mul.w	r2, r3, r1
 8001bec:	462b      	mov	r3, r5
 8001bee:	fb00 f303 	mul.w	r3, r0, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bfa:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001bfe:	460a      	mov	r2, r1
 8001c00:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001c04:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001c08:	4413      	add	r3, r2
 8001c0a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001c0e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8001c12:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
 8001c16:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
    partial_data2 = (int64_t)(handle->p10) * (int64_t)(handle->t_fine);
 8001c1a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001c1e:	f993 3246 	ldrsb.w	r3, [r3, #582]	@ 0x246
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	17da      	asrs	r2, r3, #31
 8001c26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001c2e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001c32:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 8001c36:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	fb02 f001 	mul.w	r0, r2, r1
 8001c40:	4621      	mov	r1, r4
 8001c42:	fb01 f103 	mul.w	r1, r1, r3
 8001c46:	4401      	add	r1, r0
 8001c48:	4620      	mov	r0, r4
 8001c4a:	fba0 2302 	umull	r2, r3, r0, r2
 8001c4e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c52:	4613      	mov	r3, r2
 8001c54:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c58:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001c5c:	18cb      	adds	r3, r1, r3
 8001c5e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c62:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8001c66:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
 8001c6a:	e9c7 347e 	strd	r3, r4, [r7, #504]	@ 0x1f8
    partial_data3 = partial_data2 + (65536 * (int64_t)(handle->p9));
 8001c6e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001c72:	f9b3 3244 	ldrsh.w	r3, [r3, #580]	@ 0x244
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	17da      	asrs	r2, r3, #31
 8001c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c7e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001c82:	f04f 0000 	mov.w	r0, #0
 8001c86:	f04f 0100 	mov.w	r1, #0
 8001c8a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001c8e:	462b      	mov	r3, r5
 8001c90:	0419      	lsls	r1, r3, #16
 8001c92:	4623      	mov	r3, r4
 8001c94:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001c98:	4623      	mov	r3, r4
 8001c9a:	0418      	lsls	r0, r3, #16
 8001c9c:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8001ca0:	1814      	adds	r4, r2, r0
 8001ca2:	643c      	str	r4, [r7, #64]	@ 0x40
 8001ca4:	414b      	adcs	r3, r1
 8001ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ca8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001cac:	e9c7 347c 	strd	r3, r4, [r7, #496]	@ 0x1f0
    partial_data4 = (partial_data3 * data) / 8192;
 8001cb0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001cba:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001cbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001cc2:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	fb02 f203 	mul.w	r2, r2, r3
 8001ccc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	441a      	add	r2, r3
 8001cd8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001cdc:	4621      	mov	r1, r4
 8001cde:	fba3 1301 	umull	r1, r3, r3, r1
 8001ce2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001cec:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001cf0:	18d3      	adds	r3, r2, r3
 8001cf2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cf6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da08      	bge.n	8001d10 <a_bmp390_compensate_pressure+0x5c0>
 8001cfe:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001d02:	1851      	adds	r1, r2, r1
 8001d04:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d06:	f143 0300 	adc.w	r3, r3, #0
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d10:	f04f 0000 	mov.w	r0, #0
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	0b50      	lsrs	r0, r2, #13
 8001d1a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d1e:	1359      	asrs	r1, r3, #13
 8001d20:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
    partial_data5 = (partial_data4 * data) / 512;
 8001d24:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d2e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001d32:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d36:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001d3a:	462a      	mov	r2, r5
 8001d3c:	fb02 f203 	mul.w	r2, r2, r3
 8001d40:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001d44:	4621      	mov	r1, r4
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	441a      	add	r2, r3
 8001d4c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d50:	4621      	mov	r1, r4
 8001d52:	fba3 1301 	umull	r1, r3, r3, r1
 8001d56:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001d60:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001d64:	18d3      	adds	r3, r2, r3
 8001d66:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d6a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da08      	bge.n	8001d84 <a_bmp390_compensate_pressure+0x634>
 8001d72:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001d76:	1851      	adds	r1, r2, r1
 8001d78:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d7a:	f143 0300 	adc.w	r3, r3, #0
 8001d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	f04f 0100 	mov.w	r1, #0
 8001d8c:	0a50      	lsrs	r0, r2, #9
 8001d8e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8001d92:	1259      	asrs	r1, r3, #9
 8001d94:	e9c7 0178 	strd	r0, r1, [r7, #480]	@ 0x1e0
    partial_data6 = (int64_t)((uint64_t)data * (uint64_t)data);
 8001d98:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001da2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001da6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001db0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001db4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001db8:	462b      	mov	r3, r5
 8001dba:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001dbe:	4642      	mov	r2, r8
 8001dc0:	fb02 f203 	mul.w	r2, r2, r3
 8001dc4:	464b      	mov	r3, r9
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	4622      	mov	r2, r4
 8001dd0:	4641      	mov	r1, r8
 8001dd2:	fba2 1201 	umull	r1, r2, r2, r1
 8001dd6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8001dda:	460a      	mov	r2, r1
 8001ddc:	f8c7 2170 	str.w	r2, [r7, #368]	@ 0x170
 8001de0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001de4:	4413      	add	r3, r2
 8001de6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001dea:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 8001dee:	e9c7 3476 	strd	r3, r4, [r7, #472]	@ 0x1d8
    partial_data2 = ((int64_t)(handle->p11) * (int64_t)(partial_data6)) / 65536;
 8001df2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001df6:	f993 3247 	ldrsb.w	r3, [r3, #583]	@ 0x247
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	17da      	asrs	r2, r3, #31
 8001dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e06:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001e0a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8001e0e:	462a      	mov	r2, r5
 8001e10:	fb02 f203 	mul.w	r2, r2, r3
 8001e14:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8001e18:	4621      	mov	r1, r4
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	441a      	add	r2, r3
 8001e20:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001e24:	4621      	mov	r1, r4
 8001e26:	fba3 1301 	umull	r1, r3, r3, r1
 8001e2a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001e2e:	460b      	mov	r3, r1
 8001e30:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001e34:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001e38:	18d3      	adds	r3, r2, r3
 8001e3a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001e3e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	da08      	bge.n	8001e58 <a_bmp390_compensate_pressure+0x708>
 8001e46:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e4a:	1851      	adds	r1, r2, r1
 8001e4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001e4e:	f143 0300 	adc.w	r3, r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e58:	f04f 0000 	mov.w	r0, #0
 8001e5c:	f04f 0100 	mov.w	r1, #0
 8001e60:	0c10      	lsrs	r0, r2, #16
 8001e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e66:	1419      	asrs	r1, r3, #16
 8001e68:	e9c7 017e 	strd	r0, r1, [r7, #504]	@ 0x1f8
    partial_data3 = (partial_data2 * data) / 128;
 8001e6c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e76:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e7e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001e82:	462a      	mov	r2, r5
 8001e84:	fb02 f203 	mul.w	r2, r2, r3
 8001e88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	441a      	add	r2, r3
 8001e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e98:	4621      	mov	r1, r4
 8001e9a:	fba3 1301 	umull	r1, r3, r3, r1
 8001e9e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001ea8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001eac:	18d3      	adds	r3, r2, r3
 8001eae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001eb2:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	da07      	bge.n	8001eca <a_bmp390_compensate_pressure+0x77a>
 8001eba:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8001ebe:	6239      	str	r1, [r7, #32]
 8001ec0:	f143 0300 	adc.w	r3, r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eca:	f04f 0000 	mov.w	r0, #0
 8001ece:	f04f 0100 	mov.w	r1, #0
 8001ed2:	09d0      	lsrs	r0, r2, #7
 8001ed4:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001ed8:	11d9      	asrs	r1, r3, #7
 8001eda:	e9c7 017c 	strd	r0, r1, [r7, #496]	@ 0x1f0
    partial_data4 = (offset / 4) + partial_data1 + partial_data5 + partial_data3;
 8001ede:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da06      	bge.n	8001ef4 <a_bmp390_compensate_pressure+0x7a4>
 8001ee6:	1cd1      	adds	r1, r2, #3
 8001ee8:	61b9      	str	r1, [r7, #24]
 8001eea:	f143 0300 	adc.w	r3, r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ef4:	f04f 0000 	mov.w	r0, #0
 8001ef8:	f04f 0100 	mov.w	r1, #0
 8001efc:	0890      	lsrs	r0, r2, #2
 8001efe:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8001f02:	1099      	asrs	r1, r3, #2
 8001f04:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8001f08:	1884      	adds	r4, r0, r2
 8001f0a:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001f0e:	eb41 0303 	adc.w	r3, r1, r3
 8001f12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f16:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8001f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f1e:	4621      	mov	r1, r4
 8001f20:	1889      	adds	r1, r1, r2
 8001f22:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001f26:	4629      	mov	r1, r5
 8001f28:	eb43 0101 	adc.w	r1, r3, r1
 8001f2c:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001f30:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8001f34:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001f38:	4621      	mov	r1, r4
 8001f3a:	1851      	adds	r1, r2, r1
 8001f3c:	6139      	str	r1, [r7, #16]
 8001f3e:	4629      	mov	r1, r5
 8001f40:	eb43 0101 	adc.w	r1, r3, r1
 8001f44:	6179      	str	r1, [r7, #20]
 8001f46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f4a:	e9c7 347a 	strd	r3, r4, [r7, #488]	@ 0x1e8
    comp_press = (((uint64_t)partial_data4 * 25) / (uint64_t)1099511627776U);
 8001f4e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	1894      	adds	r4, r2, r2
 8001f58:	60bc      	str	r4, [r7, #8]
 8001f5a:	415b      	adcs	r3, r3
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f62:	1814      	adds	r4, r2, r0
 8001f64:	603c      	str	r4, [r7, #0]
 8001f66:	414b      	adcs	r3, r1
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001f76:	464c      	mov	r4, r9
 8001f78:	00e3      	lsls	r3, r4, #3
 8001f7a:	4644      	mov	r4, r8
 8001f7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f80:	4644      	mov	r4, r8
 8001f82:	00e2      	lsls	r2, r4, #3
 8001f84:	4614      	mov	r4, r2
 8001f86:	461d      	mov	r5, r3
 8001f88:	4623      	mov	r3, r4
 8001f8a:	181b      	adds	r3, r3, r0
 8001f8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f90:	462b      	mov	r3, r5
 8001f92:	eb41 0303 	adc.w	r3, r1, r3
 8001f96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001fa6:	0a0a      	lsrs	r2, r1, #8
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
    
    return comp_press;
 8001fae:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
}
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <bmp390_set_pressure>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <bmp390_set_pressure+0x16>
    {
        return 2;                                                                         /* return error */
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e037      	b.n	800204a <bmp390_set_pressure+0x86>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d001      	beq.n	8001fe8 <bmp390_set_pressure+0x24>
    {
        return 3;                                                                         /* return error */
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e030      	b.n	800204a <bmp390_set_pressure+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8001fe8:	f107 020e 	add.w	r2, r7, #14
 8001fec:	2301      	movs	r3, #1
 8001fee:	211b      	movs	r1, #27
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff f8b7 	bl	8001164 <a_bmp390_iic_spi_read>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <bmp390_set_pressure+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002006:	4813      	ldr	r0, [pc, #76]	@ (8002054 <bmp390_set_pressure+0x90>)
 8002008:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800200a:	2301      	movs	r3, #1
 800200c:	e01d      	b.n	800204a <bmp390_set_pressure+0x86>
    }
    prev &= ~(1 << 0);                                                                    /* clear config */
 800200e:	7bbb      	ldrb	r3, [r7, #14]
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 0;                                                                  /* set config */
 8002018:	7bba      	ldrb	r2, [r7, #14]
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	4313      	orrs	r3, r2
 800201e:	b2db      	uxtb	r3, r3
 8002020:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002022:	f107 020e 	add.w	r2, r7, #14
 8002026:	2301      	movs	r3, #1
 8002028:	211b      	movs	r1, #27
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff f8e5 	bl	80011fa <a_bmp390_iic_spi_write>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <bmp390_set_pressure+0x84>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002040:	4805      	ldr	r0, [pc, #20]	@ (8002058 <bmp390_set_pressure+0x94>)
 8002042:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <bmp390_set_pressure+0x86>
    }
    
    return 0;                                                                             /* success return 0 */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	0800ca0c 	.word	0x0800ca0c
 8002058:	0800ca34 	.word	0x0800ca34

0800205c <bmp390_set_temperature>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature(bmp390_handle_t *handle, bmp390_bool_t enable)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <bmp390_set_temperature+0x16>
    {
        return 2;                                                                         /* return error */
 800206e:	2302      	movs	r3, #2
 8002070:	e03c      	b.n	80020ec <bmp390_set_temperature+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <bmp390_set_temperature+0x24>
    {
        return 3;                                                                         /* return error */
 800207c:	2303      	movs	r3, #3
 800207e:	e035      	b.n	80020ec <bmp390_set_temperature+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002080:	f107 020e 	add.w	r2, r7, #14
 8002084:	2301      	movs	r3, #1
 8002086:	211b      	movs	r1, #27
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff f86b 	bl	8001164 <a_bmp390_iic_spi_read>
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <bmp390_set_temperature+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800209e:	4815      	ldr	r0, [pc, #84]	@ (80020f4 <bmp390_set_temperature+0x98>)
 80020a0:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e022      	b.n	80020ec <bmp390_set_temperature+0x90>
    }
    prev &= ~(1 << 1);                                                                    /* clear config */
 80020a6:	7bbb      	ldrb	r3, [r7, #14]
 80020a8:	f023 0302 	bic.w	r3, r3, #2
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                  /* set config */
 80020b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	b25a      	sxtb	r2, r3
 80020b8:	7bbb      	ldrb	r3, [r7, #14]
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b25b      	sxtb	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80020c4:	f107 020e 	add.w	r2, r7, #14
 80020c8:	2301      	movs	r3, #1
 80020ca:	211b      	movs	r1, #27
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff f894 	bl	80011fa <a_bmp390_iic_spi_write>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <bmp390_set_temperature+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80020e2:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <bmp390_set_temperature+0x9c>)
 80020e4:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <bmp390_set_temperature+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	0800ca0c 	.word	0x0800ca0c
 80020f8:	0800ca34 	.word	0x0800ca34

080020fc <bmp390_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_mode(bmp390_handle_t *handle, bmp390_mode_t mode)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <bmp390_set_mode+0x16>
    {
        return 2;                                                                         /* return error */
 800210e:	2302      	movs	r3, #2
 8002110:	e03c      	b.n	800218c <bmp390_set_mode+0x90>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002118:	2b01      	cmp	r3, #1
 800211a:	d001      	beq.n	8002120 <bmp390_set_mode+0x24>
    {
        return 3;                                                                         /* return error */
 800211c:	2303      	movs	r3, #3
 800211e:	e035      	b.n	800218c <bmp390_set_mode+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002120:	f107 020e 	add.w	r2, r7, #14
 8002124:	2301      	movs	r3, #1
 8002126:	211b      	movs	r1, #27
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff f81b 	bl	8001164 <a_bmp390_iic_spi_read>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <bmp390_set_mode+0x4a>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800213e:	4815      	ldr	r0, [pc, #84]	@ (8002194 <bmp390_set_mode+0x98>)
 8002140:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8002142:	2301      	movs	r3, #1
 8002144:	e022      	b.n	800218c <bmp390_set_mode+0x90>
    }
    prev &= ~(3 << 4);                                                                    /* clear config */
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800214c:	b2db      	uxtb	r3, r3
 800214e:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 4;                                                                    /* set config */
 8002150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	b25a      	sxtb	r2, r3
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	b25b      	sxtb	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b25b      	sxtb	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002164:	f107 020e 	add.w	r2, r7, #14
 8002168:	2301      	movs	r3, #1
 800216a:	211b      	movs	r1, #27
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff f844 	bl	80011fa <a_bmp390_iic_spi_write>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <bmp390_set_mode+0x8e>
    {
        handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002182:	4805      	ldr	r0, [pc, #20]	@ (8002198 <bmp390_set_mode+0x9c>)
 8002184:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <bmp390_set_mode+0x90>
    }
    
    return 0;                                                                             /* success return 0 */
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	0800ca0c 	.word	0x0800ca0c
 8002198:	0800ca34 	.word	0x0800ca34

0800219c <bmp390_set_pressure_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_pressure_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <bmp390_set_pressure_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 80021ae:	2302      	movs	r3, #2
 80021b0:	e037      	b.n	8002222 <bmp390_set_pressure_oversampling+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <bmp390_set_pressure_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 80021bc:	2303      	movs	r3, #3
 80021be:	e030      	b.n	8002222 <bmp390_set_pressure_oversampling+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 80021c0:	f107 020e 	add.w	r2, r7, #14
 80021c4:	2301      	movs	r3, #1
 80021c6:	211c      	movs	r1, #28
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7fe ffcb 	bl	8001164 <a_bmp390_iic_spi_read>
 80021ce:	4603      	mov	r3, r0
 80021d0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <bmp390_set_pressure_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80021de:	4813      	ldr	r0, [pc, #76]	@ (800222c <bmp390_set_pressure_oversampling+0x90>)
 80021e0:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80021e2:	2301      	movs	r3, #1
 80021e4:	e01d      	b.n	8002222 <bmp390_set_pressure_oversampling+0x86>
    }
    prev &= ~(7 << 0);                                                               /* clear config */
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	f023 0307 	bic.w	r3, r3, #7
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 0;                                                       /* set config */
 80021f0:	7bba      	ldrb	r2, [r7, #14]
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 80021fa:	f107 020e 	add.w	r2, r7, #14
 80021fe:	2301      	movs	r3, #1
 8002200:	211c      	movs	r1, #28
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fff9 	bl	80011fa <a_bmp390_iic_spi_write>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <bmp390_set_pressure_oversampling+0x84>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002218:	4805      	ldr	r0, [pc, #20]	@ (8002230 <bmp390_set_pressure_oversampling+0x94>)
 800221a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <bmp390_set_pressure_oversampling+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	0800ca5c 	.word	0x0800ca5c
 8002230:	0800ca80 	.word	0x0800ca80

08002234 <bmp390_set_temperature_oversampling>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_temperature_oversampling(bmp390_handle_t *handle, bmp390_oversampling_t oversampling)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <bmp390_set_temperature_oversampling+0x16>
    {
        return 2;                                                                    /* return error */
 8002246:	2302      	movs	r3, #2
 8002248:	e03c      	b.n	80022c4 <bmp390_set_temperature_oversampling+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002250:	2b01      	cmp	r3, #1
 8002252:	d001      	beq.n	8002258 <bmp390_set_temperature_oversampling+0x24>
    {
        return 3;                                                                    /* return error */
 8002254:	2303      	movs	r3, #3
 8002256:	e035      	b.n	80022c4 <bmp390_set_temperature_oversampling+0x90>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);        /* read config */
 8002258:	f107 020e 	add.w	r2, r7, #14
 800225c:	2301      	movs	r3, #1
 800225e:	211c      	movs	r1, #28
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7fe ff7f 	bl	8001164 <a_bmp390_iic_spi_read>
 8002266:	4603      	mov	r3, r0
 8002268:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <bmp390_set_temperature_oversampling+0x4a>
    {
        handle->debug_print("bmp390: get osr register failed.\n");                   /* get osr register failed */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002276:	4815      	ldr	r0, [pc, #84]	@ (80022cc <bmp390_set_temperature_oversampling+0x98>)
 8002278:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800227a:	2301      	movs	r3, #1
 800227c:	e022      	b.n	80022c4 <bmp390_set_temperature_oversampling+0x90>
    }
    prev &= ~(7 << 3);                                                               /* clear config */
 800227e:	7bbb      	ldrb	r3, [r7, #14]
 8002280:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002284:	b2db      	uxtb	r3, r3
 8002286:	73bb      	strb	r3, [r7, #14]
    prev |= oversampling << 3;                                                       /* set config */
 8002288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	b25a      	sxtb	r2, r3
 8002290:	7bbb      	ldrb	r3, [r7, #14]
 8002292:	b25b      	sxtb	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b25b      	sxtb	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_OSR, (uint8_t *)&prev, 1);       /* write config */
 800229c:	f107 020e 	add.w	r2, r7, #14
 80022a0:	2301      	movs	r3, #1
 80022a2:	211c      	movs	r1, #28
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7fe ffa8 	bl	80011fa <a_bmp390_iic_spi_write>
 80022aa:	4603      	mov	r3, r0
 80022ac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <bmp390_set_temperature_oversampling+0x8e>
    {
        handle->debug_print("bmp390: set osr register failed.\n");                   /* set osr register failed */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80022ba:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <bmp390_set_temperature_oversampling+0x9c>)
 80022bc:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <bmp390_set_temperature_oversampling+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	0800ca5c 	.word	0x0800ca5c
 80022d0:	0800ca80 	.word	0x0800ca80

080022d4 <bmp390_set_odr>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t bmp390_set_odr(bmp390_handle_t *handle, bmp390_odr_t odr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <bmp390_set_odr+0x16>
    {
        return 2;                                                                    /* return error */
 80022e6:	2302      	movs	r3, #2
 80022e8:	e037      	b.n	800235a <bmp390_set_odr+0x86>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d001      	beq.n	80022f8 <bmp390_set_odr+0x24>
    {
        return 3;                                                                    /* return error */
 80022f4:	2303      	movs	r3, #3
 80022f6:	e030      	b.n	800235a <bmp390_set_odr+0x86>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);        /* read config */
 80022f8:	f107 020e 	add.w	r2, r7, #14
 80022fc:	2301      	movs	r3, #1
 80022fe:	211d      	movs	r1, #29
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7fe ff2f 	bl	8001164 <a_bmp390_iic_spi_read>
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <bmp390_set_odr+0x4a>
    {
        handle->debug_print("bmp390: get odr register failed.\n");                   /* get odr register failed */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002316:	4813      	ldr	r0, [pc, #76]	@ (8002364 <bmp390_set_odr+0x90>)
 8002318:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800231a:	2301      	movs	r3, #1
 800231c:	e01d      	b.n	800235a <bmp390_set_odr+0x86>
    }
    
    prev &= ~(31 << 0);                                                              /* clear config */
 800231e:	7bbb      	ldrb	r3, [r7, #14]
 8002320:	f023 031f 	bic.w	r3, r3, #31
 8002324:	b2db      	uxtb	r3, r3
 8002326:	73bb      	strb	r3, [r7, #14]
    prev |= odr << 0;                                                                /* set config */
 8002328:	7bba      	ldrb	r2, [r7, #14]
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	4313      	orrs	r3, r2
 800232e:	b2db      	uxtb	r3, r3
 8002330:	73bb      	strb	r3, [r7, #14]
    res = a_bmp390_iic_spi_write(handle, BMP390_REG_ODR, (uint8_t *)&prev, 1);       /* write config */
 8002332:	f107 020e 	add.w	r2, r7, #14
 8002336:	2301      	movs	r3, #1
 8002338:	211d      	movs	r1, #29
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe ff5d 	bl	80011fa <a_bmp390_iic_spi_write>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <bmp390_set_odr+0x84>
    {
        handle->debug_print("bmp390: set odr register failed.\n");                   /* set odr register failed */
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002350:	4805      	ldr	r0, [pc, #20]	@ (8002368 <bmp390_set_odr+0x94>)
 8002352:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <bmp390_set_odr+0x86>
    }
    
    return 0;                                                                        /* success return 0 */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	0800caa4 	.word	0x0800caa4
 8002368:	0800cac8 	.word	0x0800cac8

0800236c <a_bmp390_close>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
static uint8_t a_bmp390_close(bmp390_handle_t *handle)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                        /* if iic interface */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <a_bmp390_close+0x32>
    {
        if (handle->iic_deinit() != 0)                                  /* close iic */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8002384:	4798      	blx	r3
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <a_bmp390_close+0x2e>
        {
            handle->debug_print("bmp390: iic deinit failed.\n");        /* iic deinit failed */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002392:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <a_bmp390_close+0x58>)
 8002394:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 8002396:	2301      	movs	r3, #1
 8002398:	e010      	b.n	80023bc <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 800239a:	2300      	movs	r3, #0
 800239c:	e00e      	b.n	80023bc <a_bmp390_close+0x50>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                                  /* close spi */
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80023a4:	4798      	blx	r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <a_bmp390_close+0x4e>
        {
            handle->debug_print("bmp390: spi deinit failed.\n");        /* spi deinit failed */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80023b2:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <a_bmp390_close+0x5c>)
 80023b4:	4798      	blx	r3
       
            return 1;                                                   /* return error */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <a_bmp390_close+0x50>
        }
        else
        {
            return 0;                                                   /* success return 0 */
 80023ba:	2300      	movs	r3, #0
        }
    }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	0800cb60 	.word	0x0800cb60
 80023c8:	0800cb7c 	.word	0x0800cb7c

080023cc <bmp390_init>:
 *            - 5 reset failed
 *            - 6 get calibration failed
 * @note      none
 */
uint8_t bmp390_init(bmp390_handle_t *handle)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    uint8_t id;
    uint8_t reg;
  
    if (handle == NULL)                                                              /* check handle */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <bmp390_init+0x12>
    {
        return 2;                                                                    /* return error */
 80023da:	2302      	movs	r3, #2
 80023dc:	e107      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->debug_print == NULL)                                                 /* check debug_print */
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <bmp390_init+0x20>
    {
        return 3;                                                                    /* return error */
 80023e8:	2303      	movs	r3, #3
 80023ea:	e100      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->iic_init == NULL)                                                    /* check iic_init */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <bmp390_init+0x38>
    {
        handle->debug_print("bmp390: iic_init is null.\n");                          /* iic_init is null */
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80023fc:	487e      	ldr	r0, [pc, #504]	@ (80025f8 <bmp390_init+0x22c>)
 80023fe:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002400:	2303      	movs	r3, #3
 8002402:	e0f4      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->iic_deinit == NULL)                                                  /* check iic_init */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <bmp390_init+0x50>
    {
        handle->debug_print("bmp390: iic_deinit is null.\n");                        /* iic_deinit is null */
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002414:	4879      	ldr	r0, [pc, #484]	@ (80025fc <bmp390_init+0x230>)
 8002416:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002418:	2303      	movs	r3, #3
 800241a:	e0e8      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->iic_read == NULL)                                                    /* check iic_read */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <bmp390_init+0x68>
    {
        handle->debug_print("bmp390: iic_read is null.\n");                          /* iic_read is null */
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800242c:	4874      	ldr	r0, [pc, #464]	@ (8002600 <bmp390_init+0x234>)
 800242e:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002430:	2303      	movs	r3, #3
 8002432:	e0dc      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->iic_write == NULL)                                                   /* check iic_write */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <bmp390_init+0x80>
    {
        handle->debug_print("bmp390: iic_write is null.\n");                         /* iic_write is null */
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002444:	486f      	ldr	r0, [pc, #444]	@ (8002604 <bmp390_init+0x238>)
 8002446:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002448:	2303      	movs	r3, #3
 800244a:	e0d0      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->spi_init == NULL)                                                    /* check spi_init */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <bmp390_init+0x98>
    {
        handle->debug_print("bmp390: spi_init is null.\n");                          /* spi_init is null */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800245c:	486a      	ldr	r0, [pc, #424]	@ (8002608 <bmp390_init+0x23c>)
 800245e:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002460:	2303      	movs	r3, #3
 8002462:	e0c4      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->spi_deinit == NULL)                                                  /* check spi_deinit */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <bmp390_init+0xb0>
    {
        handle->debug_print("bmp390: spi_deinit is null.\n");                        /* spi_deinit is null */
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002474:	4865      	ldr	r0, [pc, #404]	@ (800260c <bmp390_init+0x240>)
 8002476:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002478:	2303      	movs	r3, #3
 800247a:	e0b8      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->spi_read == NULL)                                                    /* check spi_read */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <bmp390_init+0xc8>
    {
        handle->debug_print("bmp390: spi_read is null.\n");                          /* spi_read is null */
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800248c:	4860      	ldr	r0, [pc, #384]	@ (8002610 <bmp390_init+0x244>)
 800248e:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 8002490:	2303      	movs	r3, #3
 8002492:	e0ac      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->spi_write == NULL)                                                   /* check spi_write */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <bmp390_init+0xe0>
    {
        handle->debug_print("bmp390: spi_write is null.\n");                         /* spi_write is null */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80024a4:	485b      	ldr	r0, [pc, #364]	@ (8002614 <bmp390_init+0x248>)
 80024a6:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 80024a8:	2303      	movs	r3, #3
 80024aa:	e0a0      	b.n	80025ee <bmp390_init+0x222>
    }
    if (handle->delay_ms == NULL)                                                    /* check delay_ms */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <bmp390_init+0xf8>
    {
        handle->debug_print("bmp390: delay_ms is null.\n");                          /* delay_ms is null */
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80024bc:	4856      	ldr	r0, [pc, #344]	@ (8002618 <bmp390_init+0x24c>)
 80024be:	4798      	blx	r3
       
        return 3;                                                                    /* return error */
 80024c0:	2303      	movs	r3, #3
 80024c2:	e094      	b.n	80025ee <bmp390_init+0x222>
    }
    
    if (handle->iic_spi == BMP390_INTERFACE_IIC)                                     /* if iic interface */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <bmp390_init+0x11e>
    {
        if (handle->iic_init() != 0)                                                 /* initialize iic bus */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80024d4:	4798      	blx	r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d014      	beq.n	8002506 <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: iic init failed.\n");                       /* iic init failed */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80024e2:	484e      	ldr	r0, [pc, #312]	@ (800261c <bmp390_init+0x250>)
 80024e4:	4798      	blx	r3
            
            return 1;                                                                /* return error */
 80024e6:	2301      	movs	r3, #1
 80024e8:	e081      	b.n	80025ee <bmp390_init+0x222>
        }
    }
    else
    {
        if (handle->spi_init() != 0)                                                 /* initialize spi bus */
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80024f0:	4798      	blx	r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <bmp390_init+0x13a>
        {
            handle->debug_print("bmp390: spi init failed.\n");                       /* spi init failed */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80024fe:	4848      	ldr	r0, [pc, #288]	@ (8002620 <bmp390_init+0x254>)
 8002500:	4798      	blx	r3
           
            return 1;                                                                /* return error */
 8002502:	2301      	movs	r3, #1
 8002504:	e073      	b.n	80025ee <bmp390_init+0x222>
        }
    }
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_CHIP_ID, (uint8_t *)&id, 1) != 0)   /* read chip id */
 8002506:	f107 020f 	add.w	r2, r7, #15
 800250a:	2301      	movs	r3, #1
 800250c:	2100      	movs	r1, #0
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fe28 	bl	8001164 <a_bmp390_iic_spi_read>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <bmp390_init+0x162>
    {
        handle->debug_print("bmp390: read chip id failed.\n");                       /* read chip id failed */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002520:	4840      	ldr	r0, [pc, #256]	@ (8002624 <bmp390_init+0x258>)
 8002522:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff21 	bl	800236c <a_bmp390_close>
        
        return 4;                                                                    /* return error */
 800252a:	2304      	movs	r3, #4
 800252c:	e05f      	b.n	80025ee <bmp390_init+0x222>
    }
    if (id != 0x60)                                                                  /* check chip id */
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b60      	cmp	r3, #96	@ 0x60
 8002532:	d009      	beq.n	8002548 <bmp390_init+0x17c>
    {
        handle->debug_print("bmp390: id is invalid.\n");                             /* id is invalid */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800253a:	483b      	ldr	r0, [pc, #236]	@ (8002628 <bmp390_init+0x25c>)
 800253c:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff14 	bl	800236c <a_bmp390_close>
        
        return 4;         
 8002544:	2304      	movs	r3, #4
 8002546:	e052      	b.n	80025ee <bmp390_init+0x222>
    }                                                                                /* return error */
    reg = 0xB6;                                                                      /* set command */
 8002548:	23b6      	movs	r3, #182	@ 0xb6
 800254a:	73bb      	strb	r3, [r7, #14]
    if (a_bmp390_iic_spi_write(handle, BMP390_REG_CMD, (uint8_t *)&reg, 1) != 0)     /* write command */
 800254c:	f107 020e 	add.w	r2, r7, #14
 8002550:	2301      	movs	r3, #1
 8002552:	217e      	movs	r1, #126	@ 0x7e
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7fe fe50 	bl	80011fa <a_bmp390_iic_spi_write>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <bmp390_init+0x1a8>
    {
        handle->debug_print("bmp390: soft rest failed.\n");                          /* soft rest failed */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002566:	4831      	ldr	r0, [pc, #196]	@ (800262c <bmp390_init+0x260>)
 8002568:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fefe 	bl	800236c <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 8002570:	2305      	movs	r3, #5
 8002572:	e03c      	b.n	80025ee <bmp390_init+0x222>
    }
    handle->delay_ms(10);                                                            /* delay 10 ms */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800257a:	200a      	movs	r0, #10
 800257c:	4798      	blx	r3
    if (a_bmp390_iic_spi_read(handle, BMP390_REG_ERR_REG, (uint8_t *)&reg, 1) != 0)  /* read reg */
 800257e:	f107 020e 	add.w	r2, r7, #14
 8002582:	2301      	movs	r3, #1
 8002584:	2102      	movs	r1, #2
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fdec 	bl	8001164 <a_bmp390_iic_spi_read>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <bmp390_init+0x1da>
    {
        handle->debug_print("bmp390: get err reg failed.\n");                        /* return error */
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002598:	4825      	ldr	r0, [pc, #148]	@ (8002630 <bmp390_init+0x264>)
 800259a:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff fee5 	bl	800236c <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 80025a2:	2305      	movs	r3, #5
 80025a4:	e023      	b.n	80025ee <bmp390_init+0x222>
    }
    if ((reg & 0x07) != 0)                                                           /* check running status */
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <bmp390_init+0x1f8>
    {
        handle->debug_print("bmp390: find running error.\n");                        /* find running error */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80025b6:	481f      	ldr	r0, [pc, #124]	@ (8002634 <bmp390_init+0x268>)
 80025b8:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fed6 	bl	800236c <a_bmp390_close>
        
        return 5;                                                                    /* return error */
 80025c0:	2305      	movs	r3, #5
 80025c2:	e014      	b.n	80025ee <bmp390_init+0x222>
    }
    if (a_bmp390_get_calibration_data(handle) != 0)                                  /* get calibration data */
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fe fe6d 	bl	80012a4 <a_bmp390_get_calibration_data>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d009      	beq.n	80025e4 <bmp390_init+0x218>
    {
        handle->debug_print("bmp390: get calibration data error.\n");                /* get calibration data error */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80025d6:	4818      	ldr	r0, [pc, #96]	@ (8002638 <bmp390_init+0x26c>)
 80025d8:	4798      	blx	r3
        (void)a_bmp390_close(handle);                                                /* close bmp390 */
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fec6 	bl	800236c <a_bmp390_close>
        
        return 6;                                                                    /* return error */
 80025e0:	2306      	movs	r3, #6
 80025e2:	e004      	b.n	80025ee <bmp390_init+0x222>
    }
    handle->inited = 1;                                                              /* flag finish initialization */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
     
    return 0;                                                                        /* success return 0 */
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	0800cb98 	.word	0x0800cb98
 80025fc:	0800cbb4 	.word	0x0800cbb4
 8002600:	0800cbd4 	.word	0x0800cbd4
 8002604:	0800cbf0 	.word	0x0800cbf0
 8002608:	0800cc0c 	.word	0x0800cc0c
 800260c:	0800cc28 	.word	0x0800cc28
 8002610:	0800cc48 	.word	0x0800cc48
 8002614:	0800cc64 	.word	0x0800cc64
 8002618:	0800cc80 	.word	0x0800cc80
 800261c:	0800cc9c 	.word	0x0800cc9c
 8002620:	0800ccb8 	.word	0x0800ccb8
 8002624:	0800ccd4 	.word	0x0800ccd4
 8002628:	0800ccf4 	.word	0x0800ccf4
 800262c:	0800cd0c 	.word	0x0800cd0c
 8002630:	0800cd28 	.word	0x0800cd28
 8002634:	0800cd48 	.word	0x0800cd48
 8002638:	0800cd68 	.word	0x0800cd68

0800263c <bmp390_read_temperature_pressure>:
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t bmp390_read_temperature_pressure(bmp390_handle_t *handle, uint32_t *temperature_raw, float *temperature_c, 
                                         uint32_t *pressure_raw, float *pressure_pa)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b090      	sub	sp, #64	@ 0x40
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t buf[3];
    
    if (handle == NULL)                                                                       /* check handle */
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <bmp390_read_temperature_pressure+0x18>
    {
        return 2;                                                                             /* return error */
 8002650:	2302      	movs	r3, #2
 8002652:	e1fa      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
    }
    if (handle->inited != 1)                                                                  /* check handle initialization */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <bmp390_read_temperature_pressure+0x26>
    {
        return 3;                                                                             /* return error */
 800265e:	2303      	movs	r3, #3
 8002660:	e1f3      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
    }
    
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_FIFO_CONFIG_1, (uint8_t *)&prev, 1);       /* read config */
 8002662:	f107 0217 	add.w	r2, r7, #23
 8002666:	2301      	movs	r3, #1
 8002668:	2117      	movs	r1, #23
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7fe fd7a 	bl	8001164 <a_bmp390_iic_spi_read>
 8002670:	4603      	mov	r3, r0
 8002672:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 8002676:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <bmp390_read_temperature_pressure+0x50>
    {
        handle->debug_print("bmp390: get fifo config 1 register failed.\n");                  /* get fifo config 1 register failed */
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002684:	48b1      	ldr	r0, [pc, #708]	@ (800294c <bmp390_read_temperature_pressure+0x310>)
 8002686:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8002688:	2301      	movs	r3, #1
 800268a:	e1de      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
    }
    if ((prev & 0x01) != 0)                                                                   /* check fifo mode */
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <bmp390_read_temperature_pressure+0x68>
    {
        handle->debug_print("bmp390: fifo mode can't use this function.\n");                  /* fifo mode can't use this function */
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800269c:	48ac      	ldr	r0, [pc, #688]	@ (8002950 <bmp390_read_temperature_pressure+0x314>)
 800269e:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 80026a0:	2301      	movs	r3, #1
 80026a2:	e1d2      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
    }
    res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);            /* read config */
 80026a4:	f107 0217 	add.w	r2, r7, #23
 80026a8:	2301      	movs	r3, #1
 80026aa:	211b      	movs	r1, #27
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7fe fd59 	bl	8001164 <a_bmp390_iic_spi_read>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (res != 0)                                                                             /* check result */
 80026b8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d006      	beq.n	80026ce <bmp390_read_temperature_pressure+0x92>
    {
        handle->debug_print("bmp390: get pwr ctrl register failed.\n");                       /* get pwr ctrl register failed */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80026c6:	48a3      	ldr	r0, [pc, #652]	@ (8002954 <bmp390_read_temperature_pressure+0x318>)
 80026c8:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 80026ca:	2301      	movs	r3, #1
 80026cc:	e1bd      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
    }
    if (((prev >> 4) & 0x03) == 0x03)                                                         /* normal mode */
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b03      	cmp	r3, #3
 80026da:	f040 80a0 	bne.w	800281e <bmp390_read_temperature_pressure+0x1e2>
    {
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);          /* read config */
 80026de:	f107 0217 	add.w	r2, r7, #23
 80026e2:	2301      	movs	r3, #1
 80026e4:	2103      	movs	r1, #3
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7fe fd3c 	bl	8001164 <a_bmp390_iic_spi_read>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 80026f2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <bmp390_read_temperature_pressure+0xcc>
        {
            handle->debug_print("bmp390: get status register failed.\n");                     /* get status register failed */
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002700:	4895      	ldr	r0, [pc, #596]	@ (8002958 <bmp390_read_temperature_pressure+0x31c>)
 8002702:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8002704:	2301      	movs	r3, #1
 8002706:	e1a0      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
        }
        if ((prev & (1 << 6)) != 0)                                                           /* data is ready */
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d03d      	beq.n	800278e <bmp390_read_temperature_pressure+0x152>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);        /* read raw data */
 8002712:	f107 0214 	add.w	r2, r7, #20
 8002716:	2303      	movs	r3, #3
 8002718:	2107      	movs	r1, #7
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7fe fd22 	bl	8001164 <a_bmp390_iic_spi_read>
 8002720:	4603      	mov	r3, r0
 8002722:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 8002726:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <bmp390_read_temperature_pressure+0x100>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002734:	4889      	ldr	r0, [pc, #548]	@ (800295c <bmp390_read_temperature_pressure+0x320>)
 8002736:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002738:	2301      	movs	r3, #1
 800273a:	e186      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
            }
            *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];       /* get data */
 800273c:	7dbb      	ldrb	r3, [r7, #22]
 800273e:	041a      	lsls	r2, r3, #16
 8002740:	7d7b      	ldrb	r3, [r7, #21]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	4313      	orrs	r3, r2
 8002746:	7d3a      	ldrb	r2, [r7, #20]
 8002748:	431a      	orrs	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_temperature(handle, *temperature_raw);               /* compensate temperature */
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4619      	mov	r1, r3
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f7fe ff13 	bl	8001580 <a_bmp390_compensate_temperature>
 800275a:	e9c7 0108 	strd	r0, r1, [r7, #32]
            *temperature_c = (float)((double)output / 100.0);                                 /* get converted temperature */
 800275e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002762:	f7fd ff3b 	bl	80005dc <__aeabi_l2d>
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	4b7d      	ldr	r3, [pc, #500]	@ (8002960 <bmp390_read_temperature_pressure+0x324>)
 800276c:	f7fe f88e 	bl	800088c <__aeabi_ddiv>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f7fe fa36 	bl	8000be8 <__aeabi_d2f>
 800277c:	4602      	mov	r2, r0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	601a      	str	r2, [r3, #0]
        {
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
           
            return 1;                                                                         /* return error */
        }
        if ((prev & (1 << 5)) != 0)                                                           /* data is ready */
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d041      	beq.n	8002810 <bmp390_read_temperature_pressure+0x1d4>
 800278c:	e006      	b.n	800279c <bmp390_read_temperature_pressure+0x160>
            handle->debug_print("bmp390: temperature data is not ready.\n");                  /* temperature data is not ready */
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002794:	4873      	ldr	r0, [pc, #460]	@ (8002964 <bmp390_read_temperature_pressure+0x328>)
 8002796:	4798      	blx	r3
            return 1;                                                                         /* return error */
 8002798:	2301      	movs	r3, #1
 800279a:	e156      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
        {
            int64_t output;
            
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);        /* read data */
 800279c:	f107 0214 	add.w	r2, r7, #20
 80027a0:	2303      	movs	r3, #3
 80027a2:	2104      	movs	r1, #4
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f7fe fcdd 	bl	8001164 <a_bmp390_iic_spi_read>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 80027b0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <bmp390_read_temperature_pressure+0x18a>
            {
                handle->debug_print("bmp390: get data register failed.\n");                   /* get data register failed */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80027be:	4867      	ldr	r0, [pc, #412]	@ (800295c <bmp390_read_temperature_pressure+0x320>)
 80027c0:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 80027c2:	2301      	movs	r3, #1
 80027c4:	e141      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
            }
            *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];          /* get data */
 80027c6:	7dbb      	ldrb	r3, [r7, #22]
 80027c8:	041a      	lsls	r2, r3, #16
 80027ca:	7d7b      	ldrb	r3, [r7, #21]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	4313      	orrs	r3, r2
 80027d0:	7d3a      	ldrb	r2, [r7, #20]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	601a      	str	r2, [r3, #0]
            output = a_bmp390_compensate_pressure(handle, *pressure_raw);                     /* compensate pressure */
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7fe ffb6 	bl	8001750 <a_bmp390_compensate_pressure>
 80027e4:	e9c7 0106 	strd	r0, r1, [r7, #24]
            *pressure_pa = (float)((double)output / 100.0);                                   /* get converted pressure */
 80027e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ec:	f7fd fef6 	bl	80005dc <__aeabi_l2d>
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002960 <bmp390_read_temperature_pressure+0x324>)
 80027f6:	f7fe f849 	bl	800088c <__aeabi_ddiv>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f7fe f9f1 	bl	8000be8 <__aeabi_d2f>
 8002806:	4602      	mov	r2, r0
 8002808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800280a:	601a      	str	r2, [r3, #0]
            
            return 0;                                                                         /* success return 0 */
 800280c:	2300      	movs	r3, #0
 800280e:	e11c      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
        }
        else
        {
            handle->debug_print("bmp390: pressure data is not ready.\n");                     /* pressure data is not ready */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002816:	4854      	ldr	r0, [pc, #336]	@ (8002968 <bmp390_read_temperature_pressure+0x32c>)
 8002818:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 800281a:	2301      	movs	r3, #1
 800281c:	e115      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
        }
    }
    else if (((prev >> 4) & 0x03) == 0x00)                                                    /* force mode */
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 8108 	bne.w	8002a3e <bmp390_read_temperature_pressure+0x402>
    {
        uint16_t cnt = 5000;
 800282e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002832:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        
        res = a_bmp390_iic_spi_read(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8002834:	f107 0217 	add.w	r2, r7, #23
 8002838:	2301      	movs	r3, #1
 800283a:	211b      	movs	r1, #27
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7fe fc91 	bl	8001164 <a_bmp390_iic_spi_read>
 8002842:	4603      	mov	r3, r0
 8002844:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 8002848:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <bmp390_read_temperature_pressure+0x222>
        {
            handle->debug_print("bmp390: get pwr ctrl register failed.\n");                   /* get pwr ctrl register failed */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002856:	483f      	ldr	r0, [pc, #252]	@ (8002954 <bmp390_read_temperature_pressure+0x318>)
 8002858:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 800285a:	2301      	movs	r3, #1
 800285c:	e0f5      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
        }
        prev &= ~(0x03 << 4);                                                                 /* clear 4-5 bits */
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002864:	b2db      	uxtb	r3, r3
 8002866:	75fb      	strb	r3, [r7, #23]
        prev |= 0x01 << 4;                                                                    /* set bit 4 */
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	f043 0310 	orr.w	r3, r3, #16
 800286e:	b2db      	uxtb	r3, r3
 8002870:	75fb      	strb	r3, [r7, #23]
        res = a_bmp390_iic_spi_write(handle, BMP390_REG_PWR_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8002872:	f107 0217 	add.w	r2, r7, #23
 8002876:	2301      	movs	r3, #1
 8002878:	211b      	movs	r1, #27
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7fe fcbd 	bl	80011fa <a_bmp390_iic_spi_write>
 8002880:	4603      	mov	r3, r0
 8002882:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (res != 0)                                                                         /* check result */
 8002886:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <bmp390_read_temperature_pressure+0x260>
        {
            handle->debug_print("bmp390: set pwr ctrl register failed.\n");                   /* set pwr ctrl register failed */
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002894:	4835      	ldr	r0, [pc, #212]	@ (800296c <bmp390_read_temperature_pressure+0x330>)
 8002896:	4798      	blx	r3
           
            return 1;                                                                         /* return error */
 8002898:	2301      	movs	r3, #1
 800289a:	e0d6      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
        }
        
        while (1)                                                                             /* loop */
        {
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 800289c:	f107 0217 	add.w	r2, r7, #23
 80028a0:	2301      	movs	r3, #1
 80028a2:	2103      	movs	r1, #3
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7fe fc5d 	bl	8001164 <a_bmp390_iic_spi_read>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            if (res != 0)                                                                     /* check result */
 80028b0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <bmp390_read_temperature_pressure+0x28a>
            {
                handle->debug_print("bmp390: get status register failed.\n");                 /* get status register failed */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80028be:	4826      	ldr	r0, [pc, #152]	@ (8002958 <bmp390_read_temperature_pressure+0x31c>)
 80028c0:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0c1      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
            }
            if ((prev & (1 << 6)) != 0)                                                       /* data is ready */
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d04f      	beq.n	8002970 <bmp390_read_temperature_pressure+0x334>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_3, (uint8_t *)buf, 3);    /* read raw data */
 80028d0:	f107 0214 	add.w	r2, r7, #20
 80028d4:	2303      	movs	r3, #3
 80028d6:	2107      	movs	r1, #7
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f7fe fc43 	bl	8001164 <a_bmp390_iic_spi_read>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 80028e4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <bmp390_read_temperature_pressure+0x2be>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80028f2:	481a      	ldr	r0, [pc, #104]	@ (800295c <bmp390_read_temperature_pressure+0x320>)
 80028f4:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0a7      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
                }
                *temperature_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];   /* get data */
 80028fa:	7dbb      	ldrb	r3, [r7, #22]
 80028fc:	041a      	lsls	r2, r3, #16
 80028fe:	7d7b      	ldrb	r3, [r7, #21]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	4313      	orrs	r3, r2
 8002904:	7d3a      	ldrb	r2, [r7, #20]
 8002906:	431a      	orrs	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_temperature(handle, *temperature_raw);           /* compensate temperature */
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7fe fe34 	bl	8001580 <a_bmp390_compensate_temperature>
 8002918:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                *temperature_c = (float)((double)output / 100.0);                             /* get converted temperature */
 800291c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002920:	f7fd fe5c 	bl	80005dc <__aeabi_l2d>
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <bmp390_read_temperature_pressure+0x324>)
 800292a:	f7fd ffaf 	bl	800088c <__aeabi_ddiv>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f7fe f957 	bl	8000be8 <__aeabi_d2f>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	601a      	str	r2, [r3, #0]
                
                break;                                                                        /* break */
 8002940:	bf00      	nop
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
               
                return 1;                                                                     /* return error */
            }
        }
        cnt = 5000;                                                                           /* set cnt */
 8002942:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002946:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002948:	e026      	b.n	8002998 <bmp390_read_temperature_pressure+0x35c>
 800294a:	bf00      	nop
 800294c:	0800c89c 	.word	0x0800c89c
 8002950:	0800cd90 	.word	0x0800cd90
 8002954:	0800ca0c 	.word	0x0800ca0c
 8002958:	0800c740 	.word	0x0800c740
 800295c:	0800cdbc 	.word	0x0800cdbc
 8002960:	40590000 	.word	0x40590000
 8002964:	0800cde0 	.word	0x0800cde0
 8002968:	0800ce24 	.word	0x0800ce24
 800296c:	0800ca34 	.word	0x0800ca34
                if (cnt != 0)                                                                 /* check cnt */
 8002970:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <bmp390_read_temperature_pressure+0x34c>
                    cnt--;                                                                    /* cnt-- */
 8002976:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002978:	3b01      	subs	r3, #1
 800297a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8002982:	2001      	movs	r0, #1
 8002984:	4798      	blx	r3
                    continue;                                                                 /* continue */
 8002986:	e006      	b.n	8002996 <bmp390_read_temperature_pressure+0x35a>
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800298e:	4831      	ldr	r0, [pc, #196]	@ (8002a54 <bmp390_read_temperature_pressure+0x418>)
 8002990:	4798      	blx	r3
                return 1;                                                                     /* return error */
 8002992:	2301      	movs	r3, #1
 8002994:	e059      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
            res = a_bmp390_iic_spi_read(handle, BMP390_REG_STATUS, (uint8_t *)&prev, 1);      /* read config */
 8002996:	e781      	b.n	800289c <bmp390_read_temperature_pressure+0x260>
        
        while (1)                                                                             /* loop */
        {
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d039      	beq.n	8002a16 <bmp390_read_temperature_pressure+0x3da>
            {
                int64_t output;
                
                res = a_bmp390_iic_spi_read(handle, BMP390_REG_DATA_0, (uint8_t *)buf, 3);    /* read raw data */
 80029a2:	f107 0214 	add.w	r2, r7, #20
 80029a6:	2303      	movs	r3, #3
 80029a8:	2104      	movs	r1, #4
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7fe fbda 	bl	8001164 <a_bmp390_iic_spi_read>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                if (res != 0)                                                                 /* check result */
 80029b6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <bmp390_read_temperature_pressure+0x390>
                {
                    handle->debug_print("bmp390: get data register failed.\n");               /* get data register failed */
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80029c4:	4824      	ldr	r0, [pc, #144]	@ (8002a58 <bmp390_read_temperature_pressure+0x41c>)
 80029c6:	4798      	blx	r3
                   
                    return 1;                                                                 /* return error */
 80029c8:	2301      	movs	r3, #1
 80029ca:	e03e      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
                }
                *pressure_raw = (uint32_t)buf[2] << 16 | (uint32_t)buf[1] << 8 | buf[0];      /* get data */
 80029cc:	7dbb      	ldrb	r3, [r7, #22]
 80029ce:	041a      	lsls	r2, r3, #16
 80029d0:	7d7b      	ldrb	r3, [r7, #21]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	4313      	orrs	r3, r2
 80029d6:	7d3a      	ldrb	r2, [r7, #20]
 80029d8:	431a      	orrs	r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	601a      	str	r2, [r3, #0]
                output = a_bmp390_compensate_pressure(handle, *pressure_raw);                 /* compensate pressure */
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4619      	mov	r1, r3
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7fe feb3 	bl	8001750 <a_bmp390_compensate_pressure>
 80029ea:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                *pressure_pa = (float)((double)output / 100.0);                               /* get converted pressure */
 80029ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029f2:	f7fd fdf3 	bl	80005dc <__aeabi_l2d>
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <bmp390_read_temperature_pressure+0x420>)
 80029fc:	f7fd ff46 	bl	800088c <__aeabi_ddiv>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fe f8ee 	bl	8000be8 <__aeabi_d2f>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a10:	601a      	str	r2, [r3, #0]
                
                return 0;                                                                     /* success return 0 */
 8002a12:	2300      	movs	r3, #0
 8002a14:	e019      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
            }
            else
            {
                if (cnt != 0)                                                                 /* check cnt */
 8002a16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <bmp390_read_temperature_pressure+0x3f2>
                {
                    cnt--;                                                                    /* cnt-- */
 8002a1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    handle->delay_ms(1);                                                      /* delay 1 ms */
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8002a28:	2001      	movs	r0, #1
 8002a2a:	4798      	blx	r3
                    
                    continue;                                                                 /* continue */
 8002a2c:	e006      	b.n	8002a3c <bmp390_read_temperature_pressure+0x400>
                }
                handle->debug_print("bmp390: temperature data is not ready.\n");              /* temperature data is not ready */
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002a34:	4807      	ldr	r0, [pc, #28]	@ (8002a54 <bmp390_read_temperature_pressure+0x418>)
 8002a36:	4798      	blx	r3
               
                return 1;                                                                     /* return error */
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e006      	b.n	8002a4a <bmp390_read_temperature_pressure+0x40e>
            if ((prev & (1 << 5)) != 0)                                                       /* data is ready */
 8002a3c:	e7ac      	b.n	8002998 <bmp390_read_temperature_pressure+0x35c>
            }
        }
    }
    else
    {
        handle->debug_print("bmp390: mode is invalid.\n");                                    /* mode is invalid */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002a44:	4806      	ldr	r0, [pc, #24]	@ (8002a60 <bmp390_read_temperature_pressure+0x424>)
 8002a46:	4798      	blx	r3
           
        return 1;                                                                             /* return error */
 8002a48:	2301      	movs	r3, #1
    }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3740      	adds	r7, #64	@ 0x40
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	0800cde0 	.word	0x0800cde0
 8002a58:	0800cdbc 	.word	0x0800cdbc
 8002a5c:	40590000 	.word	0x40590000
 8002a60:	0800ce08 	.word	0x0800ce08

08002a64 <bmp390_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_addr_pin(bmp390_handle_t *handle, bmp390_address_t addr_pin)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <bmp390_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8002a76:	2302      	movs	r3, #2
 8002a78:	e003      	b.n	8002a82 <bmp390_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set iic address */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <bmp390_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t bmp390_set_interface(bmp390_handle_t *handle, bmp390_interface_t interface) 
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                        /* check handle */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <bmp390_set_interface+0x16>
    {
        return 2;                              /* return error */
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e004      	b.n	8002aae <bmp390_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;      /* set interface */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
    
    return 0;                                  /* success return 0 */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b087      	sub	sp, #28
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	72fb      	strb	r3, [r7, #11]
 8002aca:	4613      	mov	r3, r2
 8002acc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685c      	ldr	r4, [r3, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	68d8      	ldr	r0, [r3, #12]
 8002ad6:	893b      	ldrh	r3, [r7, #8]
 8002ad8:	7af9      	ldrb	r1, [r7, #11]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	47a0      	blx	r4
 8002ade:	6178      	str	r0, [r7, #20]

  return ret;
 8002ae0:	697b      	ldr	r3, [r7, #20]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}

08002aea <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002aea:	b590      	push	{r4, r7, lr}
 8002aec:	b087      	sub	sp, #28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	461a      	mov	r2, r3
 8002af6:	460b      	mov	r3, r1
 8002af8:	72fb      	strb	r3, [r7, #11]
 8002afa:	4613      	mov	r3, r2
 8002afc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681c      	ldr	r4, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68d8      	ldr	r0, [r3, #12]
 8002b06:	893b      	ldrh	r3, [r7, #8]
 8002b08:	7af9      	ldrb	r1, [r7, #11]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	47a0      	blx	r4
 8002b0e:	6178      	str	r0, [r7, #20]

  return ret;
 8002b10:	697b      	ldr	r3, [r7, #20]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}

08002b1a <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002b26:	f107 0208 	add.w	r2, r7, #8
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	2110      	movs	r1, #16
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffc3 	bl	8002aba <lsm6dso_read_reg>
 8002b34:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10f      	bne.n	8002b5c <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	7a3b      	ldrb	r3, [r7, #8]
 8002b46:	f362 0383 	bfi	r3, r2, #2, #2
 8002b4a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002b4c:	f107 0208 	add.w	r2, r7, #8
 8002b50:	2301      	movs	r3, #1
 8002b52:	2110      	movs	r1, #16
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ffc8 	bl	8002aea <lsm6dso_write_reg>
 8002b5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fb49 	bl	8003216 <lsm6dso_fsm_enable_get>
 8002b84:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 80c4 	bne.w	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002b8e:	7b3b      	ldrb	r3, [r7, #12]
 8002b90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002b96:	7b3b      	ldrb	r3, [r7, #12]
 8002b98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b9c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002ba2:	7b3b      	ldrb	r3, [r7, #12]
 8002ba4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ba8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002bae:	7b3b      	ldrb	r3, [r7, #12]
 8002bb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002bb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002bba:	7b3b      	ldrb	r3, [r7, #12]
 8002bbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002bc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002bc6:	7b3b      	ldrb	r3, [r7, #12]
 8002bc8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002bcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002bd2:	7b3b      	ldrb	r3, [r7, #12]
 8002bd4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002bd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002bde:	7b3b      	ldrb	r3, [r7, #12]
 8002be0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002be4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002be6:	4313      	orrs	r3, r2
 8002be8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002bea:	7b7b      	ldrb	r3, [r7, #13]
 8002bec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002bf0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002bf6:	7b7b      	ldrb	r3, [r7, #13]
 8002bf8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002bfc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002c02:	7b7b      	ldrb	r3, [r7, #13]
 8002c04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002c0e:	7b7b      	ldrb	r3, [r7, #13]
 8002c10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002c16:	4313      	orrs	r3, r2
 8002c18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002c1a:	7b7b      	ldrb	r3, [r7, #13]
 8002c1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002c22:	4313      	orrs	r3, r2
 8002c24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002c26:	7b7b      	ldrb	r3, [r7, #13]
 8002c28:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002c32:	7b7b      	ldrb	r3, [r7, #13]
 8002c34:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002c3e:	7b7b      	ldrb	r3, [r7, #13]
 8002c40:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002c46:	4313      	orrs	r3, r2
 8002c48:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d163      	bne.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002c4e:	f107 030b 	add.w	r3, r7, #11
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 faff 	bl	8003258 <lsm6dso_fsm_data_rate_get>
 8002c5a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d159      	bne.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d853      	bhi.n	8002d10 <lsm6dso_xl_data_rate_set+0x1a8>
 8002c68:	a201      	add	r2, pc, #4	@ (adr r2, 8002c70 <lsm6dso_xl_data_rate_set+0x108>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c93 	.word	0x08002c93
 8002c78:	08002cb1 	.word	0x08002cb1
 8002c7c:	08002cdb 	.word	0x08002cdb
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002c8a:	e044      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	75fb      	strb	r3, [r7, #23]
            break;
 8002c90:	e041      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002c9c:	e03b      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d102      	bne.n	8002caa <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	75fb      	strb	r3, [r7, #23]
            break;
 8002ca8:	e035      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	75fb      	strb	r3, [r7, #23]
            break;
 8002cae:	e032      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002cba:	e02c      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	75fb      	strb	r3, [r7, #23]
            break;
 8002cc6:	e026      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d102      	bne.n	8002cd4 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	75fb      	strb	r3, [r7, #23]
            break;
 8002cd2:	e020      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	75fb      	strb	r3, [r7, #23]
            break;
 8002cd8:	e01d      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002ce4:	e017      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002cec:	2304      	movs	r3, #4
 8002cee:	75fb      	strb	r3, [r7, #23]
            break;
 8002cf0:	e011      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d102      	bne.n	8002cfe <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	75fb      	strb	r3, [r7, #23]
            break;
 8002cfc:	e00b      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d102      	bne.n	8002d0a <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002d04:	2304      	movs	r3, #4
 8002d06:	75fb      	strb	r3, [r7, #23]
            break;
 8002d08:	e005      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	75fb      	strb	r3, [r7, #23]
            break;
 8002d0e:	e002      	b.n	8002d16 <lsm6dso_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	75fb      	strb	r3, [r7, #23]
            break;
 8002d14:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <lsm6dso_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002d1c:	f107 0208 	add.w	r2, r7, #8
 8002d20:	2301      	movs	r3, #1
 8002d22:	2110      	movs	r1, #16
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fec8 	bl	8002aba <lsm6dso_read_reg>
 8002d2a:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10f      	bne.n	8002d52 <lsm6dso_xl_data_rate_set+0x1ea>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	7a3b      	ldrb	r3, [r7, #8]
 8002d3c:	f362 1307 	bfi	r3, r2, #4, #4
 8002d40:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002d42:	f107 0208 	add.w	r2, r7, #8
 8002d46:	2301      	movs	r3, #1
 8002d48:	2110      	movs	r1, #16
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fecd 	bl	8002aea <lsm6dso_write_reg>
 8002d50:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8002d52:	693b      	ldr	r3, [r7, #16]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002d68:	f107 0208 	add.w	r2, r7, #8
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	2111      	movs	r1, #17
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fea2 	bl	8002aba <lsm6dso_read_reg>
 8002d76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	7a3b      	ldrb	r3, [r7, #8]
 8002d88:	f362 0343 	bfi	r3, r2, #1, #3
 8002d8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002d8e:	f107 0208 	add.w	r2, r7, #8
 8002d92:	2301      	movs	r3, #1
 8002d94:	2111      	movs	r1, #17
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fea7 	bl	8002aea <lsm6dso_write_reg>
 8002d9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa29 	bl	8003216 <lsm6dso_fsm_enable_get>
 8002dc4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 80c4 	bne.w	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002dce:	7b3b      	ldrb	r3, [r7, #12]
 8002dd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002dd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002dd6:	7b3b      	ldrb	r3, [r7, #12]
 8002dd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ddc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002dde:	4313      	orrs	r3, r2
 8002de0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002de2:	7b3b      	ldrb	r3, [r7, #12]
 8002de4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002de8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002dee:	7b3b      	ldrb	r3, [r7, #12]
 8002df0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002df4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002dfa:	7b3b      	ldrb	r3, [r7, #12]
 8002dfc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002e02:	4313      	orrs	r3, r2
 8002e04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002e06:	7b3b      	ldrb	r3, [r7, #12]
 8002e08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002e0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002e12:	7b3b      	ldrb	r3, [r7, #12]
 8002e14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002e18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002e1e:	7b3b      	ldrb	r3, [r7, #12]
 8002e20:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002e2a:	7b7b      	ldrb	r3, [r7, #13]
 8002e2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002e36:	7b7b      	ldrb	r3, [r7, #13]
 8002e38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002e42:	7b7b      	ldrb	r3, [r7, #13]
 8002e44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002e4e:	7b7b      	ldrb	r3, [r7, #13]
 8002e50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002e66:	7b7b      	ldrb	r3, [r7, #13]
 8002e68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002e6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002e72:	7b7b      	ldrb	r3, [r7, #13]
 8002e74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002e78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002e7e:	7b7b      	ldrb	r3, [r7, #13]
 8002e80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002e86:	4313      	orrs	r3, r2
 8002e88:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d163      	bne.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002e8e:	f107 030b 	add.w	r3, r7, #11
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f9df 	bl	8003258 <lsm6dso_fsm_data_rate_get>
 8002e9a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d159      	bne.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8002ea2:	7afb      	ldrb	r3, [r7, #11]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d853      	bhi.n	8002f50 <lsm6dso_gy_data_rate_set+0x1a8>
 8002ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb0 <lsm6dso_gy_data_rate_set+0x108>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ec1 	.word	0x08002ec1
 8002eb4:	08002ed3 	.word	0x08002ed3
 8002eb8:	08002ef1 	.word	0x08002ef1
 8002ebc:	08002f1b 	.word	0x08002f1b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002eca:	e044      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	75fb      	strb	r3, [r7, #23]
            break;
 8002ed0:	e041      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002edc:	e03b      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d102      	bne.n	8002eea <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	75fb      	strb	r3, [r7, #23]
            break;
 8002ee8:	e035      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	75fb      	strb	r3, [r7, #23]
            break;
 8002eee:	e032      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002efa:	e02c      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d102      	bne.n	8002f08 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002f02:	2303      	movs	r3, #3
 8002f04:	75fb      	strb	r3, [r7, #23]
            break;
 8002f06:	e026      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d102      	bne.n	8002f14 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	75fb      	strb	r3, [r7, #23]
            break;
 8002f12:	e020      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	75fb      	strb	r3, [r7, #23]
            break;
 8002f18:	e01d      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002f20:	2304      	movs	r3, #4
 8002f22:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002f24:	e017      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d102      	bne.n	8002f32 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	75fb      	strb	r3, [r7, #23]
            break;
 8002f30:	e011      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d102      	bne.n	8002f3e <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002f38:	2304      	movs	r3, #4
 8002f3a:	75fb      	strb	r3, [r7, #23]
            break;
 8002f3c:	e00b      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d102      	bne.n	8002f4a <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002f44:	2304      	movs	r3, #4
 8002f46:	75fb      	strb	r3, [r7, #23]
            break;
 8002f48:	e005      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	75fb      	strb	r3, [r7, #23]
            break;
 8002f4e:	e002      	b.n	8002f56 <lsm6dso_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	75fb      	strb	r3, [r7, #23]
            break;
 8002f54:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d107      	bne.n	8002f6c <lsm6dso_gy_data_rate_set+0x1c4>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002f5c:	f107 0208 	add.w	r2, r7, #8
 8002f60:	2301      	movs	r3, #1
 8002f62:	2111      	movs	r1, #17
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff fda8 	bl	8002aba <lsm6dso_read_reg>
 8002f6a:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <lsm6dso_gy_data_rate_set+0x1ea>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	7a3b      	ldrb	r3, [r7, #8]
 8002f7c:	f362 1307 	bfi	r3, r2, #4, #4
 8002f80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002f82:	f107 0208 	add.w	r2, r7, #8
 8002f86:	2301      	movs	r3, #1
 8002f88:	2111      	movs	r1, #17
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fdad 	bl	8002aea <lsm6dso_write_reg>
 8002f90:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8002f92:	693b      	ldr	r3, [r7, #16]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8002fa8:	f107 0208 	add.w	r2, r7, #8
 8002fac:	2301      	movs	r3, #1
 8002fae:	2112      	movs	r1, #18
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fd82 	bl	8002aba <lsm6dso_read_reg>
 8002fb6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	7a3b      	ldrb	r3, [r7, #8]
 8002fc8:	f362 1386 	bfi	r3, r2, #6, #1
 8002fcc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8002fce:	f107 0208 	add.w	r2, r7, #8
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	2112      	movs	r1, #18
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fd87 	bl	8002aea <lsm6dso_write_reg>
 8002fdc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fde:	68fb      	ldr	r3, [r7, #12]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <lsm6dso_status_reg_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_status_reg_get(stmdev_ctx_t *ctx,
                               lsm6dso_status_reg_t *val)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) val, 1);
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	211e      	movs	r1, #30
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff fd5e 	bl	8002aba <lsm6dso_read_reg>
 8002ffe:	60f8      	str	r0, [r7, #12]

  return ret;
 8003000:	68fb      	ldr	r3, [r7, #12]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8003014:	f107 020c 	add.w	r2, r7, #12
 8003018:	2306      	movs	r3, #6
 800301a:	2122      	movs	r1, #34	@ 0x22
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fd4c 	bl	8002aba <lsm6dso_read_reg>
 8003022:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003024:	7b7b      	ldrb	r3, [r7, #13]
 8003026:	b21a      	sxth	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003032:	b29b      	uxth	r3, r3
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	b29b      	uxth	r3, r3
 8003038:	7b3a      	ldrb	r2, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	b21a      	sxth	r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	3302      	adds	r3, #2
 800304a:	b212      	sxth	r2, r2
 800304c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	3302      	adds	r3, #2
 8003052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003056:	b29b      	uxth	r3, r3
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	b29b      	uxth	r3, r3
 800305c:	7bba      	ldrb	r2, [r7, #14]
 800305e:	4413      	add	r3, r2
 8003060:	b29a      	uxth	r2, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	3302      	adds	r3, #2
 8003066:	b212      	sxth	r2, r2
 8003068:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800306a:	7c7a      	ldrb	r2, [r7, #17]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	3304      	adds	r3, #4
 8003070:	b212      	sxth	r2, r2
 8003072:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	3304      	adds	r3, #4
 8003078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307c:	b29b      	uxth	r3, r3
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	b29b      	uxth	r3, r3
 8003082:	7c3a      	ldrb	r2, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	b29a      	uxth	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	3304      	adds	r3, #4
 800308c:	b212      	sxth	r2, r2
 800308e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003090:	697b      	ldr	r3, [r7, #20]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80030a4:	f107 020c 	add.w	r2, r7, #12
 80030a8:	2306      	movs	r3, #6
 80030aa:	2128      	movs	r1, #40	@ 0x28
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fd04 	bl	8002aba <lsm6dso_read_reg>
 80030b2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80030b4:	7b7b      	ldrb	r3, [r7, #13]
 80030b6:	b21a      	sxth	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	7b3a      	ldrb	r2, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	b21a      	sxth	r2, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	3302      	adds	r3, #2
 80030da:	b212      	sxth	r2, r2
 80030dc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	3302      	adds	r3, #2
 80030e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	7bba      	ldrb	r2, [r7, #14]
 80030ee:	4413      	add	r3, r2
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	3302      	adds	r3, #2
 80030f6:	b212      	sxth	r2, r2
 80030f8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80030fa:	7c7a      	ldrb	r2, [r7, #17]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	3304      	adds	r3, #4
 8003100:	b212      	sxth	r2, r2
 8003102:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	3304      	adds	r3, #4
 8003108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310c:	b29b      	uxth	r3, r3
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	b29b      	uxth	r3, r3
 8003112:	7c3a      	ldrb	r2, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	b29a      	uxth	r2, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	3304      	adds	r3, #4
 800311c:	b212      	sxth	r2, r2
 800311e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003120:	697b      	ldr	r3, [r7, #20]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8003136:	f107 0208 	add.w	r2, r7, #8
 800313a:	2301      	movs	r3, #1
 800313c:	2101      	movs	r1, #1
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fcbb 	bl	8002aba <lsm6dso_read_reg>
 8003144:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10f      	bne.n	800316c <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	b2da      	uxtb	r2, r3
 8003154:	7a3b      	ldrb	r3, [r7, #8]
 8003156:	f362 1387 	bfi	r3, r2, #6, #2
 800315a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800315c:	f107 0208 	add.w	r2, r7, #8
 8003160:	2301      	movs	r3, #1
 8003162:	2101      	movs	r1, #1
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fcc0 	bl	8002aea <lsm6dso_write_reg>
 800316a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800316c:	68fb      	ldr	r3, [r7, #12]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8003180:	2301      	movs	r3, #1
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	210f      	movs	r1, #15
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fc97 	bl	8002aba <lsm6dso_read_reg>
 800318c:	60f8      	str	r0, [r7, #12]

  return ret;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80031a4:	f107 0208 	add.w	r2, r7, #8
 80031a8:	2301      	movs	r3, #1
 80031aa:	2112      	movs	r1, #18
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fc84 	bl	8002aba <lsm6dso_read_reg>
 80031b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	7a3b      	ldrb	r3, [r7, #8]
 80031c4:	f362 0300 	bfi	r3, r2, #0, #1
 80031c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80031ca:	f107 0208 	add.w	r2, r7, #8
 80031ce:	2301      	movs	r3, #1
 80031d0:	2112      	movs	r1, #18
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fc89 	bl	8002aea <lsm6dso_write_reg>
 80031d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80031ee:	f107 0208 	add.w	r2, r7, #8
 80031f2:	2301      	movs	r3, #1
 80031f4:	2112      	movs	r1, #18
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fc5f 	bl	8002aba <lsm6dso_read_reg>
 80031fc:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 80031fe:	7a3b      	ldrb	r3, [r7, #8]
 8003200:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	701a      	strb	r2, [r3, #0]

  return ret;
 800320c:	68fb      	ldr	r3, [r7, #12]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003220:	2102      	movs	r1, #2
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ff81 	bl	800312a <lsm6dso_mem_bank_set>
 8003228:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8003230:	2302      	movs	r3, #2
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	2146      	movs	r1, #70	@ 0x46
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fc3f 	bl	8002aba <lsm6dso_read_reg>
 800323c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8003244:	2100      	movs	r1, #0
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ff6f 	bl	800312a <lsm6dso_mem_bank_set>
 800324c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8003262:	2102      	movs	r1, #2
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff60 	bl	800312a <lsm6dso_mem_bank_set>
 800326a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8003272:	f107 0208 	add.w	r2, r7, #8
 8003276:	2301      	movs	r3, #1
 8003278:	215f      	movs	r1, #95	@ 0x5f
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fc1d 	bl	8002aba <lsm6dso_read_reg>
 8003280:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12a      	bne.n	80032de <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8003288:	7a3b      	ldrb	r3, [r7, #8]
 800328a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b03      	cmp	r3, #3
 8003292:	d81b      	bhi.n	80032cc <lsm6dso_fsm_data_rate_get+0x74>
 8003294:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <lsm6dso_fsm_data_rate_get+0x44>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032b5 	.word	0x080032b5
 80032a4:	080032bd 	.word	0x080032bd
 80032a8:	080032c5 	.word	0x080032c5
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
        break;
 80032b2:	e00f      	b.n	80032d4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
        break;
 80032ba:	e00b      	b.n	80032d4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
        break;
 80032c2:	e007      	b.n	80032d4 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2203      	movs	r2, #3
 80032c8:	701a      	strb	r2, [r3, #0]
        break;
 80032ca:	e003      	b.n	80032d4 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
        break;
 80032d2:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80032d4:	2100      	movs	r1, #0
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ff27 	bl	800312a <lsm6dso_mem_bank_set>
 80032dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032de:	68fb      	ldr	r3, [r7, #12]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <platform_write>:
static uint8_t whoamI_lsm, rst_lsm;


// LSM6DSO functions re-enabled and corrected
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af04      	add	r7, sp, #16
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	461a      	mov	r2, r3
 80032f4:	460b      	mov	r3, r1
 80032f6:	72fb      	strb	r3, [r7, #11]
 80032f8:	4613      	mov	r3, r2
 80032fa:	813b      	strh	r3, [r7, #8]
  // Note: LSM6DSO_I2C_ADD_L is the 7-bit address. HAL functions expect the 8-bit address (7-bit shifted left).
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef*)handle, (LSM6DSO_I2C_ADD_L << 1), reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000) == HAL_OK) {
 80032fc:	7afb      	ldrb	r3, [r7, #11]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003304:	9302      	str	r3, [sp, #8]
 8003306:	893b      	ldrh	r3, [r7, #8]
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2301      	movs	r3, #1
 8003310:	21d4      	movs	r1, #212	@ 0xd4
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f002 feb6 	bl	8006084 <HAL_I2C_Mem_Write>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <platform_write+0x3a>
    return 0;
 800331e:	2300      	movs	r3, #0
 8003320:	e001      	b.n	8003326 <platform_write+0x3e>
  }
  return -1; // Return non-zero for error
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b088      	sub	sp, #32
 8003332:	af04      	add	r7, sp, #16
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	461a      	mov	r2, r3
 800333a:	460b      	mov	r3, r1
 800333c:	72fb      	strb	r3, [r7, #11]
 800333e:	4613      	mov	r3, r2
 8003340:	813b      	strh	r3, [r7, #8]
  // Note: LSM6DSO_I2C_ADD_L is the 7-bit address. HAL functions expect the 8-bit address (7-bit shifted left).
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef*)handle, (LSM6DSO_I2C_ADD_L << 1), reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000) == HAL_OK) {
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	b29a      	uxth	r2, r3
 8003346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800334a:	9302      	str	r3, [sp, #8]
 800334c:	893b      	ldrh	r3, [r7, #8]
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2301      	movs	r3, #1
 8003356:	21d4      	movs	r1, #212	@ 0xd4
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f002 ffa7 	bl	80062ac <HAL_I2C_Mem_Read>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <platform_read+0x3a>
    return 0;
 8003364:	2300      	movs	r3, #0
 8003366:	e001      	b.n	800336c <platform_read+0x3e>
  }
  return -1; // Return non-zero for error
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <bmp390_i2c_interface_init>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */

// Wrapper functions for BMP390 driver
uint8_t bmp390_i2c_interface_init(void) {
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  // MX_I2C1_Init() is called before this, so I2C hardware is already initialized.
  // This function can be a no-op or ensure I2C1 is ready.
  return 0; // Success
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <bmp390_i2c_interface_deinit>:

uint8_t bmp390_i2c_interface_deinit(void) {
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  // Optional: HAL_I2C_DeInit(&hi2c1); if necessary for power down
  return 0; // Success
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <bmp390_i2c_read>:

uint8_t bmp390_i2c_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af04      	add	r7, sp, #16
 800339a:	603a      	str	r2, [r7, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
 80033a2:	460b      	mov	r3, r1
 80033a4:	71bb      	strb	r3, [r7, #6]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_read calls this with addr = handle->iic_addr
    if (HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	b299      	uxth	r1, r3
 80033ae:	79bb      	ldrb	r3, [r7, #6]
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	88bb      	ldrh	r3, [r7, #4]
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2301      	movs	r3, #1
 80033c2:	4806      	ldr	r0, [pc, #24]	@ (80033dc <bmp390_i2c_read+0x48>)
 80033c4:	f002 ff72 	bl	80062ac <HAL_I2C_Mem_Read>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <bmp390_i2c_read+0x3e>
        return 0; // Success
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <bmp390_i2c_read+0x40>
    }
    return 1; // Failure
 80033d2:	2301      	movs	r3, #1
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000424 	.word	0x20000424

080033e0 <bmp390_i2c_write>:

uint8_t bmp390_i2c_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af04      	add	r7, sp, #16
 80033e6:	603a      	str	r2, [r7, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
 80033ee:	460b      	mov	r3, r1
 80033f0:	71bb      	strb	r3, [r7, #6]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80bb      	strh	r3, [r7, #4]
    // The driver's a_bmp390_iic_spi_write calls this in a loop with len=1 for multi-byte writes.
    // So, this function will effectively be called to write one byte at a time.
    if (HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	b299      	uxth	r1, r3
 80033fa:	79bb      	ldrb	r3, [r7, #6]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	9302      	str	r3, [sp, #8]
 8003404:	88bb      	ldrh	r3, [r7, #4]
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2301      	movs	r3, #1
 800340e:	4806      	ldr	r0, [pc, #24]	@ (8003428 <bmp390_i2c_write+0x48>)
 8003410:	f002 fe38 	bl	8006084 <HAL_I2C_Mem_Write>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <bmp390_i2c_write+0x3e>
        return 0; // Success
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <bmp390_i2c_write+0x40>
    }
    return 1; // Failure
 800341e:	2301      	movs	r3, #1
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000424 	.word	0x20000424

0800342c <bmp390_delay_ms>:

void bmp390_delay_ms(uint32_t ms) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f001 fe39 	bl	80050ac <HAL_Delay>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <bmp390_spi_interface_init>:

// Dummy SPI functions to satisfy driver checks when using I2C
uint8_t bmp390_spi_interface_init(void) {
 8003442:	b480      	push	{r7}
 8003444:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <bmp390_spi_interface_deinit>:

uint8_t bmp390_spi_interface_deinit(void) {
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  // This won't be called if I2C interface is selected
  return 0; // Success
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <bmp390_spi_read>:

uint8_t bmp390_spi_read(uint8_t reg, uint8_t *buf, uint16_t len) {
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	6039      	str	r1, [r7, #0]
 800346c:	71fb      	strb	r3, [r7, #7]
 800346e:	4613      	mov	r3, r2
 8003470:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8003472:	2301      	movs	r3, #1
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <bmp390_spi_write>:

uint8_t bmp390_spi_write(uint8_t reg, uint8_t *buf, uint16_t len) {
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
 800348c:	4613      	mov	r3, r2
 800348e:	80bb      	strh	r3, [r7, #4]
  // This won't be called if I2C interface is selected
  (void)reg; // Suppress unused parameter warning
  (void)buf; // Suppress unused parameter warning
  (void)len; // Suppress unused parameter warning
  return 1; // Simulate failure if somehow called
 8003490:	2301      	movs	r3, #1
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <bmp390_debug_print>:

void bmp390_debug_print(const char *const fmt, ...) {
 80034a0:	b40f      	push	{r0, r1, r2, r3}
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b0a2      	sub	sp, #136	@ 0x88
 80034a6:	af00      	add	r7, sp, #0
    char dbg_buffer[128]; // Buffer for debug messages
    va_list args;
    va_start(args, fmt);
 80034a8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80034ac:	607b      	str	r3, [r7, #4]
    vsnprintf(dbg_buffer, sizeof(dbg_buffer), fmt, args);
 80034ae:	f107 0008 	add.w	r0, r7, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80034b8:	2180      	movs	r1, #128	@ 0x80
 80034ba:	f006 fc53 	bl	8009d64 <vsniprintf>
    va_end(args);
    // Direct transmit is simpler if buffer is managed carefully
    HAL_UART_Transmit(&huart3, (uint8_t*)"BMP390_DBG: ", 12, HAL_MAX_DELAY);
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	220c      	movs	r2, #12
 80034c4:	490c      	ldr	r1, [pc, #48]	@ (80034f8 <bmp390_debug_print+0x58>)
 80034c6:	480d      	ldr	r0, [pc, #52]	@ (80034fc <bmp390_debug_print+0x5c>)
 80034c8:	f004 febc 	bl	8008244 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t*)dbg_buffer, strlen(dbg_buffer), HAL_MAX_DELAY);
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fc feed 	bl	80002b0 <strlen>
 80034d6:	4603      	mov	r3, r0
 80034d8:	b29a      	uxth	r2, r3
 80034da:	f107 0108 	add.w	r1, r7, #8
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	4806      	ldr	r0, [pc, #24]	@ (80034fc <bmp390_debug_print+0x5c>)
 80034e4:	f004 feae 	bl	8008244 <HAL_UART_Transmit>
}
 80034e8:	bf00      	nop
 80034ea:	3788      	adds	r7, #136	@ 0x88
 80034ec:	46bd      	mov	sp, r7
 80034ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034f2:	b004      	add	sp, #16
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	0800cf0c 	.word	0x0800cf0c
 80034fc:	20000478 	.word	0x20000478

08003500 <calibrate_sea_level_pressure_hpa>:


// Altitude calculation functions
// pressure_hpa: current measured pressure in hPa
// known_altitude_meters: current known altitude in meters
void calibrate_sea_level_pressure_hpa(float current_pressure_hpa, float known_altitude_meters) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	ed87 0a01 	vstr	s0, [r7, #4]
 800350a:	edc7 0a00 	vstr	s1, [r7]
  sea_level_pressure_hpa = current_pressure_hpa / powf((1.0f - (known_altitude_meters * 0.0000225577f)), 5.255877f);
 800350e:	edd7 7a00 	vldr	s15, [r7]
 8003512:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003548 <calibrate_sea_level_pressure_hpa+0x48>
 8003516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800351a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800351e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003522:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800354c <calibrate_sea_level_pressure_hpa+0x4c>
 8003526:	eeb0 0a67 	vmov.f32	s0, s15
 800352a:	f008 fcf7 	bl	800bf1c <powf>
 800352e:	eef0 6a40 	vmov.f32	s13, s0
 8003532:	ed97 7a01 	vldr	s14, [r7, #4]
 8003536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800353a:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <calibrate_sea_level_pressure_hpa+0x50>)
 800353c:	edc3 7a00 	vstr	s15, [r3]
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	37bd3a4b 	.word	0x37bd3a4b
 800354c:	40a83025 	.word	0x40a83025
 8003550:	20000d40 	.word	0x20000d40

08003554 <calculate_altitude_hpa>:

// pressure_hpa: current measured pressure in hPa
// returns altitude in meters
float calculate_altitude_hpa(float pressure_hpa) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (sea_level_pressure_hpa <= 0) return 0.0f; // Avoid division by zero or log of non-positive
 800355e:	4b13      	ldr	r3, [pc, #76]	@ (80035ac <calculate_altitude_hpa+0x58>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	d802      	bhi.n	8003574 <calculate_altitude_hpa+0x20>
 800356e:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80035b0 <calculate_altitude_hpa+0x5c>
 8003572:	e016      	b.n	80035a2 <calculate_altitude_hpa+0x4e>
  return 44330.0f * (1.0f - powf(pressure_hpa / sea_level_pressure_hpa, 0.1903f));
 8003574:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <calculate_altitude_hpa+0x58>)
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	ed97 7a01 	vldr	s14, [r7, #4]
 800357e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003582:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80035b4 <calculate_altitude_hpa+0x60>
 8003586:	eeb0 0a66 	vmov.f32	s0, s13
 800358a:	f008 fcc7 	bl	800bf1c <powf>
 800358e:	eef0 7a40 	vmov.f32	s15, s0
 8003592:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800359a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80035b8 <calculate_altitude_hpa+0x64>
 800359e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80035a2:	eeb0 0a67 	vmov.f32	s0, s15
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000d40 	.word	0x20000d40
 80035b0:	00000000 	.word	0x00000000
 80035b4:	3e42de01 	.word	0x3e42de01
 80035b8:	472d2a00 	.word	0x472d2a00

080035bc <lsm6dso_from_fs16g_to_mg>:
  * @brief  Converts raw accelerometer data from LSM6DSO to mg.
  * @param  lsb Raw data from the sensor.
  * @retval Acceleration in mg.
  */
static float lsm6dso_from_fs16g_to_mg(int16_t lsb)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
  // Apply a 2x correction factor - the sensor is reporting ~half the expected values
  return (float)lsb * 0.488f * 2.0f; // Sensitivity for +/-16g full scale with 2x correction
 80035c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80035ec <lsm6dso_from_fs16g_to_mg+0x30>
 80035d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035da:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 80035de:	eeb0 0a67 	vmov.f32	s0, s15
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	3ef9db23 	.word	0x3ef9db23

080035f0 <lsm6dso_from_fs2000dps_to_mdps>:
  * @brief  Converts raw gyroscope data from LSM6DSO to mdps.
  * @param  lsb Raw data from the sensor.
  * @retval Angular rate in mdps.
  */
static float lsm6dso_from_fs2000dps_to_mdps(int16_t lsb)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  return (float)lsb * 70.0f; // Sensitivity for +/-2000dps full scale (70 mdps/LSB)
 80035fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003606:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800361c <lsm6dso_from_fs2000dps_to_mdps+0x2c>
 800360a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800360e:	eeb0 0a67 	vmov.f32	s0, s15
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	428c0000 	.word	0x428c0000

08003620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003624:	b0ae      	sub	sp, #184	@ 0xb8
 8003626:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003628:	f001 fce3 	bl	8004ff2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800362c:	f000 ff9e 	bl	800456c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003630:	f001 f8f0 	bl	8004814 <MX_GPIO_Init>
  MX_ETH_Init();
 8003634:	f001 f802 	bl	800463c <MX_ETH_Init>
  MX_I2C1_Init();
 8003638:	f001 f84e 	bl	80046d8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800363c:	f001 f88c 	bl	8004758 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003640:	f001 f8ba 	bl	80047b8 <MX_USB_OTG_FS_PCD_Init>
  // Initialize I2C (already called by HAL_Init system, but good to ensure)
  // MX_I2C1_Init(); // Called above in peripheral init sequence

  // char uart_buffer[100]; // Moved global and resized
  
  sprintf(uart_buffer, "System Initialized. UART OK.\r\n");
 8003644:	4997      	ldr	r1, [pc, #604]	@ (80038a4 <main+0x284>)
 8003646:	4898      	ldr	r0, [pc, #608]	@ (80038a8 <main+0x288>)
 8003648:	f006 faf8 	bl	8009c3c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800364c:	4896      	ldr	r0, [pc, #600]	@ (80038a8 <main+0x288>)
 800364e:	f7fc fe2f 	bl	80002b0 <strlen>
 8003652:	4603      	mov	r3, r0
 8003654:	b29a      	uxth	r2, r3
 8003656:	f04f 33ff 	mov.w	r3, #4294967295
 800365a:	4993      	ldr	r1, [pc, #588]	@ (80038a8 <main+0x288>)
 800365c:	4893      	ldr	r0, [pc, #588]	@ (80038ac <main+0x28c>)
 800365e:	f004 fdf1 	bl	8008244 <HAL_UART_Transmit>
  
  // Scan the I2C bus first to see what devices are present
  sprintf(uart_buffer, "Scanning I2C bus for devices...\r\n");
 8003662:	4993      	ldr	r1, [pc, #588]	@ (80038b0 <main+0x290>)
 8003664:	4890      	ldr	r0, [pc, #576]	@ (80038a8 <main+0x288>)
 8003666:	f006 fae9 	bl	8009c3c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800366a:	488f      	ldr	r0, [pc, #572]	@ (80038a8 <main+0x288>)
 800366c:	f7fc fe20 	bl	80002b0 <strlen>
 8003670:	4603      	mov	r3, r0
 8003672:	b29a      	uxth	r2, r3
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
 8003678:	498b      	ldr	r1, [pc, #556]	@ (80038a8 <main+0x288>)
 800367a:	488c      	ldr	r0, [pc, #560]	@ (80038ac <main+0x28c>)
 800367c:	f004 fde2 	bl	8008244 <HAL_UART_Transmit>
  
  uint8_t i2c_devices_found = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
  for (uint8_t i = 1; i < 128; i++) {
 8003686:	2301      	movs	r3, #1
 8003688:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800368c:	e04d      	b.n	800372a <main+0x10a>
    if (i < 0x08 || i > 0x77) continue;
 800368e:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8003692:	2b07      	cmp	r3, #7
 8003694:	d943      	bls.n	800371e <main+0xfe>
 8003696:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800369a:	2b77      	cmp	r3, #119	@ 0x77
 800369c:	d83f      	bhi.n	800371e <main+0xfe>

    HAL_StatusTypeDef i2c_result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 2, 10); // Use 2 trials, 10ms timeout
 800369e:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	b299      	uxth	r1, r3
 80036a8:	230a      	movs	r3, #10
 80036aa:	2202      	movs	r2, #2
 80036ac:	4881      	ldr	r0, [pc, #516]	@ (80038b4 <main+0x294>)
 80036ae:	f002 ff17 	bl	80064e0 <HAL_I2C_IsDeviceReady>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    
    if (i2c_result == HAL_OK) {
 80036b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d12f      	bne.n	8003720 <main+0x100>
      i2c_devices_found++;
 80036c0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80036c4:	3301      	adds	r3, #1
 80036c6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
      sprintf(uart_buffer, "Found I2C device at address: 0x%02X\r\n", i);
 80036ca:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80036ce:	461a      	mov	r2, r3
 80036d0:	4979      	ldr	r1, [pc, #484]	@ (80038b8 <main+0x298>)
 80036d2:	4875      	ldr	r0, [pc, #468]	@ (80038a8 <main+0x288>)
 80036d4:	f006 fab2 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80036d8:	4873      	ldr	r0, [pc, #460]	@ (80038a8 <main+0x288>)
 80036da:	f7fc fde9 	bl	80002b0 <strlen>
 80036de:	4603      	mov	r3, r0
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	4970      	ldr	r1, [pc, #448]	@ (80038a8 <main+0x288>)
 80036e8:	4870      	ldr	r0, [pc, #448]	@ (80038ac <main+0x28c>)
 80036ea:	f004 fdab 	bl	8008244 <HAL_UART_Transmit>
      
      if (i == (BMP390_I2C_ADDRESS_LOW >> 1) || i == (BMP390_I2C_ADDRESS_HIGH >> 1)) {
 80036ee:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80036f2:	2b76      	cmp	r3, #118	@ 0x76
 80036f4:	d003      	beq.n	80036fe <main+0xde>
 80036f6:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80036fa:	2b77      	cmp	r3, #119	@ 0x77
 80036fc:	d110      	bne.n	8003720 <main+0x100>
        sprintf(uart_buffer, "  --> This could be a BMP390 sensor!\r\n");
 80036fe:	496f      	ldr	r1, [pc, #444]	@ (80038bc <main+0x29c>)
 8003700:	4869      	ldr	r0, [pc, #420]	@ (80038a8 <main+0x288>)
 8003702:	f006 fa9b 	bl	8009c3c <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003706:	4868      	ldr	r0, [pc, #416]	@ (80038a8 <main+0x288>)
 8003708:	f7fc fdd2 	bl	80002b0 <strlen>
 800370c:	4603      	mov	r3, r0
 800370e:	b29a      	uxth	r2, r3
 8003710:	f04f 33ff 	mov.w	r3, #4294967295
 8003714:	4964      	ldr	r1, [pc, #400]	@ (80038a8 <main+0x288>)
 8003716:	4865      	ldr	r0, [pc, #404]	@ (80038ac <main+0x28c>)
 8003718:	f004 fd94 	bl	8008244 <HAL_UART_Transmit>
 800371c:	e000      	b.n	8003720 <main+0x100>
    if (i < 0x08 || i > 0x77) continue;
 800371e:	bf00      	nop
  for (uint8_t i = 1; i < 128; i++) {
 8003720:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8003724:	3301      	adds	r3, #1
 8003726:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800372a:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 800372e:	2b00      	cmp	r3, #0
 8003730:	daad      	bge.n	800368e <main+0x6e>
      }
    }
  }
  
  if (i2c_devices_found == 0) {
 8003732:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <main+0x13a>
    sprintf(uart_buffer, "No I2C devices found! Check wiring/pull-ups.\r\n");
 800373a:	4961      	ldr	r1, [pc, #388]	@ (80038c0 <main+0x2a0>)
 800373c:	485a      	ldr	r0, [pc, #360]	@ (80038a8 <main+0x288>)
 800373e:	f006 fa7d 	bl	8009c3c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003742:	4859      	ldr	r0, [pc, #356]	@ (80038a8 <main+0x288>)
 8003744:	f7fc fdb4 	bl	80002b0 <strlen>
 8003748:	4603      	mov	r3, r0
 800374a:	b29a      	uxth	r2, r3
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	4955      	ldr	r1, [pc, #340]	@ (80038a8 <main+0x288>)
 8003752:	4856      	ldr	r0, [pc, #344]	@ (80038ac <main+0x28c>)
 8003754:	f004 fd76 	bl	8008244 <HAL_UART_Transmit>
 8003758:	e011      	b.n	800377e <main+0x15e>
  } else {
    sprintf(uart_buffer, "Found %d I2C devices in total.\r\n", i2c_devices_found);
 800375a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800375e:	461a      	mov	r2, r3
 8003760:	4958      	ldr	r1, [pc, #352]	@ (80038c4 <main+0x2a4>)
 8003762:	4851      	ldr	r0, [pc, #324]	@ (80038a8 <main+0x288>)
 8003764:	f006 fa6a 	bl	8009c3c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003768:	484f      	ldr	r0, [pc, #316]	@ (80038a8 <main+0x288>)
 800376a:	f7fc fda1 	bl	80002b0 <strlen>
 800376e:	4603      	mov	r3, r0
 8003770:	b29a      	uxth	r2, r3
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
 8003776:	494c      	ldr	r1, [pc, #304]	@ (80038a8 <main+0x288>)
 8003778:	484c      	ldr	r0, [pc, #304]	@ (80038ac <main+0x28c>)
 800377a:	f004 fd63 	bl	8008244 <HAL_UART_Transmit>
  }

  // Initialize LSM6DSO
  sprintf(uart_buffer, "Initializing LSM6DSO...\r\n");
 800377e:	4952      	ldr	r1, [pc, #328]	@ (80038c8 <main+0x2a8>)
 8003780:	4849      	ldr	r0, [pc, #292]	@ (80038a8 <main+0x288>)
 8003782:	f006 fa5b 	bl	8009c3c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003786:	4848      	ldr	r0, [pc, #288]	@ (80038a8 <main+0x288>)
 8003788:	f7fc fd92 	bl	80002b0 <strlen>
 800378c:	4603      	mov	r3, r0
 800378e:	b29a      	uxth	r2, r3
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
 8003794:	4944      	ldr	r1, [pc, #272]	@ (80038a8 <main+0x288>)
 8003796:	4845      	ldr	r0, [pc, #276]	@ (80038ac <main+0x28c>)
 8003798:	f004 fd54 	bl	8008244 <HAL_UART_Transmit>

  dev_ctx.write_reg = platform_write;
 800379c:	4b4b      	ldr	r3, [pc, #300]	@ (80038cc <main+0x2ac>)
 800379e:	4a4c      	ldr	r2, [pc, #304]	@ (80038d0 <main+0x2b0>)
 80037a0:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 80037a2:	4b4a      	ldr	r3, [pc, #296]	@ (80038cc <main+0x2ac>)
 80037a4:	4a4b      	ldr	r2, [pc, #300]	@ (80038d4 <main+0x2b4>)
 80037a6:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 80037a8:	4b48      	ldr	r3, [pc, #288]	@ (80038cc <main+0x2ac>)
 80037aa:	4a42      	ldr	r2, [pc, #264]	@ (80038b4 <main+0x294>)
 80037ac:	60da      	str	r2, [r3, #12]

  // Check device ID
  lsm6dso_device_id_get(&dev_ctx, &whoamI_lsm);
 80037ae:	494a      	ldr	r1, [pc, #296]	@ (80038d8 <main+0x2b8>)
 80037b0:	4846      	ldr	r0, [pc, #280]	@ (80038cc <main+0x2ac>)
 80037b2:	f7ff fce0 	bl	8003176 <lsm6dso_device_id_get>
  if (whoamI_lsm == LSM6DSO_WHO_AM_I) {
 80037b6:	4b48      	ldr	r3, [pc, #288]	@ (80038d8 <main+0x2b8>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b0f      	cmp	r3, #15
 80037bc:	d112      	bne.n	80037e4 <main+0x1c4>
    sprintf(uart_buffer, "LSM6DSO WHO_AM_I is OK: 0x%02X\r\n", whoamI_lsm);
 80037be:	4b46      	ldr	r3, [pc, #280]	@ (80038d8 <main+0x2b8>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	4945      	ldr	r1, [pc, #276]	@ (80038dc <main+0x2bc>)
 80037c6:	4838      	ldr	r0, [pc, #224]	@ (80038a8 <main+0x288>)
 80037c8:	f006 fa38 	bl	8009c3c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80037cc:	4836      	ldr	r0, [pc, #216]	@ (80038a8 <main+0x288>)
 80037ce:	f7fc fd6f 	bl	80002b0 <strlen>
 80037d2:	4603      	mov	r3, r0
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	4933      	ldr	r1, [pc, #204]	@ (80038a8 <main+0x288>)
 80037dc:	4833      	ldr	r0, [pc, #204]	@ (80038ac <main+0x28c>)
 80037de:	f004 fd31 	bl	8008244 <HAL_UART_Transmit>
 80037e2:	e011      	b.n	8003808 <main+0x1e8>
  } else {
    sprintf(uart_buffer, "LSM6DSO WHO_AM_I FAILED! Expected 0x%02X, got 0x%02X\r\n", LSM6DSO_WHO_AM_I, whoamI_lsm);
 80037e4:	4b3c      	ldr	r3, [pc, #240]	@ (80038d8 <main+0x2b8>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	220f      	movs	r2, #15
 80037ea:	493d      	ldr	r1, [pc, #244]	@ (80038e0 <main+0x2c0>)
 80037ec:	482e      	ldr	r0, [pc, #184]	@ (80038a8 <main+0x288>)
 80037ee:	f006 fa25 	bl	8009c3c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80037f2:	482d      	ldr	r0, [pc, #180]	@ (80038a8 <main+0x288>)
 80037f4:	f7fc fd5c 	bl	80002b0 <strlen>
 80037f8:	4603      	mov	r3, r0
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003800:	4929      	ldr	r1, [pc, #164]	@ (80038a8 <main+0x288>)
 8003802:	482a      	ldr	r0, [pc, #168]	@ (80038ac <main+0x28c>)
 8003804:	f004 fd1e 	bl	8008244 <HAL_UART_Transmit>
    // Error_Handler(); // Decide if this is fatal
  }

  // Restore default configuration
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8003808:	2101      	movs	r1, #1
 800380a:	4830      	ldr	r0, [pc, #192]	@ (80038cc <main+0x2ac>)
 800380c:	f7ff fcc4 	bl	8003198 <lsm6dso_reset_set>
  do {
    lsm6dso_reset_get(&dev_ctx, &rst_lsm);
 8003810:	4934      	ldr	r1, [pc, #208]	@ (80038e4 <main+0x2c4>)
 8003812:	482e      	ldr	r0, [pc, #184]	@ (80038cc <main+0x2ac>)
 8003814:	f7ff fce6 	bl	80031e4 <lsm6dso_reset_get>
  } while (rst_lsm);
 8003818:	4b32      	ldr	r3, [pc, #200]	@ (80038e4 <main+0x2c4>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f7      	bne.n	8003810 <main+0x1f0>

  // Enable Block Data Update
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8003820:	2101      	movs	r1, #1
 8003822:	482a      	ldr	r0, [pc, #168]	@ (80038cc <main+0x2ac>)
 8003824:	f7ff fbba 	bl	8002f9c <lsm6dso_block_data_update_set>

  // Set Output Data Rate for Accelerometer and Gyroscope
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_104Hz); // 104 Hz ODR for Accelerometer
 8003828:	2104      	movs	r1, #4
 800382a:	4828      	ldr	r0, [pc, #160]	@ (80038cc <main+0x2ac>)
 800382c:	f7ff f99c 	bl	8002b68 <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_104Hz); // 104 Hz ODR for Gyroscope
 8003830:	2104      	movs	r1, #4
 8003832:	4826      	ldr	r0, [pc, #152]	@ (80038cc <main+0x2ac>)
 8003834:	f7ff fab8 	bl	8002da8 <lsm6dso_gy_data_rate_set>

  // Set Full Scale for Accelerometer and Gyroscope
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_16g);    // +/- 16g Full Scale for Accelerometer
 8003838:	2101      	movs	r1, #1
 800383a:	4824      	ldr	r0, [pc, #144]	@ (80038cc <main+0x2ac>)
 800383c:	f7ff f96d 	bl	8002b1a <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps); // +/- 2000 dps Full Scale for Gyroscope
 8003840:	2106      	movs	r1, #6
 8003842:	4822      	ldr	r0, [pc, #136]	@ (80038cc <main+0x2ac>)
 8003844:	f7ff fa8a 	bl	8002d5c <lsm6dso_gy_full_scale_set>

  // Make sure xl_fs_mode is set to 0 to ensure 16g works correctly
  uint8_t ctrl8_xl_val = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 800384e:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 8003852:	2301      	movs	r3, #1
 8003854:	2117      	movs	r1, #23
 8003856:	481d      	ldr	r0, [pc, #116]	@ (80038cc <main+0x2ac>)
 8003858:	f7ff f92f 	bl	8002aba <lsm6dso_read_reg>
  // Clear the xl_fs_mode bit (bit 1) to ensure proper 16g operation
  ctrl8_xl_val &= ~(1 << 1);
 800385c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003860:	f023 0302 	bic.w	r3, r3, #2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  lsm6dso_write_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 800386a:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 800386e:	2301      	movs	r3, #1
 8003870:	2117      	movs	r1, #23
 8003872:	4816      	ldr	r0, [pc, #88]	@ (80038cc <main+0x2ac>)
 8003874:	f7ff f939 	bl	8002aea <lsm6dso_write_reg>
  
  // ---- START DEBUG: Read back CTRL1_XL and CTRL8_XL ----
  uint8_t ctrl1_xl_val = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  if (lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL1_XL, &ctrl1_xl_val, 1) == 0) {
 800387e:	f107 023d 	add.w	r2, r7, #61	@ 0x3d
 8003882:	2301      	movs	r3, #1
 8003884:	2110      	movs	r1, #16
 8003886:	4811      	ldr	r0, [pc, #68]	@ (80038cc <main+0x2ac>)
 8003888:	f7ff f917 	bl	8002aba <lsm6dso_read_reg>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d12c      	bne.n	80038ec <main+0x2cc>
    sprintf(uart_buffer, "LSM6DSO CTRL1_XL after set: 0x%02X\r\n", ctrl1_xl_val);
 8003892:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003896:	461a      	mov	r2, r3
 8003898:	4913      	ldr	r1, [pc, #76]	@ (80038e8 <main+0x2c8>)
 800389a:	4803      	ldr	r0, [pc, #12]	@ (80038a8 <main+0x288>)
 800389c:	f006 f9ce 	bl	8009c3c <siprintf>
 80038a0:	e028      	b.n	80038f4 <main+0x2d4>
 80038a2:	bf00      	nop
 80038a4:	0800cf1c 	.word	0x0800cf1c
 80038a8:	20000c40 	.word	0x20000c40
 80038ac:	20000478 	.word	0x20000478
 80038b0:	0800cf3c 	.word	0x0800cf3c
 80038b4:	20000424 	.word	0x20000424
 80038b8:	0800cf60 	.word	0x0800cf60
 80038bc:	0800cf88 	.word	0x0800cf88
 80038c0:	0800cfb0 	.word	0x0800cfb0
 80038c4:	0800cfe0 	.word	0x0800cfe0
 80038c8:	0800d004 	.word	0x0800d004
 80038cc:	200009e0 	.word	0x200009e0
 80038d0:	080032e9 	.word	0x080032e9
 80038d4:	0800332f 	.word	0x0800332f
 80038d8:	20000d6c 	.word	0x20000d6c
 80038dc:	0800d020 	.word	0x0800d020
 80038e0:	0800d044 	.word	0x0800d044
 80038e4:	20000d6d 	.word	0x20000d6d
 80038e8:	0800d07c 	.word	0x0800d07c
  } else {
    sprintf(uart_buffer, "LSM6DSO Failed to read CTRL1_XL\r\n");
 80038ec:	49a1      	ldr	r1, [pc, #644]	@ (8003b74 <main+0x554>)
 80038ee:	48a2      	ldr	r0, [pc, #648]	@ (8003b78 <main+0x558>)
 80038f0:	f006 f9a4 	bl	8009c3c <siprintf>
  }
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80038f4:	48a0      	ldr	r0, [pc, #640]	@ (8003b78 <main+0x558>)
 80038f6:	f7fc fcdb 	bl	80002b0 <strlen>
 80038fa:	4603      	mov	r3, r0
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	499d      	ldr	r1, [pc, #628]	@ (8003b78 <main+0x558>)
 8003904:	489d      	ldr	r0, [pc, #628]	@ (8003b7c <main+0x55c>)
 8003906:	f004 fc9d 	bl	8008244 <HAL_UART_Transmit>
  
  lsm6dso_read_reg(&dev_ctx, LSM6DSO_CTRL8_XL, &ctrl8_xl_val, 1);
 800390a:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 800390e:	2301      	movs	r3, #1
 8003910:	2117      	movs	r1, #23
 8003912:	489b      	ldr	r0, [pc, #620]	@ (8003b80 <main+0x560>)
 8003914:	f7ff f8d1 	bl	8002aba <lsm6dso_read_reg>
  sprintf(uart_buffer, "LSM6DSO CTRL8_XL after set: 0x%02X\r\n", ctrl8_xl_val);
 8003918:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800391c:	461a      	mov	r2, r3
 800391e:	4999      	ldr	r1, [pc, #612]	@ (8003b84 <main+0x564>)
 8003920:	4895      	ldr	r0, [pc, #596]	@ (8003b78 <main+0x558>)
 8003922:	f006 f98b 	bl	8009c3c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003926:	4894      	ldr	r0, [pc, #592]	@ (8003b78 <main+0x558>)
 8003928:	f7fc fcc2 	bl	80002b0 <strlen>
 800392c:	4603      	mov	r3, r0
 800392e:	b29a      	uxth	r2, r3
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	4990      	ldr	r1, [pc, #576]	@ (8003b78 <main+0x558>)
 8003936:	4891      	ldr	r0, [pc, #580]	@ (8003b7c <main+0x55c>)
 8003938:	f004 fc84 	bl	8008244 <HAL_UART_Transmit>
  // ---- END DEBUG ----

  sprintf(uart_buffer, "LSM6DSO Initialized and Configured (XL:104Hz/16g, GY:104Hz/2000dps).\r\n");
 800393c:	4992      	ldr	r1, [pc, #584]	@ (8003b88 <main+0x568>)
 800393e:	488e      	ldr	r0, [pc, #568]	@ (8003b78 <main+0x558>)
 8003940:	f006 f97c 	bl	8009c3c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003944:	488c      	ldr	r0, [pc, #560]	@ (8003b78 <main+0x558>)
 8003946:	f7fc fcb3 	bl	80002b0 <strlen>
 800394a:	4603      	mov	r3, r0
 800394c:	b29a      	uxth	r2, r3
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	4989      	ldr	r1, [pc, #548]	@ (8003b78 <main+0x558>)
 8003954:	4889      	ldr	r0, [pc, #548]	@ (8003b7c <main+0x55c>)
 8003956:	f004 fc75 	bl	8008244 <HAL_UART_Transmit>


  // Initialize BMP390 using the new driver
  DRIVER_BMP390_LINK_INIT(&bmp390_handle, bmp390_handle_t);
 800395a:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800395e:	2100      	movs	r1, #0
 8003960:	488a      	ldr	r0, [pc, #552]	@ (8003b8c <main+0x56c>)
 8003962:	f006 fa0d 	bl	8009d80 <memset>
  DRIVER_BMP390_LINK_IIC_INIT(&bmp390_handle, bmp390_i2c_interface_init);
 8003966:	4b89      	ldr	r3, [pc, #548]	@ (8003b8c <main+0x56c>)
 8003968:	4a89      	ldr	r2, [pc, #548]	@ (8003b90 <main+0x570>)
 800396a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  DRIVER_BMP390_LINK_IIC_DEINIT(&bmp390_handle, bmp390_i2c_interface_deinit);
 800396e:	4b87      	ldr	r3, [pc, #540]	@ (8003b8c <main+0x56c>)
 8003970:	4a88      	ldr	r2, [pc, #544]	@ (8003b94 <main+0x574>)
 8003972:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  DRIVER_BMP390_LINK_IIC_READ(&bmp390_handle, bmp390_i2c_read);
 8003976:	4b85      	ldr	r3, [pc, #532]	@ (8003b8c <main+0x56c>)
 8003978:	4a87      	ldr	r2, [pc, #540]	@ (8003b98 <main+0x578>)
 800397a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  DRIVER_BMP390_LINK_IIC_WRITE(&bmp390_handle, bmp390_i2c_write);
 800397e:	4b83      	ldr	r3, [pc, #524]	@ (8003b8c <main+0x56c>)
 8003980:	4a86      	ldr	r2, [pc, #536]	@ (8003b9c <main+0x57c>)
 8003982:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  DRIVER_BMP390_LINK_DELAY_MS(&bmp390_handle, bmp390_delay_ms);
 8003986:	4b81      	ldr	r3, [pc, #516]	@ (8003b8c <main+0x56c>)
 8003988:	4a85      	ldr	r2, [pc, #532]	@ (8003ba0 <main+0x580>)
 800398a:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
  DRIVER_BMP390_LINK_DEBUG_PRINT(&bmp390_handle, bmp390_debug_print);
 800398e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b8c <main+0x56c>)
 8003990:	4a84      	ldr	r2, [pc, #528]	@ (8003ba4 <main+0x584>)
 8003992:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c

  // Link dummy SPI functions as well, even if not used, to satisfy driver checks
  DRIVER_BMP390_LINK_SPI_INIT(&bmp390_handle, bmp390_spi_interface_init);
 8003996:	4b7d      	ldr	r3, [pc, #500]	@ (8003b8c <main+0x56c>)
 8003998:	4a83      	ldr	r2, [pc, #524]	@ (8003ba8 <main+0x588>)
 800399a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  DRIVER_BMP390_LINK_SPI_DEINIT(&bmp390_handle, bmp390_spi_interface_deinit);
 800399e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b8c <main+0x56c>)
 80039a0:	4a82      	ldr	r2, [pc, #520]	@ (8003bac <main+0x58c>)
 80039a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  DRIVER_BMP390_LINK_SPI_READ(&bmp390_handle, bmp390_spi_read);
 80039a6:	4b79      	ldr	r3, [pc, #484]	@ (8003b8c <main+0x56c>)
 80039a8:	4a81      	ldr	r2, [pc, #516]	@ (8003bb0 <main+0x590>)
 80039aa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
  DRIVER_BMP390_LINK_SPI_WRITE(&bmp390_handle, bmp390_spi_write);
 80039ae:	4b77      	ldr	r3, [pc, #476]	@ (8003b8c <main+0x56c>)
 80039b0:	4a80      	ldr	r2, [pc, #512]	@ (8003bb4 <main+0x594>)
 80039b2:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

  bmp390_set_interface(&bmp390_handle, BMP390_INTERFACE_IIC);
 80039b6:	2100      	movs	r1, #0
 80039b8:	4874      	ldr	r0, [pc, #464]	@ (8003b8c <main+0x56c>)
 80039ba:	f7ff f868 	bl	8002a8e <bmp390_set_interface>
  // IMPORTANT: Set the correct I2C address based on your SDO/AD0 pin connection
  bmp390_set_addr_pin(&bmp390_handle, BMP390_ADDRESS_ADO_HIGH); // Corrected: Use 0x77 as detected by scan
 80039be:	21ee      	movs	r1, #238	@ 0xee
 80039c0:	4872      	ldr	r0, [pc, #456]	@ (8003b8c <main+0x56c>)
 80039c2:	f7ff f84f 	bl	8002a64 <bmp390_set_addr_pin>

  sprintf(uart_buffer, "Initializing BMP390 (new driver)...\r\n");
 80039c6:	497c      	ldr	r1, [pc, #496]	@ (8003bb8 <main+0x598>)
 80039c8:	486b      	ldr	r0, [pc, #428]	@ (8003b78 <main+0x558>)
 80039ca:	f006 f937 	bl	8009c3c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80039ce:	486a      	ldr	r0, [pc, #424]	@ (8003b78 <main+0x558>)
 80039d0:	f7fc fc6e 	bl	80002b0 <strlen>
 80039d4:	4603      	mov	r3, r0
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	4966      	ldr	r1, [pc, #408]	@ (8003b78 <main+0x558>)
 80039de:	4867      	ldr	r0, [pc, #412]	@ (8003b7c <main+0x55c>)
 80039e0:	f004 fc30 	bl	8008244 <HAL_UART_Transmit>

  if (bmp390_init(&bmp390_handle) != 0) {
 80039e4:	4869      	ldr	r0, [pc, #420]	@ (8003b8c <main+0x56c>)
 80039e6:	f7fe fcf1 	bl	80023cc <bmp390_init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d011      	beq.n	8003a14 <main+0x3f4>
      sprintf(uart_buffer, "BMP390 new driver initialization FAILED!\r\n");
 80039f0:	4972      	ldr	r1, [pc, #456]	@ (8003bbc <main+0x59c>)
 80039f2:	4861      	ldr	r0, [pc, #388]	@ (8003b78 <main+0x558>)
 80039f4:	f006 f922 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80039f8:	485f      	ldr	r0, [pc, #380]	@ (8003b78 <main+0x558>)
 80039fa:	f7fc fc59 	bl	80002b0 <strlen>
 80039fe:	4603      	mov	r3, r0
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	f04f 33ff 	mov.w	r3, #4294967295
 8003a06:	495c      	ldr	r1, [pc, #368]	@ (8003b78 <main+0x558>)
 8003a08:	485c      	ldr	r0, [pc, #368]	@ (8003b7c <main+0x55c>)
 8003a0a:	f004 fc1b 	bl	8008244 <HAL_UART_Transmit>
      Error_Handler();
 8003a0e:	f000 ffa3 	bl	8004958 <Error_Handler>
 8003a12:	e0f4      	b.n	8003bfe <main+0x5de>
  } else {
      sprintf(uart_buffer, "BMP390 new driver initialized successfully!\r\n");
 8003a14:	496a      	ldr	r1, [pc, #424]	@ (8003bc0 <main+0x5a0>)
 8003a16:	4858      	ldr	r0, [pc, #352]	@ (8003b78 <main+0x558>)
 8003a18:	f006 f910 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003a1c:	4856      	ldr	r0, [pc, #344]	@ (8003b78 <main+0x558>)
 8003a1e:	f7fc fc47 	bl	80002b0 <strlen>
 8003a22:	4603      	mov	r3, r0
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2a:	4953      	ldr	r1, [pc, #332]	@ (8003b78 <main+0x558>)
 8003a2c:	4853      	ldr	r0, [pc, #332]	@ (8003b7c <main+0x55c>)
 8003a2e:	f004 fc09 	bl	8008244 <HAL_UART_Transmit>

      // Configure sensor settings
      sprintf(uart_buffer, "Configuring BMP390...\r\n");
 8003a32:	4964      	ldr	r1, [pc, #400]	@ (8003bc4 <main+0x5a4>)
 8003a34:	4850      	ldr	r0, [pc, #320]	@ (8003b78 <main+0x558>)
 8003a36:	f006 f901 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003a3a:	484f      	ldr	r0, [pc, #316]	@ (8003b78 <main+0x558>)
 8003a3c:	f7fc fc38 	bl	80002b0 <strlen>
 8003a40:	4603      	mov	r3, r0
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	f04f 33ff 	mov.w	r3, #4294967295
 8003a48:	494b      	ldr	r1, [pc, #300]	@ (8003b78 <main+0x558>)
 8003a4a:	484c      	ldr	r0, [pc, #304]	@ (8003b7c <main+0x55c>)
 8003a4c:	f004 fbfa 	bl	8008244 <HAL_UART_Transmit>

      if (bmp390_set_pressure_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x8) != 0) {
 8003a50:	2103      	movs	r1, #3
 8003a52:	484e      	ldr	r0, [pc, #312]	@ (8003b8c <main+0x56c>)
 8003a54:	f7fe fba2 	bl	800219c <bmp390_set_pressure_oversampling>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <main+0x460>
          sprintf(uart_buffer, "BMP390: Failed to set pressure oversampling\r\n");
 8003a5e:	495a      	ldr	r1, [pc, #360]	@ (8003bc8 <main+0x5a8>)
 8003a60:	4845      	ldr	r0, [pc, #276]	@ (8003b78 <main+0x558>)
 8003a62:	f006 f8eb 	bl	8009c3c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8003a66:	4844      	ldr	r0, [pc, #272]	@ (8003b78 <main+0x558>)
 8003a68:	f7fc fc22 	bl	80002b0 <strlen>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
 8003a74:	4940      	ldr	r1, [pc, #256]	@ (8003b78 <main+0x558>)
 8003a76:	4841      	ldr	r0, [pc, #260]	@ (8003b7c <main+0x55c>)
 8003a78:	f004 fbe4 	bl	8008244 <HAL_UART_Transmit>
 8003a7c:	f000 ff6c 	bl	8004958 <Error_Handler>
      }
      if (bmp390_set_temperature_oversampling(&bmp390_handle, BMP390_OVERSAMPLING_x1) != 0) {
 8003a80:	2100      	movs	r1, #0
 8003a82:	4842      	ldr	r0, [pc, #264]	@ (8003b8c <main+0x56c>)
 8003a84:	f7fe fbd6 	bl	8002234 <bmp390_set_temperature_oversampling>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d010      	beq.n	8003ab0 <main+0x490>
          sprintf(uart_buffer, "BMP390: Failed to set temperature oversampling\r\n");
 8003a8e:	494f      	ldr	r1, [pc, #316]	@ (8003bcc <main+0x5ac>)
 8003a90:	4839      	ldr	r0, [pc, #228]	@ (8003b78 <main+0x558>)
 8003a92:	f006 f8d3 	bl	8009c3c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8003a96:	4838      	ldr	r0, [pc, #224]	@ (8003b78 <main+0x558>)
 8003a98:	f7fc fc0a 	bl	80002b0 <strlen>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa4:	4934      	ldr	r1, [pc, #208]	@ (8003b78 <main+0x558>)
 8003aa6:	4835      	ldr	r0, [pc, #212]	@ (8003b7c <main+0x55c>)
 8003aa8:	f004 fbcc 	bl	8008244 <HAL_UART_Transmit>
 8003aac:	f000 ff54 	bl	8004958 <Error_Handler>
      }
      if (bmp390_set_odr(&bmp390_handle, BMP390_ODR_25_HZ) != 0) { // 25 Hz ODR
 8003ab0:	2103      	movs	r1, #3
 8003ab2:	4836      	ldr	r0, [pc, #216]	@ (8003b8c <main+0x56c>)
 8003ab4:	f7fe fc0e 	bl	80022d4 <bmp390_set_odr>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <main+0x4c0>
          sprintf(uart_buffer, "BMP390: Failed to set ODR\r\n");
 8003abe:	4944      	ldr	r1, [pc, #272]	@ (8003bd0 <main+0x5b0>)
 8003ac0:	482d      	ldr	r0, [pc, #180]	@ (8003b78 <main+0x558>)
 8003ac2:	f006 f8bb 	bl	8009c3c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8003ac6:	482c      	ldr	r0, [pc, #176]	@ (8003b78 <main+0x558>)
 8003ac8:	f7fc fbf2 	bl	80002b0 <strlen>
 8003acc:	4603      	mov	r3, r0
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	4928      	ldr	r1, [pc, #160]	@ (8003b78 <main+0x558>)
 8003ad6:	4829      	ldr	r0, [pc, #164]	@ (8003b7c <main+0x55c>)
 8003ad8:	f004 fbb4 	bl	8008244 <HAL_UART_Transmit>
 8003adc:	f000 ff3c 	bl	8004958 <Error_Handler>
      }
      if (bmp390_set_pressure(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable pressure
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	482a      	ldr	r0, [pc, #168]	@ (8003b8c <main+0x56c>)
 8003ae4:	f7fe fa6e 	bl	8001fc4 <bmp390_set_pressure>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d010      	beq.n	8003b10 <main+0x4f0>
          sprintf(uart_buffer, "BMP390: Failed to enable pressure measurement\r\n");
 8003aee:	4939      	ldr	r1, [pc, #228]	@ (8003bd4 <main+0x5b4>)
 8003af0:	4821      	ldr	r0, [pc, #132]	@ (8003b78 <main+0x558>)
 8003af2:	f006 f8a3 	bl	8009c3c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8003af6:	4820      	ldr	r0, [pc, #128]	@ (8003b78 <main+0x558>)
 8003af8:	f7fc fbda 	bl	80002b0 <strlen>
 8003afc:	4603      	mov	r3, r0
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
 8003b04:	491c      	ldr	r1, [pc, #112]	@ (8003b78 <main+0x558>)
 8003b06:	481d      	ldr	r0, [pc, #116]	@ (8003b7c <main+0x55c>)
 8003b08:	f004 fb9c 	bl	8008244 <HAL_UART_Transmit>
 8003b0c:	f000 ff24 	bl	8004958 <Error_Handler>
      }
      if (bmp390_set_temperature(&bmp390_handle, BMP390_BOOL_TRUE) != 0) { // Enable temperature
 8003b10:	2101      	movs	r1, #1
 8003b12:	481e      	ldr	r0, [pc, #120]	@ (8003b8c <main+0x56c>)
 8003b14:	f7fe faa2 	bl	800205c <bmp390_set_temperature>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d010      	beq.n	8003b40 <main+0x520>
          sprintf(uart_buffer, "BMP390: Failed to enable temperature measurement\r\n");
 8003b1e:	492e      	ldr	r1, [pc, #184]	@ (8003bd8 <main+0x5b8>)
 8003b20:	4815      	ldr	r0, [pc, #84]	@ (8003b78 <main+0x558>)
 8003b22:	f006 f88b 	bl	8009c3c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8003b26:	4814      	ldr	r0, [pc, #80]	@ (8003b78 <main+0x558>)
 8003b28:	f7fc fbc2 	bl	80002b0 <strlen>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	4910      	ldr	r1, [pc, #64]	@ (8003b78 <main+0x558>)
 8003b36:	4811      	ldr	r0, [pc, #68]	@ (8003b7c <main+0x55c>)
 8003b38:	f004 fb84 	bl	8008244 <HAL_UART_Transmit>
 8003b3c:	f000 ff0c 	bl	8004958 <Error_Handler>
      }
      if (bmp390_set_mode(&bmp390_handle, BMP390_MODE_NORMAL_MODE) != 0) {
 8003b40:	2103      	movs	r1, #3
 8003b42:	4812      	ldr	r0, [pc, #72]	@ (8003b8c <main+0x56c>)
 8003b44:	f7fe fada 	bl	80020fc <bmp390_set_mode>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d048      	beq.n	8003be0 <main+0x5c0>
          sprintf(uart_buffer, "BMP390: Failed to set normal mode!\r\n");
 8003b4e:	4923      	ldr	r1, [pc, #140]	@ (8003bdc <main+0x5bc>)
 8003b50:	4809      	ldr	r0, [pc, #36]	@ (8003b78 <main+0x558>)
 8003b52:	f006 f873 	bl	8009c3c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY); Error_Handler();
 8003b56:	4808      	ldr	r0, [pc, #32]	@ (8003b78 <main+0x558>)
 8003b58:	f7fc fbaa 	bl	80002b0 <strlen>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	4904      	ldr	r1, [pc, #16]	@ (8003b78 <main+0x558>)
 8003b66:	4805      	ldr	r0, [pc, #20]	@ (8003b7c <main+0x55c>)
 8003b68:	f004 fb6c 	bl	8008244 <HAL_UART_Transmit>
 8003b6c:	f000 fef4 	bl	8004958 <Error_Handler>
 8003b70:	e045      	b.n	8003bfe <main+0x5de>
 8003b72:	bf00      	nop
 8003b74:	0800d0a4 	.word	0x0800d0a4
 8003b78:	20000c40 	.word	0x20000c40
 8003b7c:	20000478 	.word	0x20000478
 8003b80:	200009e0 	.word	0x200009e0
 8003b84:	0800d0c8 	.word	0x0800d0c8
 8003b88:	0800d0f0 	.word	0x0800d0f0
 8003b8c:	200009f0 	.word	0x200009f0
 8003b90:	08003375 	.word	0x08003375
 8003b94:	08003385 	.word	0x08003385
 8003b98:	08003395 	.word	0x08003395
 8003b9c:	080033e1 	.word	0x080033e1
 8003ba0:	0800342d 	.word	0x0800342d
 8003ba4:	080034a1 	.word	0x080034a1
 8003ba8:	08003443 	.word	0x08003443
 8003bac:	08003453 	.word	0x08003453
 8003bb0:	08003463 	.word	0x08003463
 8003bb4:	08003481 	.word	0x08003481
 8003bb8:	0800d138 	.word	0x0800d138
 8003bbc:	0800d160 	.word	0x0800d160
 8003bc0:	0800d18c 	.word	0x0800d18c
 8003bc4:	0800d1bc 	.word	0x0800d1bc
 8003bc8:	0800d1d4 	.word	0x0800d1d4
 8003bcc:	0800d204 	.word	0x0800d204
 8003bd0:	0800d238 	.word	0x0800d238
 8003bd4:	0800d254 	.word	0x0800d254
 8003bd8:	0800d284 	.word	0x0800d284
 8003bdc:	0800d2b8 	.word	0x0800d2b8
      } else {
          sprintf(uart_buffer, "BMP390 configured for Normal Mode (P_OSR_x8, T_OSR_x1, ODR_25Hz).\r\n");
 8003be0:	49a3      	ldr	r1, [pc, #652]	@ (8003e70 <main+0x850>)
 8003be2:	48a4      	ldr	r0, [pc, #656]	@ (8003e74 <main+0x854>)
 8003be4:	f006 f82a 	bl	8009c3c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003be8:	48a2      	ldr	r0, [pc, #648]	@ (8003e74 <main+0x854>)
 8003bea:	f7fc fb61 	bl	80002b0 <strlen>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	499f      	ldr	r1, [pc, #636]	@ (8003e74 <main+0x854>)
 8003bf8:	489f      	ldr	r0, [pc, #636]	@ (8003e78 <main+0x858>)
 8003bfa:	f004 fb23 	bl	8008244 <HAL_UART_Transmit>
      }
  }

  HAL_Delay(200); // Wait for sensor to stabilize and take first readings after mode set
 8003bfe:	20c8      	movs	r0, #200	@ 0xc8
 8003c00:	f001 fa54 	bl	80050ac <HAL_Delay>

  float initial_pressure_pa_sum = 0;
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  float initial_temperature_c_sum = 0;
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int valid_calibration_readings = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  uint32_t cal_raw_p, cal_raw_t;
  float cal_p_pa, cal_t_c; // Pressure in Pa, Temp in Celsius

  sprintf(uart_buffer, "Calibrating BMP390 for altitude (takes a few readings)...\r\n");
 8003c1a:	4998      	ldr	r1, [pc, #608]	@ (8003e7c <main+0x85c>)
 8003c1c:	4895      	ldr	r0, [pc, #596]	@ (8003e74 <main+0x854>)
 8003c1e:	f006 f80d 	bl	8009c3c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003c22:	4894      	ldr	r0, [pc, #592]	@ (8003e74 <main+0x854>)
 8003c24:	f7fc fb44 	bl	80002b0 <strlen>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c30:	4990      	ldr	r1, [pc, #576]	@ (8003e74 <main+0x854>)
 8003c32:	4891      	ldr	r0, [pc, #580]	@ (8003e78 <main+0x858>)
 8003c34:	f004 fb06 	bl	8008244 <HAL_UART_Transmit>

  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c3e:	e063      	b.n	8003d08 <main+0x6e8>
      if (bmp390_read_temperature_pressure(&bmp390_handle, &cal_raw_t, &cal_t_c, &cal_raw_p, &cal_p_pa) == 0) {
 8003c40:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003c44:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003c48:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003c4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	4603      	mov	r3, r0
 8003c54:	488a      	ldr	r0, [pc, #552]	@ (8003e80 <main+0x860>)
 8003c56:	f7fe fcf1 	bl	800263c <bmp390_read_temperature_pressure>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d138      	bne.n	8003cd2 <main+0x6b2>
          initial_pressure_pa_sum += cal_p_pa;
 8003c60:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003c64:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c6c:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
          initial_temperature_c_sum += cal_t_c;
 8003c70:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003c74:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c7c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
          valid_calibration_readings++;
 8003c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c84:	3301      	adds	r3, #1
 8003c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
          sprintf(uart_buffer, "Calib reading %d: P=%.2f Pa, T=%.2f C\r\n", i + 1, cal_p_pa, cal_t_c);
 8003c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c8e:	1c5e      	adds	r6, r3, #1
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc fc78 	bl	8000588 <__aeabi_f2d>
 8003c98:	4604      	mov	r4, r0
 8003c9a:	460d      	mov	r5, r1
 8003c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc72 	bl	8000588 <__aeabi_f2d>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cac:	e9cd 4500 	strd	r4, r5, [sp]
 8003cb0:	4632      	mov	r2, r6
 8003cb2:	4974      	ldr	r1, [pc, #464]	@ (8003e84 <main+0x864>)
 8003cb4:	486f      	ldr	r0, [pc, #444]	@ (8003e74 <main+0x854>)
 8003cb6:	f005 ffc1 	bl	8009c3c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003cba:	486e      	ldr	r0, [pc, #440]	@ (8003e74 <main+0x854>)
 8003cbc:	f7fc faf8 	bl	80002b0 <strlen>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	496a      	ldr	r1, [pc, #424]	@ (8003e74 <main+0x854>)
 8003cca:	486b      	ldr	r0, [pc, #428]	@ (8003e78 <main+0x858>)
 8003ccc:	f004 faba 	bl	8008244 <HAL_UART_Transmit>
 8003cd0:	e012      	b.n	8003cf8 <main+0x6d8>
      } else {
          sprintf(uart_buffer, "Calibration reading %d failed.\r\n", i + 1);
 8003cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	461a      	mov	r2, r3
 8003cda:	496b      	ldr	r1, [pc, #428]	@ (8003e88 <main+0x868>)
 8003cdc:	4865      	ldr	r0, [pc, #404]	@ (8003e74 <main+0x854>)
 8003cde:	f005 ffad 	bl	8009c3c <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003ce2:	4864      	ldr	r0, [pc, #400]	@ (8003e74 <main+0x854>)
 8003ce4:	f7fc fae4 	bl	80002b0 <strlen>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	4960      	ldr	r1, [pc, #384]	@ (8003e74 <main+0x854>)
 8003cf2:	4861      	ldr	r0, [pc, #388]	@ (8003e78 <main+0x858>)
 8003cf4:	f004 faa6 	bl	8008244 <HAL_UART_Transmit>
      }
      HAL_Delay(100); // Delay between readings (adjust based on ODR if necessary)
 8003cf8:	2064      	movs	r0, #100	@ 0x64
 8003cfa:	f001 f9d7 	bl	80050ac <HAL_Delay>
  for (int i = 0; i < 5; i++) { // Take 5 readings for averaging
 8003cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d02:	3301      	adds	r3, #1
 8003d04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	dd97      	ble.n	8003c40 <main+0x620>
  }

  if (valid_calibration_readings > 0) {
 8003d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	dd4d      	ble.n	8003db4 <main+0x794>
      float avg_initial_pressure_pa = initial_pressure_pa_sum / valid_calibration_readings;
 8003d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d24:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8003d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d2c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
      float avg_initial_temperature_c = initial_temperature_c_sum / valid_calibration_readings;
 8003d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d3c:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8003d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d44:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
      float known_initial_altitude_m = 0.0f; // Assume starting at 0m altitude for calibration
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	673b      	str	r3, [r7, #112]	@ 0x70

      calibrate_sea_level_pressure_hpa(avg_initial_pressure_pa / 100.0f, known_initial_altitude_m); // Convert Pa to hPa
 8003d4e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003d52:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8003e8c <main+0x86c>
 8003d56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003d5a:	edd7 0a1c 	vldr	s1, [r7, #112]	@ 0x70
 8003d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d62:	f7ff fbcd 	bl	8003500 <calibrate_sea_level_pressure_hpa>

      sprintf(uart_buffer, "BMP390 Calibrated. Avg P: %.2f Pa, Avg T: %.2f C. Sea Level P: %.2f hPa\r\n",
 8003d66:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003d68:	f7fc fc0e 	bl	8000588 <__aeabi_f2d>
 8003d6c:	4680      	mov	r8, r0
 8003d6e:	4689      	mov	r9, r1
 8003d70:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003d72:	f7fc fc09 	bl	8000588 <__aeabi_f2d>
 8003d76:	4604      	mov	r4, r0
 8003d78:	460d      	mov	r5, r1
 8003d7a:	4b45      	ldr	r3, [pc, #276]	@ (8003e90 <main+0x870>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fc fc02 	bl	8000588 <__aeabi_f2d>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d8c:	e9cd 4500 	strd	r4, r5, [sp]
 8003d90:	4642      	mov	r2, r8
 8003d92:	464b      	mov	r3, r9
 8003d94:	493f      	ldr	r1, [pc, #252]	@ (8003e94 <main+0x874>)
 8003d96:	4837      	ldr	r0, [pc, #220]	@ (8003e74 <main+0x854>)
 8003d98:	f005 ff50 	bl	8009c3c <siprintf>
              avg_initial_pressure_pa, avg_initial_temperature_c, sea_level_pressure_hpa);
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003d9c:	4835      	ldr	r0, [pc, #212]	@ (8003e74 <main+0x854>)
 8003d9e:	f7fc fa87 	bl	80002b0 <strlen>
 8003da2:	4603      	mov	r3, r0
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	4932      	ldr	r1, [pc, #200]	@ (8003e74 <main+0x854>)
 8003dac:	4832      	ldr	r0, [pc, #200]	@ (8003e78 <main+0x858>)
 8003dae:	f004 fa49 	bl	8008244 <HAL_UART_Transmit>
 8003db2:	e011      	b.n	8003dd8 <main+0x7b8>
  } else {
      sprintf(uart_buffer, "BMP390 Calibration failed. Using default sea level pressure (1013.25 hPa).\r\n");
 8003db4:	4938      	ldr	r1, [pc, #224]	@ (8003e98 <main+0x878>)
 8003db6:	482f      	ldr	r0, [pc, #188]	@ (8003e74 <main+0x854>)
 8003db8:	f005 ff40 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003dbc:	482d      	ldr	r0, [pc, #180]	@ (8003e74 <main+0x854>)
 8003dbe:	f7fc fa77 	bl	80002b0 <strlen>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	492a      	ldr	r1, [pc, #168]	@ (8003e74 <main+0x854>)
 8003dcc:	482a      	ldr	r0, [pc, #168]	@ (8003e78 <main+0x858>)
 8003dce:	f004 fa39 	bl	8008244 <HAL_UART_Transmit>
      sea_level_pressure_hpa = 1013.25f; // Default
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e90 <main+0x870>)
 8003dd4:	4a31      	ldr	r2, [pc, #196]	@ (8003e9c <main+0x87c>)
 8003dd6:	601a      	str	r2, [r3, #0]
  }
  
  // Initialize ADXL375 high-g accelerometer
  sprintf(uart_buffer, "Initializing ADXL375 high-g accelerometer...\r\n");
 8003dd8:	4931      	ldr	r1, [pc, #196]	@ (8003ea0 <main+0x880>)
 8003dda:	4826      	ldr	r0, [pc, #152]	@ (8003e74 <main+0x854>)
 8003ddc:	f005 ff2e 	bl	8009c3c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003de0:	4824      	ldr	r0, [pc, #144]	@ (8003e74 <main+0x854>)
 8003de2:	f7fc fa65 	bl	80002b0 <strlen>
 8003de6:	4603      	mov	r3, r0
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
 8003dee:	4921      	ldr	r1, [pc, #132]	@ (8003e74 <main+0x854>)
 8003df0:	4821      	ldr	r0, [pc, #132]	@ (8003e78 <main+0x858>)
 8003df2:	f004 fa27 	bl	8008244 <HAL_UART_Transmit>
  
  adxl375_init();
 8003df6:	f7fd f957 	bl	80010a8 <adxl375_init>
  
  uint8_t adxl_id = adxl375_read(ADXL375_REG_DEVID);
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7fd f8f6 	bl	8000fec <adxl375_read>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (adxl_id == 0xE5) {
 8003e06:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003e0a:	2be5      	cmp	r3, #229	@ 0xe5
 8003e0c:	f040 8190 	bne.w	8004130 <main+0xb10>
      sprintf(uart_buffer, "ADXL375 initialized successfully. DEVID: 0x%02X (expected 0xE5)\r\n", adxl_id);
 8003e10:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003e14:	461a      	mov	r2, r3
 8003e16:	4923      	ldr	r1, [pc, #140]	@ (8003ea4 <main+0x884>)
 8003e18:	4816      	ldr	r0, [pc, #88]	@ (8003e74 <main+0x854>)
 8003e1a:	f005 ff0f 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003e1e:	4815      	ldr	r0, [pc, #84]	@ (8003e74 <main+0x854>)
 8003e20:	f7fc fa46 	bl	80002b0 <strlen>
 8003e24:	4603      	mov	r3, r0
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2c:	4911      	ldr	r1, [pc, #68]	@ (8003e74 <main+0x854>)
 8003e2e:	4812      	ldr	r0, [pc, #72]	@ (8003e78 <main+0x858>)
 8003e30:	f004 fa08 	bl	8008244 <HAL_UART_Transmit>
      
      // Calibrate ADXL375 - assume device is positioned so Z reads 1G, X/Y read 0G
      sprintf(uart_buffer, "Calibrating ADXL375... Please keep device still with Z-axis up.\r\n");
 8003e34:	491c      	ldr	r1, [pc, #112]	@ (8003ea8 <main+0x888>)
 8003e36:	480f      	ldr	r0, [pc, #60]	@ (8003e74 <main+0x854>)
 8003e38:	f005 ff00 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003e3c:	480d      	ldr	r0, [pc, #52]	@ (8003e74 <main+0x854>)
 8003e3e:	f7fc fa37 	bl	80002b0 <strlen>
 8003e42:	4603      	mov	r3, r0
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	490a      	ldr	r1, [pc, #40]	@ (8003e74 <main+0x854>)
 8003e4c:	480a      	ldr	r0, [pc, #40]	@ (8003e78 <main+0x858>)
 8003e4e:	f004 f9f9 	bl	8008244 <HAL_UART_Transmit>
      
      // Take 50 samples and average them
      int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      int16_t raw_x, raw_y, raw_z;
      const int cal_samples = 50;
 8003e64:	2332      	movs	r3, #50	@ 0x32
 8003e66:	66bb      	str	r3, [r7, #104]	@ 0x68
      
      for (int i = 0; i < cal_samples; i++) {
 8003e68:	2300      	movs	r3, #0
 8003e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e6c:	e057      	b.n	8003f1e <main+0x8fe>
 8003e6e:	bf00      	nop
 8003e70:	0800d2e0 	.word	0x0800d2e0
 8003e74:	20000c40 	.word	0x20000c40
 8003e78:	20000478 	.word	0x20000478
 8003e7c:	0800d324 	.word	0x0800d324
 8003e80:	200009f0 	.word	0x200009f0
 8003e84:	0800d360 	.word	0x0800d360
 8003e88:	0800d388 	.word	0x0800d388
 8003e8c:	42c80000 	.word	0x42c80000
 8003e90:	20000d40 	.word	0x20000d40
 8003e94:	0800d3ac 	.word	0x0800d3ac
 8003e98:	0800d3f8 	.word	0x0800d3f8
 8003e9c:	447d5000 	.word	0x447d5000
 8003ea0:	0800d448 	.word	0x0800d448
 8003ea4:	0800d478 	.word	0x0800d478
 8003ea8:	0800d4bc 	.word	0x0800d4bc
          adxl375_read_xyz(&raw_x, &raw_y, &raw_z);
 8003eac:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 8003eb0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003eb4:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fd f8b5 	bl	8001028 <adxl375_read_xyz>
          sum_x += raw_x;
 8003ebe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ec8:	4413      	add	r3, r2
 8003eca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          sum_y += raw_y;
 8003ece:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ed8:	4413      	add	r3, r2
 8003eda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          sum_z += raw_z;
 8003ede:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ee8:	4413      	add	r3, r2
 8003eea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          
          // Flash LED to show calibration in progress
          if (i % 10 == 0) {
 8003eee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ef0:	4b85      	ldr	r3, [pc, #532]	@ (8004108 <main+0xae8>)
 8003ef2:	fb83 2301 	smull	r2, r3, r3, r1
 8003ef6:	109a      	asrs	r2, r3, #2
 8003ef8:	17cb      	asrs	r3, r1, #31
 8003efa:	1ad2      	subs	r2, r2, r3
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	1aca      	subs	r2, r1, r3
 8003f06:	2a00      	cmp	r2, #0
 8003f08:	d103      	bne.n	8003f12 <main+0x8f2>
              HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	487f      	ldr	r0, [pc, #508]	@ (800410c <main+0xaec>)
 8003f0e:	f001 feea 	bl	8005ce6 <HAL_GPIO_TogglePin>
          }
          HAL_Delay(10);
 8003f12:	200a      	movs	r0, #10
 8003f14:	f001 f8ca 	bl	80050ac <HAL_Delay>
      for (int i = 0; i < cal_samples; i++) {
 8003f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f1e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003f20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f22:	429a      	cmp	r2, r3
 8003f24:	dbc2      	blt.n	8003eac <main+0x88c>
      }
      
      // Calculate average readings
      float avg_x = (float)sum_x / cal_samples;
 8003f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f40:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
      float avg_y = (float)sum_y / cal_samples;
 8003f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f5e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      float avg_z = (float)sum_z / cal_samples;
 8003f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f70:	ee07 3a90 	vmov	s15, r3
 8003f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f7c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      
      // Calculate offsets needed to make Z read 1G and X/Y read 0G
      // First, determine the expected 1G raw reading based on sensitivity
      float expected_1g_raw = 1000.0f / ADXL375_SENSITIVITY_MG_PER_LSB; // 1g = 1000mg
 8003f80:	4b63      	ldr	r3, [pc, #396]	@ (8004110 <main+0xaf0>)
 8003f82:	65bb      	str	r3, [r7, #88]	@ 0x58
      
      // Calculate the offset values (signed 8-bit, so max ±127)
      // Offset registers act in the opposite direction of the measurement
      int8_t offset_x = -(int8_t)(avg_x / 4.0f); // ADXL375 datasheet specifies 15.6mg per LSB for offset registers
 8003f84:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003f88:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f94:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f98:	793b      	ldrb	r3, [r7, #4]
 8003f9a:	b25b      	sxtb	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	425b      	negs	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      int8_t offset_y = -(int8_t)(avg_y / 4.0f);
 8003fa6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003faa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003fae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fb6:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fba:	793b      	ldrb	r3, [r7, #4]
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	425b      	negs	r3, r3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
      int8_t offset_z = -(int8_t)((avg_z - expected_1g_raw) / 4.0f);
 8003fc8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003fcc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003fd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fd4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003fd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fe0:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fe4:	793b      	ldrb	r3, [r7, #4]
 8003fe6:	b25b      	sxtb	r3, r3
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	425b      	negs	r3, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
      offset_x = (offset_x > 127) ? 127 : ((offset_x < -128) ? -128 : offset_x);
      offset_y = (offset_y > 127) ? 127 : ((offset_y < -128) ? -128 : offset_y);
      offset_z = (offset_z > 127) ? 127 : ((offset_z < -128) ? -128 : offset_z);
      
      // Write the offsets to the ADXL375
      adxl375_write_offsets(offset_x, offset_y, offset_z);
 8003ff2:	f997 2055 	ldrsb.w	r2, [r7, #85]	@ 0x55
 8003ff6:	f997 1056 	ldrsb.w	r1, [r7, #86]	@ 0x56
 8003ffa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd f86c 	bl	80010dc <adxl375_write_offsets>
      
      // Read back and verify the offsets
      int8_t read_offset_x, read_offset_y, read_offset_z;
      adxl375_read_offsets(&read_offset_x, &read_offset_y, &read_offset_z);
 8004004:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 8004008:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800400c:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 8004010:	4618      	mov	r0, r3
 8004012:	f7fd f87f 	bl	8001114 <adxl375_read_offsets>
      
      sprintf(uart_buffer, "ADXL375 Calibration Complete.\r\n");
 8004016:	493f      	ldr	r1, [pc, #252]	@ (8004114 <main+0xaf4>)
 8004018:	483f      	ldr	r0, [pc, #252]	@ (8004118 <main+0xaf8>)
 800401a:	f005 fe0f 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800401e:	483e      	ldr	r0, [pc, #248]	@ (8004118 <main+0xaf8>)
 8004020:	f7fc f946 	bl	80002b0 <strlen>
 8004024:	4603      	mov	r3, r0
 8004026:	b29a      	uxth	r2, r3
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	493a      	ldr	r1, [pc, #232]	@ (8004118 <main+0xaf8>)
 800402e:	483b      	ldr	r0, [pc, #236]	@ (800411c <main+0xafc>)
 8004030:	f004 f908 	bl	8008244 <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
              avg_x * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f),
 8004034:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004038:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8004120 <main+0xb00>
 800403c:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
 8004040:	ee17 0a90 	vmov	r0, s15
 8004044:	f7fc faa0 	bl	8000588 <__aeabi_f2d>
 8004048:	4680      	mov	r8, r0
 800404a:	4689      	mov	r9, r1
              avg_y * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f),
 800404c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004050:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8004120 <main+0xb00>
 8004054:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
 8004058:	ee17 0a90 	vmov	r0, s15
 800405c:	f7fc fa94 	bl	8000588 <__aeabi_f2d>
 8004060:	4604      	mov	r4, r0
 8004062:	460d      	mov	r5, r1
              avg_z * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f));
 8004064:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8004068:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004120 <main+0xb00>
 800406c:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_buffer, "  Avg Readings: X=%.2f, Y=%.2f, Z=%.2f\r\n", 
 8004070:	ee17 0a90 	vmov	r0, s15
 8004074:	f7fc fa88 	bl	8000588 <__aeabi_f2d>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004080:	e9cd 4500 	strd	r4, r5, [sp]
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	4926      	ldr	r1, [pc, #152]	@ (8004124 <main+0xb04>)
 800408a:	4823      	ldr	r0, [pc, #140]	@ (8004118 <main+0xaf8>)
 800408c:	f005 fdd6 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004090:	4821      	ldr	r0, [pc, #132]	@ (8004118 <main+0xaf8>)
 8004092:	f7fc f90d 	bl	80002b0 <strlen>
 8004096:	4603      	mov	r3, r0
 8004098:	b29a      	uxth	r2, r3
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	491e      	ldr	r1, [pc, #120]	@ (8004118 <main+0xaf8>)
 80040a0:	481e      	ldr	r0, [pc, #120]	@ (800411c <main+0xafc>)
 80040a2:	f004 f8cf 	bl	8008244 <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Applied Offsets: X=%d, Y=%d, Z=%d\r\n", offset_x, offset_y, offset_z);
 80040a6:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80040aa:	f997 1056 	ldrsb.w	r1, [r7, #86]	@ 0x56
 80040ae:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	460b      	mov	r3, r1
 80040b6:	491c      	ldr	r1, [pc, #112]	@ (8004128 <main+0xb08>)
 80040b8:	4817      	ldr	r0, [pc, #92]	@ (8004118 <main+0xaf8>)
 80040ba:	f005 fdbf 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80040be:	4816      	ldr	r0, [pc, #88]	@ (8004118 <main+0xaf8>)
 80040c0:	f7fc f8f6 	bl	80002b0 <strlen>
 80040c4:	4603      	mov	r3, r0
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	4912      	ldr	r1, [pc, #72]	@ (8004118 <main+0xaf8>)
 80040ce:	4813      	ldr	r0, [pc, #76]	@ (800411c <main+0xafc>)
 80040d0:	f004 f8b8 	bl	8008244 <HAL_UART_Transmit>
      
      sprintf(uart_buffer, "  Readback Offsets: X=%d, Y=%d, Z=%d\r\n", read_offset_x, read_offset_y, read_offset_z);
 80040d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80040d8:	461a      	mov	r2, r3
 80040da:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80040de:	4619      	mov	r1, r3
 80040e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	460b      	mov	r3, r1
 80040e8:	4910      	ldr	r1, [pc, #64]	@ (800412c <main+0xb0c>)
 80040ea:	480b      	ldr	r0, [pc, #44]	@ (8004118 <main+0xaf8>)
 80040ec:	f005 fda6 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80040f0:	4809      	ldr	r0, [pc, #36]	@ (8004118 <main+0xaf8>)
 80040f2:	f7fc f8dd 	bl	80002b0 <strlen>
 80040f6:	4603      	mov	r3, r0
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
 80040fe:	4906      	ldr	r1, [pc, #24]	@ (8004118 <main+0xaf8>)
 8004100:	4806      	ldr	r0, [pc, #24]	@ (800411c <main+0xafc>)
 8004102:	f004 f89f 	bl	8008244 <HAL_UART_Transmit>
 8004106:	e025      	b.n	8004154 <main+0xb34>
 8004108:	66666667 	.word	0x66666667
 800410c:	40020400 	.word	0x40020400
 8004110:	41a343eb 	.word	0x41a343eb
 8004114:	0800d500 	.word	0x0800d500
 8004118:	20000c40 	.word	0x20000c40
 800411c:	20000478 	.word	0x20000478
 8004120:	3d48b439 	.word	0x3d48b439
 8004124:	0800d520 	.word	0x0800d520
 8004128:	0800d54c 	.word	0x0800d54c
 800412c:	0800d574 	.word	0x0800d574
      
  } else {
      sprintf(uart_buffer, "ADXL375 initialization FAILED! DEVID: 0x%02X (expected 0xE5)\r\n", adxl_id);
 8004130:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004134:	461a      	mov	r2, r3
 8004136:	49bc      	ldr	r1, [pc, #752]	@ (8004428 <main+0xe08>)
 8004138:	48bc      	ldr	r0, [pc, #752]	@ (800442c <main+0xe0c>)
 800413a:	f005 fd7f 	bl	8009c3c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800413e:	48bb      	ldr	r0, [pc, #748]	@ (800442c <main+0xe0c>)
 8004140:	f7fc f8b6 	bl	80002b0 <strlen>
 8004144:	4603      	mov	r3, r0
 8004146:	b29a      	uxth	r2, r3
 8004148:	f04f 33ff 	mov.w	r3, #4294967295
 800414c:	49b7      	ldr	r1, [pc, #732]	@ (800442c <main+0xe0c>)
 800414e:	48b8      	ldr	r0, [pc, #736]	@ (8004430 <main+0xe10>)
 8004150:	f004 f878 	bl	8008244 <HAL_UART_Transmit>
  }
  
  // Turn on LED to indicate ready state
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET); // LD2 is usually green or yellow.
 8004154:	2201      	movs	r2, #1
 8004156:	2180      	movs	r1, #128	@ 0x80
 8004158:	48b6      	ldr	r0, [pc, #728]	@ (8004434 <main+0xe14>)
 800415a:	f001 fdab 	bl	8005cb4 <HAL_GPIO_WritePin>
    float pressure_pa, temperature_c;
    float altitude_m;

    // Read LSM6DSO data
    uint8_t reg_lsm;
    lsm6dso_status_reg_get(&dev_ctx, &reg_lsm);
 800415e:	f107 030f 	add.w	r3, r7, #15
 8004162:	4619      	mov	r1, r3
 8004164:	48b4      	ldr	r0, [pc, #720]	@ (8004438 <main+0xe18>)
 8004166:	f7fe ff3f 	bl	8002fe8 <lsm6dso_status_reg_get>

    if (reg_lsm & 0x01) { // Check XLDA bit
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80b8 	beq.w	80042e6 <main+0xcc6>
      lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8004176:	49b1      	ldr	r1, [pc, #708]	@ (800443c <main+0xe1c>)
 8004178:	48af      	ldr	r0, [pc, #700]	@ (8004438 <main+0xe18>)
 800417a:	f7fe ff8e 	bl	800309a <lsm6dso_acceleration_raw_get>
      acceleration_mg[0] = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[0]);
 800417e:	4baf      	ldr	r3, [pc, #700]	@ (800443c <main+0xe1c>)
 8004180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fa19 	bl	80035bc <lsm6dso_from_fs16g_to_mg>
 800418a:	eef0 7a40 	vmov.f32	s15, s0
 800418e:	4bac      	ldr	r3, [pc, #688]	@ (8004440 <main+0xe20>)
 8004190:	edc3 7a00 	vstr	s15, [r3]
      acceleration_mg[1] = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[1]);
 8004194:	4ba9      	ldr	r3, [pc, #676]	@ (800443c <main+0xe1c>)
 8004196:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fa0e 	bl	80035bc <lsm6dso_from_fs16g_to_mg>
 80041a0:	eef0 7a40 	vmov.f32	s15, s0
 80041a4:	4ba6      	ldr	r3, [pc, #664]	@ (8004440 <main+0xe20>)
 80041a6:	edc3 7a01 	vstr	s15, [r3, #4]
      acceleration_mg[2] = lsm6dso_from_fs16g_to_mg(data_raw_acceleration[2]);
 80041aa:	4ba4      	ldr	r3, [pc, #656]	@ (800443c <main+0xe1c>)
 80041ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fa03 	bl	80035bc <lsm6dso_from_fs16g_to_mg>
 80041b6:	eef0 7a40 	vmov.f32	s15, s0
 80041ba:	4ba1      	ldr	r3, [pc, #644]	@ (8004440 <main+0xe20>)
 80041bc:	edc3 7a02 	vstr	s15, [r3, #8]

      sprintf(uart_buffer, "LSM6DSO Acc: X=%.2f mg, Y=%.2f mg, Z=%.2f mg",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80041c0:	4b9f      	ldr	r3, [pc, #636]	@ (8004440 <main+0xe20>)
 80041c2:	681b      	ldr	r3, [r3, #0]
      sprintf(uart_buffer, "LSM6DSO Acc: X=%.2f mg, Y=%.2f mg, Z=%.2f mg",
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fc f9df 	bl	8000588 <__aeabi_f2d>
 80041ca:	4680      	mov	r8, r0
 80041cc:	4689      	mov	r9, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80041ce:	4b9c      	ldr	r3, [pc, #624]	@ (8004440 <main+0xe20>)
 80041d0:	685b      	ldr	r3, [r3, #4]
      sprintf(uart_buffer, "LSM6DSO Acc: X=%.2f mg, Y=%.2f mg, Z=%.2f mg",
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fc f9d8 	bl	8000588 <__aeabi_f2d>
 80041d8:	4604      	mov	r4, r0
 80041da:	460d      	mov	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80041dc:	4b98      	ldr	r3, [pc, #608]	@ (8004440 <main+0xe20>)
 80041de:	689b      	ldr	r3, [r3, #8]
      sprintf(uart_buffer, "LSM6DSO Acc: X=%.2f mg, Y=%.2f mg, Z=%.2f mg",
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fc f9d1 	bl	8000588 <__aeabi_f2d>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041ee:	e9cd 4500 	strd	r4, r5, [sp]
 80041f2:	4642      	mov	r2, r8
 80041f4:	464b      	mov	r3, r9
 80041f6:	4993      	ldr	r1, [pc, #588]	@ (8004444 <main+0xe24>)
 80041f8:	488c      	ldr	r0, [pc, #560]	@ (800442c <main+0xe0c>)
 80041fa:	f005 fd1f 	bl	8009c3c <siprintf>
      // Check GDA bit for Gyro
      if (reg_lsm & 0x02) { // Check GDA (Gyroscope Data Available) bit
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d051      	beq.n	80042ac <main+0xc8c>
          lsm6dso_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8004208:	498f      	ldr	r1, [pc, #572]	@ (8004448 <main+0xe28>)
 800420a:	488b      	ldr	r0, [pc, #556]	@ (8004438 <main+0xe18>)
 800420c:	f7fe fefd 	bl	800300a <lsm6dso_angular_rate_raw_get>
          angular_rate_mdps[0] = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004210:	4b8d      	ldr	r3, [pc, #564]	@ (8004448 <main+0xe28>)
 8004212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff f9ea 	bl	80035f0 <lsm6dso_from_fs2000dps_to_mdps>
 800421c:	eef0 7a40 	vmov.f32	s15, s0
 8004220:	4b8a      	ldr	r3, [pc, #552]	@ (800444c <main+0xe2c>)
 8004222:	edc3 7a00 	vstr	s15, [r3]
          angular_rate_mdps[1] = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004226:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <main+0xe28>)
 8004228:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff f9df 	bl	80035f0 <lsm6dso_from_fs2000dps_to_mdps>
 8004232:	eef0 7a40 	vmov.f32	s15, s0
 8004236:	4b85      	ldr	r3, [pc, #532]	@ (800444c <main+0xe2c>)
 8004238:	edc3 7a01 	vstr	s15, [r3, #4]
          angular_rate_mdps[2] = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800423c:	4b82      	ldr	r3, [pc, #520]	@ (8004448 <main+0xe28>)
 800423e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff f9d4 	bl	80035f0 <lsm6dso_from_fs2000dps_to_mdps>
 8004248:	eef0 7a40 	vmov.f32	s15, s0
 800424c:	4b7f      	ldr	r3, [pc, #508]	@ (800444c <main+0xe2c>)
 800424e:	edc3 7a02 	vstr	s15, [r3, #8]
          // Append Gyro data to the existing Accel data in uart_buffer
          snprintf(uart_buffer + strlen(uart_buffer), sizeof(uart_buffer) - strlen(uart_buffer), " | Gyro: X=%.2f mdps, Y=%.2f mdps, Z=%.2f mdps\r\n",
 8004252:	4876      	ldr	r0, [pc, #472]	@ (800442c <main+0xe0c>)
 8004254:	f7fc f82c 	bl	80002b0 <strlen>
 8004258:	4603      	mov	r3, r0
 800425a:	4a74      	ldr	r2, [pc, #464]	@ (800442c <main+0xe0c>)
 800425c:	189e      	adds	r6, r3, r2
 800425e:	4873      	ldr	r0, [pc, #460]	@ (800442c <main+0xe0c>)
 8004260:	f7fc f826 	bl	80002b0 <strlen>
 8004264:	4603      	mov	r3, r0
 8004266:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
                  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800426a:	4b78      	ldr	r3, [pc, #480]	@ (800444c <main+0xe2c>)
 800426c:	681b      	ldr	r3, [r3, #0]
          snprintf(uart_buffer + strlen(uart_buffer), sizeof(uart_buffer) - strlen(uart_buffer), " | Gyro: X=%.2f mdps, Y=%.2f mdps, Z=%.2f mdps\r\n",
 800426e:	4618      	mov	r0, r3
 8004270:	f7fc f98a 	bl	8000588 <__aeabi_f2d>
 8004274:	4604      	mov	r4, r0
 8004276:	460d      	mov	r5, r1
                  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004278:	4b74      	ldr	r3, [pc, #464]	@ (800444c <main+0xe2c>)
 800427a:	685b      	ldr	r3, [r3, #4]
          snprintf(uart_buffer + strlen(uart_buffer), sizeof(uart_buffer) - strlen(uart_buffer), " | Gyro: X=%.2f mdps, Y=%.2f mdps, Z=%.2f mdps\r\n",
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc f983 	bl	8000588 <__aeabi_f2d>
 8004282:	4680      	mov	r8, r0
 8004284:	4689      	mov	r9, r1
                  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004286:	4b71      	ldr	r3, [pc, #452]	@ (800444c <main+0xe2c>)
 8004288:	689b      	ldr	r3, [r3, #8]
          snprintf(uart_buffer + strlen(uart_buffer), sizeof(uart_buffer) - strlen(uart_buffer), " | Gyro: X=%.2f mdps, Y=%.2f mdps, Z=%.2f mdps\r\n",
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc f97c 	bl	8000588 <__aeabi_f2d>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004298:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800429c:	e9cd 4500 	strd	r4, r5, [sp]
 80042a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004450 <main+0xe30>)
 80042a2:	4651      	mov	r1, sl
 80042a4:	4630      	mov	r0, r6
 80042a6:	f005 fc93 	bl	8009bd0 <sniprintf>
 80042aa:	e010      	b.n	80042ce <main+0xcae>
      } else {
          // Append "Gyro Not Ready" to the existing Accel data
          snprintf(uart_buffer + strlen(uart_buffer), sizeof(uart_buffer) - strlen(uart_buffer), " | Gyro: Not Ready\r\n");
 80042ac:	485f      	ldr	r0, [pc, #380]	@ (800442c <main+0xe0c>)
 80042ae:	f7fb ffff 	bl	80002b0 <strlen>
 80042b2:	4603      	mov	r3, r0
 80042b4:	4a5d      	ldr	r2, [pc, #372]	@ (800442c <main+0xe0c>)
 80042b6:	189c      	adds	r4, r3, r2
 80042b8:	485c      	ldr	r0, [pc, #368]	@ (800442c <main+0xe0c>)
 80042ba:	f7fb fff9 	bl	80002b0 <strlen>
 80042be:	4603      	mov	r3, r0
 80042c0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80042c4:	4a63      	ldr	r2, [pc, #396]	@ (8004454 <main+0xe34>)
 80042c6:	4619      	mov	r1, r3
 80042c8:	4620      	mov	r0, r4
 80042ca:	f005 fc81 	bl	8009bd0 <sniprintf>
      }
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80042ce:	4857      	ldr	r0, [pc, #348]	@ (800442c <main+0xe0c>)
 80042d0:	f7fb ffee 	bl	80002b0 <strlen>
 80042d4:	4603      	mov	r3, r0
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	4953      	ldr	r1, [pc, #332]	@ (800442c <main+0xe0c>)
 80042de:	4854      	ldr	r0, [pc, #336]	@ (8004430 <main+0xe10>)
 80042e0:	f003 ffb0 	bl	8008244 <HAL_UART_Transmit>
 80042e4:	e055      	b.n	8004392 <main+0xd72>
    } else {
        // Accelerometer data not ready, check if Gyro data is ready
        if (reg_lsm & 0x02) { // Check GDA (Gyroscope Data Available) bit
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d050      	beq.n	8004392 <main+0xd72>
            lsm6dso_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 80042f0:	4955      	ldr	r1, [pc, #340]	@ (8004448 <main+0xe28>)
 80042f2:	4851      	ldr	r0, [pc, #324]	@ (8004438 <main+0xe18>)
 80042f4:	f7fe fe89 	bl	800300a <lsm6dso_angular_rate_raw_get>
            angular_rate_mdps[0] = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80042f8:	4b53      	ldr	r3, [pc, #332]	@ (8004448 <main+0xe28>)
 80042fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff f976 	bl	80035f0 <lsm6dso_from_fs2000dps_to_mdps>
 8004304:	eef0 7a40 	vmov.f32	s15, s0
 8004308:	4b50      	ldr	r3, [pc, #320]	@ (800444c <main+0xe2c>)
 800430a:	edc3 7a00 	vstr	s15, [r3]
            angular_rate_mdps[1] = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800430e:	4b4e      	ldr	r3, [pc, #312]	@ (8004448 <main+0xe28>)
 8004310:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff f96b 	bl	80035f0 <lsm6dso_from_fs2000dps_to_mdps>
 800431a:	eef0 7a40 	vmov.f32	s15, s0
 800431e:	4b4b      	ldr	r3, [pc, #300]	@ (800444c <main+0xe2c>)
 8004320:	edc3 7a01 	vstr	s15, [r3, #4]
            angular_rate_mdps[2] = lsm6dso_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004324:	4b48      	ldr	r3, [pc, #288]	@ (8004448 <main+0xe28>)
 8004326:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f960 	bl	80035f0 <lsm6dso_from_fs2000dps_to_mdps>
 8004330:	eef0 7a40 	vmov.f32	s15, s0
 8004334:	4b45      	ldr	r3, [pc, #276]	@ (800444c <main+0xe2c>)
 8004336:	edc3 7a02 	vstr	s15, [r3, #8]
            snprintf(uart_buffer, sizeof(uart_buffer), "LSM6DSO Acc: Not Ready | Gyro: X=%.2f mdps, Y=%.2f mdps, Z=%.2f mdps\r\n",
                  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800433a:	4b44      	ldr	r3, [pc, #272]	@ (800444c <main+0xe2c>)
 800433c:	681b      	ldr	r3, [r3, #0]
            snprintf(uart_buffer, sizeof(uart_buffer), "LSM6DSO Acc: Not Ready | Gyro: X=%.2f mdps, Y=%.2f mdps, Z=%.2f mdps\r\n",
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc f922 	bl	8000588 <__aeabi_f2d>
 8004344:	4604      	mov	r4, r0
 8004346:	460d      	mov	r5, r1
                  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004348:	4b40      	ldr	r3, [pc, #256]	@ (800444c <main+0xe2c>)
 800434a:	685b      	ldr	r3, [r3, #4]
            snprintf(uart_buffer, sizeof(uart_buffer), "LSM6DSO Acc: Not Ready | Gyro: X=%.2f mdps, Y=%.2f mdps, Z=%.2f mdps\r\n",
 800434c:	4618      	mov	r0, r3
 800434e:	f7fc f91b 	bl	8000588 <__aeabi_f2d>
 8004352:	4680      	mov	r8, r0
 8004354:	4689      	mov	r9, r1
                  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004356:	4b3d      	ldr	r3, [pc, #244]	@ (800444c <main+0xe2c>)
 8004358:	689b      	ldr	r3, [r3, #8]
            snprintf(uart_buffer, sizeof(uart_buffer), "LSM6DSO Acc: Not Ready | Gyro: X=%.2f mdps, Y=%.2f mdps, Z=%.2f mdps\r\n",
 800435a:	4618      	mov	r0, r3
 800435c:	f7fc f914 	bl	8000588 <__aeabi_f2d>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004368:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800436c:	e9cd 4500 	strd	r4, r5, [sp]
 8004370:	4a39      	ldr	r2, [pc, #228]	@ (8004458 <main+0xe38>)
 8004372:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004376:	482d      	ldr	r0, [pc, #180]	@ (800442c <main+0xe0c>)
 8004378:	f005 fc2a 	bl	8009bd0 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800437c:	482b      	ldr	r0, [pc, #172]	@ (800442c <main+0xe0c>)
 800437e:	f7fb ff97 	bl	80002b0 <strlen>
 8004382:	4603      	mov	r3, r0
 8004384:	b29a      	uxth	r2, r3
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	4928      	ldr	r1, [pc, #160]	@ (800442c <main+0xe0c>)
 800438c:	4828      	ldr	r0, [pc, #160]	@ (8004430 <main+0xe10>)
 800438e:	f003 ff59 	bl	8008244 <HAL_UART_Transmit>
            // snprintf(uart_buffer, sizeof(uart_buffer), "LSM6DSO Acc/Gyro: Not Ready\r\n");
            // HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
        }
    }

    if (bmp390_read_temperature_pressure(&bmp390_handle, &raw_temperature, &temperature_c, &raw_pressure, &pressure_pa) == 0) {
 8004392:	f107 001c 	add.w	r0, r7, #28
 8004396:	f107 0210 	add.w	r2, r7, #16
 800439a:	f107 0118 	add.w	r1, r7, #24
 800439e:	f107 0314 	add.w	r3, r7, #20
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	4603      	mov	r3, r0
 80043a6:	482d      	ldr	r0, [pc, #180]	@ (800445c <main+0xe3c>)
 80043a8:	f7fe f948 	bl	800263c <bmp390_read_temperature_pressure>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d15a      	bne.n	8004468 <main+0xe48>
        float current_pressure_hpa = pressure_pa / 100.0f;
 80043b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80043b6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004460 <main+0xe40>
 80043ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043be:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        altitude_m = calculate_altitude_hpa(current_pressure_hpa);
 80043c2:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 80043c6:	f7ff f8c5 	bl	8003554 <calculate_altitude_hpa>
 80043ca:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c

        snprintf(uart_buffer, sizeof(uart_buffer), "BMP390 T: %.2f C, P: %.2f Pa, Alt: %.2f m\r\n",
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fc f8d9 	bl	8000588 <__aeabi_f2d>
 80043d6:	4604      	mov	r4, r0
 80043d8:	460d      	mov	r5, r1
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc f8d3 	bl	8000588 <__aeabi_f2d>
 80043e2:	4680      	mov	r8, r0
 80043e4:	4689      	mov	r9, r1
 80043e6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80043e8:	f7fc f8ce 	bl	8000588 <__aeabi_f2d>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043f4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80043f8:	e9cd 4500 	strd	r4, r5, [sp]
 80043fc:	4a19      	ldr	r2, [pc, #100]	@ (8004464 <main+0xe44>)
 80043fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004402:	480a      	ldr	r0, [pc, #40]	@ (800442c <main+0xe0c>)
 8004404:	f005 fbe4 	bl	8009bd0 <sniprintf>
                temperature_c, pressure_pa, altitude_m);
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004408:	4808      	ldr	r0, [pc, #32]	@ (800442c <main+0xe0c>)
 800440a:	f7fb ff51 	bl	80002b0 <strlen>
 800440e:	4603      	mov	r3, r0
 8004410:	b29a      	uxth	r2, r3
 8004412:	f04f 33ff 	mov.w	r3, #4294967295
 8004416:	4905      	ldr	r1, [pc, #20]	@ (800442c <main+0xe0c>)
 8004418:	4805      	ldr	r0, [pc, #20]	@ (8004430 <main+0xe10>)
 800441a:	f003 ff13 	bl	8008244 <HAL_UART_Transmit>
        
        HAL_GPIO_TogglePin(GPIOB, LD1_Pin); // Toggle LD1 (usually green) to show activity
 800441e:	2101      	movs	r1, #1
 8004420:	4804      	ldr	r0, [pc, #16]	@ (8004434 <main+0xe14>)
 8004422:	f001 fc60 	bl	8005ce6 <HAL_GPIO_TogglePin>
 8004426:	e03d      	b.n	80044a4 <main+0xe84>
 8004428:	0800d59c 	.word	0x0800d59c
 800442c:	20000c40 	.word	0x20000c40
 8004430:	20000478 	.word	0x20000478
 8004434:	40020400 	.word	0x40020400
 8004438:	200009e0 	.word	0x200009e0
 800443c:	20000d44 	.word	0x20000d44
 8004440:	20000d54 	.word	0x20000d54
 8004444:	0800d5dc 	.word	0x0800d5dc
 8004448:	20000d4c 	.word	0x20000d4c
 800444c:	20000d60 	.word	0x20000d60
 8004450:	0800d60c 	.word	0x0800d60c
 8004454:	0800d640 	.word	0x0800d640
 8004458:	0800d658 	.word	0x0800d658
 800445c:	200009f0 	.word	0x200009f0
 8004460:	42c80000 	.word	0x42c80000
 8004464:	0800d6a0 	.word	0x0800d6a0
    } else {
        sprintf(uart_buffer, "Error reading BMP390 (new driver)\r\n");
 8004468:	493a      	ldr	r1, [pc, #232]	@ (8004554 <main+0xf34>)
 800446a:	483b      	ldr	r0, [pc, #236]	@ (8004558 <main+0xf38>)
 800446c:	f005 fbe6 	bl	8009c3c <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004470:	4839      	ldr	r0, [pc, #228]	@ (8004558 <main+0xf38>)
 8004472:	f7fb ff1d 	bl	80002b0 <strlen>
 8004476:	4603      	mov	r3, r0
 8004478:	b29a      	uxth	r2, r3
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	4936      	ldr	r1, [pc, #216]	@ (8004558 <main+0xf38>)
 8004480:	4836      	ldr	r0, [pc, #216]	@ (800455c <main+0xf3c>)
 8004482:	f003 fedf 	bl	8008244 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET); // Turn on LD3 (usually red) for error
 8004486:	2201      	movs	r2, #1
 8004488:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800448c:	4834      	ldr	r0, [pc, #208]	@ (8004560 <main+0xf40>)
 800448e:	f001 fc11 	bl	8005cb4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004492:	2064      	movs	r0, #100	@ 0x64
 8004494:	f000 fe0a 	bl	80050ac <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8004498:	2200      	movs	r2, #0
 800449a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800449e:	4830      	ldr	r0, [pc, #192]	@ (8004560 <main+0xf40>)
 80044a0:	f001 fc08 	bl	8005cb4 <HAL_GPIO_WritePin>
    
    // Read ADXL375 high-g accelerometer (±200g range)
    int16_t adxl_raw_x, adxl_raw_y, adxl_raw_z;
    float adxl_x_g, adxl_y_g, adxl_z_g;
    
    adxl375_read_xyz(&adxl_raw_x, &adxl_raw_y, &adxl_raw_z);
 80044a4:	f107 0208 	add.w	r2, r7, #8
 80044a8:	f107 010a 	add.w	r1, r7, #10
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fc fdb9 	bl	8001028 <adxl375_read_xyz>
    
    // Convert to g (using 49 mg/LSB sensitivity from the header)
    adxl_x_g = (float)adxl_raw_x * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f); 
 80044b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004564 <main+0xf44>
 80044c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ca:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    adxl_y_g = (float)adxl_raw_y * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f);
 80044ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044da:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004564 <main+0xf44>
 80044de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044e2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    adxl_z_g = (float)adxl_raw_z * (ADXL375_SENSITIVITY_MG_PER_LSB / 1000.0f);
 80044e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f2:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004564 <main+0xf44>
 80044f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044fa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    
    snprintf(uart_buffer, sizeof(uart_buffer), "ADXL375 High-G: X=%.2f g, Y=%.2f g, Z=%.2f g\r\n", 
 80044fe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004500:	f7fc f842 	bl	8000588 <__aeabi_f2d>
 8004504:	4604      	mov	r4, r0
 8004506:	460d      	mov	r5, r1
 8004508:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800450a:	f7fc f83d 	bl	8000588 <__aeabi_f2d>
 800450e:	4680      	mov	r8, r0
 8004510:	4689      	mov	r9, r1
 8004512:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004514:	f7fc f838 	bl	8000588 <__aeabi_f2d>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004520:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004524:	e9cd 4500 	strd	r4, r5, [sp]
 8004528:	4a0f      	ldr	r2, [pc, #60]	@ (8004568 <main+0xf48>)
 800452a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800452e:	480a      	ldr	r0, [pc, #40]	@ (8004558 <main+0xf38>)
 8004530:	f005 fb4e 	bl	8009bd0 <sniprintf>
            adxl_x_g, adxl_y_g, adxl_z_g);
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8004534:	4808      	ldr	r0, [pc, #32]	@ (8004558 <main+0xf38>)
 8004536:	f7fb febb 	bl	80002b0 <strlen>
 800453a:	4603      	mov	r3, r0
 800453c:	b29a      	uxth	r2, r3
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	4905      	ldr	r1, [pc, #20]	@ (8004558 <main+0xf38>)
 8004544:	4805      	ldr	r0, [pc, #20]	@ (800455c <main+0xf3c>)
 8004546:	f003 fe7d 	bl	8008244 <HAL_UART_Transmit>
    
    HAL_Delay(40); // Corresponds to 25Hz ODR. (1000ms / 25Hz = 40ms)
 800454a:	2028      	movs	r0, #40	@ 0x28
 800454c:	f000 fdae 	bl	80050ac <HAL_Delay>
  {
 8004550:	e605      	b.n	800415e <main+0xb3e>
 8004552:	bf00      	nop
 8004554:	0800d6cc 	.word	0x0800d6cc
 8004558:	20000c40 	.word	0x20000c40
 800455c:	20000478 	.word	0x20000478
 8004560:	40020400 	.word	0x40020400
 8004564:	3d48b439 	.word	0x3d48b439
 8004568:	0800d6f0 	.word	0x0800d6f0

0800456c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b094      	sub	sp, #80	@ 0x50
 8004570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004572:	f107 0320 	add.w	r3, r7, #32
 8004576:	2230      	movs	r2, #48	@ 0x30
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f005 fc00 	bl	8009d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004590:	f002 fd40 	bl	8007014 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <SystemClock_Config+0xc8>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004598:	4a26      	ldr	r2, [pc, #152]	@ (8004634 <SystemClock_Config+0xc8>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459e:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a0:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <SystemClock_Config+0xc8>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80045ac:	4b22      	ldr	r3, [pc, #136]	@ (8004638 <SystemClock_Config+0xcc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80045b4:	4a20      	ldr	r2, [pc, #128]	@ (8004638 <SystemClock_Config+0xcc>)
 80045b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <SystemClock_Config+0xcc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80045cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045d2:	2302      	movs	r3, #2
 80045d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80045da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80045dc:	2304      	movs	r3, #4
 80045de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80045e0:	2348      	movs	r3, #72	@ 0x48
 80045e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045e4:	2302      	movs	r3, #2
 80045e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80045e8:	2303      	movs	r3, #3
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ec:	f107 0320 	add.w	r3, r7, #32
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 fd1f 	bl	8007034 <HAL_RCC_OscConfig>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80045fc:	f000 f9ac 	bl	8004958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004600:	230f      	movs	r3, #15
 8004602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004604:	2302      	movs	r3, #2
 8004606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800460c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004616:	f107 030c 	add.w	r3, r7, #12
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f002 ffad 	bl	800757c <HAL_RCC_ClockConfig>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004628:	f000 f996 	bl	8004958 <Error_Handler>
  }
}
 800462c:	bf00      	nop
 800462e:	3750      	adds	r7, #80	@ 0x50
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	40007000 	.word	0x40007000

0800463c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8004640:	4b1f      	ldr	r3, [pc, #124]	@ (80046c0 <MX_ETH_Init+0x84>)
 8004642:	4a20      	ldr	r2, [pc, #128]	@ (80046c4 <MX_ETH_Init+0x88>)
 8004644:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004646:	4b20      	ldr	r3, [pc, #128]	@ (80046c8 <MX_ETH_Init+0x8c>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800464c:	4b1e      	ldr	r3, [pc, #120]	@ (80046c8 <MX_ETH_Init+0x8c>)
 800464e:	2280      	movs	r2, #128	@ 0x80
 8004650:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8004652:	4b1d      	ldr	r3, [pc, #116]	@ (80046c8 <MX_ETH_Init+0x8c>)
 8004654:	22e1      	movs	r2, #225	@ 0xe1
 8004656:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8004658:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <MX_ETH_Init+0x8c>)
 800465a:	2200      	movs	r2, #0
 800465c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800465e:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <MX_ETH_Init+0x8c>)
 8004660:	2200      	movs	r2, #0
 8004662:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8004664:	4b18      	ldr	r3, [pc, #96]	@ (80046c8 <MX_ETH_Init+0x8c>)
 8004666:	2200      	movs	r2, #0
 8004668:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800466a:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <MX_ETH_Init+0x84>)
 800466c:	4a16      	ldr	r2, [pc, #88]	@ (80046c8 <MX_ETH_Init+0x8c>)
 800466e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004670:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <MX_ETH_Init+0x84>)
 8004672:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004676:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004678:	4b11      	ldr	r3, [pc, #68]	@ (80046c0 <MX_ETH_Init+0x84>)
 800467a:	4a14      	ldr	r2, [pc, #80]	@ (80046cc <MX_ETH_Init+0x90>)
 800467c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800467e:	4b10      	ldr	r3, [pc, #64]	@ (80046c0 <MX_ETH_Init+0x84>)
 8004680:	4a13      	ldr	r2, [pc, #76]	@ (80046d0 <MX_ETH_Init+0x94>)
 8004682:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8004684:	4b0e      	ldr	r3, [pc, #56]	@ (80046c0 <MX_ETH_Init+0x84>)
 8004686:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800468a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800468c:	480c      	ldr	r0, [pc, #48]	@ (80046c0 <MX_ETH_Init+0x84>)
 800468e:	f000 fe17 	bl	80052c0 <HAL_ETH_Init>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8004698:	f000 f95e 	bl	8004958 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800469c:	2238      	movs	r2, #56	@ 0x38
 800469e:	2100      	movs	r1, #0
 80046a0:	480c      	ldr	r0, [pc, #48]	@ (80046d4 <MX_ETH_Init+0x98>)
 80046a2:	f005 fb6d 	bl	8009d80 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80046a6:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <MX_ETH_Init+0x98>)
 80046a8:	2221      	movs	r2, #33	@ 0x21
 80046aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80046ac:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <MX_ETH_Init+0x98>)
 80046ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80046b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80046b4:	4b07      	ldr	r3, [pc, #28]	@ (80046d4 <MX_ETH_Init+0x98>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000374 	.word	0x20000374
 80046c4:	40028000 	.word	0x40028000
 80046c8:	20000d70 	.word	0x20000d70
 80046cc:	20000274 	.word	0x20000274
 80046d0:	200001d4 	.word	0x200001d4
 80046d4:	2000033c 	.word	0x2000033c

080046d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80046dc:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <MX_I2C1_Init+0x74>)
 80046de:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <MX_I2C1_Init+0x78>)
 80046e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80046e2:	4b1a      	ldr	r3, [pc, #104]	@ (800474c <MX_I2C1_Init+0x74>)
 80046e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <MX_I2C1_Init+0x7c>)
 80046e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80046e8:	4b18      	ldr	r3, [pc, #96]	@ (800474c <MX_I2C1_Init+0x74>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046ee:	4b17      	ldr	r3, [pc, #92]	@ (800474c <MX_I2C1_Init+0x74>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046f4:	4b15      	ldr	r3, [pc, #84]	@ (800474c <MX_I2C1_Init+0x74>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80046fa:	4b14      	ldr	r3, [pc, #80]	@ (800474c <MX_I2C1_Init+0x74>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004700:	4b12      	ldr	r3, [pc, #72]	@ (800474c <MX_I2C1_Init+0x74>)
 8004702:	2200      	movs	r2, #0
 8004704:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004706:	4b11      	ldr	r3, [pc, #68]	@ (800474c <MX_I2C1_Init+0x74>)
 8004708:	2200      	movs	r2, #0
 800470a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800470c:	4b0f      	ldr	r3, [pc, #60]	@ (800474c <MX_I2C1_Init+0x74>)
 800470e:	2200      	movs	r2, #0
 8004710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004712:	480e      	ldr	r0, [pc, #56]	@ (800474c <MX_I2C1_Init+0x74>)
 8004714:	f001 fb02 	bl	8005d1c <HAL_I2C_Init>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800471e:	f000 f91b 	bl	8004958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004722:	2100      	movs	r1, #0
 8004724:	4809      	ldr	r0, [pc, #36]	@ (800474c <MX_I2C1_Init+0x74>)
 8004726:	f002 faa3 	bl	8006c70 <HAL_I2CEx_ConfigAnalogFilter>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004730:	f000 f912 	bl	8004958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004734:	2100      	movs	r1, #0
 8004736:	4805      	ldr	r0, [pc, #20]	@ (800474c <MX_I2C1_Init+0x74>)
 8004738:	f002 fae5 	bl	8006d06 <HAL_I2CEx_ConfigDigitalFilter>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004742:	f000 f909 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000424 	.word	0x20000424
 8004750:	40005400 	.word	0x40005400
 8004754:	00808cd2 	.word	0x00808cd2

08004758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800475c:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 800475e:	4a15      	ldr	r2, [pc, #84]	@ (80047b4 <MX_USART3_UART_Init+0x5c>)
 8004760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004762:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 8004764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800476a:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 800476c:	2200      	movs	r2, #0
 800476e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004770:	4b0f      	ldr	r3, [pc, #60]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 8004772:	2200      	movs	r2, #0
 8004774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004776:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 8004778:	2200      	movs	r2, #0
 800477a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800477c:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 800477e:	220c      	movs	r2, #12
 8004780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004782:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 8004784:	2200      	movs	r2, #0
 8004786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004788:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 800478a:	2200      	movs	r2, #0
 800478c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800478e:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 8004790:	2200      	movs	r2, #0
 8004792:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004794:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 8004796:	2200      	movs	r2, #0
 8004798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800479a:	4805      	ldr	r0, [pc, #20]	@ (80047b0 <MX_USART3_UART_Init+0x58>)
 800479c:	f003 fd04 	bl	80081a8 <HAL_UART_Init>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80047a6:	f000 f8d7 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000478 	.word	0x20000478
 80047b4:	40004800 	.word	0x40004800

080047b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80047bc:	4b14      	ldr	r3, [pc, #80]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80047c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80047c4:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047c6:	2206      	movs	r2, #6
 80047c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80047ca:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047cc:	2202      	movs	r2, #2
 80047ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80047d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80047d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047d8:	2202      	movs	r2, #2
 80047da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80047dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047de:	2201      	movs	r2, #1
 80047e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80047e8:	4b09      	ldr	r3, [pc, #36]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80047ee:	4b08      	ldr	r3, [pc, #32]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80047f4:	4b06      	ldr	r3, [pc, #24]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80047fa:	4805      	ldr	r0, [pc, #20]	@ (8004810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80047fc:	f002 facf 	bl	8006d9e <HAL_PCD_Init>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8004806:	f000 f8a7 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000500 	.word	0x20000500

08004814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08c      	sub	sp, #48	@ 0x30
 8004818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481a:	f107 031c 	add.w	r3, r7, #28
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	609a      	str	r2, [r3, #8]
 8004826:	60da      	str	r2, [r3, #12]
 8004828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800482a:	4b47      	ldr	r3, [pc, #284]	@ (8004948 <MX_GPIO_Init+0x134>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	4a46      	ldr	r2, [pc, #280]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	6313      	str	r3, [r2, #48]	@ 0x30
 8004836:	4b44      	ldr	r3, [pc, #272]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004842:	4b41      	ldr	r3, [pc, #260]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004846:	4a40      	ldr	r2, [pc, #256]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800484c:	6313      	str	r3, [r2, #48]	@ 0x30
 800484e:	4b3e      	ldr	r3, [pc, #248]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800485a:	4b3b      	ldr	r3, [pc, #236]	@ (8004948 <MX_GPIO_Init+0x134>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485e:	4a3a      	ldr	r2, [pc, #232]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6313      	str	r3, [r2, #48]	@ 0x30
 8004866:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004872:	4b35      	ldr	r3, [pc, #212]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	4a34      	ldr	r2, [pc, #208]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	6313      	str	r3, [r2, #48]	@ 0x30
 800487e:	4b32      	ldr	r3, [pc, #200]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800488a:	4b2f      	ldr	r3, [pc, #188]	@ (8004948 <MX_GPIO_Init+0x134>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488e:	4a2e      	ldr	r2, [pc, #184]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004890:	f043 0308 	orr.w	r3, r3, #8
 8004894:	6313      	str	r3, [r2, #48]	@ 0x30
 8004896:	4b2c      	ldr	r3, [pc, #176]	@ (8004948 <MX_GPIO_Init+0x134>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80048a2:	4b29      	ldr	r3, [pc, #164]	@ (8004948 <MX_GPIO_Init+0x134>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	4a28      	ldr	r2, [pc, #160]	@ (8004948 <MX_GPIO_Init+0x134>)
 80048a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ae:	4b26      	ldr	r3, [pc, #152]	@ (8004948 <MX_GPIO_Init+0x134>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b6:	607b      	str	r3, [r7, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80048ba:	2200      	movs	r2, #0
 80048bc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80048c0:	4822      	ldr	r0, [pc, #136]	@ (800494c <MX_GPIO_Init+0x138>)
 80048c2:	f001 f9f7 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80048c6:	2200      	movs	r2, #0
 80048c8:	2140      	movs	r1, #64	@ 0x40
 80048ca:	4821      	ldr	r0, [pc, #132]	@ (8004950 <MX_GPIO_Init+0x13c>)
 80048cc:	f001 f9f2 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80048d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80048da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80048e0:	f107 031c 	add.w	r3, r7, #28
 80048e4:	4619      	mov	r1, r3
 80048e6:	481b      	ldr	r0, [pc, #108]	@ (8004954 <MX_GPIO_Init+0x140>)
 80048e8:	f001 f838 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80048ec:	f244 0381 	movw	r3, #16513	@ 0x4081
 80048f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048f2:	2301      	movs	r3, #1
 80048f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fa:	2300      	movs	r3, #0
 80048fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048fe:	f107 031c 	add.w	r3, r7, #28
 8004902:	4619      	mov	r1, r3
 8004904:	4811      	ldr	r0, [pc, #68]	@ (800494c <MX_GPIO_Init+0x138>)
 8004906:	f001 f829 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800490a:	2340      	movs	r3, #64	@ 0x40
 800490c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800490e:	2301      	movs	r3, #1
 8004910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004916:	2300      	movs	r3, #0
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800491a:	f107 031c 	add.w	r3, r7, #28
 800491e:	4619      	mov	r1, r3
 8004920:	480b      	ldr	r0, [pc, #44]	@ (8004950 <MX_GPIO_Init+0x13c>)
 8004922:	f001 f81b 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800492a:	2300      	movs	r3, #0
 800492c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004932:	f107 031c 	add.w	r3, r7, #28
 8004936:	4619      	mov	r1, r3
 8004938:	4805      	ldr	r0, [pc, #20]	@ (8004950 <MX_GPIO_Init+0x13c>)
 800493a:	f001 f80f 	bl	800595c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800493e:	bf00      	nop
 8004940:	3730      	adds	r7, #48	@ 0x30
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	40020400 	.word	0x40020400
 8004950:	40021800 	.word	0x40021800
 8004954:	40020800 	.word	0x40020800

08004958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800495c:	b672      	cpsid	i
}
 800495e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <Error_Handler+0x8>

08004964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	4b0f      	ldr	r3, [pc, #60]	@ (80049a8 <HAL_MspInit+0x44>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	4a0e      	ldr	r2, [pc, #56]	@ (80049a8 <HAL_MspInit+0x44>)
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004974:	6413      	str	r3, [r2, #64]	@ 0x40
 8004976:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <HAL_MspInit+0x44>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004982:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <HAL_MspInit+0x44>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004986:	4a08      	ldr	r2, [pc, #32]	@ (80049a8 <HAL_MspInit+0x44>)
 8004988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800498c:	6453      	str	r3, [r2, #68]	@ 0x44
 800498e:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <HAL_MspInit+0x44>)
 8004990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800

080049ac <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08e      	sub	sp, #56	@ 0x38
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004b04 <HAL_ETH_MspInit+0x158>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f040 8096 	bne.w	8004afc <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80049d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	4a4c      	ldr	r2, [pc, #304]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 80049d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049da:	6313      	str	r3, [r2, #48]	@ 0x30
 80049dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 80049de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e4:	623b      	str	r3, [r7, #32]
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	4b47      	ldr	r3, [pc, #284]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	4a46      	ldr	r2, [pc, #280]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 80049ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80049f4:	4b44      	ldr	r3, [pc, #272]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 80049f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4b41      	ldr	r3, [pc, #260]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	4a40      	ldr	r2, [pc, #256]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a18:	4b3b      	ldr	r3, [pc, #236]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a1e:	f043 0304 	orr.w	r3, r3, #4
 8004a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a24:	4b38      	ldr	r3, [pc, #224]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a30:	4b35      	ldr	r3, [pc, #212]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	4a34      	ldr	r2, [pc, #208]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a3c:	4b32      	ldr	r3, [pc, #200]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a48:	4b2f      	ldr	r3, [pc, #188]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a4e:	f043 0302 	orr.w	r3, r3, #2
 8004a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a54:	4b2c      	ldr	r3, [pc, #176]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a60:	4b29      	ldr	r3, [pc, #164]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	4a28      	ldr	r2, [pc, #160]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a6c:	4b26      	ldr	r3, [pc, #152]	@ (8004b08 <HAL_ETH_MspInit+0x15c>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004a78:	2332      	movs	r3, #50	@ 0x32
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a84:	2303      	movs	r3, #3
 8004a86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a88:	230b      	movs	r3, #11
 8004a8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a90:	4619      	mov	r1, r3
 8004a92:	481e      	ldr	r0, [pc, #120]	@ (8004b0c <HAL_ETH_MspInit+0x160>)
 8004a94:	f000 ff62 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004a98:	2386      	movs	r3, #134	@ 0x86
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004aa8:	230b      	movs	r3, #11
 8004aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4817      	ldr	r0, [pc, #92]	@ (8004b10 <HAL_ETH_MspInit+0x164>)
 8004ab4:	f000 ff52 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004ab8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004aca:	230b      	movs	r3, #11
 8004acc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	480f      	ldr	r0, [pc, #60]	@ (8004b14 <HAL_ETH_MspInit+0x168>)
 8004ad6:	f000 ff41 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004ada:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004aec:	230b      	movs	r3, #11
 8004aee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004af4:	4619      	mov	r1, r3
 8004af6:	4808      	ldr	r0, [pc, #32]	@ (8004b18 <HAL_ETH_MspInit+0x16c>)
 8004af8:	f000 ff30 	bl	800595c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8004afc:	bf00      	nop
 8004afe:	3738      	adds	r7, #56	@ 0x38
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40028000 	.word	0x40028000
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40020800 	.word	0x40020800
 8004b10:	40020000 	.word	0x40020000
 8004b14:	40020400 	.word	0x40020400
 8004b18:	40021800 	.word	0x40021800

08004b1c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b0aa      	sub	sp, #168	@ 0xa8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b24:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b34:	f107 0310 	add.w	r3, r7, #16
 8004b38:	2284      	movs	r2, #132	@ 0x84
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f005 f91f 	bl	8009d80 <memset>
  if(hi2c->Instance==I2C1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a22      	ldr	r2, [pc, #136]	@ (8004bd0 <HAL_I2C_MspInit+0xb4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d13c      	bne.n	8004bc6 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b52:	2300      	movs	r3, #0
 8004b54:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b56:	f107 0310 	add.w	r3, r7, #16
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f002 ff34 	bl	80079c8 <HAL_RCCEx_PeriphCLKConfig>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004b66:	f7ff fef7 	bl	8004958 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd4 <HAL_I2C_MspInit+0xb8>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	4a19      	ldr	r2, [pc, #100]	@ (8004bd4 <HAL_I2C_MspInit+0xb8>)
 8004b70:	f043 0302 	orr.w	r3, r3, #2
 8004b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b76:	4b17      	ldr	r3, [pc, #92]	@ (8004bd4 <HAL_I2C_MspInit+0xb8>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b8a:	2312      	movs	r3, #18
 8004b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b96:	2303      	movs	r3, #3
 8004b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	480b      	ldr	r0, [pc, #44]	@ (8004bd8 <HAL_I2C_MspInit+0xbc>)
 8004baa:	f000 fed7 	bl	800595c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bae:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <HAL_I2C_MspInit+0xb8>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	4a08      	ldr	r2, [pc, #32]	@ (8004bd4 <HAL_I2C_MspInit+0xb8>)
 8004bb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <HAL_I2C_MspInit+0xb8>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004bc6:	bf00      	nop
 8004bc8:	37a8      	adds	r7, #168	@ 0xa8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40005400 	.word	0x40005400
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40020400 	.word	0x40020400

08004bdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b0aa      	sub	sp, #168	@ 0xa8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	60da      	str	r2, [r3, #12]
 8004bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bf4:	f107 0310 	add.w	r3, r7, #16
 8004bf8:	2284      	movs	r2, #132	@ 0x84
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f005 f8bf 	bl	8009d80 <memset>
  if(huart->Instance==USART3)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a22      	ldr	r2, [pc, #136]	@ (8004c90 <HAL_UART_MspInit+0xb4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d13c      	bne.n	8004c86 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004c0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004c12:	2300      	movs	r3, #0
 8004c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c16:	f107 0310 	add.w	r3, r7, #16
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f002 fed4 	bl	80079c8 <HAL_RCCEx_PeriphCLKConfig>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c26:	f7ff fe97 	bl	8004958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c94 <HAL_UART_MspInit+0xb8>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	4a19      	ldr	r2, [pc, #100]	@ (8004c94 <HAL_UART_MspInit+0xb8>)
 8004c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c36:	4b17      	ldr	r3, [pc, #92]	@ (8004c94 <HAL_UART_MspInit+0xb8>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c42:	4b14      	ldr	r3, [pc, #80]	@ (8004c94 <HAL_UART_MspInit+0xb8>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	4a13      	ldr	r2, [pc, #76]	@ (8004c94 <HAL_UART_MspInit+0xb8>)
 8004c48:	f043 0308 	orr.w	r3, r3, #8
 8004c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c4e:	4b11      	ldr	r3, [pc, #68]	@ (8004c94 <HAL_UART_MspInit+0xb8>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004c5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	2302      	movs	r3, #2
 8004c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c74:	2307      	movs	r3, #7
 8004c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c7a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4805      	ldr	r0, [pc, #20]	@ (8004c98 <HAL_UART_MspInit+0xbc>)
 8004c82:	f000 fe6b 	bl	800595c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8004c86:	bf00      	nop
 8004c88:	37a8      	adds	r7, #168	@ 0xa8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40004800 	.word	0x40004800
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40020c00 	.word	0x40020c00

08004c9c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b0ac      	sub	sp, #176	@ 0xb0
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004cb4:	f107 0318 	add.w	r3, r7, #24
 8004cb8:	2284      	movs	r2, #132	@ 0x84
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f005 f85f 	bl	8009d80 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cca:	d159      	bne.n	8004d80 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004ccc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004cd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cd8:	f107 0318 	add.w	r3, r7, #24
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f002 fe73 	bl	80079c8 <HAL_RCCEx_PeriphCLKConfig>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004ce8:	f7ff fe36 	bl	8004958 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cec:	4b26      	ldr	r3, [pc, #152]	@ (8004d88 <HAL_PCD_MspInit+0xec>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf0:	4a25      	ldr	r2, [pc, #148]	@ (8004d88 <HAL_PCD_MspInit+0xec>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cf8:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <HAL_PCD_MspInit+0xec>)
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004d04:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8004d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004d1e:	230a      	movs	r3, #10
 8004d20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4818      	ldr	r0, [pc, #96]	@ (8004d8c <HAL_PCD_MspInit+0xf0>)
 8004d2c:	f000 fe16 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004d44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4810      	ldr	r0, [pc, #64]	@ (8004d8c <HAL_PCD_MspInit+0xf0>)
 8004d4c:	f000 fe06 	bl	800595c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004d50:	4b0d      	ldr	r3, [pc, #52]	@ (8004d88 <HAL_PCD_MspInit+0xec>)
 8004d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d54:	4a0c      	ldr	r2, [pc, #48]	@ (8004d88 <HAL_PCD_MspInit+0xec>)
 8004d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d5a:	6353      	str	r3, [r2, #52]	@ 0x34
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <HAL_PCD_MspInit+0xec>)
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <HAL_PCD_MspInit+0xec>)
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6c:	4a06      	ldr	r2, [pc, #24]	@ (8004d88 <HAL_PCD_MspInit+0xec>)
 8004d6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d72:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d74:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <HAL_PCD_MspInit+0xec>)
 8004d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8004d80:	bf00      	nop
 8004d82:	37b0      	adds	r7, #176	@ 0xb0
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40020000 	.word	0x40020000

08004d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <NMI_Handler+0x4>

08004d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d9c:	bf00      	nop
 8004d9e:	e7fd      	b.n	8004d9c <HardFault_Handler+0x4>

08004da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <MemManage_Handler+0x4>

08004da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dac:	bf00      	nop
 8004dae:	e7fd      	b.n	8004dac <BusFault_Handler+0x4>

08004db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004db4:	bf00      	nop
 8004db6:	e7fd      	b.n	8004db4 <UsageFault_Handler+0x4>

08004db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dca:	bf00      	nop
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004de6:	f000 f941 	bl	800506c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dea:	bf00      	nop
 8004dec:	bd80      	pop	{r7, pc}

08004dee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dee:	b480      	push	{r7}
 8004df0:	af00      	add	r7, sp, #0
  return 1;
 8004df2:	2301      	movs	r3, #1
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <_kill>:

int _kill(int pid, int sig)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e08:	f005 f80c 	bl	8009e24 <__errno>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2216      	movs	r2, #22
 8004e10:	601a      	str	r2, [r3, #0]
  return -1;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <_exit>:

void _exit (int status)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e26:	f04f 31ff 	mov.w	r1, #4294967295
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff ffe7 	bl	8004dfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e30:	bf00      	nop
 8004e32:	e7fd      	b.n	8004e30 <_exit+0x12>

08004e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e00a      	b.n	8004e5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e46:	f3af 8000 	nop.w
 8004e4a:	4601      	mov	r1, r0
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	60ba      	str	r2, [r7, #8]
 8004e52:	b2ca      	uxtb	r2, r1
 8004e54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	dbf0      	blt.n	8004e46 <_read+0x12>
  }

  return len;
 8004e64:	687b      	ldr	r3, [r7, #4]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b086      	sub	sp, #24
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	e009      	b.n	8004e94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	60ba      	str	r2, [r7, #8]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3301      	adds	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	dbf1      	blt.n	8004e80 <_write+0x12>
  }
  return len;
 8004e9c:	687b      	ldr	r3, [r7, #4]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <_close>:

int _close(int file)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ece:	605a      	str	r2, [r3, #4]
  return 0;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <_isatty>:

int _isatty(int file)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ee6:	2301      	movs	r3, #1
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f18:	4a14      	ldr	r2, [pc, #80]	@ (8004f6c <_sbrk+0x5c>)
 8004f1a:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <_sbrk+0x60>)
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f24:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <_sbrk+0x64>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f2c:	4b11      	ldr	r3, [pc, #68]	@ (8004f74 <_sbrk+0x64>)
 8004f2e:	4a12      	ldr	r2, [pc, #72]	@ (8004f78 <_sbrk+0x68>)
 8004f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f32:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <_sbrk+0x64>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d207      	bcs.n	8004f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f40:	f004 ff70 	bl	8009e24 <__errno>
 8004f44:	4603      	mov	r3, r0
 8004f46:	220c      	movs	r2, #12
 8004f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4e:	e009      	b.n	8004f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f50:	4b08      	ldr	r3, [pc, #32]	@ (8004f74 <_sbrk+0x64>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f56:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <_sbrk+0x64>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	4a05      	ldr	r2, [pc, #20]	@ (8004f74 <_sbrk+0x64>)
 8004f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20050000 	.word	0x20050000
 8004f70:	00000400 	.word	0x00000400
 8004f74:	20000d78 	.word	0x20000d78
 8004f78:	20000ed0 	.word	0x20000ed0

08004f7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f80:	4b06      	ldr	r3, [pc, #24]	@ (8004f9c <SystemInit+0x20>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f86:	4a05      	ldr	r2, [pc, #20]	@ (8004f9c <SystemInit+0x20>)
 8004f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f90:	bf00      	nop
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fa4:	f7ff ffea 	bl	8004f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fa8:	480c      	ldr	r0, [pc, #48]	@ (8004fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004faa:	490d      	ldr	r1, [pc, #52]	@ (8004fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004fac:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fb0:	e002      	b.n	8004fb8 <LoopCopyDataInit>

08004fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fb6:	3304      	adds	r3, #4

08004fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fbc:	d3f9      	bcc.n	8004fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8004fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8004fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fc4:	e001      	b.n	8004fca <LoopFillZerobss>

08004fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fc8:	3204      	adds	r2, #4

08004fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fcc:	d3fb      	bcc.n	8004fc6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8004fce:	f004 ff2f 	bl	8009e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fd2:	f7fe fb25 	bl	8003620 <main>
  bx  lr    
 8004fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fd8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fe0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004fe4:	0800dad4 	.word	0x0800dad4
  ldr r2, =_sbss
 8004fe8:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8004fec:	20000ecc 	.word	0x20000ecc

08004ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ff0:	e7fe      	b.n	8004ff0 <ADC_IRQHandler>

08004ff2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ff6:	2003      	movs	r0, #3
 8004ff8:	f000 f92e 	bl	8005258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f000 f805 	bl	800500c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005002:	f7ff fcaf 	bl	8004964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005014:	4b12      	ldr	r3, [pc, #72]	@ (8005060 <HAL_InitTick+0x54>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4b12      	ldr	r3, [pc, #72]	@ (8005064 <HAL_InitTick+0x58>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	4619      	mov	r1, r3
 800501e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005022:	fbb3 f3f1 	udiv	r3, r3, r1
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	4618      	mov	r0, r3
 800502c:	f000 f93b 	bl	80052a6 <HAL_SYSTICK_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e00e      	b.n	8005058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b0f      	cmp	r3, #15
 800503e:	d80a      	bhi.n	8005056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005040:	2200      	movs	r2, #0
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	f000 f911 	bl	800526e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800504c:	4a06      	ldr	r2, [pc, #24]	@ (8005068 <HAL_InitTick+0x5c>)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000000 	.word	0x20000000
 8005064:	20000008 	.word	0x20000008
 8005068:	20000004 	.word	0x20000004

0800506c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005070:	4b06      	ldr	r3, [pc, #24]	@ (800508c <HAL_IncTick+0x20>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <HAL_IncTick+0x24>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4413      	add	r3, r2
 800507c:	4a04      	ldr	r2, [pc, #16]	@ (8005090 <HAL_IncTick+0x24>)
 800507e:	6013      	str	r3, [r2, #0]
}
 8005080:	bf00      	nop
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000008 	.word	0x20000008
 8005090:	20000d7c 	.word	0x20000d7c

08005094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  return uwTick;
 8005098:	4b03      	ldr	r3, [pc, #12]	@ (80050a8 <HAL_GetTick+0x14>)
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000d7c 	.word	0x20000d7c

080050ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050b4:	f7ff ffee 	bl	8005094 <HAL_GetTick>
 80050b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d005      	beq.n	80050d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050c6:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <HAL_Delay+0x44>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050d2:	bf00      	nop
 80050d4:	f7ff ffde 	bl	8005094 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d8f7      	bhi.n	80050d4 <HAL_Delay+0x28>
  {
  }
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000008 	.word	0x20000008

080050f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005104:	4b0b      	ldr	r3, [pc, #44]	@ (8005134 <__NVIC_SetPriorityGrouping+0x40>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005110:	4013      	ands	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800511c:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <__NVIC_SetPriorityGrouping+0x44>)
 800511e:	4313      	orrs	r3, r2
 8005120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005122:	4a04      	ldr	r2, [pc, #16]	@ (8005134 <__NVIC_SetPriorityGrouping+0x40>)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	60d3      	str	r3, [r2, #12]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	e000ed00 	.word	0xe000ed00
 8005138:	05fa0000 	.word	0x05fa0000

0800513c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005140:	4b04      	ldr	r3, [pc, #16]	@ (8005154 <__NVIC_GetPriorityGrouping+0x18>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	0a1b      	lsrs	r3, r3, #8
 8005146:	f003 0307 	and.w	r3, r3, #7
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	6039      	str	r1, [r7, #0]
 8005162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005168:	2b00      	cmp	r3, #0
 800516a:	db0a      	blt.n	8005182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	490c      	ldr	r1, [pc, #48]	@ (80051a4 <__NVIC_SetPriority+0x4c>)
 8005172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005176:	0112      	lsls	r2, r2, #4
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	440b      	add	r3, r1
 800517c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005180:	e00a      	b.n	8005198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	4908      	ldr	r1, [pc, #32]	@ (80051a8 <__NVIC_SetPriority+0x50>)
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	3b04      	subs	r3, #4
 8005190:	0112      	lsls	r2, r2, #4
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	440b      	add	r3, r1
 8005196:	761a      	strb	r2, [r3, #24]
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000e100 	.word	0xe000e100
 80051a8:	e000ed00 	.word	0xe000ed00

080051ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b089      	sub	sp, #36	@ 0x24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f1c3 0307 	rsb	r3, r3, #7
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	bf28      	it	cs
 80051ca:	2304      	movcs	r3, #4
 80051cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d902      	bls.n	80051dc <NVIC_EncodePriority+0x30>
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3b03      	subs	r3, #3
 80051da:	e000      	b.n	80051de <NVIC_EncodePriority+0x32>
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43da      	mvns	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	401a      	ands	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f4:	f04f 31ff 	mov.w	r1, #4294967295
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	fa01 f303 	lsl.w	r3, r1, r3
 80051fe:	43d9      	mvns	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005204:	4313      	orrs	r3, r2
         );
}
 8005206:	4618      	mov	r0, r3
 8005208:	3724      	adds	r7, #36	@ 0x24
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3b01      	subs	r3, #1
 8005220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005224:	d301      	bcc.n	800522a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005226:	2301      	movs	r3, #1
 8005228:	e00f      	b.n	800524a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800522a:	4a0a      	ldr	r2, [pc, #40]	@ (8005254 <SysTick_Config+0x40>)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3b01      	subs	r3, #1
 8005230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005232:	210f      	movs	r1, #15
 8005234:	f04f 30ff 	mov.w	r0, #4294967295
 8005238:	f7ff ff8e 	bl	8005158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800523c:	4b05      	ldr	r3, [pc, #20]	@ (8005254 <SysTick_Config+0x40>)
 800523e:	2200      	movs	r2, #0
 8005240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005242:	4b04      	ldr	r3, [pc, #16]	@ (8005254 <SysTick_Config+0x40>)
 8005244:	2207      	movs	r2, #7
 8005246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	e000e010 	.word	0xe000e010

08005258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ff47 	bl	80050f4 <__NVIC_SetPriorityGrouping>
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800526e:	b580      	push	{r7, lr}
 8005270:	b086      	sub	sp, #24
 8005272:	af00      	add	r7, sp, #0
 8005274:	4603      	mov	r3, r0
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005280:	f7ff ff5c 	bl	800513c <__NVIC_GetPriorityGrouping>
 8005284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	6978      	ldr	r0, [r7, #20]
 800528c:	f7ff ff8e 	bl	80051ac <NVIC_EncodePriority>
 8005290:	4602      	mov	r2, r0
 8005292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff ff5d 	bl	8005158 <__NVIC_SetPriority>
}
 800529e:	bf00      	nop
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff ffb0 	bl	8005214 <SysTick_Config>
 80052b4:	4603      	mov	r3, r0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e086      	b.n	80053e0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff fb61 	bl	80049ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ea:	4b3f      	ldr	r3, [pc, #252]	@ (80053e8 <HAL_ETH_Init+0x128>)
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	4a3e      	ldr	r2, [pc, #248]	@ (80053e8 <HAL_ETH_Init+0x128>)
 80052f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052f6:	4b3c      	ldr	r3, [pc, #240]	@ (80053e8 <HAL_ETH_Init+0x128>)
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005302:	4b3a      	ldr	r3, [pc, #232]	@ (80053ec <HAL_ETH_Init+0x12c>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4a39      	ldr	r2, [pc, #228]	@ (80053ec <HAL_ETH_Init+0x12c>)
 8005308:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800530c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800530e:	4b37      	ldr	r3, [pc, #220]	@ (80053ec <HAL_ETH_Init+0x12c>)
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	4935      	ldr	r1, [pc, #212]	@ (80053ec <HAL_ETH_Init+0x12c>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800531c:	4b33      	ldr	r3, [pc, #204]	@ (80053ec <HAL_ETH_Init+0x12c>)
 800531e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005336:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005338:	f7ff feac 	bl	8005094 <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800533e:	e011      	b.n	8005364 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005340:	f7ff fea8 	bl	8005094 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800534e:	d909      	bls.n	8005364 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2204      	movs	r2, #4
 8005354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	22e0      	movs	r2, #224	@ 0xe0
 800535c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e03d      	b.n	80053e0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e4      	bne.n	8005340 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f97a 	bl	8005670 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa25 	bl	80057cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa7b 	bl	800587e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	461a      	mov	r2, r3
 800538e:	2100      	movs	r1, #0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f9e3 	bl	800575c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80053a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <HAL_ETH_Init+0x130>)
 80053b4:	430b      	orrs	r3, r1
 80053b6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80053ca:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2210      	movs	r2, #16
 80053da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40013800 	.word	0x40013800
 80053f0:	00020060 	.word	0x00020060

080053f4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4b53      	ldr	r3, [pc, #332]	@ (8005558 <ETH_SetMACConfig+0x164>)
 800540a:	4013      	ands	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	7b9b      	ldrb	r3, [r3, #14]
 8005412:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	7c12      	ldrb	r2, [r2, #16]
 8005418:	2a00      	cmp	r2, #0
 800541a:	d102      	bne.n	8005422 <ETH_SetMACConfig+0x2e>
 800541c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005420:	e000      	b.n	8005424 <ETH_SetMACConfig+0x30>
 8005422:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005424:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	7c52      	ldrb	r2, [r2, #17]
 800542a:	2a00      	cmp	r2, #0
 800542c:	d102      	bne.n	8005434 <ETH_SetMACConfig+0x40>
 800542e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005432:	e000      	b.n	8005436 <ETH_SetMACConfig+0x42>
 8005434:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005436:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800543c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	7fdb      	ldrb	r3, [r3, #31]
 8005442:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005444:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800544a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	7f92      	ldrb	r2, [r2, #30]
 8005450:	2a00      	cmp	r2, #0
 8005452:	d102      	bne.n	800545a <ETH_SetMACConfig+0x66>
 8005454:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005458:	e000      	b.n	800545c <ETH_SetMACConfig+0x68>
 800545a:	2200      	movs	r2, #0
                        macconf->Speed |
 800545c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	7f1b      	ldrb	r3, [r3, #28]
 8005462:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005464:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800546a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	791b      	ldrb	r3, [r3, #4]
 8005470:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005472:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	f892 2020 	ldrb.w	r2, [r2, #32]
 800547a:	2a00      	cmp	r2, #0
 800547c:	d102      	bne.n	8005484 <ETH_SetMACConfig+0x90>
 800547e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005482:	e000      	b.n	8005486 <ETH_SetMACConfig+0x92>
 8005484:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005486:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	7bdb      	ldrb	r3, [r3, #15]
 800548c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800548e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005494:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800549c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800549e:	4313      	orrs	r3, r2
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80054b6:	2001      	movs	r0, #1
 80054b8:	f7ff fdf8 	bl	80050ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80054d2:	4013      	ands	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054da:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80054e2:	2a00      	cmp	r2, #0
 80054e4:	d101      	bne.n	80054ea <ETH_SetMACConfig+0xf6>
 80054e6:	2280      	movs	r2, #128	@ 0x80
 80054e8:	e000      	b.n	80054ec <ETH_SetMACConfig+0xf8>
 80054ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80054ec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80054f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80054fa:	2a01      	cmp	r2, #1
 80054fc:	d101      	bne.n	8005502 <ETH_SetMACConfig+0x10e>
 80054fe:	2208      	movs	r2, #8
 8005500:	e000      	b.n	8005504 <ETH_SetMACConfig+0x110>
 8005502:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005504:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800550c:	2a01      	cmp	r2, #1
 800550e:	d101      	bne.n	8005514 <ETH_SetMACConfig+0x120>
 8005510:	2204      	movs	r2, #4
 8005512:	e000      	b.n	8005516 <ETH_SetMACConfig+0x122>
 8005514:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005516:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800551e:	2a01      	cmp	r2, #1
 8005520:	d101      	bne.n	8005526 <ETH_SetMACConfig+0x132>
 8005522:	2202      	movs	r2, #2
 8005524:	e000      	b.n	8005528 <ETH_SetMACConfig+0x134>
 8005526:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005528:	4313      	orrs	r3, r2
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005540:	2001      	movs	r0, #1
 8005542:	f7ff fdb3 	bl	80050ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	619a      	str	r2, [r3, #24]
}
 800554e:	bf00      	nop
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	fd20810f 	.word	0xfd20810f

0800555c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4b3d      	ldr	r3, [pc, #244]	@ (800566c <ETH_SetDMAConfig+0x110>)
 8005576:	4013      	ands	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	7b1b      	ldrb	r3, [r3, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <ETH_SetDMAConfig+0x2c>
 8005582:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005586:	e000      	b.n	800558a <ETH_SetDMAConfig+0x2e>
 8005588:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	7b5b      	ldrb	r3, [r3, #13]
 800558e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005590:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	7f52      	ldrb	r2, [r2, #29]
 8005596:	2a00      	cmp	r2, #0
 8005598:	d102      	bne.n	80055a0 <ETH_SetDMAConfig+0x44>
 800559a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800559e:	e000      	b.n	80055a2 <ETH_SetDMAConfig+0x46>
 80055a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80055a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	7b9b      	ldrb	r3, [r3, #14]
 80055a8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80055aa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80055b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	7f1b      	ldrb	r3, [r3, #28]
 80055b6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80055b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	7f9b      	ldrb	r3, [r3, #30]
 80055be:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80055c0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80055c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055ce:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80055d0:	4313      	orrs	r3, r2
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055e0:	461a      	mov	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80055f2:	2001      	movs	r0, #1
 80055f4:	f7ff fd5a 	bl	80050ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005600:	461a      	mov	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	791b      	ldrb	r3, [r3, #4]
 800560a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005610:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005616:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800561c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005624:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005626:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800562e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005634:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800563e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005642:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005650:	2001      	movs	r0, #1
 8005652:	f7ff fd2b 	bl	80050ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800565e:	461a      	mov	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6013      	str	r3, [r2, #0]
}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	f8de3f23 	.word	0xf8de3f23

08005670 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0a6      	sub	sp, #152	@ 0x98
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005684:	2300      	movs	r3, #0
 8005686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005688:	2300      	movs	r3, #0
 800568a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005694:	2300      	movs	r3, #0
 8005696:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80056b2:	2300      	movs	r3, #0
 80056b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80056c6:	2300      	movs	r3, #0
 80056c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80056d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80056de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80056e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80056ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff fe7f 	bl	80053f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80056fa:	2301      	movs	r3, #1
 80056fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005704:	2301      	movs	r3, #1
 8005706:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800570c:	2300      	movs	r3, #0
 800570e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005712:	2300      	movs	r3, #0
 8005714:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005718:	2300      	movs	r3, #0
 800571a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005722:	2301      	movs	r3, #1
 8005724:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005726:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800572a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800572c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005730:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005732:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005736:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800573e:	2300      	movs	r3, #0
 8005740:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005746:	f107 0308 	add.w	r3, r7, #8
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff05 	bl	800555c <ETH_SetDMAConfig>
}
 8005752:	bf00      	nop
 8005754:	3798      	adds	r7, #152	@ 0x98
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3305      	adds	r3, #5
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	3204      	adds	r2, #4
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	4b11      	ldr	r3, [pc, #68]	@ (80057c4 <ETH_MACAddressConfig+0x68>)
 800577e:	4413      	add	r3, r2
 8005780:	461a      	mov	r2, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3303      	adds	r3, #3
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	061a      	lsls	r2, r3, #24
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3302      	adds	r3, #2
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3301      	adds	r3, #1
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	4313      	orrs	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	7812      	ldrb	r2, [r2, #0]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <ETH_MACAddressConfig+0x6c>)
 80057ae:	4413      	add	r3, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	6013      	str	r3, [r2, #0]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40028040 	.word	0x40028040
 80057c8:	40028044 	.word	0x40028044

080057cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e03e      	b.n	8005858 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68d9      	ldr	r1, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	440b      	add	r3, r1
 80057ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2200      	movs	r2, #0
 80057f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2200      	movs	r2, #0
 8005802:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	3206      	adds	r2, #6
 800580c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d80c      	bhi.n	800583c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68d9      	ldr	r1, [r3, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	461a      	mov	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	e004      	b.n	8005846 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	461a      	mov	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b03      	cmp	r3, #3
 800585c:	d9bd      	bls.n	80057da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005870:	611a      	str	r2, [r3, #16]
}
 8005872:	bf00      	nop
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e048      	b.n	800591e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6919      	ldr	r1, [r3, #16]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	440b      	add	r3, r1
 800589c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2200      	movs	r2, #0
 80058ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2200      	movs	r2, #0
 80058ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2200      	movs	r2, #0
 80058c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80058c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	3212      	adds	r2, #18
 80058ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d80c      	bhi.n	800590e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6919      	ldr	r1, [r3, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	440b      	add	r3, r1
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	60da      	str	r2, [r3, #12]
 800590c:	e004      	b.n	8005918 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	461a      	mov	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d9b3      	bls.n	800588c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800594e:	60da      	str	r2, [r3, #12]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800595c:	b480      	push	{r7}
 800595e:	b089      	sub	sp, #36	@ 0x24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e175      	b.n	8005c68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800597c:	2201      	movs	r2, #1
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	429a      	cmp	r2, r3
 8005996:	f040 8164 	bne.w	8005c62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d005      	beq.n	80059b2 <HAL_GPIO_Init+0x56>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d130      	bne.n	8005a14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	2203      	movs	r2, #3
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	43db      	mvns	r3, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4013      	ands	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4313      	orrs	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059e8:	2201      	movs	r2, #1
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	43db      	mvns	r3, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4013      	ands	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 0201 	and.w	r2, r3, #1
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d017      	beq.n	8005a50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4013      	ands	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d123      	bne.n	8005aa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	08da      	lsrs	r2, r3, #3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3208      	adds	r2, #8
 8005a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	220f      	movs	r2, #15
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	08da      	lsrs	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3208      	adds	r2, #8
 8005a9e:	69b9      	ldr	r1, [r7, #24]
 8005aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2203      	movs	r2, #3
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 0203 	and.w	r2, r3, #3
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80be 	beq.w	8005c62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae6:	4b66      	ldr	r3, [pc, #408]	@ (8005c80 <HAL_GPIO_Init+0x324>)
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aea:	4a65      	ldr	r2, [pc, #404]	@ (8005c80 <HAL_GPIO_Init+0x324>)
 8005aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005af2:	4b63      	ldr	r3, [pc, #396]	@ (8005c80 <HAL_GPIO_Init+0x324>)
 8005af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005afe:	4a61      	ldr	r2, [pc, #388]	@ (8005c84 <HAL_GPIO_Init+0x328>)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	3302      	adds	r3, #2
 8005b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	220f      	movs	r2, #15
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a58      	ldr	r2, [pc, #352]	@ (8005c88 <HAL_GPIO_Init+0x32c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d037      	beq.n	8005b9a <HAL_GPIO_Init+0x23e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a57      	ldr	r2, [pc, #348]	@ (8005c8c <HAL_GPIO_Init+0x330>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_GPIO_Init+0x23a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a56      	ldr	r2, [pc, #344]	@ (8005c90 <HAL_GPIO_Init+0x334>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02b      	beq.n	8005b92 <HAL_GPIO_Init+0x236>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a55      	ldr	r2, [pc, #340]	@ (8005c94 <HAL_GPIO_Init+0x338>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d025      	beq.n	8005b8e <HAL_GPIO_Init+0x232>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a54      	ldr	r2, [pc, #336]	@ (8005c98 <HAL_GPIO_Init+0x33c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01f      	beq.n	8005b8a <HAL_GPIO_Init+0x22e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a53      	ldr	r2, [pc, #332]	@ (8005c9c <HAL_GPIO_Init+0x340>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d019      	beq.n	8005b86 <HAL_GPIO_Init+0x22a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a52      	ldr	r2, [pc, #328]	@ (8005ca0 <HAL_GPIO_Init+0x344>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_GPIO_Init+0x226>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a51      	ldr	r2, [pc, #324]	@ (8005ca4 <HAL_GPIO_Init+0x348>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00d      	beq.n	8005b7e <HAL_GPIO_Init+0x222>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a50      	ldr	r2, [pc, #320]	@ (8005ca8 <HAL_GPIO_Init+0x34c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <HAL_GPIO_Init+0x21e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a4f      	ldr	r2, [pc, #316]	@ (8005cac <HAL_GPIO_Init+0x350>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <HAL_GPIO_Init+0x21a>
 8005b72:	2309      	movs	r3, #9
 8005b74:	e012      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b76:	230a      	movs	r3, #10
 8005b78:	e010      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	e00e      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b7e:	2307      	movs	r3, #7
 8005b80:	e00c      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b82:	2306      	movs	r3, #6
 8005b84:	e00a      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b86:	2305      	movs	r3, #5
 8005b88:	e008      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b8a:	2304      	movs	r3, #4
 8005b8c:	e006      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e004      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e002      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	f002 0203 	and.w	r2, r2, #3
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	4093      	lsls	r3, r2
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bac:	4935      	ldr	r1, [pc, #212]	@ (8005c84 <HAL_GPIO_Init+0x328>)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	089b      	lsrs	r3, r3, #2
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bba:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb0 <HAL_GPIO_Init+0x354>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bde:	4a34      	ldr	r2, [pc, #208]	@ (8005cb0 <HAL_GPIO_Init+0x354>)
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005be4:	4b32      	ldr	r3, [pc, #200]	@ (8005cb0 <HAL_GPIO_Init+0x354>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c08:	4a29      	ldr	r2, [pc, #164]	@ (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c0e:	4b28      	ldr	r3, [pc, #160]	@ (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c32:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c38:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c5c:	4a14      	ldr	r2, [pc, #80]	@ (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3301      	adds	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	2b0f      	cmp	r3, #15
 8005c6c:	f67f ae86 	bls.w	800597c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	3724      	adds	r7, #36	@ 0x24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40023800 	.word	0x40023800
 8005c84:	40013800 	.word	0x40013800
 8005c88:	40020000 	.word	0x40020000
 8005c8c:	40020400 	.word	0x40020400
 8005c90:	40020800 	.word	0x40020800
 8005c94:	40020c00 	.word	0x40020c00
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40021400 	.word	0x40021400
 8005ca0:	40021800 	.word	0x40021800
 8005ca4:	40021c00 	.word	0x40021c00
 8005ca8:	40022000 	.word	0x40022000
 8005cac:	40022400 	.word	0x40022400
 8005cb0:	40013c00 	.word	0x40013c00

08005cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cc4:	787b      	ldrb	r3, [r7, #1]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cca:	887a      	ldrh	r2, [r7, #2]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005cd0:	e003      	b.n	8005cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cd2:	887b      	ldrh	r3, [r7, #2]
 8005cd4:	041a      	lsls	r2, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	619a      	str	r2, [r3, #24]
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005cf8:	887a      	ldrh	r2, [r7, #2]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	041a      	lsls	r2, r3, #16
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	43d9      	mvns	r1, r3
 8005d04:	887b      	ldrh	r3, [r7, #2]
 8005d06:	400b      	ands	r3, r1
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	619a      	str	r2, [r3, #24]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e08b      	b.n	8005e46 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fe feea 	bl	8004b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2224      	movs	r2, #36	@ 0x24
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0201 	bic.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d107      	bne.n	8005d96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d92:	609a      	str	r2, [r3, #8]
 8005d94:	e006      	b.n	8005da4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d108      	bne.n	8005dbe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dba:	605a      	str	r2, [r3, #4]
 8005dbc:	e007      	b.n	8005dce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6859      	ldr	r1, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e50 <HAL_I2C_Init+0x134>)
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69d9      	ldr	r1, [r3, #28]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	02008000 	.word	0x02008000

08005e54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	607a      	str	r2, [r7, #4]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	460b      	mov	r3, r1
 8005e62:	817b      	strh	r3, [r7, #10]
 8005e64:	4613      	mov	r3, r2
 8005e66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	f040 80fd 	bne.w	8006070 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_I2C_Master_Transmit+0x30>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e0f6      	b.n	8006072 <HAL_I2C_Master_Transmit+0x21e>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e8c:	f7ff f902 	bl	8005094 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	2319      	movs	r3, #25
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fcf0 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e0e1      	b.n	8006072 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2221      	movs	r2, #33	@ 0x21
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2210      	movs	r2, #16
 8005eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	893a      	ldrh	r2, [r7, #8]
 8005ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2bff      	cmp	r3, #255	@ 0xff
 8005ede:	d906      	bls.n	8005eee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	22ff      	movs	r2, #255	@ 0xff
 8005ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005ee6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e007      	b.n	8005efe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ef8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005efc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d024      	beq.n	8005f50 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	8979      	ldrh	r1, [r7, #10]
 8005f42:	4b4e      	ldr	r3, [pc, #312]	@ (800607c <HAL_I2C_Master_Transmit+0x228>)
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fe5f 	bl	8006c0c <I2C_TransferConfig>
 8005f4e:	e066      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	8979      	ldrh	r1, [r7, #10]
 8005f58:	4b48      	ldr	r3, [pc, #288]	@ (800607c <HAL_I2C_Master_Transmit+0x228>)
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 fe54 	bl	8006c0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f64:	e05b      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	6a39      	ldr	r1, [r7, #32]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 fce3 	bl	8006936 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e07b      	b.n	8006072 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d034      	beq.n	800601e <HAL_I2C_Master_Transmit+0x1ca>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d130      	bne.n	800601e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2180      	movs	r1, #128	@ 0x80
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fc5c 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e04d      	b.n	8006072 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2bff      	cmp	r3, #255	@ 0xff
 8005fde:	d90e      	bls.n	8005ffe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	22ff      	movs	r2, #255	@ 0xff
 8005fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	8979      	ldrh	r1, [r7, #10]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fe08 	bl	8006c0c <I2C_TransferConfig>
 8005ffc:	e00f      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800600c:	b2da      	uxtb	r2, r3
 800600e:	8979      	ldrh	r1, [r7, #10]
 8006010:	2300      	movs	r3, #0
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fdf7 	bl	8006c0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d19e      	bne.n	8005f66 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	6a39      	ldr	r1, [r7, #32]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 fcc9 	bl	80069c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e01a      	b.n	8006072 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2220      	movs	r2, #32
 8006042:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <HAL_I2C_Master_Transmit+0x22c>)
 8006050:	400b      	ands	r3, r1
 8006052:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	e000      	b.n	8006072 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006070:	2302      	movs	r3, #2
  }
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	80002000 	.word	0x80002000
 8006080:	fe00e800 	.word	0xfe00e800

08006084 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	4608      	mov	r0, r1
 800608e:	4611      	mov	r1, r2
 8006090:	461a      	mov	r2, r3
 8006092:	4603      	mov	r3, r0
 8006094:	817b      	strh	r3, [r7, #10]
 8006096:	460b      	mov	r3, r1
 8006098:	813b      	strh	r3, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	f040 80f9 	bne.w	800629e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_I2C_Mem_Write+0x34>
 80060b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0ed      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_I2C_Mem_Write+0x4e>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e0e6      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060da:	f7fe ffdb 	bl	8005094 <HAL_GetTick>
 80060de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2319      	movs	r3, #25
 80060e6:	2201      	movs	r2, #1
 80060e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fbc9 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0d1      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2221      	movs	r2, #33	@ 0x21
 8006100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2240      	movs	r2, #64	@ 0x40
 8006108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800611c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006124:	88f8      	ldrh	r0, [r7, #6]
 8006126:	893a      	ldrh	r2, [r7, #8]
 8006128:	8979      	ldrh	r1, [r7, #10]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	4603      	mov	r3, r0
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fad9 	bl	80066ec <I2C_RequestMemoryWrite>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0a9      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	2bff      	cmp	r3, #255	@ 0xff
 8006154:	d90e      	bls.n	8006174 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	22ff      	movs	r2, #255	@ 0xff
 800615a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006160:	b2da      	uxtb	r2, r3
 8006162:	8979      	ldrh	r1, [r7, #10]
 8006164:	2300      	movs	r3, #0
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fd4d 	bl	8006c0c <I2C_TransferConfig>
 8006172:	e00f      	b.n	8006194 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006182:	b2da      	uxtb	r2, r3
 8006184:	8979      	ldrh	r1, [r7, #10]
 8006186:	2300      	movs	r3, #0
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fd3c 	bl	8006c0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 fbcc 	bl	8006936 <I2C_WaitOnTXISFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e07b      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d034      	beq.n	800624c <HAL_I2C_Mem_Write+0x1c8>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d130      	bne.n	800624c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f0:	2200      	movs	r2, #0
 80061f2:	2180      	movs	r1, #128	@ 0x80
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fb45 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e04d      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2bff      	cmp	r3, #255	@ 0xff
 800620c:	d90e      	bls.n	800622c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	@ 0xff
 8006212:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006218:	b2da      	uxtb	r2, r3
 800621a:	8979      	ldrh	r1, [r7, #10]
 800621c:	2300      	movs	r3, #0
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fcf1 	bl	8006c0c <I2C_TransferConfig>
 800622a:	e00f      	b.n	800624c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623a:	b2da      	uxtb	r2, r3
 800623c:	8979      	ldrh	r1, [r7, #10]
 800623e:	2300      	movs	r3, #0
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fce0 	bl	8006c0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d19e      	bne.n	8006194 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fbb2 	bl	80069c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e01a      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2220      	movs	r2, #32
 8006270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6859      	ldr	r1, [r3, #4]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <HAL_I2C_Mem_Write+0x224>)
 800627e:	400b      	ands	r3, r1
 8006280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e000      	b.n	80062a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800629e:	2302      	movs	r3, #2
  }
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	fe00e800 	.word	0xfe00e800

080062ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	4608      	mov	r0, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	461a      	mov	r2, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	817b      	strh	r3, [r7, #10]
 80062be:	460b      	mov	r3, r1
 80062c0:	813b      	strh	r3, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	f040 80fd 	bne.w	80064ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_I2C_Mem_Read+0x34>
 80062da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d105      	bne.n	80062ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0f1      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_I2C_Mem_Read+0x4e>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e0ea      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006302:	f7fe fec7 	bl	8005094 <HAL_GetTick>
 8006306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2319      	movs	r3, #25
 800630e:	2201      	movs	r2, #1
 8006310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fab5 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0d5      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2222      	movs	r2, #34	@ 0x22
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2240      	movs	r2, #64	@ 0x40
 8006330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a3a      	ldr	r2, [r7, #32]
 800633e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006344:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800634c:	88f8      	ldrh	r0, [r7, #6]
 800634e:	893a      	ldrh	r2, [r7, #8]
 8006350:	8979      	ldrh	r1, [r7, #10]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4603      	mov	r3, r0
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fa19 	bl	8006794 <I2C_RequestMemoryRead>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0ad      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006378:	b29b      	uxth	r3, r3
 800637a:	2bff      	cmp	r3, #255	@ 0xff
 800637c:	d90e      	bls.n	800639c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006388:	b2da      	uxtb	r2, r3
 800638a:	8979      	ldrh	r1, [r7, #10]
 800638c:	4b52      	ldr	r3, [pc, #328]	@ (80064d8 <HAL_I2C_Mem_Read+0x22c>)
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fc39 	bl	8006c0c <I2C_TransferConfig>
 800639a:	e00f      	b.n	80063bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	8979      	ldrh	r1, [r7, #10]
 80063ae:	4b4a      	ldr	r3, [pc, #296]	@ (80064d8 <HAL_I2C_Mem_Read+0x22c>)
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fc28 	bl	8006c0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	2200      	movs	r2, #0
 80063c4:	2104      	movs	r1, #4
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fa5c 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e07c      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d034      	beq.n	800647c <HAL_I2C_Mem_Read+0x1d0>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d130      	bne.n	800647c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	2200      	movs	r2, #0
 8006422:	2180      	movs	r1, #128	@ 0x80
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fa2d 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e04d      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2bff      	cmp	r3, #255	@ 0xff
 800643c:	d90e      	bls.n	800645c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006448:	b2da      	uxtb	r2, r3
 800644a:	8979      	ldrh	r1, [r7, #10]
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fbd9 	bl	8006c0c <I2C_TransferConfig>
 800645a:	e00f      	b.n	800647c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800646a:	b2da      	uxtb	r2, r3
 800646c:	8979      	ldrh	r1, [r7, #10]
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fbc8 	bl	8006c0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d19a      	bne.n	80063bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fa9a 	bl	80069c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e01a      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2220      	movs	r2, #32
 80064a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6859      	ldr	r1, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <HAL_I2C_Mem_Read+0x230>)
 80064ae:	400b      	ands	r3, r1
 80064b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e000      	b.n	80064d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
  }
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	80002400 	.word	0x80002400
 80064dc:	fe00e800 	.word	0xfe00e800

080064e0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	@ 0x28
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	460b      	mov	r3, r1
 80064ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b20      	cmp	r3, #32
 8006502:	f040 80e9 	bne.w	80066d8 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006514:	d101      	bne.n	800651a <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8006516:	2302      	movs	r3, #2
 8006518:	e0df      	b.n	80066da <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_I2C_IsDeviceReady+0x48>
 8006524:	2302      	movs	r3, #2
 8006526:	e0d8      	b.n	80066da <HAL_I2C_IsDeviceReady+0x1fa>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2224      	movs	r2, #36	@ 0x24
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d105      	bne.n	8006552 <HAL_I2C_IsDeviceReady+0x72>
 8006546:	897b      	ldrh	r3, [r7, #10]
 8006548:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800654c:	4b65      	ldr	r3, [pc, #404]	@ (80066e4 <HAL_I2C_IsDeviceReady+0x204>)
 800654e:	4313      	orrs	r3, r2
 8006550:	e004      	b.n	800655c <HAL_I2C_IsDeviceReady+0x7c>
 8006552:	897b      	ldrh	r3, [r7, #10]
 8006554:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006558:	4b63      	ldr	r3, [pc, #396]	@ (80066e8 <HAL_I2C_IsDeviceReady+0x208>)
 800655a:	4313      	orrs	r3, r2
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006562:	f7fe fd97 	bl	8005094 <HAL_GetTick>
 8006566:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b20      	cmp	r3, #32
 8006574:	bf0c      	ite	eq
 8006576:	2301      	moveq	r3, #1
 8006578:	2300      	movne	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b10      	cmp	r3, #16
 800658a:	bf0c      	ite	eq
 800658c:	2301      	moveq	r3, #1
 800658e:	2300      	movne	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006594:	e034      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d01a      	beq.n	80065d4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800659e:	f7fe fd79 	bl	8005094 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d302      	bcc.n	80065b4 <HAL_I2C_IsDeviceReady+0xd4>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10f      	bne.n	80065d4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c0:	f043 0220 	orr.w	r2, r3, #32
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e082      	b.n	80066da <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b20      	cmp	r3, #32
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006600:	7fbb      	ldrb	r3, [r7, #30]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_I2C_IsDeviceReady+0x12c>
 8006606:	7f7b      	ldrb	r3, [r7, #29]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0c4      	beq.n	8006596 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b10      	cmp	r3, #16
 8006618:	d027      	beq.n	800666a <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2200      	movs	r2, #0
 8006622:	2120      	movs	r1, #32
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f92d 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00e      	beq.n	800664e <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006634:	2b04      	cmp	r3, #4
 8006636:	d107      	bne.n	8006648 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2220      	movs	r2, #32
 800663e:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	645a      	str	r2, [r3, #68]	@ 0x44
 8006646:	e026      	b.n	8006696 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e023      	b.n	8006696 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2220      	movs	r2, #32
 8006654:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	e037      	b.n	80066da <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2210      	movs	r2, #16
 8006670:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2200      	movs	r2, #0
 800667a:	2120      	movs	r1, #32
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f901 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e003      	b.n	8006696 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2220      	movs	r2, #32
 8006694:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	3301      	adds	r3, #1
 800669a:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d904      	bls.n	80066ae <HAL_I2C_IsDeviceReady+0x1ce>
 80066a4:	7ffb      	ldrb	r3, [r7, #31]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	f63f af43 	bhi.w	800653e <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c4:	f043 0220 	orr.w	r2, r3, #32
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	02002000 	.word	0x02002000
 80066e8:	02002800 	.word	0x02002800

080066ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	4608      	mov	r0, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	817b      	strh	r3, [r7, #10]
 80066fe:	460b      	mov	r3, r1
 8006700:	813b      	strh	r3, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	8979      	ldrh	r1, [r7, #10]
 800670c:	4b20      	ldr	r3, [pc, #128]	@ (8006790 <I2C_RequestMemoryWrite+0xa4>)
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fa79 	bl	8006c0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	69b9      	ldr	r1, [r7, #24]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f909 	bl	8006936 <I2C_WaitOnTXISFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e02c      	b.n	8006788 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d105      	bne.n	8006740 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006734:	893b      	ldrh	r3, [r7, #8]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	629a      	str	r2, [r3, #40]	@ 0x28
 800673e:	e015      	b.n	800676c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006740:	893b      	ldrh	r3, [r7, #8]
 8006742:	0a1b      	lsrs	r3, r3, #8
 8006744:	b29b      	uxth	r3, r3
 8006746:	b2da      	uxtb	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f8ef 	bl	8006936 <I2C_WaitOnTXISFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e012      	b.n	8006788 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006762:	893b      	ldrh	r3, [r7, #8]
 8006764:	b2da      	uxtb	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2200      	movs	r2, #0
 8006774:	2180      	movs	r1, #128	@ 0x80
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f884 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	80002000 	.word	0x80002000

08006794 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	817b      	strh	r3, [r7, #10]
 80067a6:	460b      	mov	r3, r1
 80067a8:	813b      	strh	r3, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	8979      	ldrh	r1, [r7, #10]
 80067b4:	4b20      	ldr	r3, [pc, #128]	@ (8006838 <I2C_RequestMemoryRead+0xa4>)
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	2300      	movs	r3, #0
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fa26 	bl	8006c0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	69b9      	ldr	r1, [r7, #24]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f8b6 	bl	8006936 <I2C_WaitOnTXISFlagUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e02c      	b.n	800682e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d105      	bne.n	80067e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067da:	893b      	ldrh	r3, [r7, #8]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80067e4:	e015      	b.n	8006812 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067e6:	893b      	ldrh	r3, [r7, #8]
 80067e8:	0a1b      	lsrs	r3, r3, #8
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	69b9      	ldr	r1, [r7, #24]
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f89c 	bl	8006936 <I2C_WaitOnTXISFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e012      	b.n	800682e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006808:	893b      	ldrh	r3, [r7, #8]
 800680a:	b2da      	uxtb	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2200      	movs	r2, #0
 800681a:	2140      	movs	r1, #64	@ 0x40
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f831 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	80002000 	.word	0x80002000

0800683c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b02      	cmp	r3, #2
 8006850:	d103      	bne.n	800685a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b01      	cmp	r3, #1
 8006866:	d007      	beq.n	8006878 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	619a      	str	r2, [r3, #24]
  }
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006894:	e03b      	b.n	800690e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f8d6 	bl	8006a4c <I2C_IsErrorOccurred>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e041      	b.n	800692e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d02d      	beq.n	800690e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b2:	f7fe fbef 	bl	8005094 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d122      	bne.n	800690e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4013      	ands	r3, r2
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d113      	bne.n	800690e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e00f      	b.n	800692e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4013      	ands	r3, r2
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	bf0c      	ite	eq
 800691e:	2301      	moveq	r3, #1
 8006920:	2300      	movne	r3, #0
 8006922:	b2db      	uxtb	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	429a      	cmp	r2, r3
 800692a:	d0b4      	beq.n	8006896 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006942:	e033      	b.n	80069ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 f87f 	bl	8006a4c <I2C_IsErrorOccurred>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e031      	b.n	80069bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d025      	beq.n	80069ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006960:	f7fe fb98 	bl	8005094 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	429a      	cmp	r2, r3
 800696e:	d302      	bcc.n	8006976 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d11a      	bne.n	80069ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b02      	cmp	r3, #2
 8006982:	d013      	beq.n	80069ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006988:	f043 0220 	orr.w	r2, r3, #32
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e007      	b.n	80069bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d1c4      	bne.n	8006944 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069d0:	e02f      	b.n	8006a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 f838 	bl	8006a4c <I2C_IsErrorOccurred>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e02d      	b.n	8006a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e6:	f7fe fb55 	bl	8005094 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d302      	bcc.n	80069fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d11a      	bne.n	8006a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d013      	beq.n	8006a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e007      	b.n	8006a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	d1c8      	bne.n	80069d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	@ 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d068      	beq.n	8006b4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2210      	movs	r2, #16
 8006a7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a80:	e049      	b.n	8006b16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d045      	beq.n	8006b16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a8a:	f7fe fb03 	bl	8005094 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d302      	bcc.n	8006aa0 <I2C_IsErrorOccurred+0x54>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d13a      	bne.n	8006b16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ab2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006abe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ac2:	d121      	bne.n	8006b08 <I2C_IsErrorOccurred+0xbc>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aca:	d01d      	beq.n	8006b08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006acc:	7cfb      	ldrb	r3, [r7, #19]
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d01a      	beq.n	8006b08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ae0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ae2:	f7fe fad7 	bl	8005094 <HAL_GetTick>
 8006ae6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ae8:	e00e      	b.n	8006b08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006aea:	f7fe fad3 	bl	8005094 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b19      	cmp	r3, #25
 8006af6:	d907      	bls.n	8006b08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	f043 0320 	orr.w	r3, r3, #32
 8006afe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006b06:	e006      	b.n	8006b16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d1e9      	bne.n	8006aea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d003      	beq.n	8006b2c <I2C_IsErrorOccurred+0xe0>
 8006b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0aa      	beq.n	8006a82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f043 0304 	orr.w	r3, r3, #4
 8006b42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	f043 0308 	orr.w	r3, r3, #8
 8006b84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	f043 0302 	orr.w	r3, r3, #2
 8006ba6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01c      	beq.n	8006bfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f7ff fe3b 	bl	800683c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6859      	ldr	r1, [r3, #4]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <I2C_IsErrorOccurred+0x1bc>)
 8006bd2:	400b      	ands	r3, r1
 8006bd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3728      	adds	r7, #40	@ 0x28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	fe00e800 	.word	0xfe00e800

08006c0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	607b      	str	r3, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	817b      	strh	r3, [r7, #10]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c1e:	897b      	ldrh	r3, [r7, #10]
 8006c20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c24:	7a7b      	ldrb	r3, [r7, #9]
 8006c26:	041b      	lsls	r3, r3, #16
 8006c28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c2c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c3a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	0d5b      	lsrs	r3, r3, #21
 8006c46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006c4a:	4b08      	ldr	r3, [pc, #32]	@ (8006c6c <I2C_TransferConfig+0x60>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	ea02 0103 	and.w	r1, r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	03ff63ff 	.word	0x03ff63ff

08006c70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d138      	bne.n	8006cf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e032      	b.n	8006cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2224      	movs	r2, #36	@ 0x24
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6819      	ldr	r1, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b085      	sub	sp, #20
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d139      	bne.n	8006d90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e033      	b.n	8006d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2224      	movs	r2, #36	@ 0x24
 8006d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0201 	bic.w	r2, r2, #1
 8006d48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e000      	b.n	8006d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b086      	sub	sp, #24
 8006da2:	af02      	add	r7, sp, #8
 8006da4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e108      	b.n	8006fc2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fd ff66 	bl	8004c9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dde:	d102      	bne.n	8006de6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 ff3c 	bl	8008c68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	7c1a      	ldrb	r2, [r3, #16]
 8006df8:	f88d 2000 	strb.w	r2, [sp]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e00:	f001 fed8 	bl	8008bb4 <USB_CoreInit>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0d5      	b.n	8006fc2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 ff34 	bl	8008c8a <USB_SetCurrentMode>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e0c6      	b.n	8006fc2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e34:	2300      	movs	r3, #0
 8006e36:	73fb      	strb	r3, [r7, #15]
 8006e38:	e04a      	b.n	8006ed0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e3a:	7bfa      	ldrb	r2, [r7, #15]
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	3315      	adds	r3, #21
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e4e:	7bfa      	ldrb	r2, [r7, #15]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	3314      	adds	r3, #20
 8006e5e:	7bfa      	ldrb	r2, [r7, #15]
 8006e60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e62:	7bfa      	ldrb	r2, [r7, #15]
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	b298      	uxth	r0, r3
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	332e      	adds	r3, #46	@ 0x2e
 8006e76:	4602      	mov	r2, r0
 8006e78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e7a:	7bfa      	ldrb	r2, [r7, #15]
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	3318      	adds	r3, #24
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e8e:	7bfa      	ldrb	r2, [r7, #15]
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	331c      	adds	r3, #28
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ea2:	7bfa      	ldrb	r2, [r7, #15]
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	3320      	adds	r3, #32
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006eb6:	7bfa      	ldrb	r2, [r7, #15]
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3324      	adds	r3, #36	@ 0x24
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	791b      	ldrb	r3, [r3, #4]
 8006ed4:	7bfa      	ldrb	r2, [r7, #15]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d3af      	bcc.n	8006e3a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]
 8006ede:	e044      	b.n	8006f6a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ee0:	7bfa      	ldrb	r2, [r7, #15]
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ef6:	7bfa      	ldrb	r2, [r7, #15]
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006f08:	7bfa      	ldrb	r2, [r7, #15]
 8006f0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f0c:	7bfa      	ldrb	r2, [r7, #15]
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006f1e:	2200      	movs	r2, #0
 8006f20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f22:	7bfa      	ldrb	r2, [r7, #15]
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f38:	7bfa      	ldrb	r2, [r7, #15]
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	3301      	adds	r3, #1
 8006f68:	73fb      	strb	r3, [r7, #15]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	791b      	ldrb	r3, [r3, #4]
 8006f6e:	7bfa      	ldrb	r2, [r7, #15]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d3b5      	bcc.n	8006ee0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	7c1a      	ldrb	r2, [r3, #16]
 8006f7c:	f88d 2000 	strb.w	r2, [sp]
 8006f80:	3304      	adds	r3, #4
 8006f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f84:	f001 fece 	bl	8008d24 <USB_DevInit>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e013      	b.n	8006fc2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	7b1b      	ldrb	r3, [r3, #12]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d102      	bne.n	8006fb6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f80b 	bl	8006fcc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f002 f889 	bl	80090d2 <USB_DevDisconnect>

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ffa:	4b05      	ldr	r3, [pc, #20]	@ (8007010 <HAL_PCDEx_ActivateLPM+0x44>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	10000003 	.word	0x10000003

08007014 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007018:	4b05      	ldr	r3, [pc, #20]	@ (8007030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a04      	ldr	r2, [pc, #16]	@ (8007030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800701e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007022:	6013      	str	r3, [r2, #0]
}
 8007024:	bf00      	nop
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40007000 	.word	0x40007000

08007034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e291      	b.n	800756e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8087 	beq.w	8007166 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007058:	4b96      	ldr	r3, [pc, #600]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 030c 	and.w	r3, r3, #12
 8007060:	2b04      	cmp	r3, #4
 8007062:	d00c      	beq.n	800707e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007064:	4b93      	ldr	r3, [pc, #588]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 030c 	and.w	r3, r3, #12
 800706c:	2b08      	cmp	r3, #8
 800706e:	d112      	bne.n	8007096 <HAL_RCC_OscConfig+0x62>
 8007070:	4b90      	ldr	r3, [pc, #576]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800707c:	d10b      	bne.n	8007096 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800707e:	4b8d      	ldr	r3, [pc, #564]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d06c      	beq.n	8007164 <HAL_RCC_OscConfig+0x130>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d168      	bne.n	8007164 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e26b      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800709e:	d106      	bne.n	80070ae <HAL_RCC_OscConfig+0x7a>
 80070a0:	4b84      	ldr	r3, [pc, #528]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a83      	ldr	r2, [pc, #524]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	e02e      	b.n	800710c <HAL_RCC_OscConfig+0xd8>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10c      	bne.n	80070d0 <HAL_RCC_OscConfig+0x9c>
 80070b6:	4b7f      	ldr	r3, [pc, #508]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a7e      	ldr	r2, [pc, #504]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	4b7c      	ldr	r3, [pc, #496]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a7b      	ldr	r2, [pc, #492]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e01d      	b.n	800710c <HAL_RCC_OscConfig+0xd8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070d8:	d10c      	bne.n	80070f4 <HAL_RCC_OscConfig+0xc0>
 80070da:	4b76      	ldr	r3, [pc, #472]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a75      	ldr	r2, [pc, #468]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	4b73      	ldr	r3, [pc, #460]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a72      	ldr	r2, [pc, #456]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	e00b      	b.n	800710c <HAL_RCC_OscConfig+0xd8>
 80070f4:	4b6f      	ldr	r3, [pc, #444]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a6e      	ldr	r2, [pc, #440]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	4b6c      	ldr	r3, [pc, #432]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a6b      	ldr	r2, [pc, #428]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800710a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d013      	beq.n	800713c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007114:	f7fd ffbe 	bl	8005094 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800711c:	f7fd ffba 	bl	8005094 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b64      	cmp	r3, #100	@ 0x64
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e21f      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800712e:	4b61      	ldr	r3, [pc, #388]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0f0      	beq.n	800711c <HAL_RCC_OscConfig+0xe8>
 800713a:	e014      	b.n	8007166 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fd ffaa 	bl	8005094 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007144:	f7fd ffa6 	bl	8005094 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b64      	cmp	r3, #100	@ 0x64
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e20b      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007156:	4b57      	ldr	r3, [pc, #348]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f0      	bne.n	8007144 <HAL_RCC_OscConfig+0x110>
 8007162:	e000      	b.n	8007166 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d069      	beq.n	8007246 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007172:	4b50      	ldr	r3, [pc, #320]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 030c 	and.w	r3, r3, #12
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800717e:	4b4d      	ldr	r3, [pc, #308]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 030c 	and.w	r3, r3, #12
 8007186:	2b08      	cmp	r3, #8
 8007188:	d11c      	bne.n	80071c4 <HAL_RCC_OscConfig+0x190>
 800718a:	4b4a      	ldr	r3, [pc, #296]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d116      	bne.n	80071c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007196:	4b47      	ldr	r3, [pc, #284]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_RCC_OscConfig+0x17a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d001      	beq.n	80071ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e1df      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ae:	4b41      	ldr	r3, [pc, #260]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	493d      	ldr	r1, [pc, #244]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071c2:	e040      	b.n	8007246 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d023      	beq.n	8007214 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071cc:	4b39      	ldr	r3, [pc, #228]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a38      	ldr	r2, [pc, #224]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071d2:	f043 0301 	orr.w	r3, r3, #1
 80071d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fd ff5c 	bl	8005094 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e0:	f7fd ff58 	bl	8005094 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e1bd      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f2:	4b30      	ldr	r3, [pc, #192]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f0      	beq.n	80071e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fe:	4b2d      	ldr	r3, [pc, #180]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	4929      	ldr	r1, [pc, #164]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800720e:	4313      	orrs	r3, r2
 8007210:	600b      	str	r3, [r1, #0]
 8007212:	e018      	b.n	8007246 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007214:	4b27      	ldr	r3, [pc, #156]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a26      	ldr	r2, [pc, #152]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800721a:	f023 0301 	bic.w	r3, r3, #1
 800721e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fd ff38 	bl	8005094 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007228:	f7fd ff34 	bl	8005094 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e199      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800723a:	4b1e      	ldr	r3, [pc, #120]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d038      	beq.n	80072c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d019      	beq.n	800728e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800725a:	4b16      	ldr	r3, [pc, #88]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800725c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725e:	4a15      	ldr	r2, [pc, #84]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007266:	f7fd ff15 	bl	8005094 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800726e:	f7fd ff11 	bl	8005094 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e176      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007280:	4b0c      	ldr	r3, [pc, #48]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0f0      	beq.n	800726e <HAL_RCC_OscConfig+0x23a>
 800728c:	e01a      	b.n	80072c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800728e:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007292:	4a08      	ldr	r2, [pc, #32]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007294:	f023 0301 	bic.w	r3, r3, #1
 8007298:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729a:	f7fd fefb 	bl	8005094 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072a0:	e00a      	b.n	80072b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a2:	f7fd fef7 	bl	8005094 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d903      	bls.n	80072b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e15c      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
 80072b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b8:	4b91      	ldr	r3, [pc, #580]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1ee      	bne.n	80072a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80a4 	beq.w	800741a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072d2:	4b8b      	ldr	r3, [pc, #556]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10d      	bne.n	80072fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80072de:	4b88      	ldr	r3, [pc, #544]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	4a87      	ldr	r2, [pc, #540]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80072ea:	4b85      	ldr	r3, [pc, #532]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072fa:	4b82      	ldr	r3, [pc, #520]	@ (8007504 <HAL_RCC_OscConfig+0x4d0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d118      	bne.n	8007338 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007306:	4b7f      	ldr	r3, [pc, #508]	@ (8007504 <HAL_RCC_OscConfig+0x4d0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a7e      	ldr	r2, [pc, #504]	@ (8007504 <HAL_RCC_OscConfig+0x4d0>)
 800730c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007312:	f7fd febf 	bl	8005094 <HAL_GetTick>
 8007316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007318:	e008      	b.n	800732c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800731a:	f7fd febb 	bl	8005094 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b64      	cmp	r3, #100	@ 0x64
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e120      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800732c:	4b75      	ldr	r3, [pc, #468]	@ (8007504 <HAL_RCC_OscConfig+0x4d0>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0f0      	beq.n	800731a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d106      	bne.n	800734e <HAL_RCC_OscConfig+0x31a>
 8007340:	4b6f      	ldr	r3, [pc, #444]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007344:	4a6e      	ldr	r2, [pc, #440]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6713      	str	r3, [r2, #112]	@ 0x70
 800734c:	e02d      	b.n	80073aa <HAL_RCC_OscConfig+0x376>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10c      	bne.n	8007370 <HAL_RCC_OscConfig+0x33c>
 8007356:	4b6a      	ldr	r3, [pc, #424]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735a:	4a69      	ldr	r2, [pc, #420]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	6713      	str	r3, [r2, #112]	@ 0x70
 8007362:	4b67      	ldr	r3, [pc, #412]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007366:	4a66      	ldr	r2, [pc, #408]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007368:	f023 0304 	bic.w	r3, r3, #4
 800736c:	6713      	str	r3, [r2, #112]	@ 0x70
 800736e:	e01c      	b.n	80073aa <HAL_RCC_OscConfig+0x376>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b05      	cmp	r3, #5
 8007376:	d10c      	bne.n	8007392 <HAL_RCC_OscConfig+0x35e>
 8007378:	4b61      	ldr	r3, [pc, #388]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737c:	4a60      	ldr	r2, [pc, #384]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800737e:	f043 0304 	orr.w	r3, r3, #4
 8007382:	6713      	str	r3, [r2, #112]	@ 0x70
 8007384:	4b5e      	ldr	r3, [pc, #376]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007388:	4a5d      	ldr	r2, [pc, #372]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007390:	e00b      	b.n	80073aa <HAL_RCC_OscConfig+0x376>
 8007392:	4b5b      	ldr	r3, [pc, #364]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007396:	4a5a      	ldr	r2, [pc, #360]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	6713      	str	r3, [r2, #112]	@ 0x70
 800739e:	4b58      	ldr	r3, [pc, #352]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a2:	4a57      	ldr	r2, [pc, #348]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80073a4:	f023 0304 	bic.w	r3, r3, #4
 80073a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d015      	beq.n	80073de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b2:	f7fd fe6f 	bl	8005094 <HAL_GetTick>
 80073b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b8:	e00a      	b.n	80073d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ba:	f7fd fe6b 	bl	8005094 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e0ce      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d0:	4b4b      	ldr	r3, [pc, #300]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80073d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0ee      	beq.n	80073ba <HAL_RCC_OscConfig+0x386>
 80073dc:	e014      	b.n	8007408 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073de:	f7fd fe59 	bl	8005094 <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073e4:	e00a      	b.n	80073fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073e6:	f7fd fe55 	bl	8005094 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e0b8      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073fc:	4b40      	ldr	r3, [pc, #256]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80073fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1ee      	bne.n	80073e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d105      	bne.n	800741a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800740e:	4b3c      	ldr	r3, [pc, #240]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	4a3b      	ldr	r2, [pc, #236]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007418:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80a4 	beq.w	800756c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007424:	4b36      	ldr	r3, [pc, #216]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 030c 	and.w	r3, r3, #12
 800742c:	2b08      	cmp	r3, #8
 800742e:	d06b      	beq.n	8007508 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d149      	bne.n	80074cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007438:	4b31      	ldr	r3, [pc, #196]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a30      	ldr	r2, [pc, #192]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800743e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007444:	f7fd fe26 	bl	8005094 <HAL_GetTick>
 8007448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800744a:	e008      	b.n	800745e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800744c:	f7fd fe22 	bl	8005094 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e087      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745e:	4b28      	ldr	r3, [pc, #160]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f0      	bne.n	800744c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007478:	019b      	lsls	r3, r3, #6
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	3b01      	subs	r3, #1
 8007484:	041b      	lsls	r3, r3, #16
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	061b      	lsls	r3, r3, #24
 800748e:	4313      	orrs	r3, r2
 8007490:	4a1b      	ldr	r2, [pc, #108]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007492:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007496:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007498:	4b19      	ldr	r3, [pc, #100]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800749e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a4:	f7fd fdf6 	bl	8005094 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fd fdf2 	bl	8005094 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e057      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074be:	4b10      	ldr	r3, [pc, #64]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f0      	beq.n	80074ac <HAL_RCC_OscConfig+0x478>
 80074ca:	e04f      	b.n	800756c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80074d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d8:	f7fd fddc 	bl	8005094 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e0:	f7fd fdd8 	bl	8005094 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e03d      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074f2:	4b03      	ldr	r3, [pc, #12]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f0      	bne.n	80074e0 <HAL_RCC_OscConfig+0x4ac>
 80074fe:	e035      	b.n	800756c <HAL_RCC_OscConfig+0x538>
 8007500:	40023800 	.word	0x40023800
 8007504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007508:	4b1b      	ldr	r3, [pc, #108]	@ (8007578 <HAL_RCC_OscConfig+0x544>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d028      	beq.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007520:	429a      	cmp	r2, r3
 8007522:	d121      	bne.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d11a      	bne.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007538:	4013      	ands	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800753e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007540:	4293      	cmp	r3, r2
 8007542:	d111      	bne.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	3b01      	subs	r3, #1
 8007552:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007554:	429a      	cmp	r2, r3
 8007556:	d107      	bne.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d001      	beq.n	800756c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	40023800 	.word	0x40023800

0800757c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0d0      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007594:	4b6a      	ldr	r3, [pc, #424]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d910      	bls.n	80075c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a2:	4b67      	ldr	r3, [pc, #412]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f023 020f 	bic.w	r2, r3, #15
 80075aa:	4965      	ldr	r1, [pc, #404]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b2:	4b63      	ldr	r3, [pc, #396]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d001      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e0b8      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d020      	beq.n	8007612 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075dc:	4b59      	ldr	r3, [pc, #356]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4a58      	ldr	r2, [pc, #352]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075f4:	4b53      	ldr	r3, [pc, #332]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	4a52      	ldr	r2, [pc, #328]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007600:	4b50      	ldr	r3, [pc, #320]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	494d      	ldr	r1, [pc, #308]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 800760e:	4313      	orrs	r3, r2
 8007610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d040      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d107      	bne.n	8007636 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007626:	4b47      	ldr	r3, [pc, #284]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d115      	bne.n	800765e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e07f      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d107      	bne.n	800764e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800763e:	4b41      	ldr	r3, [pc, #260]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d109      	bne.n	800765e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e073      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800764e:	4b3d      	ldr	r3, [pc, #244]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e06b      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800765e:	4b39      	ldr	r3, [pc, #228]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f023 0203 	bic.w	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4936      	ldr	r1, [pc, #216]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 800766c:	4313      	orrs	r3, r2
 800766e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007670:	f7fd fd10 	bl	8005094 <HAL_GetTick>
 8007674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007676:	e00a      	b.n	800768e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007678:	f7fd fd0c 	bl	8005094 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007686:	4293      	cmp	r3, r2
 8007688:	d901      	bls.n	800768e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e053      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768e:	4b2d      	ldr	r3, [pc, #180]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 020c 	and.w	r2, r3, #12
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	429a      	cmp	r2, r3
 800769e:	d1eb      	bne.n	8007678 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076a0:	4b27      	ldr	r3, [pc, #156]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d210      	bcs.n	80076d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ae:	4b24      	ldr	r3, [pc, #144]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f023 020f 	bic.w	r2, r3, #15
 80076b6:	4922      	ldr	r1, [pc, #136]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076be:	4b20      	ldr	r3, [pc, #128]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d001      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e032      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076dc:	4b19      	ldr	r3, [pc, #100]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4916      	ldr	r1, [pc, #88]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d009      	beq.n	800770e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076fa:	4b12      	ldr	r3, [pc, #72]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	490e      	ldr	r1, [pc, #56]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 800770a:	4313      	orrs	r3, r2
 800770c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800770e:	f000 f821 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 8007712:	4602      	mov	r2, r0
 8007714:	4b0b      	ldr	r3, [pc, #44]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	091b      	lsrs	r3, r3, #4
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	490a      	ldr	r1, [pc, #40]	@ (8007748 <HAL_RCC_ClockConfig+0x1cc>)
 8007720:	5ccb      	ldrb	r3, [r1, r3]
 8007722:	fa22 f303 	lsr.w	r3, r2, r3
 8007726:	4a09      	ldr	r2, [pc, #36]	@ (800774c <HAL_RCC_ClockConfig+0x1d0>)
 8007728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800772a:	4b09      	ldr	r3, [pc, #36]	@ (8007750 <HAL_RCC_ClockConfig+0x1d4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fd fc6c 	bl	800500c <HAL_InitTick>

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40023c00 	.word	0x40023c00
 8007744:	40023800 	.word	0x40023800
 8007748:	0800d720 	.word	0x0800d720
 800774c:	20000000 	.word	0x20000000
 8007750:	20000004 	.word	0x20000004

08007754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007758:	b094      	sub	sp, #80	@ 0x50
 800775a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007760:	2300      	movs	r3, #0
 8007762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007764:	2300      	movs	r3, #0
 8007766:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800776c:	4b79      	ldr	r3, [pc, #484]	@ (8007954 <HAL_RCC_GetSysClockFreq+0x200>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 030c 	and.w	r3, r3, #12
 8007774:	2b08      	cmp	r3, #8
 8007776:	d00d      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0x40>
 8007778:	2b08      	cmp	r3, #8
 800777a:	f200 80e1 	bhi.w	8007940 <HAL_RCC_GetSysClockFreq+0x1ec>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <HAL_RCC_GetSysClockFreq+0x34>
 8007782:	2b04      	cmp	r3, #4
 8007784:	d003      	beq.n	800778e <HAL_RCC_GetSysClockFreq+0x3a>
 8007786:	e0db      	b.n	8007940 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007788:	4b73      	ldr	r3, [pc, #460]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x204>)
 800778a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800778c:	e0db      	b.n	8007946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800778e:	4b73      	ldr	r3, [pc, #460]	@ (800795c <HAL_RCC_GetSysClockFreq+0x208>)
 8007790:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007792:	e0d8      	b.n	8007946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007794:	4b6f      	ldr	r3, [pc, #444]	@ (8007954 <HAL_RCC_GetSysClockFreq+0x200>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800779c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800779e:	4b6d      	ldr	r3, [pc, #436]	@ (8007954 <HAL_RCC_GetSysClockFreq+0x200>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d063      	beq.n	8007872 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007954 <HAL_RCC_GetSysClockFreq+0x200>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	099b      	lsrs	r3, r3, #6
 80077b0:	2200      	movs	r2, #0
 80077b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80077c6:	4622      	mov	r2, r4
 80077c8:	462b      	mov	r3, r5
 80077ca:	f04f 0000 	mov.w	r0, #0
 80077ce:	f04f 0100 	mov.w	r1, #0
 80077d2:	0159      	lsls	r1, r3, #5
 80077d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077d8:	0150      	lsls	r0, r2, #5
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4621      	mov	r1, r4
 80077e0:	1a51      	subs	r1, r2, r1
 80077e2:	6139      	str	r1, [r7, #16]
 80077e4:	4629      	mov	r1, r5
 80077e6:	eb63 0301 	sbc.w	r3, r3, r1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	f04f 0300 	mov.w	r3, #0
 80077f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077f8:	4659      	mov	r1, fp
 80077fa:	018b      	lsls	r3, r1, #6
 80077fc:	4651      	mov	r1, sl
 80077fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007802:	4651      	mov	r1, sl
 8007804:	018a      	lsls	r2, r1, #6
 8007806:	4651      	mov	r1, sl
 8007808:	ebb2 0801 	subs.w	r8, r2, r1
 800780c:	4659      	mov	r1, fp
 800780e:	eb63 0901 	sbc.w	r9, r3, r1
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800781e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007826:	4690      	mov	r8, r2
 8007828:	4699      	mov	r9, r3
 800782a:	4623      	mov	r3, r4
 800782c:	eb18 0303 	adds.w	r3, r8, r3
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	462b      	mov	r3, r5
 8007834:	eb49 0303 	adc.w	r3, r9, r3
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007846:	4629      	mov	r1, r5
 8007848:	024b      	lsls	r3, r1, #9
 800784a:	4621      	mov	r1, r4
 800784c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007850:	4621      	mov	r1, r4
 8007852:	024a      	lsls	r2, r1, #9
 8007854:	4610      	mov	r0, r2
 8007856:	4619      	mov	r1, r3
 8007858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800785a:	2200      	movs	r2, #0
 800785c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800785e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007864:	f7f9 fa10 	bl	8000c88 <__aeabi_uldivmod>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4613      	mov	r3, r2
 800786e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007870:	e058      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007872:	4b38      	ldr	r3, [pc, #224]	@ (8007954 <HAL_RCC_GetSysClockFreq+0x200>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	099b      	lsrs	r3, r3, #6
 8007878:	2200      	movs	r2, #0
 800787a:	4618      	mov	r0, r3
 800787c:	4611      	mov	r1, r2
 800787e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007882:	623b      	str	r3, [r7, #32]
 8007884:	2300      	movs	r3, #0
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
 8007888:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800788c:	4642      	mov	r2, r8
 800788e:	464b      	mov	r3, r9
 8007890:	f04f 0000 	mov.w	r0, #0
 8007894:	f04f 0100 	mov.w	r1, #0
 8007898:	0159      	lsls	r1, r3, #5
 800789a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800789e:	0150      	lsls	r0, r2, #5
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4641      	mov	r1, r8
 80078a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80078aa:	4649      	mov	r1, r9
 80078ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078c4:	ebb2 040a 	subs.w	r4, r2, sl
 80078c8:	eb63 050b 	sbc.w	r5, r3, fp
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	00eb      	lsls	r3, r5, #3
 80078d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078da:	00e2      	lsls	r2, r4, #3
 80078dc:	4614      	mov	r4, r2
 80078de:	461d      	mov	r5, r3
 80078e0:	4643      	mov	r3, r8
 80078e2:	18e3      	adds	r3, r4, r3
 80078e4:	603b      	str	r3, [r7, #0]
 80078e6:	464b      	mov	r3, r9
 80078e8:	eb45 0303 	adc.w	r3, r5, r3
 80078ec:	607b      	str	r3, [r7, #4]
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078fa:	4629      	mov	r1, r5
 80078fc:	028b      	lsls	r3, r1, #10
 80078fe:	4621      	mov	r1, r4
 8007900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007904:	4621      	mov	r1, r4
 8007906:	028a      	lsls	r2, r1, #10
 8007908:	4610      	mov	r0, r2
 800790a:	4619      	mov	r1, r3
 800790c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800790e:	2200      	movs	r2, #0
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	61fa      	str	r2, [r7, #28]
 8007914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007918:	f7f9 f9b6 	bl	8000c88 <__aeabi_uldivmod>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4613      	mov	r3, r2
 8007922:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007924:	4b0b      	ldr	r3, [pc, #44]	@ (8007954 <HAL_RCC_GetSysClockFreq+0x200>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	0c1b      	lsrs	r3, r3, #16
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	3301      	adds	r3, #1
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007934:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800793e:	e002      	b.n	8007946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007940:	4b05      	ldr	r3, [pc, #20]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x204>)
 8007942:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007948:	4618      	mov	r0, r3
 800794a:	3750      	adds	r7, #80	@ 0x50
 800794c:	46bd      	mov	sp, r7
 800794e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007952:	bf00      	nop
 8007954:	40023800 	.word	0x40023800
 8007958:	00f42400 	.word	0x00f42400
 800795c:	007a1200 	.word	0x007a1200

08007960 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007964:	4b03      	ldr	r3, [pc, #12]	@ (8007974 <HAL_RCC_GetHCLKFreq+0x14>)
 8007966:	681b      	ldr	r3, [r3, #0]
}
 8007968:	4618      	mov	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20000000 	.word	0x20000000

08007978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800797c:	f7ff fff0 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 8007980:	4602      	mov	r2, r0
 8007982:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	0a9b      	lsrs	r3, r3, #10
 8007988:	f003 0307 	and.w	r3, r3, #7
 800798c:	4903      	ldr	r1, [pc, #12]	@ (800799c <HAL_RCC_GetPCLK1Freq+0x24>)
 800798e:	5ccb      	ldrb	r3, [r1, r3]
 8007990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007994:	4618      	mov	r0, r3
 8007996:	bd80      	pop	{r7, pc}
 8007998:	40023800 	.word	0x40023800
 800799c:	0800d730 	.word	0x0800d730

080079a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079a4:	f7ff ffdc 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 80079a8:	4602      	mov	r2, r0
 80079aa:	4b05      	ldr	r3, [pc, #20]	@ (80079c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	0b5b      	lsrs	r3, r3, #13
 80079b0:	f003 0307 	and.w	r3, r3, #7
 80079b4:	4903      	ldr	r1, [pc, #12]	@ (80079c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079b6:	5ccb      	ldrb	r3, [r1, r3]
 80079b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079bc:	4618      	mov	r0, r3
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40023800 	.word	0x40023800
 80079c4:	0800d730 	.word	0x0800d730

080079c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d012      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079f0:	4b69      	ldr	r3, [pc, #420]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	4a68      	ldr	r2, [pc, #416]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80079fa:	6093      	str	r3, [r2, #8]
 80079fc:	4b66      	ldr	r3, [pc, #408]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a04:	4964      	ldr	r1, [pc, #400]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007a12:	2301      	movs	r3, #1
 8007a14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d017      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a22:	4b5d      	ldr	r3, [pc, #372]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a28:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a30:	4959      	ldr	r1, [pc, #356]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a40:	d101      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a42:	2301      	movs	r3, #1
 8007a44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d017      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6c:	494a      	ldr	r1, [pc, #296]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a7c:	d101      	bne.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 808b 	beq.w	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007aac:	4b3a      	ldr	r3, [pc, #232]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab0:	4a39      	ldr	r2, [pc, #228]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ab8:	4b37      	ldr	r3, [pc, #220]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ac0:	60bb      	str	r3, [r7, #8]
 8007ac2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ac4:	4b35      	ldr	r3, [pc, #212]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a34      	ldr	r2, [pc, #208]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad0:	f7fd fae0 	bl	8005094 <HAL_GetTick>
 8007ad4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad8:	f7fd fadc 	bl	8005094 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b64      	cmp	r3, #100	@ 0x64
 8007ae4:	d901      	bls.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e357      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007aea:	4b2c      	ldr	r3, [pc, #176]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0f0      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007af6:	4b28      	ldr	r3, [pc, #160]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007afe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d035      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d02e      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b14:	4b20      	ldr	r3, [pc, #128]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	4a1d      	ldr	r2, [pc, #116]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b28:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b36:	4a18      	ldr	r2, [pc, #96]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b3c:	4b16      	ldr	r3, [pc, #88]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d114      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b48:	f7fd faa4 	bl	8005094 <HAL_GetTick>
 8007b4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b4e:	e00a      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b50:	f7fd faa0 	bl	8005094 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e319      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b66:	4b0c      	ldr	r3, [pc, #48]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0ee      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b7e:	d111      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b80:	4b05      	ldr	r3, [pc, #20]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007b8c:	4b04      	ldr	r3, [pc, #16]	@ (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b8e:	400b      	ands	r3, r1
 8007b90:	4901      	ldr	r1, [pc, #4]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	608b      	str	r3, [r1, #8]
 8007b96:	e00b      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	40007000 	.word	0x40007000
 8007ba0:	0ffffcff 	.word	0x0ffffcff
 8007ba4:	4baa      	ldr	r3, [pc, #680]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	4aa9      	ldr	r2, [pc, #676]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007baa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007bae:	6093      	str	r3, [r2, #8]
 8007bb0:	4ba7      	ldr	r3, [pc, #668]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bbc:	49a4      	ldr	r1, [pc, #656]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0310 	and.w	r3, r3, #16
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d010      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bce:	4ba0      	ldr	r3, [pc, #640]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bd4:	4a9e      	ldr	r2, [pc, #632]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007bde:	4b9c      	ldr	r3, [pc, #624]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007be0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be8:	4999      	ldr	r1, [pc, #612]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bfc:	4b94      	ldr	r3, [pc, #592]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c0a:	4991      	ldr	r1, [pc, #580]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c1e:	4b8c      	ldr	r3, [pc, #560]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c2c:	4988      	ldr	r1, [pc, #544]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c40:	4b83      	ldr	r3, [pc, #524]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c4e:	4980      	ldr	r1, [pc, #512]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c62:	4b7b      	ldr	r3, [pc, #492]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c68:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c70:	4977      	ldr	r1, [pc, #476]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00a      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c84:	4b72      	ldr	r3, [pc, #456]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c8a:	f023 0203 	bic.w	r2, r3, #3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c92:	496f      	ldr	r1, [pc, #444]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cac:	f023 020c 	bic.w	r2, r3, #12
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb4:	4966      	ldr	r1, [pc, #408]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cc8:	4b61      	ldr	r3, [pc, #388]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cd6:	495e      	ldr	r1, [pc, #376]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cea:	4b59      	ldr	r3, [pc, #356]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cf8:	4955      	ldr	r1, [pc, #340]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d0c:	4b50      	ldr	r3, [pc, #320]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d1a:	494d      	ldr	r1, [pc, #308]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d2e:	4b48      	ldr	r3, [pc, #288]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d34:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3c:	4944      	ldr	r1, [pc, #272]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d50:	4b3f      	ldr	r3, [pc, #252]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d56:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d5e:	493c      	ldr	r1, [pc, #240]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d72:	4b37      	ldr	r3, [pc, #220]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d78:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d80:	4933      	ldr	r1, [pc, #204]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d94:	4b2e      	ldr	r3, [pc, #184]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d9a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007da2:	492b      	ldr	r1, [pc, #172]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d011      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007db6:	4b26      	ldr	r3, [pc, #152]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dbc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dc4:	4922      	ldr	r1, [pc, #136]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dd4:	d101      	bne.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0308 	and.w	r3, r3, #8
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007de6:	2301      	movs	r3, #1
 8007de8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df6:	4b16      	ldr	r3, [pc, #88]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e04:	4912      	ldr	r1, [pc, #72]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e18:	4b0d      	ldr	r3, [pc, #52]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e1e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e28:	4909      	ldr	r1, [pc, #36]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d006      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80d9 	beq.w	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e44:	4b02      	ldr	r3, [pc, #8]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a01      	ldr	r2, [pc, #4]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e4e:	e001      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007e50:	40023800 	.word	0x40023800
 8007e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e56:	f7fd f91d 	bl	8005094 <HAL_GetTick>
 8007e5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e5c:	e008      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e5e:	f7fd f919 	bl	8005094 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b64      	cmp	r3, #100	@ 0x64
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e194      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e70:	4b6c      	ldr	r3, [pc, #432]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f0      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d021      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11d      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e90:	4b64      	ldr	r3, [pc, #400]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e96:	0c1b      	lsrs	r3, r3, #16
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e9e:	4b61      	ldr	r3, [pc, #388]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ea4:	0e1b      	lsrs	r3, r3, #24
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	019a      	lsls	r2, r3, #6
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	041b      	lsls	r3, r3, #16
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	061b      	lsls	r3, r3, #24
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	071b      	lsls	r3, r3, #28
 8007ec4:	4957      	ldr	r1, [pc, #348]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007edc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ee0:	d00a      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d02e      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ef6:	d129      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007efe:	0c1b      	lsrs	r3, r3, #16
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f06:	4b47      	ldr	r3, [pc, #284]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f0c:	0f1b      	lsrs	r3, r3, #28
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	019a      	lsls	r2, r3, #6
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	041b      	lsls	r3, r3, #16
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	061b      	lsls	r3, r3, #24
 8007f26:	431a      	orrs	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	071b      	lsls	r3, r3, #28
 8007f2c:	493d      	ldr	r1, [pc, #244]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f34:	4b3b      	ldr	r3, [pc, #236]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f3a:	f023 021f 	bic.w	r2, r3, #31
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	3b01      	subs	r3, #1
 8007f44:	4937      	ldr	r1, [pc, #220]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d01d      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f58:	4b32      	ldr	r3, [pc, #200]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f5e:	0e1b      	lsrs	r3, r3, #24
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f66:	4b2f      	ldr	r3, [pc, #188]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f6c:	0f1b      	lsrs	r3, r3, #28
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	019a      	lsls	r2, r3, #6
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	041b      	lsls	r3, r3, #16
 8007f80:	431a      	orrs	r2, r3
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	061b      	lsls	r3, r3, #24
 8007f86:	431a      	orrs	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	071b      	lsls	r3, r3, #28
 8007f8c:	4925      	ldr	r1, [pc, #148]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d011      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	019a      	lsls	r2, r3, #6
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	061b      	lsls	r3, r3, #24
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	071b      	lsls	r3, r3, #28
 8007fbc:	4919      	ldr	r1, [pc, #100]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fc4:	4b17      	ldr	r3, [pc, #92]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a16      	ldr	r2, [pc, #88]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fd0:	f7fd f860 	bl	8005094 <HAL_GetTick>
 8007fd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fd6:	e008      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fd8:	f7fd f85c 	bl	8005094 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2b64      	cmp	r3, #100	@ 0x64
 8007fe4:	d901      	bls.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e0d7      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fea:	4b0e      	ldr	r3, [pc, #56]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0f0      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	f040 80cd 	bne.w	8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ffe:	4b09      	ldr	r3, [pc, #36]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a08      	ldr	r2, [pc, #32]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800800a:	f7fd f843 	bl	8005094 <HAL_GetTick>
 800800e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008010:	e00a      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008012:	f7fd f83f 	bl	8005094 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b64      	cmp	r3, #100	@ 0x64
 800801e:	d903      	bls.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e0ba      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008024:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008028:	4b5e      	ldr	r3, [pc, #376]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008034:	d0ed      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008046:	2b00      	cmp	r3, #0
 8008048:	d009      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008052:	2b00      	cmp	r3, #0
 8008054:	d02e      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d12a      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800805e:	4b51      	ldr	r3, [pc, #324]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008064:	0c1b      	lsrs	r3, r3, #16
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800806c:	4b4d      	ldr	r3, [pc, #308]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008072:	0f1b      	lsrs	r3, r3, #28
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	019a      	lsls	r2, r3, #6
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	061b      	lsls	r3, r3, #24
 800808c:	431a      	orrs	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	071b      	lsls	r3, r3, #28
 8008092:	4944      	ldr	r1, [pc, #272]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008094:	4313      	orrs	r3, r2
 8008096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800809a:	4b42      	ldr	r3, [pc, #264]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800809c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a8:	3b01      	subs	r3, #1
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	493d      	ldr	r1, [pc, #244]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d022      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080c8:	d11d      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080ca:	4b36      	ldr	r3, [pc, #216]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d0:	0e1b      	lsrs	r3, r3, #24
 80080d2:	f003 030f 	and.w	r3, r3, #15
 80080d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080d8:	4b32      	ldr	r3, [pc, #200]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080de:	0f1b      	lsrs	r3, r3, #28
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	019a      	lsls	r2, r3, #6
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	041b      	lsls	r3, r3, #16
 80080f2:	431a      	orrs	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	061b      	lsls	r3, r3, #24
 80080f8:	431a      	orrs	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	071b      	lsls	r3, r3, #28
 80080fe:	4929      	ldr	r1, [pc, #164]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d028      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008112:	4b24      	ldr	r3, [pc, #144]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008118:	0e1b      	lsrs	r3, r3, #24
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008120:	4b20      	ldr	r3, [pc, #128]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008126:	0c1b      	lsrs	r3, r3, #16
 8008128:	f003 0303 	and.w	r3, r3, #3
 800812c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	019a      	lsls	r2, r3, #6
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	431a      	orrs	r2, r3
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	061b      	lsls	r3, r3, #24
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	071b      	lsls	r3, r3, #28
 8008146:	4917      	ldr	r1, [pc, #92]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008148:	4313      	orrs	r3, r2
 800814a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800814e:	4b15      	ldr	r3, [pc, #84]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008154:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	4911      	ldr	r1, [pc, #68]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800815e:	4313      	orrs	r3, r2
 8008160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008164:	4b0f      	ldr	r3, [pc, #60]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a0e      	ldr	r2, [pc, #56]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800816a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800816e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008170:	f7fc ff90 	bl	8005094 <HAL_GetTick>
 8008174:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008176:	e008      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008178:	f7fc ff8c 	bl	8005094 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b64      	cmp	r3, #100	@ 0x64
 8008184:	d901      	bls.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e007      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800818a:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008196:	d1ef      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40023800 	.word	0x40023800

080081a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e040      	b.n	800823c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d106      	bne.n	80081d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7fc fd06 	bl	8004bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2224      	movs	r2, #36	@ 0x24
 80081d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0201 	bic.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fb16 	bl	8008820 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f8af 	bl	8008358 <UART_SetConfig>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e01b      	b.n	800823c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f042 0201 	orr.w	r2, r2, #1
 8008232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb95 	bl	8008964 <UART_CheckIdleState>
 800823a:	4603      	mov	r3, r0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08a      	sub	sp, #40	@ 0x28
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008258:	2b20      	cmp	r3, #32
 800825a:	d177      	bne.n	800834c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <HAL_UART_Transmit+0x24>
 8008262:	88fb      	ldrh	r3, [r7, #6]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e070      	b.n	800834e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2221      	movs	r2, #33	@ 0x21
 8008278:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800827a:	f7fc ff0b 	bl	8005094 <HAL_GetTick>
 800827e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	88fa      	ldrh	r2, [r7, #6]
 8008284:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	88fa      	ldrh	r2, [r7, #6]
 800828c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008298:	d108      	bne.n	80082ac <HAL_UART_Transmit+0x68>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d104      	bne.n	80082ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	61bb      	str	r3, [r7, #24]
 80082aa:	e003      	b.n	80082b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082b4:	e02f      	b.n	8008316 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2200      	movs	r2, #0
 80082be:	2180      	movs	r1, #128	@ 0x80
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 fba6 	bl	8008a12 <UART_WaitOnFlagUntilTimeout>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d004      	beq.n	80082d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2220      	movs	r2, #32
 80082d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e03b      	b.n	800834e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10b      	bne.n	80082f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	3302      	adds	r3, #2
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	e007      	b.n	8008304 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	781a      	ldrb	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	3301      	adds	r3, #1
 8008302:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800830a:	b29b      	uxth	r3, r3
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800831c:	b29b      	uxth	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1c9      	bne.n	80082b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2200      	movs	r2, #0
 800832a:	2140      	movs	r1, #64	@ 0x40
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 fb70 	bl	8008a12 <UART_WaitOnFlagUntilTimeout>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e005      	b.n	800834e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2220      	movs	r2, #32
 8008346:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	e000      	b.n	800834e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800834c:	2302      	movs	r3, #2
  }
}
 800834e:	4618      	mov	r0, r3
 8008350:	3720      	adds	r7, #32
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689a      	ldr	r2, [r3, #8]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	4313      	orrs	r3, r2
 800837a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4ba6      	ldr	r3, [pc, #664]	@ (800861c <UART_SetConfig+0x2c4>)
 8008384:	4013      	ands	r3, r2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	6979      	ldr	r1, [r7, #20]
 800838c:	430b      	orrs	r3, r1
 800838e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a94      	ldr	r2, [pc, #592]	@ (8008620 <UART_SetConfig+0x2c8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d120      	bne.n	8008416 <UART_SetConfig+0xbe>
 80083d4:	4b93      	ldr	r3, [pc, #588]	@ (8008624 <UART_SetConfig+0x2cc>)
 80083d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d816      	bhi.n	8008410 <UART_SetConfig+0xb8>
 80083e2:	a201      	add	r2, pc, #4	@ (adr r2, 80083e8 <UART_SetConfig+0x90>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	080083f9 	.word	0x080083f9
 80083ec:	08008405 	.word	0x08008405
 80083f0:	080083ff 	.word	0x080083ff
 80083f4:	0800840b 	.word	0x0800840b
 80083f8:	2301      	movs	r3, #1
 80083fa:	77fb      	strb	r3, [r7, #31]
 80083fc:	e150      	b.n	80086a0 <UART_SetConfig+0x348>
 80083fe:	2302      	movs	r3, #2
 8008400:	77fb      	strb	r3, [r7, #31]
 8008402:	e14d      	b.n	80086a0 <UART_SetConfig+0x348>
 8008404:	2304      	movs	r3, #4
 8008406:	77fb      	strb	r3, [r7, #31]
 8008408:	e14a      	b.n	80086a0 <UART_SetConfig+0x348>
 800840a:	2308      	movs	r3, #8
 800840c:	77fb      	strb	r3, [r7, #31]
 800840e:	e147      	b.n	80086a0 <UART_SetConfig+0x348>
 8008410:	2310      	movs	r3, #16
 8008412:	77fb      	strb	r3, [r7, #31]
 8008414:	e144      	b.n	80086a0 <UART_SetConfig+0x348>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a83      	ldr	r2, [pc, #524]	@ (8008628 <UART_SetConfig+0x2d0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d132      	bne.n	8008486 <UART_SetConfig+0x12e>
 8008420:	4b80      	ldr	r3, [pc, #512]	@ (8008624 <UART_SetConfig+0x2cc>)
 8008422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008426:	f003 030c 	and.w	r3, r3, #12
 800842a:	2b0c      	cmp	r3, #12
 800842c:	d828      	bhi.n	8008480 <UART_SetConfig+0x128>
 800842e:	a201      	add	r2, pc, #4	@ (adr r2, 8008434 <UART_SetConfig+0xdc>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	08008469 	.word	0x08008469
 8008438:	08008481 	.word	0x08008481
 800843c:	08008481 	.word	0x08008481
 8008440:	08008481 	.word	0x08008481
 8008444:	08008475 	.word	0x08008475
 8008448:	08008481 	.word	0x08008481
 800844c:	08008481 	.word	0x08008481
 8008450:	08008481 	.word	0x08008481
 8008454:	0800846f 	.word	0x0800846f
 8008458:	08008481 	.word	0x08008481
 800845c:	08008481 	.word	0x08008481
 8008460:	08008481 	.word	0x08008481
 8008464:	0800847b 	.word	0x0800847b
 8008468:	2300      	movs	r3, #0
 800846a:	77fb      	strb	r3, [r7, #31]
 800846c:	e118      	b.n	80086a0 <UART_SetConfig+0x348>
 800846e:	2302      	movs	r3, #2
 8008470:	77fb      	strb	r3, [r7, #31]
 8008472:	e115      	b.n	80086a0 <UART_SetConfig+0x348>
 8008474:	2304      	movs	r3, #4
 8008476:	77fb      	strb	r3, [r7, #31]
 8008478:	e112      	b.n	80086a0 <UART_SetConfig+0x348>
 800847a:	2308      	movs	r3, #8
 800847c:	77fb      	strb	r3, [r7, #31]
 800847e:	e10f      	b.n	80086a0 <UART_SetConfig+0x348>
 8008480:	2310      	movs	r3, #16
 8008482:	77fb      	strb	r3, [r7, #31]
 8008484:	e10c      	b.n	80086a0 <UART_SetConfig+0x348>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a68      	ldr	r2, [pc, #416]	@ (800862c <UART_SetConfig+0x2d4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d120      	bne.n	80084d2 <UART_SetConfig+0x17a>
 8008490:	4b64      	ldr	r3, [pc, #400]	@ (8008624 <UART_SetConfig+0x2cc>)
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008496:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800849a:	2b30      	cmp	r3, #48	@ 0x30
 800849c:	d013      	beq.n	80084c6 <UART_SetConfig+0x16e>
 800849e:	2b30      	cmp	r3, #48	@ 0x30
 80084a0:	d814      	bhi.n	80084cc <UART_SetConfig+0x174>
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d009      	beq.n	80084ba <UART_SetConfig+0x162>
 80084a6:	2b20      	cmp	r3, #32
 80084a8:	d810      	bhi.n	80084cc <UART_SetConfig+0x174>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <UART_SetConfig+0x15c>
 80084ae:	2b10      	cmp	r3, #16
 80084b0:	d006      	beq.n	80084c0 <UART_SetConfig+0x168>
 80084b2:	e00b      	b.n	80084cc <UART_SetConfig+0x174>
 80084b4:	2300      	movs	r3, #0
 80084b6:	77fb      	strb	r3, [r7, #31]
 80084b8:	e0f2      	b.n	80086a0 <UART_SetConfig+0x348>
 80084ba:	2302      	movs	r3, #2
 80084bc:	77fb      	strb	r3, [r7, #31]
 80084be:	e0ef      	b.n	80086a0 <UART_SetConfig+0x348>
 80084c0:	2304      	movs	r3, #4
 80084c2:	77fb      	strb	r3, [r7, #31]
 80084c4:	e0ec      	b.n	80086a0 <UART_SetConfig+0x348>
 80084c6:	2308      	movs	r3, #8
 80084c8:	77fb      	strb	r3, [r7, #31]
 80084ca:	e0e9      	b.n	80086a0 <UART_SetConfig+0x348>
 80084cc:	2310      	movs	r3, #16
 80084ce:	77fb      	strb	r3, [r7, #31]
 80084d0:	e0e6      	b.n	80086a0 <UART_SetConfig+0x348>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a56      	ldr	r2, [pc, #344]	@ (8008630 <UART_SetConfig+0x2d8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d120      	bne.n	800851e <UART_SetConfig+0x1c6>
 80084dc:	4b51      	ldr	r3, [pc, #324]	@ (8008624 <UART_SetConfig+0x2cc>)
 80084de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80084e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80084e8:	d013      	beq.n	8008512 <UART_SetConfig+0x1ba>
 80084ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80084ec:	d814      	bhi.n	8008518 <UART_SetConfig+0x1c0>
 80084ee:	2b80      	cmp	r3, #128	@ 0x80
 80084f0:	d009      	beq.n	8008506 <UART_SetConfig+0x1ae>
 80084f2:	2b80      	cmp	r3, #128	@ 0x80
 80084f4:	d810      	bhi.n	8008518 <UART_SetConfig+0x1c0>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <UART_SetConfig+0x1a8>
 80084fa:	2b40      	cmp	r3, #64	@ 0x40
 80084fc:	d006      	beq.n	800850c <UART_SetConfig+0x1b4>
 80084fe:	e00b      	b.n	8008518 <UART_SetConfig+0x1c0>
 8008500:	2300      	movs	r3, #0
 8008502:	77fb      	strb	r3, [r7, #31]
 8008504:	e0cc      	b.n	80086a0 <UART_SetConfig+0x348>
 8008506:	2302      	movs	r3, #2
 8008508:	77fb      	strb	r3, [r7, #31]
 800850a:	e0c9      	b.n	80086a0 <UART_SetConfig+0x348>
 800850c:	2304      	movs	r3, #4
 800850e:	77fb      	strb	r3, [r7, #31]
 8008510:	e0c6      	b.n	80086a0 <UART_SetConfig+0x348>
 8008512:	2308      	movs	r3, #8
 8008514:	77fb      	strb	r3, [r7, #31]
 8008516:	e0c3      	b.n	80086a0 <UART_SetConfig+0x348>
 8008518:	2310      	movs	r3, #16
 800851a:	77fb      	strb	r3, [r7, #31]
 800851c:	e0c0      	b.n	80086a0 <UART_SetConfig+0x348>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a44      	ldr	r2, [pc, #272]	@ (8008634 <UART_SetConfig+0x2dc>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d125      	bne.n	8008574 <UART_SetConfig+0x21c>
 8008528:	4b3e      	ldr	r3, [pc, #248]	@ (8008624 <UART_SetConfig+0x2cc>)
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800852e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008536:	d017      	beq.n	8008568 <UART_SetConfig+0x210>
 8008538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800853c:	d817      	bhi.n	800856e <UART_SetConfig+0x216>
 800853e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008542:	d00b      	beq.n	800855c <UART_SetConfig+0x204>
 8008544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008548:	d811      	bhi.n	800856e <UART_SetConfig+0x216>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <UART_SetConfig+0x1fe>
 800854e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008552:	d006      	beq.n	8008562 <UART_SetConfig+0x20a>
 8008554:	e00b      	b.n	800856e <UART_SetConfig+0x216>
 8008556:	2300      	movs	r3, #0
 8008558:	77fb      	strb	r3, [r7, #31]
 800855a:	e0a1      	b.n	80086a0 <UART_SetConfig+0x348>
 800855c:	2302      	movs	r3, #2
 800855e:	77fb      	strb	r3, [r7, #31]
 8008560:	e09e      	b.n	80086a0 <UART_SetConfig+0x348>
 8008562:	2304      	movs	r3, #4
 8008564:	77fb      	strb	r3, [r7, #31]
 8008566:	e09b      	b.n	80086a0 <UART_SetConfig+0x348>
 8008568:	2308      	movs	r3, #8
 800856a:	77fb      	strb	r3, [r7, #31]
 800856c:	e098      	b.n	80086a0 <UART_SetConfig+0x348>
 800856e:	2310      	movs	r3, #16
 8008570:	77fb      	strb	r3, [r7, #31]
 8008572:	e095      	b.n	80086a0 <UART_SetConfig+0x348>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a2f      	ldr	r2, [pc, #188]	@ (8008638 <UART_SetConfig+0x2e0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d125      	bne.n	80085ca <UART_SetConfig+0x272>
 800857e:	4b29      	ldr	r3, [pc, #164]	@ (8008624 <UART_SetConfig+0x2cc>)
 8008580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008584:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008588:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800858c:	d017      	beq.n	80085be <UART_SetConfig+0x266>
 800858e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008592:	d817      	bhi.n	80085c4 <UART_SetConfig+0x26c>
 8008594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008598:	d00b      	beq.n	80085b2 <UART_SetConfig+0x25a>
 800859a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800859e:	d811      	bhi.n	80085c4 <UART_SetConfig+0x26c>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <UART_SetConfig+0x254>
 80085a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085a8:	d006      	beq.n	80085b8 <UART_SetConfig+0x260>
 80085aa:	e00b      	b.n	80085c4 <UART_SetConfig+0x26c>
 80085ac:	2301      	movs	r3, #1
 80085ae:	77fb      	strb	r3, [r7, #31]
 80085b0:	e076      	b.n	80086a0 <UART_SetConfig+0x348>
 80085b2:	2302      	movs	r3, #2
 80085b4:	77fb      	strb	r3, [r7, #31]
 80085b6:	e073      	b.n	80086a0 <UART_SetConfig+0x348>
 80085b8:	2304      	movs	r3, #4
 80085ba:	77fb      	strb	r3, [r7, #31]
 80085bc:	e070      	b.n	80086a0 <UART_SetConfig+0x348>
 80085be:	2308      	movs	r3, #8
 80085c0:	77fb      	strb	r3, [r7, #31]
 80085c2:	e06d      	b.n	80086a0 <UART_SetConfig+0x348>
 80085c4:	2310      	movs	r3, #16
 80085c6:	77fb      	strb	r3, [r7, #31]
 80085c8:	e06a      	b.n	80086a0 <UART_SetConfig+0x348>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a1b      	ldr	r2, [pc, #108]	@ (800863c <UART_SetConfig+0x2e4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d138      	bne.n	8008646 <UART_SetConfig+0x2ee>
 80085d4:	4b13      	ldr	r3, [pc, #76]	@ (8008624 <UART_SetConfig+0x2cc>)
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80085de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085e2:	d017      	beq.n	8008614 <UART_SetConfig+0x2bc>
 80085e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085e8:	d82a      	bhi.n	8008640 <UART_SetConfig+0x2e8>
 80085ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ee:	d00b      	beq.n	8008608 <UART_SetConfig+0x2b0>
 80085f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085f4:	d824      	bhi.n	8008640 <UART_SetConfig+0x2e8>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <UART_SetConfig+0x2aa>
 80085fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085fe:	d006      	beq.n	800860e <UART_SetConfig+0x2b6>
 8008600:	e01e      	b.n	8008640 <UART_SetConfig+0x2e8>
 8008602:	2300      	movs	r3, #0
 8008604:	77fb      	strb	r3, [r7, #31]
 8008606:	e04b      	b.n	80086a0 <UART_SetConfig+0x348>
 8008608:	2302      	movs	r3, #2
 800860a:	77fb      	strb	r3, [r7, #31]
 800860c:	e048      	b.n	80086a0 <UART_SetConfig+0x348>
 800860e:	2304      	movs	r3, #4
 8008610:	77fb      	strb	r3, [r7, #31]
 8008612:	e045      	b.n	80086a0 <UART_SetConfig+0x348>
 8008614:	2308      	movs	r3, #8
 8008616:	77fb      	strb	r3, [r7, #31]
 8008618:	e042      	b.n	80086a0 <UART_SetConfig+0x348>
 800861a:	bf00      	nop
 800861c:	efff69f3 	.word	0xefff69f3
 8008620:	40011000 	.word	0x40011000
 8008624:	40023800 	.word	0x40023800
 8008628:	40004400 	.word	0x40004400
 800862c:	40004800 	.word	0x40004800
 8008630:	40004c00 	.word	0x40004c00
 8008634:	40005000 	.word	0x40005000
 8008638:	40011400 	.word	0x40011400
 800863c:	40007800 	.word	0x40007800
 8008640:	2310      	movs	r3, #16
 8008642:	77fb      	strb	r3, [r7, #31]
 8008644:	e02c      	b.n	80086a0 <UART_SetConfig+0x348>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a72      	ldr	r2, [pc, #456]	@ (8008814 <UART_SetConfig+0x4bc>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d125      	bne.n	800869c <UART_SetConfig+0x344>
 8008650:	4b71      	ldr	r3, [pc, #452]	@ (8008818 <UART_SetConfig+0x4c0>)
 8008652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008656:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800865a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800865e:	d017      	beq.n	8008690 <UART_SetConfig+0x338>
 8008660:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008664:	d817      	bhi.n	8008696 <UART_SetConfig+0x33e>
 8008666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800866a:	d00b      	beq.n	8008684 <UART_SetConfig+0x32c>
 800866c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008670:	d811      	bhi.n	8008696 <UART_SetConfig+0x33e>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <UART_SetConfig+0x326>
 8008676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800867a:	d006      	beq.n	800868a <UART_SetConfig+0x332>
 800867c:	e00b      	b.n	8008696 <UART_SetConfig+0x33e>
 800867e:	2300      	movs	r3, #0
 8008680:	77fb      	strb	r3, [r7, #31]
 8008682:	e00d      	b.n	80086a0 <UART_SetConfig+0x348>
 8008684:	2302      	movs	r3, #2
 8008686:	77fb      	strb	r3, [r7, #31]
 8008688:	e00a      	b.n	80086a0 <UART_SetConfig+0x348>
 800868a:	2304      	movs	r3, #4
 800868c:	77fb      	strb	r3, [r7, #31]
 800868e:	e007      	b.n	80086a0 <UART_SetConfig+0x348>
 8008690:	2308      	movs	r3, #8
 8008692:	77fb      	strb	r3, [r7, #31]
 8008694:	e004      	b.n	80086a0 <UART_SetConfig+0x348>
 8008696:	2310      	movs	r3, #16
 8008698:	77fb      	strb	r3, [r7, #31]
 800869a:	e001      	b.n	80086a0 <UART_SetConfig+0x348>
 800869c:	2310      	movs	r3, #16
 800869e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086a8:	d15b      	bne.n	8008762 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80086aa:	7ffb      	ldrb	r3, [r7, #31]
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d828      	bhi.n	8008702 <UART_SetConfig+0x3aa>
 80086b0:	a201      	add	r2, pc, #4	@ (adr r2, 80086b8 <UART_SetConfig+0x360>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086dd 	.word	0x080086dd
 80086bc:	080086e5 	.word	0x080086e5
 80086c0:	080086ed 	.word	0x080086ed
 80086c4:	08008703 	.word	0x08008703
 80086c8:	080086f3 	.word	0x080086f3
 80086cc:	08008703 	.word	0x08008703
 80086d0:	08008703 	.word	0x08008703
 80086d4:	08008703 	.word	0x08008703
 80086d8:	080086fb 	.word	0x080086fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086dc:	f7ff f94c 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 80086e0:	61b8      	str	r0, [r7, #24]
        break;
 80086e2:	e013      	b.n	800870c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086e4:	f7ff f95c 	bl	80079a0 <HAL_RCC_GetPCLK2Freq>
 80086e8:	61b8      	str	r0, [r7, #24]
        break;
 80086ea:	e00f      	b.n	800870c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086ec:	4b4b      	ldr	r3, [pc, #300]	@ (800881c <UART_SetConfig+0x4c4>)
 80086ee:	61bb      	str	r3, [r7, #24]
        break;
 80086f0:	e00c      	b.n	800870c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086f2:	f7ff f82f 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 80086f6:	61b8      	str	r0, [r7, #24]
        break;
 80086f8:	e008      	b.n	800870c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086fe:	61bb      	str	r3, [r7, #24]
        break;
 8008700:	e004      	b.n	800870c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	77bb      	strb	r3, [r7, #30]
        break;
 800870a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d074      	beq.n	80087fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	005a      	lsls	r2, r3, #1
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	085b      	lsrs	r3, r3, #1
 800871c:	441a      	add	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	fbb2 f3f3 	udiv	r3, r2, r3
 8008726:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b0f      	cmp	r3, #15
 800872c:	d916      	bls.n	800875c <UART_SetConfig+0x404>
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008734:	d212      	bcs.n	800875c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	b29b      	uxth	r3, r3
 800873a:	f023 030f 	bic.w	r3, r3, #15
 800873e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	085b      	lsrs	r3, r3, #1
 8008744:	b29b      	uxth	r3, r3
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	b29a      	uxth	r2, r3
 800874c:	89fb      	ldrh	r3, [r7, #14]
 800874e:	4313      	orrs	r3, r2
 8008750:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	89fa      	ldrh	r2, [r7, #14]
 8008758:	60da      	str	r2, [r3, #12]
 800875a:	e04f      	b.n	80087fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	77bb      	strb	r3, [r7, #30]
 8008760:	e04c      	b.n	80087fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008762:	7ffb      	ldrb	r3, [r7, #31]
 8008764:	2b08      	cmp	r3, #8
 8008766:	d828      	bhi.n	80087ba <UART_SetConfig+0x462>
 8008768:	a201      	add	r2, pc, #4	@ (adr r2, 8008770 <UART_SetConfig+0x418>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	08008795 	.word	0x08008795
 8008774:	0800879d 	.word	0x0800879d
 8008778:	080087a5 	.word	0x080087a5
 800877c:	080087bb 	.word	0x080087bb
 8008780:	080087ab 	.word	0x080087ab
 8008784:	080087bb 	.word	0x080087bb
 8008788:	080087bb 	.word	0x080087bb
 800878c:	080087bb 	.word	0x080087bb
 8008790:	080087b3 	.word	0x080087b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008794:	f7ff f8f0 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 8008798:	61b8      	str	r0, [r7, #24]
        break;
 800879a:	e013      	b.n	80087c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800879c:	f7ff f900 	bl	80079a0 <HAL_RCC_GetPCLK2Freq>
 80087a0:	61b8      	str	r0, [r7, #24]
        break;
 80087a2:	e00f      	b.n	80087c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087a4:	4b1d      	ldr	r3, [pc, #116]	@ (800881c <UART_SetConfig+0x4c4>)
 80087a6:	61bb      	str	r3, [r7, #24]
        break;
 80087a8:	e00c      	b.n	80087c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087aa:	f7fe ffd3 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 80087ae:	61b8      	str	r0, [r7, #24]
        break;
 80087b0:	e008      	b.n	80087c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087b6:	61bb      	str	r3, [r7, #24]
        break;
 80087b8:	e004      	b.n	80087c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	77bb      	strb	r3, [r7, #30]
        break;
 80087c2:	bf00      	nop
    }

    if (pclk != 0U)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d018      	beq.n	80087fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	085a      	lsrs	r2, r3, #1
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	441a      	add	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b0f      	cmp	r3, #15
 80087e2:	d909      	bls.n	80087f8 <UART_SetConfig+0x4a0>
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087ea:	d205      	bcs.n	80087f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60da      	str	r2, [r3, #12]
 80087f6:	e001      	b.n	80087fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008808:	7fbb      	ldrb	r3, [r7, #30]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	40007c00 	.word	0x40007c00
 8008818:	40023800 	.word	0x40023800
 800881c:	00f42400 	.word	0x00f42400

08008820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008892:	f003 0304 	and.w	r3, r3, #4
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d6:	f003 0320 	and.w	r3, r3, #32
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01a      	beq.n	8008936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800891a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800891e:	d10a      	bne.n	8008936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	605a      	str	r2, [r3, #4]
  }
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08c      	sub	sp, #48	@ 0x30
 8008968:	af02      	add	r7, sp, #8
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008974:	f7fc fb8e 	bl	8005094 <HAL_GetTick>
 8008978:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b08      	cmp	r3, #8
 8008986:	d12e      	bne.n	80089e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008988:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	2200      	movs	r2, #0
 8008992:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f83b 	bl	8008a12 <UART_WaitOnFlagUntilTimeout>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d021      	beq.n	80089e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089b6:	623b      	str	r3, [r7, #32]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	461a      	mov	r2, r3
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	69b9      	ldr	r1, [r7, #24]
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	617b      	str	r3, [r7, #20]
   return(result);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e6      	bne.n	80089a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2220      	movs	r2, #32
 80089d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e011      	b.n	8008a0a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3728      	adds	r7, #40	@ 0x28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	603b      	str	r3, [r7, #0]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a22:	e04f      	b.n	8008ac4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2a:	d04b      	beq.n	8008ac4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a2c:	f7fc fb32 	bl	8005094 <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d302      	bcc.n	8008a42 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e04e      	b.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0304 	and.w	r3, r3, #4
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d037      	beq.n	8008ac4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2b80      	cmp	r3, #128	@ 0x80
 8008a58:	d034      	beq.n	8008ac4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b40      	cmp	r3, #64	@ 0x40
 8008a5e:	d031      	beq.n	8008ac4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	f003 0308 	and.w	r3, r3, #8
 8008a6a:	2b08      	cmp	r3, #8
 8008a6c:	d110      	bne.n	8008a90 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2208      	movs	r2, #8
 8008a74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 f838 	bl	8008aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2208      	movs	r2, #8
 8008a80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e029      	b.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a9e:	d111      	bne.n	8008ac4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008aa8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 f81e 	bl	8008aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e00f      	b.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69da      	ldr	r2, [r3, #28]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	4013      	ands	r3, r2
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	bf0c      	ite	eq
 8008ad4:	2301      	moveq	r3, #1
 8008ad6:	2300      	movne	r3, #0
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	461a      	mov	r2, r3
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d0a0      	beq.n	8008a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b095      	sub	sp, #84	@ 0x54
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e6      	bne.n	8008af4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	f023 0301 	bic.w	r3, r3, #1
 8008b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e5      	bne.n	8008b26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d118      	bne.n	8008b94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f023 0310 	bic.w	r3, r3, #16
 8008b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	6979      	ldr	r1, [r7, #20]
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	e841 2300 	strex	r3, r2, [r1]
 8008b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e6      	bne.n	8008b62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008ba8:	bf00      	nop
 8008baa:	3754      	adds	r7, #84	@ 0x54
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	f107 001c 	add.w	r0, r7, #28
 8008bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d121      	bne.n	8008c12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	4b21      	ldr	r3, [pc, #132]	@ (8008c64 <USB_CoreInit+0xb0>)
 8008be0:	4013      	ands	r3, r2
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d105      	bne.n	8008c06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa92 	bl	8009130 <USB_CoreReset>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]
 8008c10:	e010      	b.n	8008c34 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa86 	bl	8009130 <USB_CoreReset>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008c34:	7fbb      	ldrb	r3, [r7, #30]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d10b      	bne.n	8008c52 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f043 0206 	orr.w	r2, r3, #6
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f043 0220 	orr.w	r2, r3, #32
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c5e:	b004      	add	sp, #16
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	ffbdffbf 	.word	0xffbdffbf

08008c68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f023 0201 	bic.w	r2, r3, #1
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d115      	bne.n	8008cd8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008cb8:	200a      	movs	r0, #10
 8008cba:	f7fc f9f7 	bl	80050ac <HAL_Delay>
      ms += 10U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	330a      	adds	r3, #10
 8008cc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fa25 	bl	8009114 <USB_GetMode>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d01e      	beq.n	8008d0e <USB_SetCurrentMode+0x84>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2bc7      	cmp	r3, #199	@ 0xc7
 8008cd4:	d9f0      	bls.n	8008cb8 <USB_SetCurrentMode+0x2e>
 8008cd6:	e01a      	b.n	8008d0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d115      	bne.n	8008d0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008cea:	200a      	movs	r0, #10
 8008cec:	f7fc f9de 	bl	80050ac <HAL_Delay>
      ms += 10U;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	330a      	adds	r3, #10
 8008cf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa0c 	bl	8009114 <USB_GetMode>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <USB_SetCurrentMode+0x84>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d06:	d9f0      	bls.n	8008cea <USB_SetCurrentMode+0x60>
 8008d08:	e001      	b.n	8008d0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e005      	b.n	8008d1a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2bc8      	cmp	r3, #200	@ 0xc8
 8008d12:	d101      	bne.n	8008d18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e000      	b.n	8008d1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d24:	b084      	sub	sp, #16
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d3e:	2300      	movs	r3, #0
 8008d40:	613b      	str	r3, [r7, #16]
 8008d42:	e009      	b.n	8008d58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	3340      	adds	r3, #64	@ 0x40
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	3301      	adds	r3, #1
 8008d56:	613b      	str	r3, [r7, #16]
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	2b0e      	cmp	r3, #14
 8008d5c:	d9f2      	bls.n	8008d44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d11c      	bne.n	8008da0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d74:	f043 0302 	orr.w	r3, r3, #2
 8008d78:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	e005      	b.n	8008dac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008db2:	461a      	mov	r2, r3
 8008db4:	2300      	movs	r3, #0
 8008db6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008db8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d10d      	bne.n	8008ddc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008dc8:	2100      	movs	r1, #0
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f968 	bl	80090a0 <USB_SetDevSpeed>
 8008dd0:	e008      	b.n	8008de4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f963 	bl	80090a0 <USB_SetDevSpeed>
 8008dda:	e003      	b.n	8008de4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ddc:	2103      	movs	r1, #3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f95e 	bl	80090a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008de4:	2110      	movs	r1, #16
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8fa 	bl	8008fe0 <USB_FlushTxFifo>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f924 	bl	8009044 <USB_FlushRxFifo>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	2300      	movs	r3, #0
 8008e10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e18:	461a      	mov	r2, r3
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e24:	461a      	mov	r2, r3
 8008e26:	2300      	movs	r3, #0
 8008e28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	e043      	b.n	8008eb8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e46:	d118      	bne.n	8008e7a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10a      	bne.n	8008e64 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	e013      	b.n	8008e8c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e70:	461a      	mov	r2, r3
 8008e72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	e008      	b.n	8008e8c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e86:	461a      	mov	r2, r3
 8008e88:	2300      	movs	r3, #0
 8008e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e98:	461a      	mov	r2, r3
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008eb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d3b5      	bcc.n	8008e30 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
 8008ec8:	e043      	b.n	8008f52 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008edc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ee0:	d118      	bne.n	8008f14 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	e013      	b.n	8008f26 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	e008      	b.n	8008f26 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f20:	461a      	mov	r2, r3
 8008f22:	2300      	movs	r3, #0
 8008f24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f32:	461a      	mov	r2, r3
 8008f34:	2300      	movs	r3, #0
 8008f36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f44:	461a      	mov	r2, r3
 8008f46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	613b      	str	r3, [r7, #16]
 8008f52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f56:	461a      	mov	r2, r3
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d3b5      	bcc.n	8008eca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008f7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d105      	bne.n	8008f94 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	f043 0210 	orr.w	r2, r3, #16
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699a      	ldr	r2, [r3, #24]
 8008f98:	4b0f      	ldr	r3, [pc, #60]	@ (8008fd8 <USB_DevInit+0x2b4>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008fa0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d005      	beq.n	8008fb4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	f043 0208 	orr.w	r2, r3, #8
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d105      	bne.n	8008fc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699a      	ldr	r2, [r3, #24]
 8008fc0:	4b06      	ldr	r3, [pc, #24]	@ (8008fdc <USB_DevInit+0x2b8>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd4:	b004      	add	sp, #16
 8008fd6:	4770      	bx	lr
 8008fd8:	803c3800 	.word	0x803c3800
 8008fdc:	40000004 	.word	0x40000004

08008fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ffa:	d901      	bls.n	8009000 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e01b      	b.n	8009038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	daf2      	bge.n	8008fee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	019b      	lsls	r3, r3, #6
 8009010:	f043 0220 	orr.w	r2, r3, #32
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3301      	adds	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009024:	d901      	bls.n	800902a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e006      	b.n	8009038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b20      	cmp	r3, #32
 8009034:	d0f0      	beq.n	8009018 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800905c:	d901      	bls.n	8009062 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e018      	b.n	8009094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	daf2      	bge.n	8009050 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2210      	movs	r2, #16
 8009072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3301      	adds	r3, #1
 8009078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009080:	d901      	bls.n	8009086 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e006      	b.n	8009094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f003 0310 	and.w	r3, r3, #16
 800908e:	2b10      	cmp	r3, #16
 8009090:	d0f0      	beq.n	8009074 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	68f9      	ldr	r1, [r7, #12]
 80090bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090c0:	4313      	orrs	r3, r2
 80090c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090ec:	f023 0303 	bic.w	r3, r3, #3
 80090f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009100:	f043 0302 	orr.w	r3, r3, #2
 8009104:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	f003 0301 	and.w	r3, r3, #1
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3301      	adds	r3, #1
 8009140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009148:	d901      	bls.n	800914e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	e022      	b.n	8009194 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	daf2      	bge.n	800913c <USB_CoreReset+0xc>

  count = 10U;
 8009156:	230a      	movs	r3, #10
 8009158:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800915a:	e002      	b.n	8009162 <USB_CoreReset+0x32>
  {
    count--;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3b01      	subs	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1f9      	bne.n	800915c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f043 0201 	orr.w	r2, r3, #1
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009180:	d901      	bls.n	8009186 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e006      	b.n	8009194 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b01      	cmp	r3, #1
 8009190:	d0f0      	beq.n	8009174 <USB_CoreReset+0x44>

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <__cvt>:
 80091a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091a4:	ec57 6b10 	vmov	r6, r7, d0
 80091a8:	2f00      	cmp	r7, #0
 80091aa:	460c      	mov	r4, r1
 80091ac:	4619      	mov	r1, r3
 80091ae:	463b      	mov	r3, r7
 80091b0:	bfbb      	ittet	lt
 80091b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80091b6:	461f      	movlt	r7, r3
 80091b8:	2300      	movge	r3, #0
 80091ba:	232d      	movlt	r3, #45	@ 0x2d
 80091bc:	700b      	strb	r3, [r1, #0]
 80091be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80091c4:	4691      	mov	r9, r2
 80091c6:	f023 0820 	bic.w	r8, r3, #32
 80091ca:	bfbc      	itt	lt
 80091cc:	4632      	movlt	r2, r6
 80091ce:	4616      	movlt	r6, r2
 80091d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091d4:	d005      	beq.n	80091e2 <__cvt+0x42>
 80091d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80091da:	d100      	bne.n	80091de <__cvt+0x3e>
 80091dc:	3401      	adds	r4, #1
 80091de:	2102      	movs	r1, #2
 80091e0:	e000      	b.n	80091e4 <__cvt+0x44>
 80091e2:	2103      	movs	r1, #3
 80091e4:	ab03      	add	r3, sp, #12
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	ab02      	add	r3, sp, #8
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	ec47 6b10 	vmov	d0, r6, r7
 80091f0:	4653      	mov	r3, sl
 80091f2:	4622      	mov	r2, r4
 80091f4:	f000 fedc 	bl	8009fb0 <_dtoa_r>
 80091f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80091fc:	4605      	mov	r5, r0
 80091fe:	d119      	bne.n	8009234 <__cvt+0x94>
 8009200:	f019 0f01 	tst.w	r9, #1
 8009204:	d00e      	beq.n	8009224 <__cvt+0x84>
 8009206:	eb00 0904 	add.w	r9, r0, r4
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	4630      	mov	r0, r6
 8009210:	4639      	mov	r1, r7
 8009212:	f7f7 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 8009216:	b108      	cbz	r0, 800921c <__cvt+0x7c>
 8009218:	f8cd 900c 	str.w	r9, [sp, #12]
 800921c:	2230      	movs	r2, #48	@ 0x30
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	454b      	cmp	r3, r9
 8009222:	d31e      	bcc.n	8009262 <__cvt+0xc2>
 8009224:	9b03      	ldr	r3, [sp, #12]
 8009226:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009228:	1b5b      	subs	r3, r3, r5
 800922a:	4628      	mov	r0, r5
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	b004      	add	sp, #16
 8009230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009234:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009238:	eb00 0904 	add.w	r9, r0, r4
 800923c:	d1e5      	bne.n	800920a <__cvt+0x6a>
 800923e:	7803      	ldrb	r3, [r0, #0]
 8009240:	2b30      	cmp	r3, #48	@ 0x30
 8009242:	d10a      	bne.n	800925a <__cvt+0xba>
 8009244:	2200      	movs	r2, #0
 8009246:	2300      	movs	r3, #0
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	f7f7 fc5c 	bl	8000b08 <__aeabi_dcmpeq>
 8009250:	b918      	cbnz	r0, 800925a <__cvt+0xba>
 8009252:	f1c4 0401 	rsb	r4, r4, #1
 8009256:	f8ca 4000 	str.w	r4, [sl]
 800925a:	f8da 3000 	ldr.w	r3, [sl]
 800925e:	4499      	add	r9, r3
 8009260:	e7d3      	b.n	800920a <__cvt+0x6a>
 8009262:	1c59      	adds	r1, r3, #1
 8009264:	9103      	str	r1, [sp, #12]
 8009266:	701a      	strb	r2, [r3, #0]
 8009268:	e7d9      	b.n	800921e <__cvt+0x7e>

0800926a <__exponent>:
 800926a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800926c:	2900      	cmp	r1, #0
 800926e:	bfba      	itte	lt
 8009270:	4249      	neglt	r1, r1
 8009272:	232d      	movlt	r3, #45	@ 0x2d
 8009274:	232b      	movge	r3, #43	@ 0x2b
 8009276:	2909      	cmp	r1, #9
 8009278:	7002      	strb	r2, [r0, #0]
 800927a:	7043      	strb	r3, [r0, #1]
 800927c:	dd29      	ble.n	80092d2 <__exponent+0x68>
 800927e:	f10d 0307 	add.w	r3, sp, #7
 8009282:	461d      	mov	r5, r3
 8009284:	270a      	movs	r7, #10
 8009286:	461a      	mov	r2, r3
 8009288:	fbb1 f6f7 	udiv	r6, r1, r7
 800928c:	fb07 1416 	mls	r4, r7, r6, r1
 8009290:	3430      	adds	r4, #48	@ 0x30
 8009292:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009296:	460c      	mov	r4, r1
 8009298:	2c63      	cmp	r4, #99	@ 0x63
 800929a:	f103 33ff 	add.w	r3, r3, #4294967295
 800929e:	4631      	mov	r1, r6
 80092a0:	dcf1      	bgt.n	8009286 <__exponent+0x1c>
 80092a2:	3130      	adds	r1, #48	@ 0x30
 80092a4:	1e94      	subs	r4, r2, #2
 80092a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092aa:	1c41      	adds	r1, r0, #1
 80092ac:	4623      	mov	r3, r4
 80092ae:	42ab      	cmp	r3, r5
 80092b0:	d30a      	bcc.n	80092c8 <__exponent+0x5e>
 80092b2:	f10d 0309 	add.w	r3, sp, #9
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	42ac      	cmp	r4, r5
 80092ba:	bf88      	it	hi
 80092bc:	2300      	movhi	r3, #0
 80092be:	3302      	adds	r3, #2
 80092c0:	4403      	add	r3, r0
 80092c2:	1a18      	subs	r0, r3, r0
 80092c4:	b003      	add	sp, #12
 80092c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80092cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80092d0:	e7ed      	b.n	80092ae <__exponent+0x44>
 80092d2:	2330      	movs	r3, #48	@ 0x30
 80092d4:	3130      	adds	r1, #48	@ 0x30
 80092d6:	7083      	strb	r3, [r0, #2]
 80092d8:	70c1      	strb	r1, [r0, #3]
 80092da:	1d03      	adds	r3, r0, #4
 80092dc:	e7f1      	b.n	80092c2 <__exponent+0x58>
	...

080092e0 <_printf_float>:
 80092e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	b08d      	sub	sp, #52	@ 0x34
 80092e6:	460c      	mov	r4, r1
 80092e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80092ec:	4616      	mov	r6, r2
 80092ee:	461f      	mov	r7, r3
 80092f0:	4605      	mov	r5, r0
 80092f2:	f000 fd4d 	bl	8009d90 <_localeconv_r>
 80092f6:	6803      	ldr	r3, [r0, #0]
 80092f8:	9304      	str	r3, [sp, #16]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7f6 ffd8 	bl	80002b0 <strlen>
 8009300:	2300      	movs	r3, #0
 8009302:	930a      	str	r3, [sp, #40]	@ 0x28
 8009304:	f8d8 3000 	ldr.w	r3, [r8]
 8009308:	9005      	str	r0, [sp, #20]
 800930a:	3307      	adds	r3, #7
 800930c:	f023 0307 	bic.w	r3, r3, #7
 8009310:	f103 0208 	add.w	r2, r3, #8
 8009314:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009318:	f8d4 b000 	ldr.w	fp, [r4]
 800931c:	f8c8 2000 	str.w	r2, [r8]
 8009320:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009324:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009328:	9307      	str	r3, [sp, #28]
 800932a:	f8cd 8018 	str.w	r8, [sp, #24]
 800932e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009336:	4b9c      	ldr	r3, [pc, #624]	@ (80095a8 <_printf_float+0x2c8>)
 8009338:	f04f 32ff 	mov.w	r2, #4294967295
 800933c:	f7f7 fc16 	bl	8000b6c <__aeabi_dcmpun>
 8009340:	bb70      	cbnz	r0, 80093a0 <_printf_float+0xc0>
 8009342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009346:	4b98      	ldr	r3, [pc, #608]	@ (80095a8 <_printf_float+0x2c8>)
 8009348:	f04f 32ff 	mov.w	r2, #4294967295
 800934c:	f7f7 fbf0 	bl	8000b30 <__aeabi_dcmple>
 8009350:	bb30      	cbnz	r0, 80093a0 <_printf_float+0xc0>
 8009352:	2200      	movs	r2, #0
 8009354:	2300      	movs	r3, #0
 8009356:	4640      	mov	r0, r8
 8009358:	4649      	mov	r1, r9
 800935a:	f7f7 fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800935e:	b110      	cbz	r0, 8009366 <_printf_float+0x86>
 8009360:	232d      	movs	r3, #45	@ 0x2d
 8009362:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009366:	4a91      	ldr	r2, [pc, #580]	@ (80095ac <_printf_float+0x2cc>)
 8009368:	4b91      	ldr	r3, [pc, #580]	@ (80095b0 <_printf_float+0x2d0>)
 800936a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800936e:	bf8c      	ite	hi
 8009370:	4690      	movhi	r8, r2
 8009372:	4698      	movls	r8, r3
 8009374:	2303      	movs	r3, #3
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	f02b 0304 	bic.w	r3, fp, #4
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	f04f 0900 	mov.w	r9, #0
 8009382:	9700      	str	r7, [sp, #0]
 8009384:	4633      	mov	r3, r6
 8009386:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009388:	4621      	mov	r1, r4
 800938a:	4628      	mov	r0, r5
 800938c:	f000 f9d2 	bl	8009734 <_printf_common>
 8009390:	3001      	adds	r0, #1
 8009392:	f040 808d 	bne.w	80094b0 <_printf_float+0x1d0>
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	b00d      	add	sp, #52	@ 0x34
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a0:	4642      	mov	r2, r8
 80093a2:	464b      	mov	r3, r9
 80093a4:	4640      	mov	r0, r8
 80093a6:	4649      	mov	r1, r9
 80093a8:	f7f7 fbe0 	bl	8000b6c <__aeabi_dcmpun>
 80093ac:	b140      	cbz	r0, 80093c0 <_printf_float+0xe0>
 80093ae:	464b      	mov	r3, r9
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bfbc      	itt	lt
 80093b4:	232d      	movlt	r3, #45	@ 0x2d
 80093b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80093ba:	4a7e      	ldr	r2, [pc, #504]	@ (80095b4 <_printf_float+0x2d4>)
 80093bc:	4b7e      	ldr	r3, [pc, #504]	@ (80095b8 <_printf_float+0x2d8>)
 80093be:	e7d4      	b.n	800936a <_printf_float+0x8a>
 80093c0:	6863      	ldr	r3, [r4, #4]
 80093c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80093c6:	9206      	str	r2, [sp, #24]
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	d13b      	bne.n	8009444 <_printf_float+0x164>
 80093cc:	2306      	movs	r3, #6
 80093ce:	6063      	str	r3, [r4, #4]
 80093d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80093d4:	2300      	movs	r3, #0
 80093d6:	6022      	str	r2, [r4, #0]
 80093d8:	9303      	str	r3, [sp, #12]
 80093da:	ab0a      	add	r3, sp, #40	@ 0x28
 80093dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80093e0:	ab09      	add	r3, sp, #36	@ 0x24
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	6861      	ldr	r1, [r4, #4]
 80093e6:	ec49 8b10 	vmov	d0, r8, r9
 80093ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80093ee:	4628      	mov	r0, r5
 80093f0:	f7ff fed6 	bl	80091a0 <__cvt>
 80093f4:	9b06      	ldr	r3, [sp, #24]
 80093f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093f8:	2b47      	cmp	r3, #71	@ 0x47
 80093fa:	4680      	mov	r8, r0
 80093fc:	d129      	bne.n	8009452 <_printf_float+0x172>
 80093fe:	1cc8      	adds	r0, r1, #3
 8009400:	db02      	blt.n	8009408 <_printf_float+0x128>
 8009402:	6863      	ldr	r3, [r4, #4]
 8009404:	4299      	cmp	r1, r3
 8009406:	dd41      	ble.n	800948c <_printf_float+0x1ac>
 8009408:	f1aa 0a02 	sub.w	sl, sl, #2
 800940c:	fa5f fa8a 	uxtb.w	sl, sl
 8009410:	3901      	subs	r1, #1
 8009412:	4652      	mov	r2, sl
 8009414:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009418:	9109      	str	r1, [sp, #36]	@ 0x24
 800941a:	f7ff ff26 	bl	800926a <__exponent>
 800941e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009420:	1813      	adds	r3, r2, r0
 8009422:	2a01      	cmp	r2, #1
 8009424:	4681      	mov	r9, r0
 8009426:	6123      	str	r3, [r4, #16]
 8009428:	dc02      	bgt.n	8009430 <_printf_float+0x150>
 800942a:	6822      	ldr	r2, [r4, #0]
 800942c:	07d2      	lsls	r2, r2, #31
 800942e:	d501      	bpl.n	8009434 <_printf_float+0x154>
 8009430:	3301      	adds	r3, #1
 8009432:	6123      	str	r3, [r4, #16]
 8009434:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0a2      	beq.n	8009382 <_printf_float+0xa2>
 800943c:	232d      	movs	r3, #45	@ 0x2d
 800943e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009442:	e79e      	b.n	8009382 <_printf_float+0xa2>
 8009444:	9a06      	ldr	r2, [sp, #24]
 8009446:	2a47      	cmp	r2, #71	@ 0x47
 8009448:	d1c2      	bne.n	80093d0 <_printf_float+0xf0>
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1c0      	bne.n	80093d0 <_printf_float+0xf0>
 800944e:	2301      	movs	r3, #1
 8009450:	e7bd      	b.n	80093ce <_printf_float+0xee>
 8009452:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009456:	d9db      	bls.n	8009410 <_printf_float+0x130>
 8009458:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800945c:	d118      	bne.n	8009490 <_printf_float+0x1b0>
 800945e:	2900      	cmp	r1, #0
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	dd0b      	ble.n	800947c <_printf_float+0x19c>
 8009464:	6121      	str	r1, [r4, #16]
 8009466:	b913      	cbnz	r3, 800946e <_printf_float+0x18e>
 8009468:	6822      	ldr	r2, [r4, #0]
 800946a:	07d0      	lsls	r0, r2, #31
 800946c:	d502      	bpl.n	8009474 <_printf_float+0x194>
 800946e:	3301      	adds	r3, #1
 8009470:	440b      	add	r3, r1
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009476:	f04f 0900 	mov.w	r9, #0
 800947a:	e7db      	b.n	8009434 <_printf_float+0x154>
 800947c:	b913      	cbnz	r3, 8009484 <_printf_float+0x1a4>
 800947e:	6822      	ldr	r2, [r4, #0]
 8009480:	07d2      	lsls	r2, r2, #31
 8009482:	d501      	bpl.n	8009488 <_printf_float+0x1a8>
 8009484:	3302      	adds	r3, #2
 8009486:	e7f4      	b.n	8009472 <_printf_float+0x192>
 8009488:	2301      	movs	r3, #1
 800948a:	e7f2      	b.n	8009472 <_printf_float+0x192>
 800948c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009492:	4299      	cmp	r1, r3
 8009494:	db05      	blt.n	80094a2 <_printf_float+0x1c2>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	6121      	str	r1, [r4, #16]
 800949a:	07d8      	lsls	r0, r3, #31
 800949c:	d5ea      	bpl.n	8009474 <_printf_float+0x194>
 800949e:	1c4b      	adds	r3, r1, #1
 80094a0:	e7e7      	b.n	8009472 <_printf_float+0x192>
 80094a2:	2900      	cmp	r1, #0
 80094a4:	bfd4      	ite	le
 80094a6:	f1c1 0202 	rsble	r2, r1, #2
 80094aa:	2201      	movgt	r2, #1
 80094ac:	4413      	add	r3, r2
 80094ae:	e7e0      	b.n	8009472 <_printf_float+0x192>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	055a      	lsls	r2, r3, #21
 80094b4:	d407      	bmi.n	80094c6 <_printf_float+0x1e6>
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	4642      	mov	r2, r8
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	47b8      	blx	r7
 80094c0:	3001      	adds	r0, #1
 80094c2:	d12b      	bne.n	800951c <_printf_float+0x23c>
 80094c4:	e767      	b.n	8009396 <_printf_float+0xb6>
 80094c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80094ca:	f240 80dd 	bls.w	8009688 <_printf_float+0x3a8>
 80094ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094d2:	2200      	movs	r2, #0
 80094d4:	2300      	movs	r3, #0
 80094d6:	f7f7 fb17 	bl	8000b08 <__aeabi_dcmpeq>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d033      	beq.n	8009546 <_printf_float+0x266>
 80094de:	4a37      	ldr	r2, [pc, #220]	@ (80095bc <_printf_float+0x2dc>)
 80094e0:	2301      	movs	r3, #1
 80094e2:	4631      	mov	r1, r6
 80094e4:	4628      	mov	r0, r5
 80094e6:	47b8      	blx	r7
 80094e8:	3001      	adds	r0, #1
 80094ea:	f43f af54 	beq.w	8009396 <_printf_float+0xb6>
 80094ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80094f2:	4543      	cmp	r3, r8
 80094f4:	db02      	blt.n	80094fc <_printf_float+0x21c>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	07d8      	lsls	r0, r3, #31
 80094fa:	d50f      	bpl.n	800951c <_printf_float+0x23c>
 80094fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009500:	4631      	mov	r1, r6
 8009502:	4628      	mov	r0, r5
 8009504:	47b8      	blx	r7
 8009506:	3001      	adds	r0, #1
 8009508:	f43f af45 	beq.w	8009396 <_printf_float+0xb6>
 800950c:	f04f 0900 	mov.w	r9, #0
 8009510:	f108 38ff 	add.w	r8, r8, #4294967295
 8009514:	f104 0a1a 	add.w	sl, r4, #26
 8009518:	45c8      	cmp	r8, r9
 800951a:	dc09      	bgt.n	8009530 <_printf_float+0x250>
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	079b      	lsls	r3, r3, #30
 8009520:	f100 8103 	bmi.w	800972a <_printf_float+0x44a>
 8009524:	68e0      	ldr	r0, [r4, #12]
 8009526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009528:	4298      	cmp	r0, r3
 800952a:	bfb8      	it	lt
 800952c:	4618      	movlt	r0, r3
 800952e:	e734      	b.n	800939a <_printf_float+0xba>
 8009530:	2301      	movs	r3, #1
 8009532:	4652      	mov	r2, sl
 8009534:	4631      	mov	r1, r6
 8009536:	4628      	mov	r0, r5
 8009538:	47b8      	blx	r7
 800953a:	3001      	adds	r0, #1
 800953c:	f43f af2b 	beq.w	8009396 <_printf_float+0xb6>
 8009540:	f109 0901 	add.w	r9, r9, #1
 8009544:	e7e8      	b.n	8009518 <_printf_float+0x238>
 8009546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009548:	2b00      	cmp	r3, #0
 800954a:	dc39      	bgt.n	80095c0 <_printf_float+0x2e0>
 800954c:	4a1b      	ldr	r2, [pc, #108]	@ (80095bc <_printf_float+0x2dc>)
 800954e:	2301      	movs	r3, #1
 8009550:	4631      	mov	r1, r6
 8009552:	4628      	mov	r0, r5
 8009554:	47b8      	blx	r7
 8009556:	3001      	adds	r0, #1
 8009558:	f43f af1d 	beq.w	8009396 <_printf_float+0xb6>
 800955c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009560:	ea59 0303 	orrs.w	r3, r9, r3
 8009564:	d102      	bne.n	800956c <_printf_float+0x28c>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	07d9      	lsls	r1, r3, #31
 800956a:	d5d7      	bpl.n	800951c <_printf_float+0x23c>
 800956c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009570:	4631      	mov	r1, r6
 8009572:	4628      	mov	r0, r5
 8009574:	47b8      	blx	r7
 8009576:	3001      	adds	r0, #1
 8009578:	f43f af0d 	beq.w	8009396 <_printf_float+0xb6>
 800957c:	f04f 0a00 	mov.w	sl, #0
 8009580:	f104 0b1a 	add.w	fp, r4, #26
 8009584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009586:	425b      	negs	r3, r3
 8009588:	4553      	cmp	r3, sl
 800958a:	dc01      	bgt.n	8009590 <_printf_float+0x2b0>
 800958c:	464b      	mov	r3, r9
 800958e:	e793      	b.n	80094b8 <_printf_float+0x1d8>
 8009590:	2301      	movs	r3, #1
 8009592:	465a      	mov	r2, fp
 8009594:	4631      	mov	r1, r6
 8009596:	4628      	mov	r0, r5
 8009598:	47b8      	blx	r7
 800959a:	3001      	adds	r0, #1
 800959c:	f43f aefb 	beq.w	8009396 <_printf_float+0xb6>
 80095a0:	f10a 0a01 	add.w	sl, sl, #1
 80095a4:	e7ee      	b.n	8009584 <_printf_float+0x2a4>
 80095a6:	bf00      	nop
 80095a8:	7fefffff 	.word	0x7fefffff
 80095ac:	0800d73c 	.word	0x0800d73c
 80095b0:	0800d738 	.word	0x0800d738
 80095b4:	0800d744 	.word	0x0800d744
 80095b8:	0800d740 	.word	0x0800d740
 80095bc:	0800d748 	.word	0x0800d748
 80095c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095c6:	4553      	cmp	r3, sl
 80095c8:	bfa8      	it	ge
 80095ca:	4653      	movge	r3, sl
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	4699      	mov	r9, r3
 80095d0:	dc36      	bgt.n	8009640 <_printf_float+0x360>
 80095d2:	f04f 0b00 	mov.w	fp, #0
 80095d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095da:	f104 021a 	add.w	r2, r4, #26
 80095de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095e0:	9306      	str	r3, [sp, #24]
 80095e2:	eba3 0309 	sub.w	r3, r3, r9
 80095e6:	455b      	cmp	r3, fp
 80095e8:	dc31      	bgt.n	800964e <_printf_float+0x36e>
 80095ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ec:	459a      	cmp	sl, r3
 80095ee:	dc3a      	bgt.n	8009666 <_printf_float+0x386>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	07da      	lsls	r2, r3, #31
 80095f4:	d437      	bmi.n	8009666 <_printf_float+0x386>
 80095f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f8:	ebaa 0903 	sub.w	r9, sl, r3
 80095fc:	9b06      	ldr	r3, [sp, #24]
 80095fe:	ebaa 0303 	sub.w	r3, sl, r3
 8009602:	4599      	cmp	r9, r3
 8009604:	bfa8      	it	ge
 8009606:	4699      	movge	r9, r3
 8009608:	f1b9 0f00 	cmp.w	r9, #0
 800960c:	dc33      	bgt.n	8009676 <_printf_float+0x396>
 800960e:	f04f 0800 	mov.w	r8, #0
 8009612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009616:	f104 0b1a 	add.w	fp, r4, #26
 800961a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800961c:	ebaa 0303 	sub.w	r3, sl, r3
 8009620:	eba3 0309 	sub.w	r3, r3, r9
 8009624:	4543      	cmp	r3, r8
 8009626:	f77f af79 	ble.w	800951c <_printf_float+0x23c>
 800962a:	2301      	movs	r3, #1
 800962c:	465a      	mov	r2, fp
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	f43f aeae 	beq.w	8009396 <_printf_float+0xb6>
 800963a:	f108 0801 	add.w	r8, r8, #1
 800963e:	e7ec      	b.n	800961a <_printf_float+0x33a>
 8009640:	4642      	mov	r2, r8
 8009642:	4631      	mov	r1, r6
 8009644:	4628      	mov	r0, r5
 8009646:	47b8      	blx	r7
 8009648:	3001      	adds	r0, #1
 800964a:	d1c2      	bne.n	80095d2 <_printf_float+0x2f2>
 800964c:	e6a3      	b.n	8009396 <_printf_float+0xb6>
 800964e:	2301      	movs	r3, #1
 8009650:	4631      	mov	r1, r6
 8009652:	4628      	mov	r0, r5
 8009654:	9206      	str	r2, [sp, #24]
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f ae9c 	beq.w	8009396 <_printf_float+0xb6>
 800965e:	9a06      	ldr	r2, [sp, #24]
 8009660:	f10b 0b01 	add.w	fp, fp, #1
 8009664:	e7bb      	b.n	80095de <_printf_float+0x2fe>
 8009666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800966a:	4631      	mov	r1, r6
 800966c:	4628      	mov	r0, r5
 800966e:	47b8      	blx	r7
 8009670:	3001      	adds	r0, #1
 8009672:	d1c0      	bne.n	80095f6 <_printf_float+0x316>
 8009674:	e68f      	b.n	8009396 <_printf_float+0xb6>
 8009676:	9a06      	ldr	r2, [sp, #24]
 8009678:	464b      	mov	r3, r9
 800967a:	4442      	add	r2, r8
 800967c:	4631      	mov	r1, r6
 800967e:	4628      	mov	r0, r5
 8009680:	47b8      	blx	r7
 8009682:	3001      	adds	r0, #1
 8009684:	d1c3      	bne.n	800960e <_printf_float+0x32e>
 8009686:	e686      	b.n	8009396 <_printf_float+0xb6>
 8009688:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800968c:	f1ba 0f01 	cmp.w	sl, #1
 8009690:	dc01      	bgt.n	8009696 <_printf_float+0x3b6>
 8009692:	07db      	lsls	r3, r3, #31
 8009694:	d536      	bpl.n	8009704 <_printf_float+0x424>
 8009696:	2301      	movs	r3, #1
 8009698:	4642      	mov	r2, r8
 800969a:	4631      	mov	r1, r6
 800969c:	4628      	mov	r0, r5
 800969e:	47b8      	blx	r7
 80096a0:	3001      	adds	r0, #1
 80096a2:	f43f ae78 	beq.w	8009396 <_printf_float+0xb6>
 80096a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	47b8      	blx	r7
 80096b0:	3001      	adds	r0, #1
 80096b2:	f43f ae70 	beq.w	8009396 <_printf_float+0xb6>
 80096b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096ba:	2200      	movs	r2, #0
 80096bc:	2300      	movs	r3, #0
 80096be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096c2:	f7f7 fa21 	bl	8000b08 <__aeabi_dcmpeq>
 80096c6:	b9c0      	cbnz	r0, 80096fa <_printf_float+0x41a>
 80096c8:	4653      	mov	r3, sl
 80096ca:	f108 0201 	add.w	r2, r8, #1
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	d10c      	bne.n	80096f2 <_printf_float+0x412>
 80096d8:	e65d      	b.n	8009396 <_printf_float+0xb6>
 80096da:	2301      	movs	r3, #1
 80096dc:	465a      	mov	r2, fp
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	47b8      	blx	r7
 80096e4:	3001      	adds	r0, #1
 80096e6:	f43f ae56 	beq.w	8009396 <_printf_float+0xb6>
 80096ea:	f108 0801 	add.w	r8, r8, #1
 80096ee:	45d0      	cmp	r8, sl
 80096f0:	dbf3      	blt.n	80096da <_printf_float+0x3fa>
 80096f2:	464b      	mov	r3, r9
 80096f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80096f8:	e6df      	b.n	80094ba <_printf_float+0x1da>
 80096fa:	f04f 0800 	mov.w	r8, #0
 80096fe:	f104 0b1a 	add.w	fp, r4, #26
 8009702:	e7f4      	b.n	80096ee <_printf_float+0x40e>
 8009704:	2301      	movs	r3, #1
 8009706:	4642      	mov	r2, r8
 8009708:	e7e1      	b.n	80096ce <_printf_float+0x3ee>
 800970a:	2301      	movs	r3, #1
 800970c:	464a      	mov	r2, r9
 800970e:	4631      	mov	r1, r6
 8009710:	4628      	mov	r0, r5
 8009712:	47b8      	blx	r7
 8009714:	3001      	adds	r0, #1
 8009716:	f43f ae3e 	beq.w	8009396 <_printf_float+0xb6>
 800971a:	f108 0801 	add.w	r8, r8, #1
 800971e:	68e3      	ldr	r3, [r4, #12]
 8009720:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009722:	1a5b      	subs	r3, r3, r1
 8009724:	4543      	cmp	r3, r8
 8009726:	dcf0      	bgt.n	800970a <_printf_float+0x42a>
 8009728:	e6fc      	b.n	8009524 <_printf_float+0x244>
 800972a:	f04f 0800 	mov.w	r8, #0
 800972e:	f104 0919 	add.w	r9, r4, #25
 8009732:	e7f4      	b.n	800971e <_printf_float+0x43e>

08009734 <_printf_common>:
 8009734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009738:	4616      	mov	r6, r2
 800973a:	4698      	mov	r8, r3
 800973c:	688a      	ldr	r2, [r1, #8]
 800973e:	690b      	ldr	r3, [r1, #16]
 8009740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009744:	4293      	cmp	r3, r2
 8009746:	bfb8      	it	lt
 8009748:	4613      	movlt	r3, r2
 800974a:	6033      	str	r3, [r6, #0]
 800974c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009750:	4607      	mov	r7, r0
 8009752:	460c      	mov	r4, r1
 8009754:	b10a      	cbz	r2, 800975a <_printf_common+0x26>
 8009756:	3301      	adds	r3, #1
 8009758:	6033      	str	r3, [r6, #0]
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	0699      	lsls	r1, r3, #26
 800975e:	bf42      	ittt	mi
 8009760:	6833      	ldrmi	r3, [r6, #0]
 8009762:	3302      	addmi	r3, #2
 8009764:	6033      	strmi	r3, [r6, #0]
 8009766:	6825      	ldr	r5, [r4, #0]
 8009768:	f015 0506 	ands.w	r5, r5, #6
 800976c:	d106      	bne.n	800977c <_printf_common+0x48>
 800976e:	f104 0a19 	add.w	sl, r4, #25
 8009772:	68e3      	ldr	r3, [r4, #12]
 8009774:	6832      	ldr	r2, [r6, #0]
 8009776:	1a9b      	subs	r3, r3, r2
 8009778:	42ab      	cmp	r3, r5
 800977a:	dc26      	bgt.n	80097ca <_printf_common+0x96>
 800977c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009780:	6822      	ldr	r2, [r4, #0]
 8009782:	3b00      	subs	r3, #0
 8009784:	bf18      	it	ne
 8009786:	2301      	movne	r3, #1
 8009788:	0692      	lsls	r2, r2, #26
 800978a:	d42b      	bmi.n	80097e4 <_printf_common+0xb0>
 800978c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009790:	4641      	mov	r1, r8
 8009792:	4638      	mov	r0, r7
 8009794:	47c8      	blx	r9
 8009796:	3001      	adds	r0, #1
 8009798:	d01e      	beq.n	80097d8 <_printf_common+0xa4>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	6922      	ldr	r2, [r4, #16]
 800979e:	f003 0306 	and.w	r3, r3, #6
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	bf02      	ittt	eq
 80097a6:	68e5      	ldreq	r5, [r4, #12]
 80097a8:	6833      	ldreq	r3, [r6, #0]
 80097aa:	1aed      	subeq	r5, r5, r3
 80097ac:	68a3      	ldr	r3, [r4, #8]
 80097ae:	bf0c      	ite	eq
 80097b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097b4:	2500      	movne	r5, #0
 80097b6:	4293      	cmp	r3, r2
 80097b8:	bfc4      	itt	gt
 80097ba:	1a9b      	subgt	r3, r3, r2
 80097bc:	18ed      	addgt	r5, r5, r3
 80097be:	2600      	movs	r6, #0
 80097c0:	341a      	adds	r4, #26
 80097c2:	42b5      	cmp	r5, r6
 80097c4:	d11a      	bne.n	80097fc <_printf_common+0xc8>
 80097c6:	2000      	movs	r0, #0
 80097c8:	e008      	b.n	80097dc <_printf_common+0xa8>
 80097ca:	2301      	movs	r3, #1
 80097cc:	4652      	mov	r2, sl
 80097ce:	4641      	mov	r1, r8
 80097d0:	4638      	mov	r0, r7
 80097d2:	47c8      	blx	r9
 80097d4:	3001      	adds	r0, #1
 80097d6:	d103      	bne.n	80097e0 <_printf_common+0xac>
 80097d8:	f04f 30ff 	mov.w	r0, #4294967295
 80097dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e0:	3501      	adds	r5, #1
 80097e2:	e7c6      	b.n	8009772 <_printf_common+0x3e>
 80097e4:	18e1      	adds	r1, r4, r3
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	2030      	movs	r0, #48	@ 0x30
 80097ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80097ee:	4422      	add	r2, r4
 80097f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80097f8:	3302      	adds	r3, #2
 80097fa:	e7c7      	b.n	800978c <_printf_common+0x58>
 80097fc:	2301      	movs	r3, #1
 80097fe:	4622      	mov	r2, r4
 8009800:	4641      	mov	r1, r8
 8009802:	4638      	mov	r0, r7
 8009804:	47c8      	blx	r9
 8009806:	3001      	adds	r0, #1
 8009808:	d0e6      	beq.n	80097d8 <_printf_common+0xa4>
 800980a:	3601      	adds	r6, #1
 800980c:	e7d9      	b.n	80097c2 <_printf_common+0x8e>
	...

08009810 <_printf_i>:
 8009810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009814:	7e0f      	ldrb	r7, [r1, #24]
 8009816:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009818:	2f78      	cmp	r7, #120	@ 0x78
 800981a:	4691      	mov	r9, r2
 800981c:	4680      	mov	r8, r0
 800981e:	460c      	mov	r4, r1
 8009820:	469a      	mov	sl, r3
 8009822:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009826:	d807      	bhi.n	8009838 <_printf_i+0x28>
 8009828:	2f62      	cmp	r7, #98	@ 0x62
 800982a:	d80a      	bhi.n	8009842 <_printf_i+0x32>
 800982c:	2f00      	cmp	r7, #0
 800982e:	f000 80d1 	beq.w	80099d4 <_printf_i+0x1c4>
 8009832:	2f58      	cmp	r7, #88	@ 0x58
 8009834:	f000 80b8 	beq.w	80099a8 <_printf_i+0x198>
 8009838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800983c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009840:	e03a      	b.n	80098b8 <_printf_i+0xa8>
 8009842:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009846:	2b15      	cmp	r3, #21
 8009848:	d8f6      	bhi.n	8009838 <_printf_i+0x28>
 800984a:	a101      	add	r1, pc, #4	@ (adr r1, 8009850 <_printf_i+0x40>)
 800984c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009850:	080098a9 	.word	0x080098a9
 8009854:	080098bd 	.word	0x080098bd
 8009858:	08009839 	.word	0x08009839
 800985c:	08009839 	.word	0x08009839
 8009860:	08009839 	.word	0x08009839
 8009864:	08009839 	.word	0x08009839
 8009868:	080098bd 	.word	0x080098bd
 800986c:	08009839 	.word	0x08009839
 8009870:	08009839 	.word	0x08009839
 8009874:	08009839 	.word	0x08009839
 8009878:	08009839 	.word	0x08009839
 800987c:	080099bb 	.word	0x080099bb
 8009880:	080098e7 	.word	0x080098e7
 8009884:	08009975 	.word	0x08009975
 8009888:	08009839 	.word	0x08009839
 800988c:	08009839 	.word	0x08009839
 8009890:	080099dd 	.word	0x080099dd
 8009894:	08009839 	.word	0x08009839
 8009898:	080098e7 	.word	0x080098e7
 800989c:	08009839 	.word	0x08009839
 80098a0:	08009839 	.word	0x08009839
 80098a4:	0800997d 	.word	0x0800997d
 80098a8:	6833      	ldr	r3, [r6, #0]
 80098aa:	1d1a      	adds	r2, r3, #4
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	6032      	str	r2, [r6, #0]
 80098b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098b8:	2301      	movs	r3, #1
 80098ba:	e09c      	b.n	80099f6 <_printf_i+0x1e6>
 80098bc:	6833      	ldr	r3, [r6, #0]
 80098be:	6820      	ldr	r0, [r4, #0]
 80098c0:	1d19      	adds	r1, r3, #4
 80098c2:	6031      	str	r1, [r6, #0]
 80098c4:	0606      	lsls	r6, r0, #24
 80098c6:	d501      	bpl.n	80098cc <_printf_i+0xbc>
 80098c8:	681d      	ldr	r5, [r3, #0]
 80098ca:	e003      	b.n	80098d4 <_printf_i+0xc4>
 80098cc:	0645      	lsls	r5, r0, #25
 80098ce:	d5fb      	bpl.n	80098c8 <_printf_i+0xb8>
 80098d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80098d4:	2d00      	cmp	r5, #0
 80098d6:	da03      	bge.n	80098e0 <_printf_i+0xd0>
 80098d8:	232d      	movs	r3, #45	@ 0x2d
 80098da:	426d      	negs	r5, r5
 80098dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098e0:	4858      	ldr	r0, [pc, #352]	@ (8009a44 <_printf_i+0x234>)
 80098e2:	230a      	movs	r3, #10
 80098e4:	e011      	b.n	800990a <_printf_i+0xfa>
 80098e6:	6821      	ldr	r1, [r4, #0]
 80098e8:	6833      	ldr	r3, [r6, #0]
 80098ea:	0608      	lsls	r0, r1, #24
 80098ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80098f0:	d402      	bmi.n	80098f8 <_printf_i+0xe8>
 80098f2:	0649      	lsls	r1, r1, #25
 80098f4:	bf48      	it	mi
 80098f6:	b2ad      	uxthmi	r5, r5
 80098f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80098fa:	4852      	ldr	r0, [pc, #328]	@ (8009a44 <_printf_i+0x234>)
 80098fc:	6033      	str	r3, [r6, #0]
 80098fe:	bf14      	ite	ne
 8009900:	230a      	movne	r3, #10
 8009902:	2308      	moveq	r3, #8
 8009904:	2100      	movs	r1, #0
 8009906:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800990a:	6866      	ldr	r6, [r4, #4]
 800990c:	60a6      	str	r6, [r4, #8]
 800990e:	2e00      	cmp	r6, #0
 8009910:	db05      	blt.n	800991e <_printf_i+0x10e>
 8009912:	6821      	ldr	r1, [r4, #0]
 8009914:	432e      	orrs	r6, r5
 8009916:	f021 0104 	bic.w	r1, r1, #4
 800991a:	6021      	str	r1, [r4, #0]
 800991c:	d04b      	beq.n	80099b6 <_printf_i+0x1a6>
 800991e:	4616      	mov	r6, r2
 8009920:	fbb5 f1f3 	udiv	r1, r5, r3
 8009924:	fb03 5711 	mls	r7, r3, r1, r5
 8009928:	5dc7      	ldrb	r7, [r0, r7]
 800992a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800992e:	462f      	mov	r7, r5
 8009930:	42bb      	cmp	r3, r7
 8009932:	460d      	mov	r5, r1
 8009934:	d9f4      	bls.n	8009920 <_printf_i+0x110>
 8009936:	2b08      	cmp	r3, #8
 8009938:	d10b      	bne.n	8009952 <_printf_i+0x142>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	07df      	lsls	r7, r3, #31
 800993e:	d508      	bpl.n	8009952 <_printf_i+0x142>
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	6861      	ldr	r1, [r4, #4]
 8009944:	4299      	cmp	r1, r3
 8009946:	bfde      	ittt	le
 8009948:	2330      	movle	r3, #48	@ 0x30
 800994a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800994e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009952:	1b92      	subs	r2, r2, r6
 8009954:	6122      	str	r2, [r4, #16]
 8009956:	f8cd a000 	str.w	sl, [sp]
 800995a:	464b      	mov	r3, r9
 800995c:	aa03      	add	r2, sp, #12
 800995e:	4621      	mov	r1, r4
 8009960:	4640      	mov	r0, r8
 8009962:	f7ff fee7 	bl	8009734 <_printf_common>
 8009966:	3001      	adds	r0, #1
 8009968:	d14a      	bne.n	8009a00 <_printf_i+0x1f0>
 800996a:	f04f 30ff 	mov.w	r0, #4294967295
 800996e:	b004      	add	sp, #16
 8009970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	f043 0320 	orr.w	r3, r3, #32
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	4832      	ldr	r0, [pc, #200]	@ (8009a48 <_printf_i+0x238>)
 800997e:	2778      	movs	r7, #120	@ 0x78
 8009980:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	6831      	ldr	r1, [r6, #0]
 8009988:	061f      	lsls	r7, r3, #24
 800998a:	f851 5b04 	ldr.w	r5, [r1], #4
 800998e:	d402      	bmi.n	8009996 <_printf_i+0x186>
 8009990:	065f      	lsls	r7, r3, #25
 8009992:	bf48      	it	mi
 8009994:	b2ad      	uxthmi	r5, r5
 8009996:	6031      	str	r1, [r6, #0]
 8009998:	07d9      	lsls	r1, r3, #31
 800999a:	bf44      	itt	mi
 800999c:	f043 0320 	orrmi.w	r3, r3, #32
 80099a0:	6023      	strmi	r3, [r4, #0]
 80099a2:	b11d      	cbz	r5, 80099ac <_printf_i+0x19c>
 80099a4:	2310      	movs	r3, #16
 80099a6:	e7ad      	b.n	8009904 <_printf_i+0xf4>
 80099a8:	4826      	ldr	r0, [pc, #152]	@ (8009a44 <_printf_i+0x234>)
 80099aa:	e7e9      	b.n	8009980 <_printf_i+0x170>
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	f023 0320 	bic.w	r3, r3, #32
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	e7f6      	b.n	80099a4 <_printf_i+0x194>
 80099b6:	4616      	mov	r6, r2
 80099b8:	e7bd      	b.n	8009936 <_printf_i+0x126>
 80099ba:	6833      	ldr	r3, [r6, #0]
 80099bc:	6825      	ldr	r5, [r4, #0]
 80099be:	6961      	ldr	r1, [r4, #20]
 80099c0:	1d18      	adds	r0, r3, #4
 80099c2:	6030      	str	r0, [r6, #0]
 80099c4:	062e      	lsls	r6, r5, #24
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	d501      	bpl.n	80099ce <_printf_i+0x1be>
 80099ca:	6019      	str	r1, [r3, #0]
 80099cc:	e002      	b.n	80099d4 <_printf_i+0x1c4>
 80099ce:	0668      	lsls	r0, r5, #25
 80099d0:	d5fb      	bpl.n	80099ca <_printf_i+0x1ba>
 80099d2:	8019      	strh	r1, [r3, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	6123      	str	r3, [r4, #16]
 80099d8:	4616      	mov	r6, r2
 80099da:	e7bc      	b.n	8009956 <_printf_i+0x146>
 80099dc:	6833      	ldr	r3, [r6, #0]
 80099de:	1d1a      	adds	r2, r3, #4
 80099e0:	6032      	str	r2, [r6, #0]
 80099e2:	681e      	ldr	r6, [r3, #0]
 80099e4:	6862      	ldr	r2, [r4, #4]
 80099e6:	2100      	movs	r1, #0
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7f6 fc11 	bl	8000210 <memchr>
 80099ee:	b108      	cbz	r0, 80099f4 <_printf_i+0x1e4>
 80099f0:	1b80      	subs	r0, r0, r6
 80099f2:	6060      	str	r0, [r4, #4]
 80099f4:	6863      	ldr	r3, [r4, #4]
 80099f6:	6123      	str	r3, [r4, #16]
 80099f8:	2300      	movs	r3, #0
 80099fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099fe:	e7aa      	b.n	8009956 <_printf_i+0x146>
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	4632      	mov	r2, r6
 8009a04:	4649      	mov	r1, r9
 8009a06:	4640      	mov	r0, r8
 8009a08:	47d0      	blx	sl
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	d0ad      	beq.n	800996a <_printf_i+0x15a>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	079b      	lsls	r3, r3, #30
 8009a12:	d413      	bmi.n	8009a3c <_printf_i+0x22c>
 8009a14:	68e0      	ldr	r0, [r4, #12]
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	4298      	cmp	r0, r3
 8009a1a:	bfb8      	it	lt
 8009a1c:	4618      	movlt	r0, r3
 8009a1e:	e7a6      	b.n	800996e <_printf_i+0x15e>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4632      	mov	r2, r6
 8009a24:	4649      	mov	r1, r9
 8009a26:	4640      	mov	r0, r8
 8009a28:	47d0      	blx	sl
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d09d      	beq.n	800996a <_printf_i+0x15a>
 8009a2e:	3501      	adds	r5, #1
 8009a30:	68e3      	ldr	r3, [r4, #12]
 8009a32:	9903      	ldr	r1, [sp, #12]
 8009a34:	1a5b      	subs	r3, r3, r1
 8009a36:	42ab      	cmp	r3, r5
 8009a38:	dcf2      	bgt.n	8009a20 <_printf_i+0x210>
 8009a3a:	e7eb      	b.n	8009a14 <_printf_i+0x204>
 8009a3c:	2500      	movs	r5, #0
 8009a3e:	f104 0619 	add.w	r6, r4, #25
 8009a42:	e7f5      	b.n	8009a30 <_printf_i+0x220>
 8009a44:	0800d74a 	.word	0x0800d74a
 8009a48:	0800d75b 	.word	0x0800d75b

08009a4c <std>:
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	4604      	mov	r4, r0
 8009a52:	e9c0 3300 	strd	r3, r3, [r0]
 8009a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a5a:	6083      	str	r3, [r0, #8]
 8009a5c:	8181      	strh	r1, [r0, #12]
 8009a5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a60:	81c2      	strh	r2, [r0, #14]
 8009a62:	6183      	str	r3, [r0, #24]
 8009a64:	4619      	mov	r1, r3
 8009a66:	2208      	movs	r2, #8
 8009a68:	305c      	adds	r0, #92	@ 0x5c
 8009a6a:	f000 f989 	bl	8009d80 <memset>
 8009a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa4 <std+0x58>)
 8009a70:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a72:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa8 <std+0x5c>)
 8009a74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a76:	4b0d      	ldr	r3, [pc, #52]	@ (8009aac <std+0x60>)
 8009a78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab0 <std+0x64>)
 8009a7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab4 <std+0x68>)
 8009a80:	6224      	str	r4, [r4, #32]
 8009a82:	429c      	cmp	r4, r3
 8009a84:	d006      	beq.n	8009a94 <std+0x48>
 8009a86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a8a:	4294      	cmp	r4, r2
 8009a8c:	d002      	beq.n	8009a94 <std+0x48>
 8009a8e:	33d0      	adds	r3, #208	@ 0xd0
 8009a90:	429c      	cmp	r4, r3
 8009a92:	d105      	bne.n	8009aa0 <std+0x54>
 8009a94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a9c:	f000 b9ec 	b.w	8009e78 <__retarget_lock_init_recursive>
 8009aa0:	bd10      	pop	{r4, pc}
 8009aa2:	bf00      	nop
 8009aa4:	08009c81 	.word	0x08009c81
 8009aa8:	08009ca3 	.word	0x08009ca3
 8009aac:	08009cdb 	.word	0x08009cdb
 8009ab0:	08009cff 	.word	0x08009cff
 8009ab4:	20000d80 	.word	0x20000d80

08009ab8 <stdio_exit_handler>:
 8009ab8:	4a02      	ldr	r2, [pc, #8]	@ (8009ac4 <stdio_exit_handler+0xc>)
 8009aba:	4903      	ldr	r1, [pc, #12]	@ (8009ac8 <stdio_exit_handler+0x10>)
 8009abc:	4803      	ldr	r0, [pc, #12]	@ (8009acc <stdio_exit_handler+0x14>)
 8009abe:	f000 b869 	b.w	8009b94 <_fwalk_sglue>
 8009ac2:	bf00      	nop
 8009ac4:	2000000c 	.word	0x2000000c
 8009ac8:	0800b7fd 	.word	0x0800b7fd
 8009acc:	2000001c 	.word	0x2000001c

08009ad0 <cleanup_stdio>:
 8009ad0:	6841      	ldr	r1, [r0, #4]
 8009ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8009b04 <cleanup_stdio+0x34>)
 8009ad4:	4299      	cmp	r1, r3
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	4604      	mov	r4, r0
 8009ada:	d001      	beq.n	8009ae0 <cleanup_stdio+0x10>
 8009adc:	f001 fe8e 	bl	800b7fc <_fflush_r>
 8009ae0:	68a1      	ldr	r1, [r4, #8]
 8009ae2:	4b09      	ldr	r3, [pc, #36]	@ (8009b08 <cleanup_stdio+0x38>)
 8009ae4:	4299      	cmp	r1, r3
 8009ae6:	d002      	beq.n	8009aee <cleanup_stdio+0x1e>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f001 fe87 	bl	800b7fc <_fflush_r>
 8009aee:	68e1      	ldr	r1, [r4, #12]
 8009af0:	4b06      	ldr	r3, [pc, #24]	@ (8009b0c <cleanup_stdio+0x3c>)
 8009af2:	4299      	cmp	r1, r3
 8009af4:	d004      	beq.n	8009b00 <cleanup_stdio+0x30>
 8009af6:	4620      	mov	r0, r4
 8009af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009afc:	f001 be7e 	b.w	800b7fc <_fflush_r>
 8009b00:	bd10      	pop	{r4, pc}
 8009b02:	bf00      	nop
 8009b04:	20000d80 	.word	0x20000d80
 8009b08:	20000de8 	.word	0x20000de8
 8009b0c:	20000e50 	.word	0x20000e50

08009b10 <global_stdio_init.part.0>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	4b0b      	ldr	r3, [pc, #44]	@ (8009b40 <global_stdio_init.part.0+0x30>)
 8009b14:	4c0b      	ldr	r4, [pc, #44]	@ (8009b44 <global_stdio_init.part.0+0x34>)
 8009b16:	4a0c      	ldr	r2, [pc, #48]	@ (8009b48 <global_stdio_init.part.0+0x38>)
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2104      	movs	r1, #4
 8009b20:	f7ff ff94 	bl	8009a4c <std>
 8009b24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b28:	2201      	movs	r2, #1
 8009b2a:	2109      	movs	r1, #9
 8009b2c:	f7ff ff8e 	bl	8009a4c <std>
 8009b30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b34:	2202      	movs	r2, #2
 8009b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3a:	2112      	movs	r1, #18
 8009b3c:	f7ff bf86 	b.w	8009a4c <std>
 8009b40:	20000eb8 	.word	0x20000eb8
 8009b44:	20000d80 	.word	0x20000d80
 8009b48:	08009ab9 	.word	0x08009ab9

08009b4c <__sfp_lock_acquire>:
 8009b4c:	4801      	ldr	r0, [pc, #4]	@ (8009b54 <__sfp_lock_acquire+0x8>)
 8009b4e:	f000 b994 	b.w	8009e7a <__retarget_lock_acquire_recursive>
 8009b52:	bf00      	nop
 8009b54:	20000ec1 	.word	0x20000ec1

08009b58 <__sfp_lock_release>:
 8009b58:	4801      	ldr	r0, [pc, #4]	@ (8009b60 <__sfp_lock_release+0x8>)
 8009b5a:	f000 b98f 	b.w	8009e7c <__retarget_lock_release_recursive>
 8009b5e:	bf00      	nop
 8009b60:	20000ec1 	.word	0x20000ec1

08009b64 <__sinit>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	4604      	mov	r4, r0
 8009b68:	f7ff fff0 	bl	8009b4c <__sfp_lock_acquire>
 8009b6c:	6a23      	ldr	r3, [r4, #32]
 8009b6e:	b11b      	cbz	r3, 8009b78 <__sinit+0x14>
 8009b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b74:	f7ff bff0 	b.w	8009b58 <__sfp_lock_release>
 8009b78:	4b04      	ldr	r3, [pc, #16]	@ (8009b8c <__sinit+0x28>)
 8009b7a:	6223      	str	r3, [r4, #32]
 8009b7c:	4b04      	ldr	r3, [pc, #16]	@ (8009b90 <__sinit+0x2c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1f5      	bne.n	8009b70 <__sinit+0xc>
 8009b84:	f7ff ffc4 	bl	8009b10 <global_stdio_init.part.0>
 8009b88:	e7f2      	b.n	8009b70 <__sinit+0xc>
 8009b8a:	bf00      	nop
 8009b8c:	08009ad1 	.word	0x08009ad1
 8009b90:	20000eb8 	.word	0x20000eb8

08009b94 <_fwalk_sglue>:
 8009b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b98:	4607      	mov	r7, r0
 8009b9a:	4688      	mov	r8, r1
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ba8:	d505      	bpl.n	8009bb6 <_fwalk_sglue+0x22>
 8009baa:	6824      	ldr	r4, [r4, #0]
 8009bac:	2c00      	cmp	r4, #0
 8009bae:	d1f7      	bne.n	8009ba0 <_fwalk_sglue+0xc>
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb6:	89ab      	ldrh	r3, [r5, #12]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d907      	bls.n	8009bcc <_fwalk_sglue+0x38>
 8009bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	d003      	beq.n	8009bcc <_fwalk_sglue+0x38>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	47c0      	blx	r8
 8009bca:	4306      	orrs	r6, r0
 8009bcc:	3568      	adds	r5, #104	@ 0x68
 8009bce:	e7e9      	b.n	8009ba4 <_fwalk_sglue+0x10>

08009bd0 <sniprintf>:
 8009bd0:	b40c      	push	{r2, r3}
 8009bd2:	b530      	push	{r4, r5, lr}
 8009bd4:	4b18      	ldr	r3, [pc, #96]	@ (8009c38 <sniprintf+0x68>)
 8009bd6:	1e0c      	subs	r4, r1, #0
 8009bd8:	681d      	ldr	r5, [r3, #0]
 8009bda:	b09d      	sub	sp, #116	@ 0x74
 8009bdc:	da08      	bge.n	8009bf0 <sniprintf+0x20>
 8009bde:	238b      	movs	r3, #139	@ 0x8b
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	f04f 30ff 	mov.w	r0, #4294967295
 8009be6:	b01d      	add	sp, #116	@ 0x74
 8009be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bec:	b002      	add	sp, #8
 8009bee:	4770      	bx	lr
 8009bf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009bf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009bf8:	f04f 0300 	mov.w	r3, #0
 8009bfc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009bfe:	bf14      	ite	ne
 8009c00:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c04:	4623      	moveq	r3, r4
 8009c06:	9304      	str	r3, [sp, #16]
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c0e:	9002      	str	r0, [sp, #8]
 8009c10:	9006      	str	r0, [sp, #24]
 8009c12:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c16:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009c18:	ab21      	add	r3, sp, #132	@ 0x84
 8009c1a:	a902      	add	r1, sp, #8
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	f001 fc6c 	bl	800b4fc <_svfiprintf_r>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	bfbc      	itt	lt
 8009c28:	238b      	movlt	r3, #139	@ 0x8b
 8009c2a:	602b      	strlt	r3, [r5, #0]
 8009c2c:	2c00      	cmp	r4, #0
 8009c2e:	d0da      	beq.n	8009be6 <sniprintf+0x16>
 8009c30:	9b02      	ldr	r3, [sp, #8]
 8009c32:	2200      	movs	r2, #0
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	e7d6      	b.n	8009be6 <sniprintf+0x16>
 8009c38:	20000018 	.word	0x20000018

08009c3c <siprintf>:
 8009c3c:	b40e      	push	{r1, r2, r3}
 8009c3e:	b510      	push	{r4, lr}
 8009c40:	b09d      	sub	sp, #116	@ 0x74
 8009c42:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009c44:	9002      	str	r0, [sp, #8]
 8009c46:	9006      	str	r0, [sp, #24]
 8009c48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c4c:	480a      	ldr	r0, [pc, #40]	@ (8009c78 <siprintf+0x3c>)
 8009c4e:	9107      	str	r1, [sp, #28]
 8009c50:	9104      	str	r1, [sp, #16]
 8009c52:	490a      	ldr	r1, [pc, #40]	@ (8009c7c <siprintf+0x40>)
 8009c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	2400      	movs	r4, #0
 8009c5c:	a902      	add	r1, sp, #8
 8009c5e:	6800      	ldr	r0, [r0, #0]
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009c64:	f001 fc4a 	bl	800b4fc <_svfiprintf_r>
 8009c68:	9b02      	ldr	r3, [sp, #8]
 8009c6a:	701c      	strb	r4, [r3, #0]
 8009c6c:	b01d      	add	sp, #116	@ 0x74
 8009c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c72:	b003      	add	sp, #12
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	20000018 	.word	0x20000018
 8009c7c:	ffff0208 	.word	0xffff0208

08009c80 <__sread>:
 8009c80:	b510      	push	{r4, lr}
 8009c82:	460c      	mov	r4, r1
 8009c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c88:	f000 f8a8 	bl	8009ddc <_read_r>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	bfab      	itete	ge
 8009c90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c92:	89a3      	ldrhlt	r3, [r4, #12]
 8009c94:	181b      	addge	r3, r3, r0
 8009c96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c9a:	bfac      	ite	ge
 8009c9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c9e:	81a3      	strhlt	r3, [r4, #12]
 8009ca0:	bd10      	pop	{r4, pc}

08009ca2 <__swrite>:
 8009ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca6:	461f      	mov	r7, r3
 8009ca8:	898b      	ldrh	r3, [r1, #12]
 8009caa:	05db      	lsls	r3, r3, #23
 8009cac:	4605      	mov	r5, r0
 8009cae:	460c      	mov	r4, r1
 8009cb0:	4616      	mov	r6, r2
 8009cb2:	d505      	bpl.n	8009cc0 <__swrite+0x1e>
 8009cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb8:	2302      	movs	r3, #2
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f000 f87c 	bl	8009db8 <_lseek_r>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd6:	f000 b893 	b.w	8009e00 <_write_r>

08009cda <__sseek>:
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	460c      	mov	r4, r1
 8009cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce2:	f000 f869 	bl	8009db8 <_lseek_r>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	bf15      	itete	ne
 8009cec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009cee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009cf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009cf6:	81a3      	strheq	r3, [r4, #12]
 8009cf8:	bf18      	it	ne
 8009cfa:	81a3      	strhne	r3, [r4, #12]
 8009cfc:	bd10      	pop	{r4, pc}

08009cfe <__sclose>:
 8009cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d02:	f000 b849 	b.w	8009d98 <_close_r>

08009d06 <_vsniprintf_r>:
 8009d06:	b530      	push	{r4, r5, lr}
 8009d08:	4614      	mov	r4, r2
 8009d0a:	2c00      	cmp	r4, #0
 8009d0c:	b09b      	sub	sp, #108	@ 0x6c
 8009d0e:	4605      	mov	r5, r0
 8009d10:	461a      	mov	r2, r3
 8009d12:	da05      	bge.n	8009d20 <_vsniprintf_r+0x1a>
 8009d14:	238b      	movs	r3, #139	@ 0x8b
 8009d16:	6003      	str	r3, [r0, #0]
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	b01b      	add	sp, #108	@ 0x6c
 8009d1e:	bd30      	pop	{r4, r5, pc}
 8009d20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d24:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d2e:	bf14      	ite	ne
 8009d30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d34:	4623      	moveq	r3, r4
 8009d36:	9302      	str	r3, [sp, #8]
 8009d38:	9305      	str	r3, [sp, #20]
 8009d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d3e:	9100      	str	r1, [sp, #0]
 8009d40:	9104      	str	r1, [sp, #16]
 8009d42:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009d46:	4669      	mov	r1, sp
 8009d48:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009d4a:	f001 fbd7 	bl	800b4fc <_svfiprintf_r>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	bfbc      	itt	lt
 8009d52:	238b      	movlt	r3, #139	@ 0x8b
 8009d54:	602b      	strlt	r3, [r5, #0]
 8009d56:	2c00      	cmp	r4, #0
 8009d58:	d0e0      	beq.n	8009d1c <_vsniprintf_r+0x16>
 8009d5a:	9b00      	ldr	r3, [sp, #0]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	e7dc      	b.n	8009d1c <_vsniprintf_r+0x16>
	...

08009d64 <vsniprintf>:
 8009d64:	b507      	push	{r0, r1, r2, lr}
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	460a      	mov	r2, r1
 8009d6c:	4601      	mov	r1, r0
 8009d6e:	4803      	ldr	r0, [pc, #12]	@ (8009d7c <vsniprintf+0x18>)
 8009d70:	6800      	ldr	r0, [r0, #0]
 8009d72:	f7ff ffc8 	bl	8009d06 <_vsniprintf_r>
 8009d76:	b003      	add	sp, #12
 8009d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d7c:	20000018 	.word	0x20000018

08009d80 <memset>:
 8009d80:	4402      	add	r2, r0
 8009d82:	4603      	mov	r3, r0
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d100      	bne.n	8009d8a <memset+0xa>
 8009d88:	4770      	bx	lr
 8009d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d8e:	e7f9      	b.n	8009d84 <memset+0x4>

08009d90 <_localeconv_r>:
 8009d90:	4800      	ldr	r0, [pc, #0]	@ (8009d94 <_localeconv_r+0x4>)
 8009d92:	4770      	bx	lr
 8009d94:	20000158 	.word	0x20000158

08009d98 <_close_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4d06      	ldr	r5, [pc, #24]	@ (8009db4 <_close_r+0x1c>)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7fb f87f 	bl	8004ea6 <_close>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_close_r+0x1a>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_close_r+0x1a>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	20000ebc 	.word	0x20000ebc

08009db8 <_lseek_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d07      	ldr	r5, [pc, #28]	@ (8009dd8 <_lseek_r+0x20>)
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	602a      	str	r2, [r5, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f7fb f894 	bl	8004ef4 <_lseek>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	d102      	bne.n	8009dd6 <_lseek_r+0x1e>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	b103      	cbz	r3, 8009dd6 <_lseek_r+0x1e>
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	20000ebc 	.word	0x20000ebc

08009ddc <_read_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d07      	ldr	r5, [pc, #28]	@ (8009dfc <_read_r+0x20>)
 8009de0:	4604      	mov	r4, r0
 8009de2:	4608      	mov	r0, r1
 8009de4:	4611      	mov	r1, r2
 8009de6:	2200      	movs	r2, #0
 8009de8:	602a      	str	r2, [r5, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	f7fb f822 	bl	8004e34 <_read>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_read_r+0x1e>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_read_r+0x1e>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	20000ebc 	.word	0x20000ebc

08009e00 <_write_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d07      	ldr	r5, [pc, #28]	@ (8009e20 <_write_r+0x20>)
 8009e04:	4604      	mov	r4, r0
 8009e06:	4608      	mov	r0, r1
 8009e08:	4611      	mov	r1, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	602a      	str	r2, [r5, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	f7fb f82d 	bl	8004e6e <_write>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_write_r+0x1e>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_write_r+0x1e>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	20000ebc 	.word	0x20000ebc

08009e24 <__errno>:
 8009e24:	4b01      	ldr	r3, [pc, #4]	@ (8009e2c <__errno+0x8>)
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	20000018 	.word	0x20000018

08009e30 <__libc_init_array>:
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	4d0d      	ldr	r5, [pc, #52]	@ (8009e68 <__libc_init_array+0x38>)
 8009e34:	4c0d      	ldr	r4, [pc, #52]	@ (8009e6c <__libc_init_array+0x3c>)
 8009e36:	1b64      	subs	r4, r4, r5
 8009e38:	10a4      	asrs	r4, r4, #2
 8009e3a:	2600      	movs	r6, #0
 8009e3c:	42a6      	cmp	r6, r4
 8009e3e:	d109      	bne.n	8009e54 <__libc_init_array+0x24>
 8009e40:	4d0b      	ldr	r5, [pc, #44]	@ (8009e70 <__libc_init_array+0x40>)
 8009e42:	4c0c      	ldr	r4, [pc, #48]	@ (8009e74 <__libc_init_array+0x44>)
 8009e44:	f002 fc32 	bl	800c6ac <_init>
 8009e48:	1b64      	subs	r4, r4, r5
 8009e4a:	10a4      	asrs	r4, r4, #2
 8009e4c:	2600      	movs	r6, #0
 8009e4e:	42a6      	cmp	r6, r4
 8009e50:	d105      	bne.n	8009e5e <__libc_init_array+0x2e>
 8009e52:	bd70      	pop	{r4, r5, r6, pc}
 8009e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e58:	4798      	blx	r3
 8009e5a:	3601      	adds	r6, #1
 8009e5c:	e7ee      	b.n	8009e3c <__libc_init_array+0xc>
 8009e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e62:	4798      	blx	r3
 8009e64:	3601      	adds	r6, #1
 8009e66:	e7f2      	b.n	8009e4e <__libc_init_array+0x1e>
 8009e68:	0800dacc 	.word	0x0800dacc
 8009e6c:	0800dacc 	.word	0x0800dacc
 8009e70:	0800dacc 	.word	0x0800dacc
 8009e74:	0800dad0 	.word	0x0800dad0

08009e78 <__retarget_lock_init_recursive>:
 8009e78:	4770      	bx	lr

08009e7a <__retarget_lock_acquire_recursive>:
 8009e7a:	4770      	bx	lr

08009e7c <__retarget_lock_release_recursive>:
 8009e7c:	4770      	bx	lr

08009e7e <memcpy>:
 8009e7e:	440a      	add	r2, r1
 8009e80:	4291      	cmp	r1, r2
 8009e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e86:	d100      	bne.n	8009e8a <memcpy+0xc>
 8009e88:	4770      	bx	lr
 8009e8a:	b510      	push	{r4, lr}
 8009e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e94:	4291      	cmp	r1, r2
 8009e96:	d1f9      	bne.n	8009e8c <memcpy+0xe>
 8009e98:	bd10      	pop	{r4, pc}

08009e9a <quorem>:
 8009e9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9e:	6903      	ldr	r3, [r0, #16]
 8009ea0:	690c      	ldr	r4, [r1, #16]
 8009ea2:	42a3      	cmp	r3, r4
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	db7e      	blt.n	8009fa6 <quorem+0x10c>
 8009ea8:	3c01      	subs	r4, #1
 8009eaa:	f101 0814 	add.w	r8, r1, #20
 8009eae:	00a3      	lsls	r3, r4, #2
 8009eb0:	f100 0514 	add.w	r5, r0, #20
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ec0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ecc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ed0:	d32e      	bcc.n	8009f30 <quorem+0x96>
 8009ed2:	f04f 0a00 	mov.w	sl, #0
 8009ed6:	46c4      	mov	ip, r8
 8009ed8:	46ae      	mov	lr, r5
 8009eda:	46d3      	mov	fp, sl
 8009edc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ee0:	b298      	uxth	r0, r3
 8009ee2:	fb06 a000 	mla	r0, r6, r0, sl
 8009ee6:	0c02      	lsrs	r2, r0, #16
 8009ee8:	0c1b      	lsrs	r3, r3, #16
 8009eea:	fb06 2303 	mla	r3, r6, r3, r2
 8009eee:	f8de 2000 	ldr.w	r2, [lr]
 8009ef2:	b280      	uxth	r0, r0
 8009ef4:	b292      	uxth	r2, r2
 8009ef6:	1a12      	subs	r2, r2, r0
 8009ef8:	445a      	add	r2, fp
 8009efa:	f8de 0000 	ldr.w	r0, [lr]
 8009efe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f0c:	b292      	uxth	r2, r2
 8009f0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f12:	45e1      	cmp	r9, ip
 8009f14:	f84e 2b04 	str.w	r2, [lr], #4
 8009f18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f1c:	d2de      	bcs.n	8009edc <quorem+0x42>
 8009f1e:	9b00      	ldr	r3, [sp, #0]
 8009f20:	58eb      	ldr	r3, [r5, r3]
 8009f22:	b92b      	cbnz	r3, 8009f30 <quorem+0x96>
 8009f24:	9b01      	ldr	r3, [sp, #4]
 8009f26:	3b04      	subs	r3, #4
 8009f28:	429d      	cmp	r5, r3
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	d32f      	bcc.n	8009f8e <quorem+0xf4>
 8009f2e:	613c      	str	r4, [r7, #16]
 8009f30:	4638      	mov	r0, r7
 8009f32:	f001 f97f 	bl	800b234 <__mcmp>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	db25      	blt.n	8009f86 <quorem+0xec>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f42:	f8d1 c000 	ldr.w	ip, [r1]
 8009f46:	fa1f fe82 	uxth.w	lr, r2
 8009f4a:	fa1f f38c 	uxth.w	r3, ip
 8009f4e:	eba3 030e 	sub.w	r3, r3, lr
 8009f52:	4403      	add	r3, r0
 8009f54:	0c12      	lsrs	r2, r2, #16
 8009f56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009f5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f64:	45c1      	cmp	r9, r8
 8009f66:	f841 3b04 	str.w	r3, [r1], #4
 8009f6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f6e:	d2e6      	bcs.n	8009f3e <quorem+0xa4>
 8009f70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f78:	b922      	cbnz	r2, 8009f84 <quorem+0xea>
 8009f7a:	3b04      	subs	r3, #4
 8009f7c:	429d      	cmp	r5, r3
 8009f7e:	461a      	mov	r2, r3
 8009f80:	d30b      	bcc.n	8009f9a <quorem+0x100>
 8009f82:	613c      	str	r4, [r7, #16]
 8009f84:	3601      	adds	r6, #1
 8009f86:	4630      	mov	r0, r6
 8009f88:	b003      	add	sp, #12
 8009f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8e:	6812      	ldr	r2, [r2, #0]
 8009f90:	3b04      	subs	r3, #4
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	d1cb      	bne.n	8009f2e <quorem+0x94>
 8009f96:	3c01      	subs	r4, #1
 8009f98:	e7c6      	b.n	8009f28 <quorem+0x8e>
 8009f9a:	6812      	ldr	r2, [r2, #0]
 8009f9c:	3b04      	subs	r3, #4
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	d1ef      	bne.n	8009f82 <quorem+0xe8>
 8009fa2:	3c01      	subs	r4, #1
 8009fa4:	e7ea      	b.n	8009f7c <quorem+0xe2>
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	e7ee      	b.n	8009f88 <quorem+0xee>
 8009faa:	0000      	movs	r0, r0
 8009fac:	0000      	movs	r0, r0
	...

08009fb0 <_dtoa_r>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	69c7      	ldr	r7, [r0, #28]
 8009fb6:	b097      	sub	sp, #92	@ 0x5c
 8009fb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009fbc:	ec55 4b10 	vmov	r4, r5, d0
 8009fc0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009fc2:	9107      	str	r1, [sp, #28]
 8009fc4:	4681      	mov	r9, r0
 8009fc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009fca:	b97f      	cbnz	r7, 8009fec <_dtoa_r+0x3c>
 8009fcc:	2010      	movs	r0, #16
 8009fce:	f000 fe09 	bl	800abe4 <malloc>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	f8c9 001c 	str.w	r0, [r9, #28]
 8009fd8:	b920      	cbnz	r0, 8009fe4 <_dtoa_r+0x34>
 8009fda:	4ba9      	ldr	r3, [pc, #676]	@ (800a280 <_dtoa_r+0x2d0>)
 8009fdc:	21ef      	movs	r1, #239	@ 0xef
 8009fde:	48a9      	ldr	r0, [pc, #676]	@ (800a284 <_dtoa_r+0x2d4>)
 8009fe0:	f001 fc5e 	bl	800b8a0 <__assert_func>
 8009fe4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009fe8:	6007      	str	r7, [r0, #0]
 8009fea:	60c7      	str	r7, [r0, #12]
 8009fec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ff0:	6819      	ldr	r1, [r3, #0]
 8009ff2:	b159      	cbz	r1, 800a00c <_dtoa_r+0x5c>
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	604a      	str	r2, [r1, #4]
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4093      	lsls	r3, r2
 8009ffc:	608b      	str	r3, [r1, #8]
 8009ffe:	4648      	mov	r0, r9
 800a000:	f000 fee6 	bl	800add0 <_Bfree>
 800a004:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	1e2b      	subs	r3, r5, #0
 800a00e:	bfb9      	ittee	lt
 800a010:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a014:	9305      	strlt	r3, [sp, #20]
 800a016:	2300      	movge	r3, #0
 800a018:	6033      	strge	r3, [r6, #0]
 800a01a:	9f05      	ldr	r7, [sp, #20]
 800a01c:	4b9a      	ldr	r3, [pc, #616]	@ (800a288 <_dtoa_r+0x2d8>)
 800a01e:	bfbc      	itt	lt
 800a020:	2201      	movlt	r2, #1
 800a022:	6032      	strlt	r2, [r6, #0]
 800a024:	43bb      	bics	r3, r7
 800a026:	d112      	bne.n	800a04e <_dtoa_r+0x9e>
 800a028:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a02a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a034:	4323      	orrs	r3, r4
 800a036:	f000 855a 	beq.w	800aaee <_dtoa_r+0xb3e>
 800a03a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a03c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a29c <_dtoa_r+0x2ec>
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 855c 	beq.w	800aafe <_dtoa_r+0xb4e>
 800a046:	f10a 0303 	add.w	r3, sl, #3
 800a04a:	f000 bd56 	b.w	800aafa <_dtoa_r+0xb4a>
 800a04e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a052:	2200      	movs	r2, #0
 800a054:	ec51 0b17 	vmov	r0, r1, d7
 800a058:	2300      	movs	r3, #0
 800a05a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a05e:	f7f6 fd53 	bl	8000b08 <__aeabi_dcmpeq>
 800a062:	4680      	mov	r8, r0
 800a064:	b158      	cbz	r0, 800a07e <_dtoa_r+0xce>
 800a066:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a068:	2301      	movs	r3, #1
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a06e:	b113      	cbz	r3, 800a076 <_dtoa_r+0xc6>
 800a070:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a072:	4b86      	ldr	r3, [pc, #536]	@ (800a28c <_dtoa_r+0x2dc>)
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a2a0 <_dtoa_r+0x2f0>
 800a07a:	f000 bd40 	b.w	800aafe <_dtoa_r+0xb4e>
 800a07e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a082:	aa14      	add	r2, sp, #80	@ 0x50
 800a084:	a915      	add	r1, sp, #84	@ 0x54
 800a086:	4648      	mov	r0, r9
 800a088:	f001 f984 	bl	800b394 <__d2b>
 800a08c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a090:	9002      	str	r0, [sp, #8]
 800a092:	2e00      	cmp	r6, #0
 800a094:	d078      	beq.n	800a188 <_dtoa_r+0x1d8>
 800a096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a098:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a09c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a0a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a0ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	4b76      	ldr	r3, [pc, #472]	@ (800a290 <_dtoa_r+0x2e0>)
 800a0b6:	f7f6 f907 	bl	80002c8 <__aeabi_dsub>
 800a0ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800a268 <_dtoa_r+0x2b8>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7f6 faba 	bl	8000638 <__aeabi_dmul>
 800a0c4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a270 <_dtoa_r+0x2c0>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f7f6 f8ff 	bl	80002cc <__adddf3>
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	460d      	mov	r5, r1
 800a0d4:	f7f6 fa46 	bl	8000564 <__aeabi_i2d>
 800a0d8:	a367      	add	r3, pc, #412	@ (adr r3, 800a278 <_dtoa_r+0x2c8>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f7f6 faab 	bl	8000638 <__aeabi_dmul>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7f6 f8ef 	bl	80002cc <__adddf3>
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	460d      	mov	r5, r1
 800a0f2:	f7f6 fd51 	bl	8000b98 <__aeabi_d2iz>
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	4629      	mov	r1, r5
 800a100:	f7f6 fd0c 	bl	8000b1c <__aeabi_dcmplt>
 800a104:	b140      	cbz	r0, 800a118 <_dtoa_r+0x168>
 800a106:	4638      	mov	r0, r7
 800a108:	f7f6 fa2c 	bl	8000564 <__aeabi_i2d>
 800a10c:	4622      	mov	r2, r4
 800a10e:	462b      	mov	r3, r5
 800a110:	f7f6 fcfa 	bl	8000b08 <__aeabi_dcmpeq>
 800a114:	b900      	cbnz	r0, 800a118 <_dtoa_r+0x168>
 800a116:	3f01      	subs	r7, #1
 800a118:	2f16      	cmp	r7, #22
 800a11a:	d852      	bhi.n	800a1c2 <_dtoa_r+0x212>
 800a11c:	4b5d      	ldr	r3, [pc, #372]	@ (800a294 <_dtoa_r+0x2e4>)
 800a11e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a12a:	f7f6 fcf7 	bl	8000b1c <__aeabi_dcmplt>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d049      	beq.n	800a1c6 <_dtoa_r+0x216>
 800a132:	3f01      	subs	r7, #1
 800a134:	2300      	movs	r3, #0
 800a136:	9310      	str	r3, [sp, #64]	@ 0x40
 800a138:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a13a:	1b9b      	subs	r3, r3, r6
 800a13c:	1e5a      	subs	r2, r3, #1
 800a13e:	bf45      	ittet	mi
 800a140:	f1c3 0301 	rsbmi	r3, r3, #1
 800a144:	9300      	strmi	r3, [sp, #0]
 800a146:	2300      	movpl	r3, #0
 800a148:	2300      	movmi	r3, #0
 800a14a:	9206      	str	r2, [sp, #24]
 800a14c:	bf54      	ite	pl
 800a14e:	9300      	strpl	r3, [sp, #0]
 800a150:	9306      	strmi	r3, [sp, #24]
 800a152:	2f00      	cmp	r7, #0
 800a154:	db39      	blt.n	800a1ca <_dtoa_r+0x21a>
 800a156:	9b06      	ldr	r3, [sp, #24]
 800a158:	970d      	str	r7, [sp, #52]	@ 0x34
 800a15a:	443b      	add	r3, r7
 800a15c:	9306      	str	r3, [sp, #24]
 800a15e:	2300      	movs	r3, #0
 800a160:	9308      	str	r3, [sp, #32]
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	2b09      	cmp	r3, #9
 800a166:	d863      	bhi.n	800a230 <_dtoa_r+0x280>
 800a168:	2b05      	cmp	r3, #5
 800a16a:	bfc4      	itt	gt
 800a16c:	3b04      	subgt	r3, #4
 800a16e:	9307      	strgt	r3, [sp, #28]
 800a170:	9b07      	ldr	r3, [sp, #28]
 800a172:	f1a3 0302 	sub.w	r3, r3, #2
 800a176:	bfcc      	ite	gt
 800a178:	2400      	movgt	r4, #0
 800a17a:	2401      	movle	r4, #1
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d863      	bhi.n	800a248 <_dtoa_r+0x298>
 800a180:	e8df f003 	tbb	[pc, r3]
 800a184:	2b375452 	.word	0x2b375452
 800a188:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a18c:	441e      	add	r6, r3
 800a18e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a192:	2b20      	cmp	r3, #32
 800a194:	bfc1      	itttt	gt
 800a196:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a19a:	409f      	lslgt	r7, r3
 800a19c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a1a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a1a4:	bfd6      	itet	le
 800a1a6:	f1c3 0320 	rsble	r3, r3, #32
 800a1aa:	ea47 0003 	orrgt.w	r0, r7, r3
 800a1ae:	fa04 f003 	lslle.w	r0, r4, r3
 800a1b2:	f7f6 f9c7 	bl	8000544 <__aeabi_ui2d>
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a1bc:	3e01      	subs	r6, #1
 800a1be:	9212      	str	r2, [sp, #72]	@ 0x48
 800a1c0:	e776      	b.n	800a0b0 <_dtoa_r+0x100>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e7b7      	b.n	800a136 <_dtoa_r+0x186>
 800a1c6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a1c8:	e7b6      	b.n	800a138 <_dtoa_r+0x188>
 800a1ca:	9b00      	ldr	r3, [sp, #0]
 800a1cc:	1bdb      	subs	r3, r3, r7
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	427b      	negs	r3, r7
 800a1d2:	9308      	str	r3, [sp, #32]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a1d8:	e7c3      	b.n	800a162 <_dtoa_r+0x1b2>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1e0:	eb07 0b03 	add.w	fp, r7, r3
 800a1e4:	f10b 0301 	add.w	r3, fp, #1
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	9303      	str	r3, [sp, #12]
 800a1ec:	bfb8      	it	lt
 800a1ee:	2301      	movlt	r3, #1
 800a1f0:	e006      	b.n	800a200 <_dtoa_r+0x250>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dd28      	ble.n	800a24e <_dtoa_r+0x29e>
 800a1fc:	469b      	mov	fp, r3
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a204:	2100      	movs	r1, #0
 800a206:	2204      	movs	r2, #4
 800a208:	f102 0514 	add.w	r5, r2, #20
 800a20c:	429d      	cmp	r5, r3
 800a20e:	d926      	bls.n	800a25e <_dtoa_r+0x2ae>
 800a210:	6041      	str	r1, [r0, #4]
 800a212:	4648      	mov	r0, r9
 800a214:	f000 fd9c 	bl	800ad50 <_Balloc>
 800a218:	4682      	mov	sl, r0
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d142      	bne.n	800a2a4 <_dtoa_r+0x2f4>
 800a21e:	4b1e      	ldr	r3, [pc, #120]	@ (800a298 <_dtoa_r+0x2e8>)
 800a220:	4602      	mov	r2, r0
 800a222:	f240 11af 	movw	r1, #431	@ 0x1af
 800a226:	e6da      	b.n	8009fde <_dtoa_r+0x2e>
 800a228:	2300      	movs	r3, #0
 800a22a:	e7e3      	b.n	800a1f4 <_dtoa_r+0x244>
 800a22c:	2300      	movs	r3, #0
 800a22e:	e7d5      	b.n	800a1dc <_dtoa_r+0x22c>
 800a230:	2401      	movs	r4, #1
 800a232:	2300      	movs	r3, #0
 800a234:	9307      	str	r3, [sp, #28]
 800a236:	9409      	str	r4, [sp, #36]	@ 0x24
 800a238:	f04f 3bff 	mov.w	fp, #4294967295
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a242:	2312      	movs	r3, #18
 800a244:	920c      	str	r2, [sp, #48]	@ 0x30
 800a246:	e7db      	b.n	800a200 <_dtoa_r+0x250>
 800a248:	2301      	movs	r3, #1
 800a24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a24c:	e7f4      	b.n	800a238 <_dtoa_r+0x288>
 800a24e:	f04f 0b01 	mov.w	fp, #1
 800a252:	f8cd b00c 	str.w	fp, [sp, #12]
 800a256:	465b      	mov	r3, fp
 800a258:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a25c:	e7d0      	b.n	800a200 <_dtoa_r+0x250>
 800a25e:	3101      	adds	r1, #1
 800a260:	0052      	lsls	r2, r2, #1
 800a262:	e7d1      	b.n	800a208 <_dtoa_r+0x258>
 800a264:	f3af 8000 	nop.w
 800a268:	636f4361 	.word	0x636f4361
 800a26c:	3fd287a7 	.word	0x3fd287a7
 800a270:	8b60c8b3 	.word	0x8b60c8b3
 800a274:	3fc68a28 	.word	0x3fc68a28
 800a278:	509f79fb 	.word	0x509f79fb
 800a27c:	3fd34413 	.word	0x3fd34413
 800a280:	0800d779 	.word	0x0800d779
 800a284:	0800d790 	.word	0x0800d790
 800a288:	7ff00000 	.word	0x7ff00000
 800a28c:	0800d749 	.word	0x0800d749
 800a290:	3ff80000 	.word	0x3ff80000
 800a294:	0800d8e0 	.word	0x0800d8e0
 800a298:	0800d7e8 	.word	0x0800d7e8
 800a29c:	0800d775 	.word	0x0800d775
 800a2a0:	0800d748 	.word	0x0800d748
 800a2a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2a8:	6018      	str	r0, [r3, #0]
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	2b0e      	cmp	r3, #14
 800a2ae:	f200 80a1 	bhi.w	800a3f4 <_dtoa_r+0x444>
 800a2b2:	2c00      	cmp	r4, #0
 800a2b4:	f000 809e 	beq.w	800a3f4 <_dtoa_r+0x444>
 800a2b8:	2f00      	cmp	r7, #0
 800a2ba:	dd33      	ble.n	800a324 <_dtoa_r+0x374>
 800a2bc:	4b9c      	ldr	r3, [pc, #624]	@ (800a530 <_dtoa_r+0x580>)
 800a2be:	f007 020f 	and.w	r2, r7, #15
 800a2c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2c6:	ed93 7b00 	vldr	d7, [r3]
 800a2ca:	05f8      	lsls	r0, r7, #23
 800a2cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a2d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a2d4:	d516      	bpl.n	800a304 <_dtoa_r+0x354>
 800a2d6:	4b97      	ldr	r3, [pc, #604]	@ (800a534 <_dtoa_r+0x584>)
 800a2d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a2dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2e0:	f7f6 fad4 	bl	800088c <__aeabi_ddiv>
 800a2e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2e8:	f004 040f 	and.w	r4, r4, #15
 800a2ec:	2603      	movs	r6, #3
 800a2ee:	4d91      	ldr	r5, [pc, #580]	@ (800a534 <_dtoa_r+0x584>)
 800a2f0:	b954      	cbnz	r4, 800a308 <_dtoa_r+0x358>
 800a2f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2fa:	f7f6 fac7 	bl	800088c <__aeabi_ddiv>
 800a2fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a302:	e028      	b.n	800a356 <_dtoa_r+0x3a6>
 800a304:	2602      	movs	r6, #2
 800a306:	e7f2      	b.n	800a2ee <_dtoa_r+0x33e>
 800a308:	07e1      	lsls	r1, r4, #31
 800a30a:	d508      	bpl.n	800a31e <_dtoa_r+0x36e>
 800a30c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a310:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a314:	f7f6 f990 	bl	8000638 <__aeabi_dmul>
 800a318:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a31c:	3601      	adds	r6, #1
 800a31e:	1064      	asrs	r4, r4, #1
 800a320:	3508      	adds	r5, #8
 800a322:	e7e5      	b.n	800a2f0 <_dtoa_r+0x340>
 800a324:	f000 80af 	beq.w	800a486 <_dtoa_r+0x4d6>
 800a328:	427c      	negs	r4, r7
 800a32a:	4b81      	ldr	r3, [pc, #516]	@ (800a530 <_dtoa_r+0x580>)
 800a32c:	4d81      	ldr	r5, [pc, #516]	@ (800a534 <_dtoa_r+0x584>)
 800a32e:	f004 020f 	and.w	r2, r4, #15
 800a332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a33e:	f7f6 f97b 	bl	8000638 <__aeabi_dmul>
 800a342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a346:	1124      	asrs	r4, r4, #4
 800a348:	2300      	movs	r3, #0
 800a34a:	2602      	movs	r6, #2
 800a34c:	2c00      	cmp	r4, #0
 800a34e:	f040 808f 	bne.w	800a470 <_dtoa_r+0x4c0>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1d3      	bne.n	800a2fe <_dtoa_r+0x34e>
 800a356:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a358:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 8094 	beq.w	800a48a <_dtoa_r+0x4da>
 800a362:	4b75      	ldr	r3, [pc, #468]	@ (800a538 <_dtoa_r+0x588>)
 800a364:	2200      	movs	r2, #0
 800a366:	4620      	mov	r0, r4
 800a368:	4629      	mov	r1, r5
 800a36a:	f7f6 fbd7 	bl	8000b1c <__aeabi_dcmplt>
 800a36e:	2800      	cmp	r0, #0
 800a370:	f000 808b 	beq.w	800a48a <_dtoa_r+0x4da>
 800a374:	9b03      	ldr	r3, [sp, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 8087 	beq.w	800a48a <_dtoa_r+0x4da>
 800a37c:	f1bb 0f00 	cmp.w	fp, #0
 800a380:	dd34      	ble.n	800a3ec <_dtoa_r+0x43c>
 800a382:	4620      	mov	r0, r4
 800a384:	4b6d      	ldr	r3, [pc, #436]	@ (800a53c <_dtoa_r+0x58c>)
 800a386:	2200      	movs	r2, #0
 800a388:	4629      	mov	r1, r5
 800a38a:	f7f6 f955 	bl	8000638 <__aeabi_dmul>
 800a38e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a392:	f107 38ff 	add.w	r8, r7, #4294967295
 800a396:	3601      	adds	r6, #1
 800a398:	465c      	mov	r4, fp
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7f6 f8e2 	bl	8000564 <__aeabi_i2d>
 800a3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3a4:	f7f6 f948 	bl	8000638 <__aeabi_dmul>
 800a3a8:	4b65      	ldr	r3, [pc, #404]	@ (800a540 <_dtoa_r+0x590>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f7f5 ff8e 	bl	80002cc <__adddf3>
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a3b6:	2c00      	cmp	r4, #0
 800a3b8:	d16a      	bne.n	800a490 <_dtoa_r+0x4e0>
 800a3ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3be:	4b61      	ldr	r3, [pc, #388]	@ (800a544 <_dtoa_r+0x594>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f7f5 ff81 	bl	80002c8 <__aeabi_dsub>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	4633      	mov	r3, r6
 800a3d2:	f7f6 fbc1 	bl	8000b58 <__aeabi_dcmpgt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f040 8298 	bne.w	800a90c <_dtoa_r+0x95c>
 800a3dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3e0:	462a      	mov	r2, r5
 800a3e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a3e6:	f7f6 fb99 	bl	8000b1c <__aeabi_dcmplt>
 800a3ea:	bb38      	cbnz	r0, 800a43c <_dtoa_r+0x48c>
 800a3ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a3f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a3f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f2c0 8157 	blt.w	800a6aa <_dtoa_r+0x6fa>
 800a3fc:	2f0e      	cmp	r7, #14
 800a3fe:	f300 8154 	bgt.w	800a6aa <_dtoa_r+0x6fa>
 800a402:	4b4b      	ldr	r3, [pc, #300]	@ (800a530 <_dtoa_r+0x580>)
 800a404:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a408:	ed93 7b00 	vldr	d7, [r3]
 800a40c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a40e:	2b00      	cmp	r3, #0
 800a410:	ed8d 7b00 	vstr	d7, [sp]
 800a414:	f280 80e5 	bge.w	800a5e2 <_dtoa_r+0x632>
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f300 80e1 	bgt.w	800a5e2 <_dtoa_r+0x632>
 800a420:	d10c      	bne.n	800a43c <_dtoa_r+0x48c>
 800a422:	4b48      	ldr	r3, [pc, #288]	@ (800a544 <_dtoa_r+0x594>)
 800a424:	2200      	movs	r2, #0
 800a426:	ec51 0b17 	vmov	r0, r1, d7
 800a42a:	f7f6 f905 	bl	8000638 <__aeabi_dmul>
 800a42e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a432:	f7f6 fb87 	bl	8000b44 <__aeabi_dcmpge>
 800a436:	2800      	cmp	r0, #0
 800a438:	f000 8266 	beq.w	800a908 <_dtoa_r+0x958>
 800a43c:	2400      	movs	r4, #0
 800a43e:	4625      	mov	r5, r4
 800a440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a442:	4656      	mov	r6, sl
 800a444:	ea6f 0803 	mvn.w	r8, r3
 800a448:	2700      	movs	r7, #0
 800a44a:	4621      	mov	r1, r4
 800a44c:	4648      	mov	r0, r9
 800a44e:	f000 fcbf 	bl	800add0 <_Bfree>
 800a452:	2d00      	cmp	r5, #0
 800a454:	f000 80bd 	beq.w	800a5d2 <_dtoa_r+0x622>
 800a458:	b12f      	cbz	r7, 800a466 <_dtoa_r+0x4b6>
 800a45a:	42af      	cmp	r7, r5
 800a45c:	d003      	beq.n	800a466 <_dtoa_r+0x4b6>
 800a45e:	4639      	mov	r1, r7
 800a460:	4648      	mov	r0, r9
 800a462:	f000 fcb5 	bl	800add0 <_Bfree>
 800a466:	4629      	mov	r1, r5
 800a468:	4648      	mov	r0, r9
 800a46a:	f000 fcb1 	bl	800add0 <_Bfree>
 800a46e:	e0b0      	b.n	800a5d2 <_dtoa_r+0x622>
 800a470:	07e2      	lsls	r2, r4, #31
 800a472:	d505      	bpl.n	800a480 <_dtoa_r+0x4d0>
 800a474:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a478:	f7f6 f8de 	bl	8000638 <__aeabi_dmul>
 800a47c:	3601      	adds	r6, #1
 800a47e:	2301      	movs	r3, #1
 800a480:	1064      	asrs	r4, r4, #1
 800a482:	3508      	adds	r5, #8
 800a484:	e762      	b.n	800a34c <_dtoa_r+0x39c>
 800a486:	2602      	movs	r6, #2
 800a488:	e765      	b.n	800a356 <_dtoa_r+0x3a6>
 800a48a:	9c03      	ldr	r4, [sp, #12]
 800a48c:	46b8      	mov	r8, r7
 800a48e:	e784      	b.n	800a39a <_dtoa_r+0x3ea>
 800a490:	4b27      	ldr	r3, [pc, #156]	@ (800a530 <_dtoa_r+0x580>)
 800a492:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a494:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a498:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a49c:	4454      	add	r4, sl
 800a49e:	2900      	cmp	r1, #0
 800a4a0:	d054      	beq.n	800a54c <_dtoa_r+0x59c>
 800a4a2:	4929      	ldr	r1, [pc, #164]	@ (800a548 <_dtoa_r+0x598>)
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f7f6 f9f1 	bl	800088c <__aeabi_ddiv>
 800a4aa:	4633      	mov	r3, r6
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	f7f5 ff0b 	bl	80002c8 <__aeabi_dsub>
 800a4b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a4b6:	4656      	mov	r6, sl
 800a4b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4bc:	f7f6 fb6c 	bl	8000b98 <__aeabi_d2iz>
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	f7f6 f84f 	bl	8000564 <__aeabi_i2d>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4ce:	f7f5 fefb 	bl	80002c8 <__aeabi_dsub>
 800a4d2:	3530      	adds	r5, #48	@ 0x30
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4dc:	f806 5b01 	strb.w	r5, [r6], #1
 800a4e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4e4:	f7f6 fb1a 	bl	8000b1c <__aeabi_dcmplt>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d172      	bne.n	800a5d2 <_dtoa_r+0x622>
 800a4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4f0:	4911      	ldr	r1, [pc, #68]	@ (800a538 <_dtoa_r+0x588>)
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f7f5 fee8 	bl	80002c8 <__aeabi_dsub>
 800a4f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4fc:	f7f6 fb0e 	bl	8000b1c <__aeabi_dcmplt>
 800a500:	2800      	cmp	r0, #0
 800a502:	f040 80b4 	bne.w	800a66e <_dtoa_r+0x6be>
 800a506:	42a6      	cmp	r6, r4
 800a508:	f43f af70 	beq.w	800a3ec <_dtoa_r+0x43c>
 800a50c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a510:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <_dtoa_r+0x58c>)
 800a512:	2200      	movs	r2, #0
 800a514:	f7f6 f890 	bl	8000638 <__aeabi_dmul>
 800a518:	4b08      	ldr	r3, [pc, #32]	@ (800a53c <_dtoa_r+0x58c>)
 800a51a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a51e:	2200      	movs	r2, #0
 800a520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a524:	f7f6 f888 	bl	8000638 <__aeabi_dmul>
 800a528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a52c:	e7c4      	b.n	800a4b8 <_dtoa_r+0x508>
 800a52e:	bf00      	nop
 800a530:	0800d8e0 	.word	0x0800d8e0
 800a534:	0800d8b8 	.word	0x0800d8b8
 800a538:	3ff00000 	.word	0x3ff00000
 800a53c:	40240000 	.word	0x40240000
 800a540:	401c0000 	.word	0x401c0000
 800a544:	40140000 	.word	0x40140000
 800a548:	3fe00000 	.word	0x3fe00000
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	f7f6 f872 	bl	8000638 <__aeabi_dmul>
 800a554:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a558:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a55a:	4656      	mov	r6, sl
 800a55c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a560:	f7f6 fb1a 	bl	8000b98 <__aeabi_d2iz>
 800a564:	4605      	mov	r5, r0
 800a566:	f7f5 fffd 	bl	8000564 <__aeabi_i2d>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a572:	f7f5 fea9 	bl	80002c8 <__aeabi_dsub>
 800a576:	3530      	adds	r5, #48	@ 0x30
 800a578:	f806 5b01 	strb.w	r5, [r6], #1
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	42a6      	cmp	r6, r4
 800a582:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a586:	f04f 0200 	mov.w	r2, #0
 800a58a:	d124      	bne.n	800a5d6 <_dtoa_r+0x626>
 800a58c:	4baf      	ldr	r3, [pc, #700]	@ (800a84c <_dtoa_r+0x89c>)
 800a58e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a592:	f7f5 fe9b 	bl	80002cc <__adddf3>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a59e:	f7f6 fadb 	bl	8000b58 <__aeabi_dcmpgt>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d163      	bne.n	800a66e <_dtoa_r+0x6be>
 800a5a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a5aa:	49a8      	ldr	r1, [pc, #672]	@ (800a84c <_dtoa_r+0x89c>)
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f7f5 fe8b 	bl	80002c8 <__aeabi_dsub>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5ba:	f7f6 faaf 	bl	8000b1c <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f43f af14 	beq.w	800a3ec <_dtoa_r+0x43c>
 800a5c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a5c6:	1e73      	subs	r3, r6, #1
 800a5c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5ce:	2b30      	cmp	r3, #48	@ 0x30
 800a5d0:	d0f8      	beq.n	800a5c4 <_dtoa_r+0x614>
 800a5d2:	4647      	mov	r7, r8
 800a5d4:	e03b      	b.n	800a64e <_dtoa_r+0x69e>
 800a5d6:	4b9e      	ldr	r3, [pc, #632]	@ (800a850 <_dtoa_r+0x8a0>)
 800a5d8:	f7f6 f82e 	bl	8000638 <__aeabi_dmul>
 800a5dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5e0:	e7bc      	b.n	800a55c <_dtoa_r+0x5ac>
 800a5e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a5e6:	4656      	mov	r6, sl
 800a5e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f7f6 f94c 	bl	800088c <__aeabi_ddiv>
 800a5f4:	f7f6 fad0 	bl	8000b98 <__aeabi_d2iz>
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	f7f5 ffb3 	bl	8000564 <__aeabi_i2d>
 800a5fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a602:	f7f6 f819 	bl	8000638 <__aeabi_dmul>
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	4620      	mov	r0, r4
 800a60c:	4629      	mov	r1, r5
 800a60e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a612:	f7f5 fe59 	bl	80002c8 <__aeabi_dsub>
 800a616:	f806 4b01 	strb.w	r4, [r6], #1
 800a61a:	9d03      	ldr	r5, [sp, #12]
 800a61c:	eba6 040a 	sub.w	r4, r6, sl
 800a620:	42a5      	cmp	r5, r4
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	d133      	bne.n	800a690 <_dtoa_r+0x6e0>
 800a628:	f7f5 fe50 	bl	80002cc <__adddf3>
 800a62c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a630:	4604      	mov	r4, r0
 800a632:	460d      	mov	r5, r1
 800a634:	f7f6 fa90 	bl	8000b58 <__aeabi_dcmpgt>
 800a638:	b9c0      	cbnz	r0, 800a66c <_dtoa_r+0x6bc>
 800a63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a63e:	4620      	mov	r0, r4
 800a640:	4629      	mov	r1, r5
 800a642:	f7f6 fa61 	bl	8000b08 <__aeabi_dcmpeq>
 800a646:	b110      	cbz	r0, 800a64e <_dtoa_r+0x69e>
 800a648:	f018 0f01 	tst.w	r8, #1
 800a64c:	d10e      	bne.n	800a66c <_dtoa_r+0x6bc>
 800a64e:	9902      	ldr	r1, [sp, #8]
 800a650:	4648      	mov	r0, r9
 800a652:	f000 fbbd 	bl	800add0 <_Bfree>
 800a656:	2300      	movs	r3, #0
 800a658:	7033      	strb	r3, [r6, #0]
 800a65a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a65c:	3701      	adds	r7, #1
 800a65e:	601f      	str	r7, [r3, #0]
 800a660:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 824b 	beq.w	800aafe <_dtoa_r+0xb4e>
 800a668:	601e      	str	r6, [r3, #0]
 800a66a:	e248      	b.n	800aafe <_dtoa_r+0xb4e>
 800a66c:	46b8      	mov	r8, r7
 800a66e:	4633      	mov	r3, r6
 800a670:	461e      	mov	r6, r3
 800a672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a676:	2a39      	cmp	r2, #57	@ 0x39
 800a678:	d106      	bne.n	800a688 <_dtoa_r+0x6d8>
 800a67a:	459a      	cmp	sl, r3
 800a67c:	d1f8      	bne.n	800a670 <_dtoa_r+0x6c0>
 800a67e:	2230      	movs	r2, #48	@ 0x30
 800a680:	f108 0801 	add.w	r8, r8, #1
 800a684:	f88a 2000 	strb.w	r2, [sl]
 800a688:	781a      	ldrb	r2, [r3, #0]
 800a68a:	3201      	adds	r2, #1
 800a68c:	701a      	strb	r2, [r3, #0]
 800a68e:	e7a0      	b.n	800a5d2 <_dtoa_r+0x622>
 800a690:	4b6f      	ldr	r3, [pc, #444]	@ (800a850 <_dtoa_r+0x8a0>)
 800a692:	2200      	movs	r2, #0
 800a694:	f7f5 ffd0 	bl	8000638 <__aeabi_dmul>
 800a698:	2200      	movs	r2, #0
 800a69a:	2300      	movs	r3, #0
 800a69c:	4604      	mov	r4, r0
 800a69e:	460d      	mov	r5, r1
 800a6a0:	f7f6 fa32 	bl	8000b08 <__aeabi_dcmpeq>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d09f      	beq.n	800a5e8 <_dtoa_r+0x638>
 800a6a8:	e7d1      	b.n	800a64e <_dtoa_r+0x69e>
 800a6aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	f000 80ea 	beq.w	800a886 <_dtoa_r+0x8d6>
 800a6b2:	9a07      	ldr	r2, [sp, #28]
 800a6b4:	2a01      	cmp	r2, #1
 800a6b6:	f300 80cd 	bgt.w	800a854 <_dtoa_r+0x8a4>
 800a6ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a6bc:	2a00      	cmp	r2, #0
 800a6be:	f000 80c1 	beq.w	800a844 <_dtoa_r+0x894>
 800a6c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a6c6:	9c08      	ldr	r4, [sp, #32]
 800a6c8:	9e00      	ldr	r6, [sp, #0]
 800a6ca:	9a00      	ldr	r2, [sp, #0]
 800a6cc:	441a      	add	r2, r3
 800a6ce:	9200      	str	r2, [sp, #0]
 800a6d0:	9a06      	ldr	r2, [sp, #24]
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	441a      	add	r2, r3
 800a6d6:	4648      	mov	r0, r9
 800a6d8:	9206      	str	r2, [sp, #24]
 800a6da:	f000 fc2d 	bl	800af38 <__i2b>
 800a6de:	4605      	mov	r5, r0
 800a6e0:	b166      	cbz	r6, 800a6fc <_dtoa_r+0x74c>
 800a6e2:	9b06      	ldr	r3, [sp, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	dd09      	ble.n	800a6fc <_dtoa_r+0x74c>
 800a6e8:	42b3      	cmp	r3, r6
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	bfa8      	it	ge
 800a6ee:	4633      	movge	r3, r6
 800a6f0:	1ad2      	subs	r2, r2, r3
 800a6f2:	9200      	str	r2, [sp, #0]
 800a6f4:	9a06      	ldr	r2, [sp, #24]
 800a6f6:	1af6      	subs	r6, r6, r3
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	9306      	str	r3, [sp, #24]
 800a6fc:	9b08      	ldr	r3, [sp, #32]
 800a6fe:	b30b      	cbz	r3, 800a744 <_dtoa_r+0x794>
 800a700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80c6 	beq.w	800a894 <_dtoa_r+0x8e4>
 800a708:	2c00      	cmp	r4, #0
 800a70a:	f000 80c0 	beq.w	800a88e <_dtoa_r+0x8de>
 800a70e:	4629      	mov	r1, r5
 800a710:	4622      	mov	r2, r4
 800a712:	4648      	mov	r0, r9
 800a714:	f000 fcc8 	bl	800b0a8 <__pow5mult>
 800a718:	9a02      	ldr	r2, [sp, #8]
 800a71a:	4601      	mov	r1, r0
 800a71c:	4605      	mov	r5, r0
 800a71e:	4648      	mov	r0, r9
 800a720:	f000 fc20 	bl	800af64 <__multiply>
 800a724:	9902      	ldr	r1, [sp, #8]
 800a726:	4680      	mov	r8, r0
 800a728:	4648      	mov	r0, r9
 800a72a:	f000 fb51 	bl	800add0 <_Bfree>
 800a72e:	9b08      	ldr	r3, [sp, #32]
 800a730:	1b1b      	subs	r3, r3, r4
 800a732:	9308      	str	r3, [sp, #32]
 800a734:	f000 80b1 	beq.w	800a89a <_dtoa_r+0x8ea>
 800a738:	9a08      	ldr	r2, [sp, #32]
 800a73a:	4641      	mov	r1, r8
 800a73c:	4648      	mov	r0, r9
 800a73e:	f000 fcb3 	bl	800b0a8 <__pow5mult>
 800a742:	9002      	str	r0, [sp, #8]
 800a744:	2101      	movs	r1, #1
 800a746:	4648      	mov	r0, r9
 800a748:	f000 fbf6 	bl	800af38 <__i2b>
 800a74c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a74e:	4604      	mov	r4, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 81d8 	beq.w	800ab06 <_dtoa_r+0xb56>
 800a756:	461a      	mov	r2, r3
 800a758:	4601      	mov	r1, r0
 800a75a:	4648      	mov	r0, r9
 800a75c:	f000 fca4 	bl	800b0a8 <__pow5mult>
 800a760:	9b07      	ldr	r3, [sp, #28]
 800a762:	2b01      	cmp	r3, #1
 800a764:	4604      	mov	r4, r0
 800a766:	f300 809f 	bgt.w	800a8a8 <_dtoa_r+0x8f8>
 800a76a:	9b04      	ldr	r3, [sp, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f040 8097 	bne.w	800a8a0 <_dtoa_r+0x8f0>
 800a772:	9b05      	ldr	r3, [sp, #20]
 800a774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f040 8093 	bne.w	800a8a4 <_dtoa_r+0x8f4>
 800a77e:	9b05      	ldr	r3, [sp, #20]
 800a780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a784:	0d1b      	lsrs	r3, r3, #20
 800a786:	051b      	lsls	r3, r3, #20
 800a788:	b133      	cbz	r3, 800a798 <_dtoa_r+0x7e8>
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	3301      	adds	r3, #1
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	9b06      	ldr	r3, [sp, #24]
 800a792:	3301      	adds	r3, #1
 800a794:	9306      	str	r3, [sp, #24]
 800a796:	2301      	movs	r3, #1
 800a798:	9308      	str	r3, [sp, #32]
 800a79a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 81b8 	beq.w	800ab12 <_dtoa_r+0xb62>
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7a8:	6918      	ldr	r0, [r3, #16]
 800a7aa:	f000 fb79 	bl	800aea0 <__hi0bits>
 800a7ae:	f1c0 0020 	rsb	r0, r0, #32
 800a7b2:	9b06      	ldr	r3, [sp, #24]
 800a7b4:	4418      	add	r0, r3
 800a7b6:	f010 001f 	ands.w	r0, r0, #31
 800a7ba:	f000 8082 	beq.w	800a8c2 <_dtoa_r+0x912>
 800a7be:	f1c0 0320 	rsb	r3, r0, #32
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	dd73      	ble.n	800a8ae <_dtoa_r+0x8fe>
 800a7c6:	9b00      	ldr	r3, [sp, #0]
 800a7c8:	f1c0 001c 	rsb	r0, r0, #28
 800a7cc:	4403      	add	r3, r0
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	9b06      	ldr	r3, [sp, #24]
 800a7d2:	4403      	add	r3, r0
 800a7d4:	4406      	add	r6, r0
 800a7d6:	9306      	str	r3, [sp, #24]
 800a7d8:	9b00      	ldr	r3, [sp, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dd05      	ble.n	800a7ea <_dtoa_r+0x83a>
 800a7de:	9902      	ldr	r1, [sp, #8]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4648      	mov	r0, r9
 800a7e4:	f000 fcba 	bl	800b15c <__lshift>
 800a7e8:	9002      	str	r0, [sp, #8]
 800a7ea:	9b06      	ldr	r3, [sp, #24]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd05      	ble.n	800a7fc <_dtoa_r+0x84c>
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4648      	mov	r0, r9
 800a7f6:	f000 fcb1 	bl	800b15c <__lshift>
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d061      	beq.n	800a8c6 <_dtoa_r+0x916>
 800a802:	9802      	ldr	r0, [sp, #8]
 800a804:	4621      	mov	r1, r4
 800a806:	f000 fd15 	bl	800b234 <__mcmp>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	da5b      	bge.n	800a8c6 <_dtoa_r+0x916>
 800a80e:	2300      	movs	r3, #0
 800a810:	9902      	ldr	r1, [sp, #8]
 800a812:	220a      	movs	r2, #10
 800a814:	4648      	mov	r0, r9
 800a816:	f000 fafd 	bl	800ae14 <__multadd>
 800a81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81c:	9002      	str	r0, [sp, #8]
 800a81e:	f107 38ff 	add.w	r8, r7, #4294967295
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 8177 	beq.w	800ab16 <_dtoa_r+0xb66>
 800a828:	4629      	mov	r1, r5
 800a82a:	2300      	movs	r3, #0
 800a82c:	220a      	movs	r2, #10
 800a82e:	4648      	mov	r0, r9
 800a830:	f000 faf0 	bl	800ae14 <__multadd>
 800a834:	f1bb 0f00 	cmp.w	fp, #0
 800a838:	4605      	mov	r5, r0
 800a83a:	dc6f      	bgt.n	800a91c <_dtoa_r+0x96c>
 800a83c:	9b07      	ldr	r3, [sp, #28]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	dc49      	bgt.n	800a8d6 <_dtoa_r+0x926>
 800a842:	e06b      	b.n	800a91c <_dtoa_r+0x96c>
 800a844:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a846:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a84a:	e73c      	b.n	800a6c6 <_dtoa_r+0x716>
 800a84c:	3fe00000 	.word	0x3fe00000
 800a850:	40240000 	.word	0x40240000
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	1e5c      	subs	r4, r3, #1
 800a858:	9b08      	ldr	r3, [sp, #32]
 800a85a:	42a3      	cmp	r3, r4
 800a85c:	db09      	blt.n	800a872 <_dtoa_r+0x8c2>
 800a85e:	1b1c      	subs	r4, r3, r4
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	f6bf af30 	bge.w	800a6c8 <_dtoa_r+0x718>
 800a868:	9b00      	ldr	r3, [sp, #0]
 800a86a:	9a03      	ldr	r2, [sp, #12]
 800a86c:	1a9e      	subs	r6, r3, r2
 800a86e:	2300      	movs	r3, #0
 800a870:	e72b      	b.n	800a6ca <_dtoa_r+0x71a>
 800a872:	9b08      	ldr	r3, [sp, #32]
 800a874:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a876:	9408      	str	r4, [sp, #32]
 800a878:	1ae3      	subs	r3, r4, r3
 800a87a:	441a      	add	r2, r3
 800a87c:	9e00      	ldr	r6, [sp, #0]
 800a87e:	9b03      	ldr	r3, [sp, #12]
 800a880:	920d      	str	r2, [sp, #52]	@ 0x34
 800a882:	2400      	movs	r4, #0
 800a884:	e721      	b.n	800a6ca <_dtoa_r+0x71a>
 800a886:	9c08      	ldr	r4, [sp, #32]
 800a888:	9e00      	ldr	r6, [sp, #0]
 800a88a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a88c:	e728      	b.n	800a6e0 <_dtoa_r+0x730>
 800a88e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a892:	e751      	b.n	800a738 <_dtoa_r+0x788>
 800a894:	9a08      	ldr	r2, [sp, #32]
 800a896:	9902      	ldr	r1, [sp, #8]
 800a898:	e750      	b.n	800a73c <_dtoa_r+0x78c>
 800a89a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a89e:	e751      	b.n	800a744 <_dtoa_r+0x794>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	e779      	b.n	800a798 <_dtoa_r+0x7e8>
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	e777      	b.n	800a798 <_dtoa_r+0x7e8>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9308      	str	r3, [sp, #32]
 800a8ac:	e779      	b.n	800a7a2 <_dtoa_r+0x7f2>
 800a8ae:	d093      	beq.n	800a7d8 <_dtoa_r+0x828>
 800a8b0:	9a00      	ldr	r2, [sp, #0]
 800a8b2:	331c      	adds	r3, #28
 800a8b4:	441a      	add	r2, r3
 800a8b6:	9200      	str	r2, [sp, #0]
 800a8b8:	9a06      	ldr	r2, [sp, #24]
 800a8ba:	441a      	add	r2, r3
 800a8bc:	441e      	add	r6, r3
 800a8be:	9206      	str	r2, [sp, #24]
 800a8c0:	e78a      	b.n	800a7d8 <_dtoa_r+0x828>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	e7f4      	b.n	800a8b0 <_dtoa_r+0x900>
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	46b8      	mov	r8, r7
 800a8cc:	dc20      	bgt.n	800a910 <_dtoa_r+0x960>
 800a8ce:	469b      	mov	fp, r3
 800a8d0:	9b07      	ldr	r3, [sp, #28]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	dd1e      	ble.n	800a914 <_dtoa_r+0x964>
 800a8d6:	f1bb 0f00 	cmp.w	fp, #0
 800a8da:	f47f adb1 	bne.w	800a440 <_dtoa_r+0x490>
 800a8de:	4621      	mov	r1, r4
 800a8e0:	465b      	mov	r3, fp
 800a8e2:	2205      	movs	r2, #5
 800a8e4:	4648      	mov	r0, r9
 800a8e6:	f000 fa95 	bl	800ae14 <__multadd>
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	9802      	ldr	r0, [sp, #8]
 800a8f0:	f000 fca0 	bl	800b234 <__mcmp>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	f77f ada3 	ble.w	800a440 <_dtoa_r+0x490>
 800a8fa:	4656      	mov	r6, sl
 800a8fc:	2331      	movs	r3, #49	@ 0x31
 800a8fe:	f806 3b01 	strb.w	r3, [r6], #1
 800a902:	f108 0801 	add.w	r8, r8, #1
 800a906:	e59f      	b.n	800a448 <_dtoa_r+0x498>
 800a908:	9c03      	ldr	r4, [sp, #12]
 800a90a:	46b8      	mov	r8, r7
 800a90c:	4625      	mov	r5, r4
 800a90e:	e7f4      	b.n	800a8fa <_dtoa_r+0x94a>
 800a910:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 8101 	beq.w	800ab1e <_dtoa_r+0xb6e>
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	dd05      	ble.n	800a92c <_dtoa_r+0x97c>
 800a920:	4629      	mov	r1, r5
 800a922:	4632      	mov	r2, r6
 800a924:	4648      	mov	r0, r9
 800a926:	f000 fc19 	bl	800b15c <__lshift>
 800a92a:	4605      	mov	r5, r0
 800a92c:	9b08      	ldr	r3, [sp, #32]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d05c      	beq.n	800a9ec <_dtoa_r+0xa3c>
 800a932:	6869      	ldr	r1, [r5, #4]
 800a934:	4648      	mov	r0, r9
 800a936:	f000 fa0b 	bl	800ad50 <_Balloc>
 800a93a:	4606      	mov	r6, r0
 800a93c:	b928      	cbnz	r0, 800a94a <_dtoa_r+0x99a>
 800a93e:	4b82      	ldr	r3, [pc, #520]	@ (800ab48 <_dtoa_r+0xb98>)
 800a940:	4602      	mov	r2, r0
 800a942:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a946:	f7ff bb4a 	b.w	8009fde <_dtoa_r+0x2e>
 800a94a:	692a      	ldr	r2, [r5, #16]
 800a94c:	3202      	adds	r2, #2
 800a94e:	0092      	lsls	r2, r2, #2
 800a950:	f105 010c 	add.w	r1, r5, #12
 800a954:	300c      	adds	r0, #12
 800a956:	f7ff fa92 	bl	8009e7e <memcpy>
 800a95a:	2201      	movs	r2, #1
 800a95c:	4631      	mov	r1, r6
 800a95e:	4648      	mov	r0, r9
 800a960:	f000 fbfc 	bl	800b15c <__lshift>
 800a964:	f10a 0301 	add.w	r3, sl, #1
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	eb0a 030b 	add.w	r3, sl, fp
 800a96e:	9308      	str	r3, [sp, #32]
 800a970:	9b04      	ldr	r3, [sp, #16]
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	462f      	mov	r7, r5
 800a978:	9306      	str	r3, [sp, #24]
 800a97a:	4605      	mov	r5, r0
 800a97c:	9b00      	ldr	r3, [sp, #0]
 800a97e:	9802      	ldr	r0, [sp, #8]
 800a980:	4621      	mov	r1, r4
 800a982:	f103 3bff 	add.w	fp, r3, #4294967295
 800a986:	f7ff fa88 	bl	8009e9a <quorem>
 800a98a:	4603      	mov	r3, r0
 800a98c:	3330      	adds	r3, #48	@ 0x30
 800a98e:	9003      	str	r0, [sp, #12]
 800a990:	4639      	mov	r1, r7
 800a992:	9802      	ldr	r0, [sp, #8]
 800a994:	9309      	str	r3, [sp, #36]	@ 0x24
 800a996:	f000 fc4d 	bl	800b234 <__mcmp>
 800a99a:	462a      	mov	r2, r5
 800a99c:	9004      	str	r0, [sp, #16]
 800a99e:	4621      	mov	r1, r4
 800a9a0:	4648      	mov	r0, r9
 800a9a2:	f000 fc63 	bl	800b26c <__mdiff>
 800a9a6:	68c2      	ldr	r2, [r0, #12]
 800a9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	bb02      	cbnz	r2, 800a9f0 <_dtoa_r+0xa40>
 800a9ae:	4601      	mov	r1, r0
 800a9b0:	9802      	ldr	r0, [sp, #8]
 800a9b2:	f000 fc3f 	bl	800b234 <__mcmp>
 800a9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4648      	mov	r0, r9
 800a9be:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c2:	f000 fa05 	bl	800add0 <_Bfree>
 800a9c6:	9b07      	ldr	r3, [sp, #28]
 800a9c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a9ca:	9e00      	ldr	r6, [sp, #0]
 800a9cc:	ea42 0103 	orr.w	r1, r2, r3
 800a9d0:	9b06      	ldr	r3, [sp, #24]
 800a9d2:	4319      	orrs	r1, r3
 800a9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9d6:	d10d      	bne.n	800a9f4 <_dtoa_r+0xa44>
 800a9d8:	2b39      	cmp	r3, #57	@ 0x39
 800a9da:	d027      	beq.n	800aa2c <_dtoa_r+0xa7c>
 800a9dc:	9a04      	ldr	r2, [sp, #16]
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	dd01      	ble.n	800a9e6 <_dtoa_r+0xa36>
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	3331      	adds	r3, #49	@ 0x31
 800a9e6:	f88b 3000 	strb.w	r3, [fp]
 800a9ea:	e52e      	b.n	800a44a <_dtoa_r+0x49a>
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	e7b9      	b.n	800a964 <_dtoa_r+0x9b4>
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	e7e2      	b.n	800a9ba <_dtoa_r+0xa0a>
 800a9f4:	9904      	ldr	r1, [sp, #16]
 800a9f6:	2900      	cmp	r1, #0
 800a9f8:	db04      	blt.n	800aa04 <_dtoa_r+0xa54>
 800a9fa:	9807      	ldr	r0, [sp, #28]
 800a9fc:	4301      	orrs	r1, r0
 800a9fe:	9806      	ldr	r0, [sp, #24]
 800aa00:	4301      	orrs	r1, r0
 800aa02:	d120      	bne.n	800aa46 <_dtoa_r+0xa96>
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	ddee      	ble.n	800a9e6 <_dtoa_r+0xa36>
 800aa08:	9902      	ldr	r1, [sp, #8]
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	4648      	mov	r0, r9
 800aa10:	f000 fba4 	bl	800b15c <__lshift>
 800aa14:	4621      	mov	r1, r4
 800aa16:	9002      	str	r0, [sp, #8]
 800aa18:	f000 fc0c 	bl	800b234 <__mcmp>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	9b00      	ldr	r3, [sp, #0]
 800aa20:	dc02      	bgt.n	800aa28 <_dtoa_r+0xa78>
 800aa22:	d1e0      	bne.n	800a9e6 <_dtoa_r+0xa36>
 800aa24:	07da      	lsls	r2, r3, #31
 800aa26:	d5de      	bpl.n	800a9e6 <_dtoa_r+0xa36>
 800aa28:	2b39      	cmp	r3, #57	@ 0x39
 800aa2a:	d1da      	bne.n	800a9e2 <_dtoa_r+0xa32>
 800aa2c:	2339      	movs	r3, #57	@ 0x39
 800aa2e:	f88b 3000 	strb.w	r3, [fp]
 800aa32:	4633      	mov	r3, r6
 800aa34:	461e      	mov	r6, r3
 800aa36:	3b01      	subs	r3, #1
 800aa38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa3c:	2a39      	cmp	r2, #57	@ 0x39
 800aa3e:	d04e      	beq.n	800aade <_dtoa_r+0xb2e>
 800aa40:	3201      	adds	r2, #1
 800aa42:	701a      	strb	r2, [r3, #0]
 800aa44:	e501      	b.n	800a44a <_dtoa_r+0x49a>
 800aa46:	2a00      	cmp	r2, #0
 800aa48:	dd03      	ble.n	800aa52 <_dtoa_r+0xaa2>
 800aa4a:	2b39      	cmp	r3, #57	@ 0x39
 800aa4c:	d0ee      	beq.n	800aa2c <_dtoa_r+0xa7c>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	e7c9      	b.n	800a9e6 <_dtoa_r+0xa36>
 800aa52:	9a00      	ldr	r2, [sp, #0]
 800aa54:	9908      	ldr	r1, [sp, #32]
 800aa56:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa5a:	428a      	cmp	r2, r1
 800aa5c:	d028      	beq.n	800aab0 <_dtoa_r+0xb00>
 800aa5e:	9902      	ldr	r1, [sp, #8]
 800aa60:	2300      	movs	r3, #0
 800aa62:	220a      	movs	r2, #10
 800aa64:	4648      	mov	r0, r9
 800aa66:	f000 f9d5 	bl	800ae14 <__multadd>
 800aa6a:	42af      	cmp	r7, r5
 800aa6c:	9002      	str	r0, [sp, #8]
 800aa6e:	f04f 0300 	mov.w	r3, #0
 800aa72:	f04f 020a 	mov.w	r2, #10
 800aa76:	4639      	mov	r1, r7
 800aa78:	4648      	mov	r0, r9
 800aa7a:	d107      	bne.n	800aa8c <_dtoa_r+0xadc>
 800aa7c:	f000 f9ca 	bl	800ae14 <__multadd>
 800aa80:	4607      	mov	r7, r0
 800aa82:	4605      	mov	r5, r0
 800aa84:	9b00      	ldr	r3, [sp, #0]
 800aa86:	3301      	adds	r3, #1
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	e777      	b.n	800a97c <_dtoa_r+0x9cc>
 800aa8c:	f000 f9c2 	bl	800ae14 <__multadd>
 800aa90:	4629      	mov	r1, r5
 800aa92:	4607      	mov	r7, r0
 800aa94:	2300      	movs	r3, #0
 800aa96:	220a      	movs	r2, #10
 800aa98:	4648      	mov	r0, r9
 800aa9a:	f000 f9bb 	bl	800ae14 <__multadd>
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	e7f0      	b.n	800aa84 <_dtoa_r+0xad4>
 800aaa2:	f1bb 0f00 	cmp.w	fp, #0
 800aaa6:	bfcc      	ite	gt
 800aaa8:	465e      	movgt	r6, fp
 800aaaa:	2601      	movle	r6, #1
 800aaac:	4456      	add	r6, sl
 800aaae:	2700      	movs	r7, #0
 800aab0:	9902      	ldr	r1, [sp, #8]
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	2201      	movs	r2, #1
 800aab6:	4648      	mov	r0, r9
 800aab8:	f000 fb50 	bl	800b15c <__lshift>
 800aabc:	4621      	mov	r1, r4
 800aabe:	9002      	str	r0, [sp, #8]
 800aac0:	f000 fbb8 	bl	800b234 <__mcmp>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	dcb4      	bgt.n	800aa32 <_dtoa_r+0xa82>
 800aac8:	d102      	bne.n	800aad0 <_dtoa_r+0xb20>
 800aaca:	9b00      	ldr	r3, [sp, #0]
 800aacc:	07db      	lsls	r3, r3, #31
 800aace:	d4b0      	bmi.n	800aa32 <_dtoa_r+0xa82>
 800aad0:	4633      	mov	r3, r6
 800aad2:	461e      	mov	r6, r3
 800aad4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aad8:	2a30      	cmp	r2, #48	@ 0x30
 800aada:	d0fa      	beq.n	800aad2 <_dtoa_r+0xb22>
 800aadc:	e4b5      	b.n	800a44a <_dtoa_r+0x49a>
 800aade:	459a      	cmp	sl, r3
 800aae0:	d1a8      	bne.n	800aa34 <_dtoa_r+0xa84>
 800aae2:	2331      	movs	r3, #49	@ 0x31
 800aae4:	f108 0801 	add.w	r8, r8, #1
 800aae8:	f88a 3000 	strb.w	r3, [sl]
 800aaec:	e4ad      	b.n	800a44a <_dtoa_r+0x49a>
 800aaee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aaf0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ab4c <_dtoa_r+0xb9c>
 800aaf4:	b11b      	cbz	r3, 800aafe <_dtoa_r+0xb4e>
 800aaf6:	f10a 0308 	add.w	r3, sl, #8
 800aafa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	4650      	mov	r0, sl
 800ab00:	b017      	add	sp, #92	@ 0x5c
 800ab02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab06:	9b07      	ldr	r3, [sp, #28]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	f77f ae2e 	ble.w	800a76a <_dtoa_r+0x7ba>
 800ab0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab10:	9308      	str	r3, [sp, #32]
 800ab12:	2001      	movs	r0, #1
 800ab14:	e64d      	b.n	800a7b2 <_dtoa_r+0x802>
 800ab16:	f1bb 0f00 	cmp.w	fp, #0
 800ab1a:	f77f aed9 	ble.w	800a8d0 <_dtoa_r+0x920>
 800ab1e:	4656      	mov	r6, sl
 800ab20:	9802      	ldr	r0, [sp, #8]
 800ab22:	4621      	mov	r1, r4
 800ab24:	f7ff f9b9 	bl	8009e9a <quorem>
 800ab28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ab2c:	f806 3b01 	strb.w	r3, [r6], #1
 800ab30:	eba6 020a 	sub.w	r2, r6, sl
 800ab34:	4593      	cmp	fp, r2
 800ab36:	ddb4      	ble.n	800aaa2 <_dtoa_r+0xaf2>
 800ab38:	9902      	ldr	r1, [sp, #8]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	220a      	movs	r2, #10
 800ab3e:	4648      	mov	r0, r9
 800ab40:	f000 f968 	bl	800ae14 <__multadd>
 800ab44:	9002      	str	r0, [sp, #8]
 800ab46:	e7eb      	b.n	800ab20 <_dtoa_r+0xb70>
 800ab48:	0800d7e8 	.word	0x0800d7e8
 800ab4c:	0800d76c 	.word	0x0800d76c

0800ab50 <_free_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4605      	mov	r5, r0
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d041      	beq.n	800abdc <_free_r+0x8c>
 800ab58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab5c:	1f0c      	subs	r4, r1, #4
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfb8      	it	lt
 800ab62:	18e4      	addlt	r4, r4, r3
 800ab64:	f000 f8e8 	bl	800ad38 <__malloc_lock>
 800ab68:	4a1d      	ldr	r2, [pc, #116]	@ (800abe0 <_free_r+0x90>)
 800ab6a:	6813      	ldr	r3, [r2, #0]
 800ab6c:	b933      	cbnz	r3, 800ab7c <_free_r+0x2c>
 800ab6e:	6063      	str	r3, [r4, #4]
 800ab70:	6014      	str	r4, [r2, #0]
 800ab72:	4628      	mov	r0, r5
 800ab74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab78:	f000 b8e4 	b.w	800ad44 <__malloc_unlock>
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	d908      	bls.n	800ab92 <_free_r+0x42>
 800ab80:	6820      	ldr	r0, [r4, #0]
 800ab82:	1821      	adds	r1, r4, r0
 800ab84:	428b      	cmp	r3, r1
 800ab86:	bf01      	itttt	eq
 800ab88:	6819      	ldreq	r1, [r3, #0]
 800ab8a:	685b      	ldreq	r3, [r3, #4]
 800ab8c:	1809      	addeq	r1, r1, r0
 800ab8e:	6021      	streq	r1, [r4, #0]
 800ab90:	e7ed      	b.n	800ab6e <_free_r+0x1e>
 800ab92:	461a      	mov	r2, r3
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	b10b      	cbz	r3, 800ab9c <_free_r+0x4c>
 800ab98:	42a3      	cmp	r3, r4
 800ab9a:	d9fa      	bls.n	800ab92 <_free_r+0x42>
 800ab9c:	6811      	ldr	r1, [r2, #0]
 800ab9e:	1850      	adds	r0, r2, r1
 800aba0:	42a0      	cmp	r0, r4
 800aba2:	d10b      	bne.n	800abbc <_free_r+0x6c>
 800aba4:	6820      	ldr	r0, [r4, #0]
 800aba6:	4401      	add	r1, r0
 800aba8:	1850      	adds	r0, r2, r1
 800abaa:	4283      	cmp	r3, r0
 800abac:	6011      	str	r1, [r2, #0]
 800abae:	d1e0      	bne.n	800ab72 <_free_r+0x22>
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	6053      	str	r3, [r2, #4]
 800abb6:	4408      	add	r0, r1
 800abb8:	6010      	str	r0, [r2, #0]
 800abba:	e7da      	b.n	800ab72 <_free_r+0x22>
 800abbc:	d902      	bls.n	800abc4 <_free_r+0x74>
 800abbe:	230c      	movs	r3, #12
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	e7d6      	b.n	800ab72 <_free_r+0x22>
 800abc4:	6820      	ldr	r0, [r4, #0]
 800abc6:	1821      	adds	r1, r4, r0
 800abc8:	428b      	cmp	r3, r1
 800abca:	bf04      	itt	eq
 800abcc:	6819      	ldreq	r1, [r3, #0]
 800abce:	685b      	ldreq	r3, [r3, #4]
 800abd0:	6063      	str	r3, [r4, #4]
 800abd2:	bf04      	itt	eq
 800abd4:	1809      	addeq	r1, r1, r0
 800abd6:	6021      	streq	r1, [r4, #0]
 800abd8:	6054      	str	r4, [r2, #4]
 800abda:	e7ca      	b.n	800ab72 <_free_r+0x22>
 800abdc:	bd38      	pop	{r3, r4, r5, pc}
 800abde:	bf00      	nop
 800abe0:	20000ec8 	.word	0x20000ec8

0800abe4 <malloc>:
 800abe4:	4b02      	ldr	r3, [pc, #8]	@ (800abf0 <malloc+0xc>)
 800abe6:	4601      	mov	r1, r0
 800abe8:	6818      	ldr	r0, [r3, #0]
 800abea:	f000 b825 	b.w	800ac38 <_malloc_r>
 800abee:	bf00      	nop
 800abf0:	20000018 	.word	0x20000018

0800abf4 <sbrk_aligned>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	4e0f      	ldr	r6, [pc, #60]	@ (800ac34 <sbrk_aligned+0x40>)
 800abf8:	460c      	mov	r4, r1
 800abfa:	6831      	ldr	r1, [r6, #0]
 800abfc:	4605      	mov	r5, r0
 800abfe:	b911      	cbnz	r1, 800ac06 <sbrk_aligned+0x12>
 800ac00:	f000 fe3e 	bl	800b880 <_sbrk_r>
 800ac04:	6030      	str	r0, [r6, #0]
 800ac06:	4621      	mov	r1, r4
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f000 fe39 	bl	800b880 <_sbrk_r>
 800ac0e:	1c43      	adds	r3, r0, #1
 800ac10:	d103      	bne.n	800ac1a <sbrk_aligned+0x26>
 800ac12:	f04f 34ff 	mov.w	r4, #4294967295
 800ac16:	4620      	mov	r0, r4
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	1cc4      	adds	r4, r0, #3
 800ac1c:	f024 0403 	bic.w	r4, r4, #3
 800ac20:	42a0      	cmp	r0, r4
 800ac22:	d0f8      	beq.n	800ac16 <sbrk_aligned+0x22>
 800ac24:	1a21      	subs	r1, r4, r0
 800ac26:	4628      	mov	r0, r5
 800ac28:	f000 fe2a 	bl	800b880 <_sbrk_r>
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d1f2      	bne.n	800ac16 <sbrk_aligned+0x22>
 800ac30:	e7ef      	b.n	800ac12 <sbrk_aligned+0x1e>
 800ac32:	bf00      	nop
 800ac34:	20000ec4 	.word	0x20000ec4

0800ac38 <_malloc_r>:
 800ac38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac3c:	1ccd      	adds	r5, r1, #3
 800ac3e:	f025 0503 	bic.w	r5, r5, #3
 800ac42:	3508      	adds	r5, #8
 800ac44:	2d0c      	cmp	r5, #12
 800ac46:	bf38      	it	cc
 800ac48:	250c      	movcc	r5, #12
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	db01      	blt.n	800ac54 <_malloc_r+0x1c>
 800ac50:	42a9      	cmp	r1, r5
 800ac52:	d904      	bls.n	800ac5e <_malloc_r+0x26>
 800ac54:	230c      	movs	r3, #12
 800ac56:	6033      	str	r3, [r6, #0]
 800ac58:	2000      	movs	r0, #0
 800ac5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad34 <_malloc_r+0xfc>
 800ac62:	f000 f869 	bl	800ad38 <__malloc_lock>
 800ac66:	f8d8 3000 	ldr.w	r3, [r8]
 800ac6a:	461c      	mov	r4, r3
 800ac6c:	bb44      	cbnz	r4, 800acc0 <_malloc_r+0x88>
 800ac6e:	4629      	mov	r1, r5
 800ac70:	4630      	mov	r0, r6
 800ac72:	f7ff ffbf 	bl	800abf4 <sbrk_aligned>
 800ac76:	1c43      	adds	r3, r0, #1
 800ac78:	4604      	mov	r4, r0
 800ac7a:	d158      	bne.n	800ad2e <_malloc_r+0xf6>
 800ac7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ac80:	4627      	mov	r7, r4
 800ac82:	2f00      	cmp	r7, #0
 800ac84:	d143      	bne.n	800ad0e <_malloc_r+0xd6>
 800ac86:	2c00      	cmp	r4, #0
 800ac88:	d04b      	beq.n	800ad22 <_malloc_r+0xea>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	4639      	mov	r1, r7
 800ac8e:	4630      	mov	r0, r6
 800ac90:	eb04 0903 	add.w	r9, r4, r3
 800ac94:	f000 fdf4 	bl	800b880 <_sbrk_r>
 800ac98:	4581      	cmp	r9, r0
 800ac9a:	d142      	bne.n	800ad22 <_malloc_r+0xea>
 800ac9c:	6821      	ldr	r1, [r4, #0]
 800ac9e:	1a6d      	subs	r5, r5, r1
 800aca0:	4629      	mov	r1, r5
 800aca2:	4630      	mov	r0, r6
 800aca4:	f7ff ffa6 	bl	800abf4 <sbrk_aligned>
 800aca8:	3001      	adds	r0, #1
 800acaa:	d03a      	beq.n	800ad22 <_malloc_r+0xea>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	442b      	add	r3, r5
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	f8d8 3000 	ldr.w	r3, [r8]
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	bb62      	cbnz	r2, 800ad14 <_malloc_r+0xdc>
 800acba:	f8c8 7000 	str.w	r7, [r8]
 800acbe:	e00f      	b.n	800ace0 <_malloc_r+0xa8>
 800acc0:	6822      	ldr	r2, [r4, #0]
 800acc2:	1b52      	subs	r2, r2, r5
 800acc4:	d420      	bmi.n	800ad08 <_malloc_r+0xd0>
 800acc6:	2a0b      	cmp	r2, #11
 800acc8:	d917      	bls.n	800acfa <_malloc_r+0xc2>
 800acca:	1961      	adds	r1, r4, r5
 800accc:	42a3      	cmp	r3, r4
 800acce:	6025      	str	r5, [r4, #0]
 800acd0:	bf18      	it	ne
 800acd2:	6059      	strne	r1, [r3, #4]
 800acd4:	6863      	ldr	r3, [r4, #4]
 800acd6:	bf08      	it	eq
 800acd8:	f8c8 1000 	streq.w	r1, [r8]
 800acdc:	5162      	str	r2, [r4, r5]
 800acde:	604b      	str	r3, [r1, #4]
 800ace0:	4630      	mov	r0, r6
 800ace2:	f000 f82f 	bl	800ad44 <__malloc_unlock>
 800ace6:	f104 000b 	add.w	r0, r4, #11
 800acea:	1d23      	adds	r3, r4, #4
 800acec:	f020 0007 	bic.w	r0, r0, #7
 800acf0:	1ac2      	subs	r2, r0, r3
 800acf2:	bf1c      	itt	ne
 800acf4:	1a1b      	subne	r3, r3, r0
 800acf6:	50a3      	strne	r3, [r4, r2]
 800acf8:	e7af      	b.n	800ac5a <_malloc_r+0x22>
 800acfa:	6862      	ldr	r2, [r4, #4]
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	bf0c      	ite	eq
 800ad00:	f8c8 2000 	streq.w	r2, [r8]
 800ad04:	605a      	strne	r2, [r3, #4]
 800ad06:	e7eb      	b.n	800ace0 <_malloc_r+0xa8>
 800ad08:	4623      	mov	r3, r4
 800ad0a:	6864      	ldr	r4, [r4, #4]
 800ad0c:	e7ae      	b.n	800ac6c <_malloc_r+0x34>
 800ad0e:	463c      	mov	r4, r7
 800ad10:	687f      	ldr	r7, [r7, #4]
 800ad12:	e7b6      	b.n	800ac82 <_malloc_r+0x4a>
 800ad14:	461a      	mov	r2, r3
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	d1fb      	bne.n	800ad14 <_malloc_r+0xdc>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	6053      	str	r3, [r2, #4]
 800ad20:	e7de      	b.n	800ace0 <_malloc_r+0xa8>
 800ad22:	230c      	movs	r3, #12
 800ad24:	6033      	str	r3, [r6, #0]
 800ad26:	4630      	mov	r0, r6
 800ad28:	f000 f80c 	bl	800ad44 <__malloc_unlock>
 800ad2c:	e794      	b.n	800ac58 <_malloc_r+0x20>
 800ad2e:	6005      	str	r5, [r0, #0]
 800ad30:	e7d6      	b.n	800ace0 <_malloc_r+0xa8>
 800ad32:	bf00      	nop
 800ad34:	20000ec8 	.word	0x20000ec8

0800ad38 <__malloc_lock>:
 800ad38:	4801      	ldr	r0, [pc, #4]	@ (800ad40 <__malloc_lock+0x8>)
 800ad3a:	f7ff b89e 	b.w	8009e7a <__retarget_lock_acquire_recursive>
 800ad3e:	bf00      	nop
 800ad40:	20000ec0 	.word	0x20000ec0

0800ad44 <__malloc_unlock>:
 800ad44:	4801      	ldr	r0, [pc, #4]	@ (800ad4c <__malloc_unlock+0x8>)
 800ad46:	f7ff b899 	b.w	8009e7c <__retarget_lock_release_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	20000ec0 	.word	0x20000ec0

0800ad50 <_Balloc>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	69c6      	ldr	r6, [r0, #28]
 800ad54:	4604      	mov	r4, r0
 800ad56:	460d      	mov	r5, r1
 800ad58:	b976      	cbnz	r6, 800ad78 <_Balloc+0x28>
 800ad5a:	2010      	movs	r0, #16
 800ad5c:	f7ff ff42 	bl	800abe4 <malloc>
 800ad60:	4602      	mov	r2, r0
 800ad62:	61e0      	str	r0, [r4, #28]
 800ad64:	b920      	cbnz	r0, 800ad70 <_Balloc+0x20>
 800ad66:	4b18      	ldr	r3, [pc, #96]	@ (800adc8 <_Balloc+0x78>)
 800ad68:	4818      	ldr	r0, [pc, #96]	@ (800adcc <_Balloc+0x7c>)
 800ad6a:	216b      	movs	r1, #107	@ 0x6b
 800ad6c:	f000 fd98 	bl	800b8a0 <__assert_func>
 800ad70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad74:	6006      	str	r6, [r0, #0]
 800ad76:	60c6      	str	r6, [r0, #12]
 800ad78:	69e6      	ldr	r6, [r4, #28]
 800ad7a:	68f3      	ldr	r3, [r6, #12]
 800ad7c:	b183      	cbz	r3, 800ada0 <_Balloc+0x50>
 800ad7e:	69e3      	ldr	r3, [r4, #28]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad86:	b9b8      	cbnz	r0, 800adb8 <_Balloc+0x68>
 800ad88:	2101      	movs	r1, #1
 800ad8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ad8e:	1d72      	adds	r2, r6, #5
 800ad90:	0092      	lsls	r2, r2, #2
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 fda2 	bl	800b8dc <_calloc_r>
 800ad98:	b160      	cbz	r0, 800adb4 <_Balloc+0x64>
 800ad9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad9e:	e00e      	b.n	800adbe <_Balloc+0x6e>
 800ada0:	2221      	movs	r2, #33	@ 0x21
 800ada2:	2104      	movs	r1, #4
 800ada4:	4620      	mov	r0, r4
 800ada6:	f000 fd99 	bl	800b8dc <_calloc_r>
 800adaa:	69e3      	ldr	r3, [r4, #28]
 800adac:	60f0      	str	r0, [r6, #12]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1e4      	bne.n	800ad7e <_Balloc+0x2e>
 800adb4:	2000      	movs	r0, #0
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
 800adb8:	6802      	ldr	r2, [r0, #0]
 800adba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adbe:	2300      	movs	r3, #0
 800adc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adc4:	e7f7      	b.n	800adb6 <_Balloc+0x66>
 800adc6:	bf00      	nop
 800adc8:	0800d779 	.word	0x0800d779
 800adcc:	0800d7f9 	.word	0x0800d7f9

0800add0 <_Bfree>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	69c6      	ldr	r6, [r0, #28]
 800add4:	4605      	mov	r5, r0
 800add6:	460c      	mov	r4, r1
 800add8:	b976      	cbnz	r6, 800adf8 <_Bfree+0x28>
 800adda:	2010      	movs	r0, #16
 800addc:	f7ff ff02 	bl	800abe4 <malloc>
 800ade0:	4602      	mov	r2, r0
 800ade2:	61e8      	str	r0, [r5, #28]
 800ade4:	b920      	cbnz	r0, 800adf0 <_Bfree+0x20>
 800ade6:	4b09      	ldr	r3, [pc, #36]	@ (800ae0c <_Bfree+0x3c>)
 800ade8:	4809      	ldr	r0, [pc, #36]	@ (800ae10 <_Bfree+0x40>)
 800adea:	218f      	movs	r1, #143	@ 0x8f
 800adec:	f000 fd58 	bl	800b8a0 <__assert_func>
 800adf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adf4:	6006      	str	r6, [r0, #0]
 800adf6:	60c6      	str	r6, [r0, #12]
 800adf8:	b13c      	cbz	r4, 800ae0a <_Bfree+0x3a>
 800adfa:	69eb      	ldr	r3, [r5, #28]
 800adfc:	6862      	ldr	r2, [r4, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae04:	6021      	str	r1, [r4, #0]
 800ae06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae0a:	bd70      	pop	{r4, r5, r6, pc}
 800ae0c:	0800d779 	.word	0x0800d779
 800ae10:	0800d7f9 	.word	0x0800d7f9

0800ae14 <__multadd>:
 800ae14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae18:	690d      	ldr	r5, [r1, #16]
 800ae1a:	4607      	mov	r7, r0
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	461e      	mov	r6, r3
 800ae20:	f101 0c14 	add.w	ip, r1, #20
 800ae24:	2000      	movs	r0, #0
 800ae26:	f8dc 3000 	ldr.w	r3, [ip]
 800ae2a:	b299      	uxth	r1, r3
 800ae2c:	fb02 6101 	mla	r1, r2, r1, r6
 800ae30:	0c1e      	lsrs	r6, r3, #16
 800ae32:	0c0b      	lsrs	r3, r1, #16
 800ae34:	fb02 3306 	mla	r3, r2, r6, r3
 800ae38:	b289      	uxth	r1, r1
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae40:	4285      	cmp	r5, r0
 800ae42:	f84c 1b04 	str.w	r1, [ip], #4
 800ae46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae4a:	dcec      	bgt.n	800ae26 <__multadd+0x12>
 800ae4c:	b30e      	cbz	r6, 800ae92 <__multadd+0x7e>
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	42ab      	cmp	r3, r5
 800ae52:	dc19      	bgt.n	800ae88 <__multadd+0x74>
 800ae54:	6861      	ldr	r1, [r4, #4]
 800ae56:	4638      	mov	r0, r7
 800ae58:	3101      	adds	r1, #1
 800ae5a:	f7ff ff79 	bl	800ad50 <_Balloc>
 800ae5e:	4680      	mov	r8, r0
 800ae60:	b928      	cbnz	r0, 800ae6e <__multadd+0x5a>
 800ae62:	4602      	mov	r2, r0
 800ae64:	4b0c      	ldr	r3, [pc, #48]	@ (800ae98 <__multadd+0x84>)
 800ae66:	480d      	ldr	r0, [pc, #52]	@ (800ae9c <__multadd+0x88>)
 800ae68:	21ba      	movs	r1, #186	@ 0xba
 800ae6a:	f000 fd19 	bl	800b8a0 <__assert_func>
 800ae6e:	6922      	ldr	r2, [r4, #16]
 800ae70:	3202      	adds	r2, #2
 800ae72:	f104 010c 	add.w	r1, r4, #12
 800ae76:	0092      	lsls	r2, r2, #2
 800ae78:	300c      	adds	r0, #12
 800ae7a:	f7ff f800 	bl	8009e7e <memcpy>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4638      	mov	r0, r7
 800ae82:	f7ff ffa5 	bl	800add0 <_Bfree>
 800ae86:	4644      	mov	r4, r8
 800ae88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae8c:	3501      	adds	r5, #1
 800ae8e:	615e      	str	r6, [r3, #20]
 800ae90:	6125      	str	r5, [r4, #16]
 800ae92:	4620      	mov	r0, r4
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	0800d7e8 	.word	0x0800d7e8
 800ae9c:	0800d7f9 	.word	0x0800d7f9

0800aea0 <__hi0bits>:
 800aea0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aea4:	4603      	mov	r3, r0
 800aea6:	bf36      	itet	cc
 800aea8:	0403      	lslcc	r3, r0, #16
 800aeaa:	2000      	movcs	r0, #0
 800aeac:	2010      	movcc	r0, #16
 800aeae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aeb2:	bf3c      	itt	cc
 800aeb4:	021b      	lslcc	r3, r3, #8
 800aeb6:	3008      	addcc	r0, #8
 800aeb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aebc:	bf3c      	itt	cc
 800aebe:	011b      	lslcc	r3, r3, #4
 800aec0:	3004      	addcc	r0, #4
 800aec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aec6:	bf3c      	itt	cc
 800aec8:	009b      	lslcc	r3, r3, #2
 800aeca:	3002      	addcc	r0, #2
 800aecc:	2b00      	cmp	r3, #0
 800aece:	db05      	blt.n	800aedc <__hi0bits+0x3c>
 800aed0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aed4:	f100 0001 	add.w	r0, r0, #1
 800aed8:	bf08      	it	eq
 800aeda:	2020      	moveq	r0, #32
 800aedc:	4770      	bx	lr

0800aede <__lo0bits>:
 800aede:	6803      	ldr	r3, [r0, #0]
 800aee0:	4602      	mov	r2, r0
 800aee2:	f013 0007 	ands.w	r0, r3, #7
 800aee6:	d00b      	beq.n	800af00 <__lo0bits+0x22>
 800aee8:	07d9      	lsls	r1, r3, #31
 800aeea:	d421      	bmi.n	800af30 <__lo0bits+0x52>
 800aeec:	0798      	lsls	r0, r3, #30
 800aeee:	bf49      	itett	mi
 800aef0:	085b      	lsrmi	r3, r3, #1
 800aef2:	089b      	lsrpl	r3, r3, #2
 800aef4:	2001      	movmi	r0, #1
 800aef6:	6013      	strmi	r3, [r2, #0]
 800aef8:	bf5c      	itt	pl
 800aefa:	6013      	strpl	r3, [r2, #0]
 800aefc:	2002      	movpl	r0, #2
 800aefe:	4770      	bx	lr
 800af00:	b299      	uxth	r1, r3
 800af02:	b909      	cbnz	r1, 800af08 <__lo0bits+0x2a>
 800af04:	0c1b      	lsrs	r3, r3, #16
 800af06:	2010      	movs	r0, #16
 800af08:	b2d9      	uxtb	r1, r3
 800af0a:	b909      	cbnz	r1, 800af10 <__lo0bits+0x32>
 800af0c:	3008      	adds	r0, #8
 800af0e:	0a1b      	lsrs	r3, r3, #8
 800af10:	0719      	lsls	r1, r3, #28
 800af12:	bf04      	itt	eq
 800af14:	091b      	lsreq	r3, r3, #4
 800af16:	3004      	addeq	r0, #4
 800af18:	0799      	lsls	r1, r3, #30
 800af1a:	bf04      	itt	eq
 800af1c:	089b      	lsreq	r3, r3, #2
 800af1e:	3002      	addeq	r0, #2
 800af20:	07d9      	lsls	r1, r3, #31
 800af22:	d403      	bmi.n	800af2c <__lo0bits+0x4e>
 800af24:	085b      	lsrs	r3, r3, #1
 800af26:	f100 0001 	add.w	r0, r0, #1
 800af2a:	d003      	beq.n	800af34 <__lo0bits+0x56>
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	4770      	bx	lr
 800af30:	2000      	movs	r0, #0
 800af32:	4770      	bx	lr
 800af34:	2020      	movs	r0, #32
 800af36:	4770      	bx	lr

0800af38 <__i2b>:
 800af38:	b510      	push	{r4, lr}
 800af3a:	460c      	mov	r4, r1
 800af3c:	2101      	movs	r1, #1
 800af3e:	f7ff ff07 	bl	800ad50 <_Balloc>
 800af42:	4602      	mov	r2, r0
 800af44:	b928      	cbnz	r0, 800af52 <__i2b+0x1a>
 800af46:	4b05      	ldr	r3, [pc, #20]	@ (800af5c <__i2b+0x24>)
 800af48:	4805      	ldr	r0, [pc, #20]	@ (800af60 <__i2b+0x28>)
 800af4a:	f240 1145 	movw	r1, #325	@ 0x145
 800af4e:	f000 fca7 	bl	800b8a0 <__assert_func>
 800af52:	2301      	movs	r3, #1
 800af54:	6144      	str	r4, [r0, #20]
 800af56:	6103      	str	r3, [r0, #16]
 800af58:	bd10      	pop	{r4, pc}
 800af5a:	bf00      	nop
 800af5c:	0800d7e8 	.word	0x0800d7e8
 800af60:	0800d7f9 	.word	0x0800d7f9

0800af64 <__multiply>:
 800af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af68:	4617      	mov	r7, r2
 800af6a:	690a      	ldr	r2, [r1, #16]
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	429a      	cmp	r2, r3
 800af70:	bfa8      	it	ge
 800af72:	463b      	movge	r3, r7
 800af74:	4689      	mov	r9, r1
 800af76:	bfa4      	itt	ge
 800af78:	460f      	movge	r7, r1
 800af7a:	4699      	movge	r9, r3
 800af7c:	693d      	ldr	r5, [r7, #16]
 800af7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6879      	ldr	r1, [r7, #4]
 800af86:	eb05 060a 	add.w	r6, r5, sl
 800af8a:	42b3      	cmp	r3, r6
 800af8c:	b085      	sub	sp, #20
 800af8e:	bfb8      	it	lt
 800af90:	3101      	addlt	r1, #1
 800af92:	f7ff fedd 	bl	800ad50 <_Balloc>
 800af96:	b930      	cbnz	r0, 800afa6 <__multiply+0x42>
 800af98:	4602      	mov	r2, r0
 800af9a:	4b41      	ldr	r3, [pc, #260]	@ (800b0a0 <__multiply+0x13c>)
 800af9c:	4841      	ldr	r0, [pc, #260]	@ (800b0a4 <__multiply+0x140>)
 800af9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800afa2:	f000 fc7d 	bl	800b8a0 <__assert_func>
 800afa6:	f100 0414 	add.w	r4, r0, #20
 800afaa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800afae:	4623      	mov	r3, r4
 800afb0:	2200      	movs	r2, #0
 800afb2:	4573      	cmp	r3, lr
 800afb4:	d320      	bcc.n	800aff8 <__multiply+0x94>
 800afb6:	f107 0814 	add.w	r8, r7, #20
 800afba:	f109 0114 	add.w	r1, r9, #20
 800afbe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800afc2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800afc6:	9302      	str	r3, [sp, #8]
 800afc8:	1beb      	subs	r3, r5, r7
 800afca:	3b15      	subs	r3, #21
 800afcc:	f023 0303 	bic.w	r3, r3, #3
 800afd0:	3304      	adds	r3, #4
 800afd2:	3715      	adds	r7, #21
 800afd4:	42bd      	cmp	r5, r7
 800afd6:	bf38      	it	cc
 800afd8:	2304      	movcc	r3, #4
 800afda:	9301      	str	r3, [sp, #4]
 800afdc:	9b02      	ldr	r3, [sp, #8]
 800afde:	9103      	str	r1, [sp, #12]
 800afe0:	428b      	cmp	r3, r1
 800afe2:	d80c      	bhi.n	800affe <__multiply+0x9a>
 800afe4:	2e00      	cmp	r6, #0
 800afe6:	dd03      	ble.n	800aff0 <__multiply+0x8c>
 800afe8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800afec:	2b00      	cmp	r3, #0
 800afee:	d055      	beq.n	800b09c <__multiply+0x138>
 800aff0:	6106      	str	r6, [r0, #16]
 800aff2:	b005      	add	sp, #20
 800aff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff8:	f843 2b04 	str.w	r2, [r3], #4
 800affc:	e7d9      	b.n	800afb2 <__multiply+0x4e>
 800affe:	f8b1 a000 	ldrh.w	sl, [r1]
 800b002:	f1ba 0f00 	cmp.w	sl, #0
 800b006:	d01f      	beq.n	800b048 <__multiply+0xe4>
 800b008:	46c4      	mov	ip, r8
 800b00a:	46a1      	mov	r9, r4
 800b00c:	2700      	movs	r7, #0
 800b00e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b012:	f8d9 3000 	ldr.w	r3, [r9]
 800b016:	fa1f fb82 	uxth.w	fp, r2
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b020:	443b      	add	r3, r7
 800b022:	f8d9 7000 	ldr.w	r7, [r9]
 800b026:	0c12      	lsrs	r2, r2, #16
 800b028:	0c3f      	lsrs	r7, r7, #16
 800b02a:	fb0a 7202 	mla	r2, sl, r2, r7
 800b02e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b032:	b29b      	uxth	r3, r3
 800b034:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b038:	4565      	cmp	r5, ip
 800b03a:	f849 3b04 	str.w	r3, [r9], #4
 800b03e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b042:	d8e4      	bhi.n	800b00e <__multiply+0xaa>
 800b044:	9b01      	ldr	r3, [sp, #4]
 800b046:	50e7      	str	r7, [r4, r3]
 800b048:	9b03      	ldr	r3, [sp, #12]
 800b04a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b04e:	3104      	adds	r1, #4
 800b050:	f1b9 0f00 	cmp.w	r9, #0
 800b054:	d020      	beq.n	800b098 <__multiply+0x134>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	4647      	mov	r7, r8
 800b05a:	46a4      	mov	ip, r4
 800b05c:	f04f 0a00 	mov.w	sl, #0
 800b060:	f8b7 b000 	ldrh.w	fp, [r7]
 800b064:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b068:	fb09 220b 	mla	r2, r9, fp, r2
 800b06c:	4452      	add	r2, sl
 800b06e:	b29b      	uxth	r3, r3
 800b070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b074:	f84c 3b04 	str.w	r3, [ip], #4
 800b078:	f857 3b04 	ldr.w	r3, [r7], #4
 800b07c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b080:	f8bc 3000 	ldrh.w	r3, [ip]
 800b084:	fb09 330a 	mla	r3, r9, sl, r3
 800b088:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b08c:	42bd      	cmp	r5, r7
 800b08e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b092:	d8e5      	bhi.n	800b060 <__multiply+0xfc>
 800b094:	9a01      	ldr	r2, [sp, #4]
 800b096:	50a3      	str	r3, [r4, r2]
 800b098:	3404      	adds	r4, #4
 800b09a:	e79f      	b.n	800afdc <__multiply+0x78>
 800b09c:	3e01      	subs	r6, #1
 800b09e:	e7a1      	b.n	800afe4 <__multiply+0x80>
 800b0a0:	0800d7e8 	.word	0x0800d7e8
 800b0a4:	0800d7f9 	.word	0x0800d7f9

0800b0a8 <__pow5mult>:
 800b0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0ac:	4615      	mov	r5, r2
 800b0ae:	f012 0203 	ands.w	r2, r2, #3
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	460e      	mov	r6, r1
 800b0b6:	d007      	beq.n	800b0c8 <__pow5mult+0x20>
 800b0b8:	4c25      	ldr	r4, [pc, #148]	@ (800b150 <__pow5mult+0xa8>)
 800b0ba:	3a01      	subs	r2, #1
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0c2:	f7ff fea7 	bl	800ae14 <__multadd>
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	10ad      	asrs	r5, r5, #2
 800b0ca:	d03d      	beq.n	800b148 <__pow5mult+0xa0>
 800b0cc:	69fc      	ldr	r4, [r7, #28]
 800b0ce:	b97c      	cbnz	r4, 800b0f0 <__pow5mult+0x48>
 800b0d0:	2010      	movs	r0, #16
 800b0d2:	f7ff fd87 	bl	800abe4 <malloc>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	61f8      	str	r0, [r7, #28]
 800b0da:	b928      	cbnz	r0, 800b0e8 <__pow5mult+0x40>
 800b0dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b154 <__pow5mult+0xac>)
 800b0de:	481e      	ldr	r0, [pc, #120]	@ (800b158 <__pow5mult+0xb0>)
 800b0e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b0e4:	f000 fbdc 	bl	800b8a0 <__assert_func>
 800b0e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0ec:	6004      	str	r4, [r0, #0]
 800b0ee:	60c4      	str	r4, [r0, #12]
 800b0f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b0f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0f8:	b94c      	cbnz	r4, 800b10e <__pow5mult+0x66>
 800b0fa:	f240 2171 	movw	r1, #625	@ 0x271
 800b0fe:	4638      	mov	r0, r7
 800b100:	f7ff ff1a 	bl	800af38 <__i2b>
 800b104:	2300      	movs	r3, #0
 800b106:	f8c8 0008 	str.w	r0, [r8, #8]
 800b10a:	4604      	mov	r4, r0
 800b10c:	6003      	str	r3, [r0, #0]
 800b10e:	f04f 0900 	mov.w	r9, #0
 800b112:	07eb      	lsls	r3, r5, #31
 800b114:	d50a      	bpl.n	800b12c <__pow5mult+0x84>
 800b116:	4631      	mov	r1, r6
 800b118:	4622      	mov	r2, r4
 800b11a:	4638      	mov	r0, r7
 800b11c:	f7ff ff22 	bl	800af64 <__multiply>
 800b120:	4631      	mov	r1, r6
 800b122:	4680      	mov	r8, r0
 800b124:	4638      	mov	r0, r7
 800b126:	f7ff fe53 	bl	800add0 <_Bfree>
 800b12a:	4646      	mov	r6, r8
 800b12c:	106d      	asrs	r5, r5, #1
 800b12e:	d00b      	beq.n	800b148 <__pow5mult+0xa0>
 800b130:	6820      	ldr	r0, [r4, #0]
 800b132:	b938      	cbnz	r0, 800b144 <__pow5mult+0x9c>
 800b134:	4622      	mov	r2, r4
 800b136:	4621      	mov	r1, r4
 800b138:	4638      	mov	r0, r7
 800b13a:	f7ff ff13 	bl	800af64 <__multiply>
 800b13e:	6020      	str	r0, [r4, #0]
 800b140:	f8c0 9000 	str.w	r9, [r0]
 800b144:	4604      	mov	r4, r0
 800b146:	e7e4      	b.n	800b112 <__pow5mult+0x6a>
 800b148:	4630      	mov	r0, r6
 800b14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14e:	bf00      	nop
 800b150:	0800d8ac 	.word	0x0800d8ac
 800b154:	0800d779 	.word	0x0800d779
 800b158:	0800d7f9 	.word	0x0800d7f9

0800b15c <__lshift>:
 800b15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b160:	460c      	mov	r4, r1
 800b162:	6849      	ldr	r1, [r1, #4]
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	4607      	mov	r7, r0
 800b16e:	4691      	mov	r9, r2
 800b170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b174:	f108 0601 	add.w	r6, r8, #1
 800b178:	42b3      	cmp	r3, r6
 800b17a:	db0b      	blt.n	800b194 <__lshift+0x38>
 800b17c:	4638      	mov	r0, r7
 800b17e:	f7ff fde7 	bl	800ad50 <_Balloc>
 800b182:	4605      	mov	r5, r0
 800b184:	b948      	cbnz	r0, 800b19a <__lshift+0x3e>
 800b186:	4602      	mov	r2, r0
 800b188:	4b28      	ldr	r3, [pc, #160]	@ (800b22c <__lshift+0xd0>)
 800b18a:	4829      	ldr	r0, [pc, #164]	@ (800b230 <__lshift+0xd4>)
 800b18c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b190:	f000 fb86 	bl	800b8a0 <__assert_func>
 800b194:	3101      	adds	r1, #1
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	e7ee      	b.n	800b178 <__lshift+0x1c>
 800b19a:	2300      	movs	r3, #0
 800b19c:	f100 0114 	add.w	r1, r0, #20
 800b1a0:	f100 0210 	add.w	r2, r0, #16
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	4553      	cmp	r3, sl
 800b1a8:	db33      	blt.n	800b212 <__lshift+0xb6>
 800b1aa:	6920      	ldr	r0, [r4, #16]
 800b1ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1b0:	f104 0314 	add.w	r3, r4, #20
 800b1b4:	f019 091f 	ands.w	r9, r9, #31
 800b1b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1c0:	d02b      	beq.n	800b21a <__lshift+0xbe>
 800b1c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b1c6:	468a      	mov	sl, r1
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	6818      	ldr	r0, [r3, #0]
 800b1cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b1d0:	4310      	orrs	r0, r2
 800b1d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1da:	459c      	cmp	ip, r3
 800b1dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1e0:	d8f3      	bhi.n	800b1ca <__lshift+0x6e>
 800b1e2:	ebac 0304 	sub.w	r3, ip, r4
 800b1e6:	3b15      	subs	r3, #21
 800b1e8:	f023 0303 	bic.w	r3, r3, #3
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	f104 0015 	add.w	r0, r4, #21
 800b1f2:	4560      	cmp	r0, ip
 800b1f4:	bf88      	it	hi
 800b1f6:	2304      	movhi	r3, #4
 800b1f8:	50ca      	str	r2, [r1, r3]
 800b1fa:	b10a      	cbz	r2, 800b200 <__lshift+0xa4>
 800b1fc:	f108 0602 	add.w	r6, r8, #2
 800b200:	3e01      	subs	r6, #1
 800b202:	4638      	mov	r0, r7
 800b204:	612e      	str	r6, [r5, #16]
 800b206:	4621      	mov	r1, r4
 800b208:	f7ff fde2 	bl	800add0 <_Bfree>
 800b20c:	4628      	mov	r0, r5
 800b20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b212:	f842 0f04 	str.w	r0, [r2, #4]!
 800b216:	3301      	adds	r3, #1
 800b218:	e7c5      	b.n	800b1a6 <__lshift+0x4a>
 800b21a:	3904      	subs	r1, #4
 800b21c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b220:	f841 2f04 	str.w	r2, [r1, #4]!
 800b224:	459c      	cmp	ip, r3
 800b226:	d8f9      	bhi.n	800b21c <__lshift+0xc0>
 800b228:	e7ea      	b.n	800b200 <__lshift+0xa4>
 800b22a:	bf00      	nop
 800b22c:	0800d7e8 	.word	0x0800d7e8
 800b230:	0800d7f9 	.word	0x0800d7f9

0800b234 <__mcmp>:
 800b234:	690a      	ldr	r2, [r1, #16]
 800b236:	4603      	mov	r3, r0
 800b238:	6900      	ldr	r0, [r0, #16]
 800b23a:	1a80      	subs	r0, r0, r2
 800b23c:	b530      	push	{r4, r5, lr}
 800b23e:	d10e      	bne.n	800b25e <__mcmp+0x2a>
 800b240:	3314      	adds	r3, #20
 800b242:	3114      	adds	r1, #20
 800b244:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b248:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b24c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b250:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b254:	4295      	cmp	r5, r2
 800b256:	d003      	beq.n	800b260 <__mcmp+0x2c>
 800b258:	d205      	bcs.n	800b266 <__mcmp+0x32>
 800b25a:	f04f 30ff 	mov.w	r0, #4294967295
 800b25e:	bd30      	pop	{r4, r5, pc}
 800b260:	42a3      	cmp	r3, r4
 800b262:	d3f3      	bcc.n	800b24c <__mcmp+0x18>
 800b264:	e7fb      	b.n	800b25e <__mcmp+0x2a>
 800b266:	2001      	movs	r0, #1
 800b268:	e7f9      	b.n	800b25e <__mcmp+0x2a>
	...

0800b26c <__mdiff>:
 800b26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	4689      	mov	r9, r1
 800b272:	4606      	mov	r6, r0
 800b274:	4611      	mov	r1, r2
 800b276:	4648      	mov	r0, r9
 800b278:	4614      	mov	r4, r2
 800b27a:	f7ff ffdb 	bl	800b234 <__mcmp>
 800b27e:	1e05      	subs	r5, r0, #0
 800b280:	d112      	bne.n	800b2a8 <__mdiff+0x3c>
 800b282:	4629      	mov	r1, r5
 800b284:	4630      	mov	r0, r6
 800b286:	f7ff fd63 	bl	800ad50 <_Balloc>
 800b28a:	4602      	mov	r2, r0
 800b28c:	b928      	cbnz	r0, 800b29a <__mdiff+0x2e>
 800b28e:	4b3f      	ldr	r3, [pc, #252]	@ (800b38c <__mdiff+0x120>)
 800b290:	f240 2137 	movw	r1, #567	@ 0x237
 800b294:	483e      	ldr	r0, [pc, #248]	@ (800b390 <__mdiff+0x124>)
 800b296:	f000 fb03 	bl	800b8a0 <__assert_func>
 800b29a:	2301      	movs	r3, #1
 800b29c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	b003      	add	sp, #12
 800b2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a8:	bfbc      	itt	lt
 800b2aa:	464b      	movlt	r3, r9
 800b2ac:	46a1      	movlt	r9, r4
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b2b4:	bfba      	itte	lt
 800b2b6:	461c      	movlt	r4, r3
 800b2b8:	2501      	movlt	r5, #1
 800b2ba:	2500      	movge	r5, #0
 800b2bc:	f7ff fd48 	bl	800ad50 <_Balloc>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	b918      	cbnz	r0, 800b2cc <__mdiff+0x60>
 800b2c4:	4b31      	ldr	r3, [pc, #196]	@ (800b38c <__mdiff+0x120>)
 800b2c6:	f240 2145 	movw	r1, #581	@ 0x245
 800b2ca:	e7e3      	b.n	800b294 <__mdiff+0x28>
 800b2cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b2d0:	6926      	ldr	r6, [r4, #16]
 800b2d2:	60c5      	str	r5, [r0, #12]
 800b2d4:	f109 0310 	add.w	r3, r9, #16
 800b2d8:	f109 0514 	add.w	r5, r9, #20
 800b2dc:	f104 0e14 	add.w	lr, r4, #20
 800b2e0:	f100 0b14 	add.w	fp, r0, #20
 800b2e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b2e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	46d9      	mov	r9, fp
 800b2f0:	f04f 0c00 	mov.w	ip, #0
 800b2f4:	9b01      	ldr	r3, [sp, #4]
 800b2f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b2fe:	9301      	str	r3, [sp, #4]
 800b300:	fa1f f38a 	uxth.w	r3, sl
 800b304:	4619      	mov	r1, r3
 800b306:	b283      	uxth	r3, r0
 800b308:	1acb      	subs	r3, r1, r3
 800b30a:	0c00      	lsrs	r0, r0, #16
 800b30c:	4463      	add	r3, ip
 800b30e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b312:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b316:	b29b      	uxth	r3, r3
 800b318:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b31c:	4576      	cmp	r6, lr
 800b31e:	f849 3b04 	str.w	r3, [r9], #4
 800b322:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b326:	d8e5      	bhi.n	800b2f4 <__mdiff+0x88>
 800b328:	1b33      	subs	r3, r6, r4
 800b32a:	3b15      	subs	r3, #21
 800b32c:	f023 0303 	bic.w	r3, r3, #3
 800b330:	3415      	adds	r4, #21
 800b332:	3304      	adds	r3, #4
 800b334:	42a6      	cmp	r6, r4
 800b336:	bf38      	it	cc
 800b338:	2304      	movcc	r3, #4
 800b33a:	441d      	add	r5, r3
 800b33c:	445b      	add	r3, fp
 800b33e:	461e      	mov	r6, r3
 800b340:	462c      	mov	r4, r5
 800b342:	4544      	cmp	r4, r8
 800b344:	d30e      	bcc.n	800b364 <__mdiff+0xf8>
 800b346:	f108 0103 	add.w	r1, r8, #3
 800b34a:	1b49      	subs	r1, r1, r5
 800b34c:	f021 0103 	bic.w	r1, r1, #3
 800b350:	3d03      	subs	r5, #3
 800b352:	45a8      	cmp	r8, r5
 800b354:	bf38      	it	cc
 800b356:	2100      	movcc	r1, #0
 800b358:	440b      	add	r3, r1
 800b35a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b35e:	b191      	cbz	r1, 800b386 <__mdiff+0x11a>
 800b360:	6117      	str	r7, [r2, #16]
 800b362:	e79d      	b.n	800b2a0 <__mdiff+0x34>
 800b364:	f854 1b04 	ldr.w	r1, [r4], #4
 800b368:	46e6      	mov	lr, ip
 800b36a:	0c08      	lsrs	r0, r1, #16
 800b36c:	fa1c fc81 	uxtah	ip, ip, r1
 800b370:	4471      	add	r1, lr
 800b372:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b376:	b289      	uxth	r1, r1
 800b378:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b37c:	f846 1b04 	str.w	r1, [r6], #4
 800b380:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b384:	e7dd      	b.n	800b342 <__mdiff+0xd6>
 800b386:	3f01      	subs	r7, #1
 800b388:	e7e7      	b.n	800b35a <__mdiff+0xee>
 800b38a:	bf00      	nop
 800b38c:	0800d7e8 	.word	0x0800d7e8
 800b390:	0800d7f9 	.word	0x0800d7f9

0800b394 <__d2b>:
 800b394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b398:	460f      	mov	r7, r1
 800b39a:	2101      	movs	r1, #1
 800b39c:	ec59 8b10 	vmov	r8, r9, d0
 800b3a0:	4616      	mov	r6, r2
 800b3a2:	f7ff fcd5 	bl	800ad50 <_Balloc>
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	b930      	cbnz	r0, 800b3b8 <__d2b+0x24>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	4b23      	ldr	r3, [pc, #140]	@ (800b43c <__d2b+0xa8>)
 800b3ae:	4824      	ldr	r0, [pc, #144]	@ (800b440 <__d2b+0xac>)
 800b3b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3b4:	f000 fa74 	bl	800b8a0 <__assert_func>
 800b3b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3c0:	b10d      	cbz	r5, 800b3c6 <__d2b+0x32>
 800b3c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	f1b8 0300 	subs.w	r3, r8, #0
 800b3cc:	d023      	beq.n	800b416 <__d2b+0x82>
 800b3ce:	4668      	mov	r0, sp
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	f7ff fd84 	bl	800aede <__lo0bits>
 800b3d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3da:	b1d0      	cbz	r0, 800b412 <__d2b+0x7e>
 800b3dc:	f1c0 0320 	rsb	r3, r0, #32
 800b3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	40c2      	lsrs	r2, r0
 800b3e8:	6163      	str	r3, [r4, #20]
 800b3ea:	9201      	str	r2, [sp, #4]
 800b3ec:	9b01      	ldr	r3, [sp, #4]
 800b3ee:	61a3      	str	r3, [r4, #24]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	bf0c      	ite	eq
 800b3f4:	2201      	moveq	r2, #1
 800b3f6:	2202      	movne	r2, #2
 800b3f8:	6122      	str	r2, [r4, #16]
 800b3fa:	b1a5      	cbz	r5, 800b426 <__d2b+0x92>
 800b3fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b400:	4405      	add	r5, r0
 800b402:	603d      	str	r5, [r7, #0]
 800b404:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b408:	6030      	str	r0, [r6, #0]
 800b40a:	4620      	mov	r0, r4
 800b40c:	b003      	add	sp, #12
 800b40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b412:	6161      	str	r1, [r4, #20]
 800b414:	e7ea      	b.n	800b3ec <__d2b+0x58>
 800b416:	a801      	add	r0, sp, #4
 800b418:	f7ff fd61 	bl	800aede <__lo0bits>
 800b41c:	9b01      	ldr	r3, [sp, #4]
 800b41e:	6163      	str	r3, [r4, #20]
 800b420:	3020      	adds	r0, #32
 800b422:	2201      	movs	r2, #1
 800b424:	e7e8      	b.n	800b3f8 <__d2b+0x64>
 800b426:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b42a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b42e:	6038      	str	r0, [r7, #0]
 800b430:	6918      	ldr	r0, [r3, #16]
 800b432:	f7ff fd35 	bl	800aea0 <__hi0bits>
 800b436:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b43a:	e7e5      	b.n	800b408 <__d2b+0x74>
 800b43c:	0800d7e8 	.word	0x0800d7e8
 800b440:	0800d7f9 	.word	0x0800d7f9

0800b444 <__ssputs_r>:
 800b444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b448:	688e      	ldr	r6, [r1, #8]
 800b44a:	461f      	mov	r7, r3
 800b44c:	42be      	cmp	r6, r7
 800b44e:	680b      	ldr	r3, [r1, #0]
 800b450:	4682      	mov	sl, r0
 800b452:	460c      	mov	r4, r1
 800b454:	4690      	mov	r8, r2
 800b456:	d82d      	bhi.n	800b4b4 <__ssputs_r+0x70>
 800b458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b45c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b460:	d026      	beq.n	800b4b0 <__ssputs_r+0x6c>
 800b462:	6965      	ldr	r5, [r4, #20]
 800b464:	6909      	ldr	r1, [r1, #16]
 800b466:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b46a:	eba3 0901 	sub.w	r9, r3, r1
 800b46e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b472:	1c7b      	adds	r3, r7, #1
 800b474:	444b      	add	r3, r9
 800b476:	106d      	asrs	r5, r5, #1
 800b478:	429d      	cmp	r5, r3
 800b47a:	bf38      	it	cc
 800b47c:	461d      	movcc	r5, r3
 800b47e:	0553      	lsls	r3, r2, #21
 800b480:	d527      	bpl.n	800b4d2 <__ssputs_r+0x8e>
 800b482:	4629      	mov	r1, r5
 800b484:	f7ff fbd8 	bl	800ac38 <_malloc_r>
 800b488:	4606      	mov	r6, r0
 800b48a:	b360      	cbz	r0, 800b4e6 <__ssputs_r+0xa2>
 800b48c:	6921      	ldr	r1, [r4, #16]
 800b48e:	464a      	mov	r2, r9
 800b490:	f7fe fcf5 	bl	8009e7e <memcpy>
 800b494:	89a3      	ldrh	r3, [r4, #12]
 800b496:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b49a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b49e:	81a3      	strh	r3, [r4, #12]
 800b4a0:	6126      	str	r6, [r4, #16]
 800b4a2:	6165      	str	r5, [r4, #20]
 800b4a4:	444e      	add	r6, r9
 800b4a6:	eba5 0509 	sub.w	r5, r5, r9
 800b4aa:	6026      	str	r6, [r4, #0]
 800b4ac:	60a5      	str	r5, [r4, #8]
 800b4ae:	463e      	mov	r6, r7
 800b4b0:	42be      	cmp	r6, r7
 800b4b2:	d900      	bls.n	800b4b6 <__ssputs_r+0x72>
 800b4b4:	463e      	mov	r6, r7
 800b4b6:	6820      	ldr	r0, [r4, #0]
 800b4b8:	4632      	mov	r2, r6
 800b4ba:	4641      	mov	r1, r8
 800b4bc:	f000 f9c6 	bl	800b84c <memmove>
 800b4c0:	68a3      	ldr	r3, [r4, #8]
 800b4c2:	1b9b      	subs	r3, r3, r6
 800b4c4:	60a3      	str	r3, [r4, #8]
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	4433      	add	r3, r6
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	f000 fa28 	bl	800b928 <_realloc_r>
 800b4d8:	4606      	mov	r6, r0
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d1e0      	bne.n	800b4a0 <__ssputs_r+0x5c>
 800b4de:	6921      	ldr	r1, [r4, #16]
 800b4e0:	4650      	mov	r0, sl
 800b4e2:	f7ff fb35 	bl	800ab50 <_free_r>
 800b4e6:	230c      	movs	r3, #12
 800b4e8:	f8ca 3000 	str.w	r3, [sl]
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4f2:	81a3      	strh	r3, [r4, #12]
 800b4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f8:	e7e9      	b.n	800b4ce <__ssputs_r+0x8a>
	...

0800b4fc <_svfiprintf_r>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	4698      	mov	r8, r3
 800b502:	898b      	ldrh	r3, [r1, #12]
 800b504:	061b      	lsls	r3, r3, #24
 800b506:	b09d      	sub	sp, #116	@ 0x74
 800b508:	4607      	mov	r7, r0
 800b50a:	460d      	mov	r5, r1
 800b50c:	4614      	mov	r4, r2
 800b50e:	d510      	bpl.n	800b532 <_svfiprintf_r+0x36>
 800b510:	690b      	ldr	r3, [r1, #16]
 800b512:	b973      	cbnz	r3, 800b532 <_svfiprintf_r+0x36>
 800b514:	2140      	movs	r1, #64	@ 0x40
 800b516:	f7ff fb8f 	bl	800ac38 <_malloc_r>
 800b51a:	6028      	str	r0, [r5, #0]
 800b51c:	6128      	str	r0, [r5, #16]
 800b51e:	b930      	cbnz	r0, 800b52e <_svfiprintf_r+0x32>
 800b520:	230c      	movs	r3, #12
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	b01d      	add	sp, #116	@ 0x74
 800b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52e:	2340      	movs	r3, #64	@ 0x40
 800b530:	616b      	str	r3, [r5, #20]
 800b532:	2300      	movs	r3, #0
 800b534:	9309      	str	r3, [sp, #36]	@ 0x24
 800b536:	2320      	movs	r3, #32
 800b538:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b53c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b540:	2330      	movs	r3, #48	@ 0x30
 800b542:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b6e0 <_svfiprintf_r+0x1e4>
 800b546:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b54a:	f04f 0901 	mov.w	r9, #1
 800b54e:	4623      	mov	r3, r4
 800b550:	469a      	mov	sl, r3
 800b552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b556:	b10a      	cbz	r2, 800b55c <_svfiprintf_r+0x60>
 800b558:	2a25      	cmp	r2, #37	@ 0x25
 800b55a:	d1f9      	bne.n	800b550 <_svfiprintf_r+0x54>
 800b55c:	ebba 0b04 	subs.w	fp, sl, r4
 800b560:	d00b      	beq.n	800b57a <_svfiprintf_r+0x7e>
 800b562:	465b      	mov	r3, fp
 800b564:	4622      	mov	r2, r4
 800b566:	4629      	mov	r1, r5
 800b568:	4638      	mov	r0, r7
 800b56a:	f7ff ff6b 	bl	800b444 <__ssputs_r>
 800b56e:	3001      	adds	r0, #1
 800b570:	f000 80a7 	beq.w	800b6c2 <_svfiprintf_r+0x1c6>
 800b574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b576:	445a      	add	r2, fp
 800b578:	9209      	str	r2, [sp, #36]	@ 0x24
 800b57a:	f89a 3000 	ldrb.w	r3, [sl]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 809f 	beq.w	800b6c2 <_svfiprintf_r+0x1c6>
 800b584:	2300      	movs	r3, #0
 800b586:	f04f 32ff 	mov.w	r2, #4294967295
 800b58a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b58e:	f10a 0a01 	add.w	sl, sl, #1
 800b592:	9304      	str	r3, [sp, #16]
 800b594:	9307      	str	r3, [sp, #28]
 800b596:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b59a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b59c:	4654      	mov	r4, sl
 800b59e:	2205      	movs	r2, #5
 800b5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a4:	484e      	ldr	r0, [pc, #312]	@ (800b6e0 <_svfiprintf_r+0x1e4>)
 800b5a6:	f7f4 fe33 	bl	8000210 <memchr>
 800b5aa:	9a04      	ldr	r2, [sp, #16]
 800b5ac:	b9d8      	cbnz	r0, 800b5e6 <_svfiprintf_r+0xea>
 800b5ae:	06d0      	lsls	r0, r2, #27
 800b5b0:	bf44      	itt	mi
 800b5b2:	2320      	movmi	r3, #32
 800b5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5b8:	0711      	lsls	r1, r2, #28
 800b5ba:	bf44      	itt	mi
 800b5bc:	232b      	movmi	r3, #43	@ 0x2b
 800b5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5c8:	d015      	beq.n	800b5f6 <_svfiprintf_r+0xfa>
 800b5ca:	9a07      	ldr	r2, [sp, #28]
 800b5cc:	4654      	mov	r4, sl
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	f04f 0c0a 	mov.w	ip, #10
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5da:	3b30      	subs	r3, #48	@ 0x30
 800b5dc:	2b09      	cmp	r3, #9
 800b5de:	d94b      	bls.n	800b678 <_svfiprintf_r+0x17c>
 800b5e0:	b1b0      	cbz	r0, 800b610 <_svfiprintf_r+0x114>
 800b5e2:	9207      	str	r2, [sp, #28]
 800b5e4:	e014      	b.n	800b610 <_svfiprintf_r+0x114>
 800b5e6:	eba0 0308 	sub.w	r3, r0, r8
 800b5ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	46a2      	mov	sl, r4
 800b5f4:	e7d2      	b.n	800b59c <_svfiprintf_r+0xa0>
 800b5f6:	9b03      	ldr	r3, [sp, #12]
 800b5f8:	1d19      	adds	r1, r3, #4
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	9103      	str	r1, [sp, #12]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	bfbb      	ittet	lt
 800b602:	425b      	neglt	r3, r3
 800b604:	f042 0202 	orrlt.w	r2, r2, #2
 800b608:	9307      	strge	r3, [sp, #28]
 800b60a:	9307      	strlt	r3, [sp, #28]
 800b60c:	bfb8      	it	lt
 800b60e:	9204      	strlt	r2, [sp, #16]
 800b610:	7823      	ldrb	r3, [r4, #0]
 800b612:	2b2e      	cmp	r3, #46	@ 0x2e
 800b614:	d10a      	bne.n	800b62c <_svfiprintf_r+0x130>
 800b616:	7863      	ldrb	r3, [r4, #1]
 800b618:	2b2a      	cmp	r3, #42	@ 0x2a
 800b61a:	d132      	bne.n	800b682 <_svfiprintf_r+0x186>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	1d1a      	adds	r2, r3, #4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	9203      	str	r2, [sp, #12]
 800b624:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b628:	3402      	adds	r4, #2
 800b62a:	9305      	str	r3, [sp, #20]
 800b62c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b6f0 <_svfiprintf_r+0x1f4>
 800b630:	7821      	ldrb	r1, [r4, #0]
 800b632:	2203      	movs	r2, #3
 800b634:	4650      	mov	r0, sl
 800b636:	f7f4 fdeb 	bl	8000210 <memchr>
 800b63a:	b138      	cbz	r0, 800b64c <_svfiprintf_r+0x150>
 800b63c:	9b04      	ldr	r3, [sp, #16]
 800b63e:	eba0 000a 	sub.w	r0, r0, sl
 800b642:	2240      	movs	r2, #64	@ 0x40
 800b644:	4082      	lsls	r2, r0
 800b646:	4313      	orrs	r3, r2
 800b648:	3401      	adds	r4, #1
 800b64a:	9304      	str	r3, [sp, #16]
 800b64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b650:	4824      	ldr	r0, [pc, #144]	@ (800b6e4 <_svfiprintf_r+0x1e8>)
 800b652:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b656:	2206      	movs	r2, #6
 800b658:	f7f4 fdda 	bl	8000210 <memchr>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d036      	beq.n	800b6ce <_svfiprintf_r+0x1d2>
 800b660:	4b21      	ldr	r3, [pc, #132]	@ (800b6e8 <_svfiprintf_r+0x1ec>)
 800b662:	bb1b      	cbnz	r3, 800b6ac <_svfiprintf_r+0x1b0>
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	3307      	adds	r3, #7
 800b668:	f023 0307 	bic.w	r3, r3, #7
 800b66c:	3308      	adds	r3, #8
 800b66e:	9303      	str	r3, [sp, #12]
 800b670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b672:	4433      	add	r3, r6
 800b674:	9309      	str	r3, [sp, #36]	@ 0x24
 800b676:	e76a      	b.n	800b54e <_svfiprintf_r+0x52>
 800b678:	fb0c 3202 	mla	r2, ip, r2, r3
 800b67c:	460c      	mov	r4, r1
 800b67e:	2001      	movs	r0, #1
 800b680:	e7a8      	b.n	800b5d4 <_svfiprintf_r+0xd8>
 800b682:	2300      	movs	r3, #0
 800b684:	3401      	adds	r4, #1
 800b686:	9305      	str	r3, [sp, #20]
 800b688:	4619      	mov	r1, r3
 800b68a:	f04f 0c0a 	mov.w	ip, #10
 800b68e:	4620      	mov	r0, r4
 800b690:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b694:	3a30      	subs	r2, #48	@ 0x30
 800b696:	2a09      	cmp	r2, #9
 800b698:	d903      	bls.n	800b6a2 <_svfiprintf_r+0x1a6>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0c6      	beq.n	800b62c <_svfiprintf_r+0x130>
 800b69e:	9105      	str	r1, [sp, #20]
 800b6a0:	e7c4      	b.n	800b62c <_svfiprintf_r+0x130>
 800b6a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e7f0      	b.n	800b68e <_svfiprintf_r+0x192>
 800b6ac:	ab03      	add	r3, sp, #12
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	462a      	mov	r2, r5
 800b6b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b6ec <_svfiprintf_r+0x1f0>)
 800b6b4:	a904      	add	r1, sp, #16
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	f7fd fe12 	bl	80092e0 <_printf_float>
 800b6bc:	1c42      	adds	r2, r0, #1
 800b6be:	4606      	mov	r6, r0
 800b6c0:	d1d6      	bne.n	800b670 <_svfiprintf_r+0x174>
 800b6c2:	89ab      	ldrh	r3, [r5, #12]
 800b6c4:	065b      	lsls	r3, r3, #25
 800b6c6:	f53f af2d 	bmi.w	800b524 <_svfiprintf_r+0x28>
 800b6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6cc:	e72c      	b.n	800b528 <_svfiprintf_r+0x2c>
 800b6ce:	ab03      	add	r3, sp, #12
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	462a      	mov	r2, r5
 800b6d4:	4b05      	ldr	r3, [pc, #20]	@ (800b6ec <_svfiprintf_r+0x1f0>)
 800b6d6:	a904      	add	r1, sp, #16
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7fe f899 	bl	8009810 <_printf_i>
 800b6de:	e7ed      	b.n	800b6bc <_svfiprintf_r+0x1c0>
 800b6e0:	0800d852 	.word	0x0800d852
 800b6e4:	0800d85c 	.word	0x0800d85c
 800b6e8:	080092e1 	.word	0x080092e1
 800b6ec:	0800b445 	.word	0x0800b445
 800b6f0:	0800d858 	.word	0x0800d858

0800b6f4 <__sflush_r>:
 800b6f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fc:	0716      	lsls	r6, r2, #28
 800b6fe:	4605      	mov	r5, r0
 800b700:	460c      	mov	r4, r1
 800b702:	d454      	bmi.n	800b7ae <__sflush_r+0xba>
 800b704:	684b      	ldr	r3, [r1, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	dc02      	bgt.n	800b710 <__sflush_r+0x1c>
 800b70a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dd48      	ble.n	800b7a2 <__sflush_r+0xae>
 800b710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b712:	2e00      	cmp	r6, #0
 800b714:	d045      	beq.n	800b7a2 <__sflush_r+0xae>
 800b716:	2300      	movs	r3, #0
 800b718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b71c:	682f      	ldr	r7, [r5, #0]
 800b71e:	6a21      	ldr	r1, [r4, #32]
 800b720:	602b      	str	r3, [r5, #0]
 800b722:	d030      	beq.n	800b786 <__sflush_r+0x92>
 800b724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	0759      	lsls	r1, r3, #29
 800b72a:	d505      	bpl.n	800b738 <__sflush_r+0x44>
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b732:	b10b      	cbz	r3, 800b738 <__sflush_r+0x44>
 800b734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	2300      	movs	r3, #0
 800b73a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b73c:	6a21      	ldr	r1, [r4, #32]
 800b73e:	4628      	mov	r0, r5
 800b740:	47b0      	blx	r6
 800b742:	1c43      	adds	r3, r0, #1
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	d106      	bne.n	800b756 <__sflush_r+0x62>
 800b748:	6829      	ldr	r1, [r5, #0]
 800b74a:	291d      	cmp	r1, #29
 800b74c:	d82b      	bhi.n	800b7a6 <__sflush_r+0xb2>
 800b74e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7f8 <__sflush_r+0x104>)
 800b750:	40ca      	lsrs	r2, r1
 800b752:	07d6      	lsls	r6, r2, #31
 800b754:	d527      	bpl.n	800b7a6 <__sflush_r+0xb2>
 800b756:	2200      	movs	r2, #0
 800b758:	6062      	str	r2, [r4, #4]
 800b75a:	04d9      	lsls	r1, r3, #19
 800b75c:	6922      	ldr	r2, [r4, #16]
 800b75e:	6022      	str	r2, [r4, #0]
 800b760:	d504      	bpl.n	800b76c <__sflush_r+0x78>
 800b762:	1c42      	adds	r2, r0, #1
 800b764:	d101      	bne.n	800b76a <__sflush_r+0x76>
 800b766:	682b      	ldr	r3, [r5, #0]
 800b768:	b903      	cbnz	r3, 800b76c <__sflush_r+0x78>
 800b76a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b76c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b76e:	602f      	str	r7, [r5, #0]
 800b770:	b1b9      	cbz	r1, 800b7a2 <__sflush_r+0xae>
 800b772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b776:	4299      	cmp	r1, r3
 800b778:	d002      	beq.n	800b780 <__sflush_r+0x8c>
 800b77a:	4628      	mov	r0, r5
 800b77c:	f7ff f9e8 	bl	800ab50 <_free_r>
 800b780:	2300      	movs	r3, #0
 800b782:	6363      	str	r3, [r4, #52]	@ 0x34
 800b784:	e00d      	b.n	800b7a2 <__sflush_r+0xae>
 800b786:	2301      	movs	r3, #1
 800b788:	4628      	mov	r0, r5
 800b78a:	47b0      	blx	r6
 800b78c:	4602      	mov	r2, r0
 800b78e:	1c50      	adds	r0, r2, #1
 800b790:	d1c9      	bne.n	800b726 <__sflush_r+0x32>
 800b792:	682b      	ldr	r3, [r5, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0c6      	beq.n	800b726 <__sflush_r+0x32>
 800b798:	2b1d      	cmp	r3, #29
 800b79a:	d001      	beq.n	800b7a0 <__sflush_r+0xac>
 800b79c:	2b16      	cmp	r3, #22
 800b79e:	d11e      	bne.n	800b7de <__sflush_r+0xea>
 800b7a0:	602f      	str	r7, [r5, #0]
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e022      	b.n	800b7ec <__sflush_r+0xf8>
 800b7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7aa:	b21b      	sxth	r3, r3
 800b7ac:	e01b      	b.n	800b7e6 <__sflush_r+0xf2>
 800b7ae:	690f      	ldr	r7, [r1, #16]
 800b7b0:	2f00      	cmp	r7, #0
 800b7b2:	d0f6      	beq.n	800b7a2 <__sflush_r+0xae>
 800b7b4:	0793      	lsls	r3, r2, #30
 800b7b6:	680e      	ldr	r6, [r1, #0]
 800b7b8:	bf08      	it	eq
 800b7ba:	694b      	ldreq	r3, [r1, #20]
 800b7bc:	600f      	str	r7, [r1, #0]
 800b7be:	bf18      	it	ne
 800b7c0:	2300      	movne	r3, #0
 800b7c2:	eba6 0807 	sub.w	r8, r6, r7
 800b7c6:	608b      	str	r3, [r1, #8]
 800b7c8:	f1b8 0f00 	cmp.w	r8, #0
 800b7cc:	dde9      	ble.n	800b7a2 <__sflush_r+0xae>
 800b7ce:	6a21      	ldr	r1, [r4, #32]
 800b7d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7d2:	4643      	mov	r3, r8
 800b7d4:	463a      	mov	r2, r7
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	47b0      	blx	r6
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	dc08      	bgt.n	800b7f0 <__sflush_r+0xfc>
 800b7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7e6:	81a3      	strh	r3, [r4, #12]
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	4407      	add	r7, r0
 800b7f2:	eba8 0800 	sub.w	r8, r8, r0
 800b7f6:	e7e7      	b.n	800b7c8 <__sflush_r+0xd4>
 800b7f8:	20400001 	.word	0x20400001

0800b7fc <_fflush_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	690b      	ldr	r3, [r1, #16]
 800b800:	4605      	mov	r5, r0
 800b802:	460c      	mov	r4, r1
 800b804:	b913      	cbnz	r3, 800b80c <_fflush_r+0x10>
 800b806:	2500      	movs	r5, #0
 800b808:	4628      	mov	r0, r5
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	b118      	cbz	r0, 800b816 <_fflush_r+0x1a>
 800b80e:	6a03      	ldr	r3, [r0, #32]
 800b810:	b90b      	cbnz	r3, 800b816 <_fflush_r+0x1a>
 800b812:	f7fe f9a7 	bl	8009b64 <__sinit>
 800b816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0f3      	beq.n	800b806 <_fflush_r+0xa>
 800b81e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b820:	07d0      	lsls	r0, r2, #31
 800b822:	d404      	bmi.n	800b82e <_fflush_r+0x32>
 800b824:	0599      	lsls	r1, r3, #22
 800b826:	d402      	bmi.n	800b82e <_fflush_r+0x32>
 800b828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b82a:	f7fe fb26 	bl	8009e7a <__retarget_lock_acquire_recursive>
 800b82e:	4628      	mov	r0, r5
 800b830:	4621      	mov	r1, r4
 800b832:	f7ff ff5f 	bl	800b6f4 <__sflush_r>
 800b836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b838:	07da      	lsls	r2, r3, #31
 800b83a:	4605      	mov	r5, r0
 800b83c:	d4e4      	bmi.n	800b808 <_fflush_r+0xc>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	059b      	lsls	r3, r3, #22
 800b842:	d4e1      	bmi.n	800b808 <_fflush_r+0xc>
 800b844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b846:	f7fe fb19 	bl	8009e7c <__retarget_lock_release_recursive>
 800b84a:	e7dd      	b.n	800b808 <_fflush_r+0xc>

0800b84c <memmove>:
 800b84c:	4288      	cmp	r0, r1
 800b84e:	b510      	push	{r4, lr}
 800b850:	eb01 0402 	add.w	r4, r1, r2
 800b854:	d902      	bls.n	800b85c <memmove+0x10>
 800b856:	4284      	cmp	r4, r0
 800b858:	4623      	mov	r3, r4
 800b85a:	d807      	bhi.n	800b86c <memmove+0x20>
 800b85c:	1e43      	subs	r3, r0, #1
 800b85e:	42a1      	cmp	r1, r4
 800b860:	d008      	beq.n	800b874 <memmove+0x28>
 800b862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b86a:	e7f8      	b.n	800b85e <memmove+0x12>
 800b86c:	4402      	add	r2, r0
 800b86e:	4601      	mov	r1, r0
 800b870:	428a      	cmp	r2, r1
 800b872:	d100      	bne.n	800b876 <memmove+0x2a>
 800b874:	bd10      	pop	{r4, pc}
 800b876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b87e:	e7f7      	b.n	800b870 <memmove+0x24>

0800b880 <_sbrk_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d06      	ldr	r5, [pc, #24]	@ (800b89c <_sbrk_r+0x1c>)
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	602b      	str	r3, [r5, #0]
 800b88c:	f7f9 fb40 	bl	8004f10 <_sbrk>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_sbrk_r+0x1a>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b103      	cbz	r3, 800b89a <_sbrk_r+0x1a>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	20000ebc 	.word	0x20000ebc

0800b8a0 <__assert_func>:
 800b8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8a2:	4614      	mov	r4, r2
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4b09      	ldr	r3, [pc, #36]	@ (800b8cc <__assert_func+0x2c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	68d8      	ldr	r0, [r3, #12]
 800b8ae:	b14c      	cbz	r4, 800b8c4 <__assert_func+0x24>
 800b8b0:	4b07      	ldr	r3, [pc, #28]	@ (800b8d0 <__assert_func+0x30>)
 800b8b2:	9100      	str	r1, [sp, #0]
 800b8b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8b8:	4906      	ldr	r1, [pc, #24]	@ (800b8d4 <__assert_func+0x34>)
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	f000 f870 	bl	800b9a0 <fiprintf>
 800b8c0:	f000 f880 	bl	800b9c4 <abort>
 800b8c4:	4b04      	ldr	r3, [pc, #16]	@ (800b8d8 <__assert_func+0x38>)
 800b8c6:	461c      	mov	r4, r3
 800b8c8:	e7f3      	b.n	800b8b2 <__assert_func+0x12>
 800b8ca:	bf00      	nop
 800b8cc:	20000018 	.word	0x20000018
 800b8d0:	0800d86d 	.word	0x0800d86d
 800b8d4:	0800d87a 	.word	0x0800d87a
 800b8d8:	0800d8a8 	.word	0x0800d8a8

0800b8dc <_calloc_r>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	fba1 5402 	umull	r5, r4, r1, r2
 800b8e2:	b934      	cbnz	r4, 800b8f2 <_calloc_r+0x16>
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f7ff f9a7 	bl	800ac38 <_malloc_r>
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	b928      	cbnz	r0, 800b8fa <_calloc_r+0x1e>
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	bd70      	pop	{r4, r5, r6, pc}
 800b8f2:	220c      	movs	r2, #12
 800b8f4:	6002      	str	r2, [r0, #0]
 800b8f6:	2600      	movs	r6, #0
 800b8f8:	e7f9      	b.n	800b8ee <_calloc_r+0x12>
 800b8fa:	462a      	mov	r2, r5
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	f7fe fa3f 	bl	8009d80 <memset>
 800b902:	e7f4      	b.n	800b8ee <_calloc_r+0x12>

0800b904 <__ascii_mbtowc>:
 800b904:	b082      	sub	sp, #8
 800b906:	b901      	cbnz	r1, 800b90a <__ascii_mbtowc+0x6>
 800b908:	a901      	add	r1, sp, #4
 800b90a:	b142      	cbz	r2, 800b91e <__ascii_mbtowc+0x1a>
 800b90c:	b14b      	cbz	r3, 800b922 <__ascii_mbtowc+0x1e>
 800b90e:	7813      	ldrb	r3, [r2, #0]
 800b910:	600b      	str	r3, [r1, #0]
 800b912:	7812      	ldrb	r2, [r2, #0]
 800b914:	1e10      	subs	r0, r2, #0
 800b916:	bf18      	it	ne
 800b918:	2001      	movne	r0, #1
 800b91a:	b002      	add	sp, #8
 800b91c:	4770      	bx	lr
 800b91e:	4610      	mov	r0, r2
 800b920:	e7fb      	b.n	800b91a <__ascii_mbtowc+0x16>
 800b922:	f06f 0001 	mvn.w	r0, #1
 800b926:	e7f8      	b.n	800b91a <__ascii_mbtowc+0x16>

0800b928 <_realloc_r>:
 800b928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b92c:	4607      	mov	r7, r0
 800b92e:	4614      	mov	r4, r2
 800b930:	460d      	mov	r5, r1
 800b932:	b921      	cbnz	r1, 800b93e <_realloc_r+0x16>
 800b934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b938:	4611      	mov	r1, r2
 800b93a:	f7ff b97d 	b.w	800ac38 <_malloc_r>
 800b93e:	b92a      	cbnz	r2, 800b94c <_realloc_r+0x24>
 800b940:	f7ff f906 	bl	800ab50 <_free_r>
 800b944:	4625      	mov	r5, r4
 800b946:	4628      	mov	r0, r5
 800b948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94c:	f000 f841 	bl	800b9d2 <_malloc_usable_size_r>
 800b950:	4284      	cmp	r4, r0
 800b952:	4606      	mov	r6, r0
 800b954:	d802      	bhi.n	800b95c <_realloc_r+0x34>
 800b956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b95a:	d8f4      	bhi.n	800b946 <_realloc_r+0x1e>
 800b95c:	4621      	mov	r1, r4
 800b95e:	4638      	mov	r0, r7
 800b960:	f7ff f96a 	bl	800ac38 <_malloc_r>
 800b964:	4680      	mov	r8, r0
 800b966:	b908      	cbnz	r0, 800b96c <_realloc_r+0x44>
 800b968:	4645      	mov	r5, r8
 800b96a:	e7ec      	b.n	800b946 <_realloc_r+0x1e>
 800b96c:	42b4      	cmp	r4, r6
 800b96e:	4622      	mov	r2, r4
 800b970:	4629      	mov	r1, r5
 800b972:	bf28      	it	cs
 800b974:	4632      	movcs	r2, r6
 800b976:	f7fe fa82 	bl	8009e7e <memcpy>
 800b97a:	4629      	mov	r1, r5
 800b97c:	4638      	mov	r0, r7
 800b97e:	f7ff f8e7 	bl	800ab50 <_free_r>
 800b982:	e7f1      	b.n	800b968 <_realloc_r+0x40>

0800b984 <__ascii_wctomb>:
 800b984:	4603      	mov	r3, r0
 800b986:	4608      	mov	r0, r1
 800b988:	b141      	cbz	r1, 800b99c <__ascii_wctomb+0x18>
 800b98a:	2aff      	cmp	r2, #255	@ 0xff
 800b98c:	d904      	bls.n	800b998 <__ascii_wctomb+0x14>
 800b98e:	228a      	movs	r2, #138	@ 0x8a
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	f04f 30ff 	mov.w	r0, #4294967295
 800b996:	4770      	bx	lr
 800b998:	700a      	strb	r2, [r1, #0]
 800b99a:	2001      	movs	r0, #1
 800b99c:	4770      	bx	lr
	...

0800b9a0 <fiprintf>:
 800b9a0:	b40e      	push	{r1, r2, r3}
 800b9a2:	b503      	push	{r0, r1, lr}
 800b9a4:	4601      	mov	r1, r0
 800b9a6:	ab03      	add	r3, sp, #12
 800b9a8:	4805      	ldr	r0, [pc, #20]	@ (800b9c0 <fiprintf+0x20>)
 800b9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ae:	6800      	ldr	r0, [r0, #0]
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	f000 f83f 	bl	800ba34 <_vfiprintf_r>
 800b9b6:	b002      	add	sp, #8
 800b9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9bc:	b003      	add	sp, #12
 800b9be:	4770      	bx	lr
 800b9c0:	20000018 	.word	0x20000018

0800b9c4 <abort>:
 800b9c4:	b508      	push	{r3, lr}
 800b9c6:	2006      	movs	r0, #6
 800b9c8:	f000 fa08 	bl	800bddc <raise>
 800b9cc:	2001      	movs	r0, #1
 800b9ce:	f7f9 fa26 	bl	8004e1e <_exit>

0800b9d2 <_malloc_usable_size_r>:
 800b9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d6:	1f18      	subs	r0, r3, #4
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	bfbc      	itt	lt
 800b9dc:	580b      	ldrlt	r3, [r1, r0]
 800b9de:	18c0      	addlt	r0, r0, r3
 800b9e0:	4770      	bx	lr

0800b9e2 <__sfputc_r>:
 800b9e2:	6893      	ldr	r3, [r2, #8]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	b410      	push	{r4}
 800b9ea:	6093      	str	r3, [r2, #8]
 800b9ec:	da08      	bge.n	800ba00 <__sfputc_r+0x1e>
 800b9ee:	6994      	ldr	r4, [r2, #24]
 800b9f0:	42a3      	cmp	r3, r4
 800b9f2:	db01      	blt.n	800b9f8 <__sfputc_r+0x16>
 800b9f4:	290a      	cmp	r1, #10
 800b9f6:	d103      	bne.n	800ba00 <__sfputc_r+0x1e>
 800b9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9fc:	f000 b932 	b.w	800bc64 <__swbuf_r>
 800ba00:	6813      	ldr	r3, [r2, #0]
 800ba02:	1c58      	adds	r0, r3, #1
 800ba04:	6010      	str	r0, [r2, #0]
 800ba06:	7019      	strb	r1, [r3, #0]
 800ba08:	4608      	mov	r0, r1
 800ba0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <__sfputs_r>:
 800ba10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	4614      	mov	r4, r2
 800ba18:	18d5      	adds	r5, r2, r3
 800ba1a:	42ac      	cmp	r4, r5
 800ba1c:	d101      	bne.n	800ba22 <__sfputs_r+0x12>
 800ba1e:	2000      	movs	r0, #0
 800ba20:	e007      	b.n	800ba32 <__sfputs_r+0x22>
 800ba22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba26:	463a      	mov	r2, r7
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7ff ffda 	bl	800b9e2 <__sfputc_r>
 800ba2e:	1c43      	adds	r3, r0, #1
 800ba30:	d1f3      	bne.n	800ba1a <__sfputs_r+0xa>
 800ba32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba34 <_vfiprintf_r>:
 800ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	460d      	mov	r5, r1
 800ba3a:	b09d      	sub	sp, #116	@ 0x74
 800ba3c:	4614      	mov	r4, r2
 800ba3e:	4698      	mov	r8, r3
 800ba40:	4606      	mov	r6, r0
 800ba42:	b118      	cbz	r0, 800ba4c <_vfiprintf_r+0x18>
 800ba44:	6a03      	ldr	r3, [r0, #32]
 800ba46:	b90b      	cbnz	r3, 800ba4c <_vfiprintf_r+0x18>
 800ba48:	f7fe f88c 	bl	8009b64 <__sinit>
 800ba4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba4e:	07d9      	lsls	r1, r3, #31
 800ba50:	d405      	bmi.n	800ba5e <_vfiprintf_r+0x2a>
 800ba52:	89ab      	ldrh	r3, [r5, #12]
 800ba54:	059a      	lsls	r2, r3, #22
 800ba56:	d402      	bmi.n	800ba5e <_vfiprintf_r+0x2a>
 800ba58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba5a:	f7fe fa0e 	bl	8009e7a <__retarget_lock_acquire_recursive>
 800ba5e:	89ab      	ldrh	r3, [r5, #12]
 800ba60:	071b      	lsls	r3, r3, #28
 800ba62:	d501      	bpl.n	800ba68 <_vfiprintf_r+0x34>
 800ba64:	692b      	ldr	r3, [r5, #16]
 800ba66:	b99b      	cbnz	r3, 800ba90 <_vfiprintf_r+0x5c>
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f000 f938 	bl	800bce0 <__swsetup_r>
 800ba70:	b170      	cbz	r0, 800ba90 <_vfiprintf_r+0x5c>
 800ba72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba74:	07dc      	lsls	r4, r3, #31
 800ba76:	d504      	bpl.n	800ba82 <_vfiprintf_r+0x4e>
 800ba78:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7c:	b01d      	add	sp, #116	@ 0x74
 800ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba82:	89ab      	ldrh	r3, [r5, #12]
 800ba84:	0598      	lsls	r0, r3, #22
 800ba86:	d4f7      	bmi.n	800ba78 <_vfiprintf_r+0x44>
 800ba88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba8a:	f7fe f9f7 	bl	8009e7c <__retarget_lock_release_recursive>
 800ba8e:	e7f3      	b.n	800ba78 <_vfiprintf_r+0x44>
 800ba90:	2300      	movs	r3, #0
 800ba92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba94:	2320      	movs	r3, #32
 800ba96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba9e:	2330      	movs	r3, #48	@ 0x30
 800baa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc50 <_vfiprintf_r+0x21c>
 800baa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baa8:	f04f 0901 	mov.w	r9, #1
 800baac:	4623      	mov	r3, r4
 800baae:	469a      	mov	sl, r3
 800bab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bab4:	b10a      	cbz	r2, 800baba <_vfiprintf_r+0x86>
 800bab6:	2a25      	cmp	r2, #37	@ 0x25
 800bab8:	d1f9      	bne.n	800baae <_vfiprintf_r+0x7a>
 800baba:	ebba 0b04 	subs.w	fp, sl, r4
 800babe:	d00b      	beq.n	800bad8 <_vfiprintf_r+0xa4>
 800bac0:	465b      	mov	r3, fp
 800bac2:	4622      	mov	r2, r4
 800bac4:	4629      	mov	r1, r5
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7ff ffa2 	bl	800ba10 <__sfputs_r>
 800bacc:	3001      	adds	r0, #1
 800bace:	f000 80a7 	beq.w	800bc20 <_vfiprintf_r+0x1ec>
 800bad2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bad4:	445a      	add	r2, fp
 800bad6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bad8:	f89a 3000 	ldrb.w	r3, [sl]
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 809f 	beq.w	800bc20 <_vfiprintf_r+0x1ec>
 800bae2:	2300      	movs	r3, #0
 800bae4:	f04f 32ff 	mov.w	r2, #4294967295
 800bae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baec:	f10a 0a01 	add.w	sl, sl, #1
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	9307      	str	r3, [sp, #28]
 800baf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800baf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bafa:	4654      	mov	r4, sl
 800bafc:	2205      	movs	r2, #5
 800bafe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb02:	4853      	ldr	r0, [pc, #332]	@ (800bc50 <_vfiprintf_r+0x21c>)
 800bb04:	f7f4 fb84 	bl	8000210 <memchr>
 800bb08:	9a04      	ldr	r2, [sp, #16]
 800bb0a:	b9d8      	cbnz	r0, 800bb44 <_vfiprintf_r+0x110>
 800bb0c:	06d1      	lsls	r1, r2, #27
 800bb0e:	bf44      	itt	mi
 800bb10:	2320      	movmi	r3, #32
 800bb12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb16:	0713      	lsls	r3, r2, #28
 800bb18:	bf44      	itt	mi
 800bb1a:	232b      	movmi	r3, #43	@ 0x2b
 800bb1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb20:	f89a 3000 	ldrb.w	r3, [sl]
 800bb24:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb26:	d015      	beq.n	800bb54 <_vfiprintf_r+0x120>
 800bb28:	9a07      	ldr	r2, [sp, #28]
 800bb2a:	4654      	mov	r4, sl
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	f04f 0c0a 	mov.w	ip, #10
 800bb32:	4621      	mov	r1, r4
 800bb34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb38:	3b30      	subs	r3, #48	@ 0x30
 800bb3a:	2b09      	cmp	r3, #9
 800bb3c:	d94b      	bls.n	800bbd6 <_vfiprintf_r+0x1a2>
 800bb3e:	b1b0      	cbz	r0, 800bb6e <_vfiprintf_r+0x13a>
 800bb40:	9207      	str	r2, [sp, #28]
 800bb42:	e014      	b.n	800bb6e <_vfiprintf_r+0x13a>
 800bb44:	eba0 0308 	sub.w	r3, r0, r8
 800bb48:	fa09 f303 	lsl.w	r3, r9, r3
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	9304      	str	r3, [sp, #16]
 800bb50:	46a2      	mov	sl, r4
 800bb52:	e7d2      	b.n	800bafa <_vfiprintf_r+0xc6>
 800bb54:	9b03      	ldr	r3, [sp, #12]
 800bb56:	1d19      	adds	r1, r3, #4
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	9103      	str	r1, [sp, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	bfbb      	ittet	lt
 800bb60:	425b      	neglt	r3, r3
 800bb62:	f042 0202 	orrlt.w	r2, r2, #2
 800bb66:	9307      	strge	r3, [sp, #28]
 800bb68:	9307      	strlt	r3, [sp, #28]
 800bb6a:	bfb8      	it	lt
 800bb6c:	9204      	strlt	r2, [sp, #16]
 800bb6e:	7823      	ldrb	r3, [r4, #0]
 800bb70:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb72:	d10a      	bne.n	800bb8a <_vfiprintf_r+0x156>
 800bb74:	7863      	ldrb	r3, [r4, #1]
 800bb76:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb78:	d132      	bne.n	800bbe0 <_vfiprintf_r+0x1ac>
 800bb7a:	9b03      	ldr	r3, [sp, #12]
 800bb7c:	1d1a      	adds	r2, r3, #4
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	9203      	str	r2, [sp, #12]
 800bb82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb86:	3402      	adds	r4, #2
 800bb88:	9305      	str	r3, [sp, #20]
 800bb8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc60 <_vfiprintf_r+0x22c>
 800bb8e:	7821      	ldrb	r1, [r4, #0]
 800bb90:	2203      	movs	r2, #3
 800bb92:	4650      	mov	r0, sl
 800bb94:	f7f4 fb3c 	bl	8000210 <memchr>
 800bb98:	b138      	cbz	r0, 800bbaa <_vfiprintf_r+0x176>
 800bb9a:	9b04      	ldr	r3, [sp, #16]
 800bb9c:	eba0 000a 	sub.w	r0, r0, sl
 800bba0:	2240      	movs	r2, #64	@ 0x40
 800bba2:	4082      	lsls	r2, r0
 800bba4:	4313      	orrs	r3, r2
 800bba6:	3401      	adds	r4, #1
 800bba8:	9304      	str	r3, [sp, #16]
 800bbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbae:	4829      	ldr	r0, [pc, #164]	@ (800bc54 <_vfiprintf_r+0x220>)
 800bbb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbb4:	2206      	movs	r2, #6
 800bbb6:	f7f4 fb2b 	bl	8000210 <memchr>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d03f      	beq.n	800bc3e <_vfiprintf_r+0x20a>
 800bbbe:	4b26      	ldr	r3, [pc, #152]	@ (800bc58 <_vfiprintf_r+0x224>)
 800bbc0:	bb1b      	cbnz	r3, 800bc0a <_vfiprintf_r+0x1d6>
 800bbc2:	9b03      	ldr	r3, [sp, #12]
 800bbc4:	3307      	adds	r3, #7
 800bbc6:	f023 0307 	bic.w	r3, r3, #7
 800bbca:	3308      	adds	r3, #8
 800bbcc:	9303      	str	r3, [sp, #12]
 800bbce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd0:	443b      	add	r3, r7
 800bbd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbd4:	e76a      	b.n	800baac <_vfiprintf_r+0x78>
 800bbd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbda:	460c      	mov	r4, r1
 800bbdc:	2001      	movs	r0, #1
 800bbde:	e7a8      	b.n	800bb32 <_vfiprintf_r+0xfe>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	3401      	adds	r4, #1
 800bbe4:	9305      	str	r3, [sp, #20]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	f04f 0c0a 	mov.w	ip, #10
 800bbec:	4620      	mov	r0, r4
 800bbee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf2:	3a30      	subs	r2, #48	@ 0x30
 800bbf4:	2a09      	cmp	r2, #9
 800bbf6:	d903      	bls.n	800bc00 <_vfiprintf_r+0x1cc>
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0c6      	beq.n	800bb8a <_vfiprintf_r+0x156>
 800bbfc:	9105      	str	r1, [sp, #20]
 800bbfe:	e7c4      	b.n	800bb8a <_vfiprintf_r+0x156>
 800bc00:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc04:	4604      	mov	r4, r0
 800bc06:	2301      	movs	r3, #1
 800bc08:	e7f0      	b.n	800bbec <_vfiprintf_r+0x1b8>
 800bc0a:	ab03      	add	r3, sp, #12
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	462a      	mov	r2, r5
 800bc10:	4b12      	ldr	r3, [pc, #72]	@ (800bc5c <_vfiprintf_r+0x228>)
 800bc12:	a904      	add	r1, sp, #16
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7fd fb63 	bl	80092e0 <_printf_float>
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	1c78      	adds	r0, r7, #1
 800bc1e:	d1d6      	bne.n	800bbce <_vfiprintf_r+0x19a>
 800bc20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc22:	07d9      	lsls	r1, r3, #31
 800bc24:	d405      	bmi.n	800bc32 <_vfiprintf_r+0x1fe>
 800bc26:	89ab      	ldrh	r3, [r5, #12]
 800bc28:	059a      	lsls	r2, r3, #22
 800bc2a:	d402      	bmi.n	800bc32 <_vfiprintf_r+0x1fe>
 800bc2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc2e:	f7fe f925 	bl	8009e7c <__retarget_lock_release_recursive>
 800bc32:	89ab      	ldrh	r3, [r5, #12]
 800bc34:	065b      	lsls	r3, r3, #25
 800bc36:	f53f af1f 	bmi.w	800ba78 <_vfiprintf_r+0x44>
 800bc3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc3c:	e71e      	b.n	800ba7c <_vfiprintf_r+0x48>
 800bc3e:	ab03      	add	r3, sp, #12
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	462a      	mov	r2, r5
 800bc44:	4b05      	ldr	r3, [pc, #20]	@ (800bc5c <_vfiprintf_r+0x228>)
 800bc46:	a904      	add	r1, sp, #16
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f7fd fde1 	bl	8009810 <_printf_i>
 800bc4e:	e7e4      	b.n	800bc1a <_vfiprintf_r+0x1e6>
 800bc50:	0800d852 	.word	0x0800d852
 800bc54:	0800d85c 	.word	0x0800d85c
 800bc58:	080092e1 	.word	0x080092e1
 800bc5c:	0800ba11 	.word	0x0800ba11
 800bc60:	0800d858 	.word	0x0800d858

0800bc64 <__swbuf_r>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	460e      	mov	r6, r1
 800bc68:	4614      	mov	r4, r2
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	b118      	cbz	r0, 800bc76 <__swbuf_r+0x12>
 800bc6e:	6a03      	ldr	r3, [r0, #32]
 800bc70:	b90b      	cbnz	r3, 800bc76 <__swbuf_r+0x12>
 800bc72:	f7fd ff77 	bl	8009b64 <__sinit>
 800bc76:	69a3      	ldr	r3, [r4, #24]
 800bc78:	60a3      	str	r3, [r4, #8]
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	071a      	lsls	r2, r3, #28
 800bc7e:	d501      	bpl.n	800bc84 <__swbuf_r+0x20>
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	b943      	cbnz	r3, 800bc96 <__swbuf_r+0x32>
 800bc84:	4621      	mov	r1, r4
 800bc86:	4628      	mov	r0, r5
 800bc88:	f000 f82a 	bl	800bce0 <__swsetup_r>
 800bc8c:	b118      	cbz	r0, 800bc96 <__swbuf_r+0x32>
 800bc8e:	f04f 37ff 	mov.w	r7, #4294967295
 800bc92:	4638      	mov	r0, r7
 800bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	6922      	ldr	r2, [r4, #16]
 800bc9a:	1a98      	subs	r0, r3, r2
 800bc9c:	6963      	ldr	r3, [r4, #20]
 800bc9e:	b2f6      	uxtb	r6, r6
 800bca0:	4283      	cmp	r3, r0
 800bca2:	4637      	mov	r7, r6
 800bca4:	dc05      	bgt.n	800bcb2 <__swbuf_r+0x4e>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f7ff fda7 	bl	800b7fc <_fflush_r>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d1ed      	bne.n	800bc8e <__swbuf_r+0x2a>
 800bcb2:	68a3      	ldr	r3, [r4, #8]
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	60a3      	str	r3, [r4, #8]
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	6022      	str	r2, [r4, #0]
 800bcbe:	701e      	strb	r6, [r3, #0]
 800bcc0:	6962      	ldr	r2, [r4, #20]
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d004      	beq.n	800bcd2 <__swbuf_r+0x6e>
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	07db      	lsls	r3, r3, #31
 800bccc:	d5e1      	bpl.n	800bc92 <__swbuf_r+0x2e>
 800bcce:	2e0a      	cmp	r6, #10
 800bcd0:	d1df      	bne.n	800bc92 <__swbuf_r+0x2e>
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f7ff fd91 	bl	800b7fc <_fflush_r>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d0d9      	beq.n	800bc92 <__swbuf_r+0x2e>
 800bcde:	e7d6      	b.n	800bc8e <__swbuf_r+0x2a>

0800bce0 <__swsetup_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4b29      	ldr	r3, [pc, #164]	@ (800bd88 <__swsetup_r+0xa8>)
 800bce4:	4605      	mov	r5, r0
 800bce6:	6818      	ldr	r0, [r3, #0]
 800bce8:	460c      	mov	r4, r1
 800bcea:	b118      	cbz	r0, 800bcf4 <__swsetup_r+0x14>
 800bcec:	6a03      	ldr	r3, [r0, #32]
 800bcee:	b90b      	cbnz	r3, 800bcf4 <__swsetup_r+0x14>
 800bcf0:	f7fd ff38 	bl	8009b64 <__sinit>
 800bcf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcf8:	0719      	lsls	r1, r3, #28
 800bcfa:	d422      	bmi.n	800bd42 <__swsetup_r+0x62>
 800bcfc:	06da      	lsls	r2, r3, #27
 800bcfe:	d407      	bmi.n	800bd10 <__swsetup_r+0x30>
 800bd00:	2209      	movs	r2, #9
 800bd02:	602a      	str	r2, [r5, #0]
 800bd04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd08:	81a3      	strh	r3, [r4, #12]
 800bd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd0e:	e033      	b.n	800bd78 <__swsetup_r+0x98>
 800bd10:	0758      	lsls	r0, r3, #29
 800bd12:	d512      	bpl.n	800bd3a <__swsetup_r+0x5a>
 800bd14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd16:	b141      	cbz	r1, 800bd2a <__swsetup_r+0x4a>
 800bd18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd1c:	4299      	cmp	r1, r3
 800bd1e:	d002      	beq.n	800bd26 <__swsetup_r+0x46>
 800bd20:	4628      	mov	r0, r5
 800bd22:	f7fe ff15 	bl	800ab50 <_free_r>
 800bd26:	2300      	movs	r3, #0
 800bd28:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd30:	81a3      	strh	r3, [r4, #12]
 800bd32:	2300      	movs	r3, #0
 800bd34:	6063      	str	r3, [r4, #4]
 800bd36:	6923      	ldr	r3, [r4, #16]
 800bd38:	6023      	str	r3, [r4, #0]
 800bd3a:	89a3      	ldrh	r3, [r4, #12]
 800bd3c:	f043 0308 	orr.w	r3, r3, #8
 800bd40:	81a3      	strh	r3, [r4, #12]
 800bd42:	6923      	ldr	r3, [r4, #16]
 800bd44:	b94b      	cbnz	r3, 800bd5a <__swsetup_r+0x7a>
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd50:	d003      	beq.n	800bd5a <__swsetup_r+0x7a>
 800bd52:	4621      	mov	r1, r4
 800bd54:	4628      	mov	r0, r5
 800bd56:	f000 f883 	bl	800be60 <__smakebuf_r>
 800bd5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd5e:	f013 0201 	ands.w	r2, r3, #1
 800bd62:	d00a      	beq.n	800bd7a <__swsetup_r+0x9a>
 800bd64:	2200      	movs	r2, #0
 800bd66:	60a2      	str	r2, [r4, #8]
 800bd68:	6962      	ldr	r2, [r4, #20]
 800bd6a:	4252      	negs	r2, r2
 800bd6c:	61a2      	str	r2, [r4, #24]
 800bd6e:	6922      	ldr	r2, [r4, #16]
 800bd70:	b942      	cbnz	r2, 800bd84 <__swsetup_r+0xa4>
 800bd72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd76:	d1c5      	bne.n	800bd04 <__swsetup_r+0x24>
 800bd78:	bd38      	pop	{r3, r4, r5, pc}
 800bd7a:	0799      	lsls	r1, r3, #30
 800bd7c:	bf58      	it	pl
 800bd7e:	6962      	ldrpl	r2, [r4, #20]
 800bd80:	60a2      	str	r2, [r4, #8]
 800bd82:	e7f4      	b.n	800bd6e <__swsetup_r+0x8e>
 800bd84:	2000      	movs	r0, #0
 800bd86:	e7f7      	b.n	800bd78 <__swsetup_r+0x98>
 800bd88:	20000018 	.word	0x20000018

0800bd8c <_raise_r>:
 800bd8c:	291f      	cmp	r1, #31
 800bd8e:	b538      	push	{r3, r4, r5, lr}
 800bd90:	4605      	mov	r5, r0
 800bd92:	460c      	mov	r4, r1
 800bd94:	d904      	bls.n	800bda0 <_raise_r+0x14>
 800bd96:	2316      	movs	r3, #22
 800bd98:	6003      	str	r3, [r0, #0]
 800bd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bda2:	b112      	cbz	r2, 800bdaa <_raise_r+0x1e>
 800bda4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bda8:	b94b      	cbnz	r3, 800bdbe <_raise_r+0x32>
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f000 f830 	bl	800be10 <_getpid_r>
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	4601      	mov	r1, r0
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdba:	f000 b817 	b.w	800bdec <_kill_r>
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d00a      	beq.n	800bdd8 <_raise_r+0x4c>
 800bdc2:	1c59      	adds	r1, r3, #1
 800bdc4:	d103      	bne.n	800bdce <_raise_r+0x42>
 800bdc6:	2316      	movs	r3, #22
 800bdc8:	6003      	str	r3, [r0, #0]
 800bdca:	2001      	movs	r0, #1
 800bdcc:	e7e7      	b.n	800bd9e <_raise_r+0x12>
 800bdce:	2100      	movs	r1, #0
 800bdd0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	4798      	blx	r3
 800bdd8:	2000      	movs	r0, #0
 800bdda:	e7e0      	b.n	800bd9e <_raise_r+0x12>

0800bddc <raise>:
 800bddc:	4b02      	ldr	r3, [pc, #8]	@ (800bde8 <raise+0xc>)
 800bdde:	4601      	mov	r1, r0
 800bde0:	6818      	ldr	r0, [r3, #0]
 800bde2:	f7ff bfd3 	b.w	800bd8c <_raise_r>
 800bde6:	bf00      	nop
 800bde8:	20000018 	.word	0x20000018

0800bdec <_kill_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4d07      	ldr	r5, [pc, #28]	@ (800be0c <_kill_r+0x20>)
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	4608      	mov	r0, r1
 800bdf6:	4611      	mov	r1, r2
 800bdf8:	602b      	str	r3, [r5, #0]
 800bdfa:	f7f9 f800 	bl	8004dfe <_kill>
 800bdfe:	1c43      	adds	r3, r0, #1
 800be00:	d102      	bne.n	800be08 <_kill_r+0x1c>
 800be02:	682b      	ldr	r3, [r5, #0]
 800be04:	b103      	cbz	r3, 800be08 <_kill_r+0x1c>
 800be06:	6023      	str	r3, [r4, #0]
 800be08:	bd38      	pop	{r3, r4, r5, pc}
 800be0a:	bf00      	nop
 800be0c:	20000ebc 	.word	0x20000ebc

0800be10 <_getpid_r>:
 800be10:	f7f8 bfed 	b.w	8004dee <_getpid>

0800be14 <__swhatbuf_r>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	460c      	mov	r4, r1
 800be18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be1c:	2900      	cmp	r1, #0
 800be1e:	b096      	sub	sp, #88	@ 0x58
 800be20:	4615      	mov	r5, r2
 800be22:	461e      	mov	r6, r3
 800be24:	da0d      	bge.n	800be42 <__swhatbuf_r+0x2e>
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be2c:	f04f 0100 	mov.w	r1, #0
 800be30:	bf14      	ite	ne
 800be32:	2340      	movne	r3, #64	@ 0x40
 800be34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be38:	2000      	movs	r0, #0
 800be3a:	6031      	str	r1, [r6, #0]
 800be3c:	602b      	str	r3, [r5, #0]
 800be3e:	b016      	add	sp, #88	@ 0x58
 800be40:	bd70      	pop	{r4, r5, r6, pc}
 800be42:	466a      	mov	r2, sp
 800be44:	f000 f848 	bl	800bed8 <_fstat_r>
 800be48:	2800      	cmp	r0, #0
 800be4a:	dbec      	blt.n	800be26 <__swhatbuf_r+0x12>
 800be4c:	9901      	ldr	r1, [sp, #4]
 800be4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be56:	4259      	negs	r1, r3
 800be58:	4159      	adcs	r1, r3
 800be5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be5e:	e7eb      	b.n	800be38 <__swhatbuf_r+0x24>

0800be60 <__smakebuf_r>:
 800be60:	898b      	ldrh	r3, [r1, #12]
 800be62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be64:	079d      	lsls	r5, r3, #30
 800be66:	4606      	mov	r6, r0
 800be68:	460c      	mov	r4, r1
 800be6a:	d507      	bpl.n	800be7c <__smakebuf_r+0x1c>
 800be6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	6123      	str	r3, [r4, #16]
 800be74:	2301      	movs	r3, #1
 800be76:	6163      	str	r3, [r4, #20]
 800be78:	b003      	add	sp, #12
 800be7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be7c:	ab01      	add	r3, sp, #4
 800be7e:	466a      	mov	r2, sp
 800be80:	f7ff ffc8 	bl	800be14 <__swhatbuf_r>
 800be84:	9f00      	ldr	r7, [sp, #0]
 800be86:	4605      	mov	r5, r0
 800be88:	4639      	mov	r1, r7
 800be8a:	4630      	mov	r0, r6
 800be8c:	f7fe fed4 	bl	800ac38 <_malloc_r>
 800be90:	b948      	cbnz	r0, 800bea6 <__smakebuf_r+0x46>
 800be92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be96:	059a      	lsls	r2, r3, #22
 800be98:	d4ee      	bmi.n	800be78 <__smakebuf_r+0x18>
 800be9a:	f023 0303 	bic.w	r3, r3, #3
 800be9e:	f043 0302 	orr.w	r3, r3, #2
 800bea2:	81a3      	strh	r3, [r4, #12]
 800bea4:	e7e2      	b.n	800be6c <__smakebuf_r+0xc>
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	6020      	str	r0, [r4, #0]
 800beaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	9b01      	ldr	r3, [sp, #4]
 800beb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800beb6:	b15b      	cbz	r3, 800bed0 <__smakebuf_r+0x70>
 800beb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bebc:	4630      	mov	r0, r6
 800bebe:	f000 f81d 	bl	800befc <_isatty_r>
 800bec2:	b128      	cbz	r0, 800bed0 <__smakebuf_r+0x70>
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	f023 0303 	bic.w	r3, r3, #3
 800beca:	f043 0301 	orr.w	r3, r3, #1
 800bece:	81a3      	strh	r3, [r4, #12]
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	431d      	orrs	r5, r3
 800bed4:	81a5      	strh	r5, [r4, #12]
 800bed6:	e7cf      	b.n	800be78 <__smakebuf_r+0x18>

0800bed8 <_fstat_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4d07      	ldr	r5, [pc, #28]	@ (800bef8 <_fstat_r+0x20>)
 800bedc:	2300      	movs	r3, #0
 800bede:	4604      	mov	r4, r0
 800bee0:	4608      	mov	r0, r1
 800bee2:	4611      	mov	r1, r2
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	f7f8 ffea 	bl	8004ebe <_fstat>
 800beea:	1c43      	adds	r3, r0, #1
 800beec:	d102      	bne.n	800bef4 <_fstat_r+0x1c>
 800beee:	682b      	ldr	r3, [r5, #0]
 800bef0:	b103      	cbz	r3, 800bef4 <_fstat_r+0x1c>
 800bef2:	6023      	str	r3, [r4, #0]
 800bef4:	bd38      	pop	{r3, r4, r5, pc}
 800bef6:	bf00      	nop
 800bef8:	20000ebc 	.word	0x20000ebc

0800befc <_isatty_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4d06      	ldr	r5, [pc, #24]	@ (800bf18 <_isatty_r+0x1c>)
 800bf00:	2300      	movs	r3, #0
 800bf02:	4604      	mov	r4, r0
 800bf04:	4608      	mov	r0, r1
 800bf06:	602b      	str	r3, [r5, #0]
 800bf08:	f7f8 ffe9 	bl	8004ede <_isatty>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_isatty_r+0x1a>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_isatty_r+0x1a>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	20000ebc 	.word	0x20000ebc

0800bf1c <powf>:
 800bf1c:	b508      	push	{r3, lr}
 800bf1e:	ed2d 8b04 	vpush	{d8-d9}
 800bf22:	eeb0 8a60 	vmov.f32	s16, s1
 800bf26:	eeb0 9a40 	vmov.f32	s18, s0
 800bf2a:	f000 f859 	bl	800bfe0 <__ieee754_powf>
 800bf2e:	eeb4 8a48 	vcmp.f32	s16, s16
 800bf32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf36:	eef0 8a40 	vmov.f32	s17, s0
 800bf3a:	d63e      	bvs.n	800bfba <powf+0x9e>
 800bf3c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bf40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf44:	d112      	bne.n	800bf6c <powf+0x50>
 800bf46:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4e:	d039      	beq.n	800bfc4 <powf+0xa8>
 800bf50:	eeb0 0a48 	vmov.f32	s0, s16
 800bf54:	f000 f839 	bl	800bfca <finitef>
 800bf58:	b378      	cbz	r0, 800bfba <powf+0x9e>
 800bf5a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf62:	d52a      	bpl.n	800bfba <powf+0x9e>
 800bf64:	f7fd ff5e 	bl	8009e24 <__errno>
 800bf68:	2322      	movs	r3, #34	@ 0x22
 800bf6a:	e014      	b.n	800bf96 <powf+0x7a>
 800bf6c:	f000 f82d 	bl	800bfca <finitef>
 800bf70:	b998      	cbnz	r0, 800bf9a <powf+0x7e>
 800bf72:	eeb0 0a49 	vmov.f32	s0, s18
 800bf76:	f000 f828 	bl	800bfca <finitef>
 800bf7a:	b170      	cbz	r0, 800bf9a <powf+0x7e>
 800bf7c:	eeb0 0a48 	vmov.f32	s0, s16
 800bf80:	f000 f823 	bl	800bfca <finitef>
 800bf84:	b148      	cbz	r0, 800bf9a <powf+0x7e>
 800bf86:	eef4 8a68 	vcmp.f32	s17, s17
 800bf8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf8e:	d7e9      	bvc.n	800bf64 <powf+0x48>
 800bf90:	f7fd ff48 	bl	8009e24 <__errno>
 800bf94:	2321      	movs	r3, #33	@ 0x21
 800bf96:	6003      	str	r3, [r0, #0]
 800bf98:	e00f      	b.n	800bfba <powf+0x9e>
 800bf9a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bf9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa2:	d10a      	bne.n	800bfba <powf+0x9e>
 800bfa4:	eeb0 0a49 	vmov.f32	s0, s18
 800bfa8:	f000 f80f 	bl	800bfca <finitef>
 800bfac:	b128      	cbz	r0, 800bfba <powf+0x9e>
 800bfae:	eeb0 0a48 	vmov.f32	s0, s16
 800bfb2:	f000 f80a 	bl	800bfca <finitef>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d1d4      	bne.n	800bf64 <powf+0x48>
 800bfba:	eeb0 0a68 	vmov.f32	s0, s17
 800bfbe:	ecbd 8b04 	vpop	{d8-d9}
 800bfc2:	bd08      	pop	{r3, pc}
 800bfc4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800bfc8:	e7f7      	b.n	800bfba <powf+0x9e>

0800bfca <finitef>:
 800bfca:	ee10 3a10 	vmov	r3, s0
 800bfce:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800bfd2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800bfd6:	bfac      	ite	ge
 800bfd8:	2000      	movge	r0, #0
 800bfda:	2001      	movlt	r0, #1
 800bfdc:	4770      	bx	lr
	...

0800bfe0 <__ieee754_powf>:
 800bfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe4:	ee10 4a90 	vmov	r4, s1
 800bfe8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800bfec:	ed2d 8b02 	vpush	{d8}
 800bff0:	ee10 6a10 	vmov	r6, s0
 800bff4:	eeb0 8a40 	vmov.f32	s16, s0
 800bff8:	eef0 8a60 	vmov.f32	s17, s1
 800bffc:	d10c      	bne.n	800c018 <__ieee754_powf+0x38>
 800bffe:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800c002:	0076      	lsls	r6, r6, #1
 800c004:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800c008:	f240 8274 	bls.w	800c4f4 <__ieee754_powf+0x514>
 800c00c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c010:	ecbd 8b02 	vpop	{d8}
 800c014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c018:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800c01c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800c020:	d802      	bhi.n	800c028 <__ieee754_powf+0x48>
 800c022:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c026:	d908      	bls.n	800c03a <__ieee754_powf+0x5a>
 800c028:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800c02c:	d1ee      	bne.n	800c00c <__ieee754_powf+0x2c>
 800c02e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800c032:	0064      	lsls	r4, r4, #1
 800c034:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800c038:	e7e6      	b.n	800c008 <__ieee754_powf+0x28>
 800c03a:	2e00      	cmp	r6, #0
 800c03c:	da1f      	bge.n	800c07e <__ieee754_powf+0x9e>
 800c03e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800c042:	f080 8260 	bcs.w	800c506 <__ieee754_powf+0x526>
 800c046:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800c04a:	d32f      	bcc.n	800c0ac <__ieee754_powf+0xcc>
 800c04c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800c050:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800c054:	fa49 f503 	asr.w	r5, r9, r3
 800c058:	fa05 f303 	lsl.w	r3, r5, r3
 800c05c:	454b      	cmp	r3, r9
 800c05e:	d123      	bne.n	800c0a8 <__ieee754_powf+0xc8>
 800c060:	f005 0501 	and.w	r5, r5, #1
 800c064:	f1c5 0502 	rsb	r5, r5, #2
 800c068:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800c06c:	d11f      	bne.n	800c0ae <__ieee754_powf+0xce>
 800c06e:	2c00      	cmp	r4, #0
 800c070:	f280 8246 	bge.w	800c500 <__ieee754_powf+0x520>
 800c074:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c078:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c07c:	e7c8      	b.n	800c010 <__ieee754_powf+0x30>
 800c07e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c082:	d111      	bne.n	800c0a8 <__ieee754_powf+0xc8>
 800c084:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800c088:	f000 8234 	beq.w	800c4f4 <__ieee754_powf+0x514>
 800c08c:	d906      	bls.n	800c09c <__ieee754_powf+0xbc>
 800c08e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800c3a4 <__ieee754_powf+0x3c4>
 800c092:	2c00      	cmp	r4, #0
 800c094:	bfa8      	it	ge
 800c096:	eeb0 0a68 	vmovge.f32	s0, s17
 800c09a:	e7b9      	b.n	800c010 <__ieee754_powf+0x30>
 800c09c:	2c00      	cmp	r4, #0
 800c09e:	f280 822c 	bge.w	800c4fa <__ieee754_powf+0x51a>
 800c0a2:	eeb1 0a68 	vneg.f32	s0, s17
 800c0a6:	e7b3      	b.n	800c010 <__ieee754_powf+0x30>
 800c0a8:	2500      	movs	r5, #0
 800c0aa:	e7dd      	b.n	800c068 <__ieee754_powf+0x88>
 800c0ac:	2500      	movs	r5, #0
 800c0ae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800c0b2:	d102      	bne.n	800c0ba <__ieee754_powf+0xda>
 800c0b4:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c0b8:	e7aa      	b.n	800c010 <__ieee754_powf+0x30>
 800c0ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800c0be:	f040 8227 	bne.w	800c510 <__ieee754_powf+0x530>
 800c0c2:	2e00      	cmp	r6, #0
 800c0c4:	f2c0 8224 	blt.w	800c510 <__ieee754_powf+0x530>
 800c0c8:	eeb0 0a48 	vmov.f32	s0, s16
 800c0cc:	ecbd 8b02 	vpop	{d8}
 800c0d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d4:	f000 bae6 	b.w	800c6a4 <__ieee754_sqrtf>
 800c0d8:	2d01      	cmp	r5, #1
 800c0da:	d199      	bne.n	800c010 <__ieee754_powf+0x30>
 800c0dc:	eeb1 0a40 	vneg.f32	s0, s0
 800c0e0:	e796      	b.n	800c010 <__ieee754_powf+0x30>
 800c0e2:	0ff0      	lsrs	r0, r6, #31
 800c0e4:	3801      	subs	r0, #1
 800c0e6:	ea55 0300 	orrs.w	r3, r5, r0
 800c0ea:	d104      	bne.n	800c0f6 <__ieee754_powf+0x116>
 800c0ec:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c0f0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c0f4:	e78c      	b.n	800c010 <__ieee754_powf+0x30>
 800c0f6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800c0fa:	d96d      	bls.n	800c1d8 <__ieee754_powf+0x1f8>
 800c0fc:	4baa      	ldr	r3, [pc, #680]	@ (800c3a8 <__ieee754_powf+0x3c8>)
 800c0fe:	4598      	cmp	r8, r3
 800c100:	d808      	bhi.n	800c114 <__ieee754_powf+0x134>
 800c102:	2c00      	cmp	r4, #0
 800c104:	da0b      	bge.n	800c11e <__ieee754_powf+0x13e>
 800c106:	2000      	movs	r0, #0
 800c108:	ecbd 8b02 	vpop	{d8}
 800c10c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c110:	f000 bac2 	b.w	800c698 <__math_oflowf>
 800c114:	4ba5      	ldr	r3, [pc, #660]	@ (800c3ac <__ieee754_powf+0x3cc>)
 800c116:	4598      	cmp	r8, r3
 800c118:	d908      	bls.n	800c12c <__ieee754_powf+0x14c>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	dcf3      	bgt.n	800c106 <__ieee754_powf+0x126>
 800c11e:	2000      	movs	r0, #0
 800c120:	ecbd 8b02 	vpop	{d8}
 800c124:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c128:	f000 bab0 	b.w	800c68c <__math_uflowf>
 800c12c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c130:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c134:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800c3b0 <__ieee754_powf+0x3d0>
 800c138:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800c13c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c140:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c144:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c148:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c14c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800c3b4 <__ieee754_powf+0x3d4>
 800c150:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c154:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800c3b8 <__ieee754_powf+0x3d8>
 800c158:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c15c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800c3bc <__ieee754_powf+0x3dc>
 800c160:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c164:	eeb0 7a67 	vmov.f32	s14, s15
 800c168:	eea0 7a26 	vfma.f32	s14, s0, s13
 800c16c:	ee17 3a10 	vmov	r3, s14
 800c170:	f36f 030b 	bfc	r3, #0, #12
 800c174:	ee07 3a10 	vmov	s14, r3
 800c178:	eeb0 6a47 	vmov.f32	s12, s14
 800c17c:	eea0 6a66 	vfms.f32	s12, s0, s13
 800c180:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c184:	3d01      	subs	r5, #1
 800c186:	4305      	orrs	r5, r0
 800c188:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c18c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800c190:	f36f 040b 	bfc	r4, #0, #12
 800c194:	bf18      	it	ne
 800c196:	eeb0 8a66 	vmovne.f32	s16, s13
 800c19a:	ee06 4a90 	vmov	s13, r4
 800c19e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c1a2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800c1a6:	ee67 7a26 	vmul.f32	s15, s14, s13
 800c1aa:	eee6 0a07 	vfma.f32	s1, s12, s14
 800c1ae:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c1b2:	ee17 1a10 	vmov	r1, s14
 800c1b6:	2900      	cmp	r1, #0
 800c1b8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1bc:	f340 80dd 	ble.w	800c37a <__ieee754_powf+0x39a>
 800c1c0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800c1c4:	f240 80ca 	bls.w	800c35c <__ieee754_powf+0x37c>
 800c1c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d0:	bf4c      	ite	mi
 800c1d2:	2001      	movmi	r0, #1
 800c1d4:	2000      	movpl	r0, #0
 800c1d6:	e797      	b.n	800c108 <__ieee754_powf+0x128>
 800c1d8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c1dc:	bf01      	itttt	eq
 800c1de:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c3c0 <__ieee754_powf+0x3e0>
 800c1e2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c1e6:	f06f 0317 	mvneq.w	r3, #23
 800c1ea:	ee17 7a90 	vmoveq	r7, s15
 800c1ee:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800c1f2:	bf18      	it	ne
 800c1f4:	2300      	movne	r3, #0
 800c1f6:	3a7f      	subs	r2, #127	@ 0x7f
 800c1f8:	441a      	add	r2, r3
 800c1fa:	4b72      	ldr	r3, [pc, #456]	@ (800c3c4 <__ieee754_powf+0x3e4>)
 800c1fc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c200:	429f      	cmp	r7, r3
 800c202:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c206:	dd06      	ble.n	800c216 <__ieee754_powf+0x236>
 800c208:	4b6f      	ldr	r3, [pc, #444]	@ (800c3c8 <__ieee754_powf+0x3e8>)
 800c20a:	429f      	cmp	r7, r3
 800c20c:	f340 80a4 	ble.w	800c358 <__ieee754_powf+0x378>
 800c210:	3201      	adds	r2, #1
 800c212:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c216:	2600      	movs	r6, #0
 800c218:	4b6c      	ldr	r3, [pc, #432]	@ (800c3cc <__ieee754_powf+0x3ec>)
 800c21a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c21e:	ee07 1a10 	vmov	s14, r1
 800c222:	edd3 5a00 	vldr	s11, [r3]
 800c226:	4b6a      	ldr	r3, [pc, #424]	@ (800c3d0 <__ieee754_powf+0x3f0>)
 800c228:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c22c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c230:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c234:	1049      	asrs	r1, r1, #1
 800c236:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c23a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c23e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c242:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c246:	ee07 1a90 	vmov	s15, r1
 800c24a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c24e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c252:	ee15 7a10 	vmov	r7, s10
 800c256:	401f      	ands	r7, r3
 800c258:	ee06 7a90 	vmov	s13, r7
 800c25c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c260:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c264:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c268:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c26c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c3d4 <__ieee754_powf+0x3f4>
 800c270:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c3d8 <__ieee754_powf+0x3f8>
 800c274:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c278:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c3dc <__ieee754_powf+0x3fc>
 800c27c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c280:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c3b0 <__ieee754_powf+0x3d0>
 800c284:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c288:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c3e0 <__ieee754_powf+0x400>
 800c28c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c290:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c3e4 <__ieee754_powf+0x404>
 800c294:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c298:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c29c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c2a0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c2a4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c2a8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c2ac:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c2b0:	eef0 5a67 	vmov.f32	s11, s15
 800c2b4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c2b8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c2bc:	ee15 1a90 	vmov	r1, s11
 800c2c0:	4019      	ands	r1, r3
 800c2c2:	ee05 1a90 	vmov	s11, r1
 800c2c6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c2ca:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c2ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2d2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c2d6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c2da:	eeb0 6a67 	vmov.f32	s12, s15
 800c2de:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c2e2:	ee16 1a10 	vmov	r1, s12
 800c2e6:	4019      	ands	r1, r3
 800c2e8:	ee06 1a10 	vmov	s12, r1
 800c2ec:	eeb0 7a46 	vmov.f32	s14, s12
 800c2f0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c2f4:	493c      	ldr	r1, [pc, #240]	@ (800c3e8 <__ieee754_powf+0x408>)
 800c2f6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c2fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2fe:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c3ec <__ieee754_powf+0x40c>
 800c302:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c3f0 <__ieee754_powf+0x410>
 800c306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c30a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c3f4 <__ieee754_powf+0x414>
 800c30e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c312:	ed91 7a00 	vldr	s14, [r1]
 800c316:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c31a:	ee07 2a10 	vmov	s14, r2
 800c31e:	4a36      	ldr	r2, [pc, #216]	@ (800c3f8 <__ieee754_powf+0x418>)
 800c320:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800c324:	eeb0 7a67 	vmov.f32	s14, s15
 800c328:	eea6 7a25 	vfma.f32	s14, s12, s11
 800c32c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c330:	ed92 5a00 	vldr	s10, [r2]
 800c334:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c338:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c33c:	ee17 2a10 	vmov	r2, s14
 800c340:	401a      	ands	r2, r3
 800c342:	ee07 2a10 	vmov	s14, r2
 800c346:	ee77 6a66 	vsub.f32	s13, s14, s13
 800c34a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800c34e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800c352:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c356:	e715      	b.n	800c184 <__ieee754_powf+0x1a4>
 800c358:	2601      	movs	r6, #1
 800c35a:	e75d      	b.n	800c218 <__ieee754_powf+0x238>
 800c35c:	d152      	bne.n	800c404 <__ieee754_powf+0x424>
 800c35e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c3fc <__ieee754_powf+0x41c>
 800c362:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c366:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c36a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c372:	f73f af29 	bgt.w	800c1c8 <__ieee754_powf+0x1e8>
 800c376:	2386      	movs	r3, #134	@ 0x86
 800c378:	e048      	b.n	800c40c <__ieee754_powf+0x42c>
 800c37a:	4a21      	ldr	r2, [pc, #132]	@ (800c400 <__ieee754_powf+0x420>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d907      	bls.n	800c390 <__ieee754_powf+0x3b0>
 800c380:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c388:	bf4c      	ite	mi
 800c38a:	2001      	movmi	r0, #1
 800c38c:	2000      	movpl	r0, #0
 800c38e:	e6c7      	b.n	800c120 <__ieee754_powf+0x140>
 800c390:	d138      	bne.n	800c404 <__ieee754_powf+0x424>
 800c392:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c396:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c39e:	dbea      	blt.n	800c376 <__ieee754_powf+0x396>
 800c3a0:	e7ee      	b.n	800c380 <__ieee754_powf+0x3a0>
 800c3a2:	bf00      	nop
 800c3a4:	00000000 	.word	0x00000000
 800c3a8:	3f7ffff3 	.word	0x3f7ffff3
 800c3ac:	3f800007 	.word	0x3f800007
 800c3b0:	3eaaaaab 	.word	0x3eaaaaab
 800c3b4:	3fb8aa00 	.word	0x3fb8aa00
 800c3b8:	3fb8aa3b 	.word	0x3fb8aa3b
 800c3bc:	36eca570 	.word	0x36eca570
 800c3c0:	4b800000 	.word	0x4b800000
 800c3c4:	001cc471 	.word	0x001cc471
 800c3c8:	005db3d6 	.word	0x005db3d6
 800c3cc:	0800dabc 	.word	0x0800dabc
 800c3d0:	fffff000 	.word	0xfffff000
 800c3d4:	3e6c3255 	.word	0x3e6c3255
 800c3d8:	3e53f142 	.word	0x3e53f142
 800c3dc:	3e8ba305 	.word	0x3e8ba305
 800c3e0:	3edb6db7 	.word	0x3edb6db7
 800c3e4:	3f19999a 	.word	0x3f19999a
 800c3e8:	0800daac 	.word	0x0800daac
 800c3ec:	3f76384f 	.word	0x3f76384f
 800c3f0:	3f763800 	.word	0x3f763800
 800c3f4:	369dc3a0 	.word	0x369dc3a0
 800c3f8:	0800dab4 	.word	0x0800dab4
 800c3fc:	3338aa3c 	.word	0x3338aa3c
 800c400:	43160000 	.word	0x43160000
 800c404:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c408:	d96f      	bls.n	800c4ea <__ieee754_powf+0x50a>
 800c40a:	15db      	asrs	r3, r3, #23
 800c40c:	3b7e      	subs	r3, #126	@ 0x7e
 800c40e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c412:	4118      	asrs	r0, r3
 800c414:	4408      	add	r0, r1
 800c416:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c41a:	4a4e      	ldr	r2, [pc, #312]	@ (800c554 <__ieee754_powf+0x574>)
 800c41c:	3b7f      	subs	r3, #127	@ 0x7f
 800c41e:	411a      	asrs	r2, r3
 800c420:	4002      	ands	r2, r0
 800c422:	ee07 2a10 	vmov	s14, r2
 800c426:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c42a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c42e:	f1c3 0317 	rsb	r3, r3, #23
 800c432:	4118      	asrs	r0, r3
 800c434:	2900      	cmp	r1, #0
 800c436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c43a:	bfb8      	it	lt
 800c43c:	4240      	neglt	r0, r0
 800c43e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800c442:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800c558 <__ieee754_powf+0x578>
 800c446:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800c55c <__ieee754_powf+0x57c>
 800c44a:	ee16 3a90 	vmov	r3, s13
 800c44e:	f36f 030b 	bfc	r3, #0, #12
 800c452:	ee06 3a90 	vmov	s13, r3
 800c456:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c45a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c45e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c462:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800c560 <__ieee754_powf+0x580>
 800c466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c46a:	eee0 7a87 	vfma.f32	s15, s1, s14
 800c46e:	eeb0 7a67 	vmov.f32	s14, s15
 800c472:	eea6 7a86 	vfma.f32	s14, s13, s12
 800c476:	eef0 5a47 	vmov.f32	s11, s14
 800c47a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800c47e:	ee67 6a07 	vmul.f32	s13, s14, s14
 800c482:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c486:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800c564 <__ieee754_powf+0x584>
 800c48a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800c568 <__ieee754_powf+0x588>
 800c48e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c492:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800c56c <__ieee754_powf+0x58c>
 800c496:	eee6 5a26 	vfma.f32	s11, s12, s13
 800c49a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800c570 <__ieee754_powf+0x590>
 800c49e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800c4a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c574 <__ieee754_powf+0x594>
 800c4a6:	eee6 5a26 	vfma.f32	s11, s12, s13
 800c4aa:	eeb0 6a47 	vmov.f32	s12, s14
 800c4ae:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800c4b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c4b6:	ee67 5a06 	vmul.f32	s11, s14, s12
 800c4ba:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c4be:	eee7 7a27 	vfma.f32	s15, s14, s15
 800c4c2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800c4c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c4ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c4d2:	ee10 3a10 	vmov	r3, s0
 800c4d6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c4da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c4de:	da06      	bge.n	800c4ee <__ieee754_powf+0x50e>
 800c4e0:	f000 f854 	bl	800c58c <scalbnf>
 800c4e4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c4e8:	e592      	b.n	800c010 <__ieee754_powf+0x30>
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e7a7      	b.n	800c43e <__ieee754_powf+0x45e>
 800c4ee:	ee00 3a10 	vmov	s0, r3
 800c4f2:	e7f7      	b.n	800c4e4 <__ieee754_powf+0x504>
 800c4f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c4f8:	e58a      	b.n	800c010 <__ieee754_powf+0x30>
 800c4fa:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800c578 <__ieee754_powf+0x598>
 800c4fe:	e587      	b.n	800c010 <__ieee754_powf+0x30>
 800c500:	eeb0 0a48 	vmov.f32	s0, s16
 800c504:	e584      	b.n	800c010 <__ieee754_powf+0x30>
 800c506:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c50a:	f43f adbb 	beq.w	800c084 <__ieee754_powf+0xa4>
 800c50e:	2502      	movs	r5, #2
 800c510:	eeb0 0a48 	vmov.f32	s0, s16
 800c514:	f000 f832 	bl	800c57c <fabsf>
 800c518:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800c51c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800c520:	4647      	mov	r7, r8
 800c522:	d003      	beq.n	800c52c <__ieee754_powf+0x54c>
 800c524:	f1b8 0f00 	cmp.w	r8, #0
 800c528:	f47f addb 	bne.w	800c0e2 <__ieee754_powf+0x102>
 800c52c:	2c00      	cmp	r4, #0
 800c52e:	bfbc      	itt	lt
 800c530:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800c534:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c538:	2e00      	cmp	r6, #0
 800c53a:	f6bf ad69 	bge.w	800c010 <__ieee754_powf+0x30>
 800c53e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800c542:	ea58 0805 	orrs.w	r8, r8, r5
 800c546:	f47f adc7 	bne.w	800c0d8 <__ieee754_powf+0xf8>
 800c54a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c54e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c552:	e55d      	b.n	800c010 <__ieee754_powf+0x30>
 800c554:	ff800000 	.word	0xff800000
 800c558:	3f317218 	.word	0x3f317218
 800c55c:	3f317200 	.word	0x3f317200
 800c560:	35bfbe8c 	.word	0x35bfbe8c
 800c564:	b5ddea0e 	.word	0xb5ddea0e
 800c568:	3331bb4c 	.word	0x3331bb4c
 800c56c:	388ab355 	.word	0x388ab355
 800c570:	bb360b61 	.word	0xbb360b61
 800c574:	3e2aaaab 	.word	0x3e2aaaab
 800c578:	00000000 	.word	0x00000000

0800c57c <fabsf>:
 800c57c:	ee10 3a10 	vmov	r3, s0
 800c580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c584:	ee00 3a10 	vmov	s0, r3
 800c588:	4770      	bx	lr
	...

0800c58c <scalbnf>:
 800c58c:	ee10 3a10 	vmov	r3, s0
 800c590:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c594:	d02b      	beq.n	800c5ee <scalbnf+0x62>
 800c596:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c59a:	d302      	bcc.n	800c5a2 <scalbnf+0x16>
 800c59c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5a0:	4770      	bx	lr
 800c5a2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c5a6:	d123      	bne.n	800c5f0 <scalbnf+0x64>
 800c5a8:	4b24      	ldr	r3, [pc, #144]	@ (800c63c <scalbnf+0xb0>)
 800c5aa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c640 <scalbnf+0xb4>
 800c5ae:	4298      	cmp	r0, r3
 800c5b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c5b4:	db17      	blt.n	800c5e6 <scalbnf+0x5a>
 800c5b6:	ee10 3a10 	vmov	r3, s0
 800c5ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c5be:	3a19      	subs	r2, #25
 800c5c0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c5c4:	4288      	cmp	r0, r1
 800c5c6:	dd15      	ble.n	800c5f4 <scalbnf+0x68>
 800c5c8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c644 <scalbnf+0xb8>
 800c5cc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c648 <scalbnf+0xbc>
 800c5d0:	ee10 3a10 	vmov	r3, s0
 800c5d4:	eeb0 7a67 	vmov.f32	s14, s15
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	bfb8      	it	lt
 800c5dc:	eef0 7a66 	vmovlt.f32	s15, s13
 800c5e0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c5e4:	4770      	bx	lr
 800c5e6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c64c <scalbnf+0xc0>
 800c5ea:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c5ee:	4770      	bx	lr
 800c5f0:	0dd2      	lsrs	r2, r2, #23
 800c5f2:	e7e5      	b.n	800c5c0 <scalbnf+0x34>
 800c5f4:	4410      	add	r0, r2
 800c5f6:	28fe      	cmp	r0, #254	@ 0xfe
 800c5f8:	dce6      	bgt.n	800c5c8 <scalbnf+0x3c>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	dd06      	ble.n	800c60c <scalbnf+0x80>
 800c5fe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c602:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c606:	ee00 3a10 	vmov	s0, r3
 800c60a:	4770      	bx	lr
 800c60c:	f110 0f16 	cmn.w	r0, #22
 800c610:	da09      	bge.n	800c626 <scalbnf+0x9a>
 800c612:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c64c <scalbnf+0xc0>
 800c616:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c650 <scalbnf+0xc4>
 800c61a:	ee10 3a10 	vmov	r3, s0
 800c61e:	eeb0 7a67 	vmov.f32	s14, s15
 800c622:	2b00      	cmp	r3, #0
 800c624:	e7d9      	b.n	800c5da <scalbnf+0x4e>
 800c626:	3019      	adds	r0, #25
 800c628:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c62c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c630:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c654 <scalbnf+0xc8>
 800c634:	ee07 3a90 	vmov	s15, r3
 800c638:	e7d7      	b.n	800c5ea <scalbnf+0x5e>
 800c63a:	bf00      	nop
 800c63c:	ffff3cb0 	.word	0xffff3cb0
 800c640:	4c000000 	.word	0x4c000000
 800c644:	7149f2ca 	.word	0x7149f2ca
 800c648:	f149f2ca 	.word	0xf149f2ca
 800c64c:	0da24260 	.word	0x0da24260
 800c650:	8da24260 	.word	0x8da24260
 800c654:	33000000 	.word	0x33000000

0800c658 <with_errnof>:
 800c658:	b510      	push	{r4, lr}
 800c65a:	ed2d 8b02 	vpush	{d8}
 800c65e:	eeb0 8a40 	vmov.f32	s16, s0
 800c662:	4604      	mov	r4, r0
 800c664:	f7fd fbde 	bl	8009e24 <__errno>
 800c668:	eeb0 0a48 	vmov.f32	s0, s16
 800c66c:	ecbd 8b02 	vpop	{d8}
 800c670:	6004      	str	r4, [r0, #0]
 800c672:	bd10      	pop	{r4, pc}

0800c674 <xflowf>:
 800c674:	b130      	cbz	r0, 800c684 <xflowf+0x10>
 800c676:	eef1 7a40 	vneg.f32	s15, s0
 800c67a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c67e:	2022      	movs	r0, #34	@ 0x22
 800c680:	f7ff bfea 	b.w	800c658 <with_errnof>
 800c684:	eef0 7a40 	vmov.f32	s15, s0
 800c688:	e7f7      	b.n	800c67a <xflowf+0x6>
	...

0800c68c <__math_uflowf>:
 800c68c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c694 <__math_uflowf+0x8>
 800c690:	f7ff bff0 	b.w	800c674 <xflowf>
 800c694:	10000000 	.word	0x10000000

0800c698 <__math_oflowf>:
 800c698:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c6a0 <__math_oflowf+0x8>
 800c69c:	f7ff bfea 	b.w	800c674 <xflowf>
 800c6a0:	70000000 	.word	0x70000000

0800c6a4 <__ieee754_sqrtf>:
 800c6a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c6a8:	4770      	bx	lr
	...

0800c6ac <_init>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	bf00      	nop
 800c6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b2:	bc08      	pop	{r3}
 800c6b4:	469e      	mov	lr, r3
 800c6b6:	4770      	bx	lr

0800c6b8 <_fini>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	bf00      	nop
 800c6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6be:	bc08      	pop	{r3}
 800c6c0:	469e      	mov	lr, r3
 800c6c2:	4770      	bx	lr
